
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d0c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08004e18  08004e18  00005e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e3c  08004e3c  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004e3c  08004e3c  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004e3c  08004e3c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e3c  08004e3c  00005e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e40  08004e40  00005e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004e44  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000000c  08004e50  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08004e50  0000627c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4f6  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ee  00000000  00000000  0001252b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00014620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa8  00000000  00000000  000153f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e85  00000000  00000000  00015e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e754  00000000  00000000  0002dd1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c533  00000000  00000000  0003c471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c89a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003adc  00000000  00000000  000c89e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000cc4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e00 	.word	0x08004e00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08004e00 	.word	0x08004e00

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	@ 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <Set_DQ_Pin_Output>:
 * | along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * |----------------------------------------------------------------------
 */
#include "OneWire.h"

void Set_DQ_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800051c:	f107 0308 	add.w	r3, r7, #8
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800052a:	887b      	ldrh	r3, [r7, #2]
 800052c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2301      	movs	r3, #1
 8000530:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	2302      	movs	r3, #2
 8000538:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	4619      	mov	r1, r3
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f002 fe31 	bl	80031a8 <HAL_GPIO_Init>
}
 8000546:	bf00      	nop
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <Set_DQ_Pin_Input>:

void Set_DQ_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800054e:	b580      	push	{r7, lr}
 8000550:	b086      	sub	sp, #24
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	460b      	mov	r3, r1
 8000558:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800055a:	f107 0308 	add.w	r3, r7, #8
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000568:	887b      	ldrh	r3, [r7, #2]
 800056a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000570:	2301      	movs	r3, #1
 8000572:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2302      	movs	r3, #2
 8000576:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	4619      	mov	r1, r3
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f002 fe12 	bl	80031a8 <HAL_GPIO_Init>
}
 8000584:	bf00      	nop
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <TM_OneWire_Init>:


void TM_OneWire_Init(TM_OneWire_t *OneWireStruct, GPIO_TypeDef *GPIOx,
		uint16_t GPIO_Pin) {
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	4613      	mov	r3, r2
 8000598:	80fb      	strh	r3, [r7, #6]

	/* Save settings */
	OneWireStruct->GPIOx = GPIOx;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	68ba      	ldr	r2, [r7, #8]
 800059e:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	88fa      	ldrh	r2, [r7, #6]
 80005a4:	809a      	strh	r2, [r3, #4]
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <TM_OneWire_Reset>:

uint8_t TM_OneWire_Reset(TM_OneWire_t *OneWireStruct) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_OUTPUT(OneWireStruct);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	889b      	ldrh	r3, [r3, #4]
 80005c0:	4619      	mov	r1, r3
 80005c2:	4610      	mov	r0, r2
 80005c4:	f7ff ffa4 	bl	8000510 <Set_DQ_Pin_Output>
	ONEWIRE_LOW(OneWireStruct);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6818      	ldr	r0, [r3, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	889b      	ldrh	r3, [r3, #4]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	f002 ff83 	bl	80034de <HAL_GPIO_WritePin>
	ONEWIRE_DELAY(480);
 80005d8:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 80005dc:	f001 fbcc 	bl	8001d78 <Delay_us>

	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	889b      	ldrh	r3, [r3, #4]
 80005e8:	4619      	mov	r1, r3
 80005ea:	4610      	mov	r0, r2
 80005ec:	f7ff ffaf 	bl	800054e <Set_DQ_Pin_Input>
	ONEWIRE_DELAY(70);
 80005f0:	2046      	movs	r0, #70	@ 0x46
 80005f2:	f001 fbc1 	bl	8001d78 <Delay_us>

	/* Check bit value */

	if(HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin) == 0){
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	889b      	ldrh	r3, [r3, #4]
 80005fe:	4619      	mov	r1, r3
 8000600:	4610      	mov	r0, r2
 8000602:	f002 ff55 	bl	80034b0 <HAL_GPIO_ReadPin>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d102      	bne.n	8000612 <TM_OneWire_Reset+0x62>
		i = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	73fb      	strb	r3, [r7, #15]
 8000610:	e001      	b.n	8000616 <TM_OneWire_Reset+0x66>
	}else{
		i = 1;
 8000612:	2301      	movs	r3, #1
 8000614:	73fb      	strb	r3, [r7, #15]
	}

	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8000616:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 800061a:	f001 fbad 	bl	8001d78 <Delay_us>


	return i;
 800061e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <TM_OneWire_WriteBit>:

void TM_OneWire_WriteBit(TM_OneWire_t *OneWireStruct, uint8_t bit) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	70fb      	strb	r3, [r7, #3]
	if (bit) {
 8000634:	78fb      	ldrb	r3, [r7, #3]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d01e      	beq.n	8000678 <TM_OneWire_WriteBit+0x50>
		/* Set line low */
		ONEWIRE_OUTPUT(OneWireStruct);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	889b      	ldrh	r3, [r3, #4]
 8000642:	4619      	mov	r1, r3
 8000644:	4610      	mov	r0, r2
 8000646:	f7ff ff63 	bl	8000510 <Set_DQ_Pin_Output>
		ONEWIRE_LOW(OneWireStruct);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6818      	ldr	r0, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	889b      	ldrh	r3, [r3, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	4619      	mov	r1, r3
 8000656:	f002 ff42 	bl	80034de <HAL_GPIO_WritePin>
		ONEWIRE_DELAY(1);
 800065a:	2001      	movs	r0, #1
 800065c:	f001 fb8c 	bl	8001d78 <Delay_us>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	889b      	ldrh	r3, [r3, #4]
 8000668:	4619      	mov	r1, r3
 800066a:	4610      	mov	r0, r2
 800066c:	f7ff ff6f 	bl	800054e <Set_DQ_Pin_Input>

		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(60);
 8000670:	203c      	movs	r0, #60	@ 0x3c
 8000672:	f001 fb81 	bl	8001d78 <Delay_us>
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);

	}

}
 8000676:	e01a      	b.n	80006ae <TM_OneWire_WriteBit+0x86>
		ONEWIRE_OUTPUT(OneWireStruct);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	889b      	ldrh	r3, [r3, #4]
 8000680:	4619      	mov	r1, r3
 8000682:	4610      	mov	r0, r2
 8000684:	f7ff ff44 	bl	8000510 <Set_DQ_Pin_Output>
		ONEWIRE_LOW(OneWireStruct);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6818      	ldr	r0, [r3, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	889b      	ldrh	r3, [r3, #4]
 8000690:	2200      	movs	r2, #0
 8000692:	4619      	mov	r1, r3
 8000694:	f002 ff23 	bl	80034de <HAL_GPIO_WritePin>
		ONEWIRE_DELAY(60);
 8000698:	203c      	movs	r0, #60	@ 0x3c
 800069a:	f001 fb6d 	bl	8001d78 <Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	889b      	ldrh	r3, [r3, #4]
 80006a6:	4619      	mov	r1, r3
 80006a8:	4610      	mov	r0, r2
 80006aa:	f7ff ff50 	bl	800054e <Set_DQ_Pin_Input>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <TM_OneWire_ReadBit>:

uint8_t TM_OneWire_ReadBit(TM_OneWire_t *OneWireStruct) {
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b084      	sub	sp, #16
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_OUTPUT(OneWireStruct);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	889b      	ldrh	r3, [r3, #4]
 80006ca:	4619      	mov	r1, r3
 80006cc:	4610      	mov	r0, r2
 80006ce:	f7ff ff1f 	bl	8000510 <Set_DQ_Pin_Output>
	ONEWIRE_LOW(OneWireStruct);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	889b      	ldrh	r3, [r3, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	4619      	mov	r1, r3
 80006de:	f002 fefe 	bl	80034de <HAL_GPIO_WritePin>
	ONEWIRE_DELAY(3);
 80006e2:	2003      	movs	r0, #3
 80006e4:	f001 fb48 	bl	8001d78 <Delay_us>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	889b      	ldrh	r3, [r3, #4]
 80006f0:	4619      	mov	r1, r3
 80006f2:	4610      	mov	r0, r2
 80006f4:	f7ff ff2b 	bl	800054e <Set_DQ_Pin_Input>
	//ONEWIRE_DELAY(10);

	/* Read line value */
	if(HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	889b      	ldrh	r3, [r3, #4]
 8000700:	4619      	mov	r1, r3
 8000702:	4610      	mov	r0, r2
 8000704:	f002 fed4 	bl	80034b0 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <TM_OneWire_ReadBit+0x5c>
		/* Bit is HIGH */
		bit = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 8000712:	2032      	movs	r0, #50	@ 0x32
 8000714:	f001 fb30 	bl	8001d78 <Delay_us>

	/* Return bit value */
	return bit;
 8000718:	7bfb      	ldrb	r3, [r7, #15]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <TM_OneWire_WriteByte>:

void TM_OneWire_WriteByte(TM_OneWire_t *OneWireStruct, uint8_t byte) {
 8000722:	b580      	push	{r7, lr}
 8000724:	b084      	sub	sp, #16
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 800072e:	2308      	movs	r3, #8
 8000730:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8000732:	e00a      	b.n	800074a <TM_OneWire_WriteByte+0x28>
		/* LSB bit is first */
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4619      	mov	r1, r3
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f7ff ff72 	bl	8000628 <TM_OneWire_WriteBit>
		byte >>= 1;
 8000744:	78fb      	ldrb	r3, [r7, #3]
 8000746:	085b      	lsrs	r3, r3, #1
 8000748:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	1e5a      	subs	r2, r3, #1
 800074e:	73fa      	strb	r2, [r7, #15]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1ef      	bne.n	8000734 <TM_OneWire_WriteByte+0x12>
	}
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <TM_OneWire_ReadByte>:

uint8_t TM_OneWire_ReadByte(TM_OneWire_t *OneWireStruct) {
 800075e:	b580      	push	{r7, lr}
 8000760:	b084      	sub	sp, #16
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8000766:	2308      	movs	r3, #8
 8000768:	73fb      	strb	r3, [r7, #15]
 800076a:	2300      	movs	r3, #0
 800076c:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 800076e:	e00d      	b.n	800078c <TM_OneWire_ReadByte+0x2e>
		byte >>= 1;
 8000770:	7bbb      	ldrb	r3, [r7, #14]
 8000772:	085b      	lsrs	r3, r3, #1
 8000774:	73bb      	strb	r3, [r7, #14]
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ff9d 	bl	80006b6 <TM_OneWire_ReadBit>
 800077c:	4603      	mov	r3, r0
 800077e:	01db      	lsls	r3, r3, #7
 8000780:	b25a      	sxtb	r2, r3
 8000782:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000786:	4313      	orrs	r3, r2
 8000788:	b25b      	sxtb	r3, r3
 800078a:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	1e5a      	subs	r2, r3, #1
 8000790:	73fa      	strb	r2, [r7, #15]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1ec      	bne.n	8000770 <TM_OneWire_ReadByte+0x12>
	}

	return byte;
 8000796:	7bbb      	ldrb	r3, [r7, #14]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <TM_OneWire_First>:

uint8_t TM_OneWire_First(TM_OneWire_t *OneWireStruct) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	TM_OneWire_ResetSearch(OneWireStruct);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 f816 	bl	80007da <TM_OneWire_ResetSearch>

	/* Start with searching */
	return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80007ae:	21f0      	movs	r1, #240	@ 0xf0
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 f824 	bl	80007fe <TM_OneWire_Search>
 80007b6:	4603      	mov	r3, r0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <TM_OneWire_Next>:

uint8_t TM_OneWire_Next(TM_OneWire_t *OneWireStruct) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	/* Leave the search state alone */
	return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80007c8:	21f0      	movs	r1, #240	@ 0xf0
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f000 f817 	bl	80007fe <TM_OneWire_Search>
 80007d0:	4603      	mov	r3, r0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <TM_OneWire_ResetSearch>:

void TM_OneWire_ResetSearch(TM_OneWire_t *OneWireStruct) {
 80007da:	b480      	push	{r7}
 80007dc:	b083      	sub	sp, #12
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	71da      	strb	r2, [r3, #7]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr

080007fe <TM_OneWire_Search>:

uint8_t TM_OneWire_Search(TM_OneWire_t *OneWireStruct, uint8_t command) {
 80007fe:	b580      	push	{r7, lr}
 8000800:	b084      	sub	sp, #16
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	460b      	mov	r3, r1
 8000808:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 800080a:	2301      	movs	r3, #1
 800080c:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag) {
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	7a1b      	ldrb	r3, [r3, #8]
 8000822:	2b00      	cmp	r3, #0
 8000824:	f040 809a 	bne.w	800095c <TM_OneWire_Search+0x15e>
		// 1-Wire reset
		if (TM_OneWire_Reset(OneWireStruct)) {
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff fec1 	bl	80005b0 <TM_OneWire_Reset>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00a      	beq.n	800084a <TM_OneWire_Search+0x4c>
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2200      	movs	r2, #0
 800083e:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2200      	movs	r2, #0
 8000844:	71da      	strb	r2, [r3, #7]
			return 0;
 8000846:	2300      	movs	r3, #0
 8000848:	e09b      	b.n	8000982 <TM_OneWire_Search+0x184>
		}

		// issue the search command
		TM_OneWire_WriteByte(OneWireStruct, command);
 800084a:	78fb      	ldrb	r3, [r7, #3]
 800084c:	4619      	mov	r1, r3
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff ff67 	bl	8000722 <TM_OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = TM_OneWire_ReadBit(OneWireStruct);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff2e 	bl	80006b6 <TM_OneWire_ReadBit>
 800085a:	4603      	mov	r3, r0
 800085c:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = TM_OneWire_ReadBit(OneWireStruct);
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ff29 	bl	80006b6 <TM_OneWire_ReadBit>
 8000864:	4603      	mov	r3, r0
 8000866:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8000868:	7a7b      	ldrb	r3, [r7, #9]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d102      	bne.n	8000874 <TM_OneWire_Search+0x76>
 800086e:	7a3b      	ldrb	r3, [r7, #8]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d064      	beq.n	800093e <TM_OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 8000874:	7a7a      	ldrb	r2, [r7, #9]
 8000876:	7a3b      	ldrb	r3, [r7, #8]
 8000878:	429a      	cmp	r2, r3
 800087a:	d002      	beq.n	8000882 <TM_OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 800087c:	7a7b      	ldrb	r3, [r7, #9]
 800087e:	72bb      	strb	r3, [r7, #10]
 8000880:	e026      	b.n	80008d0 <TM_OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	799b      	ldrb	r3, [r3, #6]
 8000886:	7bfa      	ldrb	r2, [r7, #15]
 8000888:	429a      	cmp	r2, r3
 800088a:	d20d      	bcs.n	80008a8 <TM_OneWire_Search+0xaa>
						search_direction =
								((OneWireStruct->ROM_NO[rom_byte_number]
 800088c:	7b7b      	ldrb	r3, [r7, #13]
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	7a5a      	ldrb	r2, [r3, #9]
										& rom_byte_mask) > 0);
 8000894:	7afb      	ldrb	r3, [r7, #11]
 8000896:	4013      	ands	r3, r2
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	bf14      	ite	ne
 800089e:	2301      	movne	r3, #1
 80008a0:	2300      	moveq	r3, #0
 80008a2:	b2db      	uxtb	r3, r3
						search_direction =
 80008a4:	72bb      	strb	r3, [r7, #10]
 80008a6:	e008      	b.n	80008ba <TM_OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number
								== OneWireStruct->LastDiscrepancy);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	799b      	ldrb	r3, [r3, #6]
 80008ac:	7bfa      	ldrb	r2, [r7, #15]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	bf0c      	ite	eq
 80008b2:	2301      	moveq	r3, #1
 80008b4:	2300      	movne	r3, #0
 80008b6:	b2db      	uxtb	r3, r3
						search_direction = (id_bit_number
 80008b8:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 80008ba:	7abb      	ldrb	r3, [r7, #10]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d107      	bne.n	80008d0 <TM_OneWire_Search+0xd2>
						last_zero = id_bit_number;
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 80008c4:	7bbb      	ldrb	r3, [r7, #14]
 80008c6:	2b08      	cmp	r3, #8
 80008c8:	d802      	bhi.n	80008d0 <TM_OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	7bba      	ldrb	r2, [r7, #14]
 80008ce:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 80008d0:	7abb      	ldrb	r3, [r7, #10]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d10c      	bne.n	80008f0 <TM_OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 80008d6:	7b7b      	ldrb	r3, [r7, #13]
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	4413      	add	r3, r2
 80008dc:	7a59      	ldrb	r1, [r3, #9]
 80008de:	7b7b      	ldrb	r3, [r7, #13]
 80008e0:	7afa      	ldrb	r2, [r7, #11]
 80008e2:	430a      	orrs	r2, r1
 80008e4:	b2d1      	uxtb	r1, r2
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	460a      	mov	r2, r1
 80008ec:	725a      	strb	r2, [r3, #9]
 80008ee:	e010      	b.n	8000912 <TM_OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80008f0:	7b7b      	ldrb	r3, [r7, #13]
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	7a5b      	ldrb	r3, [r3, #9]
 80008f8:	b25a      	sxtb	r2, r3
 80008fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80008fe:	43db      	mvns	r3, r3
 8000900:	b25b      	sxtb	r3, r3
 8000902:	4013      	ands	r3, r2
 8000904:	b25a      	sxtb	r2, r3
 8000906:	7b7b      	ldrb	r3, [r7, #13]
 8000908:	b2d1      	uxtb	r1, r2
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	460a      	mov	r2, r1
 8000910:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				TM_OneWire_WriteBit(OneWireStruct, search_direction);
 8000912:	7abb      	ldrb	r3, [r7, #10]
 8000914:	4619      	mov	r1, r3
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fe86 	bl	8000628 <TM_OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	3301      	adds	r3, #1
 8000920:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 8000922:	7afb      	ldrb	r3, [r7, #11]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8000928:	7afb      	ldrb	r3, [r7, #11]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d104      	bne.n	8000938 <TM_OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 800092e:	7b7b      	ldrb	r3, [r7, #13]
 8000930:	3301      	adds	r3, #1
 8000932:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8000934:	2301      	movs	r3, #1
 8000936:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8000938:	7b7b      	ldrb	r3, [r7, #13]
 800093a:	2b07      	cmp	r3, #7
 800093c:	d98a      	bls.n	8000854 <TM_OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	2b40      	cmp	r3, #64	@ 0x40
 8000942:	d90b      	bls.n	800095c <TM_OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	7bba      	ldrb	r2, [r7, #14]
 8000948:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	799b      	ldrb	r3, [r3, #6]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d102      	bne.n	8000958 <TM_OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2201      	movs	r2, #1
 8000956:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8000958:	2301      	movs	r3, #1
 800095a:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 800095c:	7b3b      	ldrb	r3, [r7, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <TM_OneWire_Search+0x16c>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	7a5b      	ldrb	r3, [r3, #9]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10a      	bne.n	8000980 <TM_OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8000980:	7b3b      	ldrb	r3, [r7, #12]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <TM_OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		TM_OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void TM_OneWire_SelectWithPointer(TM_OneWire_t *OneWireStruct, uint8_t *ROM) {
 800098a:	b580      	push	{r7, lr}
 800098c:	b084      	sub	sp, #16
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
	uint8_t i;
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8000994:	2155      	movs	r1, #85	@ 0x55
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff fec3 	bl	8000722 <TM_OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]
 80009a0:	e00a      	b.n	80009b8 <TM_OneWire_SelectWithPointer+0x2e>
		TM_OneWire_WriteByte(OneWireStruct, *(ROM + i));
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	4413      	add	r3, r2
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	4619      	mov	r1, r3
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff feb8 	bl	8000722 <TM_OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	3301      	adds	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	2b07      	cmp	r3, #7
 80009bc:	d9f1      	bls.n	80009a2 <TM_OneWire_SelectWithPointer+0x18>
	}
}
 80009be:	bf00      	nop
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <TM_OneWire_GetFullROM>:

void TM_OneWire_GetFullROM(TM_OneWire_t *OneWireStruct, uint8_t *firstIndex) {
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	73fb      	strb	r3, [r7, #15]
 80009d6:	e00a      	b.n	80009ee <TM_OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 80009d8:	7bfa      	ldrb	r2, [r7, #15]
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	6839      	ldr	r1, [r7, #0]
 80009de:	440b      	add	r3, r1
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	440a      	add	r2, r1
 80009e4:	7a52      	ldrb	r2, [r2, #9]
 80009e6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	3301      	adds	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	2b07      	cmp	r3, #7
 80009f2:	d9f1      	bls.n	80009d8 <TM_OneWire_GetFullROM+0x10>
	}
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <TM_OneWire_CRC8>:

uint8_t TM_OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 8000a10:	e022      	b.n	8000a58 <TM_OneWire_CRC8+0x58>
		inbyte = *addr++;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	1c5a      	adds	r2, r3, #1
 8000a16:	607a      	str	r2, [r7, #4]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8000a1c:	2308      	movs	r3, #8
 8000a1e:	737b      	strb	r3, [r7, #13]
 8000a20:	e017      	b.n	8000a52 <TM_OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8000a22:	7bfa      	ldrb	r2, [r7, #15]
 8000a24:	7bbb      	ldrb	r3, [r7, #14]
 8000a26:	4053      	eors	r3, r2
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	085b      	lsrs	r3, r3, #1
 8000a34:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8000a36:	7b3b      	ldrb	r3, [r7, #12]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d004      	beq.n	8000a46 <TM_OneWire_CRC8+0x46>
				crc ^= 0x8C;
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8000a42:	43db      	mvns	r3, r3
 8000a44:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8000a46:	7bbb      	ldrb	r3, [r7, #14]
 8000a48:	085b      	lsrs	r3, r3, #1
 8000a4a:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8000a4c:	7b7b      	ldrb	r3, [r7, #13]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	737b      	strb	r3, [r7, #13]
 8000a52:	7b7b      	ldrb	r3, [r7, #13]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1e4      	bne.n	8000a22 <TM_OneWire_CRC8+0x22>
	while (len--) {
 8000a58:	78fb      	ldrb	r3, [r7, #3]
 8000a5a:	1e5a      	subs	r2, r3, #1
 8000a5c:	70fa      	strb	r2, [r7, #3]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1d7      	bne.n	8000a12 <TM_OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr

08000a6e <TM_DS18B20_StartAll>:

    return 1;
}

void
TM_DS18B20_StartAll(TM_OneWire_t* OneWire) {
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
    /* Reset pulse */
    TM_OneWire_Reset(OneWire);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff fd9a 	bl	80005b0 <TM_OneWire_Reset>
    /* Skip rom */
    TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8000a7c:	21cc      	movs	r1, #204	@ 0xcc
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fe4f 	bl	8000722 <TM_OneWire_WriteByte>
    /* Start conversion on all connected devices */
    TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8000a84:	2144      	movs	r1, #68	@ 0x44
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff fe4b 	bl	8000722 <TM_OneWire_WriteByte>
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <TM_DS18B20_Read>:

uint8_t
TM_DS18B20_Read(TM_OneWire_t* OneWire, uint8_t* ROM, float* destination) {
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b08b      	sub	sp, #44	@ 0x2c
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
    uint16_t temperature;
    uint8_t resolution;
    int8_t digit, minus = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    float decimal;
    uint8_t i = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	77fb      	strb	r3, [r7, #31]
    uint8_t data[9];
    uint8_t crc;

    /* Check if device is DS18B20 */
    if (!TM_DS18B20_Is(ROM)) {
 8000aaa:	68b8      	ldr	r0, [r7, #8]
 8000aac:	f000 f96e 	bl	8000d8c <TM_DS18B20_Is>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d101      	bne.n	8000aba <TM_DS18B20_Read+0x26>
        return 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e0da      	b.n	8000c70 <TM_DS18B20_Read+0x1dc>
    }

    /* Check if line is released, if it is, then conversion is complete */
    if (!TM_OneWire_ReadBit(OneWire)) {
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f7ff fdfb 	bl	80006b6 <TM_OneWire_ReadBit>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d101      	bne.n	8000aca <TM_DS18B20_Read+0x36>
        /* Conversion is not finished yet */
        return 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e0d2      	b.n	8000c70 <TM_DS18B20_Read+0x1dc>
    }

    /* Reset line */
    TM_OneWire_Reset(OneWire);
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f7ff fd70 	bl	80005b0 <TM_OneWire_Reset>
    /* Select ROM number */
    TM_OneWire_SelectWithPointer(OneWire, ROM);
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f7ff ff59 	bl	800098a <TM_OneWire_SelectWithPointer>
    /* Read scratchpad command by onewire protocol */
    TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000ad8:	21be      	movs	r1, #190	@ 0xbe
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f7ff fe21 	bl	8000722 <TM_OneWire_WriteByte>

    /* Get data */
    for (i = 0; i < 9; i++) {
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	77fb      	strb	r3, [r7, #31]
 8000ae4:	e00d      	b.n	8000b02 <TM_DS18B20_Read+0x6e>
        /* Read byte by byte */
        data[i] = TM_OneWire_ReadByte(OneWire);
 8000ae6:	7ffc      	ldrb	r4, [r7, #31]
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f7ff fe38 	bl	800075e <TM_OneWire_ReadByte>
 8000aee:	4603      	mov	r3, r0
 8000af0:	461a      	mov	r2, r3
 8000af2:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8000af6:	443b      	add	r3, r7
 8000af8:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < 9; i++) {
 8000afc:	7ffb      	ldrb	r3, [r7, #31]
 8000afe:	3301      	adds	r3, #1
 8000b00:	77fb      	strb	r3, [r7, #31]
 8000b02:	7ffb      	ldrb	r3, [r7, #31]
 8000b04:	2b08      	cmp	r3, #8
 8000b06:	d9ee      	bls.n	8000ae6 <TM_DS18B20_Read+0x52>
    }

    /* Calculate CRC */
    crc = TM_OneWire_CRC8(data, 8);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2108      	movs	r1, #8
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff76 	bl	8000a00 <TM_OneWire_CRC8>
 8000b14:	4603      	mov	r3, r0
 8000b16:	77bb      	strb	r3, [r7, #30]

    /* Check if CRC is ok */
    if (crc != data[8]) {
 8000b18:	7f3b      	ldrb	r3, [r7, #28]
 8000b1a:	7fba      	ldrb	r2, [r7, #30]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d001      	beq.n	8000b24 <TM_DS18B20_Read+0x90>
        /* CRC invalid */
        return 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	e0a5      	b.n	8000c70 <TM_DS18B20_Read+0x1dc>
    }

    /* First two bytes of scratchpad are temperature values */
    temperature = data[0] | (data[1] << 8);
 8000b24:	7d3b      	ldrb	r3, [r7, #20]
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	7d7b      	ldrb	r3, [r7, #21]
 8000b2a:	b21b      	sxth	r3, r3
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	b21b      	sxth	r3, r3
 8000b30:	4313      	orrs	r3, r2
 8000b32:	b21b      	sxth	r3, r3
 8000b34:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /* Reset line */
    TM_OneWire_Reset(OneWire);
 8000b36:	68f8      	ldr	r0, [r7, #12]
 8000b38:	f7ff fd3a 	bl	80005b0 <TM_OneWire_Reset>

    /* Check if temperature is negative */
    if (temperature & 0x8000) {
 8000b3c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	da05      	bge.n	8000b50 <TM_DS18B20_Read+0xbc>
        /* Two's complement, temperature is negative */
        temperature = ~temperature + 1;
 8000b44:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000b46:	425b      	negs	r3, r3
 8000b48:	84fb      	strh	r3, [r7, #38]	@ 0x26
        minus = 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    }


    /* Get sensor resolution */
    resolution = ((data[4] & 0x60) >> 5) + 9;
 8000b50:	7e3b      	ldrb	r3, [r7, #24]
 8000b52:	115b      	asrs	r3, r3, #5
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	3309      	adds	r3, #9
 8000b5e:	777b      	strb	r3, [r7, #29]


    /* Store temperature integer digits and decimal digits */
    digit = temperature >> 4;
 8000b60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000b62:	091b      	lsrs	r3, r3, #4
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    digit |= ((temperature >> 8) & 0x7) << 4;
 8000b6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	b25b      	sxtb	r3, r3
 8000b72:	011b      	lsls	r3, r3, #4
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000b7a:	b25a      	sxtb	r2, r3
 8000b7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000b80:	4313      	orrs	r3, r2
 8000b82:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Store decimal digits */
    switch (resolution) {
 8000b86:	7f7b      	ldrb	r3, [r7, #29]
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	d850      	bhi.n	8000c30 <TM_DS18B20_Read+0x19c>
 8000b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b94 <TM_DS18B20_Read+0x100>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000ba5 	.word	0x08000ba5
 8000b98:	08000bc9 	.word	0x08000bc9
 8000b9c:	08000bed 	.word	0x08000bed
 8000ba0:	08000c11 	.word	0x08000c11
        case 9: {
            decimal = (temperature >> 3) & 0x01;
 8000ba4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ba6:	08db      	lsrs	r3, r3, #3
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fc3a 	bl	8000428 <__aeabi_i2f>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	623b      	str	r3, [r7, #32]
            decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8000bb8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000bbc:	6a38      	ldr	r0, [r7, #32]
 8000bbe:	f7ff fac5 	bl	800014c <__aeabi_fmul>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	623b      	str	r3, [r7, #32]
        }
        break;
 8000bc6:	e038      	b.n	8000c3a <TM_DS18B20_Read+0x1a6>
        case 10: {
            decimal = (temperature >> 2) & 0x03;
 8000bc8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000bca:	089b      	lsrs	r3, r3, #2
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	f003 0303 	and.w	r3, r3, #3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fc28 	bl	8000428 <__aeabi_i2f>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	623b      	str	r3, [r7, #32]
            decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8000bdc:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8000be0:	6a38      	ldr	r0, [r7, #32]
 8000be2:	f7ff fab3 	bl	800014c <__aeabi_fmul>
 8000be6:	4603      	mov	r3, r0
 8000be8:	623b      	str	r3, [r7, #32]
        }
        break;
 8000bea:	e026      	b.n	8000c3a <TM_DS18B20_Read+0x1a6>
        case 11: {
            decimal = (temperature >> 1) & 0x07;
 8000bec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000bee:	085b      	lsrs	r3, r3, #1
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fc16 	bl	8000428 <__aeabi_i2f>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	623b      	str	r3, [r7, #32]
            decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8000c00:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8000c04:	6a38      	ldr	r0, [r7, #32]
 8000c06:	f7ff faa1 	bl	800014c <__aeabi_fmul>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	623b      	str	r3, [r7, #32]
        }
        break;
 8000c0e:	e014      	b.n	8000c3a <TM_DS18B20_Read+0x1a6>
        case 12: {
            decimal = temperature & 0x0F;
 8000c10:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fc06 	bl	8000428 <__aeabi_i2f>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	623b      	str	r3, [r7, #32]
            decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8000c20:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8000c24:	6a38      	ldr	r0, [r7, #32]
 8000c26:	f7ff fa91 	bl	800014c <__aeabi_fmul>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	623b      	str	r3, [r7, #32]
        }
        break;
 8000c2e:	e004      	b.n	8000c3a <TM_DS18B20_Read+0x1a6>
        default: {
            decimal = 0xFF;
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <TM_DS18B20_Read+0x1e4>)
 8000c32:	623b      	str	r3, [r7, #32]
            digit = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        }
    }

    /* Check for negative part */
    decimal = digit + decimal;
 8000c3a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fbf2 	bl	8000428 <__aeabi_i2f>
 8000c44:	4603      	mov	r3, r0
 8000c46:	4619      	mov	r1, r3
 8000c48:	6a38      	ldr	r0, [r7, #32]
 8000c4a:	f7ff fb39 	bl	80002c0 <__addsf3>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	623b      	str	r3, [r7, #32]
    if (minus) {
 8000c52:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d006      	beq.n	8000c68 <TM_DS18B20_Read+0x1d4>
        decimal = 0 - decimal;
 8000c5a:	6a39      	ldr	r1, [r7, #32]
 8000c5c:	f04f 0000 	mov.w	r0, #0
 8000c60:	f7ff fb2c 	bl	80002bc <__aeabi_fsub>
 8000c64:	4603      	mov	r3, r0
 8000c66:	623b      	str	r3, [r7, #32]
    }

    /* Set to pointer */
    *destination = decimal;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6a3a      	ldr	r2, [r7, #32]
 8000c6c:	601a      	str	r2, [r3, #0]

    /* Return 1, temperature valid */
    return 1;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	372c      	adds	r7, #44	@ 0x2c
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd90      	pop	{r4, r7, pc}
 8000c78:	437f0000 	.word	0x437f0000

08000c7c <TM_DS18B20_SetResolution>:
    /* Return 9 - 12 value according to number of bits */
    return ((conf & 0x60) >> 5) + 9;
}

uint8_t
TM_DS18B20_SetResolution(TM_OneWire_t* OneWire, uint8_t* ROM, TM_DS18B20_Resolution_t resolution) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	4613      	mov	r3, r2
 8000c88:	71fb      	strb	r3, [r7, #7]
    uint8_t th, tl, conf;
    if (!TM_DS18B20_Is(ROM)) {
 8000c8a:	68b8      	ldr	r0, [r7, #8]
 8000c8c:	f000 f87e 	bl	8000d8c <TM_DS18B20_Is>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <TM_DS18B20_SetResolution+0x1e>
        return 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e074      	b.n	8000d84 <TM_DS18B20_SetResolution+0x108>
    }

    /* Reset line */
    TM_OneWire_Reset(OneWire);
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f7ff fc88 	bl	80005b0 <TM_OneWire_Reset>
    /* Select ROM number */
    TM_OneWire_SelectWithPointer(OneWire, ROM);
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f7ff fe71 	bl	800098a <TM_OneWire_SelectWithPointer>
    /* Read scratchpad command by onewire protocol */
    TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000ca8:	21be      	movs	r1, #190	@ 0xbe
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f7ff fd39 	bl	8000722 <TM_OneWire_WriteByte>

    /* Ignore first 2 bytes */
    TM_OneWire_ReadByte(OneWire);
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f7ff fd54 	bl	800075e <TM_OneWire_ReadByte>
    TM_OneWire_ReadByte(OneWire);
 8000cb6:	68f8      	ldr	r0, [r7, #12]
 8000cb8:	f7ff fd51 	bl	800075e <TM_OneWire_ReadByte>

    th = TM_OneWire_ReadByte(OneWire);
 8000cbc:	68f8      	ldr	r0, [r7, #12]
 8000cbe:	f7ff fd4e 	bl	800075e <TM_OneWire_ReadByte>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	75bb      	strb	r3, [r7, #22]
    tl = TM_OneWire_ReadByte(OneWire);
 8000cc6:	68f8      	ldr	r0, [r7, #12]
 8000cc8:	f7ff fd49 	bl	800075e <TM_OneWire_ReadByte>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	757b      	strb	r3, [r7, #21]
    conf = TM_OneWire_ReadByte(OneWire);
 8000cd0:	68f8      	ldr	r0, [r7, #12]
 8000cd2:	f7ff fd44 	bl	800075e <TM_OneWire_ReadByte>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	75fb      	strb	r3, [r7, #23]

    if (resolution == TM_DS18B20_Resolution_9bits) {
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b09      	cmp	r3, #9
 8000cde:	d108      	bne.n	8000cf2 <TM_DS18B20_SetResolution+0x76>
        conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000ce0:	7dfb      	ldrb	r3, [r7, #23]
 8000ce2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000ce6:	75fb      	strb	r3, [r7, #23]
        conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000ce8:	7dfb      	ldrb	r3, [r7, #23]
 8000cea:	f023 0320 	bic.w	r3, r3, #32
 8000cee:	75fb      	strb	r3, [r7, #23]
 8000cf0:	e022      	b.n	8000d38 <TM_DS18B20_SetResolution+0xbc>
    } else if (resolution == TM_DS18B20_Resolution_10bits) {
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	2b0a      	cmp	r3, #10
 8000cf6:	d108      	bne.n	8000d0a <TM_DS18B20_SetResolution+0x8e>
        conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000cfe:	75fb      	strb	r3, [r7, #23]
        conf |= 1 << DS18B20_RESOLUTION_R0;
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	f043 0320 	orr.w	r3, r3, #32
 8000d06:	75fb      	strb	r3, [r7, #23]
 8000d08:	e016      	b.n	8000d38 <TM_DS18B20_SetResolution+0xbc>
    } else if (resolution == TM_DS18B20_Resolution_11bits) {
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	2b0b      	cmp	r3, #11
 8000d0e:	d108      	bne.n	8000d22 <TM_DS18B20_SetResolution+0xa6>
        conf |= 1 << DS18B20_RESOLUTION_R1;
 8000d10:	7dfb      	ldrb	r3, [r7, #23]
 8000d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d16:	75fb      	strb	r3, [r7, #23]
        conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	f023 0320 	bic.w	r3, r3, #32
 8000d1e:	75fb      	strb	r3, [r7, #23]
 8000d20:	e00a      	b.n	8000d38 <TM_DS18B20_SetResolution+0xbc>
    } else if (resolution == TM_DS18B20_Resolution_12bits) {
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b0c      	cmp	r3, #12
 8000d26:	d107      	bne.n	8000d38 <TM_DS18B20_SetResolution+0xbc>
        conf |= 1 << DS18B20_RESOLUTION_R1;
 8000d28:	7dfb      	ldrb	r3, [r7, #23]
 8000d2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d2e:	75fb      	strb	r3, [r7, #23]
        conf |= 1 << DS18B20_RESOLUTION_R0;
 8000d30:	7dfb      	ldrb	r3, [r7, #23]
 8000d32:	f043 0320 	orr.w	r3, r3, #32
 8000d36:	75fb      	strb	r3, [r7, #23]
    }

    /* Reset line */
    TM_OneWire_Reset(OneWire);
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f7ff fc39 	bl	80005b0 <TM_OneWire_Reset>
    /* Select ROM number */
    TM_OneWire_SelectWithPointer(OneWire, ROM);
 8000d3e:	68b9      	ldr	r1, [r7, #8]
 8000d40:	68f8      	ldr	r0, [r7, #12]
 8000d42:	f7ff fe22 	bl	800098a <TM_OneWire_SelectWithPointer>
    /* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
    TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8000d46:	214e      	movs	r1, #78	@ 0x4e
 8000d48:	68f8      	ldr	r0, [r7, #12]
 8000d4a:	f7ff fcea 	bl	8000722 <TM_OneWire_WriteByte>

    /* Write bytes */
    TM_OneWire_WriteByte(OneWire, th);
 8000d4e:	7dbb      	ldrb	r3, [r7, #22]
 8000d50:	4619      	mov	r1, r3
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f7ff fce5 	bl	8000722 <TM_OneWire_WriteByte>
    TM_OneWire_WriteByte(OneWire, tl);
 8000d58:	7d7b      	ldrb	r3, [r7, #21]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	68f8      	ldr	r0, [r7, #12]
 8000d5e:	f7ff fce0 	bl	8000722 <TM_OneWire_WriteByte>
    TM_OneWire_WriteByte(OneWire, conf);
 8000d62:	7dfb      	ldrb	r3, [r7, #23]
 8000d64:	4619      	mov	r1, r3
 8000d66:	68f8      	ldr	r0, [r7, #12]
 8000d68:	f7ff fcdb 	bl	8000722 <TM_OneWire_WriteByte>

    /* Reset line */
    TM_OneWire_Reset(OneWire);
 8000d6c:	68f8      	ldr	r0, [r7, #12]
 8000d6e:	f7ff fc1f 	bl	80005b0 <TM_OneWire_Reset>
    /* Select ROM number */
    TM_OneWire_SelectWithPointer(OneWire, ROM);
 8000d72:	68b9      	ldr	r1, [r7, #8]
 8000d74:	68f8      	ldr	r0, [r7, #12]
 8000d76:	f7ff fe08 	bl	800098a <TM_OneWire_SelectWithPointer>
    /* Copy scratchpad to EEPROM of DS18B20 */
    TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000d7a:	2148      	movs	r1, #72	@ 0x48
 8000d7c:	68f8      	ldr	r0, [r7, #12]
 8000d7e:	f7ff fcd0 	bl	8000722 <TM_OneWire_WriteByte>

    return 1;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <TM_DS18B20_Is>:

uint8_t
TM_DS18B20_Is(uint8_t* ROM) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
    /* Checks if first byte is equal to DS18B20's family code */
    if (*ROM == DS18B20_FAMILY_CODE) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b28      	cmp	r3, #40	@ 0x28
 8000d9a:	d101      	bne.n	8000da0 <TM_DS18B20_Is+0x14>
        return 1;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e000      	b.n	8000da2 <TM_DS18B20_Is+0x16>
    }
    return 0;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <TM_DS18B20_AllDone>:
    /* Start alarm search */
    return TM_OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t
TM_DS18B20_AllDone(TM_OneWire_t* OneWire) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
    /* If read bit is low, then device is not finished yet with calculation temperature */
    return TM_OneWire_ReadBit(OneWire);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff fc7e 	bl	80006b6 <TM_OneWire_ReadBit>
 8000dba:	4603      	mov	r3, r0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	f5ad 7d6e 	sub.w	sp, sp, #952	@ 0x3b8
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dcc:	f001 fa18 	bl	8002200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd0:	f000 fd50 	bl	8001874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd4:	f000 fe9e 	bl	8001b14 <MX_GPIO_Init>
  MX_CAN_Init();
 8000dd8:	f000 fd8e 	bl	80018f8 <MX_CAN_Init>
  MX_SPI1_Init();
 8000ddc:	f000 fdde 	bl	800199c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000de0:	f000 fe48 	bl	8001a74 <MX_TIM1_Init>
  MX_SPI2_Init();
 8000de4:	f000 fe10 	bl	8001a08 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8000de8:	48cc      	ldr	r0, [pc, #816]	@ (800111c <main+0x358>)
 8000dea:	f003 fd53 	bl	8004894 <HAL_TIM_Base_Start_IT>
	HAL_CAN_Start(&hcan);
 8000dee:	48cc      	ldr	r0, [pc, #816]	@ (8001120 <main+0x35c>)
 8000df0:	f001 fc50 	bl	8002694 <HAL_CAN_Start>
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000df4:	2102      	movs	r1, #2
 8000df6:	48ca      	ldr	r0, [pc, #808]	@ (8001120 <main+0x35c>)
 8000df8:	f001 fe80 	bl	8002afc <HAL_CAN_ActivateNotification>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <main+0x42>
			!= HAL_OK) {
		Error_Handler();
 8000e02:	f001 f86a 	bl	8001eda <Error_Handler>
	}

	GetModuleID();
 8000e06:	f000 ff49 	bl	8001c9c <GetModuleID>

	PubModuleID();
 8000e0a:	f000 ff8b 	bl	8001d24 <PubModuleID>
	TM_OneWire_Init(&OneWire1, GPIOA, DQ_Pin);
 8000e0e:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
 8000e12:	2201      	movs	r2, #1
 8000e14:	49c3      	ldr	r1, [pc, #780]	@ (8001124 <main+0x360>)
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fbb8 	bl	800058c <TM_OneWire_Init>

	for (int n = 0; n < 24; n++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8000e22:	e00a      	b.n	8000e3a <main+0x76>
		voltage[n] = 0;
 8000e24:	4ac0      	ldr	r2, [pc, #768]	@ (8001128 <main+0x364>)
 8000e26:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int n = 0; n < 24; n++)
 8000e30:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8000e34:	3301      	adds	r3, #1
 8000e36:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8000e3a:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8000e3e:	2b17      	cmp	r3, #23
 8000e40:	ddf0      	ble.n	8000e24 <main+0x60>
	for (int n = 0; n < 38; n++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 8000e48:	e00b      	b.n	8000e62 <main+0x9e>
		temp[n] = 0;
 8000e4a:	4ab8      	ldr	r2, [pc, #736]	@ (800112c <main+0x368>)
 8000e4c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8000e50:	f04f 0100 	mov.w	r1, #0
 8000e54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int n = 0; n < 38; n++)
 8000e58:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 8000e62:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8000e66:	2b25      	cmp	r3, #37	@ 0x25
 8000e68:	ddef      	ble.n	8000e4a <main+0x86>

	uint8_t cellBytes1[cellRegisters];
	uint8_t cellBytes2[cellRegisters];
	for(int n = 0; n<cellRegisters;n++){
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 8000e70:	e012      	b.n	8000e98 <main+0xd4>
		cellBytes1[n]=0;
 8000e72:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8000e76:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8000e7a:	4413      	add	r3, r2
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
		cellBytes2[n]=0;
 8000e80:	f507 7249 	add.w	r2, r7, #804	@ 0x324
 8000e84:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8000e88:	4413      	add	r3, r2
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
	for(int n = 0; n<cellRegisters;n++){
 8000e8e:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8000e92:	3301      	adds	r3, #1
 8000e94:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 8000e98:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8000e9c:	2b11      	cmp	r3, #17
 8000e9e:	dde8      	ble.n	8000e72 <main+0xae>
	}
	int voltages[24][8];
	uint8_t counter = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f887 33ab 	strb.w	r3, [r7, #939]	@ 0x3ab
	uint8_t slowCounter = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f887 33aa 	strb.w	r3, [r7, #938]	@ 0x3aa

	uint8_t ds18b20_flag = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f887 336b 	strb.w	r3, [r7, #875]	@ 0x36b

	uint8_t devices, sensor_count, device[4][8];

	/* Check for any device on 1-wire bus*/

	devices = TM_OneWire_First(&OneWire1);
 8000eb2:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fc72 	bl	80007a0 <TM_OneWire_First>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	f887 33a9 	strb.w	r3, [r7, #937]	@ 0x3a9
	sensor_count = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f887 33a8 	strb.w	r3, [r7, #936]	@ 0x3a8
	while (devices) {
 8000ec8:	e018      	b.n	8000efc <main+0x138>
		/* Increase count variable */
		sensor_count++;
 8000eca:	f897 33a8 	ldrb.w	r3, [r7, #936]	@ 0x3a8
 8000ece:	3301      	adds	r3, #1
 8000ed0:	f887 33a8 	strb.w	r3, [r7, #936]	@ 0x3a8

		/* Get full 8-bytes rom address */
		TM_OneWire_GetFullROM(&OneWire1, device[sensor_count - 1]);
 8000ed4:	f897 33a8 	ldrb.w	r3, [r7, #936]	@ 0x3a8
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	1d3a      	adds	r2, r7, #4
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	441a      	add	r2, r3
 8000ee0:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fd6e 	bl	80009c8 <TM_OneWire_GetFullROM>

		/* Check for new device */
		devices = TM_OneWire_Next(&OneWire1);
 8000eec:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fc65 	bl	80007c0 <TM_OneWire_Next>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f887 33a9 	strb.w	r3, [r7, #937]	@ 0x3a9
	while (devices) {
 8000efc:	f897 33a9 	ldrb.w	r3, [r7, #937]	@ 0x3a9
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1e2      	bne.n	8000eca <main+0x106>
	}

	//Set 9bit resolution for all sensors (93.75ms max conversion time)

	for (int i = 0; i < sensor_count; i++) {
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8000f0a:	e00f      	b.n	8000f2c <main+0x168>
		TM_DS18B20_SetResolution(&OneWire1, device[i],
 8000f0c:	1d3a      	adds	r2, r7, #4
 8000f0e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	18d1      	adds	r1, r2, r3
 8000f16:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
 8000f1a:	2209      	movs	r2, #9
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fead 	bl	8000c7c <TM_DS18B20_SetResolution>
	for (int i = 0; i < sensor_count; i++) {
 8000f22:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8000f26:	3301      	adds	r3, #1
 8000f28:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8000f2c:	f897 33a8 	ldrb.w	r3, [r7, #936]	@ 0x3a8
 8000f30:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbe9      	blt.n	8000f0c <main+0x148>
				TM_DS18B20_Resolution_9bits);
	}

	//Calculates the necesary can packets for sending all the temperatures
	uint8_t n_packets_temps = sensor_count/8 + ((sensor_count%8)?1:0);
 8000f38:	f897 33a8 	ldrb.w	r3, [r7, #936]	@ 0x3a8
 8000f3c:	08db      	lsrs	r3, r3, #3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	f897 23a8 	ldrb.w	r2, [r7, #936]	@ 0x3a8
 8000f44:	f002 0207 	and.w	r2, r2, #7
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	2a00      	cmp	r2, #0
 8000f4c:	bf14      	ite	ne
 8000f4e:	2201      	movne	r2, #1
 8000f50:	2200      	moveq	r2, #0
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	4413      	add	r3, r2
 8000f56:	f887 336a 	strb.w	r3, [r7, #874]	@ 0x36a

	if (sensor_count > 0)
 8000f5a:	f897 33a8 	ldrb.w	r3, [r7, #936]	@ 0x3a8
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d002      	beq.n	8000f68 <main+0x1a4>
	 ds18b20_flag = 1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	f887 336b 	strb.w	r3, [r7, #875]	@ 0x36b
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		// Split up the 32-bit shuntBits variable into two 12-bit chunks for each LTC
		uint32_t shuntBitsL = 0;//shuntBits & 0x0FFF; // Lower 12 bits
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
		uint32_t shuntBitsH = 0;//shuntBits >> 12; // Upper 12 bits
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
#if !TEMPS
		//Configure LTC6802 1 (HV-)
		HAL_GPIO_WritePin(LTC6802_CS1_GPIO_PORT, LTC6802_CS1_GPIO_PIN,
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f7a:	486a      	ldr	r0, [pc, #424]	@ (8001124 <main+0x360>)
 8000f7c:	f002 faaf 	bl	80034de <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		SPIWrite(&hspi1, WRCFG);
 8000f80:	2301      	movs	r3, #1
 8000f82:	4619      	mov	r1, r3
 8000f84:	486a      	ldr	r0, [pc, #424]	@ (8001130 <main+0x36c>)
 8000f86:	f000 ff0f 	bl	8001da8 <SPIWrite>
		SPIWrite(&hspi1, 0b00000001);
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	4868      	ldr	r0, [pc, #416]	@ (8001130 <main+0x36c>)
 8000f8e:	f000 ff0b 	bl	8001da8 <SPIWrite>
		SPIWrite(&hspi1, ((unsigned short) (shuntBitsL & 0x00FF)));
 8000f92:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4865      	ldr	r0, [pc, #404]	@ (8001130 <main+0x36c>)
 8000f9c:	f000 ff04 	bl	8001da8 <SPIWrite>
		SPIWrite(&hspi1, ((unsigned short) (shuntBitsL >> 8)));
 8000fa0:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4861      	ldr	r0, [pc, #388]	@ (8001130 <main+0x36c>)
 8000fac:	f000 fefc 	bl	8001da8 <SPIWrite>
		SPIWrite(&hspi1, 0b00000000);
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	485f      	ldr	r0, [pc, #380]	@ (8001130 <main+0x36c>)
 8000fb4:	f000 fef8 	bl	8001da8 <SPIWrite>
		SPIWrite(&hspi1, 0b00000000);
 8000fb8:	2100      	movs	r1, #0
 8000fba:	485d      	ldr	r0, [pc, #372]	@ (8001130 <main+0x36c>)
 8000fbc:	f000 fef4 	bl	8001da8 <SPIWrite>
		SPIWrite(&hspi1, 0b00000000);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	485b      	ldr	r0, [pc, #364]	@ (8001130 <main+0x36c>)
 8000fc4:	f000 fef0 	bl	8001da8 <SPIWrite>
		HAL_GPIO_WritePin(LTC6802_CS1_GPIO_PORT, LTC6802_CS1_GPIO_PIN,
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fce:	4855      	ldr	r0, [pc, #340]	@ (8001124 <main+0x360>)
 8000fd0:	f002 fa85 	bl	80034de <HAL_GPIO_WritePin>
				GPIO_PIN_SET);

		Delay_us(100);
 8000fd4:	2064      	movs	r0, #100	@ 0x64
 8000fd6:	f000 fecf 	bl	8001d78 <Delay_us>

		//Start voltage sampling
		HAL_GPIO_WritePin(LTC6802_CS1_GPIO_PORT, LTC6802_CS1_GPIO_PIN,
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fe0:	4850      	ldr	r0, [pc, #320]	@ (8001124 <main+0x360>)
 8000fe2:	f002 fa7c 	bl	80034de <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);

		SPIWrite(&hspi1, STCVAD);
 8000fe6:	2310      	movs	r3, #16
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4851      	ldr	r0, [pc, #324]	@ (8001130 <main+0x36c>)
 8000fec:	f000 fedc 	bl	8001da8 <SPIWrite>

		HAL_GPIO_WritePin(LTC6802_CS1_GPIO_PORT, LTC6802_CS1_GPIO_PIN,
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ff6:	484b      	ldr	r0, [pc, #300]	@ (8001124 <main+0x360>)
 8000ff8:	f002 fa71 	bl	80034de <HAL_GPIO_WritePin>
				GPIO_PIN_SET);

		//Configure LTC6802 2 (HV+)

		HAL_GPIO_WritePin(LTC6802_CS2_GPIO_PORT, LTC6802_CS2_GPIO_PIN,
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001002:	484c      	ldr	r0, [pc, #304]	@ (8001134 <main+0x370>)
 8001004:	f002 fa6b 	bl	80034de <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		SPIWrite(&hspi2, WRCFG);
 8001008:	2301      	movs	r3, #1
 800100a:	4619      	mov	r1, r3
 800100c:	484a      	ldr	r0, [pc, #296]	@ (8001138 <main+0x374>)
 800100e:	f000 fecb 	bl	8001da8 <SPIWrite>
		SPIWrite(&hspi2, 0b00000001);
 8001012:	2101      	movs	r1, #1
 8001014:	4848      	ldr	r0, [pc, #288]	@ (8001138 <main+0x374>)
 8001016:	f000 fec7 	bl	8001da8 <SPIWrite>
		SPIWrite(&hspi2, ((unsigned short) (shuntBitsH & 0x00FF)));
 800101a:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 800101e:	b2db      	uxtb	r3, r3
 8001020:	4619      	mov	r1, r3
 8001022:	4845      	ldr	r0, [pc, #276]	@ (8001138 <main+0x374>)
 8001024:	f000 fec0 	bl	8001da8 <SPIWrite>
		SPIWrite(&hspi2, ((unsigned short) (shuntBitsH >> 8)));
 8001028:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	b2db      	uxtb	r3, r3
 8001030:	4619      	mov	r1, r3
 8001032:	4841      	ldr	r0, [pc, #260]	@ (8001138 <main+0x374>)
 8001034:	f000 feb8 	bl	8001da8 <SPIWrite>
		SPIWrite(&hspi2, 0b00000000);
 8001038:	2100      	movs	r1, #0
 800103a:	483f      	ldr	r0, [pc, #252]	@ (8001138 <main+0x374>)
 800103c:	f000 feb4 	bl	8001da8 <SPIWrite>
		SPIWrite(&hspi2, 0b00000000);
 8001040:	2100      	movs	r1, #0
 8001042:	483d      	ldr	r0, [pc, #244]	@ (8001138 <main+0x374>)
 8001044:	f000 feb0 	bl	8001da8 <SPIWrite>
		SPIWrite(&hspi2, 0b00000000);
 8001048:	2100      	movs	r1, #0
 800104a:	483b      	ldr	r0, [pc, #236]	@ (8001138 <main+0x374>)
 800104c:	f000 feac 	bl	8001da8 <SPIWrite>
		HAL_GPIO_WritePin(LTC6802_CS2_GPIO_PORT, LTC6802_CS2_GPIO_PIN,
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001056:	4837      	ldr	r0, [pc, #220]	@ (8001134 <main+0x370>)
 8001058:	f002 fa41 	bl	80034de <HAL_GPIO_WritePin>
				GPIO_PIN_SET);


		Delay_us(100);
 800105c:	2064      	movs	r0, #100	@ 0x64
 800105e:	f000 fe8b 	bl	8001d78 <Delay_us>

		//Start voltage sampling
		HAL_GPIO_WritePin(LTC6802_CS2_GPIO_PORT, LTC6802_CS2_GPIO_PIN,
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001068:	4832      	ldr	r0, [pc, #200]	@ (8001134 <main+0x370>)
 800106a:	f002 fa38 	bl	80034de <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);

		SPIWrite(&hspi2, STCVAD);
 800106e:	2310      	movs	r3, #16
 8001070:	4619      	mov	r1, r3
 8001072:	4831      	ldr	r0, [pc, #196]	@ (8001138 <main+0x374>)
 8001074:	f000 fe98 	bl	8001da8 <SPIWrite>

		HAL_GPIO_WritePin(LTC6802_CS2_GPIO_PORT, LTC6802_CS2_GPIO_PIN,
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800107e:	482d      	ldr	r0, [pc, #180]	@ (8001134 <main+0x370>)
 8001080:	f002 fa2d 	bl	80034de <HAL_GPIO_WritePin>
				GPIO_PIN_SET);

		HAL_Delay(20);
 8001084:	2014      	movs	r0, #20
 8001086:	f001 f91d 	bl	80022c4 <HAL_Delay>

		//Read cell voltage registers HV-
		HAL_GPIO_WritePin(LTC6802_CS1_GPIO_PORT, LTC6802_CS1_GPIO_PIN,
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001090:	4824      	ldr	r0, [pc, #144]	@ (8001124 <main+0x360>)
 8001092:	f002 fa24 	bl	80034de <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);

		SPIWrite(&hspi1, RDCV);
 8001096:	2304      	movs	r3, #4
 8001098:	4619      	mov	r1, r3
 800109a:	4825      	ldr	r0, [pc, #148]	@ (8001130 <main+0x36c>)
 800109c:	f000 fe84 	bl	8001da8 <SPIWrite>

		readCellValues(&hspi1, RDCV, cellRegisters, cellBytes1);
 80010a0:	2104      	movs	r1, #4
 80010a2:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80010a6:	2212      	movs	r2, #18
 80010a8:	4821      	ldr	r0, [pc, #132]	@ (8001130 <main+0x36c>)
 80010aa:	f000 feab 	bl	8001e04 <readCellValues>

		HAL_GPIO_WritePin(LTC6802_CS1_GPIO_PORT, LTC6802_CS1_GPIO_PIN,
 80010ae:	2201      	movs	r2, #1
 80010b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010b4:	481b      	ldr	r0, [pc, #108]	@ (8001124 <main+0x360>)
 80010b6:	f002 fa12 	bl	80034de <HAL_GPIO_WritePin>
				GPIO_PIN_SET);

		Delay_us(100);
 80010ba:	2064      	movs	r0, #100	@ 0x64
 80010bc:	f000 fe5c 	bl	8001d78 <Delay_us>


		//Read cell voltage registers HV+
		HAL_GPIO_WritePin(LTC6802_CS2_GPIO_PORT, LTC6802_CS2_GPIO_PIN,
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010c6:	481b      	ldr	r0, [pc, #108]	@ (8001134 <main+0x370>)
 80010c8:	f002 fa09 	bl	80034de <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);

		SPIWrite(&hspi2, RDCV);
 80010cc:	2304      	movs	r3, #4
 80010ce:	4619      	mov	r1, r3
 80010d0:	4819      	ldr	r0, [pc, #100]	@ (8001138 <main+0x374>)
 80010d2:	f000 fe69 	bl	8001da8 <SPIWrite>

		readCellValues(&hspi2, RDCV, cellRegisters, cellBytes2);
 80010d6:	2104      	movs	r1, #4
 80010d8:	f507 7349 	add.w	r3, r7, #804	@ 0x324
 80010dc:	2212      	movs	r2, #18
 80010de:	4816      	ldr	r0, [pc, #88]	@ (8001138 <main+0x374>)
 80010e0:	f000 fe90 	bl	8001e04 <readCellValues>

		HAL_GPIO_WritePin(LTC6802_CS2_GPIO_PORT, LTC6802_CS2_GPIO_PIN,
 80010e4:	2201      	movs	r2, #1
 80010e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010ea:	4812      	ldr	r0, [pc, #72]	@ (8001134 <main+0x370>)
 80010ec:	f002 f9f7 	bl	80034de <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		Delay_us(100);
 80010f0:	2064      	movs	r0, #100	@ 0x64
 80010f2:	f000 fe41 	bl	8001d78 <Delay_us>

#endif

		//Start temperature sampling on all devices

		TM_DS18B20_StartAll(&OneWire1);
 80010f6:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fcb7 	bl	8000a6e <TM_DS18B20_StartAll>
		while (!TM_DS18B20_AllDone(&OneWire1))
 8001100:	bf00      	nop
 8001102:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fe50 	bl	8000dac <TM_DS18B20_AllDone>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f7      	beq.n	8001102 <main+0x33e>
			;

		//Extract voltage data

		for (int n = 0; n < 12; n += 2) {
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 8001118:	e07d      	b.n	8001216 <main+0x452>
 800111a:	bf00      	nop
 800111c:	20000100 	.word	0x20000100
 8001120:	20000028 	.word	0x20000028
 8001124:	40010800 	.word	0x40010800
 8001128:	20000210 	.word	0x20000210
 800112c:	20000178 	.word	0x20000178
 8001130:	20000050 	.word	0x20000050
 8001134:	40010c00 	.word	0x40010c00
 8001138:	200000a8 	.word	0x200000a8
			voltages[n][counter] = (cellBytes1[n * 3 / 2]
 800113c:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8001140:	4613      	mov	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	0fda      	lsrs	r2, r3, #31
 8001148:	4413      	add	r3, r2
 800114a:	105b      	asrs	r3, r3, #1
 800114c:	f503 736e 	add.w	r3, r3, #952	@ 0x3b8
 8001150:	443b      	add	r3, r7
 8001152:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8001156:	4619      	mov	r1, r3
					+ 256 * (cellBytes1[n * 3 / 2 + 1] & 0x0F)) * 3 / 2;
 8001158:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 800115c:	4613      	mov	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	0fda      	lsrs	r2, r3, #31
 8001164:	4413      	add	r3, r2
 8001166:	105b      	asrs	r3, r3, #1
 8001168:	3301      	adds	r3, #1
 800116a:	f503 736e 	add.w	r3, r3, #952	@ 0x3b8
 800116e:	443b      	add	r3, r7
 8001170:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8001174:	f003 030f 	and.w	r3, r3, #15
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	18ca      	adds	r2, r1, r3
 800117c:	4613      	mov	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
			voltages[n][counter] = (cellBytes1[n * 3 / 2]
 8001182:	f897 23ab 	ldrb.w	r2, [r7, #939]	@ 0x3ab
					+ 256 * (cellBytes1[n * 3 / 2 + 1] & 0x0F)) * 3 / 2;
 8001186:	0fd9      	lsrs	r1, r3, #31
 8001188:	440b      	add	r3, r1
 800118a:	105b      	asrs	r3, r3, #1
 800118c:	4618      	mov	r0, r3
			voltages[n][counter] = (cellBytes1[n * 3 / 2]
 800118e:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001192:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8001196:	f8d7 13a0 	ldr.w	r1, [r7, #928]	@ 0x3a0
 800119a:	00c9      	lsls	r1, r1, #3
 800119c:	440a      	add	r2, r1
 800119e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
			voltages[n + 1][counter] =
					(((cellBytes1[n * 3 / 2 + 1] & 0xF0) >> 4)
 80011a2:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 80011a6:	4613      	mov	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4413      	add	r3, r2
 80011ac:	0fda      	lsrs	r2, r3, #31
 80011ae:	4413      	add	r3, r2
 80011b0:	105b      	asrs	r3, r3, #1
 80011b2:	3301      	adds	r3, #1
 80011b4:	f503 736e 	add.w	r3, r3, #952	@ 0x3b8
 80011b8:	443b      	add	r3, r7
 80011ba:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	4619      	mov	r1, r3
							+ cellBytes1[n * 3 / 2 + 2] * 16) * 3 / 2;
 80011c4:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	0fda      	lsrs	r2, r3, #31
 80011d0:	4413      	add	r3, r2
 80011d2:	105b      	asrs	r3, r3, #1
 80011d4:	3302      	adds	r3, #2
 80011d6:	f503 736e 	add.w	r3, r3, #952	@ 0x3b8
 80011da:	443b      	add	r3, r7
 80011dc:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	18ca      	adds	r2, r1, r3
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
			voltages[n + 1][counter] =
 80011ea:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 80011ee:	1c51      	adds	r1, r2, #1
 80011f0:	f897 23ab 	ldrb.w	r2, [r7, #939]	@ 0x3ab
							+ cellBytes1[n * 3 / 2 + 2] * 16) * 3 / 2;
 80011f4:	0fd8      	lsrs	r0, r3, #31
 80011f6:	4403      	add	r3, r0
 80011f8:	105b      	asrs	r3, r3, #1
 80011fa:	4618      	mov	r0, r3
			voltages[n + 1][counter] =
 80011fc:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001200:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8001204:	00c9      	lsls	r1, r1, #3
 8001206:	440a      	add	r2, r1
 8001208:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		for (int n = 0; n < 12; n += 2) {
 800120c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001210:	3302      	adds	r3, #2
 8001212:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 8001216:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 800121a:	2b0b      	cmp	r3, #11
 800121c:	dd8e      	ble.n	800113c <main+0x378>
		}

		for (int n = 0; n < 12; n += 2) {
 800121e:	2300      	movs	r3, #0
 8001220:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8001224:	e06f      	b.n	8001306 <main+0x542>
			voltages[12 + n][counter] = (cellBytes2[n * 3 / 2]
 8001226:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 800122a:	4613      	mov	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	0fda      	lsrs	r2, r3, #31
 8001232:	4413      	add	r3, r2
 8001234:	105b      	asrs	r3, r3, #1
 8001236:	f503 736e 	add.w	r3, r3, #952	@ 0x3b8
 800123a:	443b      	add	r3, r7
 800123c:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 8001240:	4619      	mov	r1, r3
					+ 256 * (cellBytes2[n * 3 / 2 + 1] & 0x0F)) * 3 / 2;
 8001242:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	0fda      	lsrs	r2, r3, #31
 800124e:	4413      	add	r3, r2
 8001250:	105b      	asrs	r3, r3, #1
 8001252:	3301      	adds	r3, #1
 8001254:	f503 736e 	add.w	r3, r3, #952	@ 0x3b8
 8001258:	443b      	add	r3, r7
 800125a:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	18ca      	adds	r2, r1, r3
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
			voltages[12 + n][counter] = (cellBytes2[n * 3 / 2]
 800126c:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 8001270:	f102 010c 	add.w	r1, r2, #12
 8001274:	f897 23ab 	ldrb.w	r2, [r7, #939]	@ 0x3ab
					+ 256 * (cellBytes2[n * 3 / 2 + 1] & 0x0F)) * 3 / 2;
 8001278:	0fd8      	lsrs	r0, r3, #31
 800127a:	4403      	add	r3, r0
 800127c:	105b      	asrs	r3, r3, #1
 800127e:	4618      	mov	r0, r3
			voltages[12 + n][counter] = (cellBytes2[n * 3 / 2]
 8001280:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001284:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8001288:	00c9      	lsls	r1, r1, #3
 800128a:	440a      	add	r2, r1
 800128c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
			voltages[12 + n + 1][counter] = (((cellBytes2[n * 3 / 2 + 1] & 0xF0)
 8001290:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	0fda      	lsrs	r2, r3, #31
 800129c:	4413      	add	r3, r2
 800129e:	105b      	asrs	r3, r3, #1
 80012a0:	3301      	adds	r3, #1
 80012a2:	f503 736e 	add.w	r3, r3, #952	@ 0x3b8
 80012a6:	443b      	add	r3, r7
 80012a8:	f813 3c94 	ldrb.w	r3, [r3, #-148]
					>> 4) + cellBytes2[n * 3 / 2 + 2] * 16) * 3 / 2;
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	4619      	mov	r1, r3
 80012b2:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	0fda      	lsrs	r2, r3, #31
 80012be:	4413      	add	r3, r2
 80012c0:	105b      	asrs	r3, r3, #1
 80012c2:	3302      	adds	r3, #2
 80012c4:	f503 736e 	add.w	r3, r3, #952	@ 0x3b8
 80012c8:	443b      	add	r3, r7
 80012ca:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	18ca      	adds	r2, r1, r3
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
			voltages[12 + n + 1][counter] = (((cellBytes2[n * 3 / 2 + 1] & 0xF0)
 80012d8:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 80012dc:	f102 010d 	add.w	r1, r2, #13
 80012e0:	f897 23ab 	ldrb.w	r2, [r7, #939]	@ 0x3ab
					>> 4) + cellBytes2[n * 3 / 2 + 2] * 16) * 3 / 2;
 80012e4:	0fd8      	lsrs	r0, r3, #31
 80012e6:	4403      	add	r3, r0
 80012e8:	105b      	asrs	r3, r3, #1
 80012ea:	4618      	mov	r0, r3
			voltages[12 + n + 1][counter] = (((cellBytes2[n * 3 / 2 + 1] & 0xF0)
 80012ec:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 80012f0:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 80012f4:	00c9      	lsls	r1, r1, #3
 80012f6:	440a      	add	r2, r1
 80012f8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		for (int n = 0; n < 12; n += 2) {
 80012fc:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001300:	3302      	adds	r3, #2
 8001302:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8001306:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 800130a:	2b0b      	cmp	r3, #11
 800130c:	dd8b      	ble.n	8001226 <main+0x462>
		}

		//Extract temperature data

		for (int i = 0; i < sensor_count; i++) {
 800130e:	2300      	movs	r3, #0
 8001310:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 8001314:	e019      	b.n	800134a <main+0x586>
			if (TM_DS18B20_Read(&OneWire1, device[i], &temp[i])) {
 8001316:	1d3a      	adds	r2, r7, #4
 8001318:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	18d1      	adds	r1, r2, r3
 8001320:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4aa8      	ldr	r2, [pc, #672]	@ (80015c8 <main+0x804>)
 8001328:	441a      	add	r2, r3
 800132a:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fbb0 	bl	8000a94 <TM_DS18B20_Read>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <main+0x57c>
				ds18b20_flag = 1;
 800133a:	2301      	movs	r3, #1
 800133c:	f887 336b 	strb.w	r3, [r7, #875]	@ 0x36b
		for (int i = 0; i < sensor_count; i++) {
 8001340:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8001344:	3301      	adds	r3, #1
 8001346:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 800134a:	f897 33a8 	ldrb.w	r3, [r7, #936]	@ 0x3a8
 800134e:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 8001352:	429a      	cmp	r2, r3
 8001354:	dbdf      	blt.n	8001316 <main+0x552>
			}
		}

		counter++;
 8001356:	f897 33ab 	ldrb.w	r3, [r7, #939]	@ 0x3ab
 800135a:	3301      	adds	r3, #1
 800135c:	f887 33ab 	strb.w	r3, [r7, #939]	@ 0x3ab

		if (counter >= 8) {
 8001360:	f897 33ab 	ldrb.w	r3, [r7, #939]	@ 0x3ab
 8001364:	2b07      	cmp	r3, #7
 8001366:	f240 810e 	bls.w	8001586 <main+0x7c2>
			counter = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	f887 33ab 	strb.w	r3, [r7, #939]	@ 0x3ab

			slowCounter++;
 8001370:	f897 33aa 	ldrb.w	r3, [r7, #938]	@ 0x3aa
 8001374:	3301      	adds	r3, #1
 8001376:	f887 33aa 	strb.w	r3, [r7, #938]	@ 0x3aa

			if (slowCounter >= 4)
 800137a:	f897 33aa 	ldrb.w	r3, [r7, #938]	@ 0x3aa
 800137e:	2b03      	cmp	r3, #3
 8001380:	d902      	bls.n	8001388 <main+0x5c4>
				slowCounter = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	f887 33aa 	strb.w	r3, [r7, #938]	@ 0x3aa

			char notAllZeroVolts = false;
 8001388:	2300      	movs	r3, #0
 800138a:	f887 3397 	strb.w	r3, [r7, #919]	@ 0x397
			for (int n = 0; n < 24; n++) // Calculate average voltage over last 8 samples, and update shunts if required
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 8001394:	e0a8      	b.n	80014e8 <main+0x724>
					{
				int average = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
				for (int c = 0; c < 8; c++)
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 80013a2:	e019      	b.n	80013d8 <main+0x614>
					average += voltages[n][c] / 2;
 80013a4:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 80013a8:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 80013ac:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 80013b0:	00d1      	lsls	r1, r2, #3
 80013b2:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 80013b6:	440a      	add	r2, r1
 80013b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013bc:	0fda      	lsrs	r2, r3, #31
 80013be:	4413      	add	r3, r2
 80013c0:	105b      	asrs	r3, r3, #1
 80013c2:	461a      	mov	r2, r3
 80013c4:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80013c8:	4413      	add	r3, r2
 80013ca:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
				for (int c = 0; c < 8; c++)
 80013ce:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 80013d2:	3301      	adds	r3, #1
 80013d4:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 80013d8:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 80013dc:	2b07      	cmp	r3, #7
 80013de:	dde1      	ble.n	80013a4 <main+0x5e0>
				voltage[n] = average >> 2;
 80013e0:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80013e4:	109a      	asrs	r2, r3, #2
 80013e6:	4979      	ldr	r1, [pc, #484]	@ (80015cc <main+0x808>)
 80013e8:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80013ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				int correction = LOW_LTC_CORRECTION;
 80013f0:	2306      	movs	r3, #6
 80013f2:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
				if (n >= 12) correction = HIGH_LTC_CORRECTION;
 80013f6:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80013fa:	2b0b      	cmp	r3, #11
 80013fc:	dd02      	ble.n	8001404 <main+0x640>
 80013fe:	2306      	movs	r3, #6
 8001400:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384


				if (voltage[n] > 0) {
 8001404:	4a71      	ldr	r2, [pc, #452]	@ (80015cc <main+0x808>)
 8001406:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	2b00      	cmp	r3, #0
 8001410:	dd25      	ble.n	800145e <main+0x69a>
					voltage[n] += correction; // With high inpedance input filters, they're reading about 8mV too low
 8001412:	4a6e      	ldr	r2, [pc, #440]	@ (80015cc <main+0x808>)
 8001414:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8001418:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800141c:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8001420:	441a      	add	r2, r3
 8001422:	496a      	ldr	r1, [pc, #424]	@ (80015cc <main+0x808>)
 8001424:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8001428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (n==0 || n==12) voltage[n] -= correction/2; // First cell has less drop due to single 3.3Kohm resistor in play
 800142c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <main+0x678>
 8001434:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8001438:	2b0c      	cmp	r3, #12
 800143a:	d110      	bne.n	800145e <main+0x69a>
 800143c:	4a63      	ldr	r2, [pc, #396]	@ (80015cc <main+0x808>)
 800143e:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8001442:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001446:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 800144a:	0fd9      	lsrs	r1, r3, #31
 800144c:	440b      	add	r3, r1
 800144e:	105b      	asrs	r3, r3, #1
 8001450:	425b      	negs	r3, r3
 8001452:	441a      	add	r2, r3
 8001454:	495d      	ldr	r1, [pc, #372]	@ (80015cc <main+0x808>)
 8001456:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}

				if (voltage[n] > 5000)
 800145e:	4a5b      	ldr	r2, [pc, #364]	@ (80015cc <main+0x808>)
 8001460:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8001464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800146c:	4293      	cmp	r3, r2
 800146e:	dd05      	ble.n	800147c <main+0x6b8>
					voltage[n] = 0; // Probably no cells plugged in to power the LTC
 8001470:	4a56      	ldr	r2, [pc, #344]	@ (80015cc <main+0x808>)
 8001472:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8001476:	2100      	movs	r1, #0
 8001478:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

				if (voltage[n] > 0)
 800147c:	4a53      	ldr	r2, [pc, #332]	@ (80015cc <main+0x808>)
 800147e:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8001482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001486:	2b00      	cmp	r3, #0
 8001488:	dd02      	ble.n	8001490 <main+0x6cc>
					notAllZeroVolts = true;
 800148a:	2301      	movs	r3, #1
 800148c:	f887 3397 	strb.w	r3, [r7, #919]	@ 0x397

				if (voltage[n] > shuntVoltage && shuntVoltage > 0)
 8001490:	4a4e      	ldr	r2, [pc, #312]	@ (80015cc <main+0x808>)
 8001492:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8001496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149a:	4a4d      	ldr	r2, [pc, #308]	@ (80015d0 <main+0x80c>)
 800149c:	8812      	ldrh	r2, [r2, #0]
 800149e:	b292      	uxth	r2, r2
 80014a0:	4293      	cmp	r3, r2
 80014a2:	dd10      	ble.n	80014c6 <main+0x702>
 80014a4:	4b4a      	ldr	r3, [pc, #296]	@ (80015d0 <main+0x80c>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00b      	beq.n	80014c6 <main+0x702>
					shuntBits |= (1 << n);
 80014ae:	2201      	movs	r2, #1
 80014b0:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b46      	ldr	r3, [pc, #280]	@ (80015d4 <main+0x810>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4313      	orrs	r3, r2
 80014c0:	4a44      	ldr	r2, [pc, #272]	@ (80015d4 <main+0x810>)
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	e00b      	b.n	80014de <main+0x71a>
				else
					shuntBits &= ~(1 << n);
 80014c6:	2201      	movs	r2, #1
 80014c8:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b3f      	ldr	r3, [pc, #252]	@ (80015d4 <main+0x810>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4013      	ands	r3, r2
 80014da:	4a3e      	ldr	r2, [pc, #248]	@ (80015d4 <main+0x810>)
 80014dc:	6013      	str	r3, [r2, #0]
			for (int n = 0; n < 24; n++) // Calculate average voltage over last 8 samples, and update shunts if required
 80014de:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80014e2:	3301      	adds	r3, #1
 80014e4:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 80014e8:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80014ec:	2b17      	cmp	r3, #23
 80014ee:	f77f af52 	ble.w	8001396 <main+0x5d2>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
			HAL_Delay(500);
#endif
			//Update status LEDs
#if !TEMPS
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); //Red LED off
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014f8:	4837      	ldr	r0, [pc, #220]	@ (80015d8 <main+0x814>)
 80014fa:	f001 fff0 	bl	80034de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); //Green LED on
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001504:	4834      	ldr	r0, [pc, #208]	@ (80015d8 <main+0x814>)
 8001506:	f001 ffea 	bl	80034de <HAL_GPIO_WritePin>
			if ((shuntBits != 0) & (slowCounter & 0x01))
 800150a:	4b32      	ldr	r3, [pc, #200]	@ (80015d4 <main+0x810>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	bf14      	ite	ne
 8001512:	2301      	movne	r3, #1
 8001514:	2300      	moveq	r3, #0
 8001516:	b2da      	uxtb	r2, r3
 8001518:	f897 33aa 	ldrb.w	r3, [r7, #938]	@ 0x3aa
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	b2db      	uxtb	r3, r3
 8001522:	4013      	ands	r3, r2
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d006      	beq.n	8001538 <main+0x774>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); //RED flash if balancing
 800152a:	2201      	movs	r2, #1
 800152c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001530:	4829      	ldr	r0, [pc, #164]	@ (80015d8 <main+0x814>)
 8001532:	f001 ffd4 	bl	80034de <HAL_GPIO_WritePin>
 8001536:	e026      	b.n	8001586 <main+0x7c2>
			else if (!notAllZeroVolts) { //Blink red if no cells detected
 8001538:	f897 3397 	ldrb.w	r3, [r7, #919]	@ 0x397
 800153c:	2b00      	cmp	r3, #0
 800153e:	d112      	bne.n	8001566 <main+0x7a2>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001546:	4824      	ldr	r0, [pc, #144]	@ (80015d8 <main+0x814>)
 8001548:	f001 ffc9 	bl	80034de <HAL_GPIO_WritePin>
				if (slowCounter & 0x01)
 800154c:	f897 33aa 	ldrb.w	r3, [r7, #938]	@ 0x3aa
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d016      	beq.n	8001586 <main+0x7c2>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800155e:	481e      	ldr	r0, [pc, #120]	@ (80015d8 <main+0x814>)
 8001560:	f001 ffbd 	bl	80034de <HAL_GPIO_WritePin>
 8001564:	e00f      	b.n	8001586 <main+0x7c2>

			} else if (commsTimer == COMMS_TIMEOUT && slowCounter & 0x01) {
 8001566:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <main+0x818>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b10      	cmp	r3, #16
 800156c:	d10b      	bne.n	8001586 <main+0x7c2>
 800156e:	f897 33aa 	ldrb.w	r3, [r7, #938]	@ 0x3aa
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <main+0x7c2>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); //Blink green if no CAN comms
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001580:	4815      	ldr	r0, [pc, #84]	@ (80015d8 <main+0x814>)
 8001582:	f001 ffac 	bl	80034de <HAL_GPIO_WritePin>

#endif

		}

		if (commsTimer < COMMS_TIMEOUT)
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <main+0x818>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b0f      	cmp	r3, #15
 800158c:	d805      	bhi.n	800159a <main+0x7d6>
			commsTimer++;
 800158e:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <main+0x818>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	4a11      	ldr	r2, [pc, #68]	@ (80015dc <main+0x818>)
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	e002      	b.n	80015a0 <main+0x7dc>
		else
			shuntVoltage = 0;
 800159a:	4b0d      	ldr	r3, [pc, #52]	@ (80015d0 <main+0x80c>)
 800159c:	2200      	movs	r2, #0
 800159e:	801a      	strh	r2, [r3, #0]

		if (dataRequestedL) {
 80015a0:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <main+0x81c>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d070      	beq.n	800168c <main+0x8c8>
			dataRequestedL = false;
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <main+0x81c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
			commsTimer = 0;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <main+0x818>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]

			// Voltage packets
			for (int packet = 0; packet < 3; packet++) {
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 80015bc:	e061      	b.n	8001682 <main+0x8be>
				for (int n = 0; n < 4; n++) {
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 80015c4:	e033      	b.n	800162e <main+0x86a>
 80015c6:	bf00      	nop
 80015c8:	20000178 	.word	0x20000178
 80015cc:	20000210 	.word	0x20000210
 80015d0:	20000270 	.word	0x20000270
 80015d4:	20000274 	.word	0x20000274
 80015d8:	40010800 	.word	0x40010800
 80015dc:	20000174 	.word	0x20000174
 80015e0:	2000016c 	.word	0x2000016c
					txData[n * 2] = voltage[packet * 4 + n] >> 8;
 80015e4:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80015e8:	009a      	lsls	r2, r3, #2
 80015ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80015ee:	4413      	add	r3, r2
 80015f0:	4a96      	ldr	r2, [pc, #600]	@ (800184c <main+0xa88>)
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	121a      	asrs	r2, r3, #8
 80015f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	b2d1      	uxtb	r1, r2
 8001600:	4a93      	ldr	r2, [pc, #588]	@ (8001850 <main+0xa8c>)
 8001602:	54d1      	strb	r1, [r2, r3]
					txData[n * 2 + 1] = voltage[packet * 4 + n] & 0xFF;
 8001604:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8001608:	009a      	lsls	r2, r3, #2
 800160a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 800160e:	4413      	add	r3, r2
 8001610:	4a8e      	ldr	r2, [pc, #568]	@ (800184c <main+0xa88>)
 8001612:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001616:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	3301      	adds	r3, #1
 800161e:	b2d1      	uxtb	r1, r2
 8001620:	4a8b      	ldr	r2, [pc, #556]	@ (8001850 <main+0xa8c>)
 8001622:	54d1      	strb	r1, [r2, r3]
				for (int n = 0; n < 4; n++) {
 8001624:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8001628:	3301      	adds	r3, #1
 800162a:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 800162e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8001632:	2b03      	cmp	r3, #3
 8001634:	ddd6      	ble.n	80015e4 <main+0x820>
				}

				txHeader.DLC = 8;
 8001636:	4b87      	ldr	r3, [pc, #540]	@ (8001854 <main+0xa90>)
 8001638:	2208      	movs	r2, #8
 800163a:	611a      	str	r2, [r3, #16]
				txHeader.IDE = CAN_ID_STD;
 800163c:	4b85      	ldr	r3, [pc, #532]	@ (8001854 <main+0xa90>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
				txHeader.RTR = CAN_RTR_DATA;
 8001642:	4b84      	ldr	r3, [pc, #528]	@ (8001854 <main+0xa90>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
				txHeader.StdId = moduleID + packet + 1;
 8001648:	4b83      	ldr	r3, [pc, #524]	@ (8001858 <main+0xa94>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8001652:	4413      	add	r3, r2
 8001654:	3301      	adds	r3, #1
 8001656:	461a      	mov	r2, r3
 8001658:	4b7e      	ldr	r3, [pc, #504]	@ (8001854 <main+0xa90>)
 800165a:	601a      	str	r2, [r3, #0]

				if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &TxMailBox)
 800165c:	4b7f      	ldr	r3, [pc, #508]	@ (800185c <main+0xa98>)
 800165e:	4a7c      	ldr	r2, [pc, #496]	@ (8001850 <main+0xa8c>)
 8001660:	497c      	ldr	r1, [pc, #496]	@ (8001854 <main+0xa90>)
 8001662:	487f      	ldr	r0, [pc, #508]	@ (8001860 <main+0xa9c>)
 8001664:	f001 f85a 	bl	800271c <HAL_CAN_AddTxMessage>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <main+0x8ae>
						!= HAL_OK) {
					Error_Handler();
 800166e:	f000 fc34 	bl	8001eda <Error_Handler>
				}

				HAL_Delay(1);
 8001672:	2001      	movs	r0, #1
 8001674:	f000 fe26 	bl	80022c4 <HAL_Delay>
			for (int packet = 0; packet < 3; packet++) {
 8001678:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 800167c:	3301      	adds	r3, #1
 800167e:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 8001682:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8001686:	2b02      	cmp	r3, #2
 8001688:	dd99      	ble.n	80015be <main+0x7fa>
 800168a:	e46d      	b.n	8000f68 <main+0x1a4>

			}

		} else if (dataRequestedH) {
 800168c:	4b75      	ldr	r3, [pc, #468]	@ (8001864 <main+0xaa0>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d064      	beq.n	8001760 <main+0x99c>
			dataRequestedH = false;
 8001696:	4b73      	ldr	r3, [pc, #460]	@ (8001864 <main+0xaa0>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
			commsTimer = 0;
 800169c:	4b72      	ldr	r3, [pc, #456]	@ (8001868 <main+0xaa4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]

			for (int packet = 0; packet < 3; packet++) {
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 80016a8:	e055      	b.n	8001756 <main+0x992>
				for (int n = 0; n < 4; n++) {
 80016aa:	2300      	movs	r3, #0
 80016ac:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 80016b0:	e026      	b.n	8001700 <main+0x93c>
					txData[n * 2] = voltage[12 + packet * 4 + n] >> 8; // Top 8 bits
 80016b2:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 80016b6:	3303      	adds	r3, #3
 80016b8:	009a      	lsls	r2, r3, #2
 80016ba:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 80016be:	4413      	add	r3, r2
 80016c0:	4a62      	ldr	r2, [pc, #392]	@ (800184c <main+0xa88>)
 80016c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c6:	121a      	asrs	r2, r3, #8
 80016c8:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	b2d1      	uxtb	r1, r2
 80016d0:	4a5f      	ldr	r2, [pc, #380]	@ (8001850 <main+0xa8c>)
 80016d2:	54d1      	strb	r1, [r2, r3]
					txData[n * 2 + 1] = voltage[12 + packet * 4 + n] & 0xFF; // Bottom 8 bits
 80016d4:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 80016d8:	3303      	adds	r3, #3
 80016da:	009a      	lsls	r2, r3, #2
 80016dc:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 80016e0:	4413      	add	r3, r2
 80016e2:	4a5a      	ldr	r2, [pc, #360]	@ (800184c <main+0xa88>)
 80016e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016e8:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	3301      	adds	r3, #1
 80016f0:	b2d1      	uxtb	r1, r2
 80016f2:	4a57      	ldr	r2, [pc, #348]	@ (8001850 <main+0xa8c>)
 80016f4:	54d1      	strb	r1, [r2, r3]
				for (int n = 0; n < 4; n++) {
 80016f6:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 80016fa:	3301      	adds	r3, #1
 80016fc:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8001700:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8001704:	2b03      	cmp	r3, #3
 8001706:	ddd4      	ble.n	80016b2 <main+0x8ee>
				}

				txHeader.DLC = 8;
 8001708:	4b52      	ldr	r3, [pc, #328]	@ (8001854 <main+0xa90>)
 800170a:	2208      	movs	r2, #8
 800170c:	611a      	str	r2, [r3, #16]
				txHeader.IDE = CAN_ID_STD;
 800170e:	4b51      	ldr	r3, [pc, #324]	@ (8001854 <main+0xa90>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
				txHeader.RTR = CAN_RTR_DATA;
 8001714:	4b4f      	ldr	r3, [pc, #316]	@ (8001854 <main+0xa90>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
				txHeader.StdId = moduleID + 10 + packet + 1;
 800171a:	4b4f      	ldr	r3, [pc, #316]	@ (8001858 <main+0xa94>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	f103 020a 	add.w	r2, r3, #10
 8001722:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8001726:	4413      	add	r3, r2
 8001728:	3301      	adds	r3, #1
 800172a:	461a      	mov	r2, r3
 800172c:	4b49      	ldr	r3, [pc, #292]	@ (8001854 <main+0xa90>)
 800172e:	601a      	str	r2, [r3, #0]

				if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &TxMailBox)
 8001730:	4b4a      	ldr	r3, [pc, #296]	@ (800185c <main+0xa98>)
 8001732:	4a47      	ldr	r2, [pc, #284]	@ (8001850 <main+0xa8c>)
 8001734:	4947      	ldr	r1, [pc, #284]	@ (8001854 <main+0xa90>)
 8001736:	484a      	ldr	r0, [pc, #296]	@ (8001860 <main+0xa9c>)
 8001738:	f000 fff0 	bl	800271c <HAL_CAN_AddTxMessage>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <main+0x982>
						!= HAL_OK) {
					Error_Handler();
 8001742:	f000 fbca 	bl	8001eda <Error_Handler>
				}

				HAL_Delay(1);
 8001746:	2001      	movs	r0, #1
 8001748:	f000 fdbc 	bl	80022c4 <HAL_Delay>
			for (int packet = 0; packet < 3; packet++) {
 800174c:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8001750:	3301      	adds	r3, #1
 8001752:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 8001756:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 800175a:	2b02      	cmp	r3, #2
 800175c:	dda5      	ble.n	80016aa <main+0x8e6>
 800175e:	e403      	b.n	8000f68 <main+0x1a4>

			}

		} else if (temperaturesRequested) {
 8001760:	4b42      	ldr	r3, [pc, #264]	@ (800186c <main+0xaa8>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d06a      	beq.n	8001840 <main+0xa7c>
			temperaturesRequested = false;
 800176a:	4b40      	ldr	r3, [pc, #256]	@ (800186c <main+0xaa8>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
			commsTimer = 0;
 8001770:	4b3d      	ldr	r3, [pc, #244]	@ (8001868 <main+0xaa4>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]

			for (int packet = 0; packet < n_packets_temps; packet++) {
 8001776:	2300      	movs	r3, #0
 8001778:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
 800177c:	e058      	b.n	8001830 <main+0xa6c>

				for (int i = 0; i < 8; i++) {
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 8001784:	e029      	b.n	80017da <main+0xa16>
					if ((i + 8 * packet) < sensor_count) {
 8001786:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 800178a:	00da      	lsls	r2, r3, #3
 800178c:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8001790:	441a      	add	r2, r3
 8001792:	f897 33a8 	ldrb.w	r3, [r7, #936]	@ 0x3a8
 8001796:	429a      	cmp	r2, r3
 8001798:	da14      	bge.n	80017c4 <main+0xa00>
						txData[i] = temp[i + 8 * packet];
 800179a:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 800179e:	00da      	lsls	r2, r3, #3
 80017a0:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80017a4:	4413      	add	r3, r2
 80017a6:	4a32      	ldr	r2, [pc, #200]	@ (8001870 <main+0xaac>)
 80017a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fe8f 	bl	80004d0 <__aeabi_f2uiz>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b2d9      	uxtb	r1, r3
 80017b6:	4a26      	ldr	r2, [pc, #152]	@ (8001850 <main+0xa8c>)
 80017b8:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80017bc:	4413      	add	r3, r2
 80017be:	460a      	mov	r2, r1
 80017c0:	701a      	strb	r2, [r3, #0]
 80017c2:	e005      	b.n	80017d0 <main+0xa0c>
					} else {
						txData[i] = 0;
 80017c4:	4a22      	ldr	r2, [pc, #136]	@ (8001850 <main+0xa8c>)
 80017c6:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80017ca:	4413      	add	r3, r2
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++) {
 80017d0:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80017d4:	3301      	adds	r3, #1
 80017d6:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 80017da:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80017de:	2b07      	cmp	r3, #7
 80017e0:	ddd1      	ble.n	8001786 <main+0x9c2>
					}

				}

				txHeader.DLC = 8;
 80017e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001854 <main+0xa90>)
 80017e4:	2208      	movs	r2, #8
 80017e6:	611a      	str	r2, [r3, #16]
				txHeader.IDE = CAN_ID_STD;
 80017e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <main+0xa90>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
				txHeader.RTR = CAN_RTR_DATA;
 80017ee:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <main+0xa90>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	60da      	str	r2, [r3, #12]
				txHeader.StdId = moduleID + 20 + packet + 1;
 80017f4:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <main+0xa94>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	f103 0214 	add.w	r2, r3, #20
 80017fc:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 8001800:	4413      	add	r3, r2
 8001802:	3301      	adds	r3, #1
 8001804:	461a      	mov	r2, r3
 8001806:	4b13      	ldr	r3, [pc, #76]	@ (8001854 <main+0xa90>)
 8001808:	601a      	str	r2, [r3, #0]

				if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &TxMailBox)
 800180a:	4b14      	ldr	r3, [pc, #80]	@ (800185c <main+0xa98>)
 800180c:	4a10      	ldr	r2, [pc, #64]	@ (8001850 <main+0xa8c>)
 800180e:	4911      	ldr	r1, [pc, #68]	@ (8001854 <main+0xa90>)
 8001810:	4813      	ldr	r0, [pc, #76]	@ (8001860 <main+0xa9c>)
 8001812:	f000 ff83 	bl	800271c <HAL_CAN_AddTxMessage>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <main+0xa5c>
						!= HAL_OK) {
					Error_Handler();
 800181c:	f000 fb5d 	bl	8001eda <Error_Handler>
				}

				HAL_Delay(1);
 8001820:	2001      	movs	r0, #1
 8001822:	f000 fd4f 	bl	80022c4 <HAL_Delay>
			for (int packet = 0; packet < n_packets_temps; packet++) {
 8001826:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 800182a:	3301      	adds	r3, #1
 800182c:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
 8001830:	f897 336a 	ldrb.w	r3, [r7, #874]	@ 0x36a
 8001834:	f8d7 2370 	ldr.w	r2, [r7, #880]	@ 0x370
 8001838:	429a      	cmp	r2, r3
 800183a:	dba0      	blt.n	800177e <main+0x9ba>
 800183c:	f7ff bb94 	b.w	8000f68 <main+0x1a4>
			}
		} else {
			HAL_Delay(4);
 8001840:	2004      	movs	r0, #4
 8001842:	f000 fd3f 	bl	80022c4 <HAL_Delay>
	while (1) {
 8001846:	f7ff bb8f 	b.w	8000f68 <main+0x1a4>
 800184a:	bf00      	nop
 800184c:	20000210 	.word	0x20000210
 8001850:	20000160 	.word	0x20000160
 8001854:	20000148 	.word	0x20000148
 8001858:	20000170 	.word	0x20000170
 800185c:	20000168 	.word	0x20000168
 8001860:	20000028 	.word	0x20000028
 8001864:	2000016d 	.word	0x2000016d
 8001868:	20000174 	.word	0x20000174
 800186c:	2000016e 	.word	0x2000016e
 8001870:	20000178 	.word	0x20000178

08001874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b090      	sub	sp, #64	@ 0x40
 8001878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187a:	f107 0318 	add.w	r3, r7, #24
 800187e:	2228      	movs	r2, #40	@ 0x28
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f003 fa82 	bl	8004d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800189a:	2301      	movs	r3, #1
 800189c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800189e:	2310      	movs	r3, #16
 80018a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a2:	2302      	movs	r3, #2
 80018a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80018a6:	2300      	movs	r3, #0
 80018a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80018aa:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80018ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b0:	f107 0318 	add.w	r3, r7, #24
 80018b4:	4618      	mov	r0, r3
 80018b6:	f001 fe2b 	bl	8003510 <HAL_RCC_OscConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80018c0:	f000 fb0b 	bl	8001eda <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c4:	230f      	movs	r3, #15
 80018c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c8:	2302      	movs	r3, #2
 80018ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80018d0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80018d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80018d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80018da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2102      	movs	r1, #2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 f897 	bl	8003a14 <HAL_RCC_ClockConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80018ec:	f000 faf5 	bl	8001eda <Error_Handler>
  }
}
 80018f0:	bf00      	nop
 80018f2:	3740      	adds	r7, #64	@ 0x40
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	@ 0x28
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80018fe:	4b25      	ldr	r3, [pc, #148]	@ (8001994 <MX_CAN_Init+0x9c>)
 8001900:	4a25      	ldr	r2, [pc, #148]	@ (8001998 <MX_CAN_Init+0xa0>)
 8001902:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8001904:	4b23      	ldr	r3, [pc, #140]	@ (8001994 <MX_CAN_Init+0x9c>)
 8001906:	2202      	movs	r2, #2
 8001908:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800190a:	4b22      	ldr	r3, [pc, #136]	@ (8001994 <MX_CAN_Init+0x9c>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001910:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <MX_CAN_Init+0x9c>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001916:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <MX_CAN_Init+0x9c>)
 8001918:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800191c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800191e:	4b1d      	ldr	r3, [pc, #116]	@ (8001994 <MX_CAN_Init+0x9c>)
 8001920:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001924:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001926:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <MX_CAN_Init+0x9c>)
 8001928:	2200      	movs	r2, #0
 800192a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800192c:	4b19      	ldr	r3, [pc, #100]	@ (8001994 <MX_CAN_Init+0x9c>)
 800192e:	2200      	movs	r2, #0
 8001930:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001932:	4b18      	ldr	r3, [pc, #96]	@ (8001994 <MX_CAN_Init+0x9c>)
 8001934:	2200      	movs	r2, #0
 8001936:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001938:	4b16      	ldr	r3, [pc, #88]	@ (8001994 <MX_CAN_Init+0x9c>)
 800193a:	2200      	movs	r2, #0
 800193c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <MX_CAN_Init+0x9c>)
 8001940:	2200      	movs	r2, #0
 8001942:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001944:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <MX_CAN_Init+0x9c>)
 8001946:	2200      	movs	r2, #0
 8001948:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800194a:	4812      	ldr	r0, [pc, #72]	@ (8001994 <MX_CAN_Init+0x9c>)
 800194c:	f000 fcde 	bl	800230c <HAL_CAN_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001956:	f000 fac0 	bl	8001eda <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800195a:	2301      	movs	r3, #1
 800195c:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800197a:	2301      	movs	r3, #1
 800197c:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001982:	463b      	mov	r3, r7
 8001984:	4619      	mov	r1, r3
 8001986:	4803      	ldr	r0, [pc, #12]	@ (8001994 <MX_CAN_Init+0x9c>)
 8001988:	f000 fdbb 	bl	8002502 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	@ 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000028 	.word	0x20000028
 8001998:	40006400 	.word	0x40006400

0800199c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019a0:	4b17      	ldr	r3, [pc, #92]	@ (8001a00 <MX_SPI1_Init+0x64>)
 80019a2:	4a18      	ldr	r2, [pc, #96]	@ (8001a04 <MX_SPI1_Init+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019a6:	4b16      	ldr	r3, [pc, #88]	@ (8001a00 <MX_SPI1_Init+0x64>)
 80019a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019ae:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <MX_SPI1_Init+0x64>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b4:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <MX_SPI1_Init+0x64>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80019ba:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <MX_SPI1_Init+0x64>)
 80019bc:	2202      	movs	r2, #2
 80019be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <MX_SPI1_Init+0x64>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <MX_SPI1_Init+0x64>)
 80019c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <MX_SPI1_Init+0x64>)
 80019d0:	2210      	movs	r2, #16
 80019d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <MX_SPI1_Init+0x64>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019da:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <MX_SPI1_Init+0x64>)
 80019dc:	2200      	movs	r2, #0
 80019de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e0:	4b07      	ldr	r3, [pc, #28]	@ (8001a00 <MX_SPI1_Init+0x64>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019e6:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <MX_SPI1_Init+0x64>)
 80019e8:	220a      	movs	r2, #10
 80019ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ec:	4804      	ldr	r0, [pc, #16]	@ (8001a00 <MX_SPI1_Init+0x64>)
 80019ee:	f002 f96d 	bl	8003ccc <HAL_SPI_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019f8:	f000 fa6f 	bl	8001eda <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000050 	.word	0x20000050
 8001a04:	40013000 	.word	0x40013000

08001a08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a0c:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <MX_SPI2_Init+0x64>)
 8001a0e:	4a18      	ldr	r2, [pc, #96]	@ (8001a70 <MX_SPI2_Init+0x68>)
 8001a10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a12:	4b16      	ldr	r3, [pc, #88]	@ (8001a6c <MX_SPI2_Init+0x64>)
 8001a14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <MX_SPI2_Init+0x64>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <MX_SPI2_Init+0x64>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a26:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <MX_SPI2_Init+0x64>)
 8001a28:	2202      	movs	r2, #2
 8001a2a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <MX_SPI2_Init+0x64>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <MX_SPI2_Init+0x64>)
 8001a34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a38:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <MX_SPI2_Init+0x64>)
 8001a3c:	2210      	movs	r2, #16
 8001a3e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a40:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <MX_SPI2_Init+0x64>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <MX_SPI2_Init+0x64>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a4c:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <MX_SPI2_Init+0x64>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <MX_SPI2_Init+0x64>)
 8001a54:	220a      	movs	r2, #10
 8001a56:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a58:	4804      	ldr	r0, [pc, #16]	@ (8001a6c <MX_SPI2_Init+0x64>)
 8001a5a:	f002 f937 	bl	8003ccc <HAL_SPI_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a64:	f000 fa39 	bl	8001eda <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200000a8 	.word	0x200000a8
 8001a70:	40003800 	.word	0x40003800

08001a74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a88:	463b      	mov	r3, r7
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a90:	4b1e      	ldr	r3, [pc, #120]	@ (8001b0c <MX_TIM1_Init+0x98>)
 8001a92:	4a1f      	ldr	r2, [pc, #124]	@ (8001b10 <MX_TIM1_Init+0x9c>)
 8001a94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001a96:	4b1d      	ldr	r3, [pc, #116]	@ (8001b0c <MX_TIM1_Init+0x98>)
 8001a98:	220f      	movs	r2, #15
 8001a9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b0c <MX_TIM1_Init+0x98>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b0c <MX_TIM1_Init+0x98>)
 8001aa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aa8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aaa:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <MX_TIM1_Init+0x98>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ab0:	4b16      	ldr	r3, [pc, #88]	@ (8001b0c <MX_TIM1_Init+0x98>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab6:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <MX_TIM1_Init+0x98>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001abc:	4813      	ldr	r0, [pc, #76]	@ (8001b0c <MX_TIM1_Init+0x98>)
 8001abe:	f002 fe9a 	bl	80047f6 <HAL_TIM_Base_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ac8:	f000 fa07 	bl	8001eda <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480c      	ldr	r0, [pc, #48]	@ (8001b0c <MX_TIM1_Init+0x98>)
 8001ada:	f002 ff2d 	bl	8004938 <HAL_TIM_ConfigClockSource>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ae4:	f000 f9f9 	bl	8001eda <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001af0:	463b      	mov	r3, r7
 8001af2:	4619      	mov	r1, r3
 8001af4:	4805      	ldr	r0, [pc, #20]	@ (8001b0c <MX_TIM1_Init+0x98>)
 8001af6:	f003 f8eb 	bl	8004cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b00:	f000 f9eb 	bl	8001eda <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000100 	.word	0x20000100
 8001b10:	40012c00 	.word	0x40012c00

08001b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1a:	f107 0310 	add.w	r3, r7, #16
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b28:	4b32      	ldr	r3, [pc, #200]	@ (8001bf4 <MX_GPIO_Init+0xe0>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a31      	ldr	r2, [pc, #196]	@ (8001bf4 <MX_GPIO_Init+0xe0>)
 8001b2e:	f043 0320 	orr.w	r3, r3, #32
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf4 <MX_GPIO_Init+0xe0>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0320 	and.w	r3, r3, #32
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b40:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <MX_GPIO_Init+0xe0>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a2b      	ldr	r2, [pc, #172]	@ (8001bf4 <MX_GPIO_Init+0xe0>)
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b29      	ldr	r3, [pc, #164]	@ (8001bf4 <MX_GPIO_Init+0xe0>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b58:	4b26      	ldr	r3, [pc, #152]	@ (8001bf4 <MX_GPIO_Init+0xe0>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a25      	ldr	r2, [pc, #148]	@ (8001bf4 <MX_GPIO_Init+0xe0>)
 8001b5e:	f043 0308 	orr.w	r3, r3, #8
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b23      	ldr	r3, [pc, #140]	@ (8001bf4 <MX_GPIO_Init+0xe0>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DQ_Pin|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8001b70:	2200      	movs	r2, #0
 8001b72:	f248 4101 	movw	r1, #33793	@ 0x8401
 8001b76:	4820      	ldr	r0, [pc, #128]	@ (8001bf8 <MX_GPIO_Init+0xe4>)
 8001b78:	f001 fcb1 	bl	80034de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b82:	481e      	ldr	r0, [pc, #120]	@ (8001bfc <MX_GPIO_Init+0xe8>)
 8001b84:	f001 fcab 	bl	80034de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b8e:	481a      	ldr	r0, [pc, #104]	@ (8001bf8 <MX_GPIO_Init+0xe4>)
 8001b90:	f001 fca5 	bl	80034de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DQ_Pin PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = DQ_Pin|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 8001b94:	f248 5301 	movw	r3, #34049	@ 0x8501
 8001b98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 0310 	add.w	r3, r7, #16
 8001baa:	4619      	mov	r1, r3
 8001bac:	4812      	ldr	r0, [pc, #72]	@ (8001bf8 <MX_GPIO_Init+0xe4>)
 8001bae:	f001 fafb 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001bb2:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8001bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	480d      	ldr	r0, [pc, #52]	@ (8001bfc <MX_GPIO_Init+0xe8>)
 8001bc8:	f001 faee 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bde:	f107 0310 	add.w	r3, r7, #16
 8001be2:	4619      	mov	r1, r3
 8001be4:	4805      	ldr	r0, [pc, #20]	@ (8001bfc <MX_GPIO_Init+0xe8>)
 8001be6:	f001 fadf 	bl	80031a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001bea:	bf00      	nop
 8001bec:	3720      	adds	r7, #32
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010800 	.word	0x40010800
 8001bfc:	40010c00 	.word	0x40010c00

08001c00 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08c      	sub	sp, #48	@ 0x30
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	f107 0210 	add.w	r2, r7, #16
 8001c10:	2100      	movs	r1, #0
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 fe51 	bl	80028ba <HAL_CAN_GetRxMessage>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		// Reception error
		Error_Handler();
 8001c1e:	f000 f95c 	bl	8001eda <Error_Handler>
	}

	// Process received data
	uint32_t rxPacketID = rxHeader.StdId;
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (USE_29BIT_IDS) {
		rxPacketID = rxHeader.ExtId;
	}

	// Only one packet we care about - the data request
	if (rxPacketID == moduleID) {
 8001c26:	4b18      	ldr	r3, [pc, #96]	@ (8001c88 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10a      	bne.n	8001c48 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
		shuntVoltage = (rxData[0] << 8) + rxData[1]; // Big endian format (high byte first)
 8001c32:	7a3b      	ldrb	r3, [r7, #8]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	7a7a      	ldrb	r2, [r7, #9]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001c40:	801a      	strh	r2, [r3, #0]
		dataRequestedL = true;
 8001c42:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
	}

	if (rxPacketID == moduleID + 10) {
 8001c48:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	f103 020a 	add.w	r2, r3, #10
 8001c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d10a      	bne.n	8001c6c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		shuntVoltage = (rxData[0] << 8) + rxData[1];
 8001c56:	7a3b      	ldrb	r3, [r7, #8]
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	7a7a      	ldrb	r2, [r7, #9]
 8001c5e:	4413      	add	r3, r2
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001c64:	801a      	strh	r2, [r3, #0]
		dataRequestedH = true;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]
	}

	if (rxPacketID == moduleID + 20) {
 8001c6c:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	f103 0214 	add.w	r2, r3, #20
 8001c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d102      	bne.n	8001c80 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
		temperaturesRequested = true;
 8001c7a:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
	}
}
 8001c80:	bf00      	nop
 8001c82:	3730      	adds	r7, #48	@ 0x30
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000170 	.word	0x20000170
 8001c8c:	20000270 	.word	0x20000270
 8001c90:	2000016c 	.word	0x2000016c
 8001c94:	2000016d 	.word	0x2000016d
 8001c98:	2000016e 	.word	0x2000016e

08001c9c <GetModuleID>:

void GetModuleID(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
    uint8_t rotarySwitch = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	71fb      	strb	r3, [r7, #7]

    if (MOD_ID_NUM1) rotarySwitch += 1;
 8001ca6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001caa:	481c      	ldr	r0, [pc, #112]	@ (8001d1c <GetModuleID+0x80>)
 8001cac:	f001 fc00 	bl	80034b0 <HAL_GPIO_ReadPin>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <GetModuleID+0x20>
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	71fb      	strb	r3, [r7, #7]
    if (MOD_ID_NUM2) rotarySwitch += 2;
 8001cbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cc0:	4816      	ldr	r0, [pc, #88]	@ (8001d1c <GetModuleID+0x80>)
 8001cc2:	f001 fbf5 	bl	80034b0 <HAL_GPIO_ReadPin>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <GetModuleID+0x36>
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	3302      	adds	r3, #2
 8001cd0:	71fb      	strb	r3, [r7, #7]
    if (MOD_ID_NUM4) rotarySwitch += 4;
 8001cd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cd6:	4811      	ldr	r0, [pc, #68]	@ (8001d1c <GetModuleID+0x80>)
 8001cd8:	f001 fbea 	bl	80034b0 <HAL_GPIO_ReadPin>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d102      	bne.n	8001ce8 <GetModuleID+0x4c>
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	71fb      	strb	r3, [r7, #7]
    if (MOD_ID_NUM8) rotarySwitch += 8;
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	480c      	ldr	r0, [pc, #48]	@ (8001d1c <GetModuleID+0x80>)
 8001cec:	f001 fbe0 	bl	80034b0 <HAL_GPIO_ReadPin>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d102      	bne.n	8001cfc <GetModuleID+0x60>
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	3308      	adds	r3, #8
 8001cfa:	71fb      	strb	r3, [r7, #7]

    moduleID = BASE_ID + rotarySwitch * 30;  // Atomic enough for 8-bit on STM32F1
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	0112      	lsls	r2, r2, #4
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	4b03      	ldr	r3, [pc, #12]	@ (8001d20 <GetModuleID+0x84>)
 8001d12:	801a      	strh	r2, [r3, #0]
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40010c00 	.word	0x40010c00
 8001d20:	20000170 	.word	0x20000170

08001d24 <PubModuleID>:

void PubModuleID(void){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
	txHeader.DLC = 8;
 8001d28:	4b0e      	ldr	r3, [pc, #56]	@ (8001d64 <PubModuleID+0x40>)
 8001d2a:	2208      	movs	r2, #8
 8001d2c:	611a      	str	r2, [r3, #16]
	txHeader.IDE = CAN_ID_STD;
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d64 <PubModuleID+0x40>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8001d34:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <PubModuleID+0x40>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
	txHeader.StdId = moduleID;
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <PubModuleID+0x44>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <PubModuleID+0x40>)
 8001d42:	601a      	str	r2, [r3, #0]

	if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &TxMailBox)
 8001d44:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <PubModuleID+0x48>)
 8001d46:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <PubModuleID+0x4c>)
 8001d48:	4906      	ldr	r1, [pc, #24]	@ (8001d64 <PubModuleID+0x40>)
 8001d4a:	480a      	ldr	r0, [pc, #40]	@ (8001d74 <PubModuleID+0x50>)
 8001d4c:	f000 fce6 	bl	800271c <HAL_CAN_AddTxMessage>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <PubModuleID+0x36>
			!= HAL_OK) {
		Error_Handler();
 8001d56:	f000 f8c0 	bl	8001eda <Error_Handler>
	}

	HAL_Delay(1);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f000 fab2 	bl	80022c4 <HAL_Delay>
}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000148 	.word	0x20000148
 8001d68:	20000170 	.word	0x20000170
 8001d6c:	20000168 	.word	0x20000168
 8001d70:	20000160 	.word	0x20000160
 8001d74:	20000028 	.word	0x20000028

08001d78 <Delay_us>:

void Delay_us(uint16_t us) {
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001d82:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <Delay_us+0x2c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2200      	movs	r2, #0
 8001d88:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us)
 8001d8a:	bf00      	nop
 8001d8c:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <Delay_us+0x2c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d3f9      	bcc.n	8001d8c <Delay_us+0x14>
		;
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	20000100 	.word	0x20000100

08001da8 <SPIWrite>:

void SPIWrite(SPI_HandleTypeDef *hspi, uint8_t cmd) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi, (uint8_t*) &cmd, 1, HAL_MAX_DELAY);
 8001db4:	1cf9      	adds	r1, r7, #3
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	2201      	movs	r2, #1
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f002 f809 	bl	8003dd4 <HAL_SPI_Transmit>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <SPIRead>:

void SPIRead(SPI_HandleTypeDef *hspi, uint8_t cmd, uint8_t numRegisters,
		uint8_t *const buff) {
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	72fb      	strb	r3, [r7, #11]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	72bb      	strb	r3, [r7, #10]

	// Send command to read data
	HAL_SPI_Transmit(hspi, &cmd, 1, HAL_MAX_DELAY);
 8001ddc:	f107 010b 	add.w	r1, r7, #11
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295
 8001de4:	2201      	movs	r2, #1
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f001 fff4 	bl	8003dd4 <HAL_SPI_Transmit>

	// Read the data registers
	HAL_SPI_Receive(hspi, buff, numRegisters, HAL_MAX_DELAY);
 8001dec:	7abb      	ldrb	r3, [r7, #10]
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f002 f930 	bl	800405c <HAL_SPI_Receive>

}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <readCellValues>:

void readCellValues(SPI_HandleTypeDef *hspi, uint8_t cmd, uint8_t numRegisters,
		uint8_t *const buff) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	@ 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	72fb      	strb	r3, [r7, #11]
 8001e12:	4613      	mov	r3, r2
 8001e14:	72bb      	strb	r3, [r7, #10]
	uint8_t rawBuff[19];  // 18 data bytes + 1 PEC
	do {
		SPIRead(hspi, cmd, 19, rawBuff);
 8001e16:	f107 0310 	add.w	r3, r7, #16
 8001e1a:	7af9      	ldrb	r1, [r7, #11]
 8001e1c:	2213      	movs	r2, #19
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f7ff ffd3 	bl	8001dca <SPIRead>
	} while (rawBuff[0] == 0xFF);
 8001e24:	7c3b      	ldrb	r3, [r7, #16]
 8001e26:	2bff      	cmp	r3, #255	@ 0xff
 8001e28:	d0f5      	beq.n	8001e16 <readCellValues+0x12>

	uint8_t pecCalculated = calculatePEC(rawBuff, 18);
 8001e2a:	f107 0310 	add.w	r3, r7, #16
 8001e2e:	2112      	movs	r1, #18
 8001e30:	4618      	mov	r0, r3
 8001e32:	f000 f81a 	bl	8001e6a <calculatePEC>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t pecReceived = rawBuff[18];
 8001e3c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001e40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	if (pecCalculated != pecReceived) {
 8001e44:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001e48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <readCellValues+0x50>
		Error_Handler();
 8001e50:	f000 f843 	bl	8001eda <Error_Handler>
	}

	// Copy 18 data bytes to original buffer
	memcpy(buff, rawBuff, 18);
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	2212      	movs	r2, #18
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f002 ffc1 	bl	8004de4 <memcpy>
}
 8001e62:	bf00      	nop
 8001e64:	3728      	adds	r7, #40	@ 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <calculatePEC>:

uint8_t calculatePEC(uint8_t *data, uint8_t len) {
 8001e6a:	b480      	push	{r7}
 8001e6c:	b085      	sub	sp, #20
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0x41;
 8001e76:	2341      	movs	r3, #65	@ 0x41
 8001e78:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < len; i++) {
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73bb      	strb	r3, [r7, #14]
 8001e7e:	e022      	b.n	8001ec6 <calculatePEC+0x5c>
		crc ^= data[i];
 8001e80:	7bbb      	ldrb	r3, [r7, #14]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	781a      	ldrb	r2, [r3, #0]
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	4053      	eors	r3, r2
 8001e8c:	73fb      	strb	r3, [r7, #15]
		for (uint8_t j = 0; j < 8; j++) {
 8001e8e:	2300      	movs	r3, #0
 8001e90:	737b      	strb	r3, [r7, #13]
 8001e92:	e012      	b.n	8001eba <calculatePEC+0x50>
			if (crc & 0x80)
 8001e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	da08      	bge.n	8001eae <calculatePEC+0x44>
				crc = (crc << 1) ^ 0x07;
 8001e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	b25b      	sxtb	r3, r3
 8001ea4:	f083 0307 	eor.w	r3, r3, #7
 8001ea8:	b25b      	sxtb	r3, r3
 8001eaa:	73fb      	strb	r3, [r7, #15]
 8001eac:	e002      	b.n	8001eb4 <calculatePEC+0x4a>
			else
				crc <<= 1;
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
		for (uint8_t j = 0; j < 8; j++) {
 8001eb4:	7b7b      	ldrb	r3, [r7, #13]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	737b      	strb	r3, [r7, #13]
 8001eba:	7b7b      	ldrb	r3, [r7, #13]
 8001ebc:	2b07      	cmp	r3, #7
 8001ebe:	d9e9      	bls.n	8001e94 <calculatePEC+0x2a>
	for (uint8_t i = 0; i < len; i++) {
 8001ec0:	7bbb      	ldrb	r3, [r7, #14]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	73bb      	strb	r3, [r7, #14]
 8001ec6:	7bba      	ldrb	r2, [r7, #14]
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d3d8      	bcc.n	8001e80 <calculatePEC+0x16>
		}
	}
	return crc;
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ede:	b672      	cpsid	i
}
 8001ee0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ee2:	bf00      	nop
 8001ee4:	e7fd      	b.n	8001ee2 <Error_Handler+0x8>
	...

08001ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eee:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <HAL_MspInit+0x5c>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	4a14      	ldr	r2, [pc, #80]	@ (8001f44 <HAL_MspInit+0x5c>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6193      	str	r3, [r2, #24]
 8001efa:	4b12      	ldr	r3, [pc, #72]	@ (8001f44 <HAL_MspInit+0x5c>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	4b0f      	ldr	r3, [pc, #60]	@ (8001f44 <HAL_MspInit+0x5c>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f44 <HAL_MspInit+0x5c>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f10:	61d3      	str	r3, [r2, #28]
 8001f12:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <HAL_MspInit+0x5c>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <HAL_MspInit+0x60>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <HAL_MspInit+0x60>)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40010000 	.word	0x40010000

08001f4c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 0310 	add.w	r3, r7, #16
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a20      	ldr	r2, [pc, #128]	@ (8001fe8 <HAL_CAN_MspInit+0x9c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d139      	bne.n	8001fe0 <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fec <HAL_CAN_MspInit+0xa0>)
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	4a1e      	ldr	r2, [pc, #120]	@ (8001fec <HAL_CAN_MspInit+0xa0>)
 8001f72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f76:	61d3      	str	r3, [r2, #28]
 8001f78:	4b1c      	ldr	r3, [pc, #112]	@ (8001fec <HAL_CAN_MspInit+0xa0>)
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f84:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <HAL_CAN_MspInit+0xa0>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a18      	ldr	r2, [pc, #96]	@ (8001fec <HAL_CAN_MspInit+0xa0>)
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <HAL_CAN_MspInit+0xa0>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f9c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001faa:	f107 0310 	add.w	r3, r7, #16
 8001fae:	4619      	mov	r1, r3
 8001fb0:	480f      	ldr	r0, [pc, #60]	@ (8001ff0 <HAL_CAN_MspInit+0xa4>)
 8001fb2:	f001 f8f9 	bl	80031a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f107 0310 	add.w	r3, r7, #16
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4809      	ldr	r0, [pc, #36]	@ (8001ff0 <HAL_CAN_MspInit+0xa4>)
 8001fcc:	f001 f8ec 	bl	80031a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	2014      	movs	r0, #20
 8001fd6:	f001 f8b0 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001fda:	2014      	movs	r0, #20
 8001fdc:	f001 f8c9 	bl	8003172 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001fe0:	bf00      	nop
 8001fe2:	3720      	adds	r7, #32
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40006400 	.word	0x40006400
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40010800 	.word	0x40010800

08001ff4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	@ 0x28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 0318 	add.w	r3, r7, #24
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a37      	ldr	r2, [pc, #220]	@ (80020ec <HAL_SPI_MspInit+0xf8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d130      	bne.n	8002076 <HAL_SPI_MspInit+0x82>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002014:	4b36      	ldr	r3, [pc, #216]	@ (80020f0 <HAL_SPI_MspInit+0xfc>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4a35      	ldr	r2, [pc, #212]	@ (80020f0 <HAL_SPI_MspInit+0xfc>)
 800201a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800201e:	6193      	str	r3, [r2, #24]
 8002020:	4b33      	ldr	r3, [pc, #204]	@ (80020f0 <HAL_SPI_MspInit+0xfc>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	4b30      	ldr	r3, [pc, #192]	@ (80020f0 <HAL_SPI_MspInit+0xfc>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	4a2f      	ldr	r2, [pc, #188]	@ (80020f0 <HAL_SPI_MspInit+0xfc>)
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	6193      	str	r3, [r2, #24]
 8002038:	4b2d      	ldr	r3, [pc, #180]	@ (80020f0 <HAL_SPI_MspInit+0xfc>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002044:	23a0      	movs	r3, #160	@ 0xa0
 8002046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f107 0318 	add.w	r3, r7, #24
 8002054:	4619      	mov	r1, r3
 8002056:	4827      	ldr	r0, [pc, #156]	@ (80020f4 <HAL_SPI_MspInit+0x100>)
 8002058:	f001 f8a6 	bl	80031a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800205c:	2340      	movs	r3, #64	@ 0x40
 800205e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002068:	f107 0318 	add.w	r3, r7, #24
 800206c:	4619      	mov	r1, r3
 800206e:	4821      	ldr	r0, [pc, #132]	@ (80020f4 <HAL_SPI_MspInit+0x100>)
 8002070:	f001 f89a 	bl	80031a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002074:	e036      	b.n	80020e4 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a1f      	ldr	r2, [pc, #124]	@ (80020f8 <HAL_SPI_MspInit+0x104>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d131      	bne.n	80020e4 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002080:	4b1b      	ldr	r3, [pc, #108]	@ (80020f0 <HAL_SPI_MspInit+0xfc>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	4a1a      	ldr	r2, [pc, #104]	@ (80020f0 <HAL_SPI_MspInit+0xfc>)
 8002086:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800208a:	61d3      	str	r3, [r2, #28]
 800208c:	4b18      	ldr	r3, [pc, #96]	@ (80020f0 <HAL_SPI_MspInit+0xfc>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002098:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <HAL_SPI_MspInit+0xfc>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	4a14      	ldr	r2, [pc, #80]	@ (80020f0 <HAL_SPI_MspInit+0xfc>)
 800209e:	f043 0308 	orr.w	r3, r3, #8
 80020a2:	6193      	str	r3, [r2, #24]
 80020a4:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <HAL_SPI_MspInit+0xfc>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80020b0:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80020b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020be:	f107 0318 	add.w	r3, r7, #24
 80020c2:	4619      	mov	r1, r3
 80020c4:	480d      	ldr	r0, [pc, #52]	@ (80020fc <HAL_SPI_MspInit+0x108>)
 80020c6:	f001 f86f 	bl	80031a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80020ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d8:	f107 0318 	add.w	r3, r7, #24
 80020dc:	4619      	mov	r1, r3
 80020de:	4807      	ldr	r0, [pc, #28]	@ (80020fc <HAL_SPI_MspInit+0x108>)
 80020e0:	f001 f862 	bl	80031a8 <HAL_GPIO_Init>
}
 80020e4:	bf00      	nop
 80020e6:	3728      	adds	r7, #40	@ 0x28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40013000 	.word	0x40013000
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40010800 	.word	0x40010800
 80020f8:	40003800 	.word	0x40003800
 80020fc:	40010c00 	.word	0x40010c00

08002100 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a09      	ldr	r2, [pc, #36]	@ (8002134 <HAL_TIM_Base_MspInit+0x34>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d10b      	bne.n	800212a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002112:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <HAL_TIM_Base_MspInit+0x38>)
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	4a08      	ldr	r2, [pc, #32]	@ (8002138 <HAL_TIM_Base_MspInit+0x38>)
 8002118:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800211c:	6193      	str	r3, [r2, #24]
 800211e:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <HAL_TIM_Base_MspInit+0x38>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr
 8002134:	40012c00 	.word	0x40012c00
 8002138:	40021000 	.word	0x40021000

0800213c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <NMI_Handler+0x4>

08002144 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <HardFault_Handler+0x4>

0800214c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <MemManage_Handler+0x4>

08002154 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <BusFault_Handler+0x4>

0800215c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <UsageFault_Handler+0x4>

08002164 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800218c:	f000 f87e 	bl	800228c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}

08002194 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002198:	4802      	ldr	r0, [pc, #8]	@ (80021a4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800219a:	f000 fcd4 	bl	8002b46 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000028 	.word	0x20000028

080021a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021b4:	f7ff fff8 	bl	80021a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021b8:	480b      	ldr	r0, [pc, #44]	@ (80021e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021ba:	490c      	ldr	r1, [pc, #48]	@ (80021ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021bc:	4a0c      	ldr	r2, [pc, #48]	@ (80021f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c0:	e002      	b.n	80021c8 <LoopCopyDataInit>

080021c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021c6:	3304      	adds	r3, #4

080021c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021cc:	d3f9      	bcc.n	80021c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ce:	4a09      	ldr	r2, [pc, #36]	@ (80021f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021d0:	4c09      	ldr	r4, [pc, #36]	@ (80021f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d4:	e001      	b.n	80021da <LoopFillZerobss>

080021d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d8:	3204      	adds	r2, #4

080021da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021dc:	d3fb      	bcc.n	80021d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021de:	f002 fddd 	bl	8004d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021e2:	f7fe fdef 	bl	8000dc4 <main>
  bx lr
 80021e6:	4770      	bx	lr
  ldr r0, =_sdata
 80021e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80021f0:	08004e44 	.word	0x08004e44
  ldr r2, =_sbss
 80021f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80021f8:	2000027c 	.word	0x2000027c

080021fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021fc:	e7fe      	b.n	80021fc <ADC1_2_IRQHandler>
	...

08002200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002204:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <HAL_Init+0x28>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a07      	ldr	r2, [pc, #28]	@ (8002228 <HAL_Init+0x28>)
 800220a:	f043 0310 	orr.w	r3, r3, #16
 800220e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002210:	2003      	movs	r0, #3
 8002212:	f000 ff87 	bl	8003124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002216:	200f      	movs	r0, #15
 8002218:	f000 f808 	bl	800222c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800221c:	f7ff fe64 	bl	8001ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40022000 	.word	0x40022000

0800222c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002234:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <HAL_InitTick+0x54>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <HAL_InitTick+0x58>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002242:	fbb3 f3f1 	udiv	r3, r3, r1
 8002246:	fbb2 f3f3 	udiv	r3, r2, r3
 800224a:	4618      	mov	r0, r3
 800224c:	f000 ff9f 	bl	800318e <HAL_SYSTICK_Config>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e00e      	b.n	8002278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b0f      	cmp	r3, #15
 800225e:	d80a      	bhi.n	8002276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002260:	2200      	movs	r2, #0
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	f04f 30ff 	mov.w	r0, #4294967295
 8002268:	f000 ff67 	bl	800313a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800226c:	4a06      	ldr	r2, [pc, #24]	@ (8002288 <HAL_InitTick+0x5c>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	e000      	b.n	8002278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000000 	.word	0x20000000
 8002284:	20000008 	.word	0x20000008
 8002288:	20000004 	.word	0x20000004

0800228c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002290:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <HAL_IncTick+0x1c>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <HAL_IncTick+0x20>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4413      	add	r3, r2
 800229c:	4a03      	ldr	r2, [pc, #12]	@ (80022ac <HAL_IncTick+0x20>)
 800229e:	6013      	str	r3, [r2, #0]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	20000008 	.word	0x20000008
 80022ac:	20000278 	.word	0x20000278

080022b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return uwTick;
 80022b4:	4b02      	ldr	r3, [pc, #8]	@ (80022c0 <HAL_GetTick+0x10>)
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	20000278 	.word	0x20000278

080022c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022cc:	f7ff fff0 	bl	80022b0 <HAL_GetTick>
 80022d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d005      	beq.n	80022ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022de:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <HAL_Delay+0x44>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ea:	bf00      	nop
 80022ec:	f7ff ffe0 	bl	80022b0 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d8f7      	bhi.n	80022ec <HAL_Delay+0x28>
  {
  }
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000008 	.word	0x20000008

0800230c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e0ed      	b.n	80024fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d102      	bne.n	8002330 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff fe0e 	bl	8001f4c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002340:	f7ff ffb6 	bl	80022b0 <HAL_GetTick>
 8002344:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002346:	e012      	b.n	800236e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002348:	f7ff ffb2 	bl	80022b0 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b0a      	cmp	r3, #10
 8002354:	d90b      	bls.n	800236e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2205      	movs	r2, #5
 8002366:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e0c5      	b.n	80024fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0e5      	beq.n	8002348 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0202 	bic.w	r2, r2, #2
 800238a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800238c:	f7ff ff90 	bl	80022b0 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002392:	e012      	b.n	80023ba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002394:	f7ff ff8c 	bl	80022b0 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b0a      	cmp	r3, #10
 80023a0:	d90b      	bls.n	80023ba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2205      	movs	r2, #5
 80023b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e09f      	b.n	80024fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1e5      	bne.n	8002394 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	7e1b      	ldrb	r3, [r3, #24]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d108      	bne.n	80023e2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e007      	b.n	80023f2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	7e5b      	ldrb	r3, [r3, #25]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d108      	bne.n	800240c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e007      	b.n	800241c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800241a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7e9b      	ldrb	r3, [r3, #26]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d108      	bne.n	8002436 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0220 	orr.w	r2, r2, #32
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e007      	b.n	8002446 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0220 	bic.w	r2, r2, #32
 8002444:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	7edb      	ldrb	r3, [r3, #27]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d108      	bne.n	8002460 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0210 	bic.w	r2, r2, #16
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	e007      	b.n	8002470 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0210 	orr.w	r2, r2, #16
 800246e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	7f1b      	ldrb	r3, [r3, #28]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d108      	bne.n	800248a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0208 	orr.w	r2, r2, #8
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	e007      	b.n	800249a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0208 	bic.w	r2, r2, #8
 8002498:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	7f5b      	ldrb	r3, [r3, #29]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d108      	bne.n	80024b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0204 	orr.w	r2, r2, #4
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	e007      	b.n	80024c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0204 	bic.w	r2, r2, #4
 80024c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	ea42 0103 	orr.w	r1, r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	1e5a      	subs	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002502:	b480      	push	{r7}
 8002504:	b087      	sub	sp, #28
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002518:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800251a:	7cfb      	ldrb	r3, [r7, #19]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d003      	beq.n	8002528 <HAL_CAN_ConfigFilter+0x26>
 8002520:	7cfb      	ldrb	r3, [r7, #19]
 8002522:	2b02      	cmp	r3, #2
 8002524:	f040 80aa 	bne.w	800267c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800252e:	f043 0201 	orr.w	r2, r3, #1
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	2201      	movs	r2, #1
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	43db      	mvns	r3, r3
 8002552:	401a      	ands	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d123      	bne.n	80025aa <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	43db      	mvns	r3, r3
 800256c:	401a      	ands	r2, r3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002584:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3248      	adds	r2, #72	@ 0x48
 800258a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800259e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025a0:	6979      	ldr	r1, [r7, #20]
 80025a2:	3348      	adds	r3, #72	@ 0x48
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	440b      	add	r3, r1
 80025a8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d122      	bne.n	80025f8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3248      	adds	r2, #72	@ 0x48
 80025d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025ee:	6979      	ldr	r1, [r7, #20]
 80025f0:	3348      	adds	r3, #72	@ 0x48
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	440b      	add	r3, r1
 80025f6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d109      	bne.n	8002614 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	43db      	mvns	r3, r3
 800260a:	401a      	ands	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002612:	e007      	b.n	8002624 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	431a      	orrs	r2, r3
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	43db      	mvns	r3, r3
 8002636:	401a      	ands	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800263e:	e007      	b.n	8002650 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	431a      	orrs	r2, r3
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d107      	bne.n	8002668 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	431a      	orrs	r2, r3
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800266e:	f023 0201 	bic.w	r2, r3, #1
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	e006      	b.n	800268a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
  }
}
 800268a:	4618      	mov	r0, r3
 800268c:	371c      	adds	r7, #28
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d12e      	bne.n	8002706 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0201 	bic.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026c0:	f7ff fdf6 	bl	80022b0 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026c6:	e012      	b.n	80026ee <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026c8:	f7ff fdf2 	bl	80022b0 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b0a      	cmp	r3, #10
 80026d4:	d90b      	bls.n	80026ee <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2205      	movs	r2, #5
 80026e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e012      	b.n	8002714 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1e5      	bne.n	80026c8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e006      	b.n	8002714 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
  }
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800271c:	b480      	push	{r7}
 800271e:	b089      	sub	sp, #36	@ 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002730:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800273a:	7ffb      	ldrb	r3, [r7, #31]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d003      	beq.n	8002748 <HAL_CAN_AddTxMessage+0x2c>
 8002740:	7ffb      	ldrb	r3, [r7, #31]
 8002742:	2b02      	cmp	r3, #2
 8002744:	f040 80ad 	bne.w	80028a2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10a      	bne.n	8002768 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8095 	beq.w	8002892 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	0e1b      	lsrs	r3, r3, #24
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002772:	2201      	movs	r2, #1
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	409a      	lsls	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10d      	bne.n	80027a0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800278e:	68f9      	ldr	r1, [r7, #12]
 8002790:	6809      	ldr	r1, [r1, #0]
 8002792:	431a      	orrs	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	3318      	adds	r3, #24
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	440b      	add	r3, r1
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	e00f      	b.n	80027c0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027aa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027b0:	68f9      	ldr	r1, [r7, #12]
 80027b2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80027b4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	3318      	adds	r3, #24
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	440b      	add	r3, r1
 80027be:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6819      	ldr	r1, [r3, #0]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	3318      	adds	r3, #24
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	440b      	add	r3, r1
 80027d0:	3304      	adds	r3, #4
 80027d2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	7d1b      	ldrb	r3, [r3, #20]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d111      	bne.n	8002800 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	3318      	adds	r3, #24
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	4413      	add	r3, r2
 80027e8:	3304      	adds	r3, #4
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	6811      	ldr	r1, [r2, #0]
 80027f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	3318      	adds	r3, #24
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	440b      	add	r3, r1
 80027fc:	3304      	adds	r3, #4
 80027fe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3307      	adds	r3, #7
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	061a      	lsls	r2, r3, #24
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3306      	adds	r3, #6
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	041b      	lsls	r3, r3, #16
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3305      	adds	r3, #5
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	4313      	orrs	r3, r2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	3204      	adds	r2, #4
 8002820:	7812      	ldrb	r2, [r2, #0]
 8002822:	4610      	mov	r0, r2
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	6811      	ldr	r1, [r2, #0]
 8002828:	ea43 0200 	orr.w	r2, r3, r0
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	440b      	add	r3, r1
 8002832:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002836:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3303      	adds	r3, #3
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	061a      	lsls	r2, r3, #24
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3302      	adds	r3, #2
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	041b      	lsls	r3, r3, #16
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3301      	adds	r3, #1
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	4313      	orrs	r3, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	7812      	ldrb	r2, [r2, #0]
 8002858:	4610      	mov	r0, r2
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	6811      	ldr	r1, [r2, #0]
 800285e:	ea43 0200 	orr.w	r2, r3, r0
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	440b      	add	r3, r1
 8002868:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800286c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	3318      	adds	r3, #24
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	4413      	add	r3, r2
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	6811      	ldr	r1, [r2, #0]
 8002880:	f043 0201 	orr.w	r2, r3, #1
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3318      	adds	r3, #24
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	440b      	add	r3, r1
 800288c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	e00e      	b.n	80028b0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002896:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e006      	b.n	80028b0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
  }
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3724      	adds	r7, #36	@ 0x24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80028ba:	b480      	push	{r7}
 80028bc:	b087      	sub	sp, #28
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d003      	beq.n	80028de <HAL_CAN_GetRxMessage+0x24>
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	f040 8103 	bne.w	8002ae4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10e      	bne.n	8002902 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d116      	bne.n	8002920 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e0f7      	b.n	8002af2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d107      	bne.n	8002920 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0e8      	b.n	8002af2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	331b      	adds	r3, #27
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	4413      	add	r3, r2
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0204 	and.w	r2, r3, #4
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10c      	bne.n	8002958 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	331b      	adds	r3, #27
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	4413      	add	r3, r2
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0d5b      	lsrs	r3, r3, #21
 800294e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	e00b      	b.n	8002970 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	331b      	adds	r3, #27
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	4413      	add	r3, r2
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	08db      	lsrs	r3, r3, #3
 8002968:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	331b      	adds	r3, #27
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	4413      	add	r3, r2
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0202 	and.w	r2, r3, #2
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	331b      	adds	r3, #27
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	4413      	add	r3, r2
 8002992:	3304      	adds	r3, #4
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2208      	movs	r2, #8
 80029a2:	611a      	str	r2, [r3, #16]
 80029a4:	e00b      	b.n	80029be <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	331b      	adds	r3, #27
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	4413      	add	r3, r2
 80029b2:	3304      	adds	r3, #4
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 020f 	and.w	r2, r3, #15
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	331b      	adds	r3, #27
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	4413      	add	r3, r2
 80029ca:	3304      	adds	r3, #4
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	331b      	adds	r3, #27
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	4413      	add	r3, r2
 80029e2:	3304      	adds	r3, #4
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	0c1b      	lsrs	r3, r3, #16
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	0a1a      	lsrs	r2, r3, #8
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	0c1a      	lsrs	r2, r3, #16
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	3302      	adds	r3, #2
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	0e1a      	lsrs	r2, r3, #24
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	3303      	adds	r3, #3
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	3304      	adds	r3, #4
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	0a1a      	lsrs	r2, r3, #8
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	3305      	adds	r3, #5
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	0c1a      	lsrs	r2, r3, #16
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	3306      	adds	r3, #6
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	0e1a      	lsrs	r2, r3, #24
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	3307      	adds	r3, #7
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d108      	bne.n	8002ad0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0220 	orr.w	r2, r2, #32
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	e007      	b.n	8002ae0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0220 	orr.w	r2, r2, #32
 8002ade:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	e006      	b.n	8002af2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
  }
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	371c      	adds	r7, #28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr

08002afc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b0c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d002      	beq.n	8002b1a <HAL_CAN_ActivateNotification+0x1e>
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d109      	bne.n	8002b2e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6959      	ldr	r1, [r3, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e006      	b.n	8002b3c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b32:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
  }
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b08a      	sub	sp, #40	@ 0x28
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d07c      	beq.n	8002c86 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d023      	beq.n	8002bde <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f983 	bl	8002eb4 <HAL_CAN_TxMailbox0CompleteCallback>
 8002bae:	e016      	b.n	8002bde <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc2:	e00c      	b.n	8002bde <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d004      	beq.n	8002bd8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd6:	e002      	b.n	8002bde <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f986 	bl	8002eea <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d024      	beq.n	8002c32 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bf0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f962 	bl	8002ec6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002c02:	e016      	b.n	8002c32 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d004      	beq.n	8002c18 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c16:	e00c      	b.n	8002c32 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d004      	beq.n	8002c2c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c2a:	e002      	b.n	8002c32 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f965 	bl	8002efc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d024      	beq.n	8002c86 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002c44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f941 	bl	8002ed8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002c56:	e016      	b.n	8002c86 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d004      	beq.n	8002c6c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c6a:	e00c      	b.n	8002c86 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d004      	beq.n	8002c80 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c7e:	e002      	b.n	8002c86 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f944 	bl	8002f0e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00c      	beq.n	8002caa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d007      	beq.n	8002caa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ca0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2210      	movs	r2, #16
 8002ca8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00b      	beq.n	8002ccc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d006      	beq.n	8002ccc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2208      	movs	r2, #8
 8002cc4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f92a 	bl	8002f20 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7fe ff8b 	bl	8001c00 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00c      	beq.n	8002d0e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d007      	beq.n	8002d0e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2210      	movs	r2, #16
 8002d0c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d006      	beq.n	8002d30 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2208      	movs	r2, #8
 8002d28:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f90a 	bl	8002f44 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f8f2 	bl	8002f32 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00b      	beq.n	8002d70 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d006      	beq.n	8002d70 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2210      	movs	r2, #16
 8002d68:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f8f3 	bl	8002f56 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d006      	beq.n	8002d92 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2208      	movs	r2, #8
 8002d8a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f8eb 	bl	8002f68 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d07b      	beq.n	8002e94 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d072      	beq.n	8002e8c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	f043 0302 	orr.w	r3, r3, #2
 8002ddc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d043      	beq.n	8002e8c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d03e      	beq.n	8002e8c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e14:	2b60      	cmp	r3, #96	@ 0x60
 8002e16:	d02b      	beq.n	8002e70 <HAL_CAN_IRQHandler+0x32a>
 8002e18:	2b60      	cmp	r3, #96	@ 0x60
 8002e1a:	d82e      	bhi.n	8002e7a <HAL_CAN_IRQHandler+0x334>
 8002e1c:	2b50      	cmp	r3, #80	@ 0x50
 8002e1e:	d022      	beq.n	8002e66 <HAL_CAN_IRQHandler+0x320>
 8002e20:	2b50      	cmp	r3, #80	@ 0x50
 8002e22:	d82a      	bhi.n	8002e7a <HAL_CAN_IRQHandler+0x334>
 8002e24:	2b40      	cmp	r3, #64	@ 0x40
 8002e26:	d019      	beq.n	8002e5c <HAL_CAN_IRQHandler+0x316>
 8002e28:	2b40      	cmp	r3, #64	@ 0x40
 8002e2a:	d826      	bhi.n	8002e7a <HAL_CAN_IRQHandler+0x334>
 8002e2c:	2b30      	cmp	r3, #48	@ 0x30
 8002e2e:	d010      	beq.n	8002e52 <HAL_CAN_IRQHandler+0x30c>
 8002e30:	2b30      	cmp	r3, #48	@ 0x30
 8002e32:	d822      	bhi.n	8002e7a <HAL_CAN_IRQHandler+0x334>
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	d002      	beq.n	8002e3e <HAL_CAN_IRQHandler+0x2f8>
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d005      	beq.n	8002e48 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e3c:	e01d      	b.n	8002e7a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	f043 0308 	orr.w	r3, r3, #8
 8002e44:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e46:	e019      	b.n	8002e7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	f043 0310 	orr.w	r3, r3, #16
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e50:	e014      	b.n	8002e7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	f043 0320 	orr.w	r3, r3, #32
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e5a:	e00f      	b.n	8002e7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e64:	e00a      	b.n	8002e7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e6e:	e005      	b.n	8002e7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e76:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e78:	e000      	b.n	8002e7c <HAL_CAN_IRQHandler+0x336>
            break;
 8002e7a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002e8a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2204      	movs	r2, #4
 8002e92:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d008      	beq.n	8002eac <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f867 	bl	8002f7a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002eac:	bf00      	nop
 8002eae:	3728      	adds	r7, #40	@ 0x28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr

08002f0e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr

08002f44 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fbe:	4a04      	ldr	r2, [pc, #16]	@ (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	60d3      	str	r3, [r2, #12]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd8:	4b04      	ldr	r3, [pc, #16]	@ (8002fec <__NVIC_GetPriorityGrouping+0x18>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	f003 0307 	and.w	r3, r3, #7
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	db0b      	blt.n	800301a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	f003 021f 	and.w	r2, r3, #31
 8003008:	4906      	ldr	r1, [pc, #24]	@ (8003024 <__NVIC_EnableIRQ+0x34>)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2001      	movs	r0, #1
 8003012:	fa00 f202 	lsl.w	r2, r0, r2
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr
 8003024:	e000e100 	.word	0xe000e100

08003028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	6039      	str	r1, [r7, #0]
 8003032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003038:	2b00      	cmp	r3, #0
 800303a:	db0a      	blt.n	8003052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	b2da      	uxtb	r2, r3
 8003040:	490c      	ldr	r1, [pc, #48]	@ (8003074 <__NVIC_SetPriority+0x4c>)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	0112      	lsls	r2, r2, #4
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	440b      	add	r3, r1
 800304c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003050:	e00a      	b.n	8003068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	4908      	ldr	r1, [pc, #32]	@ (8003078 <__NVIC_SetPriority+0x50>)
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	3b04      	subs	r3, #4
 8003060:	0112      	lsls	r2, r2, #4
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	440b      	add	r3, r1
 8003066:	761a      	strb	r2, [r3, #24]
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000e100 	.word	0xe000e100
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	@ 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f1c3 0307 	rsb	r3, r3, #7
 8003096:	2b04      	cmp	r3, #4
 8003098:	bf28      	it	cs
 800309a:	2304      	movcs	r3, #4
 800309c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3304      	adds	r3, #4
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d902      	bls.n	80030ac <NVIC_EncodePriority+0x30>
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3b03      	subs	r3, #3
 80030aa:	e000      	b.n	80030ae <NVIC_EncodePriority+0x32>
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b0:	f04f 32ff 	mov.w	r2, #4294967295
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	401a      	ands	r2, r3
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c4:	f04f 31ff 	mov.w	r1, #4294967295
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	43d9      	mvns	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d4:	4313      	orrs	r3, r2
         );
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3724      	adds	r7, #36	@ 0x24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030f0:	d301      	bcc.n	80030f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f2:	2301      	movs	r3, #1
 80030f4:	e00f      	b.n	8003116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003120 <SysTick_Config+0x40>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030fe:	210f      	movs	r1, #15
 8003100:	f04f 30ff 	mov.w	r0, #4294967295
 8003104:	f7ff ff90 	bl	8003028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003108:	4b05      	ldr	r3, [pc, #20]	@ (8003120 <SysTick_Config+0x40>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310e:	4b04      	ldr	r3, [pc, #16]	@ (8003120 <SysTick_Config+0x40>)
 8003110:	2207      	movs	r2, #7
 8003112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	e000e010 	.word	0xe000e010

08003124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ff2d 	bl	8002f8c <__NVIC_SetPriorityGrouping>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	4603      	mov	r3, r0
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800314c:	f7ff ff42 	bl	8002fd4 <__NVIC_GetPriorityGrouping>
 8003150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	6978      	ldr	r0, [r7, #20]
 8003158:	f7ff ff90 	bl	800307c <NVIC_EncodePriority>
 800315c:	4602      	mov	r2, r0
 800315e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff5f 	bl	8003028 <__NVIC_SetPriority>
}
 800316a:	bf00      	nop
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	4603      	mov	r3, r0
 800317a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ff35 	bl	8002ff0 <__NVIC_EnableIRQ>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff ffa2 	bl	80030e0 <SysTick_Config>
 800319c:	4603      	mov	r3, r0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b08b      	sub	sp, #44	@ 0x2c
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031b2:	2300      	movs	r3, #0
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031b6:	2300      	movs	r3, #0
 80031b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ba:	e169      	b.n	8003490 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031bc:	2201      	movs	r2, #1
 80031be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	f040 8158 	bne.w	800348a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4a9a      	ldr	r2, [pc, #616]	@ (8003448 <HAL_GPIO_Init+0x2a0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d05e      	beq.n	80032a2 <HAL_GPIO_Init+0xfa>
 80031e4:	4a98      	ldr	r2, [pc, #608]	@ (8003448 <HAL_GPIO_Init+0x2a0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d875      	bhi.n	80032d6 <HAL_GPIO_Init+0x12e>
 80031ea:	4a98      	ldr	r2, [pc, #608]	@ (800344c <HAL_GPIO_Init+0x2a4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d058      	beq.n	80032a2 <HAL_GPIO_Init+0xfa>
 80031f0:	4a96      	ldr	r2, [pc, #600]	@ (800344c <HAL_GPIO_Init+0x2a4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d86f      	bhi.n	80032d6 <HAL_GPIO_Init+0x12e>
 80031f6:	4a96      	ldr	r2, [pc, #600]	@ (8003450 <HAL_GPIO_Init+0x2a8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d052      	beq.n	80032a2 <HAL_GPIO_Init+0xfa>
 80031fc:	4a94      	ldr	r2, [pc, #592]	@ (8003450 <HAL_GPIO_Init+0x2a8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d869      	bhi.n	80032d6 <HAL_GPIO_Init+0x12e>
 8003202:	4a94      	ldr	r2, [pc, #592]	@ (8003454 <HAL_GPIO_Init+0x2ac>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d04c      	beq.n	80032a2 <HAL_GPIO_Init+0xfa>
 8003208:	4a92      	ldr	r2, [pc, #584]	@ (8003454 <HAL_GPIO_Init+0x2ac>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d863      	bhi.n	80032d6 <HAL_GPIO_Init+0x12e>
 800320e:	4a92      	ldr	r2, [pc, #584]	@ (8003458 <HAL_GPIO_Init+0x2b0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d046      	beq.n	80032a2 <HAL_GPIO_Init+0xfa>
 8003214:	4a90      	ldr	r2, [pc, #576]	@ (8003458 <HAL_GPIO_Init+0x2b0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d85d      	bhi.n	80032d6 <HAL_GPIO_Init+0x12e>
 800321a:	2b12      	cmp	r3, #18
 800321c:	d82a      	bhi.n	8003274 <HAL_GPIO_Init+0xcc>
 800321e:	2b12      	cmp	r3, #18
 8003220:	d859      	bhi.n	80032d6 <HAL_GPIO_Init+0x12e>
 8003222:	a201      	add	r2, pc, #4	@ (adr r2, 8003228 <HAL_GPIO_Init+0x80>)
 8003224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003228:	080032a3 	.word	0x080032a3
 800322c:	0800327d 	.word	0x0800327d
 8003230:	0800328f 	.word	0x0800328f
 8003234:	080032d1 	.word	0x080032d1
 8003238:	080032d7 	.word	0x080032d7
 800323c:	080032d7 	.word	0x080032d7
 8003240:	080032d7 	.word	0x080032d7
 8003244:	080032d7 	.word	0x080032d7
 8003248:	080032d7 	.word	0x080032d7
 800324c:	080032d7 	.word	0x080032d7
 8003250:	080032d7 	.word	0x080032d7
 8003254:	080032d7 	.word	0x080032d7
 8003258:	080032d7 	.word	0x080032d7
 800325c:	080032d7 	.word	0x080032d7
 8003260:	080032d7 	.word	0x080032d7
 8003264:	080032d7 	.word	0x080032d7
 8003268:	080032d7 	.word	0x080032d7
 800326c:	08003285 	.word	0x08003285
 8003270:	08003299 	.word	0x08003299
 8003274:	4a79      	ldr	r2, [pc, #484]	@ (800345c <HAL_GPIO_Init+0x2b4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800327a:	e02c      	b.n	80032d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	623b      	str	r3, [r7, #32]
          break;
 8003282:	e029      	b.n	80032d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	3304      	adds	r3, #4
 800328a:	623b      	str	r3, [r7, #32]
          break;
 800328c:	e024      	b.n	80032d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	3308      	adds	r3, #8
 8003294:	623b      	str	r3, [r7, #32]
          break;
 8003296:	e01f      	b.n	80032d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	330c      	adds	r3, #12
 800329e:	623b      	str	r3, [r7, #32]
          break;
 80032a0:	e01a      	b.n	80032d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d102      	bne.n	80032b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032aa:	2304      	movs	r3, #4
 80032ac:	623b      	str	r3, [r7, #32]
          break;
 80032ae:	e013      	b.n	80032d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d105      	bne.n	80032c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032b8:	2308      	movs	r3, #8
 80032ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	611a      	str	r2, [r3, #16]
          break;
 80032c2:	e009      	b.n	80032d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032c4:	2308      	movs	r3, #8
 80032c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	615a      	str	r2, [r3, #20]
          break;
 80032ce:	e003      	b.n	80032d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032d0:	2300      	movs	r3, #0
 80032d2:	623b      	str	r3, [r7, #32]
          break;
 80032d4:	e000      	b.n	80032d8 <HAL_GPIO_Init+0x130>
          break;
 80032d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	2bff      	cmp	r3, #255	@ 0xff
 80032dc:	d801      	bhi.n	80032e2 <HAL_GPIO_Init+0x13a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	e001      	b.n	80032e6 <HAL_GPIO_Init+0x13e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3304      	adds	r3, #4
 80032e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	2bff      	cmp	r3, #255	@ 0xff
 80032ec:	d802      	bhi.n	80032f4 <HAL_GPIO_Init+0x14c>
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	e002      	b.n	80032fa <HAL_GPIO_Init+0x152>
 80032f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f6:	3b08      	subs	r3, #8
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	210f      	movs	r1, #15
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	fa01 f303 	lsl.w	r3, r1, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	401a      	ands	r2, r3
 800330c:	6a39      	ldr	r1, [r7, #32]
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	fa01 f303 	lsl.w	r3, r1, r3
 8003314:	431a      	orrs	r2, r3
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80b1 	beq.w	800348a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003328:	4b4d      	ldr	r3, [pc, #308]	@ (8003460 <HAL_GPIO_Init+0x2b8>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	4a4c      	ldr	r2, [pc, #304]	@ (8003460 <HAL_GPIO_Init+0x2b8>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6193      	str	r3, [r2, #24]
 8003334:	4b4a      	ldr	r3, [pc, #296]	@ (8003460 <HAL_GPIO_Init+0x2b8>)
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003340:	4a48      	ldr	r2, [pc, #288]	@ (8003464 <HAL_GPIO_Init+0x2bc>)
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	089b      	lsrs	r3, r3, #2
 8003346:	3302      	adds	r3, #2
 8003348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800334e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	220f      	movs	r2, #15
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4013      	ands	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a40      	ldr	r2, [pc, #256]	@ (8003468 <HAL_GPIO_Init+0x2c0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d013      	beq.n	8003394 <HAL_GPIO_Init+0x1ec>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a3f      	ldr	r2, [pc, #252]	@ (800346c <HAL_GPIO_Init+0x2c4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00d      	beq.n	8003390 <HAL_GPIO_Init+0x1e8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a3e      	ldr	r2, [pc, #248]	@ (8003470 <HAL_GPIO_Init+0x2c8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d007      	beq.n	800338c <HAL_GPIO_Init+0x1e4>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a3d      	ldr	r2, [pc, #244]	@ (8003474 <HAL_GPIO_Init+0x2cc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d101      	bne.n	8003388 <HAL_GPIO_Init+0x1e0>
 8003384:	2303      	movs	r3, #3
 8003386:	e006      	b.n	8003396 <HAL_GPIO_Init+0x1ee>
 8003388:	2304      	movs	r3, #4
 800338a:	e004      	b.n	8003396 <HAL_GPIO_Init+0x1ee>
 800338c:	2302      	movs	r3, #2
 800338e:	e002      	b.n	8003396 <HAL_GPIO_Init+0x1ee>
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <HAL_GPIO_Init+0x1ee>
 8003394:	2300      	movs	r3, #0
 8003396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003398:	f002 0203 	and.w	r2, r2, #3
 800339c:	0092      	lsls	r2, r2, #2
 800339e:	4093      	lsls	r3, r2
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033a6:	492f      	ldr	r1, [pc, #188]	@ (8003464 <HAL_GPIO_Init+0x2bc>)
 80033a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033aa:	089b      	lsrs	r3, r3, #2
 80033ac:	3302      	adds	r3, #2
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d006      	beq.n	80033ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003478 <HAL_GPIO_Init+0x2d0>)
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	492c      	ldr	r1, [pc, #176]	@ (8003478 <HAL_GPIO_Init+0x2d0>)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	608b      	str	r3, [r1, #8]
 80033cc:	e006      	b.n	80033dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003478 <HAL_GPIO_Init+0x2d0>)
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	4928      	ldr	r1, [pc, #160]	@ (8003478 <HAL_GPIO_Init+0x2d0>)
 80033d8:	4013      	ands	r3, r2
 80033da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d006      	beq.n	80033f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033e8:	4b23      	ldr	r3, [pc, #140]	@ (8003478 <HAL_GPIO_Init+0x2d0>)
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	4922      	ldr	r1, [pc, #136]	@ (8003478 <HAL_GPIO_Init+0x2d0>)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60cb      	str	r3, [r1, #12]
 80033f4:	e006      	b.n	8003404 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033f6:	4b20      	ldr	r3, [pc, #128]	@ (8003478 <HAL_GPIO_Init+0x2d0>)
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	491e      	ldr	r1, [pc, #120]	@ (8003478 <HAL_GPIO_Init+0x2d0>)
 8003400:	4013      	ands	r3, r2
 8003402:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d006      	beq.n	800341e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003410:	4b19      	ldr	r3, [pc, #100]	@ (8003478 <HAL_GPIO_Init+0x2d0>)
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	4918      	ldr	r1, [pc, #96]	@ (8003478 <HAL_GPIO_Init+0x2d0>)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	4313      	orrs	r3, r2
 800341a:	604b      	str	r3, [r1, #4]
 800341c:	e006      	b.n	800342c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800341e:	4b16      	ldr	r3, [pc, #88]	@ (8003478 <HAL_GPIO_Init+0x2d0>)
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	43db      	mvns	r3, r3
 8003426:	4914      	ldr	r1, [pc, #80]	@ (8003478 <HAL_GPIO_Init+0x2d0>)
 8003428:	4013      	ands	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d021      	beq.n	800347c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003438:	4b0f      	ldr	r3, [pc, #60]	@ (8003478 <HAL_GPIO_Init+0x2d0>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	490e      	ldr	r1, [pc, #56]	@ (8003478 <HAL_GPIO_Init+0x2d0>)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	4313      	orrs	r3, r2
 8003442:	600b      	str	r3, [r1, #0]
 8003444:	e021      	b.n	800348a <HAL_GPIO_Init+0x2e2>
 8003446:	bf00      	nop
 8003448:	10320000 	.word	0x10320000
 800344c:	10310000 	.word	0x10310000
 8003450:	10220000 	.word	0x10220000
 8003454:	10210000 	.word	0x10210000
 8003458:	10120000 	.word	0x10120000
 800345c:	10110000 	.word	0x10110000
 8003460:	40021000 	.word	0x40021000
 8003464:	40010000 	.word	0x40010000
 8003468:	40010800 	.word	0x40010800
 800346c:	40010c00 	.word	0x40010c00
 8003470:	40011000 	.word	0x40011000
 8003474:	40011400 	.word	0x40011400
 8003478:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800347c:	4b0b      	ldr	r3, [pc, #44]	@ (80034ac <HAL_GPIO_Init+0x304>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	43db      	mvns	r3, r3
 8003484:	4909      	ldr	r1, [pc, #36]	@ (80034ac <HAL_GPIO_Init+0x304>)
 8003486:	4013      	ands	r3, r2
 8003488:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348c:	3301      	adds	r3, #1
 800348e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003496:	fa22 f303 	lsr.w	r3, r2, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	f47f ae8e 	bne.w	80031bc <HAL_GPIO_Init+0x14>
  }
}
 80034a0:	bf00      	nop
 80034a2:	bf00      	nop
 80034a4:	372c      	adds	r7, #44	@ 0x2c
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	40010400 	.word	0x40010400

080034b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	887b      	ldrh	r3, [r7, #2]
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034c8:	2301      	movs	r3, #1
 80034ca:	73fb      	strb	r3, [r7, #15]
 80034cc:	e001      	b.n	80034d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034ce:	2300      	movs	r3, #0
 80034d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr

080034de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	807b      	strh	r3, [r7, #2]
 80034ea:	4613      	mov	r3, r2
 80034ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034ee:	787b      	ldrb	r3, [r7, #1]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034f4:	887a      	ldrh	r2, [r7, #2]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034fa:	e003      	b.n	8003504 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034fc:	887b      	ldrh	r3, [r7, #2]
 80034fe:	041a      	lsls	r2, r3, #16
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	611a      	str	r2, [r3, #16]
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr
	...

08003510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e272      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 8087 	beq.w	800363e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003530:	4b92      	ldr	r3, [pc, #584]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 030c 	and.w	r3, r3, #12
 8003538:	2b04      	cmp	r3, #4
 800353a:	d00c      	beq.n	8003556 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800353c:	4b8f      	ldr	r3, [pc, #572]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 030c 	and.w	r3, r3, #12
 8003544:	2b08      	cmp	r3, #8
 8003546:	d112      	bne.n	800356e <HAL_RCC_OscConfig+0x5e>
 8003548:	4b8c      	ldr	r3, [pc, #560]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003554:	d10b      	bne.n	800356e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003556:	4b89      	ldr	r3, [pc, #548]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d06c      	beq.n	800363c <HAL_RCC_OscConfig+0x12c>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d168      	bne.n	800363c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e24c      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003576:	d106      	bne.n	8003586 <HAL_RCC_OscConfig+0x76>
 8003578:	4b80      	ldr	r3, [pc, #512]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a7f      	ldr	r2, [pc, #508]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 800357e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	e02e      	b.n	80035e4 <HAL_RCC_OscConfig+0xd4>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x98>
 800358e:	4b7b      	ldr	r3, [pc, #492]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a7a      	ldr	r2, [pc, #488]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 8003594:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	4b78      	ldr	r3, [pc, #480]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a77      	ldr	r2, [pc, #476]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 80035a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e01d      	b.n	80035e4 <HAL_RCC_OscConfig+0xd4>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035b0:	d10c      	bne.n	80035cc <HAL_RCC_OscConfig+0xbc>
 80035b2:	4b72      	ldr	r3, [pc, #456]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a71      	ldr	r2, [pc, #452]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 80035b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4b6f      	ldr	r3, [pc, #444]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a6e      	ldr	r2, [pc, #440]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 80035c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	e00b      	b.n	80035e4 <HAL_RCC_OscConfig+0xd4>
 80035cc:	4b6b      	ldr	r3, [pc, #428]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a6a      	ldr	r2, [pc, #424]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 80035d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	4b68      	ldr	r3, [pc, #416]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a67      	ldr	r2, [pc, #412]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 80035de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d013      	beq.n	8003614 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fe fe60 	bl	80022b0 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f4:	f7fe fe5c 	bl	80022b0 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	@ 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e200      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	4b5d      	ldr	r3, [pc, #372]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0xe4>
 8003612:	e014      	b.n	800363e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fe fe4c 	bl	80022b0 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800361c:	f7fe fe48 	bl	80022b0 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	@ 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e1ec      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362e:	4b53      	ldr	r3, [pc, #332]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x10c>
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d063      	beq.n	8003712 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800364a:	4b4c      	ldr	r3, [pc, #304]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003656:	4b49      	ldr	r3, [pc, #292]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b08      	cmp	r3, #8
 8003660:	d11c      	bne.n	800369c <HAL_RCC_OscConfig+0x18c>
 8003662:	4b46      	ldr	r3, [pc, #280]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d116      	bne.n	800369c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366e:	4b43      	ldr	r3, [pc, #268]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_RCC_OscConfig+0x176>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d001      	beq.n	8003686 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e1c0      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003686:	4b3d      	ldr	r3, [pc, #244]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4939      	ldr	r1, [pc, #228]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369a:	e03a      	b.n	8003712 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d020      	beq.n	80036e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a4:	4b36      	ldr	r3, [pc, #216]	@ (8003780 <HAL_RCC_OscConfig+0x270>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fe fe01 	bl	80022b0 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b2:	f7fe fdfd 	bl	80022b0 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e1a1      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c4:	4b2d      	ldr	r3, [pc, #180]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d0:	4b2a      	ldr	r3, [pc, #168]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4927      	ldr	r1, [pc, #156]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	600b      	str	r3, [r1, #0]
 80036e4:	e015      	b.n	8003712 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e6:	4b26      	ldr	r3, [pc, #152]	@ (8003780 <HAL_RCC_OscConfig+0x270>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fe fde0 	bl	80022b0 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f4:	f7fe fddc 	bl	80022b0 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e180      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003706:	4b1d      	ldr	r3, [pc, #116]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d03a      	beq.n	8003794 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d019      	beq.n	800375a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003726:	4b17      	ldr	r3, [pc, #92]	@ (8003784 <HAL_RCC_OscConfig+0x274>)
 8003728:	2201      	movs	r2, #1
 800372a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372c:	f7fe fdc0 	bl	80022b0 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003734:	f7fe fdbc 	bl	80022b0 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e160      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003746:	4b0d      	ldr	r3, [pc, #52]	@ (800377c <HAL_RCC_OscConfig+0x26c>)
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003752:	2001      	movs	r0, #1
 8003754:	f000 fa9c 	bl	8003c90 <RCC_Delay>
 8003758:	e01c      	b.n	8003794 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800375a:	4b0a      	ldr	r3, [pc, #40]	@ (8003784 <HAL_RCC_OscConfig+0x274>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003760:	f7fe fda6 	bl	80022b0 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003766:	e00f      	b.n	8003788 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003768:	f7fe fda2 	bl	80022b0 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d908      	bls.n	8003788 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e146      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
 800377a:	bf00      	nop
 800377c:	40021000 	.word	0x40021000
 8003780:	42420000 	.word	0x42420000
 8003784:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003788:	4b92      	ldr	r3, [pc, #584]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e9      	bne.n	8003768 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80a6 	beq.w	80038ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a2:	2300      	movs	r3, #0
 80037a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037a6:	4b8b      	ldr	r3, [pc, #556]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10d      	bne.n	80037ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b2:	4b88      	ldr	r3, [pc, #544]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	4a87      	ldr	r2, [pc, #540]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80037b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037bc:	61d3      	str	r3, [r2, #28]
 80037be:	4b85      	ldr	r3, [pc, #532]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ca:	2301      	movs	r3, #1
 80037cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ce:	4b82      	ldr	r3, [pc, #520]	@ (80039d8 <HAL_RCC_OscConfig+0x4c8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d118      	bne.n	800380c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037da:	4b7f      	ldr	r3, [pc, #508]	@ (80039d8 <HAL_RCC_OscConfig+0x4c8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a7e      	ldr	r2, [pc, #504]	@ (80039d8 <HAL_RCC_OscConfig+0x4c8>)
 80037e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e6:	f7fe fd63 	bl	80022b0 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ee:	f7fe fd5f 	bl	80022b0 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b64      	cmp	r3, #100	@ 0x64
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e103      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003800:	4b75      	ldr	r3, [pc, #468]	@ (80039d8 <HAL_RCC_OscConfig+0x4c8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f0      	beq.n	80037ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d106      	bne.n	8003822 <HAL_RCC_OscConfig+0x312>
 8003814:	4b6f      	ldr	r3, [pc, #444]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	4a6e      	ldr	r2, [pc, #440]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	6213      	str	r3, [r2, #32]
 8003820:	e02d      	b.n	800387e <HAL_RCC_OscConfig+0x36e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10c      	bne.n	8003844 <HAL_RCC_OscConfig+0x334>
 800382a:	4b6a      	ldr	r3, [pc, #424]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	4a69      	ldr	r2, [pc, #420]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003830:	f023 0301 	bic.w	r3, r3, #1
 8003834:	6213      	str	r3, [r2, #32]
 8003836:	4b67      	ldr	r3, [pc, #412]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	4a66      	ldr	r2, [pc, #408]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800383c:	f023 0304 	bic.w	r3, r3, #4
 8003840:	6213      	str	r3, [r2, #32]
 8003842:	e01c      	b.n	800387e <HAL_RCC_OscConfig+0x36e>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	2b05      	cmp	r3, #5
 800384a:	d10c      	bne.n	8003866 <HAL_RCC_OscConfig+0x356>
 800384c:	4b61      	ldr	r3, [pc, #388]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	4a60      	ldr	r2, [pc, #384]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003852:	f043 0304 	orr.w	r3, r3, #4
 8003856:	6213      	str	r3, [r2, #32]
 8003858:	4b5e      	ldr	r3, [pc, #376]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	4a5d      	ldr	r2, [pc, #372]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6213      	str	r3, [r2, #32]
 8003864:	e00b      	b.n	800387e <HAL_RCC_OscConfig+0x36e>
 8003866:	4b5b      	ldr	r3, [pc, #364]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	4a5a      	ldr	r2, [pc, #360]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	6213      	str	r3, [r2, #32]
 8003872:	4b58      	ldr	r3, [pc, #352]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	4a57      	ldr	r2, [pc, #348]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003878:	f023 0304 	bic.w	r3, r3, #4
 800387c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d015      	beq.n	80038b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003886:	f7fe fd13 	bl	80022b0 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388e:	f7fe fd0f 	bl	80022b0 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389c:	4293      	cmp	r3, r2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e0b1      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a4:	4b4b      	ldr	r3, [pc, #300]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0ee      	beq.n	800388e <HAL_RCC_OscConfig+0x37e>
 80038b0:	e014      	b.n	80038dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b2:	f7fe fcfd 	bl	80022b0 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b8:	e00a      	b.n	80038d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ba:	f7fe fcf9 	bl	80022b0 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e09b      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d0:	4b40      	ldr	r3, [pc, #256]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1ee      	bne.n	80038ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038dc:	7dfb      	ldrb	r3, [r7, #23]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d105      	bne.n	80038ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e2:	4b3c      	ldr	r3, [pc, #240]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	4a3b      	ldr	r2, [pc, #236]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 8087 	beq.w	8003a06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038f8:	4b36      	ldr	r3, [pc, #216]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 030c 	and.w	r3, r3, #12
 8003900:	2b08      	cmp	r3, #8
 8003902:	d061      	beq.n	80039c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d146      	bne.n	800399a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390c:	4b33      	ldr	r3, [pc, #204]	@ (80039dc <HAL_RCC_OscConfig+0x4cc>)
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003912:	f7fe fccd 	bl	80022b0 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391a:	f7fe fcc9 	bl	80022b0 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e06d      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800392c:	4b29      	ldr	r3, [pc, #164]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1f0      	bne.n	800391a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003940:	d108      	bne.n	8003954 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003942:	4b24      	ldr	r3, [pc, #144]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	4921      	ldr	r1, [pc, #132]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003950:	4313      	orrs	r3, r2
 8003952:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003954:	4b1f      	ldr	r3, [pc, #124]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a19      	ldr	r1, [r3, #32]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003964:	430b      	orrs	r3, r1
 8003966:	491b      	ldr	r1, [pc, #108]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	4313      	orrs	r3, r2
 800396a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800396c:	4b1b      	ldr	r3, [pc, #108]	@ (80039dc <HAL_RCC_OscConfig+0x4cc>)
 800396e:	2201      	movs	r2, #1
 8003970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003972:	f7fe fc9d 	bl	80022b0 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397a:	f7fe fc99 	bl	80022b0 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e03d      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800398c:	4b11      	ldr	r3, [pc, #68]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f0      	beq.n	800397a <HAL_RCC_OscConfig+0x46a>
 8003998:	e035      	b.n	8003a06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800399a:	4b10      	ldr	r3, [pc, #64]	@ (80039dc <HAL_RCC_OscConfig+0x4cc>)
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7fe fc86 	bl	80022b0 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a8:	f7fe fc82 	bl	80022b0 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e026      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ba:	4b06      	ldr	r3, [pc, #24]	@ (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x498>
 80039c6:	e01e      	b.n	8003a06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d107      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e019      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40007000 	.word	0x40007000
 80039dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a10 <HAL_RCC_OscConfig+0x500>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d106      	bne.n	8003a02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40021000 	.word	0x40021000

08003a14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0d0      	b.n	8003bca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a28:	4b6a      	ldr	r3, [pc, #424]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d910      	bls.n	8003a58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b67      	ldr	r3, [pc, #412]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 0207 	bic.w	r2, r3, #7
 8003a3e:	4965      	ldr	r1, [pc, #404]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b63      	ldr	r3, [pc, #396]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0b8      	b.n	8003bca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a70:	4b59      	ldr	r3, [pc, #356]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	4a58      	ldr	r2, [pc, #352]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a88:	4b53      	ldr	r3, [pc, #332]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4a52      	ldr	r2, [pc, #328]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003a92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a94:	4b50      	ldr	r3, [pc, #320]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	494d      	ldr	r1, [pc, #308]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d040      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aba:	4b47      	ldr	r3, [pc, #284]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d115      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e07f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad2:	4b41      	ldr	r3, [pc, #260]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e073      	b.n	8003bca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e06b      	b.n	8003bca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af2:	4b39      	ldr	r3, [pc, #228]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f023 0203 	bic.w	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4936      	ldr	r1, [pc, #216]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b04:	f7fe fbd4 	bl	80022b0 <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0c:	f7fe fbd0 	bl	80022b0 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e053      	b.n	8003bca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b22:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 020c 	and.w	r2, r3, #12
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d1eb      	bne.n	8003b0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b34:	4b27      	ldr	r3, [pc, #156]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d210      	bcs.n	8003b64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b24      	ldr	r3, [pc, #144]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 0207 	bic.w	r2, r3, #7
 8003b4a:	4922      	ldr	r1, [pc, #136]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b20      	ldr	r3, [pc, #128]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e032      	b.n	8003bca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b70:	4b19      	ldr	r3, [pc, #100]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4916      	ldr	r1, [pc, #88]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b8e:	4b12      	ldr	r3, [pc, #72]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	490e      	ldr	r1, [pc, #56]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ba2:	f000 f821 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	490a      	ldr	r1, [pc, #40]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003bb4:	5ccb      	ldrb	r3, [r1, r3]
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	4a09      	ldr	r2, [pc, #36]	@ (8003be0 <HAL_RCC_ClockConfig+0x1cc>)
 8003bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bbe:	4b09      	ldr	r3, [pc, #36]	@ (8003be4 <HAL_RCC_ClockConfig+0x1d0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fb32 	bl	800222c <HAL_InitTick>

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40022000 	.word	0x40022000
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	08004e18 	.word	0x08004e18
 8003be0:	20000000 	.word	0x20000000
 8003be4:	20000004 	.word	0x20000004

08003be8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c02:	4b1e      	ldr	r3, [pc, #120]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x94>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d002      	beq.n	8003c18 <HAL_RCC_GetSysClockFreq+0x30>
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d003      	beq.n	8003c1e <HAL_RCC_GetSysClockFreq+0x36>
 8003c16:	e027      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c18:	4b19      	ldr	r3, [pc, #100]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c1a:	613b      	str	r3, [r7, #16]
      break;
 8003c1c:	e027      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	0c9b      	lsrs	r3, r3, #18
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	4a17      	ldr	r2, [pc, #92]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c28:	5cd3      	ldrb	r3, [r2, r3]
 8003c2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d010      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c36:	4b11      	ldr	r3, [pc, #68]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x94>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	0c5b      	lsrs	r3, r3, #17
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	4a11      	ldr	r2, [pc, #68]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c42:	5cd3      	ldrb	r3, [r2, r3]
 8003c44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a0d      	ldr	r2, [pc, #52]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c4a:	fb03 f202 	mul.w	r2, r3, r2
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	e004      	b.n	8003c62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003c8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c5c:	fb02 f303 	mul.w	r3, r2, r3
 8003c60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	613b      	str	r3, [r7, #16]
      break;
 8003c66:	e002      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c68:	4b05      	ldr	r3, [pc, #20]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c6a:	613b      	str	r3, [r7, #16]
      break;
 8003c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c6e:	693b      	ldr	r3, [r7, #16]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	007a1200 	.word	0x007a1200
 8003c84:	08004e28 	.word	0x08004e28
 8003c88:	08004e38 	.word	0x08004e38
 8003c8c:	003d0900 	.word	0x003d0900

08003c90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c98:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc4 <RCC_Delay+0x34>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc8 <RCC_Delay+0x38>)
 8003c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca2:	0a5b      	lsrs	r3, r3, #9
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cac:	bf00      	nop
  }
  while (Delay --);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1e5a      	subs	r2, r3, #1
 8003cb2:	60fa      	str	r2, [r7, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1f9      	bne.n	8003cac <RCC_Delay+0x1c>
}
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	20000000 	.word	0x20000000
 8003cc8:	10624dd3 	.word	0x10624dd3

08003ccc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e076      	b.n	8003dcc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d108      	bne.n	8003cf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cee:	d009      	beq.n	8003d04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	61da      	str	r2, [r3, #28]
 8003cf6:	e005      	b.n	8003d04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fe f968 	bl	8001ff4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d88:	ea42 0103 	orr.w	r1, r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	0c1a      	lsrs	r2, r3, #16
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f002 0204 	and.w	r2, r2, #4
 8003daa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69da      	ldr	r2, [r3, #28]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003de4:	f7fe fa64 	bl	80022b0 <HAL_GetTick>
 8003de8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d001      	beq.n	8003dfe <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e12a      	b.n	8004054 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_SPI_Transmit+0x36>
 8003e04:	88fb      	ldrh	r3, [r7, #6]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e122      	b.n	8004054 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_SPI_Transmit+0x48>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e11b      	b.n	8004054 <HAL_SPI_Transmit+0x280>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2203      	movs	r2, #3
 8003e28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	88fa      	ldrh	r2, [r7, #6]
 8003e3c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	88fa      	ldrh	r2, [r7, #6]
 8003e42:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e6a:	d10f      	bne.n	8003e8c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e96:	2b40      	cmp	r3, #64	@ 0x40
 8003e98:	d007      	beq.n	8003eaa <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ea8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eb2:	d152      	bne.n	8003f5a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_SPI_Transmit+0xee>
 8003ebc:	8b7b      	ldrh	r3, [r7, #26]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d145      	bne.n	8003f4e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	881a      	ldrh	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed2:	1c9a      	adds	r2, r3, #2
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ee6:	e032      	b.n	8003f4e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d112      	bne.n	8003f1c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efa:	881a      	ldrh	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f06:	1c9a      	adds	r2, r3, #2
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f1a:	e018      	b.n	8003f4e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f1c:	f7fe f9c8 	bl	80022b0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d803      	bhi.n	8003f34 <HAL_SPI_Transmit+0x160>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d102      	bne.n	8003f3a <HAL_SPI_Transmit+0x166>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d109      	bne.n	8003f4e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e082      	b.n	8004054 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1c7      	bne.n	8003ee8 <HAL_SPI_Transmit+0x114>
 8003f58:	e053      	b.n	8004002 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_SPI_Transmit+0x194>
 8003f62:	8b7b      	ldrh	r3, [r7, #26]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d147      	bne.n	8003ff8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	330c      	adds	r3, #12
 8003f72:	7812      	ldrb	r2, [r2, #0]
 8003f74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f8e:	e033      	b.n	8003ff8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d113      	bne.n	8003fc6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	330c      	adds	r3, #12
 8003fa8:	7812      	ldrb	r2, [r2, #0]
 8003faa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003fc4:	e018      	b.n	8003ff8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fc6:	f7fe f973 	bl	80022b0 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d803      	bhi.n	8003fde <HAL_SPI_Transmit+0x20a>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d102      	bne.n	8003fe4 <HAL_SPI_Transmit+0x210>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d109      	bne.n	8003ff8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e02d      	b.n	8004054 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1c6      	bne.n	8003f90 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	6839      	ldr	r1, [r7, #0]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fbc4 	bl	8004794 <SPI_EndRxTxTransaction>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004052:	2300      	movs	r3, #0
  }
}
 8004054:	4618      	mov	r0, r3
 8004056:	3720      	adds	r7, #32
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	4613      	mov	r3, r2
 800406a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b01      	cmp	r3, #1
 8004076:	d001      	beq.n	800407c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004078:	2302      	movs	r3, #2
 800407a:	e104      	b.n	8004286 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004084:	d112      	bne.n	80040ac <HAL_SPI_Receive+0x50>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10e      	bne.n	80040ac <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2204      	movs	r2, #4
 8004092:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004096:	88fa      	ldrh	r2, [r7, #6]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	4613      	mov	r3, r2
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f8f3 	bl	800428e <HAL_SPI_TransmitReceive>
 80040a8:	4603      	mov	r3, r0
 80040aa:	e0ec      	b.n	8004286 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040ac:	f7fe f900 	bl	80022b0 <HAL_GetTick>
 80040b0:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <HAL_SPI_Receive+0x62>
 80040b8:	88fb      	ldrh	r3, [r7, #6]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e0e1      	b.n	8004286 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_SPI_Receive+0x74>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e0da      	b.n	8004286 <HAL_SPI_Receive+0x22a>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2204      	movs	r2, #4
 80040dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	88fa      	ldrh	r2, [r7, #6]
 80040f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	88fa      	ldrh	r2, [r7, #6]
 80040f6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800411e:	d10f      	bne.n	8004140 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800412e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800413e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414a:	2b40      	cmp	r3, #64	@ 0x40
 800414c:	d007      	beq.n	800415e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800415c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d170      	bne.n	8004248 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004166:	e035      	b.n	80041d4 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b01      	cmp	r3, #1
 8004174:	d115      	bne.n	80041a2 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f103 020c 	add.w	r2, r3, #12
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004182:	7812      	ldrb	r2, [r2, #0]
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041a0:	e018      	b.n	80041d4 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041a2:	f7fe f885 	bl	80022b0 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d803      	bhi.n	80041ba <HAL_SPI_Receive+0x15e>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d102      	bne.n	80041c0 <HAL_SPI_Receive+0x164>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d109      	bne.n	80041d4 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e058      	b.n	8004286 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1c4      	bne.n	8004168 <HAL_SPI_Receive+0x10c>
 80041de:	e038      	b.n	8004252 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d113      	bne.n	8004216 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f8:	b292      	uxth	r2, r2
 80041fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004200:	1c9a      	adds	r2, r3, #2
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004214:	e018      	b.n	8004248 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004216:	f7fe f84b 	bl	80022b0 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d803      	bhi.n	800422e <HAL_SPI_Receive+0x1d2>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422c:	d102      	bne.n	8004234 <HAL_SPI_Receive+0x1d8>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e01e      	b.n	8004286 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1c6      	bne.n	80041e0 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	6839      	ldr	r1, [r7, #0]
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 fa4a 	bl	80046f0 <SPI_EndRxTransaction>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004284:	2300      	movs	r3, #0
  }
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b08a      	sub	sp, #40	@ 0x28
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800429c:	2301      	movs	r3, #1
 800429e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042a0:	f7fe f806 	bl	80022b0 <HAL_GetTick>
 80042a4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042ac:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80042b4:	887b      	ldrh	r3, [r7, #2]
 80042b6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042b8:	7ffb      	ldrb	r3, [r7, #31]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d00c      	beq.n	80042d8 <HAL_SPI_TransmitReceive+0x4a>
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042c4:	d106      	bne.n	80042d4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d102      	bne.n	80042d4 <HAL_SPI_TransmitReceive+0x46>
 80042ce:	7ffb      	ldrb	r3, [r7, #31]
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d001      	beq.n	80042d8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
 80042d6:	e17f      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d005      	beq.n	80042ea <HAL_SPI_TransmitReceive+0x5c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <HAL_SPI_TransmitReceive+0x5c>
 80042e4:	887b      	ldrh	r3, [r7, #2]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e174      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_SPI_TransmitReceive+0x6e>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e16d      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x34a>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b04      	cmp	r3, #4
 800430e:	d003      	beq.n	8004318 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2205      	movs	r2, #5
 8004314:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	887a      	ldrh	r2, [r7, #2]
 8004328:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	887a      	ldrh	r2, [r7, #2]
 800432e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	887a      	ldrh	r2, [r7, #2]
 800433a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	887a      	ldrh	r2, [r7, #2]
 8004340:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004358:	2b40      	cmp	r3, #64	@ 0x40
 800435a:	d007      	beq.n	800436c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800436a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004374:	d17e      	bne.n	8004474 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <HAL_SPI_TransmitReceive+0xf6>
 800437e:	8afb      	ldrh	r3, [r7, #22]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d16c      	bne.n	800445e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004388:	881a      	ldrh	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	1c9a      	adds	r2, r3, #2
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043a8:	e059      	b.n	800445e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d11b      	bne.n	80043f0 <HAL_SPI_TransmitReceive+0x162>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d016      	beq.n	80043f0 <HAL_SPI_TransmitReceive+0x162>
 80043c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d113      	bne.n	80043f0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043cc:	881a      	ldrh	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d8:	1c9a      	adds	r2, r3, #2
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d119      	bne.n	8004432 <HAL_SPI_TransmitReceive+0x1a4>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d014      	beq.n	8004432 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004412:	b292      	uxth	r2, r2
 8004414:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441a:	1c9a      	adds	r2, r3, #2
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800442e:	2301      	movs	r3, #1
 8004430:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004432:	f7fd ff3d 	bl	80022b0 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800443e:	429a      	cmp	r2, r3
 8004440:	d80d      	bhi.n	800445e <HAL_SPI_TransmitReceive+0x1d0>
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004448:	d009      	beq.n	800445e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e0bc      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1a0      	bne.n	80043aa <HAL_SPI_TransmitReceive+0x11c>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d19b      	bne.n	80043aa <HAL_SPI_TransmitReceive+0x11c>
 8004472:	e082      	b.n	800457a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_SPI_TransmitReceive+0x1f4>
 800447c:	8afb      	ldrh	r3, [r7, #22]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d171      	bne.n	8004566 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	7812      	ldrb	r2, [r2, #0]
 800448e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800449e:	b29b      	uxth	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044a8:	e05d      	b.n	8004566 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d11c      	bne.n	80044f2 <HAL_SPI_TransmitReceive+0x264>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d017      	beq.n	80044f2 <HAL_SPI_TransmitReceive+0x264>
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d114      	bne.n	80044f2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	7812      	ldrb	r2, [r2, #0]
 80044d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d119      	bne.n	8004534 <HAL_SPI_TransmitReceive+0x2a6>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d014      	beq.n	8004534 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004526:	b29b      	uxth	r3, r3
 8004528:	3b01      	subs	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004530:	2301      	movs	r3, #1
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004534:	f7fd febc 	bl	80022b0 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004540:	429a      	cmp	r2, r3
 8004542:	d803      	bhi.n	800454c <HAL_SPI_TransmitReceive+0x2be>
 8004544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	d102      	bne.n	8004552 <HAL_SPI_TransmitReceive+0x2c4>
 800454c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454e:	2b00      	cmp	r3, #0
 8004550:	d109      	bne.n	8004566 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e038      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800456a:	b29b      	uxth	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d19c      	bne.n	80044aa <HAL_SPI_TransmitReceive+0x21c>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d197      	bne.n	80044aa <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800457a:	6a3a      	ldr	r2, [r7, #32]
 800457c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f908 	bl	8004794 <SPI_EndRxTxTransaction>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e01d      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80045d6:	2300      	movs	r3, #0
  }
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3728      	adds	r7, #40	@ 0x28
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045f0:	f7fd fe5e 	bl	80022b0 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	4413      	add	r3, r2
 80045fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004600:	f7fd fe56 	bl	80022b0 <HAL_GetTick>
 8004604:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004606:	4b39      	ldr	r3, [pc, #228]	@ (80046ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	015b      	lsls	r3, r3, #5
 800460c:	0d1b      	lsrs	r3, r3, #20
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	fb02 f303 	mul.w	r3, r2, r3
 8004614:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004616:	e054      	b.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461e:	d050      	beq.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004620:	f7fd fe46 	bl	80022b0 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	429a      	cmp	r2, r3
 800462e:	d902      	bls.n	8004636 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d13d      	bne.n	80046b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800464e:	d111      	bne.n	8004674 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004658:	d004      	beq.n	8004664 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004662:	d107      	bne.n	8004674 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004672:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800467c:	d10f      	bne.n	800469e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800469c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e017      	b.n	80046e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	3b01      	subs	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4013      	ands	r3, r2
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	bf0c      	ite	eq
 80046d2:	2301      	moveq	r3, #1
 80046d4:	2300      	movne	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d19b      	bne.n	8004618 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3720      	adds	r7, #32
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000000 	.word	0x20000000

080046f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004704:	d111      	bne.n	800472a <SPI_EndRxTransaction+0x3a>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800470e:	d004      	beq.n	800471a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004718:	d107      	bne.n	800472a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004728:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004732:	d117      	bne.n	8004764 <SPI_EndRxTransaction+0x74>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800473c:	d112      	bne.n	8004764 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2200      	movs	r2, #0
 8004746:	2101      	movs	r1, #1
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f7ff ff49 	bl	80045e0 <SPI_WaitFlagStateUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01a      	beq.n	800478a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004758:	f043 0220 	orr.w	r2, r3, #32
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e013      	b.n	800478c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2200      	movs	r2, #0
 800476c:	2180      	movs	r1, #128	@ 0x80
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f7ff ff36 	bl	80045e0 <SPI_WaitFlagStateUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d007      	beq.n	800478a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800477e:	f043 0220 	orr.w	r2, r3, #32
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e000      	b.n	800478c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2201      	movs	r2, #1
 80047a8:	2102      	movs	r1, #2
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f7ff ff18 	bl	80045e0 <SPI_WaitFlagStateUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ba:	f043 0220 	orr.w	r2, r3, #32
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e013      	b.n	80047ee <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2200      	movs	r2, #0
 80047ce:	2180      	movs	r1, #128	@ 0x80
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7ff ff05 	bl	80045e0 <SPI_WaitFlagStateUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d007      	beq.n	80047ec <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e0:	f043 0220 	orr.w	r2, r3, #32
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e000      	b.n	80047ee <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b082      	sub	sp, #8
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e041      	b.n	800488c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d106      	bne.n	8004822 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7fd fc6f 	bl	8002100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2202      	movs	r2, #2
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3304      	adds	r3, #4
 8004832:	4619      	mov	r1, r3
 8004834:	4610      	mov	r0, r2
 8004836:	f000 f947 	bl	8004ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d001      	beq.n	80048ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e03a      	b.n	8004922 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a18      	ldr	r2, [pc, #96]	@ (800492c <HAL_TIM_Base_Start_IT+0x98>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00e      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x58>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d6:	d009      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x58>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a14      	ldr	r2, [pc, #80]	@ (8004930 <HAL_TIM_Base_Start_IT+0x9c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d004      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x58>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a13      	ldr	r2, [pc, #76]	@ (8004934 <HAL_TIM_Base_Start_IT+0xa0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d111      	bne.n	8004910 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b06      	cmp	r3, #6
 80048fc:	d010      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0201 	orr.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490e:	e007      	b.n	8004920 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr
 800492c:	40012c00 	.word	0x40012c00
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800

08004938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_TIM_ConfigClockSource+0x1c>
 8004950:	2302      	movs	r3, #2
 8004952:	e0b4      	b.n	8004abe <HAL_TIM_ConfigClockSource+0x186>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800497a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800498c:	d03e      	beq.n	8004a0c <HAL_TIM_ConfigClockSource+0xd4>
 800498e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004992:	f200 8087 	bhi.w	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
 8004996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800499a:	f000 8086 	beq.w	8004aaa <HAL_TIM_ConfigClockSource+0x172>
 800499e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049a2:	d87f      	bhi.n	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80049a4:	2b70      	cmp	r3, #112	@ 0x70
 80049a6:	d01a      	beq.n	80049de <HAL_TIM_ConfigClockSource+0xa6>
 80049a8:	2b70      	cmp	r3, #112	@ 0x70
 80049aa:	d87b      	bhi.n	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80049ac:	2b60      	cmp	r3, #96	@ 0x60
 80049ae:	d050      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0x11a>
 80049b0:	2b60      	cmp	r3, #96	@ 0x60
 80049b2:	d877      	bhi.n	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80049b4:	2b50      	cmp	r3, #80	@ 0x50
 80049b6:	d03c      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0xfa>
 80049b8:	2b50      	cmp	r3, #80	@ 0x50
 80049ba:	d873      	bhi.n	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80049bc:	2b40      	cmp	r3, #64	@ 0x40
 80049be:	d058      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0x13a>
 80049c0:	2b40      	cmp	r3, #64	@ 0x40
 80049c2:	d86f      	bhi.n	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80049c4:	2b30      	cmp	r3, #48	@ 0x30
 80049c6:	d064      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x15a>
 80049c8:	2b30      	cmp	r3, #48	@ 0x30
 80049ca:	d86b      	bhi.n	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	d060      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x15a>
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	d867      	bhi.n	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d05c      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x15a>
 80049d8:	2b10      	cmp	r3, #16
 80049da:	d05a      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x15a>
 80049dc:	e062      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049ee:	f000 f950 	bl	8004c92 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	609a      	str	r2, [r3, #8]
      break;
 8004a0a:	e04f      	b.n	8004aac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a1c:	f000 f939 	bl	8004c92 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a2e:	609a      	str	r2, [r3, #8]
      break;
 8004a30:	e03c      	b.n	8004aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f000 f8b0 	bl	8004ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2150      	movs	r1, #80	@ 0x50
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 f907 	bl	8004c5e <TIM_ITRx_SetConfig>
      break;
 8004a50:	e02c      	b.n	8004aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f000 f8ce 	bl	8004c00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2160      	movs	r1, #96	@ 0x60
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 f8f7 	bl	8004c5e <TIM_ITRx_SetConfig>
      break;
 8004a70:	e01c      	b.n	8004aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f000 f890 	bl	8004ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2140      	movs	r1, #64	@ 0x40
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 f8e7 	bl	8004c5e <TIM_ITRx_SetConfig>
      break;
 8004a90:	e00c      	b.n	8004aac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f000 f8de 	bl	8004c5e <TIM_ITRx_SetConfig>
      break;
 8004aa2:	e003      	b.n	8004aac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa8:	e000      	b.n	8004aac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004aaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a2f      	ldr	r2, [pc, #188]	@ (8004b98 <TIM_Base_SetConfig+0xd0>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00b      	beq.n	8004af8 <TIM_Base_SetConfig+0x30>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae6:	d007      	beq.n	8004af8 <TIM_Base_SetConfig+0x30>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a2c      	ldr	r2, [pc, #176]	@ (8004b9c <TIM_Base_SetConfig+0xd4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d003      	beq.n	8004af8 <TIM_Base_SetConfig+0x30>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a2b      	ldr	r2, [pc, #172]	@ (8004ba0 <TIM_Base_SetConfig+0xd8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d108      	bne.n	8004b0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a22      	ldr	r2, [pc, #136]	@ (8004b98 <TIM_Base_SetConfig+0xd0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00b      	beq.n	8004b2a <TIM_Base_SetConfig+0x62>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b18:	d007      	beq.n	8004b2a <TIM_Base_SetConfig+0x62>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8004b9c <TIM_Base_SetConfig+0xd4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d003      	beq.n	8004b2a <TIM_Base_SetConfig+0x62>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a1e      	ldr	r2, [pc, #120]	@ (8004ba0 <TIM_Base_SetConfig+0xd8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d108      	bne.n	8004b3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a0d      	ldr	r2, [pc, #52]	@ (8004b98 <TIM_Base_SetConfig+0xd0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d103      	bne.n	8004b70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d005      	beq.n	8004b8e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f023 0201 	bic.w	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	611a      	str	r2, [r3, #16]
  }
}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr
 8004b98:	40012c00 	.word	0x40012c00
 8004b9c:	40000400 	.word	0x40000400
 8004ba0:	40000800 	.word	0x40000800

08004ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f023 0201 	bic.w	r2, r3, #1
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f023 030a 	bic.w	r3, r3, #10
 8004be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	621a      	str	r2, [r3, #32]
}
 8004bf6:	bf00      	nop
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	f023 0210 	bic.w	r2, r3, #16
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	031b      	lsls	r3, r3, #12
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	621a      	str	r2, [r3, #32]
}
 8004c54:	bf00      	nop
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr

08004c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b085      	sub	sp, #20
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f043 0307 	orr.w	r3, r3, #7
 8004c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	609a      	str	r2, [r3, #8]
}
 8004c88:	bf00      	nop
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr

08004c92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b087      	sub	sp, #28
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	607a      	str	r2, [r7, #4]
 8004c9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	021a      	lsls	r2, r3, #8
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	609a      	str	r2, [r3, #8]
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e046      	b.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a16      	ldr	r2, [pc, #88]	@ (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00e      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d34:	d009      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a12      	ldr	r2, [pc, #72]	@ (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a10      	ldr	r2, [pc, #64]	@ (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d10c      	bne.n	8004d64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr
 8004d80:	40012c00 	.word	0x40012c00
 8004d84:	40000400 	.word	0x40000400
 8004d88:	40000800 	.word	0x40000800

08004d8c <memset>:
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	4402      	add	r2, r0
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d100      	bne.n	8004d96 <memset+0xa>
 8004d94:	4770      	bx	lr
 8004d96:	f803 1b01 	strb.w	r1, [r3], #1
 8004d9a:	e7f9      	b.n	8004d90 <memset+0x4>

08004d9c <__libc_init_array>:
 8004d9c:	b570      	push	{r4, r5, r6, lr}
 8004d9e:	2600      	movs	r6, #0
 8004da0:	4d0c      	ldr	r5, [pc, #48]	@ (8004dd4 <__libc_init_array+0x38>)
 8004da2:	4c0d      	ldr	r4, [pc, #52]	@ (8004dd8 <__libc_init_array+0x3c>)
 8004da4:	1b64      	subs	r4, r4, r5
 8004da6:	10a4      	asrs	r4, r4, #2
 8004da8:	42a6      	cmp	r6, r4
 8004daa:	d109      	bne.n	8004dc0 <__libc_init_array+0x24>
 8004dac:	f000 f828 	bl	8004e00 <_init>
 8004db0:	2600      	movs	r6, #0
 8004db2:	4d0a      	ldr	r5, [pc, #40]	@ (8004ddc <__libc_init_array+0x40>)
 8004db4:	4c0a      	ldr	r4, [pc, #40]	@ (8004de0 <__libc_init_array+0x44>)
 8004db6:	1b64      	subs	r4, r4, r5
 8004db8:	10a4      	asrs	r4, r4, #2
 8004dba:	42a6      	cmp	r6, r4
 8004dbc:	d105      	bne.n	8004dca <__libc_init_array+0x2e>
 8004dbe:	bd70      	pop	{r4, r5, r6, pc}
 8004dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc4:	4798      	blx	r3
 8004dc6:	3601      	adds	r6, #1
 8004dc8:	e7ee      	b.n	8004da8 <__libc_init_array+0xc>
 8004dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dce:	4798      	blx	r3
 8004dd0:	3601      	adds	r6, #1
 8004dd2:	e7f2      	b.n	8004dba <__libc_init_array+0x1e>
 8004dd4:	08004e3c 	.word	0x08004e3c
 8004dd8:	08004e3c 	.word	0x08004e3c
 8004ddc:	08004e3c 	.word	0x08004e3c
 8004de0:	08004e40 	.word	0x08004e40

08004de4 <memcpy>:
 8004de4:	440a      	add	r2, r1
 8004de6:	4291      	cmp	r1, r2
 8004de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dec:	d100      	bne.n	8004df0 <memcpy+0xc>
 8004dee:	4770      	bx	lr
 8004df0:	b510      	push	{r4, lr}
 8004df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004df6:	4291      	cmp	r1, r2
 8004df8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dfc:	d1f9      	bne.n	8004df2 <memcpy+0xe>
 8004dfe:	bd10      	pop	{r4, pc}

08004e00 <_init>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	bf00      	nop
 8004e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e06:	bc08      	pop	{r3}
 8004e08:	469e      	mov	lr, r3
 8004e0a:	4770      	bx	lr

08004e0c <_fini>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	bf00      	nop
 8004e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e12:	bc08      	pop	{r3}
 8004e14:	469e      	mov	lr, r3
 8004e16:	4770      	bx	lr
