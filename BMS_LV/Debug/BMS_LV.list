
BMS_LV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000821c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008328  08008328  00009328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800839c  0800839c  0000a17c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800839c  0800839c  0000a17c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800839c  0800839c  0000a17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800839c  0800839c  0000939c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083a0  080083a0  000093a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  080083a4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b4  2000017c  08008520  0000a17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001430  08008520  0000a430  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001252f  00000000  00000000  0000a1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003334  00000000  00000000  0001c6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0001fa08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c8d  00000000  00000000  00020aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a23a  00000000  00000000  0002172d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001560d  00000000  00000000  0003b967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b5ed  00000000  00000000  00050f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc561  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004414  00000000  00000000  000dc5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e09b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008310 	.word	0x08008310

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08008310 	.word	0x08008310

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb38 	bl	80007c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f832 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f922 	bl	80003a0 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f888 	bl	8000270 <MX_CAN_Init>
  MX_I2C1_Init();
 8000160:	f000 f8ba 	bl	80002d8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000164:	f007 fc32 	bl	80079cc <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000168:	f000 f8e4 	bl	8000334 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	// Start precharge (PRECH = 1)


	HAL_GPIO_WritePin(PRECH_GPIO_Port, PRECH_Pin, GPIO_PIN_RESET);
 800016c:	2200      	movs	r2, #0
 800016e:	2110      	movs	r1, #16
 8000170:	4811      	ldr	r0, [pc, #68]	@ (80001b8 <main+0x6c>)
 8000172:	f001 f967 	bl	8001444 <HAL_GPIO_WritePin>

	//Stop precharge and enable discharge (PRECH = 0, DISCHARGE = 1)

	HAL_GPIO_WritePin(DISCHARGE_GPIO_Port, DISCHARGE_Pin, GPIO_PIN_SET);
 8000176:	2201      	movs	r2, #1
 8000178:	2120      	movs	r1, #32
 800017a:	480f      	ldr	r0, [pc, #60]	@ (80001b8 <main+0x6c>)
 800017c:	f001 f962 	bl	8001444 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CHARGE_GPIO_Port, CHARGE_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2104      	movs	r1, #4
 8000184:	480c      	ldr	r0, [pc, #48]	@ (80001b8 <main+0x6c>)
 8000186:	f001 f95d 	bl	8001444 <HAL_GPIO_WritePin>
        /*HAL_Delay(3000);
        chg_allowed = !chg_allowed;
        dis_allowed = !dis_allowed;*/


		led_green(true);
 800018a:	2001      	movs	r0, #1
 800018c:	f000 f968 	bl	8000460 <led_green>
		led_red(false);
 8000190:	2000      	movs	r0, #0
 8000192:	f000 f977 	bl	8000484 <led_red>
		HAL_Delay(1000);
 8000196:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800019a:	f000 fb75 	bl	8000888 <HAL_Delay>
		led_green(false);
 800019e:	2000      	movs	r0, #0
 80001a0:	f000 f95e 	bl	8000460 <led_green>
		led_red(true);
 80001a4:	2001      	movs	r0, #1
 80001a6:	f000 f96d 	bl	8000484 <led_red>
		HAL_Delay(2000);
 80001aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001ae:	f000 fb6b 	bl	8000888 <HAL_Delay>
		led_green(true);
 80001b2:	bf00      	nop
 80001b4:	e7e9      	b.n	800018a <main+0x3e>
 80001b6:	bf00      	nop
 80001b8:	40010c00 	.word	0x40010c00

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b094      	sub	sp, #80	@ 0x50
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001c6:	2228      	movs	r2, #40	@ 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f008 f874 	bl	80082b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	f107 0314 	add.w	r3, r7, #20
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ec:	2301      	movs	r3, #1
 80001ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fa:	2301      	movs	r3, #1
 80001fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fe:	2302      	movs	r3, #2
 8000200:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000202:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000206:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000208:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800020c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000212:	4618      	mov	r0, r3
 8000214:	f002 ffd2 	bl	80031bc <HAL_RCC_OscConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800021e:	f000 f943 	bl	80004a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000222:	230f      	movs	r3, #15
 8000224:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000226:	2302      	movs	r3, #2
 8000228:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800022a:	2380      	movs	r3, #128	@ 0x80
 800022c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000232:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000236:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2102      	movs	r1, #2
 800023e:	4618      	mov	r0, r3
 8000240:	f003 fa3e 	bl	80036c0 <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800024a:	f000 f92d 	bl	80004a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800024e:	2310      	movs	r3, #16
 8000250:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000252:	2300      	movs	r3, #0
 8000254:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f003 fbab 	bl	80039b4 <HAL_RCCEx_PeriphCLKConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000264:	f000 f920 	bl	80004a8 <Error_Handler>
  }
}
 8000268:	bf00      	nop
 800026a:	3750      	adds	r7, #80	@ 0x50
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000274:	4b16      	ldr	r3, [pc, #88]	@ (80002d0 <MX_CAN_Init+0x60>)
 8000276:	4a17      	ldr	r2, [pc, #92]	@ (80002d4 <MX_CAN_Init+0x64>)
 8000278:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800027a:	4b15      	ldr	r3, [pc, #84]	@ (80002d0 <MX_CAN_Init+0x60>)
 800027c:	2210      	movs	r2, #16
 800027e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000280:	4b13      	ldr	r3, [pc, #76]	@ (80002d0 <MX_CAN_Init+0x60>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000286:	4b12      	ldr	r3, [pc, #72]	@ (80002d0 <MX_CAN_Init+0x60>)
 8000288:	2200      	movs	r2, #0
 800028a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800028c:	4b10      	ldr	r3, [pc, #64]	@ (80002d0 <MX_CAN_Init+0x60>)
 800028e:	2200      	movs	r2, #0
 8000290:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000292:	4b0f      	ldr	r3, [pc, #60]	@ (80002d0 <MX_CAN_Init+0x60>)
 8000294:	2200      	movs	r2, #0
 8000296:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000298:	4b0d      	ldr	r3, [pc, #52]	@ (80002d0 <MX_CAN_Init+0x60>)
 800029a:	2200      	movs	r2, #0
 800029c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800029e:	4b0c      	ldr	r3, [pc, #48]	@ (80002d0 <MX_CAN_Init+0x60>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002a4:	4b0a      	ldr	r3, [pc, #40]	@ (80002d0 <MX_CAN_Init+0x60>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002aa:	4b09      	ldr	r3, [pc, #36]	@ (80002d0 <MX_CAN_Init+0x60>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002b0:	4b07      	ldr	r3, [pc, #28]	@ (80002d0 <MX_CAN_Init+0x60>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002b6:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <MX_CAN_Init+0x60>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <MX_CAN_Init+0x60>)
 80002be:	f000 fb07 	bl	80008d0 <HAL_CAN_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80002c8:	f000 f8ee 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000198 	.word	0x20000198
 80002d4:	40006400 	.word	0x40006400

080002d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002dc:	4b12      	ldr	r3, [pc, #72]	@ (8000328 <MX_I2C1_Init+0x50>)
 80002de:	4a13      	ldr	r2, [pc, #76]	@ (800032c <MX_I2C1_Init+0x54>)
 80002e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002e2:	4b11      	ldr	r3, [pc, #68]	@ (8000328 <MX_I2C1_Init+0x50>)
 80002e4:	4a12      	ldr	r2, [pc, #72]	@ (8000330 <MX_I2C1_Init+0x58>)
 80002e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000328 <MX_I2C1_Init+0x50>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000328 <MX_I2C1_Init+0x50>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000328 <MX_I2C1_Init+0x50>)
 80002f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000328 <MX_I2C1_Init+0x50>)
 80002fe:	2200      	movs	r2, #0
 8000300:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000302:	4b09      	ldr	r3, [pc, #36]	@ (8000328 <MX_I2C1_Init+0x50>)
 8000304:	2200      	movs	r2, #0
 8000306:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000308:	4b07      	ldr	r3, [pc, #28]	@ (8000328 <MX_I2C1_Init+0x50>)
 800030a:	2200      	movs	r2, #0
 800030c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800030e:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <MX_I2C1_Init+0x50>)
 8000310:	2200      	movs	r2, #0
 8000312:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000314:	4804      	ldr	r0, [pc, #16]	@ (8000328 <MX_I2C1_Init+0x50>)
 8000316:	f001 f8ad 	bl	8001474 <HAL_I2C_Init>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000320:	f000 f8c2 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	200001c0 	.word	0x200001c0
 800032c:	40005400 	.word	0x40005400
 8000330:	000186a0 	.word	0x000186a0

08000334 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000338:	4b17      	ldr	r3, [pc, #92]	@ (8000398 <MX_SPI1_Init+0x64>)
 800033a:	4a18      	ldr	r2, [pc, #96]	@ (800039c <MX_SPI1_Init+0x68>)
 800033c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800033e:	4b16      	ldr	r3, [pc, #88]	@ (8000398 <MX_SPI1_Init+0x64>)
 8000340:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000344:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000346:	4b14      	ldr	r3, [pc, #80]	@ (8000398 <MX_SPI1_Init+0x64>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800034c:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <MX_SPI1_Init+0x64>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000352:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <MX_SPI1_Init+0x64>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000358:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <MX_SPI1_Init+0x64>)
 800035a:	2200      	movs	r2, #0
 800035c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800035e:	4b0e      	ldr	r3, [pc, #56]	@ (8000398 <MX_SPI1_Init+0x64>)
 8000360:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000364:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000366:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <MX_SPI1_Init+0x64>)
 8000368:	2200      	movs	r2, #0
 800036a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800036c:	4b0a      	ldr	r3, [pc, #40]	@ (8000398 <MX_SPI1_Init+0x64>)
 800036e:	2200      	movs	r2, #0
 8000370:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000372:	4b09      	ldr	r3, [pc, #36]	@ (8000398 <MX_SPI1_Init+0x64>)
 8000374:	2200      	movs	r2, #0
 8000376:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000378:	4b07      	ldr	r3, [pc, #28]	@ (8000398 <MX_SPI1_Init+0x64>)
 800037a:	2200      	movs	r2, #0
 800037c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800037e:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <MX_SPI1_Init+0x64>)
 8000380:	220a      	movs	r2, #10
 8000382:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000384:	4804      	ldr	r0, [pc, #16]	@ (8000398 <MX_SPI1_Init+0x64>)
 8000386:	f003 fbcb 	bl	8003b20 <HAL_SPI_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000390:	f000 f88a 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000214 	.word	0x20000214
 800039c:	40013000 	.word	0x40013000

080003a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b088      	sub	sp, #32
 80003a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a6:	f107 0310 	add.w	r3, r7, #16
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003b4:	4b27      	ldr	r3, [pc, #156]	@ (8000454 <MX_GPIO_Init+0xb4>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a26      	ldr	r2, [pc, #152]	@ (8000454 <MX_GPIO_Init+0xb4>)
 80003ba:	f043 0320 	orr.w	r3, r3, #32
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b24      	ldr	r3, [pc, #144]	@ (8000454 <MX_GPIO_Init+0xb4>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0320 	and.w	r3, r3, #32
 80003c8:	60fb      	str	r3, [r7, #12]
 80003ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003cc:	4b21      	ldr	r3, [pc, #132]	@ (8000454 <MX_GPIO_Init+0xb4>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a20      	ldr	r2, [pc, #128]	@ (8000454 <MX_GPIO_Init+0xb4>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000454 <MX_GPIO_Init+0xb4>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0304 	and.w	r3, r3, #4
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <MX_GPIO_Init+0xb4>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000454 <MX_GPIO_Init+0xb4>)
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b18      	ldr	r3, [pc, #96]	@ (8000454 <MX_GPIO_Init+0xb4>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0308 	and.w	r3, r3, #8
 80003f8:	607b      	str	r3, [r7, #4]
 80003fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 8000402:	4815      	ldr	r0, [pc, #84]	@ (8000458 <MX_GPIO_Init+0xb8>)
 8000404:	f001 f81e 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHARGE_Pin|PRECH_Pin|DISCHARGE_Pin, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2134      	movs	r1, #52	@ 0x34
 800040c:	4813      	ldr	r0, [pc, #76]	@ (800045c <MX_GPIO_Init+0xbc>)
 800040e:	f001 f819 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin PA8 PA10 */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|GPIO_PIN_8|GPIO_PIN_10;
 8000412:	f44f 63a2 	mov.w	r3, #1296	@ 0x510
 8000416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000418:	2301      	movs	r3, #1
 800041a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000420:	2302      	movs	r3, #2
 8000422:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000424:	f107 0310 	add.w	r3, r7, #16
 8000428:	4619      	mov	r1, r3
 800042a:	480b      	ldr	r0, [pc, #44]	@ (8000458 <MX_GPIO_Init+0xb8>)
 800042c:	f000 fe86 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGE_Pin PRECH_Pin DISCHARGE_Pin */
  GPIO_InitStruct.Pin = CHARGE_Pin|PRECH_Pin|DISCHARGE_Pin;
 8000430:	2334      	movs	r3, #52	@ 0x34
 8000432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000434:	2301      	movs	r3, #1
 8000436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043c:	2302      	movs	r3, #2
 800043e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	4619      	mov	r1, r3
 8000446:	4805      	ldr	r0, [pc, #20]	@ (800045c <MX_GPIO_Init+0xbc>)
 8000448:	f000 fe78 	bl	800113c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800044c:	bf00      	nop
 800044e:	3720      	adds	r7, #32
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40021000 	.word	0x40021000
 8000458:	40010800 	.word	0x40010800
 800045c:	40010c00 	.word	0x40010c00

08000460 <led_green>:
void bms_dis_switch(bool enable) {
    HAL_GPIO_WritePin(DIS_GPIO_Port, DIS_Pin,
                      enable ? GPIO_PIN_RESET : GPIO_PIN_SET); // lógica invertida
}

void led_green(bool on) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	461a      	mov	r2, r3
 800046e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000472:	4803      	ldr	r0, [pc, #12]	@ (8000480 <led_green+0x20>)
 8000474:	f000 ffe6 	bl	8001444 <HAL_GPIO_WritePin>
}
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40010800 	.word	0x40010800

08000484 <led_red>:

void led_red(bool on) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	461a      	mov	r2, r3
 8000492:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000496:	4803      	ldr	r0, [pc, #12]	@ (80004a4 <led_red+0x20>)
 8000498:	f000 ffd4 	bl	8001444 <HAL_GPIO_WritePin>
}
 800049c:	bf00      	nop
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010800 	.word	0x40010800

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80004b0:	bf00      	nop
 80004b2:	e7fd      	b.n	80004b0 <Error_Handler+0x8>

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ba:	4b15      	ldr	r3, [pc, #84]	@ (8000510 <HAL_MspInit+0x5c>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a14      	ldr	r2, [pc, #80]	@ (8000510 <HAL_MspInit+0x5c>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b12      	ldr	r3, [pc, #72]	@ (8000510 <HAL_MspInit+0x5c>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <HAL_MspInit+0x5c>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000510 <HAL_MspInit+0x5c>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <HAL_MspInit+0x5c>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000514 <HAL_MspInit+0x60>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	4a04      	ldr	r2, [pc, #16]	@ (8000514 <HAL_MspInit+0x60>)
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	40021000 	.word	0x40021000
 8000514:	40010000 	.word	0x40010000

08000518 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	@ 0x28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a29      	ldr	r2, [pc, #164]	@ (80005d8 <HAL_CAN_MspInit+0xc0>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d14b      	bne.n	80005d0 <HAL_CAN_MspInit+0xb8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000538:	4b28      	ldr	r3, [pc, #160]	@ (80005dc <HAL_CAN_MspInit+0xc4>)
 800053a:	69db      	ldr	r3, [r3, #28]
 800053c:	4a27      	ldr	r2, [pc, #156]	@ (80005dc <HAL_CAN_MspInit+0xc4>)
 800053e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000542:	61d3      	str	r3, [r2, #28]
 8000544:	4b25      	ldr	r3, [pc, #148]	@ (80005dc <HAL_CAN_MspInit+0xc4>)
 8000546:	69db      	ldr	r3, [r3, #28]
 8000548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800054c:	613b      	str	r3, [r7, #16]
 800054e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000550:	4b22      	ldr	r3, [pc, #136]	@ (80005dc <HAL_CAN_MspInit+0xc4>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a21      	ldr	r2, [pc, #132]	@ (80005dc <HAL_CAN_MspInit+0xc4>)
 8000556:	f043 0308 	orr.w	r3, r3, #8
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b1f      	ldr	r3, [pc, #124]	@ (80005dc <HAL_CAN_MspInit+0xc4>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0308 	and.w	r3, r3, #8
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000568:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800056c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056e:	2300      	movs	r3, #0
 8000570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4619      	mov	r1, r3
 800057c:	4818      	ldr	r0, [pc, #96]	@ (80005e0 <HAL_CAN_MspInit+0xc8>)
 800057e:	f000 fddd 	bl	800113c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000582:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000588:	2302      	movs	r3, #2
 800058a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800058c:	2303      	movs	r3, #3
 800058e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4619      	mov	r1, r3
 8000596:	4812      	ldr	r0, [pc, #72]	@ (80005e0 <HAL_CAN_MspInit+0xc8>)
 8000598:	f000 fdd0 	bl	800113c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800059c:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <HAL_CAN_MspInit+0xcc>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80005a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005a4:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80005a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80005aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ac:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80005b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80005b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80005ba:	4a0a      	ldr	r2, [pc, #40]	@ (80005e4 <HAL_CAN_MspInit+0xcc>)
 80005bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005be:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2100      	movs	r1, #0
 80005c4:	2014      	movs	r0, #20
 80005c6:	f000 fd82 	bl	80010ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80005ca:	2014      	movs	r0, #20
 80005cc:	f000 fd9b 	bl	8001106 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80005d0:	bf00      	nop
 80005d2:	3728      	adds	r7, #40	@ 0x28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40006400 	.word	0x40006400
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010c00 	.word	0x40010c00
 80005e4:	40010000 	.word	0x40010000

080005e8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a15      	ldr	r2, [pc, #84]	@ (8000658 <HAL_I2C_MspInit+0x70>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d123      	bne.n	8000650 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000608:	4b14      	ldr	r3, [pc, #80]	@ (800065c <HAL_I2C_MspInit+0x74>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a13      	ldr	r2, [pc, #76]	@ (800065c <HAL_I2C_MspInit+0x74>)
 800060e:	f043 0308 	orr.w	r3, r3, #8
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b11      	ldr	r3, [pc, #68]	@ (800065c <HAL_I2C_MspInit+0x74>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0308 	and.w	r3, r3, #8
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000620:	23c0      	movs	r3, #192	@ 0xc0
 8000622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000624:	2312      	movs	r3, #18
 8000626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4619      	mov	r1, r3
 8000632:	480b      	ldr	r0, [pc, #44]	@ (8000660 <HAL_I2C_MspInit+0x78>)
 8000634:	f000 fd82 	bl	800113c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000638:	4b08      	ldr	r3, [pc, #32]	@ (800065c <HAL_I2C_MspInit+0x74>)
 800063a:	69db      	ldr	r3, [r3, #28]
 800063c:	4a07      	ldr	r2, [pc, #28]	@ (800065c <HAL_I2C_MspInit+0x74>)
 800063e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000642:	61d3      	str	r3, [r2, #28]
 8000644:	4b05      	ldr	r3, [pc, #20]	@ (800065c <HAL_I2C_MspInit+0x74>)
 8000646:	69db      	ldr	r3, [r3, #28]
 8000648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000650:	bf00      	nop
 8000652:	3720      	adds	r7, #32
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40005400 	.word	0x40005400
 800065c:	40021000 	.word	0x40021000
 8000660:	40010c00 	.word	0x40010c00

08000664 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a1b      	ldr	r2, [pc, #108]	@ (80006ec <HAL_SPI_MspInit+0x88>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d12f      	bne.n	80006e4 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000684:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <HAL_SPI_MspInit+0x8c>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a19      	ldr	r2, [pc, #100]	@ (80006f0 <HAL_SPI_MspInit+0x8c>)
 800068a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <HAL_SPI_MspInit+0x8c>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <HAL_SPI_MspInit+0x8c>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a13      	ldr	r2, [pc, #76]	@ (80006f0 <HAL_SPI_MspInit+0x8c>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <HAL_SPI_MspInit+0x8c>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006b4:	23a0      	movs	r3, #160	@ 0xa0
 80006b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b8:	2302      	movs	r3, #2
 80006ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	4619      	mov	r1, r3
 80006c6:	480b      	ldr	r0, [pc, #44]	@ (80006f4 <HAL_SPI_MspInit+0x90>)
 80006c8:	f000 fd38 	bl	800113c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006cc:	2340      	movs	r3, #64	@ 0x40
 80006ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	4619      	mov	r1, r3
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <HAL_SPI_MspInit+0x90>)
 80006e0:	f000 fd2c 	bl	800113c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80006e4:	bf00      	nop
 80006e6:	3720      	adds	r7, #32
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40013000 	.word	0x40013000
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40010800 	.word	0x40010800

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <NMI_Handler+0x4>

08000700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <MemManage_Handler+0x4>

08000710 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <UsageFault_Handler+0x4>

08000720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000748:	f000 f882 	bl	8000850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000754:	4803      	ldr	r0, [pc, #12]	@ (8000764 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 8000756:	f000 f9b6 	bl	8000ac6 <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800075a:	4803      	ldr	r0, [pc, #12]	@ (8000768 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 800075c:	f001 f8ea 	bl	8001934 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000198 	.word	0x20000198
 8000768:	20000f38 	.word	0x20000f38

0800076c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr

08000778 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000778:	f7ff fff8 	bl	800076c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800077c:	480b      	ldr	r0, [pc, #44]	@ (80007ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800077e:	490c      	ldr	r1, [pc, #48]	@ (80007b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000780:	4a0c      	ldr	r2, [pc, #48]	@ (80007b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a09      	ldr	r2, [pc, #36]	@ (80007b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000794:	4c09      	ldr	r4, [pc, #36]	@ (80007bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007a2:	f007 fd91 	bl	80082c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a6:	f7ff fcd1 	bl	800014c <main>
  bx lr
 80007aa:	4770      	bx	lr
  ldr r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b0:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80007b4:	080083a4 	.word	0x080083a4
  ldr r2, =_sbss
 80007b8:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80007bc:	20001430 	.word	0x20001430

080007c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC1_2_IRQHandler>
	...

080007c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c8:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <HAL_Init+0x28>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a07      	ldr	r2, [pc, #28]	@ (80007ec <HAL_Init+0x28>)
 80007ce:	f043 0310 	orr.w	r3, r3, #16
 80007d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d4:	2003      	movs	r0, #3
 80007d6:	f000 fc6f 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007da:	200f      	movs	r0, #15
 80007dc:	f000 f808 	bl	80007f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e0:	f7ff fe68 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40022000 	.word	0x40022000

080007f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <HAL_InitTick+0x54>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <HAL_InitTick+0x58>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000806:	fbb3 f3f1 	udiv	r3, r3, r1
 800080a:	fbb2 f3f3 	udiv	r3, r2, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fc87 	bl	8001122 <HAL_SYSTICK_Config>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e00e      	b.n	800083c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b0f      	cmp	r3, #15
 8000822:	d80a      	bhi.n	800083a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000824:	2200      	movs	r2, #0
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f000 fc4f 	bl	80010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000830:	4a06      	ldr	r2, [pc, #24]	@ (800084c <HAL_InitTick+0x5c>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000836:	2300      	movs	r3, #0
 8000838:	e000      	b.n	800083c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
}
 800083c:	4618      	mov	r0, r3
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000000 	.word	0x20000000
 8000848:	20000008 	.word	0x20000008
 800084c:	20000004 	.word	0x20000004

08000850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000854:	4b05      	ldr	r3, [pc, #20]	@ (800086c <HAL_IncTick+0x1c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <HAL_IncTick+0x20>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4413      	add	r3, r2
 8000860:	4a03      	ldr	r2, [pc, #12]	@ (8000870 <HAL_IncTick+0x20>)
 8000862:	6013      	str	r3, [r2, #0]
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	20000008 	.word	0x20000008
 8000870:	2000026c 	.word	0x2000026c

08000874 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return uwTick;
 8000878:	4b02      	ldr	r3, [pc, #8]	@ (8000884 <HAL_GetTick+0x10>)
 800087a:	681b      	ldr	r3, [r3, #0]
}
 800087c:	4618      	mov	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	2000026c 	.word	0x2000026c

08000888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000890:	f7ff fff0 	bl	8000874 <HAL_GetTick>
 8000894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a0:	d005      	beq.n	80008ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008a2:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <HAL_Delay+0x44>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4413      	add	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ae:	bf00      	nop
 80008b0:	f7ff ffe0 	bl	8000874 <HAL_GetTick>
 80008b4:	4602      	mov	r2, r0
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d8f7      	bhi.n	80008b0 <HAL_Delay+0x28>
  {
  }
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000008 	.word	0x20000008

080008d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d101      	bne.n	80008e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e0ed      	b.n	8000abe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d102      	bne.n	80008f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff fe12 	bl	8000518 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f042 0201 	orr.w	r2, r2, #1
 8000902:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000904:	f7ff ffb6 	bl	8000874 <HAL_GetTick>
 8000908:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800090a:	e012      	b.n	8000932 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800090c:	f7ff ffb2 	bl	8000874 <HAL_GetTick>
 8000910:	4602      	mov	r2, r0
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	2b0a      	cmp	r3, #10
 8000918:	d90b      	bls.n	8000932 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800091e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2205      	movs	r2, #5
 800092a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	e0c5      	b.n	8000abe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	2b00      	cmp	r3, #0
 800093e:	d0e5      	beq.n	800090c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f022 0202 	bic.w	r2, r2, #2
 800094e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000950:	f7ff ff90 	bl	8000874 <HAL_GetTick>
 8000954:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000956:	e012      	b.n	800097e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000958:	f7ff ff8c 	bl	8000874 <HAL_GetTick>
 800095c:	4602      	mov	r2, r0
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	2b0a      	cmp	r3, #10
 8000964:	d90b      	bls.n	800097e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800096a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2205      	movs	r2, #5
 8000976:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e09f      	b.n	8000abe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1e5      	bne.n	8000958 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	7e1b      	ldrb	r3, [r3, #24]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d108      	bne.n	80009a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	e007      	b.n	80009b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80009b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	7e5b      	ldrb	r3, [r3, #25]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d108      	bne.n	80009d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	e007      	b.n	80009e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80009de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7e9b      	ldrb	r3, [r3, #26]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d108      	bne.n	80009fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f042 0220 	orr.w	r2, r2, #32
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	e007      	b.n	8000a0a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f022 0220 	bic.w	r2, r2, #32
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	7edb      	ldrb	r3, [r3, #27]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d108      	bne.n	8000a24 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f022 0210 	bic.w	r2, r2, #16
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	e007      	b.n	8000a34 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f042 0210 	orr.w	r2, r2, #16
 8000a32:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7f1b      	ldrb	r3, [r3, #28]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d108      	bne.n	8000a4e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f042 0208 	orr.w	r2, r2, #8
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	e007      	b.n	8000a5e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f022 0208 	bic.w	r2, r2, #8
 8000a5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	7f5b      	ldrb	r3, [r3, #29]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d108      	bne.n	8000a78 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f042 0204 	orr.w	r2, r2, #4
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	e007      	b.n	8000a88 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f022 0204 	bic.w	r2, r2, #4
 8000a86:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	689a      	ldr	r2, [r3, #8]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	431a      	orrs	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	691b      	ldr	r3, [r3, #16]
 8000a96:	431a      	orrs	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	ea42 0103 	orr.w	r1, r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	1e5a      	subs	r2, r3, #1
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b08a      	sub	sp, #40	@ 0x28
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d07c      	beq.n	8000c06 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d023      	beq.n	8000b5e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d003      	beq.n	8000b30 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f000 f983 	bl	8000e34 <HAL_CAN_TxMailbox0CompleteCallback>
 8000b2e:	e016      	b.n	8000b5e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d004      	beq.n	8000b44 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b42:	e00c      	b.n	8000b5e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d004      	beq.n	8000b58 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b56:	e002      	b.n	8000b5e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 f986 	bl	8000e6a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d024      	beq.n	8000bb2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 f962 	bl	8000e46 <HAL_CAN_TxMailbox1CompleteCallback>
 8000b82:	e016      	b.n	8000bb2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d004      	beq.n	8000b98 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b96:	e00c      	b.n	8000bb2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d004      	beq.n	8000bac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000baa:	e002      	b.n	8000bb2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f000 f965 	bl	8000e7c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d024      	beq.n	8000c06 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000bc4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d003      	beq.n	8000bd8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f000 f941 	bl	8000e58 <HAL_CAN_TxMailbox2CompleteCallback>
 8000bd6:	e016      	b.n	8000c06 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d004      	beq.n	8000bec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bea:	e00c      	b.n	8000c06 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d004      	beq.n	8000c00 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bfe:	e002      	b.n	8000c06 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f000 f944 	bl	8000e8e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000c06:	6a3b      	ldr	r3, [r7, #32]
 8000c08:	f003 0308 	and.w	r3, r3, #8
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d00c      	beq.n	8000c2a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	f003 0310 	and.w	r3, r3, #16
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d007      	beq.n	8000c2a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2210      	movs	r2, #16
 8000c28:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000c2a:	6a3b      	ldr	r3, [r7, #32]
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d00b      	beq.n	8000c4c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d006      	beq.n	8000c4c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2208      	movs	r2, #8
 8000c44:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 f933 	bl	8000eb2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d009      	beq.n	8000c6a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 f91b 	bl	8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000c6a:	6a3b      	ldr	r3, [r7, #32]
 8000c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00c      	beq.n	8000c8e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d007      	beq.n	8000c8e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2210      	movs	r2, #16
 8000c8c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000c8e:	6a3b      	ldr	r3, [r7, #32]
 8000c90:	f003 0320 	and.w	r3, r3, #32
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d00b      	beq.n	8000cb0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d006      	beq.n	8000cb0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 f913 	bl	8000ed6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000cb0:	6a3b      	ldr	r3, [r7, #32]
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d009      	beq.n	8000cce <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	691b      	ldr	r3, [r3, #16]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d002      	beq.n	8000cce <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 f8fb 	bl	8000ec4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000cce:	6a3b      	ldr	r3, [r7, #32]
 8000cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d00b      	beq.n	8000cf0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f003 0310 	and.w	r3, r3, #16
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d006      	beq.n	8000cf0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2210      	movs	r2, #16
 8000ce8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f000 f8fc 	bl	8000ee8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
 8000cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00b      	beq.n	8000d12 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	f003 0308 	and.w	r3, r3, #8
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d006      	beq.n	8000d12 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2208      	movs	r2, #8
 8000d0a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f000 f8f4 	bl	8000efa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000d12:	6a3b      	ldr	r3, [r7, #32]
 8000d14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d07b      	beq.n	8000e14 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d072      	beq.n	8000e0c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000d26:	6a3b      	ldr	r3, [r7, #32]
 8000d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d008      	beq.n	8000d42 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d42:	6a3b      	ldr	r3, [r7, #32]
 8000d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d008      	beq.n	8000d5e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d5e:	6a3b      	ldr	r3, [r7, #32]
 8000d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d008      	beq.n	8000d7a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d7a:	6a3b      	ldr	r3, [r7, #32]
 8000d7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d043      	beq.n	8000e0c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d03e      	beq.n	8000e0c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000d94:	2b60      	cmp	r3, #96	@ 0x60
 8000d96:	d02b      	beq.n	8000df0 <HAL_CAN_IRQHandler+0x32a>
 8000d98:	2b60      	cmp	r3, #96	@ 0x60
 8000d9a:	d82e      	bhi.n	8000dfa <HAL_CAN_IRQHandler+0x334>
 8000d9c:	2b50      	cmp	r3, #80	@ 0x50
 8000d9e:	d022      	beq.n	8000de6 <HAL_CAN_IRQHandler+0x320>
 8000da0:	2b50      	cmp	r3, #80	@ 0x50
 8000da2:	d82a      	bhi.n	8000dfa <HAL_CAN_IRQHandler+0x334>
 8000da4:	2b40      	cmp	r3, #64	@ 0x40
 8000da6:	d019      	beq.n	8000ddc <HAL_CAN_IRQHandler+0x316>
 8000da8:	2b40      	cmp	r3, #64	@ 0x40
 8000daa:	d826      	bhi.n	8000dfa <HAL_CAN_IRQHandler+0x334>
 8000dac:	2b30      	cmp	r3, #48	@ 0x30
 8000dae:	d010      	beq.n	8000dd2 <HAL_CAN_IRQHandler+0x30c>
 8000db0:	2b30      	cmp	r3, #48	@ 0x30
 8000db2:	d822      	bhi.n	8000dfa <HAL_CAN_IRQHandler+0x334>
 8000db4:	2b10      	cmp	r3, #16
 8000db6:	d002      	beq.n	8000dbe <HAL_CAN_IRQHandler+0x2f8>
 8000db8:	2b20      	cmp	r3, #32
 8000dba:	d005      	beq.n	8000dc8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000dbc:	e01d      	b.n	8000dfa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000dc6:	e019      	b.n	8000dfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dca:	f043 0310 	orr.w	r3, r3, #16
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000dd0:	e014      	b.n	8000dfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd4:	f043 0320 	orr.w	r3, r3, #32
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000dda:	e00f      	b.n	8000dfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000de4:	e00a      	b.n	8000dfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000dee:	e005      	b.n	8000dfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000df8:	e000      	b.n	8000dfc <HAL_CAN_IRQHandler+0x336>
            break;
 8000dfa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	699a      	ldr	r2, [r3, #24]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8000e0a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2204      	movs	r2, #4
 8000e12:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d008      	beq.n	8000e2c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e20:	431a      	orrs	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 f870 	bl	8000f0c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	@ 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr

08000e6a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr

08000e8e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr

08000efa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
	...

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	db0b      	blt.n	8000fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	4906      	ldr	r1, [pc, #24]	@ (8000fb8 <__NVIC_EnableIRQ+0x34>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	@ (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	@ (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	@ 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
         );
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	@ 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ff90 	bl	8000fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff2d 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e0:	f7ff ff42 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff90 	bl	8001010 <NVIC_EncodePriority>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5f 	bl	8000fbc <__NVIC_SetPriority>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff35 	bl	8000f84 <__NVIC_EnableIRQ>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffa2 	bl	8001074 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b08b      	sub	sp, #44	@ 0x2c
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114e:	e169      	b.n	8001424 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001150:	2201      	movs	r2, #1
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	429a      	cmp	r2, r3
 800116a:	f040 8158 	bne.w	800141e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4a9a      	ldr	r2, [pc, #616]	@ (80013dc <HAL_GPIO_Init+0x2a0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d05e      	beq.n	8001236 <HAL_GPIO_Init+0xfa>
 8001178:	4a98      	ldr	r2, [pc, #608]	@ (80013dc <HAL_GPIO_Init+0x2a0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d875      	bhi.n	800126a <HAL_GPIO_Init+0x12e>
 800117e:	4a98      	ldr	r2, [pc, #608]	@ (80013e0 <HAL_GPIO_Init+0x2a4>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d058      	beq.n	8001236 <HAL_GPIO_Init+0xfa>
 8001184:	4a96      	ldr	r2, [pc, #600]	@ (80013e0 <HAL_GPIO_Init+0x2a4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d86f      	bhi.n	800126a <HAL_GPIO_Init+0x12e>
 800118a:	4a96      	ldr	r2, [pc, #600]	@ (80013e4 <HAL_GPIO_Init+0x2a8>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d052      	beq.n	8001236 <HAL_GPIO_Init+0xfa>
 8001190:	4a94      	ldr	r2, [pc, #592]	@ (80013e4 <HAL_GPIO_Init+0x2a8>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d869      	bhi.n	800126a <HAL_GPIO_Init+0x12e>
 8001196:	4a94      	ldr	r2, [pc, #592]	@ (80013e8 <HAL_GPIO_Init+0x2ac>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d04c      	beq.n	8001236 <HAL_GPIO_Init+0xfa>
 800119c:	4a92      	ldr	r2, [pc, #584]	@ (80013e8 <HAL_GPIO_Init+0x2ac>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d863      	bhi.n	800126a <HAL_GPIO_Init+0x12e>
 80011a2:	4a92      	ldr	r2, [pc, #584]	@ (80013ec <HAL_GPIO_Init+0x2b0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d046      	beq.n	8001236 <HAL_GPIO_Init+0xfa>
 80011a8:	4a90      	ldr	r2, [pc, #576]	@ (80013ec <HAL_GPIO_Init+0x2b0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d85d      	bhi.n	800126a <HAL_GPIO_Init+0x12e>
 80011ae:	2b12      	cmp	r3, #18
 80011b0:	d82a      	bhi.n	8001208 <HAL_GPIO_Init+0xcc>
 80011b2:	2b12      	cmp	r3, #18
 80011b4:	d859      	bhi.n	800126a <HAL_GPIO_Init+0x12e>
 80011b6:	a201      	add	r2, pc, #4	@ (adr r2, 80011bc <HAL_GPIO_Init+0x80>)
 80011b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011bc:	08001237 	.word	0x08001237
 80011c0:	08001211 	.word	0x08001211
 80011c4:	08001223 	.word	0x08001223
 80011c8:	08001265 	.word	0x08001265
 80011cc:	0800126b 	.word	0x0800126b
 80011d0:	0800126b 	.word	0x0800126b
 80011d4:	0800126b 	.word	0x0800126b
 80011d8:	0800126b 	.word	0x0800126b
 80011dc:	0800126b 	.word	0x0800126b
 80011e0:	0800126b 	.word	0x0800126b
 80011e4:	0800126b 	.word	0x0800126b
 80011e8:	0800126b 	.word	0x0800126b
 80011ec:	0800126b 	.word	0x0800126b
 80011f0:	0800126b 	.word	0x0800126b
 80011f4:	0800126b 	.word	0x0800126b
 80011f8:	0800126b 	.word	0x0800126b
 80011fc:	0800126b 	.word	0x0800126b
 8001200:	08001219 	.word	0x08001219
 8001204:	0800122d 	.word	0x0800122d
 8001208:	4a79      	ldr	r2, [pc, #484]	@ (80013f0 <HAL_GPIO_Init+0x2b4>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d013      	beq.n	8001236 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800120e:	e02c      	b.n	800126a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	623b      	str	r3, [r7, #32]
          break;
 8001216:	e029      	b.n	800126c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	3304      	adds	r3, #4
 800121e:	623b      	str	r3, [r7, #32]
          break;
 8001220:	e024      	b.n	800126c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	3308      	adds	r3, #8
 8001228:	623b      	str	r3, [r7, #32]
          break;
 800122a:	e01f      	b.n	800126c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	330c      	adds	r3, #12
 8001232:	623b      	str	r3, [r7, #32]
          break;
 8001234:	e01a      	b.n	800126c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d102      	bne.n	8001244 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800123e:	2304      	movs	r3, #4
 8001240:	623b      	str	r3, [r7, #32]
          break;
 8001242:	e013      	b.n	800126c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d105      	bne.n	8001258 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800124c:	2308      	movs	r3, #8
 800124e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69fa      	ldr	r2, [r7, #28]
 8001254:	611a      	str	r2, [r3, #16]
          break;
 8001256:	e009      	b.n	800126c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001258:	2308      	movs	r3, #8
 800125a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69fa      	ldr	r2, [r7, #28]
 8001260:	615a      	str	r2, [r3, #20]
          break;
 8001262:	e003      	b.n	800126c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
          break;
 8001268:	e000      	b.n	800126c <HAL_GPIO_Init+0x130>
          break;
 800126a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	2bff      	cmp	r3, #255	@ 0xff
 8001270:	d801      	bhi.n	8001276 <HAL_GPIO_Init+0x13a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	e001      	b.n	800127a <HAL_GPIO_Init+0x13e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3304      	adds	r3, #4
 800127a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2bff      	cmp	r3, #255	@ 0xff
 8001280:	d802      	bhi.n	8001288 <HAL_GPIO_Init+0x14c>
 8001282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	e002      	b.n	800128e <HAL_GPIO_Init+0x152>
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128a:	3b08      	subs	r3, #8
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	210f      	movs	r1, #15
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	401a      	ands	r2, r3
 80012a0:	6a39      	ldr	r1, [r7, #32]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	431a      	orrs	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 80b1 	beq.w	800141e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012bc:	4b4d      	ldr	r3, [pc, #308]	@ (80013f4 <HAL_GPIO_Init+0x2b8>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a4c      	ldr	r2, [pc, #304]	@ (80013f4 <HAL_GPIO_Init+0x2b8>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b4a      	ldr	r3, [pc, #296]	@ (80013f4 <HAL_GPIO_Init+0x2b8>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012d4:	4a48      	ldr	r2, [pc, #288]	@ (80013f8 <HAL_GPIO_Init+0x2bc>)
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	3302      	adds	r3, #2
 80012dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	220f      	movs	r2, #15
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	4013      	ands	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a40      	ldr	r2, [pc, #256]	@ (80013fc <HAL_GPIO_Init+0x2c0>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d013      	beq.n	8001328 <HAL_GPIO_Init+0x1ec>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a3f      	ldr	r2, [pc, #252]	@ (8001400 <HAL_GPIO_Init+0x2c4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d00d      	beq.n	8001324 <HAL_GPIO_Init+0x1e8>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a3e      	ldr	r2, [pc, #248]	@ (8001404 <HAL_GPIO_Init+0x2c8>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d007      	beq.n	8001320 <HAL_GPIO_Init+0x1e4>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a3d      	ldr	r2, [pc, #244]	@ (8001408 <HAL_GPIO_Init+0x2cc>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d101      	bne.n	800131c <HAL_GPIO_Init+0x1e0>
 8001318:	2303      	movs	r3, #3
 800131a:	e006      	b.n	800132a <HAL_GPIO_Init+0x1ee>
 800131c:	2304      	movs	r3, #4
 800131e:	e004      	b.n	800132a <HAL_GPIO_Init+0x1ee>
 8001320:	2302      	movs	r3, #2
 8001322:	e002      	b.n	800132a <HAL_GPIO_Init+0x1ee>
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <HAL_GPIO_Init+0x1ee>
 8001328:	2300      	movs	r3, #0
 800132a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800132c:	f002 0203 	and.w	r2, r2, #3
 8001330:	0092      	lsls	r2, r2, #2
 8001332:	4093      	lsls	r3, r2
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	4313      	orrs	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800133a:	492f      	ldr	r1, [pc, #188]	@ (80013f8 <HAL_GPIO_Init+0x2bc>)
 800133c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	3302      	adds	r3, #2
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d006      	beq.n	8001362 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001354:	4b2d      	ldr	r3, [pc, #180]	@ (800140c <HAL_GPIO_Init+0x2d0>)
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	492c      	ldr	r1, [pc, #176]	@ (800140c <HAL_GPIO_Init+0x2d0>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	608b      	str	r3, [r1, #8]
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001362:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <HAL_GPIO_Init+0x2d0>)
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	43db      	mvns	r3, r3
 800136a:	4928      	ldr	r1, [pc, #160]	@ (800140c <HAL_GPIO_Init+0x2d0>)
 800136c:	4013      	ands	r3, r2
 800136e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d006      	beq.n	800138a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800137c:	4b23      	ldr	r3, [pc, #140]	@ (800140c <HAL_GPIO_Init+0x2d0>)
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	4922      	ldr	r1, [pc, #136]	@ (800140c <HAL_GPIO_Init+0x2d0>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	60cb      	str	r3, [r1, #12]
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800138a:	4b20      	ldr	r3, [pc, #128]	@ (800140c <HAL_GPIO_Init+0x2d0>)
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	43db      	mvns	r3, r3
 8001392:	491e      	ldr	r1, [pc, #120]	@ (800140c <HAL_GPIO_Init+0x2d0>)
 8001394:	4013      	ands	r3, r2
 8001396:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013a4:	4b19      	ldr	r3, [pc, #100]	@ (800140c <HAL_GPIO_Init+0x2d0>)
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	4918      	ldr	r1, [pc, #96]	@ (800140c <HAL_GPIO_Init+0x2d0>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013b2:	4b16      	ldr	r3, [pc, #88]	@ (800140c <HAL_GPIO_Init+0x2d0>)
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	4914      	ldr	r1, [pc, #80]	@ (800140c <HAL_GPIO_Init+0x2d0>)
 80013bc:	4013      	ands	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d021      	beq.n	8001410 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013cc:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <HAL_GPIO_Init+0x2d0>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	490e      	ldr	r1, [pc, #56]	@ (800140c <HAL_GPIO_Init+0x2d0>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]
 80013d8:	e021      	b.n	800141e <HAL_GPIO_Init+0x2e2>
 80013da:	bf00      	nop
 80013dc:	10320000 	.word	0x10320000
 80013e0:	10310000 	.word	0x10310000
 80013e4:	10220000 	.word	0x10220000
 80013e8:	10210000 	.word	0x10210000
 80013ec:	10120000 	.word	0x10120000
 80013f0:	10110000 	.word	0x10110000
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010000 	.word	0x40010000
 80013fc:	40010800 	.word	0x40010800
 8001400:	40010c00 	.word	0x40010c00
 8001404:	40011000 	.word	0x40011000
 8001408:	40011400 	.word	0x40011400
 800140c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001410:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <HAL_GPIO_Init+0x304>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	43db      	mvns	r3, r3
 8001418:	4909      	ldr	r1, [pc, #36]	@ (8001440 <HAL_GPIO_Init+0x304>)
 800141a:	4013      	ands	r3, r2
 800141c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800141e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001420:	3301      	adds	r3, #1
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	fa22 f303 	lsr.w	r3, r2, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	f47f ae8e 	bne.w	8001150 <HAL_GPIO_Init+0x14>
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	372c      	adds	r7, #44	@ 0x2c
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	40010400 	.word	0x40010400

08001444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001460:	e003      	b.n	800146a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	611a      	str	r2, [r3, #16]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e12b      	b.n	80016de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d106      	bne.n	80014a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff f8a4 	bl	80005e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2224      	movs	r2, #36	@ 0x24
 80014a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0201 	bic.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014d8:	f002 fa3a 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 80014dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4a81      	ldr	r2, [pc, #516]	@ (80016e8 <HAL_I2C_Init+0x274>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d807      	bhi.n	80014f8 <HAL_I2C_Init+0x84>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4a80      	ldr	r2, [pc, #512]	@ (80016ec <HAL_I2C_Init+0x278>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	bf94      	ite	ls
 80014f0:	2301      	movls	r3, #1
 80014f2:	2300      	movhi	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	e006      	b.n	8001506 <HAL_I2C_Init+0x92>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4a7d      	ldr	r2, [pc, #500]	@ (80016f0 <HAL_I2C_Init+0x27c>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	bf94      	ite	ls
 8001500:	2301      	movls	r3, #1
 8001502:	2300      	movhi	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e0e7      	b.n	80016de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4a78      	ldr	r2, [pc, #480]	@ (80016f4 <HAL_I2C_Init+0x280>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	0c9b      	lsrs	r3, r3, #18
 8001518:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	430a      	orrs	r2, r1
 800152c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4a6a      	ldr	r2, [pc, #424]	@ (80016e8 <HAL_I2C_Init+0x274>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d802      	bhi.n	8001548 <HAL_I2C_Init+0xd4>
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	3301      	adds	r3, #1
 8001546:	e009      	b.n	800155c <HAL_I2C_Init+0xe8>
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	4a69      	ldr	r2, [pc, #420]	@ (80016f8 <HAL_I2C_Init+0x284>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	099b      	lsrs	r3, r3, #6
 800155a:	3301      	adds	r3, #1
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	430b      	orrs	r3, r1
 8001562:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800156e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	495c      	ldr	r1, [pc, #368]	@ (80016e8 <HAL_I2C_Init+0x274>)
 8001578:	428b      	cmp	r3, r1
 800157a:	d819      	bhi.n	80015b0 <HAL_I2C_Init+0x13c>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	1e59      	subs	r1, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fbb1 f3f3 	udiv	r3, r1, r3
 800158a:	1c59      	adds	r1, r3, #1
 800158c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001590:	400b      	ands	r3, r1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00a      	beq.n	80015ac <HAL_I2C_Init+0x138>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1e59      	subs	r1, r3, #1
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015a4:	3301      	adds	r3, #1
 80015a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015aa:	e051      	b.n	8001650 <HAL_I2C_Init+0x1dc>
 80015ac:	2304      	movs	r3, #4
 80015ae:	e04f      	b.n	8001650 <HAL_I2C_Init+0x1dc>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d111      	bne.n	80015dc <HAL_I2C_Init+0x168>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	1e58      	subs	r0, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6859      	ldr	r1, [r3, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	440b      	add	r3, r1
 80015c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ca:	3301      	adds	r3, #1
 80015cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf0c      	ite	eq
 80015d4:	2301      	moveq	r3, #1
 80015d6:	2300      	movne	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	e012      	b.n	8001602 <HAL_I2C_Init+0x18e>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	1e58      	subs	r0, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6859      	ldr	r1, [r3, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	0099      	lsls	r1, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80015f2:	3301      	adds	r3, #1
 80015f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_I2C_Init+0x196>
 8001606:	2301      	movs	r3, #1
 8001608:	e022      	b.n	8001650 <HAL_I2C_Init+0x1dc>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10e      	bne.n	8001630 <HAL_I2C_Init+0x1bc>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1e58      	subs	r0, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6859      	ldr	r1, [r3, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	440b      	add	r3, r1
 8001620:	fbb0 f3f3 	udiv	r3, r0, r3
 8001624:	3301      	adds	r3, #1
 8001626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800162a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800162e:	e00f      	b.n	8001650 <HAL_I2C_Init+0x1dc>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1e58      	subs	r0, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6859      	ldr	r1, [r3, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	0099      	lsls	r1, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	fbb0 f3f3 	udiv	r3, r0, r3
 8001646:	3301      	adds	r3, #1
 8001648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	6809      	ldr	r1, [r1, #0]
 8001654:	4313      	orrs	r3, r2
 8001656:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69da      	ldr	r2, [r3, #28]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800167e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6911      	ldr	r1, [r2, #16]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68d2      	ldr	r2, [r2, #12]
 800168a:	4311      	orrs	r1, r2
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	430b      	orrs	r3, r1
 8001692:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0201 	orr.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2220      	movs	r2, #32
 80016ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	000186a0 	.word	0x000186a0
 80016ec:	001e847f 	.word	0x001e847f
 80016f0:	003d08ff 	.word	0x003d08ff
 80016f4:	431bde83 	.word	0x431bde83
 80016f8:	10624dd3 	.word	0x10624dd3

080016fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e0e8      	b.n	80018e0 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d106      	bne.n	8001728 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f006 fb1e 	bl	8007d64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2203      	movs	r2, #3
 800172c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f002 fa97 	bl	8003c6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3304      	adds	r3, #4
 8001748:	cb0e      	ldmia	r3, {r1, r2, r3}
 800174a:	f002 fa6d 	bl	8003c28 <USB_CoreInit>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0bf      	b.n	80018e0 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f002 fa9b 	bl	8003ca2 <USB_SetCurrentMode>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2202      	movs	r2, #2
 8001776:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e0b0      	b.n	80018e0 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800177e:	2300      	movs	r3, #0
 8001780:	73fb      	strb	r3, [r7, #15]
 8001782:	e03e      	b.n	8001802 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001784:	7bfa      	ldrb	r2, [r7, #15]
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	3311      	adds	r3, #17
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001798:	7bfa      	ldrb	r2, [r7, #15]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	3310      	adds	r3, #16
 80017a8:	7bfa      	ldrb	r2, [r7, #15]
 80017aa:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017ac:	7bfa      	ldrb	r2, [r7, #15]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	3313      	adds	r3, #19
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	440b      	add	r3, r1
 80017ce:	3320      	adds	r3, #32
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	3324      	adds	r3, #36	@ 0x24
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	3301      	adds	r3, #1
 8001800:	73fb      	strb	r3, [r7, #15]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	791b      	ldrb	r3, [r3, #4]
 8001806:	7bfa      	ldrb	r2, [r7, #15]
 8001808:	429a      	cmp	r2, r3
 800180a:	d3bb      	bcc.n	8001784 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	e044      	b.n	800189c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001812:	7bfa      	ldrb	r2, [r7, #15]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	440b      	add	r3, r1
 8001836:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800183e:	7bfa      	ldrb	r2, [r7, #15]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	440b      	add	r3, r1
 800184c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800186a:	7bfa      	ldrb	r2, [r7, #15]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	440b      	add	r3, r1
 8001878:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001880:	7bfa      	ldrb	r2, [r7, #15]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	440b      	add	r3, r1
 800188e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	3301      	adds	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	791b      	ldrb	r3, [r3, #4]
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d3b5      	bcc.n	8001812 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3304      	adds	r3, #4
 80018ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018b0:	f002 fa03 	bl	8003cba <USB_DevInit>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2202      	movs	r2, #2
 80018be:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00c      	b.n	80018e0 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f004 fc82 	bl	80061e2 <USB_DevDisconnect>

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_PCD_Start+0x16>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e016      	b.n	800192c <HAL_PCD_Start+0x44>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f002 f999 	bl	8003c42 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001910:	2101      	movs	r1, #1
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f006 fc99 	bl	800824a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f004 fc56 	bl	80061ce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f004 fc58 	bl	80061f6 <USB_ReadInterrupts>
 8001946:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 fb1a 	bl	8001f8c <PCD_EP_ISR_Handler>

    return;
 8001958:	e119      	b.n	8001b8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001960:	2b00      	cmp	r3, #0
 8001962:	d013      	beq.n	800198c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800196c:	b29a      	uxth	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001976:	b292      	uxth	r2, r2
 8001978:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f006 fa6c 	bl	8007e5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001982:	2100      	movs	r1, #0
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f905 	bl	8001b94 <HAL_PCD_SetAddress>

    return;
 800198a:	e100      	b.n	8001b8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00c      	beq.n	80019b0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800199e:	b29a      	uxth	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80019a8:	b292      	uxth	r2, r2
 80019aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80019ae:	e0ee      	b.n	8001b8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00c      	beq.n	80019d4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019cc:	b292      	uxth	r2, r2
 80019ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80019d2:	e0dc      	b.n	8001b8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d027      	beq.n	8001a2e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0204 	bic.w	r2, r2, #4
 80019f0:	b292      	uxth	r2, r2
 80019f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0208 	bic.w	r2, r2, #8
 8001a08:	b292      	uxth	r2, r2
 8001a0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f006 fa5c 	bl	8007ecc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a26:	b292      	uxth	r2, r2
 8001a28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a2c:	e0af      	b.n	8001b8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8083 	beq.w	8001b40 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	77fb      	strb	r3, [r7, #31]
 8001a3e:	e010      	b.n	8001a62 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	7ffb      	ldrb	r3, [r7, #31]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	441a      	add	r2, r3
 8001a4c:	7ffb      	ldrb	r3, [r7, #31]
 8001a4e:	8812      	ldrh	r2, [r2, #0]
 8001a50:	b292      	uxth	r2, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	3320      	adds	r3, #32
 8001a56:	443b      	add	r3, r7
 8001a58:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001a5c:	7ffb      	ldrb	r3, [r7, #31]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	77fb      	strb	r3, [r7, #31]
 8001a62:	7ffb      	ldrb	r3, [r7, #31]
 8001a64:	2b07      	cmp	r3, #7
 8001a66:	d9eb      	bls.n	8001a40 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	b292      	uxth	r2, r2
 8001a7c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0201 	bic.w	r2, r2, #1
 8001a92:	b292      	uxth	r2, r2
 8001a94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001a98:	bf00      	nop
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f6      	beq.n	8001a9a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001abe:	b292      	uxth	r2, r2
 8001ac0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	77fb      	strb	r3, [r7, #31]
 8001ac8:	e00f      	b.n	8001aea <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001aca:	7ffb      	ldrb	r3, [r7, #31]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	7ffa      	ldrb	r2, [r7, #31]
 8001ad4:	0092      	lsls	r2, r2, #2
 8001ad6:	440a      	add	r2, r1
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	3320      	adds	r3, #32
 8001adc:	443b      	add	r3, r7
 8001ade:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001ae2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001ae4:	7ffb      	ldrb	r3, [r7, #31]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	77fb      	strb	r3, [r7, #31]
 8001aea:	7ffb      	ldrb	r3, [r7, #31]
 8001aec:	2b07      	cmp	r3, #7
 8001aee:	d9ec      	bls.n	8001aca <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0208 	orr.w	r2, r2, #8
 8001b02:	b292      	uxth	r2, r2
 8001b04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b1a:	b292      	uxth	r2, r2
 8001b1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0204 	orr.w	r2, r2, #4
 8001b32:	b292      	uxth	r2, r2
 8001b34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f006 f9ad 	bl	8007e98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b3e:	e026      	b.n	8001b8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00f      	beq.n	8001b6a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b5c:	b292      	uxth	r2, r2
 8001b5e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f006 f96b 	bl	8007e3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b68:	e011      	b.n	8001b8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00c      	beq.n	8001b8e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b86:	b292      	uxth	r2, r2
 8001b88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b8c:	bf00      	nop
  }
}
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_PCD_SetAddress+0x1a>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e012      	b.n	8001bd4 <HAL_PCD_SetAddress+0x40>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	78fa      	ldrb	r2, [r7, #3]
 8001bba:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f004 faef 	bl	80061a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	4608      	mov	r0, r1
 8001be6:	4611      	mov	r1, r2
 8001be8:	461a      	mov	r2, r3
 8001bea:	4603      	mov	r3, r0
 8001bec:	70fb      	strb	r3, [r7, #3]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	803b      	strh	r3, [r7, #0]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	da0e      	bge.n	8001c20 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	f003 0207 	and.w	r2, r3, #7
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	3310      	adds	r3, #16
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	705a      	strb	r2, [r3, #1]
 8001c1e:	e00e      	b.n	8001c3e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	f003 0207 	and.w	r2, r3, #7
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c4a:	883a      	ldrh	r2, [r7, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	78ba      	ldrb	r2, [r7, #2]
 8001c54:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c56:	78bb      	ldrb	r3, [r7, #2]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d102      	bne.n	8001c62 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_PCD_EP_Open+0x94>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e00e      	b.n	8001c8e <HAL_PCD_EP_Open+0xb2>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68f9      	ldr	r1, [r7, #12]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 f838 	bl	8003cf4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001c8c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ca2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	da0e      	bge.n	8001cc8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	f003 0207 	and.w	r2, r3, #7
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	3310      	adds	r3, #16
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	705a      	strb	r2, [r3, #1]
 8001cc6:	e00e      	b.n	8001ce6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	f003 0207 	and.w	r2, r3, #7
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_PCD_EP_Close+0x6a>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e00e      	b.n	8001d1e <HAL_PCD_EP_Close+0x88>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68f9      	ldr	r1, [r7, #12]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f002 fbb0 	bl	8004474 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	460b      	mov	r3, r1
 8001d34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d36:	7afb      	ldrb	r3, [r7, #11]
 8001d38:	f003 0207 	and.w	r2, r3, #7
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2200      	movs	r2, #0
 8001d64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d66:	7afb      	ldrb	r3, [r7, #11]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6979      	ldr	r1, [r7, #20]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f002 fd67 	bl	800484c <USB_EPStartXfer>

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	f003 0207 	and.w	r2, r3, #7
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	440b      	add	r3, r1
 8001da6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc6:	7afb      	ldrb	r3, [r7, #11]
 8001dc8:	f003 0207 	and.w	r2, r3, #7
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	3310      	adds	r3, #16
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	4413      	add	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e02:	7afb      	ldrb	r3, [r7, #11]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6979      	ldr	r1, [r7, #20]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f002 fd19 	bl	800484c <USB_EPStartXfer>

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	7912      	ldrb	r2, [r2, #4]
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e04c      	b.n	8001edc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	da0e      	bge.n	8001e68 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	f003 0207 	and.w	r2, r3, #7
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	3310      	adds	r3, #16
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	705a      	strb	r2, [r3, #1]
 8001e66:	e00c      	b.n	8001e82 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2201      	movs	r2, #1
 8001e86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_PCD_EP_SetStall+0x7e>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e01c      	b.n	8001edc <HAL_PCD_EP_SetStall+0xb8>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68f9      	ldr	r1, [r7, #12]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f004 f87c 	bl	8005fae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d108      	bne.n	8001ed2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4610      	mov	r0, r2
 8001ece:	f004 f9a1 	bl	8006214 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	7912      	ldrb	r2, [r2, #4]
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e040      	b.n	8001f84 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	da0e      	bge.n	8001f28 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	f003 0207 	and.w	r2, r3, #7
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	3310      	adds	r3, #16
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2201      	movs	r2, #1
 8001f24:	705a      	strb	r2, [r3, #1]
 8001f26:	e00e      	b.n	8001f46 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	f003 0207 	and.w	r2, r3, #7
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_PCD_EP_ClrStall+0x82>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e00e      	b.n	8001f84 <HAL_PCD_EP_ClrStall+0xa0>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68f9      	ldr	r1, [r7, #12]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f004 f86a 	bl	800604e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b096      	sub	sp, #88	@ 0x58
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f94:	e3bb      	b.n	800270e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f9e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001fa2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001fb0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f040 8175 	bne.w	80022a4 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001fba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d14e      	bne.n	8002064 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fd6:	81fb      	strh	r3, [r7, #14]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	89fb      	ldrh	r3, [r7, #14]
 8001fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3310      	adds	r3, #16
 8001fee:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	3302      	adds	r3, #2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	4413      	add	r3, r2
 800200e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800201a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800201c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	441a      	add	r2, r3
 8002026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002028:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800202a:	2100      	movs	r1, #0
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f005 feec 	bl	8007e0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	7b5b      	ldrb	r3, [r3, #13]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 8368 	beq.w	800270e <PCD_EP_ISR_Handler+0x782>
 800203e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b00      	cmp	r3, #0
 8002044:	f040 8363 	bne.w	800270e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7b5b      	ldrb	r3, [r3, #13]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002052:	b2da      	uxtb	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	735a      	strb	r2, [r3, #13]
 8002062:	e354      	b.n	800270e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800206a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002076:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800207a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800207e:	2b00      	cmp	r3, #0
 8002080:	d034      	beq.n	80020ec <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800208a:	b29b      	uxth	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	3306      	adds	r3, #6
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ac:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80020b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ba:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80020bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020be:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	f004 f8f8 	bl	80062b6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80020d2:	4013      	ands	r3, r2
 80020d4:	823b      	strh	r3, [r7, #16]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	8a3a      	ldrh	r2, [r7, #16]
 80020dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020e0:	b292      	uxth	r2, r2
 80020e2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f005 fe63 	bl	8007db0 <HAL_PCD_SetupStageCallback>
 80020ea:	e310      	b.n	800270e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020ec:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f280 830c 	bge.w	800270e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002102:	4013      	ands	r3, r2
 8002104:	83fb      	strh	r3, [r7, #30]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	8bfa      	ldrh	r2, [r7, #30]
 800210c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002110:	b292      	uxth	r2, r2
 8002112:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800211c:	b29b      	uxth	r3, r3
 800211e:	461a      	mov	r2, r3
 8002120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	3306      	adds	r3, #6
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	4413      	add	r3, r2
 8002132:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800213c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800213e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d019      	beq.n	800217c <PCD_EP_ISR_Handler+0x1f0>
 8002148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d015      	beq.n	800217c <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002156:	6959      	ldr	r1, [r3, #20]
 8002158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800215a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800215c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800215e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002160:	b29b      	uxth	r3, r3
 8002162:	f004 f8a8 	bl	80062b6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	441a      	add	r2, r3
 8002170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002172:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002174:	2100      	movs	r1, #0
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f005 fe2c 	bl	8007dd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002186:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800218a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800218e:	2b00      	cmp	r3, #0
 8002190:	f040 82bd 	bne.w	800270e <PCD_EP_ISR_Handler+0x782>
 8002194:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002198:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800219c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80021a0:	f000 82b5 	beq.w	800270e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	61bb      	str	r3, [r7, #24]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	4413      	add	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	801a      	strh	r2, [r3, #0]
 80021d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80021da:	d91d      	bls.n	8002218 <PCD_EP_ISR_Handler+0x28c>
 80021dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	095b      	lsrs	r3, r3, #5
 80021e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80021e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <PCD_EP_ISR_Handler+0x26a>
 80021f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021f2:	3b01      	subs	r3, #1
 80021f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021fe:	b29b      	uxth	r3, r3
 8002200:	029b      	lsls	r3, r3, #10
 8002202:	b29b      	uxth	r3, r3
 8002204:	4313      	orrs	r3, r2
 8002206:	b29b      	uxth	r3, r3
 8002208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800220c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002210:	b29a      	uxth	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	801a      	strh	r2, [r3, #0]
 8002216:	e026      	b.n	8002266 <PCD_EP_ISR_Handler+0x2da>
 8002218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10a      	bne.n	8002236 <PCD_EP_ISR_Handler+0x2aa>
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	b29b      	uxth	r3, r3
 8002226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800222a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800222e:	b29a      	uxth	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	801a      	strh	r2, [r3, #0]
 8002234:	e017      	b.n	8002266 <PCD_EP_ISR_Handler+0x2da>
 8002236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	085b      	lsrs	r3, r3, #1
 800223c:	647b      	str	r3, [r7, #68]	@ 0x44
 800223e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <PCD_EP_ISR_Handler+0x2c4>
 800224a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800224c:	3301      	adds	r3, #1
 800224e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	b29a      	uxth	r2, r3
 8002256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002258:	b29b      	uxth	r3, r3
 800225a:	029b      	lsls	r3, r3, #10
 800225c:	b29b      	uxth	r3, r3
 800225e:	4313      	orrs	r3, r2
 8002260:	b29a      	uxth	r2, r3
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002276:	827b      	strh	r3, [r7, #18]
 8002278:	8a7b      	ldrh	r3, [r7, #18]
 800227a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800227e:	827b      	strh	r3, [r7, #18]
 8002280:	8a7b      	ldrh	r3, [r7, #18]
 8002282:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002286:	827b      	strh	r3, [r7, #18]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	8a7b      	ldrh	r3, [r7, #18]
 800228e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002292:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002296:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800229a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800229e:	b29b      	uxth	r3, r3
 80022a0:	8013      	strh	r3, [r2, #0]
 80022a2:	e234      	b.n	800270e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022b8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f280 80fc 	bge.w	80024ba <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80022d8:	4013      	ands	r3, r2
 80022da:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80022f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80022f4:	b292      	uxth	r2, r2
 80022f6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80022f8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	4413      	add	r3, r2
 800230c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800230e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002310:	7b1b      	ldrb	r3, [r3, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d125      	bne.n	8002362 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	3306      	adds	r3, #6
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	4413      	add	r3, r2
 8002334:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800233e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002342:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8092 	beq.w	8002470 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002352:	6959      	ldr	r1, [r3, #20]
 8002354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002356:	88da      	ldrh	r2, [r3, #6]
 8002358:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800235c:	f003 ffab 	bl	80062b6 <USB_ReadPMA>
 8002360:	e086      	b.n	8002470 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002364:	78db      	ldrb	r3, [r3, #3]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d10a      	bne.n	8002380 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800236a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800236e:	461a      	mov	r2, r3
 8002370:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f9d9 	bl	800272a <HAL_PCD_EP_DB_Receive>
 8002378:	4603      	mov	r3, r0
 800237a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800237e:	e077      	b.n	8002470 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	b29b      	uxth	r3, r3
 8002392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800239a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	441a      	add	r2, r3
 80023ac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80023b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d024      	beq.n	8002428 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	3302      	adds	r3, #2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002406:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800240a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800240e:	2b00      	cmp	r3, #0
 8002410:	d02e      	beq.n	8002470 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002418:	6959      	ldr	r1, [r3, #20]
 800241a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800241c:	891a      	ldrh	r2, [r3, #8]
 800241e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002422:	f003 ff48 	bl	80062b6 <USB_ReadPMA>
 8002426:	e023      	b.n	8002470 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002430:	b29b      	uxth	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	3306      	adds	r3, #6
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	4413      	add	r3, r2
 8002446:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002450:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002454:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002458:	2b00      	cmp	r3, #0
 800245a:	d009      	beq.n	8002470 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002462:	6959      	ldr	r1, [r3, #20]
 8002464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002466:	895a      	ldrh	r2, [r3, #10]
 8002468:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800246c:	f003 ff23 	bl	80062b6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002472:	69da      	ldr	r2, [r3, #28]
 8002474:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002478:	441a      	add	r2, r3
 800247a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800247c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800247e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002486:	441a      	add	r2, r3
 8002488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800248a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800248c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <PCD_EP_ISR_Handler+0x514>
 8002494:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	429a      	cmp	r2, r3
 800249e:	d206      	bcs.n	80024ae <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80024a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4619      	mov	r1, r3
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f005 fc94 	bl	8007dd4 <HAL_PCD_DataOutStageCallback>
 80024ac:	e005      	b.n	80024ba <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024b4:	4618      	mov	r0, r3
 80024b6:	f002 f9c9 	bl	800484c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80024ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 8123 	beq.w	800270e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80024c8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	3310      	adds	r3, #16
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80024f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024f6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	441a      	add	r2, r3
 8002508:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800250c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002514:	b29b      	uxth	r3, r3
 8002516:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800251a:	78db      	ldrb	r3, [r3, #3]
 800251c:	2b01      	cmp	r3, #1
 800251e:	f040 80a2 	bne.w	8002666 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800252a:	7b1b      	ldrb	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 8093 	beq.w	8002658 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002532:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800253a:	2b00      	cmp	r3, #0
 800253c:	d046      	beq.n	80025cc <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800253e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002540:	785b      	ldrb	r3, [r3, #1]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d126      	bne.n	8002594 <PCD_EP_ISR_Handler+0x608>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002554:	b29b      	uxth	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255a:	4413      	add	r3, r2
 800255c:	627b      	str	r3, [r7, #36]	@ 0x24
 800255e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	011a      	lsls	r2, r3, #4
 8002564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002566:	4413      	add	r3, r2
 8002568:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800256c:	623b      	str	r3, [r7, #32]
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002578:	b29a      	uxth	r2, r3
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	801a      	strh	r2, [r3, #0]
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800258c:	b29a      	uxth	r2, r3
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	801a      	strh	r2, [r3, #0]
 8002592:	e061      	b.n	8002658 <PCD_EP_ISR_Handler+0x6cc>
 8002594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002596:	785b      	ldrb	r3, [r3, #1]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d15d      	bne.n	8002658 <PCD_EP_ISR_Handler+0x6cc>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b0:	4413      	add	r3, r2
 80025b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	011a      	lsls	r2, r3, #4
 80025ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025bc:	4413      	add	r3, r2
 80025be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c6:	2200      	movs	r2, #0
 80025c8:	801a      	strh	r2, [r3, #0]
 80025ca:	e045      	b.n	8002658 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d4:	785b      	ldrb	r3, [r3, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d126      	bne.n	8002628 <PCD_EP_ISR_Handler+0x69c>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	637b      	str	r3, [r7, #52]	@ 0x34
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ee:	4413      	add	r3, r2
 80025f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80025f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	011a      	lsls	r2, r3, #4
 80025f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025fa:	4413      	add	r3, r2
 80025fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002600:	633b      	str	r3, [r7, #48]	@ 0x30
 8002602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800260c:	b29a      	uxth	r2, r3
 800260e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002610:	801a      	strh	r2, [r3, #0]
 8002612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800261c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002620:	b29a      	uxth	r2, r3
 8002622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002624:	801a      	strh	r2, [r3, #0]
 8002626:	e017      	b.n	8002658 <PCD_EP_ISR_Handler+0x6cc>
 8002628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800262a:	785b      	ldrb	r3, [r3, #1]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d113      	bne.n	8002658 <PCD_EP_ISR_Handler+0x6cc>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002638:	b29b      	uxth	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800263e:	4413      	add	r3, r2
 8002640:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	011a      	lsls	r2, r3, #4
 8002648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800264a:	4413      	add	r3, r2
 800264c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002650:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002654:	2200      	movs	r2, #0
 8002656:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	4619      	mov	r1, r3
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f005 fbd3 	bl	8007e0a <HAL_PCD_DataInStageCallback>
 8002664:	e053      	b.n	800270e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002666:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800266a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d146      	bne.n	8002700 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800267a:	b29b      	uxth	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4413      	add	r3, r2
 8002686:	3302      	adds	r3, #2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	4413      	add	r3, r2
 8002690:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800269a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800269e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d907      	bls.n	80026ba <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80026aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026b2:	1ad2      	subs	r2, r2, r3
 80026b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026b6:	619a      	str	r2, [r3, #24]
 80026b8:	e002      	b.n	80026c0 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80026ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80026c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d106      	bne.n	80026d6 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f005 fb9b 	bl	8007e0a <HAL_PCD_DataInStageCallback>
 80026d4:	e01b      	b.n	800270e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80026d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026de:	441a      	add	r2, r3
 80026e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80026e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026ec:	441a      	add	r2, r3
 80026ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80026f8:	4618      	mov	r0, r3
 80026fa:	f002 f8a7 	bl	800484c <USB_EPStartXfer>
 80026fe:	e006      	b.n	800270e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002700:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002704:	461a      	mov	r2, r3
 8002706:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f91b 	bl	8002944 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002716:	b29b      	uxth	r3, r3
 8002718:	b21b      	sxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	f6ff ac3b 	blt.w	8001f96 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3758      	adds	r7, #88	@ 0x58
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b088      	sub	sp, #32
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	4613      	mov	r3, r2
 8002736:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d07e      	beq.n	8002840 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800274a:	b29b      	uxth	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	3302      	adds	r3, #2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	4413      	add	r3, r2
 8002760:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800276a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	699a      	ldr	r2, [r3, #24]
 8002770:	8b7b      	ldrh	r3, [r7, #26]
 8002772:	429a      	cmp	r2, r3
 8002774:	d306      	bcc.n	8002784 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	8b7b      	ldrh	r3, [r7, #26]
 800277c:	1ad2      	subs	r2, r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	619a      	str	r2, [r3, #24]
 8002782:	e002      	b.n	800278a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2200      	movs	r2, #0
 8002788:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d123      	bne.n	80027da <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ac:	833b      	strh	r3, [r7, #24]
 80027ae:	8b3b      	ldrh	r3, [r7, #24]
 80027b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80027b4:	833b      	strh	r3, [r7, #24]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	441a      	add	r2, r3
 80027c4:	8b3b      	ldrh	r3, [r7, #24]
 80027c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01f      	beq.n	8002824 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027fe:	82fb      	strh	r3, [r7, #22]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	441a      	add	r2, r3
 800280e:	8afb      	ldrh	r3, [r7, #22]
 8002810:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002814:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002818:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800281c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002820:	b29b      	uxth	r3, r3
 8002822:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002824:	8b7b      	ldrh	r3, [r7, #26]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8087 	beq.w	800293a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	6959      	ldr	r1, [r3, #20]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	891a      	ldrh	r2, [r3, #8]
 8002838:	8b7b      	ldrh	r3, [r7, #26]
 800283a:	f003 fd3c 	bl	80062b6 <USB_ReadPMA>
 800283e:	e07c      	b.n	800293a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002848:	b29b      	uxth	r3, r3
 800284a:	461a      	mov	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	3306      	adds	r3, #6
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	4413      	add	r3, r2
 800285e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002868:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	8b7b      	ldrh	r3, [r7, #26]
 8002870:	429a      	cmp	r2, r3
 8002872:	d306      	bcc.n	8002882 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	699a      	ldr	r2, [r3, #24]
 8002878:	8b7b      	ldrh	r3, [r7, #26]
 800287a:	1ad2      	subs	r2, r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	619a      	str	r2, [r3, #24]
 8002880:	e002      	b.n	8002888 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2200      	movs	r2, #0
 8002886:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d123      	bne.n	80028d8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028aa:	83fb      	strh	r3, [r7, #30]
 80028ac:	8bfb      	ldrh	r3, [r7, #30]
 80028ae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80028b2:	83fb      	strh	r3, [r7, #30]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	441a      	add	r2, r3
 80028c2:	8bfb      	ldrh	r3, [r7, #30]
 80028c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d11f      	bne.n	8002922 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028fc:	83bb      	strh	r3, [r7, #28]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	441a      	add	r2, r3
 800290c:	8bbb      	ldrh	r3, [r7, #28]
 800290e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002912:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800291a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800291e:	b29b      	uxth	r3, r3
 8002920:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002922:	8b7b      	ldrh	r3, [r7, #26]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	6959      	ldr	r1, [r3, #20]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	895a      	ldrh	r2, [r3, #10]
 8002934:	8b7b      	ldrh	r3, [r7, #26]
 8002936:	f003 fcbe 	bl	80062b6 <USB_ReadPMA>
    }
  }

  return count;
 800293a:	8b7b      	ldrh	r3, [r7, #26]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3720      	adds	r7, #32
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b0a4      	sub	sp, #144	@ 0x90
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	4613      	mov	r3, r2
 8002950:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 81dd 	beq.w	8002d18 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	3302      	adds	r3, #2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	4413      	add	r3, r2
 800297c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002986:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002992:	429a      	cmp	r2, r3
 8002994:	d907      	bls.n	80029a6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800299e:	1ad2      	subs	r2, r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	619a      	str	r2, [r3, #24]
 80029a4:	e002      	b.n	80029ac <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f040 80b9 	bne.w	8002b28 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	785b      	ldrb	r3, [r3, #1]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d126      	bne.n	8002a0c <HAL_PCD_EP_DB_Transmit+0xc8>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029d2:	4413      	add	r3, r2
 80029d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	011a      	lsls	r2, r3, #4
 80029dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029de:	4413      	add	r3, r2
 80029e0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80029e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f4:	801a      	strh	r2, [r3, #0]
 80029f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a08:	801a      	strh	r2, [r3, #0]
 8002a0a:	e01a      	b.n	8002a42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	785b      	ldrb	r3, [r3, #1]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d116      	bne.n	8002a42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a28:	4413      	add	r3, r2
 8002a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	011a      	lsls	r2, r3, #4
 8002a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a34:	4413      	add	r3, r2
 8002a36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3e:	2200      	movs	r2, #0
 8002a40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	785b      	ldrb	r3, [r3, #1]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d126      	bne.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	4413      	add	r3, r2
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	011a      	lsls	r2, r3, #4
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	4413      	add	r3, r2
 8002a72:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a76:	61bb      	str	r3, [r7, #24]
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	801a      	strh	r2, [r3, #0]
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	801a      	strh	r2, [r3, #0]
 8002a9c:	e017      	b.n	8002ace <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	785b      	ldrb	r3, [r3, #1]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d113      	bne.n	8002ace <HAL_PCD_EP_DB_Transmit+0x18a>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	4413      	add	r3, r2
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	011a      	lsls	r2, r3, #4
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ac6:	623b      	str	r3, [r7, #32]
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	2200      	movs	r2, #0
 8002acc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f005 f998 	bl	8007e0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 82fc 	beq.w	80030de <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002afc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b00:	82fb      	strh	r3, [r7, #22]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	441a      	add	r2, r3
 8002b10:	8afb      	ldrh	r3, [r7, #22]
 8002b12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	8013      	strh	r3, [r2, #0]
 8002b26:	e2da      	b.n	80030de <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d021      	beq.n	8002b76 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b4c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	441a      	add	r2, r3
 8002b5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002b62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	f040 82ae 	bne.w	80030de <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b8a:	441a      	add	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b98:	441a      	add	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	6a1a      	ldr	r2, [r3, #32]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d30b      	bcc.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	6a1a      	ldr	r2, [r3, #32]
 8002bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bba:	1ad2      	subs	r2, r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	621a      	str	r2, [r3, #32]
 8002bc0:	e017      	b.n	8002bf2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d108      	bne.n	8002bdc <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002bca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002bda:	e00a      	b.n	8002bf2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	785b      	ldrb	r3, [r3, #1]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d165      	bne.n	8002cc6 <HAL_PCD_EP_DB_Transmit+0x382>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c0e:	4413      	add	r3, r2
 8002c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	011a      	lsls	r2, r3, #4
 8002c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c30:	801a      	strh	r2, [r3, #0]
 8002c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c36:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c38:	d91d      	bls.n	8002c76 <HAL_PCD_EP_DB_Transmit+0x332>
 8002c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c46:	f003 031f 	and.w	r3, r3, #31
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d102      	bne.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x310>
 8002c4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c50:	3b01      	subs	r3, #1
 8002c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	029b      	lsls	r3, r3, #10
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	4313      	orrs	r3, r2
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c72:	801a      	strh	r2, [r3, #0]
 8002c74:	e044      	b.n	8002d00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10a      	bne.n	8002c94 <HAL_PCD_EP_DB_Transmit+0x350>
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c90:	801a      	strh	r2, [r3, #0]
 8002c92:	e035      	b.n	8002d00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c98:	085b      	lsrs	r3, r3, #1
 8002c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <HAL_PCD_EP_DB_Transmit+0x36a>
 8002ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002caa:	3301      	adds	r3, #1
 8002cac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	029b      	lsls	r3, r3, #10
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc2:	801a      	strh	r2, [r3, #0]
 8002cc4:	e01c      	b.n	8002d00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	785b      	ldrb	r3, [r3, #1]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d118      	bne.n	8002d00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ce2:	4413      	add	r3, r2
 8002ce4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	011a      	lsls	r2, r3, #4
 8002cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cee:	4413      	add	r3, r2
 8002cf0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002cf4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cfe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	6959      	ldr	r1, [r3, #20]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	891a      	ldrh	r2, [r3, #8]
 8002d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	f003 fa8a 	bl	800622a <USB_WritePMA>
 8002d16:	e1e2      	b.n	80030de <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3306      	adds	r3, #6
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d40:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	699a      	ldr	r2, [r3, #24]
 8002d48:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d307      	bcc.n	8002d60 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d58:	1ad2      	subs	r2, r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	619a      	str	r2, [r3, #24]
 8002d5e:	e002      	b.n	8002d66 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2200      	movs	r2, #0
 8002d64:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 80c0 	bne.w	8002ef0 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	785b      	ldrb	r3, [r3, #1]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d126      	bne.n	8002dc6 <HAL_PCD_EP_DB_Transmit+0x482>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d8c:	4413      	add	r3, r2
 8002d8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	011a      	lsls	r2, r3, #4
 8002d96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d98:	4413      	add	r3, r2
 8002d9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002da0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dae:	801a      	strh	r2, [r3, #0]
 8002db0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dc2:	801a      	strh	r2, [r3, #0]
 8002dc4:	e01a      	b.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	785b      	ldrb	r3, [r3, #1]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d116      	bne.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002de2:	4413      	add	r3, r2
 8002de4:	667b      	str	r3, [r7, #100]	@ 0x64
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	011a      	lsls	r2, r3, #4
 8002dec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dee:	4413      	add	r3, r2
 8002df0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002df4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002df6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002df8:	2200      	movs	r2, #0
 8002dfa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	785b      	ldrb	r3, [r3, #1]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d12b      	bne.n	8002e62 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e1e:	4413      	add	r3, r2
 8002e20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	011a      	lsls	r2, r3, #4
 8002e28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e46:	801a      	strh	r2, [r3, #0]
 8002e48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e5e:	801a      	strh	r2, [r3, #0]
 8002e60:	e017      	b.n	8002e92 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	785b      	ldrb	r3, [r3, #1]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d113      	bne.n	8002e92 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e78:	4413      	add	r3, r2
 8002e7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	011a      	lsls	r2, r3, #4
 8002e82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e84:	4413      	add	r3, r2
 8002e86:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e8e:	2200      	movs	r2, #0
 8002e90:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	4619      	mov	r1, r3
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f004 ffb6 	bl	8007e0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f040 811a 	bne.w	80030de <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ec4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	441a      	add	r2, r3
 8002ed6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002eda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ede:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ee2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	8013      	strh	r3, [r2, #0]
 8002eee:	e0f6      	b.n	80030de <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d121      	bne.n	8002f3e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f14:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	441a      	add	r2, r3
 8002f26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	f040 80ca 	bne.w	80030de <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f52:	441a      	add	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	69da      	ldr	r2, [r3, #28]
 8002f5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f60:	441a      	add	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	6a1a      	ldr	r2, [r3, #32]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d30b      	bcc.n	8002f8a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	6a1a      	ldr	r2, [r3, #32]
 8002f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f82:	1ad2      	subs	r2, r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	621a      	str	r2, [r3, #32]
 8002f88:	e017      	b.n	8002fba <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d108      	bne.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002f92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002fa2:	e00a      	b.n	8002fba <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	785b      	ldrb	r3, [r3, #1]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d165      	bne.n	8003094 <HAL_PCD_EP_DB_Transmit+0x750>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fdc:	4413      	add	r3, r2
 8002fde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	011a      	lsls	r2, r3, #4
 8002fe6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fe8:	4413      	add	r3, r2
 8002fea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002fee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ff0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ffe:	801a      	strh	r2, [r3, #0]
 8003000:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003004:	2b3e      	cmp	r3, #62	@ 0x3e
 8003006:	d91d      	bls.n	8003044 <HAL_PCD_EP_DB_Transmit+0x700>
 8003008:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800300c:	095b      	lsrs	r3, r3, #5
 800300e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003010:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2b00      	cmp	r3, #0
 800301a:	d102      	bne.n	8003022 <HAL_PCD_EP_DB_Transmit+0x6de>
 800301c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800301e:	3b01      	subs	r3, #1
 8003020:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003022:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29a      	uxth	r2, r3
 8003028:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800302a:	b29b      	uxth	r3, r3
 800302c:	029b      	lsls	r3, r3, #10
 800302e:	b29b      	uxth	r3, r3
 8003030:	4313      	orrs	r3, r2
 8003032:	b29b      	uxth	r3, r3
 8003034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800303c:	b29a      	uxth	r2, r3
 800303e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003040:	801a      	strh	r2, [r3, #0]
 8003042:	e041      	b.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x784>
 8003044:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <HAL_PCD_EP_DB_Transmit+0x71e>
 800304c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800305a:	b29a      	uxth	r2, r3
 800305c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800305e:	801a      	strh	r2, [r3, #0]
 8003060:	e032      	b.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x784>
 8003062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003066:	085b      	lsrs	r3, r3, #1
 8003068:	66bb      	str	r3, [r7, #104]	@ 0x68
 800306a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <HAL_PCD_EP_DB_Transmit+0x738>
 8003076:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003078:	3301      	adds	r3, #1
 800307a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800307c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	b29a      	uxth	r2, r3
 8003082:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003084:	b29b      	uxth	r3, r3
 8003086:	029b      	lsls	r3, r3, #10
 8003088:	b29b      	uxth	r3, r3
 800308a:	4313      	orrs	r3, r2
 800308c:	b29a      	uxth	r2, r3
 800308e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003090:	801a      	strh	r2, [r3, #0]
 8003092:	e019      	b.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x784>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	785b      	ldrb	r3, [r3, #1]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d115      	bne.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x784>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030aa:	4413      	add	r3, r2
 80030ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	011a      	lsls	r2, r3, #4
 80030b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b6:	4413      	add	r3, r2
 80030b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80030be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030c6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	6959      	ldr	r1, [r3, #20]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	895a      	ldrh	r2, [r3, #10]
 80030d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f003 f8a6 	bl	800622a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030f8:	82bb      	strh	r3, [r7, #20]
 80030fa:	8abb      	ldrh	r3, [r7, #20]
 80030fc:	f083 0310 	eor.w	r3, r3, #16
 8003100:	82bb      	strh	r3, [r7, #20]
 8003102:	8abb      	ldrh	r3, [r7, #20]
 8003104:	f083 0320 	eor.w	r3, r3, #32
 8003108:	82bb      	strh	r3, [r7, #20]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	441a      	add	r2, r3
 8003118:	8abb      	ldrh	r3, [r7, #20]
 800311a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800311e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003122:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800312a:	b29b      	uxth	r3, r3
 800312c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3790      	adds	r7, #144	@ 0x90
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	607b      	str	r3, [r7, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	817b      	strh	r3, [r7, #10]
 8003146:	4613      	mov	r3, r2
 8003148:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800314a:	897b      	ldrh	r3, [r7, #10]
 800314c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00b      	beq.n	800316e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003156:	897b      	ldrh	r3, [r7, #10]
 8003158:	f003 0207 	and.w	r2, r3, #7
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	3310      	adds	r3, #16
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4413      	add	r3, r2
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	e009      	b.n	8003182 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800316e:	897a      	ldrh	r2, [r7, #10]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003182:	893b      	ldrh	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d107      	bne.n	8003198 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2200      	movs	r2, #0
 800318c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	b29a      	uxth	r2, r3
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	80da      	strh	r2, [r3, #6]
 8003196:	e00b      	b.n	80031b0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2201      	movs	r2, #1
 800319c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e272      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 8087 	beq.w	80032ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031dc:	4b92      	ldr	r3, [pc, #584]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d00c      	beq.n	8003202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031e8:	4b8f      	ldr	r3, [pc, #572]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d112      	bne.n	800321a <HAL_RCC_OscConfig+0x5e>
 80031f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003200:	d10b      	bne.n	800321a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003202:	4b89      	ldr	r3, [pc, #548]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d06c      	beq.n	80032e8 <HAL_RCC_OscConfig+0x12c>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d168      	bne.n	80032e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e24c      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003222:	d106      	bne.n	8003232 <HAL_RCC_OscConfig+0x76>
 8003224:	4b80      	ldr	r3, [pc, #512]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a7f      	ldr	r2, [pc, #508]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800322a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e02e      	b.n	8003290 <HAL_RCC_OscConfig+0xd4>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x98>
 800323a:	4b7b      	ldr	r3, [pc, #492]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a7a      	ldr	r2, [pc, #488]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003240:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b78      	ldr	r3, [pc, #480]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a77      	ldr	r2, [pc, #476]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800324c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e01d      	b.n	8003290 <HAL_RCC_OscConfig+0xd4>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0xbc>
 800325e:	4b72      	ldr	r3, [pc, #456]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a71      	ldr	r2, [pc, #452]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003264:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b6f      	ldr	r3, [pc, #444]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6e      	ldr	r2, [pc, #440]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e00b      	b.n	8003290 <HAL_RCC_OscConfig+0xd4>
 8003278:	4b6b      	ldr	r3, [pc, #428]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a6a      	ldr	r2, [pc, #424]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800327e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b68      	ldr	r3, [pc, #416]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a67      	ldr	r2, [pc, #412]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800328a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800328e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fd faec 	bl	8000874 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fd fae8 	bl	8000874 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	@ 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e200      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0xe4>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fd fad8 	bl	8000874 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fd fad4 	bl	8000874 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	@ 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e1ec      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032da:	4b53      	ldr	r3, [pc, #332]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x10c>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d063      	beq.n	80033be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032f6:	4b4c      	ldr	r3, [pc, #304]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003302:	4b49      	ldr	r3, [pc, #292]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b08      	cmp	r3, #8
 800330c:	d11c      	bne.n	8003348 <HAL_RCC_OscConfig+0x18c>
 800330e:	4b46      	ldr	r3, [pc, #280]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d116      	bne.n	8003348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	4b43      	ldr	r3, [pc, #268]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_RCC_OscConfig+0x176>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d001      	beq.n	8003332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e1c0      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003332:	4b3d      	ldr	r3, [pc, #244]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4939      	ldr	r1, [pc, #228]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	e03a      	b.n	80033be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d020      	beq.n	8003392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003350:	4b36      	ldr	r3, [pc, #216]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003352:	2201      	movs	r2, #1
 8003354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003356:	f7fd fa8d 	bl	8000874 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800335e:	f7fd fa89 	bl	8000874 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e1a1      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003370:	4b2d      	ldr	r3, [pc, #180]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337c:	4b2a      	ldr	r3, [pc, #168]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4927      	ldr	r1, [pc, #156]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800338c:	4313      	orrs	r3, r2
 800338e:	600b      	str	r3, [r1, #0]
 8003390:	e015      	b.n	80033be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003392:	4b26      	ldr	r3, [pc, #152]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7fd fa6c 	bl	8000874 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a0:	f7fd fa68 	bl	8000874 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e180      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d03a      	beq.n	8003440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d019      	beq.n	8003406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d2:	4b17      	ldr	r3, [pc, #92]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d8:	f7fd fa4c 	bl	8000874 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e0:	f7fd fa48 	bl	8000874 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e160      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033fe:	2001      	movs	r0, #1
 8003400:	f000 faba 	bl	8003978 <RCC_Delay>
 8003404:	e01c      	b.n	8003440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003406:	4b0a      	ldr	r3, [pc, #40]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340c:	f7fd fa32 	bl	8000874 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003412:	e00f      	b.n	8003434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003414:	f7fd fa2e 	bl	8000874 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d908      	bls.n	8003434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e146      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	42420000 	.word	0x42420000
 8003430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003434:	4b92      	ldr	r3, [pc, #584]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1e9      	bne.n	8003414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80a6 	beq.w	800359a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800344e:	2300      	movs	r3, #0
 8003450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003452:	4b8b      	ldr	r3, [pc, #556]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10d      	bne.n	800347a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800345e:	4b88      	ldr	r3, [pc, #544]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4a87      	ldr	r2, [pc, #540]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003468:	61d3      	str	r3, [r2, #28]
 800346a:	4b85      	ldr	r3, [pc, #532]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003476:	2301      	movs	r3, #1
 8003478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347a:	4b82      	ldr	r3, [pc, #520]	@ (8003684 <HAL_RCC_OscConfig+0x4c8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d118      	bne.n	80034b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003486:	4b7f      	ldr	r3, [pc, #508]	@ (8003684 <HAL_RCC_OscConfig+0x4c8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a7e      	ldr	r2, [pc, #504]	@ (8003684 <HAL_RCC_OscConfig+0x4c8>)
 800348c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003492:	f7fd f9ef 	bl	8000874 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349a:	f7fd f9eb 	bl	8000874 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b64      	cmp	r3, #100	@ 0x64
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e103      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ac:	4b75      	ldr	r3, [pc, #468]	@ (8003684 <HAL_RCC_OscConfig+0x4c8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d106      	bne.n	80034ce <HAL_RCC_OscConfig+0x312>
 80034c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	6213      	str	r3, [r2, #32]
 80034cc:	e02d      	b.n	800352a <HAL_RCC_OscConfig+0x36e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x334>
 80034d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	4a69      	ldr	r2, [pc, #420]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	6213      	str	r3, [r2, #32]
 80034e2:	4b67      	ldr	r3, [pc, #412]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	4a66      	ldr	r2, [pc, #408]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	f023 0304 	bic.w	r3, r3, #4
 80034ec:	6213      	str	r3, [r2, #32]
 80034ee:	e01c      	b.n	800352a <HAL_RCC_OscConfig+0x36e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b05      	cmp	r3, #5
 80034f6:	d10c      	bne.n	8003512 <HAL_RCC_OscConfig+0x356>
 80034f8:	4b61      	ldr	r3, [pc, #388]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	4a60      	ldr	r2, [pc, #384]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	f043 0304 	orr.w	r3, r3, #4
 8003502:	6213      	str	r3, [r2, #32]
 8003504:	4b5e      	ldr	r3, [pc, #376]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	4a5d      	ldr	r2, [pc, #372]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	6213      	str	r3, [r2, #32]
 8003510:	e00b      	b.n	800352a <HAL_RCC_OscConfig+0x36e>
 8003512:	4b5b      	ldr	r3, [pc, #364]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	4a5a      	ldr	r2, [pc, #360]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	6213      	str	r3, [r2, #32]
 800351e:	4b58      	ldr	r3, [pc, #352]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	4a57      	ldr	r2, [pc, #348]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003524:	f023 0304 	bic.w	r3, r3, #4
 8003528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d015      	beq.n	800355e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003532:	f7fd f99f 	bl	8000874 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003538:	e00a      	b.n	8003550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353a:	f7fd f99b 	bl	8000874 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003548:	4293      	cmp	r3, r2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e0b1      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003550:	4b4b      	ldr	r3, [pc, #300]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0ee      	beq.n	800353a <HAL_RCC_OscConfig+0x37e>
 800355c:	e014      	b.n	8003588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355e:	f7fd f989 	bl	8000874 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003564:	e00a      	b.n	800357c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003566:	f7fd f985 	bl	8000874 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003574:	4293      	cmp	r3, r2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e09b      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357c:	4b40      	ldr	r3, [pc, #256]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1ee      	bne.n	8003566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d105      	bne.n	800359a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358e:	4b3c      	ldr	r3, [pc, #240]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	4a3b      	ldr	r2, [pc, #236]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003594:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 8087 	beq.w	80036b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a4:	4b36      	ldr	r3, [pc, #216]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d061      	beq.n	8003674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d146      	bne.n	8003646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b8:	4b33      	ldr	r3, [pc, #204]	@ (8003688 <HAL_RCC_OscConfig+0x4cc>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035be:	f7fd f959 	bl	8000874 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c6:	f7fd f955 	bl	8000874 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e06d      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d8:	4b29      	ldr	r3, [pc, #164]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f0      	bne.n	80035c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ec:	d108      	bne.n	8003600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035ee:	4b24      	ldr	r3, [pc, #144]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	4921      	ldr	r1, [pc, #132]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003600:	4b1f      	ldr	r3, [pc, #124]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a19      	ldr	r1, [r3, #32]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003610:	430b      	orrs	r3, r1
 8003612:	491b      	ldr	r1, [pc, #108]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003614:	4313      	orrs	r3, r2
 8003616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003618:	4b1b      	ldr	r3, [pc, #108]	@ (8003688 <HAL_RCC_OscConfig+0x4cc>)
 800361a:	2201      	movs	r2, #1
 800361c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361e:	f7fd f929 	bl	8000874 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003626:	f7fd f925 	bl	8000874 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e03d      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003638:	4b11      	ldr	r3, [pc, #68]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x46a>
 8003644:	e035      	b.n	80036b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003646:	4b10      	ldr	r3, [pc, #64]	@ (8003688 <HAL_RCC_OscConfig+0x4cc>)
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364c:	f7fd f912 	bl	8000874 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003654:	f7fd f90e 	bl	8000874 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e026      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003666:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x498>
 8003672:	e01e      	b.n	80036b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d107      	bne.n	800368c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e019      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
 8003680:	40021000 	.word	0x40021000
 8003684:	40007000 	.word	0x40007000
 8003688:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800368c:	4b0b      	ldr	r3, [pc, #44]	@ (80036bc <HAL_RCC_OscConfig+0x500>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	429a      	cmp	r2, r3
 800369e:	d106      	bne.n	80036ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d001      	beq.n	80036b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40021000 	.word	0x40021000

080036c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0d0      	b.n	8003876 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d910      	bls.n	8003704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b67      	ldr	r3, [pc, #412]	@ (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 0207 	bic.w	r2, r3, #7
 80036ea:	4965      	ldr	r1, [pc, #404]	@ (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f2:	4b63      	ldr	r3, [pc, #396]	@ (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0b8      	b.n	8003876 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d020      	beq.n	8003752 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800371c:	4b59      	ldr	r3, [pc, #356]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4a58      	ldr	r2, [pc, #352]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003726:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003734:	4b53      	ldr	r3, [pc, #332]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	4a52      	ldr	r2, [pc, #328]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800373e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003740:	4b50      	ldr	r3, [pc, #320]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	494d      	ldr	r1, [pc, #308]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d040      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d107      	bne.n	8003776 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003766:	4b47      	ldr	r3, [pc, #284]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d115      	bne.n	800379e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e07f      	b.n	8003876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d107      	bne.n	800378e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377e:	4b41      	ldr	r3, [pc, #260]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e073      	b.n	8003876 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378e:	4b3d      	ldr	r3, [pc, #244]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e06b      	b.n	8003876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800379e:	4b39      	ldr	r3, [pc, #228]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f023 0203 	bic.w	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	4936      	ldr	r1, [pc, #216]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037b0:	f7fd f860 	bl	8000874 <HAL_GetTick>
 80037b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b8:	f7fd f85c 	bl	8000874 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e053      	b.n	8003876 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f003 020c 	and.w	r2, r3, #12
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	429a      	cmp	r2, r3
 80037de:	d1eb      	bne.n	80037b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037e0:	4b27      	ldr	r3, [pc, #156]	@ (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d210      	bcs.n	8003810 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ee:	4b24      	ldr	r3, [pc, #144]	@ (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 0207 	bic.w	r2, r3, #7
 80037f6:	4922      	ldr	r1, [pc, #136]	@ (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fe:	4b20      	ldr	r3, [pc, #128]	@ (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e032      	b.n	8003876 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800381c:	4b19      	ldr	r3, [pc, #100]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4916      	ldr	r1, [pc, #88]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	4313      	orrs	r3, r2
 800382c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d009      	beq.n	800384e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800383a:	4b12      	ldr	r3, [pc, #72]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	490e      	ldr	r1, [pc, #56]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	4313      	orrs	r3, r2
 800384c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800384e:	f000 f821 	bl	8003894 <HAL_RCC_GetSysClockFreq>
 8003852:	4602      	mov	r2, r0
 8003854:	4b0b      	ldr	r3, [pc, #44]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	490a      	ldr	r1, [pc, #40]	@ (8003888 <HAL_RCC_ClockConfig+0x1c8>)
 8003860:	5ccb      	ldrb	r3, [r1, r3]
 8003862:	fa22 f303 	lsr.w	r3, r2, r3
 8003866:	4a09      	ldr	r2, [pc, #36]	@ (800388c <HAL_RCC_ClockConfig+0x1cc>)
 8003868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800386a:	4b09      	ldr	r3, [pc, #36]	@ (8003890 <HAL_RCC_ClockConfig+0x1d0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fc ffbe 	bl	80007f0 <HAL_InitTick>

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40022000 	.word	0x40022000
 8003884:	40021000 	.word	0x40021000
 8003888:	08008370 	.word	0x08008370
 800388c:	20000000 	.word	0x20000000
 8003890:	20000004 	.word	0x20000004

08003894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	2300      	movs	r3, #0
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	2300      	movs	r3, #0
 80038a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003928 <HAL_RCC_GetSysClockFreq+0x94>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d002      	beq.n	80038c4 <HAL_RCC_GetSysClockFreq+0x30>
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d003      	beq.n	80038ca <HAL_RCC_GetSysClockFreq+0x36>
 80038c2:	e027      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038c4:	4b19      	ldr	r3, [pc, #100]	@ (800392c <HAL_RCC_GetSysClockFreq+0x98>)
 80038c6:	613b      	str	r3, [r7, #16]
      break;
 80038c8:	e027      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	0c9b      	lsrs	r3, r3, #18
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	4a17      	ldr	r2, [pc, #92]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038d4:	5cd3      	ldrb	r3, [r2, r3]
 80038d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d010      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038e2:	4b11      	ldr	r3, [pc, #68]	@ (8003928 <HAL_RCC_GetSysClockFreq+0x94>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	0c5b      	lsrs	r3, r3, #17
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	4a11      	ldr	r2, [pc, #68]	@ (8003934 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038ee:	5cd3      	ldrb	r3, [r2, r3]
 80038f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a0d      	ldr	r2, [pc, #52]	@ (800392c <HAL_RCC_GetSysClockFreq+0x98>)
 80038f6:	fb03 f202 	mul.w	r2, r3, r2
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	e004      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a0c      	ldr	r2, [pc, #48]	@ (8003938 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003908:	fb02 f303 	mul.w	r3, r2, r3
 800390c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	613b      	str	r3, [r7, #16]
      break;
 8003912:	e002      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003914:	4b05      	ldr	r3, [pc, #20]	@ (800392c <HAL_RCC_GetSysClockFreq+0x98>)
 8003916:	613b      	str	r3, [r7, #16]
      break;
 8003918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800391a:	693b      	ldr	r3, [r7, #16]
}
 800391c:	4618      	mov	r0, r3
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
 800392c:	007a1200 	.word	0x007a1200
 8003930:	08008388 	.word	0x08008388
 8003934:	08008398 	.word	0x08008398
 8003938:	003d0900 	.word	0x003d0900

0800393c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003940:	4b02      	ldr	r3, [pc, #8]	@ (800394c <HAL_RCC_GetHCLKFreq+0x10>)
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	20000000 	.word	0x20000000

08003950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003954:	f7ff fff2 	bl	800393c <HAL_RCC_GetHCLKFreq>
 8003958:	4602      	mov	r2, r0
 800395a:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	4903      	ldr	r1, [pc, #12]	@ (8003974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003966:	5ccb      	ldrb	r3, [r1, r3]
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800396c:	4618      	mov	r0, r3
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40021000 	.word	0x40021000
 8003974:	08008380 	.word	0x08008380

08003978 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003980:	4b0a      	ldr	r3, [pc, #40]	@ (80039ac <RCC_Delay+0x34>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a0a      	ldr	r2, [pc, #40]	@ (80039b0 <RCC_Delay+0x38>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0a5b      	lsrs	r3, r3, #9
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003994:	bf00      	nop
  }
  while (Delay --);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1e5a      	subs	r2, r3, #1
 800399a:	60fa      	str	r2, [r7, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1f9      	bne.n	8003994 <RCC_Delay+0x1c>
}
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr
 80039ac:	20000000 	.word	0x20000000
 80039b0:	10624dd3 	.word	0x10624dd3

080039b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d07d      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039d0:	2300      	movs	r3, #0
 80039d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10d      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ea:	61d3      	str	r3, [r2, #28]
 80039ec:	4b49      	ldr	r3, [pc, #292]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f8:	2301      	movs	r3, #1
 80039fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fc:	4b46      	ldr	r3, [pc, #280]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d118      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a08:	4b43      	ldr	r3, [pc, #268]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a42      	ldr	r2, [pc, #264]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a14:	f7fc ff2e 	bl	8000874 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1a:	e008      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1c:	f7fc ff2a 	bl	8000874 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	@ 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e06d      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a3a:	4b36      	ldr	r3, [pc, #216]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d02e      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d027      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a58:	4b2e      	ldr	r3, [pc, #184]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a62:	4b2e      	ldr	r3, [pc, #184]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a68:	4b2c      	ldr	r3, [pc, #176]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a6e:	4a29      	ldr	r2, [pc, #164]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d014      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7e:	f7fc fef9 	bl	8000874 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	e00a      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fc fef5 	bl	8000874 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e036      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ee      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4917      	ldr	r1, [pc, #92]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d105      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac0:	4b14      	ldr	r3, [pc, #80]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	4a13      	ldr	r2, [pc, #76]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	490b      	ldr	r1, [pc, #44]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d008      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003af6:	4b07      	ldr	r3, [pc, #28]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	4904      	ldr	r1, [pc, #16]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40007000 	.word	0x40007000
 8003b1c:	42420440 	.word	0x42420440

08003b20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e076      	b.n	8003c20 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d108      	bne.n	8003b4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b42:	d009      	beq.n	8003b58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	61da      	str	r2, [r3, #28]
 8003b4a:	e005      	b.n	8003b58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fc fd76 	bl	8000664 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bdc:	ea42 0103 	orr.w	r1, r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	0c1a      	lsrs	r2, r3, #16
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f002 0204 	and.w	r2, r2, #4
 8003bfe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69da      	ldr	r2, [r3, #28]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	4638      	mov	r0, r7
 8003c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr

08003c42 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c52:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003c56:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr

08003c6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b085      	sub	sp, #20
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c76:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003c7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bc80      	pop	{r7}
 8003ca0:	4770      	bx	lr

08003ca2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	460b      	mov	r3, r1
 8003cac:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	4638      	mov	r0, r7
 8003cc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr

08003cf4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b09d      	sub	sp, #116	@ 0x74
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d1a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	78db      	ldrb	r3, [r3, #3]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d81f      	bhi.n	8003d66 <USB_ActivateEndpoint+0x72>
 8003d26:	a201      	add	r2, pc, #4	@ (adr r2, 8003d2c <USB_ActivateEndpoint+0x38>)
 8003d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2c:	08003d3d 	.word	0x08003d3d
 8003d30:	08003d59 	.word	0x08003d59
 8003d34:	08003d6f 	.word	0x08003d6f
 8003d38:	08003d4b 	.word	0x08003d4b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003d3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003d40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d44:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003d48:	e012      	b.n	8003d70 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003d4a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003d4e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003d52:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003d56:	e00b      	b.n	8003d70 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003d58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003d5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003d64:	e004      	b.n	8003d70 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003d6c:	e000      	b.n	8003d70 <USB_ActivateEndpoint+0x7c>
      break;
 8003d6e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	441a      	add	r2, r3
 8003d7a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003d7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003da4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	7812      	ldrb	r2, [r2, #0]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	441a      	add	r2, r3
 8003dbe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003dc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	7b1b      	ldrb	r3, [r3, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f040 8178 	bne.w	80040d0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	785b      	ldrb	r3, [r3, #1]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 8084 	beq.w	8003ef2 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	61bb      	str	r3, [r7, #24]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	011a      	lsls	r2, r3, #4
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	88db      	ldrh	r3, [r3, #6]
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	827b      	strh	r3, [r7, #18]
 8003e2c:	8a7b      	ldrh	r3, [r7, #18]
 8003e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d01b      	beq.n	8003e6e <USB_ActivateEndpoint+0x17a>
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e4c:	823b      	strh	r3, [r7, #16]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	441a      	add	r2, r3
 8003e58:	8a3b      	ldrh	r3, [r7, #16]
 8003e5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	78db      	ldrb	r3, [r3, #3]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d020      	beq.n	8003eb8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e8c:	81bb      	strh	r3, [r7, #12]
 8003e8e:	89bb      	ldrh	r3, [r7, #12]
 8003e90:	f083 0320 	eor.w	r3, r3, #32
 8003e94:	81bb      	strh	r3, [r7, #12]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	441a      	add	r2, r3
 8003ea0:	89bb      	ldrh	r3, [r7, #12]
 8003ea2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ea6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003eaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	8013      	strh	r3, [r2, #0]
 8003eb6:	e2d5      	b.n	8004464 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ece:	81fb      	strh	r3, [r7, #14]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	441a      	add	r2, r3
 8003eda:	89fb      	ldrh	r3, [r7, #14]
 8003edc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	8013      	strh	r3, [r2, #0]
 8003ef0:	e2b8      	b.n	8004464 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f02:	4413      	add	r3, r2
 8003f04:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	011a      	lsls	r2, r3, #4
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	88db      	ldrh	r3, [r3, #6]
 8003f1a:	085b      	lsrs	r3, r3, #1
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f24:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f36:	4413      	add	r3, r2
 8003f38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	011a      	lsls	r2, r3, #4
 8003f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f42:	4413      	add	r3, r2
 8003f44:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	801a      	strh	r2, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f60:	d91d      	bls.n	8003f9e <USB_ActivateEndpoint+0x2aa>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <USB_ActivateEndpoint+0x288>
 8003f76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	029b      	lsls	r3, r3, #10
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9a:	801a      	strh	r2, [r3, #0]
 8003f9c:	e026      	b.n	8003fec <USB_ActivateEndpoint+0x2f8>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10a      	bne.n	8003fbc <USB_ActivateEndpoint+0x2c8>
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	801a      	strh	r2, [r3, #0]
 8003fba:	e017      	b.n	8003fec <USB_ActivateEndpoint+0x2f8>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <USB_ActivateEndpoint+0x2e2>
 8003fd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	029b      	lsls	r3, r3, #10
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003ffa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01b      	beq.n	800403c <USB_ActivateEndpoint+0x348>
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	b29b      	uxth	r3, r3
 8004012:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800401a:	843b      	strh	r3, [r7, #32]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	441a      	add	r2, r3
 8004026:	8c3b      	ldrh	r3, [r7, #32]
 8004028:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800402c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004030:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004034:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004038:	b29b      	uxth	r3, r3
 800403a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d124      	bne.n	800408e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	b29b      	uxth	r3, r3
 8004052:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800405a:	83bb      	strh	r3, [r7, #28]
 800405c:	8bbb      	ldrh	r3, [r7, #28]
 800405e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004062:	83bb      	strh	r3, [r7, #28]
 8004064:	8bbb      	ldrh	r3, [r7, #28]
 8004066:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800406a:	83bb      	strh	r3, [r7, #28]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	441a      	add	r2, r3
 8004076:	8bbb      	ldrh	r3, [r7, #28]
 8004078:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800407c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004080:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004088:	b29b      	uxth	r3, r3
 800408a:	8013      	strh	r3, [r2, #0]
 800408c:	e1ea      	b.n	8004464 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	b29b      	uxth	r3, r3
 800409c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040a4:	83fb      	strh	r3, [r7, #30]
 80040a6:	8bfb      	ldrh	r3, [r7, #30]
 80040a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80040ac:	83fb      	strh	r3, [r7, #30]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	441a      	add	r2, r3
 80040b8:	8bfb      	ldrh	r3, [r7, #30]
 80040ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	8013      	strh	r3, [r2, #0]
 80040ce:	e1c9      	b.n	8004464 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	78db      	ldrb	r3, [r3, #3]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d11e      	bne.n	8004116 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ee:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	441a      	add	r2, r3
 80040fc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004108:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800410c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004110:	b29b      	uxth	r3, r3
 8004112:	8013      	strh	r3, [r2, #0]
 8004114:	e01d      	b.n	8004152 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800412c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	441a      	add	r2, r3
 800413a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800413e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004142:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800414a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800414e:	b29b      	uxth	r3, r3
 8004150:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800415c:	b29b      	uxth	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004162:	4413      	add	r3, r2
 8004164:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	011a      	lsls	r2, r3, #4
 800416c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800416e:	4413      	add	r3, r2
 8004170:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004174:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	891b      	ldrh	r3, [r3, #8]
 800417a:	085b      	lsrs	r3, r3, #1
 800417c:	b29b      	uxth	r3, r3
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004184:	801a      	strh	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	657b      	str	r3, [r7, #84]	@ 0x54
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004190:	b29b      	uxth	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004196:	4413      	add	r3, r2
 8004198:	657b      	str	r3, [r7, #84]	@ 0x54
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	011a      	lsls	r2, r3, #4
 80041a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80041a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	895b      	ldrh	r3, [r3, #10]
 80041ae:	085b      	lsrs	r3, r3, #1
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041b8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	785b      	ldrb	r3, [r3, #1]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f040 8093 	bne.w	80042ea <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80041d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80041d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01b      	beq.n	8004218 <USB_ActivateEndpoint+0x524>
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	441a      	add	r2, r3
 8004202:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004204:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004208:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800420c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004214:	b29b      	uxth	r3, r3
 8004216:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004226:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01b      	beq.n	8004268 <USB_ActivateEndpoint+0x574>
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	b29b      	uxth	r3, r3
 800423e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004246:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	441a      	add	r2, r3
 8004252:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800425c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004260:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004264:	b29b      	uxth	r3, r3
 8004266:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	b29b      	uxth	r3, r3
 8004276:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800427a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800427e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004280:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004282:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004286:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004288:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800428a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800428e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	441a      	add	r2, r3
 800429a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800429c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	441a      	add	r2, r3
 80042d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80042d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	8013      	strh	r3, [r2, #0]
 80042e8:	e0bc      	b.n	8004464 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80042fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80042fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d01d      	beq.n	8004342 <USB_ActivateEndpoint+0x64e>
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800431c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	441a      	add	r2, r3
 800432a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800432e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004332:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004336:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800433a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800433e:	b29b      	uxth	r3, r3
 8004340:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004352:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01d      	beq.n	800439a <USB_ActivateEndpoint+0x6a6>
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004374:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	441a      	add	r2, r3
 8004382:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004386:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800438a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800438e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004392:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004396:	b29b      	uxth	r3, r3
 8004398:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	78db      	ldrb	r3, [r3, #3]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d024      	beq.n	80043ec <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043b8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80043bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80043c0:	f083 0320 	eor.w	r3, r3, #32
 80043c4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	441a      	add	r2, r3
 80043d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80043d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	8013      	strh	r3, [r2, #0]
 80043ea:	e01d      	b.n	8004428 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004402:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	441a      	add	r2, r3
 8004410:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004414:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004418:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800441c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004420:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004424:	b29b      	uxth	r3, r3
 8004426:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	b29b      	uxth	r3, r3
 8004436:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800443a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800443e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	441a      	add	r2, r3
 800444c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004450:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004454:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004458:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800445c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004460:	b29b      	uxth	r3, r3
 8004462:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004464:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004468:	4618      	mov	r0, r3
 800446a:	3774      	adds	r7, #116	@ 0x74
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop

08004474 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004474:	b480      	push	{r7}
 8004476:	b08d      	sub	sp, #52	@ 0x34
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	7b1b      	ldrb	r3, [r3, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f040 808e 	bne.w	80045a4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	785b      	ldrb	r3, [r3, #1]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d044      	beq.n	800451a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	81bb      	strh	r3, [r7, #12]
 800449e:	89bb      	ldrh	r3, [r7, #12]
 80044a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d01b      	beq.n	80044e0 <USB_DeactivateEndpoint+0x6c>
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044be:	817b      	strh	r3, [r7, #10]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	441a      	add	r2, r3
 80044ca:	897b      	ldrh	r3, [r7, #10]
 80044cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044dc:	b29b      	uxth	r3, r3
 80044de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044f6:	813b      	strh	r3, [r7, #8]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	441a      	add	r2, r3
 8004502:	893b      	ldrh	r3, [r7, #8]
 8004504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800450c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004514:	b29b      	uxth	r3, r3
 8004516:	8013      	strh	r3, [r2, #0]
 8004518:	e192      	b.n	8004840 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	827b      	strh	r3, [r7, #18]
 8004528:	8a7b      	ldrh	r3, [r7, #18]
 800452a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d01b      	beq.n	800456a <USB_DeactivateEndpoint+0xf6>
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	b29b      	uxth	r3, r3
 8004540:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004548:	823b      	strh	r3, [r7, #16]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	441a      	add	r2, r3
 8004554:	8a3b      	ldrh	r3, [r7, #16]
 8004556:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800455a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800455e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004566:	b29b      	uxth	r3, r3
 8004568:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800457c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004580:	81fb      	strh	r3, [r7, #14]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	441a      	add	r2, r3
 800458c:	89fb      	ldrh	r3, [r7, #14]
 800458e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004592:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800459a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800459e:	b29b      	uxth	r3, r3
 80045a0:	8013      	strh	r3, [r2, #0]
 80045a2:	e14d      	b.n	8004840 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	785b      	ldrb	r3, [r3, #1]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f040 80a5 	bne.w	80046f8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	843b      	strh	r3, [r7, #32]
 80045bc:	8c3b      	ldrh	r3, [r7, #32]
 80045be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d01b      	beq.n	80045fe <USB_DeactivateEndpoint+0x18a>
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045dc:	83fb      	strh	r3, [r7, #30]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	441a      	add	r2, r3
 80045e8:	8bfb      	ldrh	r3, [r7, #30]
 80045ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	83bb      	strh	r3, [r7, #28]
 800460c:	8bbb      	ldrh	r3, [r7, #28]
 800460e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d01b      	beq.n	800464e <USB_DeactivateEndpoint+0x1da>
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	b29b      	uxth	r3, r3
 8004624:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004628:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800462c:	837b      	strh	r3, [r7, #26]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	441a      	add	r2, r3
 8004638:	8b7b      	ldrh	r3, [r7, #26]
 800463a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800463e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004646:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800464a:	b29b      	uxth	r3, r3
 800464c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	b29b      	uxth	r3, r3
 800465c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004664:	833b      	strh	r3, [r7, #24]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	441a      	add	r2, r3
 8004670:	8b3b      	ldrh	r3, [r7, #24]
 8004672:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004676:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800467a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800467e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004682:	b29b      	uxth	r3, r3
 8004684:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	b29b      	uxth	r3, r3
 8004694:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469c:	82fb      	strh	r3, [r7, #22]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	441a      	add	r2, r3
 80046a8:	8afb      	ldrh	r3, [r7, #22]
 80046aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046d4:	82bb      	strh	r3, [r7, #20]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	441a      	add	r2, r3
 80046e0:	8abb      	ldrh	r3, [r7, #20]
 80046e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	8013      	strh	r3, [r2, #0]
 80046f6:	e0a3      	b.n	8004840 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004706:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004708:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01b      	beq.n	8004748 <USB_DeactivateEndpoint+0x2d4>
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004726:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	441a      	add	r2, r3
 8004732:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004734:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004738:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800473c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004744:	b29b      	uxth	r3, r3
 8004746:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004756:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01b      	beq.n	8004798 <USB_DeactivateEndpoint+0x324>
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	b29b      	uxth	r3, r3
 800476e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004776:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	441a      	add	r2, r3
 8004782:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004784:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004788:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800478c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004790:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004794:	b29b      	uxth	r3, r3
 8004796:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	441a      	add	r2, r3
 80047ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80047bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	441a      	add	r2, r3
 80047f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004804:	b29b      	uxth	r3, r3
 8004806:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b29b      	uxth	r3, r3
 8004816:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800481a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800481e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	441a      	add	r2, r3
 800482a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800482c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004830:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004834:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800483c:	b29b      	uxth	r3, r3
 800483e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3734      	adds	r7, #52	@ 0x34
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b0c2      	sub	sp, #264	@ 0x108
 8004850:	af00      	add	r7, sp, #0
 8004852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004856:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800485a:	6018      	str	r0, [r3, #0]
 800485c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004864:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800486a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	785b      	ldrb	r3, [r3, #1]
 8004872:	2b01      	cmp	r3, #1
 8004874:	f040 86b7 	bne.w	80055e6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800487c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699a      	ldr	r2, [r3, #24]
 8004884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	429a      	cmp	r2, r3
 8004892:	d908      	bls.n	80048a6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80048a4:	e007      	b.n	80048b6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80048a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80048b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	7b1b      	ldrb	r3, [r3, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d13a      	bne.n	800493c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80048c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6959      	ldr	r1, [r3, #20]
 80048d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	88da      	ldrh	r2, [r3, #6]
 80048de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80048e8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80048ec:	6800      	ldr	r0, [r0, #0]
 80048ee:	f001 fc9c 	bl	800622a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80048f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004902:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800490c:	b29b      	uxth	r3, r3
 800490e:	461a      	mov	r2, r3
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4413      	add	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800491a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	011a      	lsls	r2, r3, #4
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4413      	add	r3, r2
 8004928:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	801a      	strh	r2, [r3, #0]
 8004938:	f000 be1f 	b.w	800557a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800493c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	78db      	ldrb	r3, [r3, #3]
 8004948:	2b02      	cmp	r3, #2
 800494a:	f040 8462 	bne.w	8005212 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800494e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6a1a      	ldr	r2, [r3, #32]
 800495a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800495e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	429a      	cmp	r2, r3
 8004968:	f240 83df 	bls.w	800512a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800496c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004970:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800497a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800498e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004992:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800499a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	441a      	add	r2, r3
 80049b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80049b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049bc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80049c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80049c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6a1a      	ldr	r2, [r3, #32]
 80049d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049d8:	1ad2      	subs	r2, r2, r3
 80049da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80049e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 81c7 	beq.w	8004d9c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	785b      	ldrb	r3, [r3, #1]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d177      	bne.n	8004b1a <USB_EPStartXfer+0x2ce>
 8004a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	461a      	mov	r2, r3
 8004a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4a:	4413      	add	r3, r2
 8004a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	011a      	lsls	r2, r3, #4
 8004a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5e:	4413      	add	r3, r2
 8004a60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	801a      	strh	r2, [r3, #0]
 8004a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a7c:	d921      	bls.n	8004ac2 <USB_EPStartXfer+0x276>
 8004a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a82:	095b      	lsrs	r3, r3, #5
 8004a84:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <USB_EPStartXfer+0x252>
 8004a94:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	029b      	lsls	r3, r3, #10
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abe:	801a      	strh	r2, [r3, #0]
 8004ac0:	e050      	b.n	8004b64 <USB_EPStartXfer+0x318>
 8004ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <USB_EPStartXfer+0x294>
 8004aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	801a      	strh	r2, [r3, #0]
 8004ade:	e041      	b.n	8004b64 <USB_EPStartXfer+0x318>
 8004ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d004      	beq.n	8004b00 <USB_EPStartXfer+0x2b4>
 8004af6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004afa:	3301      	adds	r3, #1
 8004afc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	029b      	lsls	r3, r3, #10
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	4313      	orrs	r3, r2
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b16:	801a      	strh	r2, [r3, #0]
 8004b18:	e024      	b.n	8004b64 <USB_EPStartXfer+0x318>
 8004b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	785b      	ldrb	r3, [r3, #1]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d11c      	bne.n	8004b64 <USB_EPStartXfer+0x318>
 8004b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3e:	4413      	add	r3, r2
 8004b40:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	011a      	lsls	r2, r3, #4
 8004b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b52:	4413      	add	r3, r2
 8004b54:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b62:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	895b      	ldrh	r3, [r3, #10]
 8004b70:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6959      	ldr	r1, [r3, #20]
 8004b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004b8a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004b8e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004b92:	6800      	ldr	r0, [r0, #0]
 8004b94:	f001 fb49 	bl	800622a <USB_WritePMA>
            ep->xfer_buff += len;
 8004b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695a      	ldr	r2, [r3, #20]
 8004ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ba8:	441a      	add	r2, r3
 8004baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6a1a      	ldr	r2, [r3, #32]
 8004bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d90f      	bls.n	8004bf2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6a1a      	ldr	r2, [r3, #32]
 8004bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be2:	1ad2      	subs	r2, r2, r3
 8004be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	621a      	str	r2, [r3, #32]
 8004bf0:	e00e      	b.n	8004c10 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004c02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	785b      	ldrb	r3, [r3, #1]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d177      	bne.n	8004d10 <USB_EPStartXfer+0x4c4>
 8004c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	61bb      	str	r3, [r7, #24]
 8004c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	4413      	add	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
 8004c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	011a      	lsls	r2, r3, #4
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	4413      	add	r3, r2
 8004c56:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	801a      	strh	r2, [r3, #0]
 8004c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c70:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c72:	d921      	bls.n	8004cb8 <USB_EPStartXfer+0x46c>
 8004c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c82:	f003 031f 	and.w	r3, r3, #31
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d104      	bne.n	8004c94 <USB_EPStartXfer+0x448>
 8004c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	029b      	lsls	r3, r3, #10
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	801a      	strh	r2, [r3, #0]
 8004cb6:	e056      	b.n	8004d66 <USB_EPStartXfer+0x51a>
 8004cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <USB_EPStartXfer+0x48a>
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	801a      	strh	r2, [r3, #0]
 8004cd4:	e047      	b.n	8004d66 <USB_EPStartXfer+0x51a>
 8004cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cda:	085b      	lsrs	r3, r3, #1
 8004cdc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <USB_EPStartXfer+0x4aa>
 8004cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	029b      	lsls	r3, r3, #10
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	4313      	orrs	r3, r2
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	801a      	strh	r2, [r3, #0]
 8004d0e:	e02a      	b.n	8004d66 <USB_EPStartXfer+0x51a>
 8004d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	785b      	ldrb	r3, [r3, #1]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d122      	bne.n	8004d66 <USB_EPStartXfer+0x51a>
 8004d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	623b      	str	r3, [r7, #32]
 8004d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	4413      	add	r3, r2
 8004d42:	623b      	str	r3, [r7, #32]
 8004d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	011a      	lsls	r2, r3, #4
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	4413      	add	r3, r2
 8004d56:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d5a:	61fb      	str	r3, [r7, #28]
 8004d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	891b      	ldrh	r3, [r3, #8]
 8004d72:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6959      	ldr	r1, [r3, #20]
 8004d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004d8c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004d90:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004d94:	6800      	ldr	r0, [r0, #0]
 8004d96:	f001 fa48 	bl	800622a <USB_WritePMA>
 8004d9a:	e3ee      	b.n	800557a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d177      	bne.n	8004e9c <USB_EPStartXfer+0x650>
 8004dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dcc:	4413      	add	r3, r2
 8004dce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	011a      	lsls	r2, r3, #4
 8004dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004de0:	4413      	add	r3, r2
 8004de2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004de6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004df6:	801a      	strh	r2, [r3, #0]
 8004df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8004dfe:	d921      	bls.n	8004e44 <USB_EPStartXfer+0x5f8>
 8004e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e0e:	f003 031f 	and.w	r3, r3, #31
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d104      	bne.n	8004e20 <USB_EPStartXfer+0x5d4>
 8004e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	029b      	lsls	r3, r3, #10
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	4313      	orrs	r3, r2
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e40:	801a      	strh	r2, [r3, #0]
 8004e42:	e056      	b.n	8004ef2 <USB_EPStartXfer+0x6a6>
 8004e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <USB_EPStartXfer+0x616>
 8004e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e5e:	801a      	strh	r2, [r3, #0]
 8004e60:	e047      	b.n	8004ef2 <USB_EPStartXfer+0x6a6>
 8004e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e66:	085b      	lsrs	r3, r3, #1
 8004e68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d004      	beq.n	8004e82 <USB_EPStartXfer+0x636>
 8004e78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004e82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	029b      	lsls	r3, r3, #10
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	4313      	orrs	r3, r2
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e98:	801a      	strh	r2, [r3, #0]
 8004e9a:	e02a      	b.n	8004ef2 <USB_EPStartXfer+0x6a6>
 8004e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	785b      	ldrb	r3, [r3, #1]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d122      	bne.n	8004ef2 <USB_EPStartXfer+0x6a6>
 8004eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ebc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ecc:	4413      	add	r3, r2
 8004ece:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	011a      	lsls	r2, r3, #4
 8004ede:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ef0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	891b      	ldrh	r3, [r3, #8]
 8004efe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6959      	ldr	r1, [r3, #20]
 8004f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004f18:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004f1c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004f20:	6800      	ldr	r0, [r0, #0]
 8004f22:	f001 f982 	bl	800622a <USB_WritePMA>
            ep->xfer_buff += len;
 8004f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695a      	ldr	r2, [r3, #20]
 8004f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f36:	441a      	add	r2, r3
 8004f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6a1a      	ldr	r2, [r3, #32]
 8004f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d90f      	bls.n	8004f80 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6a1a      	ldr	r2, [r3, #32]
 8004f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f70:	1ad2      	subs	r2, r2, r3
 8004f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	621a      	str	r2, [r3, #32]
 8004f7e:	e00e      	b.n	8004f9e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	785b      	ldrb	r3, [r3, #1]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d177      	bne.n	80050aa <USB_EPStartXfer+0x85e>
 8004fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fda:	4413      	add	r3, r2
 8004fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	011a      	lsls	r2, r3, #4
 8004fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fee:	4413      	add	r3, r2
 8004ff0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005000:	b29a      	uxth	r2, r3
 8005002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005004:	801a      	strh	r2, [r3, #0]
 8005006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800500a:	2b3e      	cmp	r3, #62	@ 0x3e
 800500c:	d921      	bls.n	8005052 <USB_EPStartXfer+0x806>
 800500e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	2b00      	cmp	r3, #0
 8005022:	d104      	bne.n	800502e <USB_EPStartXfer+0x7e2>
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005028:	3b01      	subs	r3, #1
 800502a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800502e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b29a      	uxth	r2, r3
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005038:	b29b      	uxth	r3, r3
 800503a:	029b      	lsls	r3, r3, #10
 800503c:	b29b      	uxth	r3, r3
 800503e:	4313      	orrs	r3, r2
 8005040:	b29b      	uxth	r3, r3
 8005042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800504a:	b29a      	uxth	r2, r3
 800504c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800504e:	801a      	strh	r2, [r3, #0]
 8005050:	e050      	b.n	80050f4 <USB_EPStartXfer+0x8a8>
 8005052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10a      	bne.n	8005070 <USB_EPStartXfer+0x824>
 800505a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005068:	b29a      	uxth	r2, r3
 800506a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800506c:	801a      	strh	r2, [r3, #0]
 800506e:	e041      	b.n	80050f4 <USB_EPStartXfer+0x8a8>
 8005070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800507a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d004      	beq.n	8005090 <USB_EPStartXfer+0x844>
 8005086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508a:	3301      	adds	r3, #1
 800508c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29a      	uxth	r2, r3
 8005096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509a:	b29b      	uxth	r3, r3
 800509c:	029b      	lsls	r3, r3, #10
 800509e:	b29b      	uxth	r3, r3
 80050a0:	4313      	orrs	r3, r2
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a6:	801a      	strh	r2, [r3, #0]
 80050a8:	e024      	b.n	80050f4 <USB_EPStartXfer+0x8a8>
 80050aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	785b      	ldrb	r3, [r3, #1]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d11c      	bne.n	80050f4 <USB_EPStartXfer+0x8a8>
 80050ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ce:	4413      	add	r3, r2
 80050d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80050d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	011a      	lsls	r2, r3, #4
 80050e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050e2:	4413      	add	r3, r2
 80050e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80050f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	895b      	ldrh	r3, [r3, #10]
 8005100:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6959      	ldr	r1, [r3, #20]
 8005110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005114:	b29b      	uxth	r3, r3
 8005116:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800511a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800511e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005122:	6800      	ldr	r0, [r0, #0]
 8005124:	f001 f881 	bl	800622a <USB_WritePMA>
 8005128:	e227      	b.n	800557a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800512a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800512e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800513a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800513e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800515c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005160:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005168:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	441a      	add	r2, r3
 800517e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005182:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005186:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800518a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800518e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005192:	b29b      	uxth	r3, r3
 8005194:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800519a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051b6:	4413      	add	r3, r2
 80051b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	011a      	lsls	r2, r3, #4
 80051c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051ca:	4413      	add	r3, r2
 80051cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80051d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80051dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	891b      	ldrh	r3, [r3, #8]
 80051e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6959      	ldr	r1, [r3, #20]
 80051f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005202:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005206:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800520a:	6800      	ldr	r0, [r0, #0]
 800520c:	f001 f80d 	bl	800622a <USB_WritePMA>
 8005210:	e1b3      	b.n	800557a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6a1a      	ldr	r2, [r3, #32]
 800521e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005222:	1ad2      	subs	r2, r2, r3
 8005224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 80c6 	beq.w	80053e4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800525c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	673b      	str	r3, [r7, #112]	@ 0x70
 8005264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	785b      	ldrb	r3, [r3, #1]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d177      	bne.n	8005364 <USB_EPStartXfer+0xb18>
 8005274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005278:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005284:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800528e:	b29b      	uxth	r3, r3
 8005290:	461a      	mov	r2, r3
 8005292:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005294:	4413      	add	r3, r2
 8005296:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800529c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	011a      	lsls	r2, r3, #4
 80052a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052a8:	4413      	add	r3, r2
 80052aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80052b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052be:	801a      	strh	r2, [r3, #0]
 80052c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80052c6:	d921      	bls.n	800530c <USB_EPStartXfer+0xac0>
 80052c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80052d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d104      	bne.n	80052e8 <USB_EPStartXfer+0xa9c>
 80052de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80052e2:	3b01      	subs	r3, #1
 80052e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80052e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	029b      	lsls	r3, r3, #10
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	4313      	orrs	r3, r2
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005304:	b29a      	uxth	r2, r3
 8005306:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005308:	801a      	strh	r2, [r3, #0]
 800530a:	e050      	b.n	80053ae <USB_EPStartXfer+0xb62>
 800530c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10a      	bne.n	800532a <USB_EPStartXfer+0xade>
 8005314:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800531e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005322:	b29a      	uxth	r2, r3
 8005324:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005326:	801a      	strh	r2, [r3, #0]
 8005328:	e041      	b.n	80053ae <USB_EPStartXfer+0xb62>
 800532a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800532e:	085b      	lsrs	r3, r3, #1
 8005330:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d004      	beq.n	800534a <USB_EPStartXfer+0xafe>
 8005340:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005344:	3301      	adds	r3, #1
 8005346:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800534a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	b29a      	uxth	r2, r3
 8005350:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005354:	b29b      	uxth	r3, r3
 8005356:	029b      	lsls	r3, r3, #10
 8005358:	b29b      	uxth	r3, r3
 800535a:	4313      	orrs	r3, r2
 800535c:	b29a      	uxth	r2, r3
 800535e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005360:	801a      	strh	r2, [r3, #0]
 8005362:	e024      	b.n	80053ae <USB_EPStartXfer+0xb62>
 8005364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	785b      	ldrb	r3, [r3, #1]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d11c      	bne.n	80053ae <USB_EPStartXfer+0xb62>
 8005374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005378:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005382:	b29b      	uxth	r3, r3
 8005384:	461a      	mov	r2, r3
 8005386:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005388:	4413      	add	r3, r2
 800538a:	673b      	str	r3, [r7, #112]	@ 0x70
 800538c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	011a      	lsls	r2, r3, #4
 800539a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800539c:	4413      	add	r3, r2
 800539e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80053ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	895b      	ldrh	r3, [r3, #10]
 80053ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6959      	ldr	r1, [r3, #20]
 80053ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80053d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80053d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80053dc:	6800      	ldr	r0, [r0, #0]
 80053de:	f000 ff24 	bl	800622a <USB_WritePMA>
 80053e2:	e0ca      	b.n	800557a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	785b      	ldrb	r3, [r3, #1]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d177      	bne.n	80054e4 <USB_EPStartXfer+0xc98>
 80053f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005404:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800540e:	b29b      	uxth	r3, r3
 8005410:	461a      	mov	r2, r3
 8005412:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005414:	4413      	add	r3, r2
 8005416:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800541c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	011a      	lsls	r2, r3, #4
 8005426:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005428:	4413      	add	r3, r2
 800542a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800542e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005430:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b29b      	uxth	r3, r3
 8005436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800543a:	b29a      	uxth	r2, r3
 800543c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800543e:	801a      	strh	r2, [r3, #0]
 8005440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005444:	2b3e      	cmp	r3, #62	@ 0x3e
 8005446:	d921      	bls.n	800548c <USB_EPStartXfer+0xc40>
 8005448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005456:	f003 031f 	and.w	r3, r3, #31
 800545a:	2b00      	cmp	r3, #0
 800545c:	d104      	bne.n	8005468 <USB_EPStartXfer+0xc1c>
 800545e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005462:	3b01      	subs	r3, #1
 8005464:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005468:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29a      	uxth	r2, r3
 800546e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005472:	b29b      	uxth	r3, r3
 8005474:	029b      	lsls	r3, r3, #10
 8005476:	b29b      	uxth	r3, r3
 8005478:	4313      	orrs	r3, r2
 800547a:	b29b      	uxth	r3, r3
 800547c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005484:	b29a      	uxth	r2, r3
 8005486:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005488:	801a      	strh	r2, [r3, #0]
 800548a:	e05c      	b.n	8005546 <USB_EPStartXfer+0xcfa>
 800548c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <USB_EPStartXfer+0xc5e>
 8005494:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29b      	uxth	r3, r3
 800549a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800549e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054a6:	801a      	strh	r2, [r3, #0]
 80054a8:	e04d      	b.n	8005546 <USB_EPStartXfer+0xcfa>
 80054aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ae:	085b      	lsrs	r3, r3, #1
 80054b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80054b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d004      	beq.n	80054ca <USB_EPStartXfer+0xc7e>
 80054c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80054c4:	3301      	adds	r3, #1
 80054c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80054ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	029b      	lsls	r3, r3, #10
 80054d8:	b29b      	uxth	r3, r3
 80054da:	4313      	orrs	r3, r2
 80054dc:	b29a      	uxth	r2, r3
 80054de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054e0:	801a      	strh	r2, [r3, #0]
 80054e2:	e030      	b.n	8005546 <USB_EPStartXfer+0xcfa>
 80054e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	785b      	ldrb	r3, [r3, #1]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d128      	bne.n	8005546 <USB_EPStartXfer+0xcfa>
 80054f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005506:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005510:	b29b      	uxth	r3, r3
 8005512:	461a      	mov	r2, r3
 8005514:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005518:	4413      	add	r3, r2
 800551a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800551e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	011a      	lsls	r2, r3, #4
 800552c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005530:	4413      	add	r3, r2
 8005532:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005536:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800553a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800553e:	b29a      	uxth	r2, r3
 8005540:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005544:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800554a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	891b      	ldrh	r3, [r3, #8]
 8005552:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800555a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6959      	ldr	r1, [r3, #20]
 8005562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005566:	b29b      	uxth	r3, r3
 8005568:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800556c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005570:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005574:	6800      	ldr	r0, [r0, #0]
 8005576:	f000 fe58 	bl	800622a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800557a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	b29b      	uxth	r3, r3
 8005598:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800559c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055a0:	817b      	strh	r3, [r7, #10]
 80055a2:	897b      	ldrh	r3, [r7, #10]
 80055a4:	f083 0310 	eor.w	r3, r3, #16
 80055a8:	817b      	strh	r3, [r7, #10]
 80055aa:	897b      	ldrh	r3, [r7, #10]
 80055ac:	f083 0320 	eor.w	r3, r3, #32
 80055b0:	817b      	strh	r3, [r7, #10]
 80055b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	441a      	add	r2, r3
 80055cc:	897b      	ldrh	r3, [r7, #10]
 80055ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055de:	b29b      	uxth	r3, r3
 80055e0:	8013      	strh	r3, [r2, #0]
 80055e2:	f000 bcde 	b.w	8005fa2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80055e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	7b1b      	ldrb	r3, [r3, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f040 80bb 	bne.w	800576e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80055f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699a      	ldr	r2, [r3, #24]
 8005604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	429a      	cmp	r2, r3
 8005612:	d917      	bls.n	8005644 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699a      	ldr	r2, [r3, #24]
 8005630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005634:	1ad2      	subs	r2, r2, r3
 8005636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800563a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	619a      	str	r2, [r3, #24]
 8005642:	e00e      	b.n	8005662 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2200      	movs	r2, #0
 8005660:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005666:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800567e:	b29b      	uxth	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005686:	4413      	add	r3, r2
 8005688:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800568c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	011a      	lsls	r2, r3, #4
 800569a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800569e:	4413      	add	r3, r2
 80056a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80056a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80056a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056ba:	801a      	strh	r2, [r3, #0]
 80056bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80056c2:	d924      	bls.n	800570e <USB_EPStartXfer+0xec2>
 80056c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c8:	095b      	lsrs	r3, r3, #5
 80056ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d104      	bne.n	80056e4 <USB_EPStartXfer+0xe98>
 80056da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80056de:	3b01      	subs	r3, #1
 80056e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	029b      	lsls	r3, r3, #10
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	4313      	orrs	r3, r2
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005702:	b29a      	uxth	r2, r3
 8005704:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005708:	801a      	strh	r2, [r3, #0]
 800570a:	f000 bc10 	b.w	8005f2e <USB_EPStartXfer+0x16e2>
 800570e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10c      	bne.n	8005730 <USB_EPStartXfer+0xee4>
 8005716:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005726:	b29a      	uxth	r2, r3
 8005728:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	e3fe      	b.n	8005f2e <USB_EPStartXfer+0x16e2>
 8005730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005734:	085b      	lsrs	r3, r3, #1
 8005736:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800573a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d004      	beq.n	8005750 <USB_EPStartXfer+0xf04>
 8005746:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800574a:	3301      	adds	r3, #1
 800574c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005750:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	b29a      	uxth	r2, r3
 8005758:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800575c:	b29b      	uxth	r3, r3
 800575e:	029b      	lsls	r3, r3, #10
 8005760:	b29b      	uxth	r3, r3
 8005762:	4313      	orrs	r3, r2
 8005764:	b29a      	uxth	r2, r3
 8005766:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800576a:	801a      	strh	r2, [r3, #0]
 800576c:	e3df      	b.n	8005f2e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800576e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	78db      	ldrb	r3, [r3, #3]
 800577a:	2b02      	cmp	r3, #2
 800577c:	f040 8218 	bne.w	8005bb0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	785b      	ldrb	r3, [r3, #1]
 800578c:	2b00      	cmp	r3, #0
 800578e:	f040 809d 	bne.w	80058cc <USB_EPStartXfer+0x1080>
 8005792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005796:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	461a      	mov	r2, r3
 80057b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057b6:	4413      	add	r3, r2
 80057b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	011a      	lsls	r2, r3, #4
 80057ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057ce:	4413      	add	r3, r2
 80057d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80057ea:	801a      	strh	r2, [r3, #0]
 80057ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80057fa:	d92b      	bls.n	8005854 <USB_EPStartXfer+0x1008>
 80057fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	095b      	lsrs	r3, r3, #5
 800580a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800580e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 031f 	and.w	r3, r3, #31
 800581e:	2b00      	cmp	r3, #0
 8005820:	d104      	bne.n	800582c <USB_EPStartXfer+0xfe0>
 8005822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005826:	3b01      	subs	r3, #1
 8005828:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800582c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	b29a      	uxth	r2, r3
 8005834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005838:	b29b      	uxth	r3, r3
 800583a:	029b      	lsls	r3, r3, #10
 800583c:	b29b      	uxth	r3, r3
 800583e:	4313      	orrs	r3, r2
 8005840:	b29b      	uxth	r3, r3
 8005842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800584a:	b29a      	uxth	r2, r3
 800584c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005850:	801a      	strh	r2, [r3, #0]
 8005852:	e070      	b.n	8005936 <USB_EPStartXfer+0x10ea>
 8005854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10c      	bne.n	800587e <USB_EPStartXfer+0x1032>
 8005864:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	b29b      	uxth	r3, r3
 800586c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005874:	b29a      	uxth	r2, r3
 8005876:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800587a:	801a      	strh	r2, [r3, #0]
 800587c:	e05b      	b.n	8005936 <USB_EPStartXfer+0x10ea>
 800587e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	085b      	lsrs	r3, r3, #1
 800588c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d004      	beq.n	80058ae <USB_EPStartXfer+0x1062>
 80058a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a8:	3301      	adds	r3, #1
 80058aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	029b      	lsls	r3, r3, #10
 80058be:	b29b      	uxth	r3, r3
 80058c0:	4313      	orrs	r3, r2
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80058c8:	801a      	strh	r2, [r3, #0]
 80058ca:	e034      	b.n	8005936 <USB_EPStartXfer+0x10ea>
 80058cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d12c      	bne.n	8005936 <USB_EPStartXfer+0x10ea>
 80058dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	461a      	mov	r2, r3
 80058fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005900:	4413      	add	r3, r2
 8005902:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800590a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	011a      	lsls	r2, r3, #4
 8005914:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005918:	4413      	add	r3, r2
 800591a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800591e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	b29a      	uxth	r2, r3
 8005930:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005934:	801a      	strh	r2, [r3, #0]
 8005936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	785b      	ldrb	r3, [r3, #1]
 8005950:	2b00      	cmp	r3, #0
 8005952:	f040 809d 	bne.w	8005a90 <USB_EPStartXfer+0x1244>
 8005956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005968:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005972:	b29b      	uxth	r3, r3
 8005974:	461a      	mov	r2, r3
 8005976:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800597a:	4413      	add	r3, r2
 800597c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	011a      	lsls	r2, r3, #4
 800598e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005992:	4413      	add	r3, r2
 8005994:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005998:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800599c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059ae:	801a      	strh	r2, [r3, #0]
 80059b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80059be:	d92b      	bls.n	8005a18 <USB_EPStartXfer+0x11cc>
 80059c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	095b      	lsrs	r3, r3, #5
 80059ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 031f 	and.w	r3, r3, #31
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d104      	bne.n	80059f0 <USB_EPStartXfer+0x11a4>
 80059e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059ea:	3b01      	subs	r3, #1
 80059ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	029b      	lsls	r3, r3, #10
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	4313      	orrs	r3, r2
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a14:	801a      	strh	r2, [r3, #0]
 8005a16:	e069      	b.n	8005aec <USB_EPStartXfer+0x12a0>
 8005a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10c      	bne.n	8005a42 <USB_EPStartXfer+0x11f6>
 8005a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a3e:	801a      	strh	r2, [r3, #0]
 8005a40:	e054      	b.n	8005aec <USB_EPStartXfer+0x12a0>
 8005a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	085b      	lsrs	r3, r3, #1
 8005a50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d004      	beq.n	8005a72 <USB_EPStartXfer+0x1226>
 8005a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	029b      	lsls	r3, r3, #10
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	4313      	orrs	r3, r2
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	e02d      	b.n	8005aec <USB_EPStartXfer+0x12a0>
 8005a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d125      	bne.n	8005aec <USB_EPStartXfer+0x12a0>
 8005aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	011a      	lsls	r2, r3, #4
 8005aca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005ace:	4413      	add	r3, r2
 8005ad0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ad4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005aea:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 8218 	beq.w	8005f2e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b1e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <USB_EPStartXfer+0x12ea>
 8005b2a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10d      	bne.n	8005b52 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b36:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f040 81f5 	bne.w	8005f2e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b44:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f040 81ee 	bne.w	8005f2e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b78:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	441a      	add	r2, r3
 8005b96:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005b9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ba6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	8013      	strh	r3, [r2, #0]
 8005bae:	e1be      	b.n	8005f2e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	78db      	ldrb	r3, [r3, #3]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	f040 81b4 	bne.w	8005f2a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699a      	ldr	r2, [r3, #24]
 8005bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d917      	bls.n	8005c0e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699a      	ldr	r2, [r3, #24]
 8005bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfe:	1ad2      	subs	r2, r2, r3
 8005c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	619a      	str	r2, [r3, #24]
 8005c0c:	e00e      	b.n	8005c2c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	785b      	ldrb	r3, [r3, #1]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f040 8085 	bne.w	8005d48 <USB_EPStartXfer+0x14fc>
 8005c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c62:	4413      	add	r3, r2
 8005c64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	011a      	lsls	r2, r3, #4
 8005c76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c96:	801a      	strh	r2, [r3, #0]
 8005c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c9e:	d923      	bls.n	8005ce8 <USB_EPStartXfer+0x149c>
 8005ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca4:	095b      	lsrs	r3, r3, #5
 8005ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d104      	bne.n	8005cc0 <USB_EPStartXfer+0x1474>
 8005cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005cc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	029b      	lsls	r3, r3, #10
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ce4:	801a      	strh	r2, [r3, #0]
 8005ce6:	e060      	b.n	8005daa <USB_EPStartXfer+0x155e>
 8005ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10c      	bne.n	8005d0a <USB_EPStartXfer+0x14be>
 8005cf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d06:	801a      	strh	r2, [r3, #0]
 8005d08:	e04f      	b.n	8005daa <USB_EPStartXfer+0x155e>
 8005d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0e:	085b      	lsrs	r3, r3, #1
 8005d10:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d004      	beq.n	8005d2a <USB_EPStartXfer+0x14de>
 8005d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d24:	3301      	adds	r3, #1
 8005d26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005d2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	029b      	lsls	r3, r3, #10
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d44:	801a      	strh	r2, [r3, #0]
 8005d46:	e030      	b.n	8005daa <USB_EPStartXfer+0x155e>
 8005d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	785b      	ldrb	r3, [r3, #1]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d128      	bne.n	8005daa <USB_EPStartXfer+0x155e>
 8005d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	461a      	mov	r2, r3
 8005d78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	011a      	lsls	r2, r3, #4
 8005d90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d94:	4413      	add	r3, r2
 8005d96:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d9a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005da8:	801a      	strh	r2, [r3, #0]
 8005daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	785b      	ldrb	r3, [r3, #1]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f040 8085 	bne.w	8005ed4 <USB_EPStartXfer+0x1688>
 8005dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ddc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	461a      	mov	r2, r3
 8005dea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005dee:	4413      	add	r3, r2
 8005df0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	011a      	lsls	r2, r3, #4
 8005e02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005e06:	4413      	add	r3, r2
 8005e08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e22:	801a      	strh	r2, [r3, #0]
 8005e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e28:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e2a:	d923      	bls.n	8005e74 <USB_EPStartXfer+0x1628>
 8005e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e30:	095b      	lsrs	r3, r3, #5
 8005e32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e3a:	f003 031f 	and.w	r3, r3, #31
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d104      	bne.n	8005e4c <USB_EPStartXfer+0x1600>
 8005e42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e46:	3b01      	subs	r3, #1
 8005e48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	029b      	lsls	r3, r3, #10
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e70:	801a      	strh	r2, [r3, #0]
 8005e72:	e05c      	b.n	8005f2e <USB_EPStartXfer+0x16e2>
 8005e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10c      	bne.n	8005e96 <USB_EPStartXfer+0x164a>
 8005e7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e92:	801a      	strh	r2, [r3, #0]
 8005e94:	e04b      	b.n	8005f2e <USB_EPStartXfer+0x16e2>
 8005e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e9a:	085b      	lsrs	r3, r3, #1
 8005e9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d004      	beq.n	8005eb6 <USB_EPStartXfer+0x166a>
 8005eac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005eb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	029b      	lsls	r3, r3, #10
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ed0:	801a      	strh	r2, [r3, #0]
 8005ed2:	e02c      	b.n	8005f2e <USB_EPStartXfer+0x16e2>
 8005ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	785b      	ldrb	r3, [r3, #1]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d124      	bne.n	8005f2e <USB_EPStartXfer+0x16e2>
 8005ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005efa:	4413      	add	r3, r2
 8005efc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	011a      	lsls	r2, r3, #4
 8005f0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f12:	4413      	add	r3, r2
 8005f14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005f26:	801a      	strh	r2, [r3, #0]
 8005f28:	e001      	b.n	8005f2e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e03a      	b.n	8005fa4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f54:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005f58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005f5c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005f60:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005f64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005f68:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f6c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	441a      	add	r2, r3
 8005f8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005f8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	785b      	ldrb	r3, [r3, #1]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d020      	beq.n	8006002 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fd6:	81bb      	strh	r3, [r7, #12]
 8005fd8:	89bb      	ldrh	r3, [r7, #12]
 8005fda:	f083 0310 	eor.w	r3, r3, #16
 8005fde:	81bb      	strh	r3, [r7, #12]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	441a      	add	r2, r3
 8005fea:	89bb      	ldrh	r3, [r7, #12]
 8005fec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ff0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ff4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	8013      	strh	r3, [r2, #0]
 8006000:	e01f      	b.n	8006042 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	b29b      	uxth	r3, r3
 8006010:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006018:	81fb      	strh	r3, [r7, #14]
 800601a:	89fb      	ldrh	r3, [r7, #14]
 800601c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006020:	81fb      	strh	r3, [r7, #14]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	441a      	add	r2, r3
 800602c:	89fb      	ldrh	r3, [r7, #14]
 800602e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006032:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800603a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800603e:	b29b      	uxth	r3, r3
 8006040:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	bc80      	pop	{r7}
 800604c:	4770      	bx	lr

0800604e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800604e:	b480      	push	{r7}
 8006050:	b087      	sub	sp, #28
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	7b1b      	ldrb	r3, [r3, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f040 809d 	bne.w	800619c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	785b      	ldrb	r3, [r3, #1]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d04c      	beq.n	8006104 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	823b      	strh	r3, [r7, #16]
 8006078:	8a3b      	ldrh	r3, [r7, #16]
 800607a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d01b      	beq.n	80060ba <USB_EPClearStall+0x6c>
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	b29b      	uxth	r3, r3
 8006090:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006098:	81fb      	strh	r3, [r7, #14]
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	441a      	add	r2, r3
 80060a4:	89fb      	ldrh	r3, [r7, #14]
 80060a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	78db      	ldrb	r3, [r3, #3]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d06c      	beq.n	800619c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060d8:	81bb      	strh	r3, [r7, #12]
 80060da:	89bb      	ldrh	r3, [r7, #12]
 80060dc:	f083 0320 	eor.w	r3, r3, #32
 80060e0:	81bb      	strh	r3, [r7, #12]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	441a      	add	r2, r3
 80060ec:	89bb      	ldrh	r3, [r7, #12]
 80060ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060fe:	b29b      	uxth	r3, r3
 8006100:	8013      	strh	r3, [r2, #0]
 8006102:	e04b      	b.n	800619c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	82fb      	strh	r3, [r7, #22]
 8006112:	8afb      	ldrh	r3, [r7, #22]
 8006114:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01b      	beq.n	8006154 <USB_EPClearStall+0x106>
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	b29b      	uxth	r3, r3
 800612a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800612e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006132:	82bb      	strh	r3, [r7, #20]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	441a      	add	r2, r3
 800613e:	8abb      	ldrh	r3, [r7, #20]
 8006140:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006144:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006148:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800614c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006150:	b29b      	uxth	r3, r3
 8006152:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	b29b      	uxth	r3, r3
 8006162:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800616a:	827b      	strh	r3, [r7, #18]
 800616c:	8a7b      	ldrh	r3, [r7, #18]
 800616e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006172:	827b      	strh	r3, [r7, #18]
 8006174:	8a7b      	ldrh	r3, [r7, #18]
 8006176:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800617a:	827b      	strh	r3, [r7, #18]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	441a      	add	r2, r3
 8006186:	8a7b      	ldrh	r3, [r7, #18]
 8006188:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800618c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006198:	b29b      	uxth	r3, r3
 800619a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bc80      	pop	{r7}
 80061a6:	4770      	bx	lr

080061a8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80061b4:	78fb      	ldrb	r3, [r7, #3]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d103      	bne.n	80061c2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2280      	movs	r2, #128	@ 0x80
 80061be:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bc80      	pop	{r7}
 80061cc:	4770      	bx	lr

080061ce <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	bc80      	pop	{r7}
 80061e0:	4770      	bx	lr

080061e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bc80      	pop	{r7}
 80061f4:	4770      	bx	lr

080061f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b085      	sub	sp, #20
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006204:	b29b      	uxth	r3, r3
 8006206:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006208:	68fb      	ldr	r3, [r7, #12]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	bc80      	pop	{r7}
 8006212:	4770      	bx	lr

08006214 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800622a:	b480      	push	{r7}
 800622c:	b08b      	sub	sp, #44	@ 0x2c
 800622e:	af00      	add	r7, sp, #0
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	4611      	mov	r1, r2
 8006236:	461a      	mov	r2, r3
 8006238:	460b      	mov	r3, r1
 800623a:	80fb      	strh	r3, [r7, #6]
 800623c:	4613      	mov	r3, r2
 800623e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006240:	88bb      	ldrh	r3, [r7, #4]
 8006242:	3301      	adds	r3, #1
 8006244:	085b      	lsrs	r3, r3, #1
 8006246:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006250:	88fb      	ldrh	r3, [r7, #6]
 8006252:	005a      	lsls	r2, r3, #1
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800625c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	627b      	str	r3, [r7, #36]	@ 0x24
 8006262:	e01f      	b.n	80062a4 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	3301      	adds	r3, #1
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	b21b      	sxth	r3, r3
 8006272:	021b      	lsls	r3, r3, #8
 8006274:	b21a      	sxth	r2, r3
 8006276:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800627a:	4313      	orrs	r3, r2
 800627c:	b21b      	sxth	r3, r3
 800627e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	8a7a      	ldrh	r2, [r7, #18]
 8006284:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	3302      	adds	r3, #2
 800628a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	3302      	adds	r3, #2
 8006290:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	3301      	adds	r3, #1
 8006296:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	3301      	adds	r3, #1
 800629c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a0:	3b01      	subs	r3, #1
 80062a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80062a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1dc      	bne.n	8006264 <USB_WritePMA+0x3a>
  }
}
 80062aa:	bf00      	nop
 80062ac:	bf00      	nop
 80062ae:	372c      	adds	r7, #44	@ 0x2c
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr

080062b6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b08b      	sub	sp, #44	@ 0x2c
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	4611      	mov	r1, r2
 80062c2:	461a      	mov	r2, r3
 80062c4:	460b      	mov	r3, r1
 80062c6:	80fb      	strh	r3, [r7, #6]
 80062c8:	4613      	mov	r3, r2
 80062ca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80062cc:	88bb      	ldrh	r3, [r7, #4]
 80062ce:	085b      	lsrs	r3, r3, #1
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062dc:	88fb      	ldrh	r3, [r7, #6]
 80062de:	005a      	lsls	r2, r3, #1
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062e8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ee:	e01b      	b.n	8006328 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	3302      	adds	r3, #2
 80062fc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	b2da      	uxtb	r2, r3
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	3301      	adds	r3, #1
 800630a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	0a1b      	lsrs	r3, r3, #8
 8006310:	b2da      	uxtb	r2, r3
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	3301      	adds	r3, #1
 800631a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	3302      	adds	r3, #2
 8006320:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	3b01      	subs	r3, #1
 8006326:	627b      	str	r3, [r7, #36]	@ 0x24
 8006328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1e0      	bne.n	80062f0 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800632e:	88bb      	ldrh	r3, [r7, #4]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	b29b      	uxth	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d007      	beq.n	800634a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	b29b      	uxth	r3, r3
 8006340:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	b2da      	uxtb	r2, r3
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	701a      	strb	r2, [r3, #0]
  }
}
 800634a:	bf00      	nop
 800634c:	372c      	adds	r7, #44	@ 0x2c
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr

08006354 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006360:	2300      	movs	r3, #0
 8006362:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	7c1b      	ldrb	r3, [r3, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d115      	bne.n	8006398 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800636c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006370:	2202      	movs	r2, #2
 8006372:	2181      	movs	r1, #129	@ 0x81
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 fe2c 	bl	8007fd2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006380:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006384:	2202      	movs	r2, #2
 8006386:	2101      	movs	r1, #1
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f001 fe22 	bl	8007fd2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006396:	e012      	b.n	80063be <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006398:	2340      	movs	r3, #64	@ 0x40
 800639a:	2202      	movs	r2, #2
 800639c:	2181      	movs	r1, #129	@ 0x81
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f001 fe17 	bl	8007fd2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063aa:	2340      	movs	r3, #64	@ 0x40
 80063ac:	2202      	movs	r2, #2
 80063ae:	2101      	movs	r1, #1
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 fe0e 	bl	8007fd2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063be:	2308      	movs	r3, #8
 80063c0:	2203      	movs	r2, #3
 80063c2:	2182      	movs	r1, #130	@ 0x82
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 fe04 	bl	8007fd2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80063d0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80063d4:	f001 ff24 	bl	8008220 <USBD_static_malloc>
 80063d8:	4602      	mov	r2, r0
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d102      	bne.n	80063f0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80063ea:	2301      	movs	r3, #1
 80063ec:	73fb      	strb	r3, [r7, #15]
 80063ee:	e026      	b.n	800643e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063f6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2200      	movs	r2, #0
 8006406:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2200      	movs	r2, #0
 800640e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	7c1b      	ldrb	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d109      	bne.n	800642e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006420:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006424:	2101      	movs	r1, #1
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 fec3 	bl	80081b2 <USBD_LL_PrepareReceive>
 800642c:	e007      	b.n	800643e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006434:	2340      	movs	r3, #64	@ 0x40
 8006436:	2101      	movs	r1, #1
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 feba 	bl	80081b2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800643e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	460b      	mov	r3, r1
 8006452:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006458:	2181      	movs	r1, #129	@ 0x81
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 fddf 	bl	800801e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006466:	2101      	movs	r1, #1
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 fdd8 	bl	800801e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006476:	2182      	movs	r1, #130	@ 0x82
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f001 fdd0 	bl	800801e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00e      	beq.n	80064ac <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800649e:	4618      	mov	r0, r3
 80064a0:	f001 feca 	bl	8008238 <USBD_static_free>
    pdev->pClassData = NULL;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b086      	sub	sp, #24
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064c6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d039      	beq.n	8006554 <USBD_CDC_Setup+0x9e>
 80064e0:	2b20      	cmp	r3, #32
 80064e2:	d17f      	bne.n	80065e4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	88db      	ldrh	r3, [r3, #6]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d029      	beq.n	8006540 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	b25b      	sxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	da11      	bge.n	800651a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006502:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	88d2      	ldrh	r2, [r2, #6]
 8006508:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800650a:	6939      	ldr	r1, [r7, #16]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	88db      	ldrh	r3, [r3, #6]
 8006510:	461a      	mov	r2, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f001 f9d6 	bl	80078c4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006518:	e06b      	b.n	80065f2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	785a      	ldrb	r2, [r3, #1]
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	88db      	ldrh	r3, [r3, #6]
 8006528:	b2da      	uxtb	r2, r3
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006530:	6939      	ldr	r1, [r7, #16]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	88db      	ldrh	r3, [r3, #6]
 8006536:	461a      	mov	r2, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 f9f1 	bl	8007920 <USBD_CtlPrepareRx>
      break;
 800653e:	e058      	b.n	80065f2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	7850      	ldrb	r0, [r2, #1]
 800654c:	2200      	movs	r2, #0
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	4798      	blx	r3
      break;
 8006552:	e04e      	b.n	80065f2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	785b      	ldrb	r3, [r3, #1]
 8006558:	2b0b      	cmp	r3, #11
 800655a:	d02e      	beq.n	80065ba <USBD_CDC_Setup+0x104>
 800655c:	2b0b      	cmp	r3, #11
 800655e:	dc38      	bgt.n	80065d2 <USBD_CDC_Setup+0x11c>
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <USBD_CDC_Setup+0xb4>
 8006564:	2b0a      	cmp	r3, #10
 8006566:	d014      	beq.n	8006592 <USBD_CDC_Setup+0xdc>
 8006568:	e033      	b.n	80065d2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006570:	2b03      	cmp	r3, #3
 8006572:	d107      	bne.n	8006584 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006574:	f107 030c 	add.w	r3, r7, #12
 8006578:	2202      	movs	r2, #2
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 f9a1 	bl	80078c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006582:	e02e      	b.n	80065e2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f001 f932 	bl	80077f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800658c:	2302      	movs	r3, #2
 800658e:	75fb      	strb	r3, [r7, #23]
          break;
 8006590:	e027      	b.n	80065e2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006598:	2b03      	cmp	r3, #3
 800659a:	d107      	bne.n	80065ac <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800659c:	f107 030f 	add.w	r3, r7, #15
 80065a0:	2201      	movs	r2, #1
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 f98d 	bl	80078c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065aa:	e01a      	b.n	80065e2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f001 f91e 	bl	80077f0 <USBD_CtlError>
            ret = USBD_FAIL;
 80065b4:	2302      	movs	r3, #2
 80065b6:	75fb      	strb	r3, [r7, #23]
          break;
 80065b8:	e013      	b.n	80065e2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d00d      	beq.n	80065e0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f001 f912 	bl	80077f0 <USBD_CtlError>
            ret = USBD_FAIL;
 80065cc:	2302      	movs	r3, #2
 80065ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80065d0:	e006      	b.n	80065e0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80065d2:	6839      	ldr	r1, [r7, #0]
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f001 f90b 	bl	80077f0 <USBD_CtlError>
          ret = USBD_FAIL;
 80065da:	2302      	movs	r3, #2
 80065dc:	75fb      	strb	r3, [r7, #23]
          break;
 80065de:	e000      	b.n	80065e2 <USBD_CDC_Setup+0x12c>
          break;
 80065e0:	bf00      	nop
      }
      break;
 80065e2:	e006      	b.n	80065f2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 f902 	bl	80077f0 <USBD_CtlError>
      ret = USBD_FAIL;
 80065ec:	2302      	movs	r3, #2
 80065ee:	75fb      	strb	r3, [r7, #23]
      break;
 80065f0:	bf00      	nop
  }

  return ret;
 80065f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800660e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006616:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800661e:	2b00      	cmp	r3, #0
 8006620:	d03a      	beq.n	8006698 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006622:	78fa      	ldrb	r2, [r7, #3]
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	4613      	mov	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	331c      	adds	r3, #28
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d029      	beq.n	800668c <USBD_CDC_DataIn+0x90>
 8006638:	78fa      	ldrb	r2, [r7, #3]
 800663a:	6879      	ldr	r1, [r7, #4]
 800663c:	4613      	mov	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	440b      	add	r3, r1
 8006646:	331c      	adds	r3, #28
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	78f9      	ldrb	r1, [r7, #3]
 800664c:	68b8      	ldr	r0, [r7, #8]
 800664e:	460b      	mov	r3, r1
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	440b      	add	r3, r1
 8006654:	00db      	lsls	r3, r3, #3
 8006656:	4403      	add	r3, r0
 8006658:	3320      	adds	r3, #32
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006660:	fb01 f303 	mul.w	r3, r1, r3
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d110      	bne.n	800668c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800666a:	78fa      	ldrb	r2, [r7, #3]
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	440b      	add	r3, r1
 8006678:	331c      	adds	r3, #28
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800667e:	78f9      	ldrb	r1, [r7, #3]
 8006680:	2300      	movs	r3, #0
 8006682:	2200      	movs	r2, #0
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f001 fd71 	bl	800816c <USBD_LL_Transmit>
 800668a:	e003      	b.n	8006694 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006694:	2300      	movs	r3, #0
 8006696:	e000      	b.n	800669a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006698:	2302      	movs	r3, #2
  }
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	460b      	mov	r3, r1
 80066ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80066b6:	78fb      	ldrb	r3, [r7, #3]
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 fd9c 	bl	80081f8 <USBD_LL_GetRxDataSize>
 80066c0:	4602      	mov	r2, r0
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00d      	beq.n	80066ee <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80066e6:	4611      	mov	r1, r2
 80066e8:	4798      	blx	r3

    return USBD_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	e000      	b.n	80066f0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80066ee:	2302      	movs	r3, #2
  }
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006706:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800670e:	2b00      	cmp	r3, #0
 8006710:	d014      	beq.n	800673c <USBD_CDC_EP0_RxReady+0x44>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006718:	2bff      	cmp	r3, #255	@ 0xff
 800671a:	d00f      	beq.n	800673c <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800672a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006732:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	22ff      	movs	r2, #255	@ 0xff
 8006738:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2243      	movs	r2, #67	@ 0x43
 8006754:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006756:	4b03      	ldr	r3, [pc, #12]	@ (8006764 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006758:	4618      	mov	r0, r3
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	bc80      	pop	{r7}
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	20000094 	.word	0x20000094

08006768 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2243      	movs	r2, #67	@ 0x43
 8006774:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006776:	4b03      	ldr	r3, [pc, #12]	@ (8006784 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006778:	4618      	mov	r0, r3
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20000050 	.word	0x20000050

08006788 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2243      	movs	r2, #67	@ 0x43
 8006794:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006796:	4b03      	ldr	r3, [pc, #12]	@ (80067a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	200000d8 	.word	0x200000d8

080067a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	220a      	movs	r2, #10
 80067b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80067b6:	4b03      	ldr	r3, [pc, #12]	@ (80067c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	2000000c 	.word	0x2000000c

080067c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80067d2:	2302      	movs	r3, #2
 80067d4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bc80      	pop	{r7}
 80067f2:	4770      	bx	lr

080067f4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	4613      	mov	r3, r2
 8006800:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006808:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006812:	88fa      	ldrh	r2, [r7, #6]
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr

08006826 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006836:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	bc80      	pop	{r7}
 800684a:	4770      	bx	lr

0800684c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800685a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006862:	2b00      	cmp	r3, #0
 8006864:	d017      	beq.n	8006896 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	7c1b      	ldrb	r3, [r3, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d109      	bne.n	8006882 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006874:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006878:	2101      	movs	r1, #1
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f001 fc99 	bl	80081b2 <USBD_LL_PrepareReceive>
 8006880:	e007      	b.n	8006892 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006888:	2340      	movs	r3, #64	@ 0x40
 800688a:	2101      	movs	r1, #1
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 fc90 	bl	80081b2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	e000      	b.n	8006898 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006896:	2302      	movs	r3, #2
  }
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	4613      	mov	r3, r2
 80068ac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80068b4:	2302      	movs	r3, #2
 80068b6:	e01a      	b.n	80068ee <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	79fa      	ldrb	r2, [r7, #7]
 80068e4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f001 fafe 	bl	8007ee8 <USBD_LL_Init>

  return USBD_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b085      	sub	sp, #20
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d006      	beq.n	8006918 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]
 8006916:	e001      	b.n	800691c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006918:	2302      	movs	r3, #2
 800691a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800691c:	7bfb      	ldrb	r3, [r7, #15]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr

08006928 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f001 fb33 	bl	8007f9c <USBD_LL_Start>

  return USBD_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	bc80      	pop	{r7}
 8006952:	4770      	bx	lr

08006954 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006960:	2302      	movs	r3, #2
 8006962:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00c      	beq.n	8006988 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	78fa      	ldrb	r2, [r7, #3]
 8006978:	4611      	mov	r1, r2
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	4798      	blx	r3
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	460b      	mov	r3, r1
 800699c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	78fa      	ldrb	r2, [r7, #3]
 80069a8:	4611      	mov	r1, r2
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	4798      	blx	r3

  return USBD_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 fed7 	bl	800777e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80069de:	461a      	mov	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80069ec:	f003 031f 	and.w	r3, r3, #31
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d016      	beq.n	8006a22 <USBD_LL_SetupStage+0x6a>
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d81c      	bhi.n	8006a32 <USBD_LL_SetupStage+0x7a>
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <USBD_LL_SetupStage+0x4a>
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d008      	beq.n	8006a12 <USBD_LL_SetupStage+0x5a>
 8006a00:	e017      	b.n	8006a32 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f9ca 	bl	8006da4 <USBD_StdDevReq>
      break;
 8006a10:	e01a      	b.n	8006a48 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa2c 	bl	8006e78 <USBD_StdItfReq>
      break;
 8006a20:	e012      	b.n	8006a48 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fa6c 	bl	8006f08 <USBD_StdEPReq>
      break;
 8006a30:	e00a      	b.n	8006a48 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006a38:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 fb0b 	bl	800805c <USBD_LL_StallEP>
      break;
 8006a46:	bf00      	nop
  }

  return USBD_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b086      	sub	sp, #24
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	60f8      	str	r0, [r7, #12]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	607a      	str	r2, [r7, #4]
 8006a5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a60:	7afb      	ldrb	r3, [r7, #11]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d14b      	bne.n	8006afe <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006a6c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d134      	bne.n	8006ae2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d919      	bls.n	8006ab8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	68da      	ldr	r2, [r3, #12]
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	1ad2      	subs	r2, r2, r3
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d203      	bcs.n	8006aa6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	e002      	b.n	8006aac <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	461a      	mov	r2, r3
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 ff53 	bl	800795c <USBD_CtlContinueRx>
 8006ab6:	e038      	b.n	8006b2a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d105      	bne.n	8006ada <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 ff50 	bl	8007980 <USBD_CtlSendStatus>
 8006ae0:	e023      	b.n	8006b2a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ae8:	2b05      	cmp	r3, #5
 8006aea:	d11e      	bne.n	8006b2a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006af4:	2100      	movs	r1, #0
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f001 fab0 	bl	800805c <USBD_LL_StallEP>
 8006afc:	e015      	b.n	8006b2a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00d      	beq.n	8006b26 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b10:	2b03      	cmp	r3, #3
 8006b12:	d108      	bne.n	8006b26 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	7afa      	ldrb	r2, [r7, #11]
 8006b1e:	4611      	mov	r1, r2
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	4798      	blx	r3
 8006b24:	e001      	b.n	8006b2a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b26:	2302      	movs	r3, #2
 8006b28:	e000      	b.n	8006b2c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b42:	7afb      	ldrb	r3, [r7, #11]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d17f      	bne.n	8006c48 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	3314      	adds	r3, #20
 8006b4c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d15c      	bne.n	8006c12 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d915      	bls.n	8006b90 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	68da      	ldr	r2, [r3, #12]
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	1ad2      	subs	r2, r2, r3
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	461a      	mov	r2, r3
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 febd 	bl	80078fc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b82:	2300      	movs	r3, #0
 8006b84:	2200      	movs	r2, #0
 8006b86:	2100      	movs	r1, #0
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f001 fb12 	bl	80081b2 <USBD_LL_PrepareReceive>
 8006b8e:	e04e      	b.n	8006c2e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	6912      	ldr	r2, [r2, #16]
 8006b98:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b9c:	fb01 f202 	mul.w	r2, r1, r2
 8006ba0:	1a9b      	subs	r3, r3, r2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d11c      	bne.n	8006be0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	689a      	ldr	r2, [r3, #8]
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d316      	bcc.n	8006be0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d20f      	bcs.n	8006be0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 fe99 	bl	80078fc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f001 faea 	bl	80081b2 <USBD_LL_PrepareReceive>
 8006bde:	e026      	b.n	8006c2e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00a      	beq.n	8006c02 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d105      	bne.n	8006c02 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006c02:	2180      	movs	r1, #128	@ 0x80
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f001 fa29 	bl	800805c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 fecb 	bl	80079a6 <USBD_CtlReceiveStatus>
 8006c10:	e00d      	b.n	8006c2e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	d004      	beq.n	8006c26 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d103      	bne.n	8006c2e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006c26:	2180      	movs	r1, #128	@ 0x80
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f001 fa17 	bl	800805c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d11d      	bne.n	8006c74 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f7ff fe81 	bl	8006940 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006c46:	e015      	b.n	8006c74 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00d      	beq.n	8006c70 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d108      	bne.n	8006c70 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	7afa      	ldrb	r2, [r7, #11]
 8006c68:	4611      	mov	r1, r2
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	4798      	blx	r3
 8006c6e:	e001      	b.n	8006c74 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c70:	2302      	movs	r3, #2
 8006c72:	e000      	b.n	8006c76 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b082      	sub	sp, #8
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c86:	2340      	movs	r3, #64	@ 0x40
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 f9a0 	bl	8007fd2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2240      	movs	r2, #64	@ 0x40
 8006c9e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ca2:	2340      	movs	r3, #64	@ 0x40
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2180      	movs	r1, #128	@ 0x80
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f001 f992 	bl	8007fd2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2240      	movs	r2, #64	@ 0x40
 8006cb8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d009      	beq.n	8006cf6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6852      	ldr	r2, [r2, #4]
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
  }

  return USBD_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	78fa      	ldrb	r2, [r7, #3]
 8006d10:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bc80      	pop	{r7}
 8006d1c:	4770      	bx	lr

08006d1e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2204      	movs	r2, #4
 8006d36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr

08006d46 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	d105      	bne.n	8006d64 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bc80      	pop	{r7}
 8006d6e:	4770      	bx	lr

08006d70 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d10b      	bne.n	8006d9a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d005      	beq.n	8006d9a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006dba:	2b40      	cmp	r3, #64	@ 0x40
 8006dbc:	d005      	beq.n	8006dca <USBD_StdDevReq+0x26>
 8006dbe:	2b40      	cmp	r3, #64	@ 0x40
 8006dc0:	d84f      	bhi.n	8006e62 <USBD_StdDevReq+0xbe>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d009      	beq.n	8006dda <USBD_StdDevReq+0x36>
 8006dc6:	2b20      	cmp	r3, #32
 8006dc8:	d14b      	bne.n	8006e62 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	4798      	blx	r3
      break;
 8006dd8:	e048      	b.n	8006e6c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	785b      	ldrb	r3, [r3, #1]
 8006dde:	2b09      	cmp	r3, #9
 8006de0:	d839      	bhi.n	8006e56 <USBD_StdDevReq+0xb2>
 8006de2:	a201      	add	r2, pc, #4	@ (adr r2, 8006de8 <USBD_StdDevReq+0x44>)
 8006de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de8:	08006e39 	.word	0x08006e39
 8006dec:	08006e4d 	.word	0x08006e4d
 8006df0:	08006e57 	.word	0x08006e57
 8006df4:	08006e43 	.word	0x08006e43
 8006df8:	08006e57 	.word	0x08006e57
 8006dfc:	08006e1b 	.word	0x08006e1b
 8006e00:	08006e11 	.word	0x08006e11
 8006e04:	08006e57 	.word	0x08006e57
 8006e08:	08006e2f 	.word	0x08006e2f
 8006e0c:	08006e25 	.word	0x08006e25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f9dc 	bl	80071d0 <USBD_GetDescriptor>
          break;
 8006e18:	e022      	b.n	8006e60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e1a:	6839      	ldr	r1, [r7, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fb3f 	bl	80074a0 <USBD_SetAddress>
          break;
 8006e22:	e01d      	b.n	8006e60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fb7e 	bl	8007528 <USBD_SetConfig>
          break;
 8006e2c:	e018      	b.n	8006e60 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fc07 	bl	8007644 <USBD_GetConfig>
          break;
 8006e36:	e013      	b.n	8006e60 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e38:	6839      	ldr	r1, [r7, #0]
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fc37 	bl	80076ae <USBD_GetStatus>
          break;
 8006e40:	e00e      	b.n	8006e60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fc65 	bl	8007714 <USBD_SetFeature>
          break;
 8006e4a:	e009      	b.n	8006e60 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fc74 	bl	800773c <USBD_ClrFeature>
          break;
 8006e54:	e004      	b.n	8006e60 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fcc9 	bl	80077f0 <USBD_CtlError>
          break;
 8006e5e:	bf00      	nop
      }
      break;
 8006e60:	e004      	b.n	8006e6c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fcc3 	bl	80077f0 <USBD_CtlError>
      break;
 8006e6a:	bf00      	nop
  }

  return ret;
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop

08006e78 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e8e:	2b40      	cmp	r3, #64	@ 0x40
 8006e90:	d005      	beq.n	8006e9e <USBD_StdItfReq+0x26>
 8006e92:	2b40      	cmp	r3, #64	@ 0x40
 8006e94:	d82e      	bhi.n	8006ef4 <USBD_StdItfReq+0x7c>
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <USBD_StdItfReq+0x26>
 8006e9a:	2b20      	cmp	r3, #32
 8006e9c:	d12a      	bne.n	8006ef4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d81d      	bhi.n	8006ee6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	889b      	ldrh	r3, [r3, #4]
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d813      	bhi.n	8006edc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	4798      	blx	r3
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	88db      	ldrh	r3, [r3, #6]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d110      	bne.n	8006ef0 <USBD_StdItfReq+0x78>
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10d      	bne.n	8006ef0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fd53 	bl	8007980 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006eda:	e009      	b.n	8006ef0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fc86 	bl	80077f0 <USBD_CtlError>
          break;
 8006ee4:	e004      	b.n	8006ef0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fc81 	bl	80077f0 <USBD_CtlError>
          break;
 8006eee:	e000      	b.n	8006ef2 <USBD_StdItfReq+0x7a>
          break;
 8006ef0:	bf00      	nop
      }
      break;
 8006ef2:	e004      	b.n	8006efe <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fc7a 	bl	80077f0 <USBD_CtlError>
      break;
 8006efc:	bf00      	nop
  }

  return USBD_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	889b      	ldrh	r3, [r3, #4]
 8006f1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f24:	2b40      	cmp	r3, #64	@ 0x40
 8006f26:	d007      	beq.n	8006f38 <USBD_StdEPReq+0x30>
 8006f28:	2b40      	cmp	r3, #64	@ 0x40
 8006f2a:	f200 8146 	bhi.w	80071ba <USBD_StdEPReq+0x2b2>
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <USBD_StdEPReq+0x40>
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	f040 8141 	bne.w	80071ba <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	4798      	blx	r3
      break;
 8006f46:	e13d      	b.n	80071c4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f50:	2b20      	cmp	r3, #32
 8006f52:	d10a      	bne.n	8006f6a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3
 8006f62:	4603      	mov	r3, r0
 8006f64:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	e12d      	b.n	80071c6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	785b      	ldrb	r3, [r3, #1]
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d007      	beq.n	8006f82 <USBD_StdEPReq+0x7a>
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	f300 811b 	bgt.w	80071ae <USBD_StdEPReq+0x2a6>
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d072      	beq.n	8007062 <USBD_StdEPReq+0x15a>
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d03a      	beq.n	8006ff6 <USBD_StdEPReq+0xee>
 8006f80:	e115      	b.n	80071ae <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d002      	beq.n	8006f92 <USBD_StdEPReq+0x8a>
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d015      	beq.n	8006fbc <USBD_StdEPReq+0xb4>
 8006f90:	e02b      	b.n	8006fea <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00c      	beq.n	8006fb2 <USBD_StdEPReq+0xaa>
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
 8006f9a:	2b80      	cmp	r3, #128	@ 0x80
 8006f9c:	d009      	beq.n	8006fb2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f9e:	7bbb      	ldrb	r3, [r7, #14]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 f85a 	bl	800805c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006fa8:	2180      	movs	r1, #128	@ 0x80
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f001 f856 	bl	800805c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fb0:	e020      	b.n	8006ff4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fc1b 	bl	80077f0 <USBD_CtlError>
              break;
 8006fba:	e01b      	b.n	8006ff4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	885b      	ldrh	r3, [r3, #2]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10e      	bne.n	8006fe2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00b      	beq.n	8006fe2 <USBD_StdEPReq+0xda>
 8006fca:	7bbb      	ldrb	r3, [r7, #14]
 8006fcc:	2b80      	cmp	r3, #128	@ 0x80
 8006fce:	d008      	beq.n	8006fe2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	88db      	ldrh	r3, [r3, #6]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d104      	bne.n	8006fe2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 f83d 	bl	800805c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fccc 	bl	8007980 <USBD_CtlSendStatus>

              break;
 8006fe8:	e004      	b.n	8006ff4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fbff 	bl	80077f0 <USBD_CtlError>
              break;
 8006ff2:	bf00      	nop
          }
          break;
 8006ff4:	e0e0      	b.n	80071b8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d002      	beq.n	8007006 <USBD_StdEPReq+0xfe>
 8007000:	2b03      	cmp	r3, #3
 8007002:	d015      	beq.n	8007030 <USBD_StdEPReq+0x128>
 8007004:	e026      	b.n	8007054 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00c      	beq.n	8007026 <USBD_StdEPReq+0x11e>
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	2b80      	cmp	r3, #128	@ 0x80
 8007010:	d009      	beq.n	8007026 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007012:	7bbb      	ldrb	r3, [r7, #14]
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 f820 	bl	800805c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800701c:	2180      	movs	r1, #128	@ 0x80
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 f81c 	bl	800805c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007024:	e01c      	b.n	8007060 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fbe1 	bl	80077f0 <USBD_CtlError>
              break;
 800702e:	e017      	b.n	8007060 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	885b      	ldrh	r3, [r3, #2]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d112      	bne.n	800705e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007038:	7bbb      	ldrb	r3, [r7, #14]
 800703a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800703e:	2b00      	cmp	r3, #0
 8007040:	d004      	beq.n	800704c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007042:	7bbb      	ldrb	r3, [r7, #14]
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f001 f827 	bl	800809a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fc97 	bl	8007980 <USBD_CtlSendStatus>
              }
              break;
 8007052:	e004      	b.n	800705e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fbca 	bl	80077f0 <USBD_CtlError>
              break;
 800705c:	e000      	b.n	8007060 <USBD_StdEPReq+0x158>
              break;
 800705e:	bf00      	nop
          }
          break;
 8007060:	e0aa      	b.n	80071b8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007068:	2b02      	cmp	r3, #2
 800706a:	d002      	beq.n	8007072 <USBD_StdEPReq+0x16a>
 800706c:	2b03      	cmp	r3, #3
 800706e:	d032      	beq.n	80070d6 <USBD_StdEPReq+0x1ce>
 8007070:	e097      	b.n	80071a2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007072:	7bbb      	ldrb	r3, [r7, #14]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d007      	beq.n	8007088 <USBD_StdEPReq+0x180>
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	2b80      	cmp	r3, #128	@ 0x80
 800707c:	d004      	beq.n	8007088 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fbb5 	bl	80077f0 <USBD_CtlError>
                break;
 8007086:	e091      	b.n	80071ac <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800708c:	2b00      	cmp	r3, #0
 800708e:	da0b      	bge.n	80070a8 <USBD_StdEPReq+0x1a0>
 8007090:	7bbb      	ldrb	r3, [r7, #14]
 8007092:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	3310      	adds	r3, #16
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	4413      	add	r3, r2
 80070a4:	3304      	adds	r3, #4
 80070a6:	e00b      	b.n	80070c0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070ae:	4613      	mov	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	4413      	add	r3, r2
 80070be:	3304      	adds	r3, #4
 80070c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2202      	movs	r2, #2
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fbf8 	bl	80078c4 <USBD_CtlSendData>
              break;
 80070d4:	e06a      	b.n	80071ac <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80070d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	da11      	bge.n	8007102 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80070de:	7bbb      	ldrb	r3, [r7, #14]
 80070e0:	f003 020f 	and.w	r2, r3, #15
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	440b      	add	r3, r1
 80070f0:	3318      	adds	r3, #24
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d117      	bne.n	8007128 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fb78 	bl	80077f0 <USBD_CtlError>
                  break;
 8007100:	e054      	b.n	80071ac <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007102:	7bbb      	ldrb	r3, [r7, #14]
 8007104:	f003 020f 	and.w	r2, r3, #15
 8007108:	6879      	ldr	r1, [r7, #4]
 800710a:	4613      	mov	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	440b      	add	r3, r1
 8007114:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d104      	bne.n	8007128 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fb65 	bl	80077f0 <USBD_CtlError>
                  break;
 8007126:	e041      	b.n	80071ac <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800712c:	2b00      	cmp	r3, #0
 800712e:	da0b      	bge.n	8007148 <USBD_StdEPReq+0x240>
 8007130:	7bbb      	ldrb	r3, [r7, #14]
 8007132:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	3310      	adds	r3, #16
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	4413      	add	r3, r2
 8007144:	3304      	adds	r3, #4
 8007146:	e00b      	b.n	8007160 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007148:	7bbb      	ldrb	r3, [r7, #14]
 800714a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800714e:	4613      	mov	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	4413      	add	r3, r2
 800715e:	3304      	adds	r3, #4
 8007160:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007162:	7bbb      	ldrb	r3, [r7, #14]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <USBD_StdEPReq+0x266>
 8007168:	7bbb      	ldrb	r3, [r7, #14]
 800716a:	2b80      	cmp	r3, #128	@ 0x80
 800716c:	d103      	bne.n	8007176 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	e00e      	b.n	8007194 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007176:	7bbb      	ldrb	r3, [r7, #14]
 8007178:	4619      	mov	r1, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 ffac 	bl	80080d8 <USBD_LL_IsStallEP>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2201      	movs	r2, #1
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	e002      	b.n	8007194 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2202      	movs	r2, #2
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fb92 	bl	80078c4 <USBD_CtlSendData>
              break;
 80071a0:	e004      	b.n	80071ac <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fb23 	bl	80077f0 <USBD_CtlError>
              break;
 80071aa:	bf00      	nop
          }
          break;
 80071ac:	e004      	b.n	80071b8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fb1d 	bl	80077f0 <USBD_CtlError>
          break;
 80071b6:	bf00      	nop
      }
      break;
 80071b8:	e004      	b.n	80071c4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80071ba:	6839      	ldr	r1, [r7, #0]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fb17 	bl	80077f0 <USBD_CtlError>
      break;
 80071c2:	bf00      	nop
  }

  return ret;
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	885b      	ldrh	r3, [r3, #2]
 80071ea:	0a1b      	lsrs	r3, r3, #8
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	2b06      	cmp	r3, #6
 80071f2:	f200 8128 	bhi.w	8007446 <USBD_GetDescriptor+0x276>
 80071f6:	a201      	add	r2, pc, #4	@ (adr r2, 80071fc <USBD_GetDescriptor+0x2c>)
 80071f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fc:	08007219 	.word	0x08007219
 8007200:	08007231 	.word	0x08007231
 8007204:	08007271 	.word	0x08007271
 8007208:	08007447 	.word	0x08007447
 800720c:	08007447 	.word	0x08007447
 8007210:	080073e7 	.word	0x080073e7
 8007214:	08007413 	.word	0x08007413
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	7c12      	ldrb	r2, [r2, #16]
 8007224:	f107 0108 	add.w	r1, r7, #8
 8007228:	4610      	mov	r0, r2
 800722a:	4798      	blx	r3
 800722c:	60f8      	str	r0, [r7, #12]
      break;
 800722e:	e112      	b.n	8007456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	7c1b      	ldrb	r3, [r3, #16]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10d      	bne.n	8007254 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800723e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007240:	f107 0208 	add.w	r2, r7, #8
 8007244:	4610      	mov	r0, r2
 8007246:	4798      	blx	r3
 8007248:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3301      	adds	r3, #1
 800724e:	2202      	movs	r2, #2
 8007250:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007252:	e100      	b.n	8007456 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800725a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725c:	f107 0208 	add.w	r2, r7, #8
 8007260:	4610      	mov	r0, r2
 8007262:	4798      	blx	r3
 8007264:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3301      	adds	r3, #1
 800726a:	2202      	movs	r2, #2
 800726c:	701a      	strb	r2, [r3, #0]
      break;
 800726e:	e0f2      	b.n	8007456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	885b      	ldrh	r3, [r3, #2]
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b05      	cmp	r3, #5
 8007278:	f200 80ac 	bhi.w	80073d4 <USBD_GetDescriptor+0x204>
 800727c:	a201      	add	r2, pc, #4	@ (adr r2, 8007284 <USBD_GetDescriptor+0xb4>)
 800727e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007282:	bf00      	nop
 8007284:	0800729d 	.word	0x0800729d
 8007288:	080072d1 	.word	0x080072d1
 800728c:	08007305 	.word	0x08007305
 8007290:	08007339 	.word	0x08007339
 8007294:	0800736d 	.word	0x0800736d
 8007298:	080073a1 	.word	0x080073a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00b      	beq.n	80072c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	7c12      	ldrb	r2, [r2, #16]
 80072b4:	f107 0108 	add.w	r1, r7, #8
 80072b8:	4610      	mov	r0, r2
 80072ba:	4798      	blx	r3
 80072bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072be:	e091      	b.n	80073e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fa94 	bl	80077f0 <USBD_CtlError>
            err++;
 80072c8:	7afb      	ldrb	r3, [r7, #11]
 80072ca:	3301      	adds	r3, #1
 80072cc:	72fb      	strb	r3, [r7, #11]
          break;
 80072ce:	e089      	b.n	80073e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00b      	beq.n	80072f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	7c12      	ldrb	r2, [r2, #16]
 80072e8:	f107 0108 	add.w	r1, r7, #8
 80072ec:	4610      	mov	r0, r2
 80072ee:	4798      	blx	r3
 80072f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072f2:	e077      	b.n	80073e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fa7a 	bl	80077f0 <USBD_CtlError>
            err++;
 80072fc:	7afb      	ldrb	r3, [r7, #11]
 80072fe:	3301      	adds	r3, #1
 8007300:	72fb      	strb	r3, [r7, #11]
          break;
 8007302:	e06f      	b.n	80073e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00b      	beq.n	8007328 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	7c12      	ldrb	r2, [r2, #16]
 800731c:	f107 0108 	add.w	r1, r7, #8
 8007320:	4610      	mov	r0, r2
 8007322:	4798      	blx	r3
 8007324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007326:	e05d      	b.n	80073e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fa60 	bl	80077f0 <USBD_CtlError>
            err++;
 8007330:	7afb      	ldrb	r3, [r7, #11]
 8007332:	3301      	adds	r3, #1
 8007334:	72fb      	strb	r3, [r7, #11]
          break;
 8007336:	e055      	b.n	80073e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00b      	beq.n	800735c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	7c12      	ldrb	r2, [r2, #16]
 8007350:	f107 0108 	add.w	r1, r7, #8
 8007354:	4610      	mov	r0, r2
 8007356:	4798      	blx	r3
 8007358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800735a:	e043      	b.n	80073e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fa46 	bl	80077f0 <USBD_CtlError>
            err++;
 8007364:	7afb      	ldrb	r3, [r7, #11]
 8007366:	3301      	adds	r3, #1
 8007368:	72fb      	strb	r3, [r7, #11]
          break;
 800736a:	e03b      	b.n	80073e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00b      	beq.n	8007390 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	7c12      	ldrb	r2, [r2, #16]
 8007384:	f107 0108 	add.w	r1, r7, #8
 8007388:	4610      	mov	r0, r2
 800738a:	4798      	blx	r3
 800738c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800738e:	e029      	b.n	80073e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fa2c 	bl	80077f0 <USBD_CtlError>
            err++;
 8007398:	7afb      	ldrb	r3, [r7, #11]
 800739a:	3301      	adds	r3, #1
 800739c:	72fb      	strb	r3, [r7, #11]
          break;
 800739e:	e021      	b.n	80073e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00b      	beq.n	80073c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	7c12      	ldrb	r2, [r2, #16]
 80073b8:	f107 0108 	add.w	r1, r7, #8
 80073bc:	4610      	mov	r0, r2
 80073be:	4798      	blx	r3
 80073c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073c2:	e00f      	b.n	80073e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fa12 	bl	80077f0 <USBD_CtlError>
            err++;
 80073cc:	7afb      	ldrb	r3, [r7, #11]
 80073ce:	3301      	adds	r3, #1
 80073d0:	72fb      	strb	r3, [r7, #11]
          break;
 80073d2:	e007      	b.n	80073e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fa0a 	bl	80077f0 <USBD_CtlError>
          err++;
 80073dc:	7afb      	ldrb	r3, [r7, #11]
 80073de:	3301      	adds	r3, #1
 80073e0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80073e2:	e038      	b.n	8007456 <USBD_GetDescriptor+0x286>
 80073e4:	e037      	b.n	8007456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	7c1b      	ldrb	r3, [r3, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d109      	bne.n	8007402 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073f6:	f107 0208 	add.w	r2, r7, #8
 80073fa:	4610      	mov	r0, r2
 80073fc:	4798      	blx	r3
 80073fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007400:	e029      	b.n	8007456 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f9f3 	bl	80077f0 <USBD_CtlError>
        err++;
 800740a:	7afb      	ldrb	r3, [r7, #11]
 800740c:	3301      	adds	r3, #1
 800740e:	72fb      	strb	r3, [r7, #11]
      break;
 8007410:	e021      	b.n	8007456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	7c1b      	ldrb	r3, [r3, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10d      	bne.n	8007436 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007422:	f107 0208 	add.w	r2, r7, #8
 8007426:	4610      	mov	r0, r2
 8007428:	4798      	blx	r3
 800742a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3301      	adds	r3, #1
 8007430:	2207      	movs	r2, #7
 8007432:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007434:	e00f      	b.n	8007456 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f9d9 	bl	80077f0 <USBD_CtlError>
        err++;
 800743e:	7afb      	ldrb	r3, [r7, #11]
 8007440:	3301      	adds	r3, #1
 8007442:	72fb      	strb	r3, [r7, #11]
      break;
 8007444:	e007      	b.n	8007456 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f9d1 	bl	80077f0 <USBD_CtlError>
      err++;
 800744e:	7afb      	ldrb	r3, [r7, #11]
 8007450:	3301      	adds	r3, #1
 8007452:	72fb      	strb	r3, [r7, #11]
      break;
 8007454:	bf00      	nop
  }

  if (err != 0U)
 8007456:	7afb      	ldrb	r3, [r7, #11]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d11c      	bne.n	8007496 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800745c:	893b      	ldrh	r3, [r7, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d011      	beq.n	8007486 <USBD_GetDescriptor+0x2b6>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	88db      	ldrh	r3, [r3, #6]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00d      	beq.n	8007486 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	88da      	ldrh	r2, [r3, #6]
 800746e:	893b      	ldrh	r3, [r7, #8]
 8007470:	4293      	cmp	r3, r2
 8007472:	bf28      	it	cs
 8007474:	4613      	movcs	r3, r2
 8007476:	b29b      	uxth	r3, r3
 8007478:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800747a:	893b      	ldrh	r3, [r7, #8]
 800747c:	461a      	mov	r2, r3
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fa1f 	bl	80078c4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	88db      	ldrh	r3, [r3, #6]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d104      	bne.n	8007498 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fa76 	bl	8007980 <USBD_CtlSendStatus>
 8007494:	e000      	b.n	8007498 <USBD_GetDescriptor+0x2c8>
    return;
 8007496:	bf00      	nop
    }
  }
}
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop

080074a0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	889b      	ldrh	r3, [r3, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d130      	bne.n	8007514 <USBD_SetAddress+0x74>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	88db      	ldrh	r3, [r3, #6]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d12c      	bne.n	8007514 <USBD_SetAddress+0x74>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	885b      	ldrh	r3, [r3, #2]
 80074be:	2b7f      	cmp	r3, #127	@ 0x7f
 80074c0:	d828      	bhi.n	8007514 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	885b      	ldrh	r3, [r3, #2]
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d104      	bne.n	80074e2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f988 	bl	80077f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074e0:	e01d      	b.n	800751e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	7bfa      	ldrb	r2, [r7, #15]
 80074e6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fe1d 	bl	800812e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fa43 	bl	8007980 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d004      	beq.n	800750a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2202      	movs	r2, #2
 8007504:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007508:	e009      	b.n	800751e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007512:	e004      	b.n	800751e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f96a 	bl	80077f0 <USBD_CtlError>
  }
}
 800751c:	bf00      	nop
 800751e:	bf00      	nop
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
	...

08007528 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	885b      	ldrh	r3, [r3, #2]
 8007536:	b2da      	uxtb	r2, r3
 8007538:	4b41      	ldr	r3, [pc, #260]	@ (8007640 <USBD_SetConfig+0x118>)
 800753a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800753c:	4b40      	ldr	r3, [pc, #256]	@ (8007640 <USBD_SetConfig+0x118>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d904      	bls.n	800754e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f952 	bl	80077f0 <USBD_CtlError>
 800754c:	e075      	b.n	800763a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007554:	2b02      	cmp	r3, #2
 8007556:	d002      	beq.n	800755e <USBD_SetConfig+0x36>
 8007558:	2b03      	cmp	r3, #3
 800755a:	d023      	beq.n	80075a4 <USBD_SetConfig+0x7c>
 800755c:	e062      	b.n	8007624 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800755e:	4b38      	ldr	r3, [pc, #224]	@ (8007640 <USBD_SetConfig+0x118>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d01a      	beq.n	800759c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007566:	4b36      	ldr	r3, [pc, #216]	@ (8007640 <USBD_SetConfig+0x118>)
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2203      	movs	r2, #3
 8007574:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007578:	4b31      	ldr	r3, [pc, #196]	@ (8007640 <USBD_SetConfig+0x118>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7ff f9e8 	bl	8006954 <USBD_SetClassConfig>
 8007584:	4603      	mov	r3, r0
 8007586:	2b02      	cmp	r3, #2
 8007588:	d104      	bne.n	8007594 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f92f 	bl	80077f0 <USBD_CtlError>
            return;
 8007592:	e052      	b.n	800763a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f9f3 	bl	8007980 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800759a:	e04e      	b.n	800763a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f9ef 	bl	8007980 <USBD_CtlSendStatus>
        break;
 80075a2:	e04a      	b.n	800763a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80075a4:	4b26      	ldr	r3, [pc, #152]	@ (8007640 <USBD_SetConfig+0x118>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d112      	bne.n	80075d2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80075b4:	4b22      	ldr	r3, [pc, #136]	@ (8007640 <USBD_SetConfig+0x118>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	461a      	mov	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80075be:	4b20      	ldr	r3, [pc, #128]	@ (8007640 <USBD_SetConfig+0x118>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff f9e4 	bl	8006992 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f9d8 	bl	8007980 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80075d0:	e033      	b.n	800763a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80075d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007640 <USBD_SetConfig+0x118>)
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d01d      	beq.n	800761c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7ff f9d2 	bl	8006992 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80075ee:	4b14      	ldr	r3, [pc, #80]	@ (8007640 <USBD_SetConfig+0x118>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075f8:	4b11      	ldr	r3, [pc, #68]	@ (8007640 <USBD_SetConfig+0x118>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	4619      	mov	r1, r3
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7ff f9a8 	bl	8006954 <USBD_SetClassConfig>
 8007604:	4603      	mov	r3, r0
 8007606:	2b02      	cmp	r3, #2
 8007608:	d104      	bne.n	8007614 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f8ef 	bl	80077f0 <USBD_CtlError>
            return;
 8007612:	e012      	b.n	800763a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f9b3 	bl	8007980 <USBD_CtlSendStatus>
        break;
 800761a:	e00e      	b.n	800763a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f9af 	bl	8007980 <USBD_CtlSendStatus>
        break;
 8007622:	e00a      	b.n	800763a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f8e2 	bl	80077f0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800762c:	4b04      	ldr	r3, [pc, #16]	@ (8007640 <USBD_SetConfig+0x118>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff f9ad 	bl	8006992 <USBD_ClrClassConfig>
        break;
 8007638:	bf00      	nop
    }
  }
}
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20000270 	.word	0x20000270

08007644 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	88db      	ldrh	r3, [r3, #6]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d004      	beq.n	8007660 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f8c9 	bl	80077f0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800765e:	e022      	b.n	80076a6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007666:	2b02      	cmp	r3, #2
 8007668:	dc02      	bgt.n	8007670 <USBD_GetConfig+0x2c>
 800766a:	2b00      	cmp	r3, #0
 800766c:	dc03      	bgt.n	8007676 <USBD_GetConfig+0x32>
 800766e:	e015      	b.n	800769c <USBD_GetConfig+0x58>
 8007670:	2b03      	cmp	r3, #3
 8007672:	d00b      	beq.n	800768c <USBD_GetConfig+0x48>
 8007674:	e012      	b.n	800769c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3308      	adds	r3, #8
 8007680:	2201      	movs	r2, #1
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f91d 	bl	80078c4 <USBD_CtlSendData>
        break;
 800768a:	e00c      	b.n	80076a6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3304      	adds	r3, #4
 8007690:	2201      	movs	r2, #1
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f915 	bl	80078c4 <USBD_CtlSendData>
        break;
 800769a:	e004      	b.n	80076a6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f8a6 	bl	80077f0 <USBD_CtlError>
        break;
 80076a4:	bf00      	nop
}
 80076a6:	bf00      	nop
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b082      	sub	sp, #8
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076be:	3b01      	subs	r3, #1
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d81e      	bhi.n	8007702 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	88db      	ldrh	r3, [r3, #6]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d004      	beq.n	80076d6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f88e 	bl	80077f0 <USBD_CtlError>
        break;
 80076d4:	e01a      	b.n	800770c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d005      	beq.n	80076f2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	f043 0202 	orr.w	r2, r3, #2
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	330c      	adds	r3, #12
 80076f6:	2202      	movs	r2, #2
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f8e2 	bl	80078c4 <USBD_CtlSendData>
      break;
 8007700:	e004      	b.n	800770c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f873 	bl	80077f0 <USBD_CtlError>
      break;
 800770a:	bf00      	nop
  }
}
 800770c:	bf00      	nop
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	885b      	ldrh	r3, [r3, #2]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d106      	bne.n	8007734 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f926 	bl	8007980 <USBD_CtlSendStatus>
  }
}
 8007734:	bf00      	nop
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800774c:	3b01      	subs	r3, #1
 800774e:	2b02      	cmp	r3, #2
 8007750:	d80b      	bhi.n	800776a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	885b      	ldrh	r3, [r3, #2]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d10c      	bne.n	8007774 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f90c 	bl	8007980 <USBD_CtlSendStatus>
      }
      break;
 8007768:	e004      	b.n	8007774 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f83f 	bl	80077f0 <USBD_CtlError>
      break;
 8007772:	e000      	b.n	8007776 <USBD_ClrFeature+0x3a>
      break;
 8007774:	bf00      	nop
  }
}
 8007776:	bf00      	nop
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800777e:	b480      	push	{r7}
 8007780:	b083      	sub	sp, #12
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	781a      	ldrb	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	785a      	ldrb	r2, [r3, #1]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	3302      	adds	r3, #2
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	461a      	mov	r2, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	3303      	adds	r3, #3
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	4413      	add	r3, r2
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	3304      	adds	r3, #4
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	3305      	adds	r3, #5
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	021b      	lsls	r3, r3, #8
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	4413      	add	r3, r2
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	3306      	adds	r3, #6
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	3307      	adds	r3, #7
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	021b      	lsls	r3, r3, #8
 80077dc:	b29b      	uxth	r3, r3
 80077de:	4413      	add	r3, r2
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	80da      	strh	r2, [r3, #6]

}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bc80      	pop	{r7}
 80077ee:	4770      	bx	lr

080077f0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80077fa:	2180      	movs	r1, #128	@ 0x80
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fc2d 	bl	800805c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007802:	2100      	movs	r1, #0
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fc29 	bl	800805c <USBD_LL_StallEP>
}
 800780a:	bf00      	nop
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b086      	sub	sp, #24
 8007816:	af00      	add	r7, sp, #0
 8007818:	60f8      	str	r0, [r7, #12]
 800781a:	60b9      	str	r1, [r7, #8]
 800781c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800781e:	2300      	movs	r3, #0
 8007820:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d032      	beq.n	800788e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 f834 	bl	8007896 <USBD_GetLen>
 800782e:	4603      	mov	r3, r0
 8007830:	3301      	adds	r3, #1
 8007832:	b29b      	uxth	r3, r3
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	b29a      	uxth	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800783c:	7dfb      	ldrb	r3, [r7, #23]
 800783e:	1c5a      	adds	r2, r3, #1
 8007840:	75fa      	strb	r2, [r7, #23]
 8007842:	461a      	mov	r2, r3
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	4413      	add	r3, r2
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	7812      	ldrb	r2, [r2, #0]
 800784c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800784e:	7dfb      	ldrb	r3, [r7, #23]
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	75fa      	strb	r2, [r7, #23]
 8007854:	461a      	mov	r2, r3
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	4413      	add	r3, r2
 800785a:	2203      	movs	r2, #3
 800785c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800785e:	e012      	b.n	8007886 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	1c5a      	adds	r2, r3, #1
 8007864:	60fa      	str	r2, [r7, #12]
 8007866:	7dfa      	ldrb	r2, [r7, #23]
 8007868:	1c51      	adds	r1, r2, #1
 800786a:	75f9      	strb	r1, [r7, #23]
 800786c:	4611      	mov	r1, r2
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	440a      	add	r2, r1
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007876:	7dfb      	ldrb	r3, [r7, #23]
 8007878:	1c5a      	adds	r2, r3, #1
 800787a:	75fa      	strb	r2, [r7, #23]
 800787c:	461a      	mov	r2, r3
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	4413      	add	r3, r2
 8007882:	2200      	movs	r2, #0
 8007884:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1e8      	bne.n	8007860 <USBD_GetString+0x4e>
    }
  }
}
 800788e:	bf00      	nop
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007896:	b480      	push	{r7}
 8007898:	b085      	sub	sp, #20
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800789e:	2300      	movs	r3, #0
 80078a0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80078a2:	e005      	b.n	80078b0 <USBD_GetLen+0x1a>
  {
    len++;
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
 80078a6:	3301      	adds	r3, #1
 80078a8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	3301      	adds	r3, #1
 80078ae:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1f5      	bne.n	80078a4 <USBD_GetLen+0xe>
  }

  return len;
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	bc80      	pop	{r7}
 80078c2:	4770      	bx	lr

080078c4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	4613      	mov	r3, r2
 80078d0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2202      	movs	r2, #2
 80078d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80078da:	88fa      	ldrh	r2, [r7, #6]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80078e0:	88fa      	ldrh	r2, [r7, #6]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078e6:	88fb      	ldrh	r3, [r7, #6]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	2100      	movs	r1, #0
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 fc3d 	bl	800816c <USBD_LL_Transmit>

  return USBD_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	4613      	mov	r3, r2
 8007908:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	2100      	movs	r1, #0
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 fc2b 	bl	800816c <USBD_LL_Transmit>

  return USBD_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	4613      	mov	r3, r2
 800792c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2203      	movs	r2, #3
 8007932:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007936:	88fa      	ldrh	r2, [r7, #6]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800793e:	88fa      	ldrh	r2, [r7, #6]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	2100      	movs	r1, #0
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 fc30 	bl	80081b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	4613      	mov	r3, r2
 8007968:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800796a:	88fb      	ldrh	r3, [r7, #6]
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	2100      	movs	r1, #0
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 fc1e 	bl	80081b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2204      	movs	r2, #4
 800798c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007990:	2300      	movs	r3, #0
 8007992:	2200      	movs	r2, #0
 8007994:	2100      	movs	r1, #0
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fbe8 	bl	800816c <USBD_LL_Transmit>

  return USBD_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b082      	sub	sp, #8
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2205      	movs	r2, #5
 80079b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079b6:	2300      	movs	r3, #0
 80079b8:	2200      	movs	r2, #0
 80079ba:	2100      	movs	r1, #0
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fbf8 	bl	80081b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80079d0:	2200      	movs	r2, #0
 80079d2:	4912      	ldr	r1, [pc, #72]	@ (8007a1c <MX_USB_DEVICE_Init+0x50>)
 80079d4:	4812      	ldr	r0, [pc, #72]	@ (8007a20 <MX_USB_DEVICE_Init+0x54>)
 80079d6:	f7fe ff63 	bl	80068a0 <USBD_Init>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80079e0:	f7f8 fd62 	bl	80004a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80079e4:	490f      	ldr	r1, [pc, #60]	@ (8007a24 <MX_USB_DEVICE_Init+0x58>)
 80079e6:	480e      	ldr	r0, [pc, #56]	@ (8007a20 <MX_USB_DEVICE_Init+0x54>)
 80079e8:	f7fe ff85 	bl	80068f6 <USBD_RegisterClass>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80079f2:	f7f8 fd59 	bl	80004a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80079f6:	490c      	ldr	r1, [pc, #48]	@ (8007a28 <MX_USB_DEVICE_Init+0x5c>)
 80079f8:	4809      	ldr	r0, [pc, #36]	@ (8007a20 <MX_USB_DEVICE_Init+0x54>)
 80079fa:	f7fe fee5 	bl	80067c8 <USBD_CDC_RegisterInterface>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007a04:	f7f8 fd50 	bl	80004a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007a08:	4805      	ldr	r0, [pc, #20]	@ (8007a20 <MX_USB_DEVICE_Init+0x54>)
 8007a0a:	f7fe ff8d 	bl	8006928 <USBD_Start>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a14:	f7f8 fd48 	bl	80004a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a18:	bf00      	nop
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	2000012c 	.word	0x2000012c
 8007a20:	20000274 	.word	0x20000274
 8007a24:	20000018 	.word	0x20000018
 8007a28:	2000011c 	.word	0x2000011c

08007a2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007a30:	2200      	movs	r2, #0
 8007a32:	4905      	ldr	r1, [pc, #20]	@ (8007a48 <CDC_Init_FS+0x1c>)
 8007a34:	4805      	ldr	r0, [pc, #20]	@ (8007a4c <CDC_Init_FS+0x20>)
 8007a36:	f7fe fedd 	bl	80067f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007a3a:	4905      	ldr	r1, [pc, #20]	@ (8007a50 <CDC_Init_FS+0x24>)
 8007a3c:	4803      	ldr	r0, [pc, #12]	@ (8007a4c <CDC_Init_FS+0x20>)
 8007a3e:	f7fe fef2 	bl	8006826 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007a42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	20000938 	.word	0x20000938
 8007a4c:	20000274 	.word	0x20000274
 8007a50:	20000538 	.word	0x20000538

08007a54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007a54:	b480      	push	{r7}
 8007a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007a58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bc80      	pop	{r7}
 8007a60:	4770      	bx	lr
	...

08007a64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	6039      	str	r1, [r7, #0]
 8007a6e:	71fb      	strb	r3, [r7, #7]
 8007a70:	4613      	mov	r3, r2
 8007a72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a74:	79fb      	ldrb	r3, [r7, #7]
 8007a76:	2b23      	cmp	r3, #35	@ 0x23
 8007a78:	d84a      	bhi.n	8007b10 <CDC_Control_FS+0xac>
 8007a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a80 <CDC_Control_FS+0x1c>)
 8007a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a80:	08007b11 	.word	0x08007b11
 8007a84:	08007b11 	.word	0x08007b11
 8007a88:	08007b11 	.word	0x08007b11
 8007a8c:	08007b11 	.word	0x08007b11
 8007a90:	08007b11 	.word	0x08007b11
 8007a94:	08007b11 	.word	0x08007b11
 8007a98:	08007b11 	.word	0x08007b11
 8007a9c:	08007b11 	.word	0x08007b11
 8007aa0:	08007b11 	.word	0x08007b11
 8007aa4:	08007b11 	.word	0x08007b11
 8007aa8:	08007b11 	.word	0x08007b11
 8007aac:	08007b11 	.word	0x08007b11
 8007ab0:	08007b11 	.word	0x08007b11
 8007ab4:	08007b11 	.word	0x08007b11
 8007ab8:	08007b11 	.word	0x08007b11
 8007abc:	08007b11 	.word	0x08007b11
 8007ac0:	08007b11 	.word	0x08007b11
 8007ac4:	08007b11 	.word	0x08007b11
 8007ac8:	08007b11 	.word	0x08007b11
 8007acc:	08007b11 	.word	0x08007b11
 8007ad0:	08007b11 	.word	0x08007b11
 8007ad4:	08007b11 	.word	0x08007b11
 8007ad8:	08007b11 	.word	0x08007b11
 8007adc:	08007b11 	.word	0x08007b11
 8007ae0:	08007b11 	.word	0x08007b11
 8007ae4:	08007b11 	.word	0x08007b11
 8007ae8:	08007b11 	.word	0x08007b11
 8007aec:	08007b11 	.word	0x08007b11
 8007af0:	08007b11 	.word	0x08007b11
 8007af4:	08007b11 	.word	0x08007b11
 8007af8:	08007b11 	.word	0x08007b11
 8007afc:	08007b11 	.word	0x08007b11
 8007b00:	08007b11 	.word	0x08007b11
 8007b04:	08007b11 	.word	0x08007b11
 8007b08:	08007b11 	.word	0x08007b11
 8007b0c:	08007b11 	.word	0x08007b11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007b10:	bf00      	nop
  }

  return (USBD_OK);
 8007b12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bc80      	pop	{r7}
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop

08007b20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	4805      	ldr	r0, [pc, #20]	@ (8007b44 <CDC_Receive_FS+0x24>)
 8007b2e:	f7fe fe7a 	bl	8006826 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b32:	4804      	ldr	r0, [pc, #16]	@ (8007b44 <CDC_Receive_FS+0x24>)
 8007b34:	f7fe fe8a 	bl	800684c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007b38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	20000274 	.word	0x20000274

08007b48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	6039      	str	r1, [r7, #0]
 8007b52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	2212      	movs	r2, #18
 8007b58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b5a:	4b03      	ldr	r3, [pc, #12]	@ (8007b68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bc80      	pop	{r7}
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	20000148 	.word	0x20000148

08007b6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	4603      	mov	r3, r0
 8007b74:	6039      	str	r1, [r7, #0]
 8007b76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2204      	movs	r2, #4
 8007b7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b7e:	4b03      	ldr	r3, [pc, #12]	@ (8007b8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bc80      	pop	{r7}
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	2000015c 	.word	0x2000015c

08007b90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	6039      	str	r1, [r7, #0]
 8007b9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b9c:	79fb      	ldrb	r3, [r7, #7]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d105      	bne.n	8007bae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	4907      	ldr	r1, [pc, #28]	@ (8007bc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ba6:	4808      	ldr	r0, [pc, #32]	@ (8007bc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ba8:	f7ff fe33 	bl	8007812 <USBD_GetString>
 8007bac:	e004      	b.n	8007bb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	4904      	ldr	r1, [pc, #16]	@ (8007bc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bb2:	4805      	ldr	r0, [pc, #20]	@ (8007bc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bb4:	f7ff fe2d 	bl	8007812 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bb8:	4b02      	ldr	r3, [pc, #8]	@ (8007bc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	20000d38 	.word	0x20000d38
 8007bc8:	08008328 	.word	0x08008328

08007bcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	6039      	str	r1, [r7, #0]
 8007bd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	4904      	ldr	r1, [pc, #16]	@ (8007bec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007bdc:	4804      	ldr	r0, [pc, #16]	@ (8007bf0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007bde:	f7ff fe18 	bl	8007812 <USBD_GetString>
  return USBD_StrDesc;
 8007be2:	4b02      	ldr	r3, [pc, #8]	@ (8007bec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	20000d38 	.word	0x20000d38
 8007bf0:	08008340 	.word	0x08008340

08007bf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	6039      	str	r1, [r7, #0]
 8007bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	221a      	movs	r2, #26
 8007c04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c06:	f000 f843 	bl	8007c90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c0a:	4b02      	ldr	r3, [pc, #8]	@ (8007c14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	20000160 	.word	0x20000160

08007c18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	6039      	str	r1, [r7, #0]
 8007c22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c24:	79fb      	ldrb	r3, [r7, #7]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d105      	bne.n	8007c36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	4907      	ldr	r1, [pc, #28]	@ (8007c4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c2e:	4808      	ldr	r0, [pc, #32]	@ (8007c50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c30:	f7ff fdef 	bl	8007812 <USBD_GetString>
 8007c34:	e004      	b.n	8007c40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	4904      	ldr	r1, [pc, #16]	@ (8007c4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c3a:	4805      	ldr	r0, [pc, #20]	@ (8007c50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c3c:	f7ff fde9 	bl	8007812 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c40:	4b02      	ldr	r3, [pc, #8]	@ (8007c4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	20000d38 	.word	0x20000d38
 8007c50:	08008354 	.word	0x08008354

08007c54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	6039      	str	r1, [r7, #0]
 8007c5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c60:	79fb      	ldrb	r3, [r7, #7]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d105      	bne.n	8007c72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	4907      	ldr	r1, [pc, #28]	@ (8007c88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c6a:	4808      	ldr	r0, [pc, #32]	@ (8007c8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c6c:	f7ff fdd1 	bl	8007812 <USBD_GetString>
 8007c70:	e004      	b.n	8007c7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	4904      	ldr	r1, [pc, #16]	@ (8007c88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c76:	4805      	ldr	r0, [pc, #20]	@ (8007c8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c78:	f7ff fdcb 	bl	8007812 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c7c:	4b02      	ldr	r3, [pc, #8]	@ (8007c88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	20000d38 	.word	0x20000d38
 8007c8c:	08008360 	.word	0x08008360

08007c90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c96:	4b0f      	ldr	r3, [pc, #60]	@ (8007cd4 <Get_SerialNum+0x44>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8007cd8 <Get_SerialNum+0x48>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8007cdc <Get_SerialNum+0x4c>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4413      	add	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d009      	beq.n	8007cca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007cb6:	2208      	movs	r2, #8
 8007cb8:	4909      	ldr	r1, [pc, #36]	@ (8007ce0 <Get_SerialNum+0x50>)
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 f814 	bl	8007ce8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007cc0:	2204      	movs	r2, #4
 8007cc2:	4908      	ldr	r1, [pc, #32]	@ (8007ce4 <Get_SerialNum+0x54>)
 8007cc4:	68b8      	ldr	r0, [r7, #8]
 8007cc6:	f000 f80f 	bl	8007ce8 <IntToUnicode>
  }
}
 8007cca:	bf00      	nop
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	1ffff7e8 	.word	0x1ffff7e8
 8007cd8:	1ffff7ec 	.word	0x1ffff7ec
 8007cdc:	1ffff7f0 	.word	0x1ffff7f0
 8007ce0:	20000162 	.word	0x20000162
 8007ce4:	20000172 	.word	0x20000172

08007ce8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	75fb      	strb	r3, [r7, #23]
 8007cfe:	e027      	b.n	8007d50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	0f1b      	lsrs	r3, r3, #28
 8007d04:	2b09      	cmp	r3, #9
 8007d06:	d80b      	bhi.n	8007d20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	0f1b      	lsrs	r3, r3, #28
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	4619      	mov	r1, r3
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	440b      	add	r3, r1
 8007d18:	3230      	adds	r2, #48	@ 0x30
 8007d1a:	b2d2      	uxtb	r2, r2
 8007d1c:	701a      	strb	r2, [r3, #0]
 8007d1e:	e00a      	b.n	8007d36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	0f1b      	lsrs	r3, r3, #28
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	7dfb      	ldrb	r3, [r7, #23]
 8007d28:	005b      	lsls	r3, r3, #1
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	440b      	add	r3, r1
 8007d30:	3237      	adds	r2, #55	@ 0x37
 8007d32:	b2d2      	uxtb	r2, r2
 8007d34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	011b      	lsls	r3, r3, #4
 8007d3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	3301      	adds	r3, #1
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	4413      	add	r3, r2
 8007d46:	2200      	movs	r2, #0
 8007d48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	75fb      	strb	r3, [r7, #23]
 8007d50:	7dfa      	ldrb	r2, [r7, #23]
 8007d52:	79fb      	ldrb	r3, [r7, #7]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d3d3      	bcc.n	8007d00 <IntToUnicode+0x18>
  }
}
 8007d58:	bf00      	nop
 8007d5a:	bf00      	nop
 8007d5c:	371c      	adds	r7, #28
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bc80      	pop	{r7}
 8007d62:	4770      	bx	lr

08007d64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a0d      	ldr	r2, [pc, #52]	@ (8007da8 <HAL_PCD_MspInit+0x44>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d113      	bne.n	8007d9e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007d76:	4b0d      	ldr	r3, [pc, #52]	@ (8007dac <HAL_PCD_MspInit+0x48>)
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8007dac <HAL_PCD_MspInit+0x48>)
 8007d7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d80:	61d3      	str	r3, [r2, #28]
 8007d82:	4b0a      	ldr	r3, [pc, #40]	@ (8007dac <HAL_PCD_MspInit+0x48>)
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2100      	movs	r1, #0
 8007d92:	2014      	movs	r0, #20
 8007d94:	f7f9 f99b 	bl	80010ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007d98:	2014      	movs	r0, #20
 8007d9a:	f7f9 f9b4 	bl	8001106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007d9e:	bf00      	nop
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	40005c00 	.word	0x40005c00
 8007dac:	40021000 	.word	0x40021000

08007db0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	f7fe fdf6 	bl	80069b8 <USBD_LL_SetupStage>
}
 8007dcc:	bf00      	nop
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007de6:	78fa      	ldrb	r2, [r7, #3]
 8007de8:	6879      	ldr	r1, [r7, #4]
 8007dea:	4613      	mov	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	440b      	add	r3, r1
 8007df4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	78fb      	ldrb	r3, [r7, #3]
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	f7fe fe28 	bl	8006a52 <USBD_LL_DataOutStage>
}
 8007e02:	bf00      	nop
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b082      	sub	sp, #8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007e1c:	78fa      	ldrb	r2, [r7, #3]
 8007e1e:	6879      	ldr	r1, [r7, #4]
 8007e20:	4613      	mov	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	440b      	add	r3, r1
 8007e2a:	3324      	adds	r3, #36	@ 0x24
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	78fb      	ldrb	r3, [r7, #3]
 8007e30:	4619      	mov	r1, r3
 8007e32:	f7fe fe7f 	bl	8006b34 <USBD_LL_DataInStage>
}
 8007e36:	bf00      	nop
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b082      	sub	sp, #8
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fe ff8f 	bl	8006d70 <USBD_LL_SOF>
}
 8007e52:	bf00      	nop
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e62:	2301      	movs	r3, #1
 8007e64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	799b      	ldrb	r3, [r3, #6]
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d001      	beq.n	8007e72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e6e:	f7f8 fb1b 	bl	80004a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e78:	7bfa      	ldrb	r2, [r7, #15]
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fe ff3f 	bl	8006d00 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fe fef8 	bl	8006c7e <USBD_LL_Reset>
}
 8007e8e:	bf00      	nop
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
	...

08007e98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fe ff39 	bl	8006d1e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	7a9b      	ldrb	r3, [r3, #10]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d005      	beq.n	8007ec0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007eb4:	4b04      	ldr	r3, [pc, #16]	@ (8007ec8 <HAL_PCD_SuspendCallback+0x30>)
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	4a03      	ldr	r2, [pc, #12]	@ (8007ec8 <HAL_PCD_SuspendCallback+0x30>)
 8007eba:	f043 0306 	orr.w	r3, r3, #6
 8007ebe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	e000ed00 	.word	0xe000ed00

08007ecc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fe ff33 	bl	8006d46 <USBD_LL_Resume>
}
 8007ee0:	bf00      	nop
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007ef0:	4a28      	ldr	r2, [pc, #160]	@ (8007f94 <USBD_LL_Init+0xac>)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a26      	ldr	r2, [pc, #152]	@ (8007f94 <USBD_LL_Init+0xac>)
 8007efc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007f00:	4b24      	ldr	r3, [pc, #144]	@ (8007f94 <USBD_LL_Init+0xac>)
 8007f02:	4a25      	ldr	r2, [pc, #148]	@ (8007f98 <USBD_LL_Init+0xb0>)
 8007f04:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007f06:	4b23      	ldr	r3, [pc, #140]	@ (8007f94 <USBD_LL_Init+0xac>)
 8007f08:	2208      	movs	r2, #8
 8007f0a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007f0c:	4b21      	ldr	r3, [pc, #132]	@ (8007f94 <USBD_LL_Init+0xac>)
 8007f0e:	2202      	movs	r2, #2
 8007f10:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007f12:	4b20      	ldr	r3, [pc, #128]	@ (8007f94 <USBD_LL_Init+0xac>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007f18:	4b1e      	ldr	r3, [pc, #120]	@ (8007f94 <USBD_LL_Init+0xac>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007f94 <USBD_LL_Init+0xac>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007f24:	481b      	ldr	r0, [pc, #108]	@ (8007f94 <USBD_LL_Init+0xac>)
 8007f26:	f7f9 fbe9 	bl	80016fc <HAL_PCD_Init>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007f30:	f7f8 faba 	bl	80004a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007f3a:	2318      	movs	r3, #24
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	2100      	movs	r1, #0
 8007f40:	f7fb f8fa 	bl	8003138 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007f4a:	2358      	movs	r3, #88	@ 0x58
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2180      	movs	r1, #128	@ 0x80
 8007f50:	f7fb f8f2 	bl	8003138 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007f5a:	23c0      	movs	r3, #192	@ 0xc0
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2181      	movs	r1, #129	@ 0x81
 8007f60:	f7fb f8ea 	bl	8003138 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007f6a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8007f6e:	2200      	movs	r2, #0
 8007f70:	2101      	movs	r1, #1
 8007f72:	f7fb f8e1 	bl	8003138 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007f7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007f80:	2200      	movs	r2, #0
 8007f82:	2182      	movs	r1, #130	@ 0x82
 8007f84:	f7fb f8d8 	bl	8003138 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20000f38 	.word	0x20000f38
 8007f98:	40005c00 	.word	0x40005c00

08007f9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7f9 fc98 	bl	80018e8 <HAL_PCD_Start>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 f94e 	bl	8008260 <USBD_Get_USB_Status>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	4608      	mov	r0, r1
 8007fdc:	4611      	mov	r1, r2
 8007fde:	461a      	mov	r2, r3
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	70fb      	strb	r3, [r7, #3]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	70bb      	strb	r3, [r7, #2]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007ffa:	78bb      	ldrb	r3, [r7, #2]
 8007ffc:	883a      	ldrh	r2, [r7, #0]
 8007ffe:	78f9      	ldrb	r1, [r7, #3]
 8008000:	f7f9 fdec 	bl	8001bdc <HAL_PCD_EP_Open>
 8008004:	4603      	mov	r3, r0
 8008006:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	4618      	mov	r0, r3
 800800c:	f000 f928 	bl	8008260 <USBD_Get_USB_Status>
 8008010:	4603      	mov	r3, r0
 8008012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008014:	7bbb      	ldrb	r3, [r7, #14]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b084      	sub	sp, #16
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	460b      	mov	r3, r1
 8008028:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008038:	78fa      	ldrb	r2, [r7, #3]
 800803a:	4611      	mov	r1, r2
 800803c:	4618      	mov	r0, r3
 800803e:	f7f9 fe2a 	bl	8001c96 <HAL_PCD_EP_Close>
 8008042:	4603      	mov	r3, r0
 8008044:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008046:	7bfb      	ldrb	r3, [r7, #15]
 8008048:	4618      	mov	r0, r3
 800804a:	f000 f909 	bl	8008260 <USBD_Get_USB_Status>
 800804e:	4603      	mov	r3, r0
 8008050:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008052:	7bbb      	ldrb	r3, [r7, #14]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008076:	78fa      	ldrb	r2, [r7, #3]
 8008078:	4611      	mov	r1, r2
 800807a:	4618      	mov	r0, r3
 800807c:	f7f9 fed2 	bl	8001e24 <HAL_PCD_EP_SetStall>
 8008080:	4603      	mov	r3, r0
 8008082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008084:	7bfb      	ldrb	r3, [r7, #15]
 8008086:	4618      	mov	r0, r3
 8008088:	f000 f8ea 	bl	8008260 <USBD_Get_USB_Status>
 800808c:	4603      	mov	r3, r0
 800808e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008090:	7bbb      	ldrb	r3, [r7, #14]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	460b      	mov	r3, r1
 80080a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80080b4:	78fa      	ldrb	r2, [r7, #3]
 80080b6:	4611      	mov	r1, r2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7f9 ff13 	bl	8001ee4 <HAL_PCD_EP_ClrStall>
 80080be:	4603      	mov	r3, r0
 80080c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 f8cb 	bl	8008260 <USBD_Get_USB_Status>
 80080ca:	4603      	mov	r3, r0
 80080cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80080ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80080ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	da0b      	bge.n	800810c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80080f4:	78fb      	ldrb	r3, [r7, #3]
 80080f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080fa:	68f9      	ldr	r1, [r7, #12]
 80080fc:	4613      	mov	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	440b      	add	r3, r1
 8008106:	3312      	adds	r3, #18
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	e00b      	b.n	8008124 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800810c:	78fb      	ldrb	r3, [r7, #3]
 800810e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	4613      	mov	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	440b      	add	r3, r1
 800811e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008122:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008124:	4618      	mov	r0, r3
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	bc80      	pop	{r7}
 800812c:	4770      	bx	lr

0800812e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b084      	sub	sp, #16
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	460b      	mov	r3, r1
 8008138:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008148:	78fa      	ldrb	r2, [r7, #3]
 800814a:	4611      	mov	r1, r2
 800814c:	4618      	mov	r0, r3
 800814e:	f7f9 fd21 	bl	8001b94 <HAL_PCD_SetAddress>
 8008152:	4603      	mov	r3, r0
 8008154:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008156:	7bfb      	ldrb	r3, [r7, #15]
 8008158:	4618      	mov	r0, r3
 800815a:	f000 f881 	bl	8008260 <USBD_Get_USB_Status>
 800815e:	4603      	mov	r3, r0
 8008160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008162:	7bbb      	ldrb	r3, [r7, #14]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	607a      	str	r2, [r7, #4]
 8008176:	461a      	mov	r2, r3
 8008178:	460b      	mov	r3, r1
 800817a:	72fb      	strb	r3, [r7, #11]
 800817c:	4613      	mov	r3, r2
 800817e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800818e:	893b      	ldrh	r3, [r7, #8]
 8008190:	7af9      	ldrb	r1, [r7, #11]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	f7f9 fe0f 	bl	8001db6 <HAL_PCD_EP_Transmit>
 8008198:	4603      	mov	r3, r0
 800819a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800819c:	7dfb      	ldrb	r3, [r7, #23]
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 f85e 	bl	8008260 <USBD_Get_USB_Status>
 80081a4:	4603      	mov	r3, r0
 80081a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3718      	adds	r7, #24
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b086      	sub	sp, #24
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	607a      	str	r2, [r7, #4]
 80081bc:	461a      	mov	r2, r3
 80081be:	460b      	mov	r3, r1
 80081c0:	72fb      	strb	r3, [r7, #11]
 80081c2:	4613      	mov	r3, r2
 80081c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80081d4:	893b      	ldrh	r3, [r7, #8]
 80081d6:	7af9      	ldrb	r1, [r7, #11]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	f7f9 fda4 	bl	8001d26 <HAL_PCD_EP_Receive>
 80081de:	4603      	mov	r3, r0
 80081e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 f83b 	bl	8008260 <USBD_Get_USB_Status>
 80081ea:	4603      	mov	r3, r0
 80081ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	460b      	mov	r3, r1
 8008202:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800820a:	78fa      	ldrb	r2, [r7, #3]
 800820c:	4611      	mov	r1, r2
 800820e:	4618      	mov	r0, r3
 8008210:	f7f9 fdba 	bl	8001d88 <HAL_PCD_EP_GetRxCount>
 8008214:	4603      	mov	r3, r0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
	...

08008220 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008228:	4b02      	ldr	r3, [pc, #8]	@ (8008234 <USBD_static_malloc+0x14>)
}
 800822a:	4618      	mov	r0, r3
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	bc80      	pop	{r7}
 8008232:	4770      	bx	lr
 8008234:	20001210 	.word	0x20001210

08008238 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]

}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	bc80      	pop	{r7}
 8008248:	4770      	bx	lr

0800824a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	460b      	mov	r3, r1
 8008254:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	bc80      	pop	{r7}
 800825e:	4770      	bx	lr

08008260 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	4603      	mov	r3, r0
 8008268:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	2b03      	cmp	r3, #3
 8008272:	d817      	bhi.n	80082a4 <USBD_Get_USB_Status+0x44>
 8008274:	a201      	add	r2, pc, #4	@ (adr r2, 800827c <USBD_Get_USB_Status+0x1c>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	0800828d 	.word	0x0800828d
 8008280:	08008293 	.word	0x08008293
 8008284:	08008299 	.word	0x08008299
 8008288:	0800829f 	.word	0x0800829f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	73fb      	strb	r3, [r7, #15]
    break;
 8008290:	e00b      	b.n	80082aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008292:	2302      	movs	r3, #2
 8008294:	73fb      	strb	r3, [r7, #15]
    break;
 8008296:	e008      	b.n	80082aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008298:	2301      	movs	r3, #1
 800829a:	73fb      	strb	r3, [r7, #15]
    break;
 800829c:	e005      	b.n	80082aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800829e:	2302      	movs	r3, #2
 80082a0:	73fb      	strb	r3, [r7, #15]
    break;
 80082a2:	e002      	b.n	80082aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80082a4:	2302      	movs	r3, #2
 80082a6:	73fb      	strb	r3, [r7, #15]
    break;
 80082a8:	bf00      	nop
  }
  return usb_status;
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bc80      	pop	{r7}
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop

080082b8 <memset>:
 80082b8:	4603      	mov	r3, r0
 80082ba:	4402      	add	r2, r0
 80082bc:	4293      	cmp	r3, r2
 80082be:	d100      	bne.n	80082c2 <memset+0xa>
 80082c0:	4770      	bx	lr
 80082c2:	f803 1b01 	strb.w	r1, [r3], #1
 80082c6:	e7f9      	b.n	80082bc <memset+0x4>

080082c8 <__libc_init_array>:
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	2600      	movs	r6, #0
 80082cc:	4d0c      	ldr	r5, [pc, #48]	@ (8008300 <__libc_init_array+0x38>)
 80082ce:	4c0d      	ldr	r4, [pc, #52]	@ (8008304 <__libc_init_array+0x3c>)
 80082d0:	1b64      	subs	r4, r4, r5
 80082d2:	10a4      	asrs	r4, r4, #2
 80082d4:	42a6      	cmp	r6, r4
 80082d6:	d109      	bne.n	80082ec <__libc_init_array+0x24>
 80082d8:	f000 f81a 	bl	8008310 <_init>
 80082dc:	2600      	movs	r6, #0
 80082de:	4d0a      	ldr	r5, [pc, #40]	@ (8008308 <__libc_init_array+0x40>)
 80082e0:	4c0a      	ldr	r4, [pc, #40]	@ (800830c <__libc_init_array+0x44>)
 80082e2:	1b64      	subs	r4, r4, r5
 80082e4:	10a4      	asrs	r4, r4, #2
 80082e6:	42a6      	cmp	r6, r4
 80082e8:	d105      	bne.n	80082f6 <__libc_init_array+0x2e>
 80082ea:	bd70      	pop	{r4, r5, r6, pc}
 80082ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80082f0:	4798      	blx	r3
 80082f2:	3601      	adds	r6, #1
 80082f4:	e7ee      	b.n	80082d4 <__libc_init_array+0xc>
 80082f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082fa:	4798      	blx	r3
 80082fc:	3601      	adds	r6, #1
 80082fe:	e7f2      	b.n	80082e6 <__libc_init_array+0x1e>
 8008300:	0800839c 	.word	0x0800839c
 8008304:	0800839c 	.word	0x0800839c
 8008308:	0800839c 	.word	0x0800839c
 800830c:	080083a0 	.word	0x080083a0

08008310 <_init>:
 8008310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008312:	bf00      	nop
 8008314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008316:	bc08      	pop	{r3}
 8008318:	469e      	mov	lr, r3
 800831a:	4770      	bx	lr

0800831c <_fini>:
 800831c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831e:	bf00      	nop
 8008320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008322:	bc08      	pop	{r3}
 8008324:	469e      	mov	lr, r3
 8008326:	4770      	bx	lr
