
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5b4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  0800c884  0800c884  0000d884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cc58  0800cc58  0000dc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800cc60  0800cc60  0000dc60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cc68  0800cc68  0000dc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0800cc6c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e2c  2400006c  0800ccd8  0000e06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000e98  0800ccd8  0000ee98  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027749  00000000  00000000  0000e09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c3e  00000000  00000000  000357e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001920  00000000  00000000  00039428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013af  00000000  00000000  0003ad48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b79f  00000000  00000000  0003c0f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020c9b  00000000  00000000  00077896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017622b  00000000  00000000  00098531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020e75c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007328  00000000  00000000  0020e7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  00215ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c86c 	.word	0x0800c86c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0800c86c 	.word	0x0800c86c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <_ZN7BMS_MODC1Emiiihjii>:
/*********************************************************************************************************
 ** Function name:           BMS_MOD
 ** Descriptions:            Initialization function of teh class
 *********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT,
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
                 uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG_V, int _LAG_T) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800072c:	61da      	str	r2, [r3, #28]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	22fa      	movs	r2, #250	@ 0xfa
 8000732:	621a      	str	r2, [r3, #32]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800073a:	625a      	str	r2, [r3, #36]	@ 0x24
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800074a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000752:	631a      	str	r2, [r3, #48]	@ 0x30
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	69da      	ldr	r2, [r3, #28]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2200      	movs	r2, #0
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000766:	005a      	lsls	r2, r3, #1
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	641a      	str	r2, [r3, #64]	@ 0x40
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2200      	movs	r2, #0
 8000778:	645a      	str	r2, [r3, #68]	@ 0x44
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	005a      	lsls	r2, r3, #1
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	649a      	str	r2, [r3, #72]	@ 0x48
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	2200      	movs	r2, #0
 8000788:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	2200      	movs	r2, #0
 8000790:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2200      	movs	r2, #0
 8000798:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2213      	movs	r2, #19
 80007a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	220a      	movs	r2, #10
 80007b0:	655a      	str	r2, [r3, #84]	@ 0x54
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	3358      	adds	r3, #88	@ 0x58
 80007b6:	2230      	movs	r2, #48	@ 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f00b fbd8 	bl	800bf70 <memset>
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2200      	movs	r2, #0
 80007c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	2200      	movs	r2, #0
 80007cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2200      	movs	r2, #0
 80007d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f241 0268 	movw	r2, #4200	@ 0x1068
 80007de:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	2200      	movs	r2, #0
 80007e6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	2200      	movs	r2, #0
 80007ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	2200      	movs	r2, #0
 80007f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	33a4      	adds	r3, #164	@ 0xa4
 80007fe:	224c      	movs	r2, #76	@ 0x4c
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f00b fbb4 	bl	800bf70 <memset>
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	33f0      	adds	r3, #240	@ 0xf0
 800080c:	2298      	movs	r2, #152	@ 0x98
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f00b fbad 	bl	800bf70 <memset>
	CANID = _ID;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	601a      	str	r2, [r3, #0]
	LIMIT_MAX_V = _MAXV;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	60da      	str	r2, [r3, #12]
	LIMIT_MIN_V = _MINV;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	683a      	ldr	r2, [r7, #0]
 8000826:	611a      	str	r2, [r3, #16]
	LIMIT_MAX_T = _MAXT;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	6a3a      	ldr	r2, [r7, #32]
 800082c:	615a      	str	r2, [r3, #20]
	NUM_CELLS = _NUMCELLS;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000834:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

	uint32_t now = HAL_GetTick();
 8000838:	f002 f9f0 	bl	8002c1c <HAL_GetTick>
 800083c:	6178      	str	r0, [r7, #20]

	time_lim_plotted_volts = now + _LAG_V;
 800083e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	441a      	add	r2, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	635a      	str	r2, [r3, #52]	@ 0x34
	time_lim_sent_volts    = now + _LAG_V;
 8000848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	441a      	add	r2, r3
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	639a      	str	r2, [r3, #56]	@ 0x38
	time_lim_received_volts = now + TIME_LIM_RECV_VOLTS + _LAG_V;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	441a      	add	r2, r3
 800085a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800085c:	441a      	add	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	63da      	str	r2, [r3, #60]	@ 0x3c

	time_lim_plotted_temps = now + _LAG_T;
 8000862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	441a      	add	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	641a      	str	r2, [r3, #64]	@ 0x40
	time_lim_sent_temps    = now + _LAG_T;
 800086c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	441a      	add	r2, r3
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	645a      	str	r2, [r3, #68]	@ 0x44
	time_lim_received_temps = now + TIME_LIM_RECV_TEMPS + _LAG_T;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	441a      	add	r2, r3
 800087e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000880:	441a      	add	r2, r3
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	4618      	mov	r0, r3
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <_ZN7BMS_MOD12voltage_infoEPc>:

/*********************************************************************************************************
 ** Function name:           info
 ** Descriptions:            Function for printing the class data
 *********************************************************************************************************/
void BMS_MOD::voltage_info(char *buffer) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]

	if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 800089a:	f001 faf5 	bl	8001e88 <getUARTState>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b20      	cmp	r3, #32
 80008a2:	bf0c      	ite	eq
 80008a4:	2301      	moveq	r3, #1
 80008a6:	2300      	movne	r3, #0
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	f000 8084 	beq.w	80009b8 <_ZN7BMS_MOD12voltage_infoEPc+0x128>
		print((char*) "\n***********************");
 80008b0:	4851      	ldr	r0, [pc, #324]	@ (80009f8 <_ZN7BMS_MOD12voltage_infoEPc+0x168>)
 80008b2:	f001 faad 	bl	8001e10 <print>
		print((char*) "         BMS");
 80008b6:	4851      	ldr	r0, [pc, #324]	@ (80009fc <_ZN7BMS_MOD12voltage_infoEPc+0x16c>)
 80008b8:	f001 faaa 	bl	8001e10 <print>
		print((char*) "***********************");
 80008bc:	4850      	ldr	r0, [pc, #320]	@ (8000a00 <_ZN7BMS_MOD12voltage_infoEPc+0x170>)
 80008be:	f001 faa7 	bl	8001e10 <print>
		sprintf(buffer, " - ERROR:     %i", error_volt);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	461a      	mov	r2, r3
 80008c8:	494e      	ldr	r1, [pc, #312]	@ (8000a04 <_ZN7BMS_MOD12voltage_infoEPc+0x174>)
 80008ca:	6838      	ldr	r0, [r7, #0]
 80008cc:	f00b fb2e 	bl	800bf2c <siprintf>
		print(buffer);
 80008d0:	6838      	ldr	r0, [r7, #0]
 80008d2:	f001 fa9d 	bl	8001e10 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	494a      	ldr	r1, [pc, #296]	@ (8000a08 <_ZN7BMS_MOD12voltage_infoEPc+0x178>)
 80008de:	6838      	ldr	r0, [r7, #0]
 80008e0:	f00b fb24 	bl	800bf2c <siprintf>
		print(buffer);
 80008e4:	6838      	ldr	r0, [r7, #0]
 80008e6:	f001 fa93 	bl	8001e10 <print>
		sprintf(buffer, " - MAX V =    %i mV", MAX_V);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	461a      	mov	r2, r3
 80008f0:	4946      	ldr	r1, [pc, #280]	@ (8000a0c <_ZN7BMS_MOD12voltage_infoEPc+0x17c>)
 80008f2:	6838      	ldr	r0, [r7, #0]
 80008f4:	f00b fb1a 	bl	800bf2c <siprintf>
		print(buffer);
 80008f8:	6838      	ldr	r0, [r7, #0]
 80008fa:	f001 fa89 	bl	8001e10 <print>
		sprintf(buffer, " - MIN V =    %i mV", MIN_V);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000904:	461a      	mov	r2, r3
 8000906:	4942      	ldr	r1, [pc, #264]	@ (8000a10 <_ZN7BMS_MOD12voltage_infoEPc+0x180>)
 8000908:	6838      	ldr	r0, [r7, #0]
 800090a:	f00b fb0f 	bl	800bf2c <siprintf>
		print(buffer);
 800090e:	6838      	ldr	r0, [r7, #0]
 8000910:	f001 fa7e 	bl	8001e10 <print>
		print((char*) "-----------------------");
 8000914:	483f      	ldr	r0, [pc, #252]	@ (8000a14 <_ZN7BMS_MOD12voltage_infoEPc+0x184>)
 8000916:	f001 fa7b 	bl	8001e10 <print>
		sprintf(buffer, "VOLTS (mV): [%i", cellVoltagemV[0]);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000920:	461a      	mov	r2, r3
 8000922:	493d      	ldr	r1, [pc, #244]	@ (8000a18 <_ZN7BMS_MOD12voltage_infoEPc+0x188>)
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f00b fb01 	bl	800bf2c <siprintf>
		printnl(buffer);
 800092a:	6838      	ldr	r0, [r7, #0]
 800092c:	f001 fa8e 	bl	8001e4c <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	e010      	b.n	8000958 <_ZN7BMS_MOD12voltage_infoEPc+0xc8>
			sprintf(buffer, ", %i", cellVoltagemV[i]);
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	3328      	adds	r3, #40	@ 0x28
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	4413      	add	r3, r2
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	461a      	mov	r2, r3
 8000944:	4935      	ldr	r1, [pc, #212]	@ (8000a1c <_ZN7BMS_MOD12voltage_infoEPc+0x18c>)
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f00b faf0 	bl	800bf2c <siprintf>
			printnl(buffer);
 800094c:	6838      	ldr	r0, [r7, #0]
 800094e:	f001 fa7d 	bl	8001e4c <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	3301      	adds	r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800095e:	461a      	mov	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	4293      	cmp	r3, r2
 8000964:	dbe7      	blt.n	8000936 <_ZN7BMS_MOD12voltage_infoEPc+0xa6>
		}

		for (int i = 0; i < NUM_CELLS; i++) {
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	e00f      	b.n	800098c <_ZN7BMS_MOD12voltage_infoEPc+0xfc>
			voltage_acum += cellVoltagemV[i];
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	3328      	adds	r3, #40	@ 0x28
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	440b      	add	r3, r1
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	441a      	add	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		for (int i = 0; i < NUM_CELLS; i++) {
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	3301      	adds	r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000992:	461a      	mov	r2, r3
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	4293      	cmp	r3, r2
 8000998:	dbe8      	blt.n	800096c <_ZN7BMS_MOD12voltage_infoEPc+0xdc>
		}

		print((char*) "]");
 800099a:	4821      	ldr	r0, [pc, #132]	@ (8000a20 <_ZN7BMS_MOD12voltage_infoEPc+0x190>)
 800099c:	f001 fa38 	bl	8001e10 <print>
		sprintf(buffer, " - V(max) = %i mV || V(min) = %i", MAX_V, MIN_V);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	699a      	ldr	r2, [r3, #24]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009aa:	491e      	ldr	r1, [pc, #120]	@ (8000a24 <_ZN7BMS_MOD12voltage_infoEPc+0x194>)
 80009ac:	6838      	ldr	r0, [r7, #0]
 80009ae:	f00b fabd 	bl	800bf2c <siprintf>
		print(buffer);
 80009b2:	6838      	ldr	r0, [r7, #0]
 80009b4:	f001 fa2c 	bl	8001e10 <print>
	}
	sprintf(buffer, "- BALANCING V = %i mV", BALANCING_V);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80009be:	461a      	mov	r2, r3
 80009c0:	4919      	ldr	r1, [pc, #100]	@ (8000a28 <_ZN7BMS_MOD12voltage_infoEPc+0x198>)
 80009c2:	6838      	ldr	r0, [r7, #0]
 80009c4:	f00b fab2 	bl	800bf2c <siprintf>
	print(buffer);
 80009c8:	6838      	ldr	r0, [r7, #0]
 80009ca:	f001 fa21 	bl	8001e10 <print>

	sprintf(buffer, "- STACK VOLTAGE = %i V", voltage_acum / 1000);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d4:	4a15      	ldr	r2, [pc, #84]	@ (8000a2c <_ZN7BMS_MOD12voltage_infoEPc+0x19c>)
 80009d6:	fb82 1203 	smull	r1, r2, r2, r3
 80009da:	1192      	asrs	r2, r2, #6
 80009dc:	17db      	asrs	r3, r3, #31
 80009de:	1ad3      	subs	r3, r2, r3
 80009e0:	461a      	mov	r2, r3
 80009e2:	4913      	ldr	r1, [pc, #76]	@ (8000a30 <_ZN7BMS_MOD12voltage_infoEPc+0x1a0>)
 80009e4:	6838      	ldr	r0, [r7, #0]
 80009e6:	f00b faa1 	bl	800bf2c <siprintf>
	print(buffer);
 80009ea:	6838      	ldr	r0, [r7, #0]
 80009ec:	f001 fa10 	bl	8001e10 <print>
}
 80009f0:	bf00      	nop
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	0800c884 	.word	0x0800c884
 80009fc:	0800c8a0 	.word	0x0800c8a0
 8000a00:	0800c8b0 	.word	0x0800c8b0
 8000a04:	0800c8c8 	.word	0x0800c8c8
 8000a08:	0800c8dc 	.word	0x0800c8dc
 8000a0c:	0800c8f0 	.word	0x0800c8f0
 8000a10:	0800c904 	.word	0x0800c904
 8000a14:	0800c918 	.word	0x0800c918
 8000a18:	0800c930 	.word	0x0800c930
 8000a1c:	0800c940 	.word	0x0800c940
 8000a20:	0800c948 	.word	0x0800c948
 8000a24:	0800c94c 	.word	0x0800c94c
 8000a28:	0800c970 	.word	0x0800c970
 8000a2c:	10624dd3 	.word	0x10624dd3
 8000a30:	0800c988 	.word	0x0800c988

08000a34 <_ZN7BMS_MOD5parseEmPhm>:

/*********************************************************************************************************
 ** Function name:           parse
 ** Descriptions:            Function for parsing the received data via CAN protocol
 *********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	@ 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
 8000a40:	603b      	str	r3, [r7, #0]
	if (id > CANID && id < CANID + 30) {
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	f240 813a 	bls.w	8000cc2 <_ZN7BMS_MOD5parseEmPhm+0x28e>
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	331e      	adds	r3, #30
 8000a54:	68ba      	ldr	r2, [r7, #8]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	f080 8133 	bcs.w	8000cc2 <_ZN7BMS_MOD5parseEmPhm+0x28e>
		int m = id % CANID;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a66:	fb01 f202 	mul.w	r2, r1, r2
 8000a6a:	1a9b      	subs	r3, r3, r2
 8000a6c:	617b      	str	r3, [r7, #20]
		int pos = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
		if (m >= 1 && m <= 5) {
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	f340 80a8 	ble.w	8000bca <_ZN7BMS_MOD5parseEmPhm+0x196>
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	2b05      	cmp	r3, #5
 8000a7e:	f300 80a4 	bgt.w	8000bca <_ZN7BMS_MOD5parseEmPhm+0x196>
			time_lim_received_volts = t + TIME_LIM_RECV_VOLTS;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	441a      	add	r2, r3
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	63da      	str	r2, [r3, #60]	@ 0x3c

			for (int i = 0; i < 4; i++) {
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a92:	e058      	b.n	8000b46 <_ZN7BMS_MOD5parseEmPhm+0x112>
				pos = (m - 1) * 4 + i;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a9c:	4413      	add	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
				if (pos >= 19)
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	2b12      	cmp	r3, #18
 8000aa4:	dc53      	bgt.n	8000b4e <_ZN7BMS_MOD5parseEmPhm+0x11a>
					break;

				cellVoltagemV[pos] = (buf[2 * i] << 8) | buf[2 * i + 1];
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	461a      	mov	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	021b      	lsls	r3, r3, #8
 8000ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ab6:	0052      	lsls	r2, r2, #1
 8000ab8:	3201      	adds	r2, #1
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	440a      	add	r2, r1
 8000abe:	7812      	ldrb	r2, [r2, #0]
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	68f9      	ldr	r1, [r7, #12]
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	3328      	adds	r3, #40	@ 0x28
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	440b      	add	r3, r1
 8000acc:	605a      	str	r2, [r3, #4]

				if ((cellVoltagemV[pos] > LIMIT_MAX_V
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	3328      	adds	r3, #40	@ 0x28
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	4413      	add	r3, r2
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	dc09      	bgt.n	8000af6 <_ZN7BMS_MOD5parseEmPhm+0xc2>
						|| cellVoltagemV[pos] < LIMIT_MIN_V)
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	3328      	adds	r3, #40	@ 0x28
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	4413      	add	r3, r2
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	da1e      	bge.n	8000b34 <_ZN7BMS_MOD5parseEmPhm+0x100>
						&& pos < NUM_CELLS) {
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000afc:	461a      	mov	r2, r3
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	4293      	cmp	r3, r2
 8000b02:	da17      	bge.n	8000b34 <_ZN7BMS_MOD5parseEmPhm+0x100>
					flag_error_volt[pos]++;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	3216      	adds	r2, #22
 8000b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b0e:	1c59      	adds	r1, r3, #1
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	3216      	adds	r2, #22
 8000b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					if (flag_error_volt[pos] >= max_flag)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	3216      	adds	r2, #22
 8000b20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	db09      	blt.n	8000b40 <_ZN7BMS_MOD5parseEmPhm+0x10c>
						error_volt = BMS_ERROR_VOLTS;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2202      	movs	r2, #2
 8000b30:	605a      	str	r2, [r3, #4]
					if (flag_error_volt[pos] >= max_flag)
 8000b32:	e005      	b.n	8000b40 <_ZN7BMS_MOD5parseEmPhm+0x10c>
					} else {
					flag_error_volt[pos] = 0;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	3216      	adds	r2, #22
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int i = 0; i < 4; i++) {
 8000b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b42:	3301      	adds	r3, #1
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	dda3      	ble.n	8000a94 <_ZN7BMS_MOD5parseEmPhm+0x60>
 8000b4c:	e000      	b.n	8000b50 <_ZN7BMS_MOD5parseEmPhm+0x11c>
					break;
 8000b4e:	bf00      	nop
				}
			}

			MAX_V = cellVoltagemV[0];
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	619a      	str	r2, [r3, #24]
			MIN_V = cellVoltagemV[0];
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			for (int i = 1; i < 19; i++) {
 8000b66:	2301      	movs	r3, #1
 8000b68:	623b      	str	r3, [r7, #32]
 8000b6a:	e029      	b.n	8000bc0 <_ZN7BMS_MOD5parseEmPhm+0x18c>
				if (cellVoltagemV[i] > MAX_V)
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	6a3b      	ldr	r3, [r7, #32]
 8000b70:	3328      	adds	r3, #40	@ 0x28
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	685a      	ldr	r2, [r3, #4]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	dd08      	ble.n	8000b92 <_ZN7BMS_MOD5parseEmPhm+0x15e>
					MAX_V = cellVoltagemV[i];
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	6a3b      	ldr	r3, [r7, #32]
 8000b84:	3328      	adds	r3, #40	@ 0x28
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	685a      	ldr	r2, [r3, #4]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	619a      	str	r2, [r3, #24]
 8000b90:	e013      	b.n	8000bba <_ZN7BMS_MOD5parseEmPhm+0x186>
				else if (cellVoltagemV[i] < MIN_V)
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	6a3b      	ldr	r3, [r7, #32]
 8000b96:	3328      	adds	r3, #40	@ 0x28
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	da08      	bge.n	8000bba <_ZN7BMS_MOD5parseEmPhm+0x186>
					MIN_V = cellVoltagemV[i];
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	6a3b      	ldr	r3, [r7, #32]
 8000bac:	3328      	adds	r3, #40	@ 0x28
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4413      	add	r3, r2
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			for (int i = 1; i < 19; i++) {
 8000bba:	6a3b      	ldr	r3, [r7, #32]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	623b      	str	r3, [r7, #32]
 8000bc0:	6a3b      	ldr	r3, [r7, #32]
 8000bc2:	2b12      	cmp	r3, #18
 8000bc4:	ddd2      	ble.n	8000b6c <_ZN7BMS_MOD5parseEmPhm+0x138>
			}

			return true;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e07c      	b.n	8000cc4 <_ZN7BMS_MOD5parseEmPhm+0x290>

		} else if (m >= 21 && m <= 25) {
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	2b14      	cmp	r3, #20
 8000bce:	dd78      	ble.n	8000cc2 <_ZN7BMS_MOD5parseEmPhm+0x28e>
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	2b19      	cmp	r3, #25
 8000bd4:	dc75      	bgt.n	8000cc2 <_ZN7BMS_MOD5parseEmPhm+0x28e>
			// m = 21 → packet 0, m = 25 → packet 4
			time_lim_received_temps = t + TIME_LIM_RECV_TEMPS;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	441a      	add	r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	649a      	str	r2, [r3, #72]	@ 0x48
			if (flag_charger == 1)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d104      	bne.n	8000bf6 <_ZN7BMS_MOD5parseEmPhm+0x1c2>
				module_send_message_CAN1(id, buf, 8);
 8000bec:	2208      	movs	r2, #8
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	68b8      	ldr	r0, [r7, #8]
 8000bf2:	f001 f8ab 	bl	8001d4c <module_send_message_CAN1>

			for (int i = 0; i < 8; i++) {
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
 8000bfa:	e021      	b.n	8000c40 <_ZN7BMS_MOD5parseEmPhm+0x20c>
				pos = (m - 21) * 8 + i;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	3b15      	subs	r3, #21
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	69fa      	ldr	r2, [r7, #28]
 8000c04:	4413      	add	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
				if (pos >= 38)
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	2b25      	cmp	r3, #37	@ 0x25
 8000c0c:	dc1c      	bgt.n	8000c48 <_ZN7BMS_MOD5parseEmPhm+0x214>
					break;

				cellTemperature[pos] = buf[i];
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	4413      	add	r3, r2
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	4619      	mov	r1, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	323c      	adds	r2, #60	@ 0x3c
 8000c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				if (cellTemperature[pos] > LIMIT_MAX_T)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	323c      	adds	r2, #60	@ 0x3c
 8000c28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dd02      	ble.n	8000c3a <_ZN7BMS_MOD5parseEmPhm+0x206>
					error_temp = BMS_ERROR_TEMP;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2203      	movs	r2, #3
 8000c38:	609a      	str	r2, [r3, #8]
			for (int i = 0; i < 8; i++) {
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	61fb      	str	r3, [r7, #28]
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	2b07      	cmp	r3, #7
 8000c44:	ddda      	ble.n	8000bfc <_ZN7BMS_MOD5parseEmPhm+0x1c8>
 8000c46:	e000      	b.n	8000c4a <_ZN7BMS_MOD5parseEmPhm+0x216>
					break;
 8000c48:	bf00      	nop


			}

		      MAX_T = cellTemperature[0];
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		      MIN_T = cellTemperature[0];
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		      for (int i = 0; i < 38; i++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
 8000c66:	e027      	b.n	8000cb8 <_ZN7BMS_MOD5parseEmPhm+0x284>
		      {
		        if (cellTemperature[i] > MAX_T)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	323c      	adds	r2, #60	@ 0x3c
 8000c6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	dd08      	ble.n	8000c8e <_ZN7BMS_MOD5parseEmPhm+0x25a>
		          MAX_T = cellTemperature[i];
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	323c      	adds	r2, #60	@ 0x3c
 8000c82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8000c8c:	e011      	b.n	8000cb2 <_ZN7BMS_MOD5parseEmPhm+0x27e>
		        else if (cellTemperature[i] < MIN_T)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	323c      	adds	r2, #60	@ 0x3c
 8000c94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	da07      	bge.n	8000cb2 <_ZN7BMS_MOD5parseEmPhm+0x27e>
		          MIN_T = cellTemperature[i];
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	323c      	adds	r2, #60	@ 0x3c
 8000ca8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		      for (int i = 0; i < 38; i++)
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	61bb      	str	r3, [r7, #24]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	2b25      	cmp	r3, #37	@ 0x25
 8000cbc:	ddd4      	ble.n	8000c68 <_ZN7BMS_MOD5parseEmPhm+0x234>
		      }


			return true;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <_ZN7BMS_MOD5parseEmPhm+0x290>
		}

	}

	return false;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3728      	adds	r7, #40	@ 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <_ZN7BMS_MOD13query_voltageEmPc>:

/*********************************************************************************************************
 ** Function name:           query_voltage
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/
int BMS_MOD::query_voltage(uint32_t time, char *buffer) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
	// Shunt voltage in milivolts

	//message_balancing[1] = BALANCING_V & 0xFF; // Coment this two lines for disabling the balancing
	//message_balancing[0] = (BALANCING_V >> 8) & 0xFF; // Coment this two lines for disabling the balancing

	if (time > time_lim_sent_volts) {
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cdc:	68ba      	ldr	r2, [r7, #8]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d91d      	bls.n	8000d1e <_ZN7BMS_MOD13query_voltageEmPc+0x52>
		time_lim_sent_volts += TIME_LIM_SEND_VOLTS;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6a1b      	ldr	r3, [r3, #32]
 8000cea:	441a      	add	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	639a      	str	r2, [r3, #56]	@ 0x38
		if (CANID != 0x00) { //It keeps sending 0x00 and dont know where
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d012      	beq.n	8000d1e <_ZN7BMS_MOD13query_voltageEmPc+0x52>
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	334c      	adds	r3, #76	@ 0x4c
 8000d00:	2202      	movs	r2, #2
 8000d02:	4619      	mov	r1, r3
 8000d04:	f001 f864 	bl	8001dd0 <module_send_message_CAN2>
 8000d08:	4603      	mov	r3, r0
					!= HAL_OK) {
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	bf14      	ite	ne
 8000d0e:	2301      	movne	r3, #1
 8000d10:	2300      	moveq	r3, #0
 8000d12:	b2db      	uxtb	r3, r3
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d002      	beq.n	8000d1e <_ZN7BMS_MOD13query_voltageEmPc+0x52>
				error_volt = BMS_ERROR_COMMUNICATION;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	605a      	str	r2, [r3, #4]
		}

	}


    if (time > time_lim_received_volts) {
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d902      	bls.n	8000d2e <_ZN7BMS_MOD13query_voltageEmPc+0x62>

            error_volt = BMS_ERROR_COMMUNICATION;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	605a      	str	r2, [r3, #4]
    }

	if (TIME_LIM_PLOT_VOLTS > 0 && time > time_lim_plotted_volts) {
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d00f      	beq.n	8000d56 <_ZN7BMS_MOD13query_voltageEmPc+0x8a>
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d90a      	bls.n	8000d56 <_ZN7BMS_MOD13query_voltageEmPc+0x8a>
		time_lim_plotted_volts += TIME_LIM_PLOT_VOLTS;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	69db      	ldr	r3, [r3, #28]
 8000d48:	441a      	add	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	635a      	str	r2, [r3, #52]	@ 0x34
		voltage_info(buffer);
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	f7ff fd9d 	bl	8000890 <_ZN7BMS_MOD12voltage_infoEPc>
	}

	for (int i = 0; i < NUM_CELLS; i++) {
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	e00f      	b.n	8000d7c <_ZN7BMS_MOD13query_voltageEmPc+0xb0>
		voltage_acum += cellVoltagemV[i];
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000d62:	68f9      	ldr	r1, [r7, #12]
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	3328      	adds	r3, #40	@ 0x28
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	441a      	add	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	for (int i = 0; i < NUM_CELLS; i++) {
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000d82:	461a      	mov	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	4293      	cmp	r3, r2
 8000d88:	dbe8      	blt.n	8000d5c <_ZN7BMS_MOD13query_voltageEmPc+0x90>
	}
	return error_volt;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	685b      	ldr	r3, [r3, #4]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_ZN7BMS_MOD17query_temperatureEmPc>:
/*********************************************************************************************************
 ** Function name:           query_temperature
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/

int BMS_MOD::query_temperature(uint32_t time, char *buffer) {
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b084      	sub	sp, #16
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
// Function for performing a correct behavior
	if (time > time_lim_sent_temps) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE TEMPERATURES
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d91b      	bls.n	8000de4 <_ZN7BMS_MOD17query_temperatureEmPc+0x4e>
		time_lim_sent_temps += TIME_LIM_SEND_TEMPS;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000db4:	441a      	add	r2, r3
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	645a      	str	r2, [r3, #68]	@ 0x44

		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f103 0014 	add.w	r0, r3, #20
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	334e      	adds	r3, #78	@ 0x4e
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f001 f801 	bl	8001dd0 <module_send_message_CAN2>
 8000dce:	4603      	mov	r3, r0
				!= HAL_OK) {
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf14      	ite	ne
 8000dd4:	2301      	movne	r3, #1
 8000dd6:	2300      	moveq	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d002      	beq.n	8000de4 <_ZN7BMS_MOD17query_temperatureEmPc+0x4e>
			error_temp = BMS_ERROR_TEMP; // If the message is not sended then, error
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2203      	movs	r2, #3
 8000de2:	609a      	str	r2, [r3, #8]
		}
	}

	if (time > time_lim_received_temps) {
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000de8:	68ba      	ldr	r2, [r7, #8]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d902      	bls.n	8000df4 <_ZN7BMS_MOD17query_temperatureEmPc+0x5e>
	    error_temp = BMS_ERROR_COMMUNICATION;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2201      	movs	r2, #1
 8000df2:	609a      	str	r2, [r3, #8]
	}

	if (TIME_LIM_PLOT_TEMPS > 0 && time > time_lim_plotted_temps) {
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d00b      	beq.n	8000e14 <_ZN7BMS_MOD17query_temperatureEmPc+0x7e>
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d906      	bls.n	8000e14 <_ZN7BMS_MOD17query_temperatureEmPc+0x7e>
		time_lim_plotted_temps += TIME_LIM_PLOT_TEMPS;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e0e:	441a      	add	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	641a      	str	r2, [r3, #64]	@ 0x40
		//temperature_info(buffer);
	}



	return error_temp;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	689b      	ldr	r3, [r3, #8]

}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2202      	movs	r2, #2
 8000e44:	731a      	strb	r2, [r3, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2202      	movs	r2, #2
 8000e4a:	611a      	str	r2, [r3, #16]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e52:	615a      	str	r2, [r3, #20]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2264      	movs	r2, #100	@ 0x64
 8000e58:	619a      	str	r2, [r3, #24]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4a18      	ldr	r2, [pc, #96]	@ (8000ec0 <_ZN7CPU_MODC1Emmi+0xa0>)
 8000e5e:	61da      	str	r2, [r3, #28]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	695a      	ldr	r2, [r3, #20]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	621a      	str	r2, [r3, #32]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	69da      	ldr	r2, [r3, #28]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6a1a      	ldr	r2, [r3, #32]
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	441a      	add	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	441a      	add	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	441a      	add	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	000f4240 	.word	0x000f4240

08000ec4 <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ed8:	d131      	bne.n	8000f3e <_ZN7CPU_MOD5parseEmPhm+0x7a>
        error = CPU_OK;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	69da      	ldr	r2, [r3, #28]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	441a      	add	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	7812      	ldrb	r2, [r2, #0]
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8000f06:	dd18      	ble.n	8000f3a <_ZN7CPU_MOD5parseEmPhm+0x76>
            error = CPU_BUS_LINE_OK;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	330c      	adds	r3, #12
 8000f16:	2201      	movs	r2, #1
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f000 ff17 	bl	8001d4c <module_send_message_CAN1>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	bf14      	ite	ne
 8000f24:	2301      	movne	r3, #1
 8000f26:	2300      	moveq	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d005      	beq.n	8000f3a <_ZN7CPU_MOD5parseEmPhm+0x76>
                error = CPU_ERROR_COMMUNICATION;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2201      	movs	r2, #1
 8000f32:	609a      	str	r2, [r3, #8]
                print((char*)"error message");
 8000f34:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <_ZN7CPU_MOD5parseEmPhm+0x84>)
 8000f36:	f000 ff6b 	bl	8001e10 <print>
            }

        }
        return true;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <_ZN7CPU_MOD5parseEmPhm+0x7c>
    }
    return false;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	0800cafc 	.word	0x0800cafc

08000f4c <_ZN7CPU_MOD5queryEmPc>:

// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function to check if i need to send a mesage new mesage and the received mesajes interval are within the limits
// ********************************************************************************************************
int CPU_MOD::query(uint32_t time, char* buffer) {
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
	// Function for performing a correct behaivour
    if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE BMS
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f5c:	68ba      	ldr	r2, [r7, #8]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d906      	bls.n	8000f70 <_ZN7CPU_MOD5queryEmPc+0x24>
        time_lim_sended += TIME_LIM_SEND;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	441a      	add	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (time > time_lim_received)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d902      	bls.n	8000f80 <_ZN7CPU_MOD5queryEmPc+0x34>
        error = CPU_ERROR_COMMUNICATION; ///////Cheking if everything is alright each time
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	609a      	str	r2, [r3, #8]

    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00b      	beq.n	8000fa0 <_ZN7CPU_MOD5queryEmPc+0x54>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d906      	bls.n	8000fa0 <_ZN7CPU_MOD5queryEmPc+0x54>
        time_lim_plotted += TIME_LIM_PLOT;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6a1a      	ldr	r2, [r3, #32]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	441a      	add	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	621a      	str	r2, [r3, #32]
        //info(buffer);
    }
    return error;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	689b      	ldr	r3, [r3, #8]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <_ZN7CPU_MOD11updateStateEi>:

void CPU_MOD::updateState(int s) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	731a      	strb	r2, [r3, #12]
    current_state = s;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	611a      	str	r2, [r3, #16]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	0000      	movs	r0, r0
	...

08000fd8 <_Z11readCurrentv>:
#include "main.h"
#include "class_current.h"

extern ADC_HandleTypeDef hadc1;

int readCurrent() {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1);
 8000fde:	481e      	ldr	r0, [pc, #120]	@ (8001058 <_Z11readCurrentv+0x80>)
 8000fe0:	f002 fb56 	bl	8003690 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	481b      	ldr	r0, [pc, #108]	@ (8001058 <_Z11readCurrentv+0x80>)
 8000fea:	f002 fc4f 	bl	800388c <HAL_ADC_PollForConversion>

	float adc_value, V_adc;
	int current;

	adc_value = HAL_ADC_GetValue(&hadc1);
 8000fee:	481a      	ldr	r0, [pc, #104]	@ (8001058 <_Z11readCurrentv+0x80>)
 8000ff0:	f002 fd40 	bl	8003a74 <HAL_ADC_GetValue>
 8000ff4:	ee07 0a90 	vmov	s15, r0
 8000ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ffc:	edc7 7a03 	vstr	s15, [r7, #12]
	V_adc = (adc_value * 5 / 4095); //12 bits de resolución
 8001000:	edd7 7a03 	vldr	s15, [r7, #12]
 8001004:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001008:	ee27 7a87 	vmul.f32	s14, s15, s14
 800100c:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800105c <_Z11readCurrentv+0x84>
 8001010:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001014:	edc7 7a02 	vstr	s15, [r7, #8]

	current = (3020 - adc_value) * 0.14286;
 8001018:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001060 <_Z11readCurrentv+0x88>
 800101c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001024:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001028:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8001050 <_Z11readCurrentv+0x78>
 800102c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001030:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001034:	ee17 3a90 	vmov	r3, s15
 8001038:	607b      	str	r3, [r7, #4]

	HAL_ADC_Stop(&hadc1);
 800103a:	4807      	ldr	r0, [pc, #28]	@ (8001058 <_Z11readCurrentv+0x80>)
 800103c:	f002 fbf2 	bl	8003824 <HAL_ADC_Stop>
	return current;
 8001040:	687b      	ldr	r3, [r7, #4]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	f3af 8000 	nop.w
 8001050:	89f40a28 	.word	0x89f40a28
 8001054:	3fc2493c 	.word	0x3fc2493c
 8001058:	24000088 	.word	0x24000088
 800105c:	457ff000 	.word	0x457ff000
 8001060:	453cc000 	.word	0x453cc000

08001064 <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX) {
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2200      	movs	r2, #0
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2200      	movs	r2, #0
 8001080:	721a      	strb	r2, [r3, #8]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2200      	movs	r2, #0
 8001086:	725a      	strb	r2, [r3, #9]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80010ac:	621a      	str	r2, [r3, #32]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	22fa      	movs	r2, #250	@ 0xfa
 80010b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2232      	movs	r2, #50	@ 0x32
 80010b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2232      	movs	r2, #50	@ 0x32
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2200      	movs	r2, #0
 80010c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2200      	movs	r2, #0
 80010ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2200      	movs	r2, #0
 80010d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2200      	movs	r2, #0
 80010d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2200      	movs	r2, #0
 80010dc:	641a      	str	r2, [r3, #64]	@ 0x40
	CANID = ID;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	605a      	str	r2, [r3, #4]
	C_MAX = _C_MAX;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	601a      	str	r2, [r3, #0]
	flag_error_current = 1;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2201      	movs	r2, #1
 80010ee:	61da      	str	r2, [r3, #28]
}
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4618      	mov	r0, r3
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <_ZN11Current_MOD5queryEiPc>:

// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char *buffer) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
	error = Current_OK;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2200      	movs	r2, #0
 8001110:	631a      	str	r2, [r3, #48]	@ 0x30

	Current = readCurrent();
 8001112:	f7ff ff61 	bl	8000fd8 <_Z11readCurrentv>
 8001116:	4602      	mov	r2, r0
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	63da      	str	r2, [r3, #60]	@ 0x3c

	if (Current > C_MAX * 0.8 && Current < C_MAX) {
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001134:	ed9f 5b40 	vldr	d5, [pc, #256]	@ 8001238 <_ZN11Current_MOD5queryEiPc+0x138>
 8001138:	ee27 7b05 	vmul.f64	d7, d7, d5
 800113c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001144:	dd11      	ble.n	800116a <_ZN11Current_MOD5queryEiPc+0x6a>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	da0b      	bge.n	800116a <_ZN11Current_MOD5queryEiPc+0x6a>
		if (flag_error_current == 0)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d107      	bne.n	800116a <_ZN11Current_MOD5queryEiPc+0x6a>
			module_send_message_NoExtId_CAN1(0x500, message, 1); //If current between 80 and 100% of maximun, sends alert
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3308      	adds	r3, #8
 800115e:	2201      	movs	r2, #1
 8001160:	4619      	mov	r1, r3
 8001162:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001166:	f000 fe13 	bl	8001d90 <module_send_message_NoExtId_CAN1>
	}

	if (Current > C_MAX) {
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	dd18      	ble.n	80011a8 <_ZN11Current_MOD5queryEiPc+0xa8>
		if (flag_error_current == 1) {
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d107      	bne.n	800118e <_ZN11Current_MOD5queryEiPc+0x8e>
			module_send_message_NoExtId_CAN1(0x501, message, 2); //If current over maximun, sends alert
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3308      	adds	r3, #8
 8001182:	2202      	movs	r2, #2
 8001184:	4619      	mov	r1, r3
 8001186:	f240 5001 	movw	r0, #1281	@ 0x501
 800118a:	f000 fe01 	bl	8001d90 <module_send_message_NoExtId_CAN1>
		}

		flag_error_current++;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	61da      	str	r2, [r3, #28]

		if (flag_charger != 1 || flag_charger == 1) //Only cut the AMS if accu not connected to charger, during charging the current control is on charger
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800119c:	2b01      	cmp	r3, #1
 800119e:	d119      	bne.n	80011d4 <_ZN11Current_MOD5queryEiPc+0xd4>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	e015      	b.n	80011d4 <_ZN11Current_MOD5queryEiPc+0xd4>
				//error = Current_ERROR_MAXIMUN_C;
				//print((char*)"MAXIMA Corriente");
			}
		}
	} else {
		if (flag_error_current != 0)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00e      	beq.n	80011ce <_ZN11Current_MOD5queryEiPc+0xce>
			for (int i = 0; i < 5; i++) {
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	e008      	b.n	80011c8 <_ZN11Current_MOD5queryEiPc+0xc8>
				module_send_message_NoExtId_CAN1(0x502, 0, 2); //If current normal, sends green flag
 80011b6:	2202      	movs	r2, #2
 80011b8:	2100      	movs	r1, #0
 80011ba:	f240 5002 	movw	r0, #1282	@ 0x502
 80011be:	f000 fde7 	bl	8001d90 <module_send_message_NoExtId_CAN1>
			for (int i = 0; i < 5; i++) {
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3301      	adds	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	ddf3      	ble.n	80011b6 <_ZN11Current_MOD5queryEiPc+0xb6>
			}
		flag_error_current = 0;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
	}

	if (time > time_lim_sended) {
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dd16      	ble.n	800120c <_ZN11Current_MOD5queryEiPc+0x10c>
		time_lim_sended += TIME_LIM_SEND;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e6:	441a      	add	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	62da      	str	r2, [r3, #44]	@ 0x2c
		message[0] = 0;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	721a      	strb	r2, [r3, #8]
		message[1] = Current & 0xFF;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	725a      	strb	r2, [r3, #9]
		module_send_message_NoExtId_CAN1(CANID, message, 2); //Sends current through CAN each interval of ms
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6858      	ldr	r0, [r3, #4]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	3308      	adds	r3, #8
 8001204:	2202      	movs	r2, #2
 8001206:	4619      	mov	r1, r3
 8001208:	f000 fdc2 	bl	8001d90 <module_send_message_NoExtId_CAN1>
	}

	if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	2b00      	cmp	r3, #0
 8001212:	dd0b      	ble.n	800122c <_ZN11Current_MOD5queryEiPc+0x12c>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	429a      	cmp	r2, r3
 800121c:	dd06      	ble.n	800122c <_ZN11Current_MOD5queryEiPc+0x12c>
		time_lim_plotted += TIME_LIM_PLOT;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	441a      	add	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	629a      	str	r2, [r3, #40]	@ 0x28
		//info(buffer);

	}

	return error;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	9999999a 	.word	0x9999999a
 800123c:	3fe99999 	.word	0x3fe99999

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b085      	sub	sp, #20
 8001244:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001246:	f001 fc63 	bl	8002b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124a:	f000 f8a5 	bl	8001398 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800124e:	f000 f91f 	bl	8001490 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001252:	f000 fc57 	bl	8001b04 <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 8001256:	f000 fadd 	bl	8001814 <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 800125a:	f000 fa51 	bl	8001700 <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 800125e:	f000 fbf1 	bl	8001a44 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8001262:	f000 f949 	bl	80014f8 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 8001266:	f000 f9d1 	bl	800160c <_ZL12MX_ADC3_Initv>
  MX_TIM17_Init();
 800126a:	f000 fb5d 	bl	8001928 <_ZL13MX_TIM17_Initv>
  /* USER CODE BEGIN 2 */

  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 800126e:	483f      	ldr	r0, [pc, #252]	@ (800136c <main+0x12c>)
 8001270:	f003 ffe2 	bl	8005238 <HAL_FDCAN_Start>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	bf0c      	ite	eq
 800127a:	2301      	moveq	r3, #1
 800127c:	2300      	movne	r3, #0
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <main+0x4a>
	  print((char*)"CAN_ACU iniciado");
 8001284:	483a      	ldr	r0, [pc, #232]	@ (8001370 <main+0x130>)
 8001286:	f000 fdc3 	bl	8001e10 <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 800128a:	2200      	movs	r2, #0
 800128c:	2101      	movs	r1, #1
 800128e:	4837      	ldr	r0, [pc, #220]	@ (800136c <main+0x12c>)
 8001290:	f004 f9c4 	bl	800561c <HAL_FDCAN_ActivateNotification>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	bf0c      	ite	eq
 800129a:	2301      	moveq	r3, #1
 800129c:	2300      	movne	r3, #0
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <main+0x6a>
  {
	  print((char*)"CAN_ACU notification");
 80012a4:	4833      	ldr	r0, [pc, #204]	@ (8001374 <main+0x134>)
 80012a6:	f000 fdb3 	bl	8001e10 <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 80012aa:	4833      	ldr	r0, [pc, #204]	@ (8001378 <main+0x138>)
 80012ac:	f003 ffc4 	bl	8005238 <HAL_FDCAN_Start>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bf0c      	ite	eq
 80012b6:	2301      	moveq	r3, #1
 80012b8:	2300      	movne	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <main+0x86>
	  print((char*)"CAN_BMS iniciado");
 80012c0:	482e      	ldr	r0, [pc, #184]	@ (800137c <main+0x13c>)
 80012c2:	f000 fda5 	bl	8001e10 <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 80012c6:	482e      	ldr	r0, [pc, #184]	@ (8001380 <main+0x140>)
 80012c8:	f002 f9e2 	bl	8003690 <HAL_ADC_Start>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	bf0c      	ite	eq
 80012d2:	2301      	moveq	r3, #1
 80012d4:	2300      	movne	r3, #0
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <main+0xa2>
	  print((char*)"ADC iniciado");
 80012dc:	4829      	ldr	r0, [pc, #164]	@ (8001384 <main+0x144>)
 80012de:	f000 fd97 	bl	8001e10 <print>
  }

  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80012e2:	2100      	movs	r1, #0
 80012e4:	4828      	ldr	r0, [pc, #160]	@ (8001388 <main+0x148>)
 80012e6:	f008 fd39 	bl	8009d5c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 80012ea:	f000 fddd 	bl	8001ea8 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 80012ee:	4b27      	ldr	r3, [pc, #156]	@ (800138c <main+0x14c>)
 80012f0:	4a27      	ldr	r2, [pc, #156]	@ (8001390 <main+0x150>)
 80012f2:	2140      	movs	r1, #64	@ 0x40
 80012f4:	4820      	ldr	r0, [pc, #128]	@ (8001378 <main+0x138>)
 80012f6:	f004 f825 	bl	8005344 <HAL_FDCAN_GetRxMessage>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bf0c      	ite	eq
 8001300:	2301      	moveq	r3, #1
 8001302:	2300      	movne	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0ef      	beq.n	80012ea <main+0xaa>

		  msg_bms.id = RxHeader_bms.Identifier;
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <main+0x150>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a21      	ldr	r2, [pc, #132]	@ (8001394 <main+0x154>)
 8001310:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 8001312:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <main+0x150>)
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b1e      	ldr	r3, [pc, #120]	@ (8001394 <main+0x154>)
 800131a:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	e00c      	b.n	800133c <main+0xfc>
 8001322:	4a1a      	ldr	r2, [pc, #104]	@ (800138c <main+0x14c>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4413      	add	r3, r2
 8001328:	7819      	ldrb	r1, [r3, #0]
 800132a:	4a1a      	ldr	r2, [pc, #104]	@ (8001394 <main+0x154>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	3305      	adds	r3, #5
 8001332:	460a      	mov	r2, r1
 8001334:	701a      	strb	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3301      	adds	r3, #1
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b07      	cmp	r3, #7
 8001340:	ddef      	ble.n	8001322 <main+0xe2>
		  msg_bms.bus = 2;
 8001342:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <main+0x154>)
 8001344:	2202      	movs	r2, #2
 8001346:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 8001348:	f001 fc68 	bl	8002c1c <HAL_GetTick>
 800134c:	4603      	mov	r3, r0
 800134e:	4a11      	ldr	r2, [pc, #68]	@ (8001394 <main+0x154>)
 8001350:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <main+0x154>)
 8001354:	466c      	mov	r4, sp
 8001356:	f103 0210 	add.w	r2, r3, #16
 800135a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800135e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001364:	f000 ff98 	bl	8002298 <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001368:	e7bf      	b.n	80012ea <main+0xaa>
 800136a:	bf00      	nop
 800136c:	24000168 	.word	0x24000168
 8001370:	0800cb0c 	.word	0x0800cb0c
 8001374:	0800cb20 	.word	0x0800cb20
 8001378:	24000208 	.word	0x24000208
 800137c:	0800cb38 	.word	0x0800cb38
 8001380:	240000f8 	.word	0x240000f8
 8001384:	0800cb4c 	.word	0x0800cb4c
 8001388:	240002a8 	.word	0x240002a8
 800138c:	24000420 	.word	0x24000420
 8001390:	240003f8 	.word	0x240003f8
 8001394:	2400048c 	.word	0x2400048c

08001398 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b09c      	sub	sp, #112	@ 0x70
 800139c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a2:	224c      	movs	r2, #76	@ 0x4c
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f00a fde2 	bl	800bf70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2220      	movs	r2, #32
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00a fddc 	bl	800bf70 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013b8:	2002      	movs	r0, #2
 80013ba:	f005 f891 	bl	80064e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013be:	2300      	movs	r3, #0
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	4b32      	ldr	r3, [pc, #200]	@ (800148c <_Z18SystemClock_Configv+0xf4>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	4a31      	ldr	r2, [pc, #196]	@ (800148c <_Z18SystemClock_Configv+0xf4>)
 80013c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013cc:	6193      	str	r3, [r2, #24]
 80013ce:	4b2f      	ldr	r3, [pc, #188]	@ (800148c <_Z18SystemClock_Configv+0xf4>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013da:	bf00      	nop
 80013dc:	4b2b      	ldr	r3, [pc, #172]	@ (800148c <_Z18SystemClock_Configv+0xf4>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013e8:	bf14      	ite	ne
 80013ea:	2301      	movne	r3, #1
 80013ec:	2300      	moveq	r3, #0
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f3      	bne.n	80013dc <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013f4:	2301      	movs	r3, #1
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fe:	2302      	movs	r3, #2
 8001400:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001402:	2302      	movs	r3, #2
 8001404:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001406:	2302      	movs	r3, #2
 8001408:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800140a:	232c      	movs	r3, #44	@ 0x2c
 800140c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800140e:	2301      	movs	r3, #1
 8001410:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001412:	2304      	movs	r3, #4
 8001414:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001416:	2302      	movs	r3, #2
 8001418:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800141a:	230c      	movs	r3, #12
 800141c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800141e:	2300      	movs	r3, #0
 8001420:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800142a:	4618      	mov	r0, r3
 800142c:	f005 f892 	bl	8006554 <HAL_RCC_OscConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	bf14      	ite	ne
 8001436:	2301      	movne	r3, #1
 8001438:	2300      	moveq	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8001440:	f000 fd2c 	bl	8001e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001444:	233f      	movs	r3, #63	@ 0x3f
 8001446:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001448:	2303      	movs	r3, #3
 800144a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001450:	2308      	movs	r3, #8
 8001452:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001454:	2340      	movs	r3, #64	@ 0x40
 8001456:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001458:	2340      	movs	r3, #64	@ 0x40
 800145a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800145c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001460:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001462:	2340      	movs	r3, #64	@ 0x40
 8001464:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2103      	movs	r1, #3
 800146a:	4618      	mov	r0, r3
 800146c:	f005 fc4c 	bl	8006d08 <HAL_RCC_ClockConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	bf14      	ite	ne
 8001476:	2301      	movne	r3, #1
 8001478:	2300      	moveq	r3, #0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 8001480:	f000 fd0c 	bl	8001e9c <Error_Handler>
  }
}
 8001484:	bf00      	nop
 8001486:	3770      	adds	r7, #112	@ 0x70
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	58024800 	.word	0x58024800

08001490 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b0ae      	sub	sp, #184	@ 0xb8
 8001494:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001496:	463b      	mov	r3, r7
 8001498:	22b8      	movs	r2, #184	@ 0xb8
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f00a fd67 	bl	800bf70 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014a2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014a6:	f04f 0300 	mov.w	r3, #0
 80014aa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80014ae:	2302      	movs	r3, #2
 80014b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80014b2:	2310      	movs	r3, #16
 80014b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014b6:	2302      	movs	r3, #2
 80014b8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014ba:	2302      	movs	r3, #2
 80014bc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80014c2:	23c0      	movs	r3, #192	@ 0xc0
 80014c4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d4:	463b      	mov	r3, r7
 80014d6:	4618      	mov	r0, r3
 80014d8:	f005 ffa2 	bl	8007420 <HAL_RCCEx_PeriphCLKConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bf14      	ite	ne
 80014e2:	2301      	movne	r3, #1
 80014e4:	2300      	moveq	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 80014ec:	f000 fcd6 	bl	8001e9c <Error_Handler>
  }
}
 80014f0:	bf00      	nop
 80014f2:	37b8      	adds	r7, #184	@ 0xb8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	@ 0x30
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800150a:	463b      	mov	r3, r7
 800150c:	2224      	movs	r2, #36	@ 0x24
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f00a fd2d 	bl	800bf70 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001516:	4b3a      	ldr	r3, [pc, #232]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 8001518:	4a3a      	ldr	r2, [pc, #232]	@ (8001604 <_ZL12MX_ADC1_Initv+0x10c>)
 800151a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800151c:	4b38      	ldr	r3, [pc, #224]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001522:	4b37      	ldr	r3, [pc, #220]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 8001524:	2208      	movs	r2, #8
 8001526:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001528:	4b35      	ldr	r3, [pc, #212]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800152e:	4b34      	ldr	r3, [pc, #208]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 8001530:	2204      	movs	r2, #4
 8001532:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001534:	4b32      	ldr	r3, [pc, #200]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 8001536:	2200      	movs	r2, #0
 8001538:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800153a:	4b31      	ldr	r3, [pc, #196]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 800153c:	2200      	movs	r2, #0
 800153e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001540:	4b2f      	ldr	r3, [pc, #188]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 8001542:	2201      	movs	r2, #1
 8001544:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001546:	4b2e      	ldr	r3, [pc, #184]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800154e:	4b2c      	ldr	r3, [pc, #176]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 8001550:	2200      	movs	r2, #0
 8001552:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001554:	4b2a      	ldr	r3, [pc, #168]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 8001556:	2200      	movs	r2, #0
 8001558:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800155a:	4b29      	ldr	r3, [pc, #164]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 800155c:	2200      	movs	r2, #0
 800155e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001560:	4b27      	ldr	r3, [pc, #156]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 8001562:	2200      	movs	r2, #0
 8001564:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001566:	4b26      	ldr	r3, [pc, #152]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 8001568:	2200      	movs	r2, #0
 800156a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800156c:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001574:	4b22      	ldr	r3, [pc, #136]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 8001576:	2201      	movs	r2, #1
 8001578:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800157a:	4821      	ldr	r0, [pc, #132]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 800157c:	f001 fe80 	bl	8003280 <HAL_ADC_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	bf14      	ite	ne
 8001586:	2301      	movne	r3, #1
 8001588:	2300      	moveq	r3, #0
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8001590:	f000 fc84 	bl	8001e9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001598:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159c:	4619      	mov	r1, r3
 800159e:	4818      	ldr	r0, [pc, #96]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 80015a0:	f003 fa04 	bl	80049ac <HAL_ADCEx_MultiModeConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	bf14      	ite	ne
 80015aa:	2301      	movne	r3, #1
 80015ac:	2300      	moveq	r3, #0
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 80015b4:	f000 fc72 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015b8:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <_ZL12MX_ADC1_Initv+0x110>)
 80015ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015bc:	2306      	movs	r3, #6
 80015be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015c4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80015c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015ca:	2304      	movs	r3, #4
 80015cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d8:	463b      	mov	r3, r7
 80015da:	4619      	mov	r1, r3
 80015dc:	4808      	ldr	r0, [pc, #32]	@ (8001600 <_ZL12MX_ADC1_Initv+0x108>)
 80015de:	f002 fa57 	bl	8003a90 <HAL_ADC_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf14      	ite	ne
 80015e8:	2301      	movne	r3, #1
 80015ea:	2300      	moveq	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <_ZL12MX_ADC1_Initv+0xfe>
  {
    Error_Handler();
 80015f2:	f000 fc53 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	3730      	adds	r7, #48	@ 0x30
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	24000088 	.word	0x24000088
 8001604:	40022000 	.word	0x40022000
 8001608:	08600004 	.word	0x08600004

0800160c <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	@ 0x28
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2224      	movs	r2, #36	@ 0x24
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f00a fca9 	bl	800bf70 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800161e:	4b35      	ldr	r3, [pc, #212]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001620:	4a35      	ldr	r2, [pc, #212]	@ (80016f8 <_ZL12MX_ADC3_Initv+0xec>)
 8001622:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001624:	4b33      	ldr	r3, [pc, #204]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 800162a:	4b32      	ldr	r3, [pc, #200]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 800162c:	220c      	movs	r2, #12
 800162e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001630:	4b30      	ldr	r3, [pc, #192]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001636:	4b2f      	ldr	r3, [pc, #188]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800163c:	4b2d      	ldr	r3, [pc, #180]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 800163e:	2204      	movs	r2, #4
 8001640:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001642:	4b2c      	ldr	r3, [pc, #176]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001644:	2200      	movs	r2, #0
 8001646:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001648:	4b2a      	ldr	r3, [pc, #168]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 800164a:	2200      	movs	r2, #0
 800164c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800164e:	4b29      	ldr	r3, [pc, #164]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001650:	2201      	movs	r2, #1
 8001652:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001654:	4b27      	ldr	r3, [pc, #156]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800165c:	4b25      	ldr	r3, [pc, #148]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 800165e:	2200      	movs	r2, #0
 8001660:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001662:	4b24      	ldr	r3, [pc, #144]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001664:	2200      	movs	r2, #0
 8001666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001668:	4b22      	ldr	r3, [pc, #136]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001670:	4b20      	ldr	r3, [pc, #128]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001672:	2200      	movs	r2, #0
 8001674:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001676:	4b1f      	ldr	r3, [pc, #124]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001678:	2200      	movs	r2, #0
 800167a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800167c:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 800167e:	2200      	movs	r2, #0
 8001680:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001682:	4b1c      	ldr	r3, [pc, #112]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001684:	2200      	movs	r2, #0
 8001686:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001688:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8001690:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001692:	2200      	movs	r2, #0
 8001694:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001696:	4817      	ldr	r0, [pc, #92]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001698:	f001 fdf2 	bl	8003280 <HAL_ADC_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	bf14      	ite	ne
 80016a2:	2301      	movne	r3, #1
 80016a4:	2300      	moveq	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 80016ac:	f000 fbf6 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016b0:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <_ZL12MX_ADC3_Initv+0xf0>)
 80016b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016b4:	2306      	movs	r3, #6
 80016b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016bc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80016c0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016c2:	2304      	movs	r3, #4
 80016c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4808      	ldr	r0, [pc, #32]	@ (80016f4 <_ZL12MX_ADC3_Initv+0xe8>)
 80016d4:	f002 f9dc 	bl	8003a90 <HAL_ADC_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	bf14      	ite	ne
 80016de:	2301      	movne	r3, #1
 80016e0:	2300      	moveq	r3, #0
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 80016e8:	f000 fbd8 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	@ 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	240000f8 	.word	0x240000f8
 80016f8:	58026000 	.word	0x58026000
 80016fc:	1d500080 	.word	0x1d500080

08001700 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001706:	4b41      	ldr	r3, [pc, #260]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001708:	4a41      	ldr	r2, [pc, #260]	@ (8001810 <_ZL14MX_FDCAN1_Initv+0x110>)
 800170a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800170c:	4b3f      	ldr	r3, [pc, #252]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800170e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001712:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001714:	4b3d      	ldr	r3, [pc, #244]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800171a:	4b3c      	ldr	r3, [pc, #240]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800171c:	2200      	movs	r2, #0
 800171e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001720:	4b3a      	ldr	r3, [pc, #232]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001722:	2200      	movs	r2, #0
 8001724:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001726:	4b39      	ldr	r3, [pc, #228]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001728:	2200      	movs	r2, #0
 800172a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 800172c:	4b37      	ldr	r3, [pc, #220]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800172e:	2203      	movs	r2, #3
 8001730:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001732:	4b36      	ldr	r3, [pc, #216]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001734:	2201      	movs	r2, #1
 8001736:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 8001738:	4b34      	ldr	r3, [pc, #208]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800173a:	220a      	movs	r2, #10
 800173c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 800173e:	4b33      	ldr	r3, [pc, #204]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001740:	2205      	movs	r2, #5
 8001742:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001744:	4b31      	ldr	r3, [pc, #196]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001746:	2201      	movs	r2, #1
 8001748:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800174a:	4b30      	ldr	r3, [pc, #192]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800174c:	2201      	movs	r2, #1
 800174e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001750:	4b2e      	ldr	r3, [pc, #184]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001752:	2201      	movs	r2, #1
 8001754:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001756:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001758:	2201      	movs	r2, #1
 800175a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800175c:	4b2b      	ldr	r3, [pc, #172]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800175e:	2200      	movs	r2, #0
 8001760:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001762:	4b2a      	ldr	r3, [pc, #168]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001764:	2200      	movs	r2, #0
 8001766:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 8001768:	4b28      	ldr	r3, [pc, #160]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800176a:	2205      	movs	r2, #5
 800176c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 800176e:	4b27      	ldr	r3, [pc, #156]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001770:	2220      	movs	r2, #32
 8001772:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001774:	4b25      	ldr	r3, [pc, #148]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001776:	2204      	movs	r2, #4
 8001778:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 800177a:	4b24      	ldr	r3, [pc, #144]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800177c:	2220      	movs	r2, #32
 800177e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001780:	4b22      	ldr	r3, [pc, #136]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001782:	2204      	movs	r2, #4
 8001784:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8001786:	4b21      	ldr	r3, [pc, #132]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001788:	2201      	movs	r2, #1
 800178a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800178c:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800178e:	2204      	movs	r2, #4
 8001790:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 8001792:	4b1e      	ldr	r3, [pc, #120]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001794:	2201      	movs	r2, #1
 8001796:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 8001798:	4b1c      	ldr	r3, [pc, #112]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800179a:	2220      	movs	r2, #32
 800179c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 800179e:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017a0:	2220      	movs	r2, #32
 80017a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80017a4:	4b19      	ldr	r3, [pc, #100]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80017aa:	4b18      	ldr	r3, [pc, #96]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017ac:	2204      	movs	r2, #4
 80017ae:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80017b0:	4816      	ldr	r0, [pc, #88]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017b2:	f003 faed 	bl	8004d90 <HAL_FDCAN_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf14      	ite	ne
 80017bc:	2301      	movne	r3, #1
 80017be:	2300      	moveq	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 80017c6:	f000 fb69 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80017ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017ce:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80017d4:	2302      	movs	r3, #2
 80017d6:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80017d8:	2301      	movs	r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80017e4:	463b      	mov	r3, r7
 80017e6:	4619      	mov	r1, r3
 80017e8:	4808      	ldr	r0, [pc, #32]	@ (800180c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017ea:	f003 fcaf 	bl	800514c <HAL_FDCAN_ConfigFilter>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf14      	ite	ne
 80017f4:	2301      	movne	r3, #1
 80017f6:	2300      	moveq	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 80017fe:	f000 fb4d 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	3720      	adds	r7, #32
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	24000168 	.word	0x24000168
 8001810:	4000a000 	.word	0x4000a000

08001814 <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800181a:	4b41      	ldr	r3, [pc, #260]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800181c:	4a41      	ldr	r2, [pc, #260]	@ (8001924 <_ZL14MX_FDCAN2_Initv+0x110>)
 800181e:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001820:	4b3f      	ldr	r3, [pc, #252]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001822:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001826:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001828:	4b3d      	ldr	r3, [pc, #244]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800182e:	4b3c      	ldr	r3, [pc, #240]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001830:	2200      	movs	r2, #0
 8001832:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001834:	4b3a      	ldr	r3, [pc, #232]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001836:	2200      	movs	r2, #0
 8001838:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800183a:	4b39      	ldr	r3, [pc, #228]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800183c:	2200      	movs	r2, #0
 800183e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 3;
 8001840:	4b37      	ldr	r3, [pc, #220]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001842:	2203      	movs	r2, #3
 8001844:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001846:	4b36      	ldr	r3, [pc, #216]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001848:	2201      	movs	r2, #1
 800184a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 800184c:	4b34      	ldr	r3, [pc, #208]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800184e:	220a      	movs	r2, #10
 8001850:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8001852:	4b33      	ldr	r3, [pc, #204]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001854:	2205      	movs	r2, #5
 8001856:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001858:	4b31      	ldr	r3, [pc, #196]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800185a:	2201      	movs	r2, #1
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800185e:	4b30      	ldr	r3, [pc, #192]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001860:	2201      	movs	r2, #1
 8001862:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001864:	4b2e      	ldr	r3, [pc, #184]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001866:	2201      	movs	r2, #1
 8001868:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800186a:	4b2d      	ldr	r3, [pc, #180]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800186c:	2201      	movs	r2, #1
 800186e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001870:	4b2b      	ldr	r3, [pc, #172]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001872:	2200      	movs	r2, #0
 8001874:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001876:	4b2a      	ldr	r3, [pc, #168]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001878:	2200      	movs	r2, #0
 800187a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 800187c:	4b28      	ldr	r3, [pc, #160]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800187e:	2205      	movs	r2, #5
 8001880:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 8001882:	4b27      	ldr	r3, [pc, #156]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001884:	2220      	movs	r2, #32
 8001886:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001888:	4b25      	ldr	r3, [pc, #148]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800188a:	2204      	movs	r2, #4
 800188c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 800188e:	4b24      	ldr	r3, [pc, #144]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001890:	2220      	movs	r2, #32
 8001892:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001894:	4b22      	ldr	r3, [pc, #136]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001896:	2204      	movs	r2, #4
 8001898:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 800189a:	4b21      	ldr	r3, [pc, #132]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800189c:	2201      	movs	r2, #1
 800189e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80018a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018a2:	2204      	movs	r2, #4
 80018a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 80018a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 80018ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018ae:	2220      	movs	r2, #32
 80018b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 80018b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018b4:	2220      	movs	r2, #32
 80018b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80018b8:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80018be:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018c0:	2204      	movs	r2, #4
 80018c2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80018c4:	4816      	ldr	r0, [pc, #88]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018c6:	f003 fa63 	bl	8004d90 <HAL_FDCAN_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf14      	ite	ne
 80018d0:	2301      	movne	r3, #1
 80018d2:	2300      	moveq	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 80018da:	f000 fadf 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80018de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018e2:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80018e8:	2302      	movs	r3, #2
 80018ea:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80018ec:	2301      	movs	r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 80018f0:	2310      	movs	r3, #16
 80018f2:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 80018f4:	2310      	movs	r3, #16
 80018f6:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 80018f8:	463b      	mov	r3, r7
 80018fa:	4619      	mov	r1, r3
 80018fc:	4808      	ldr	r0, [pc, #32]	@ (8001920 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018fe:	f003 fc25 	bl	800514c <HAL_FDCAN_ConfigFilter>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	bf14      	ite	ne
 8001908:	2301      	movne	r3, #1
 800190a:	2300      	moveq	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 8001912:	f000 fac3 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	24000208 	.word	0x24000208
 8001924:	4000a400 	.word	0x4000a400

08001928 <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b094      	sub	sp, #80	@ 0x50
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800192e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]
 800193e:	615a      	str	r2, [r3, #20]
 8001940:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001942:	463b      	mov	r3, r7
 8001944:	2234      	movs	r2, #52	@ 0x34
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f00a fb11 	bl	800bf70 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800194e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a3c <_ZL13MX_TIM17_Initv+0x114>)
 8001950:	4a3b      	ldr	r2, [pc, #236]	@ (8001a40 <_ZL13MX_TIM17_Initv+0x118>)
 8001952:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001954:	4b39      	ldr	r3, [pc, #228]	@ (8001a3c <_ZL13MX_TIM17_Initv+0x114>)
 8001956:	2200      	movs	r2, #0
 8001958:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195a:	4b38      	ldr	r3, [pc, #224]	@ (8001a3c <_ZL13MX_TIM17_Initv+0x114>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10559;
 8001960:	4b36      	ldr	r3, [pc, #216]	@ (8001a3c <_ZL13MX_TIM17_Initv+0x114>)
 8001962:	f642 123f 	movw	r2, #10559	@ 0x293f
 8001966:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001968:	4b34      	ldr	r3, [pc, #208]	@ (8001a3c <_ZL13MX_TIM17_Initv+0x114>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800196e:	4b33      	ldr	r3, [pc, #204]	@ (8001a3c <_ZL13MX_TIM17_Initv+0x114>)
 8001970:	2200      	movs	r2, #0
 8001972:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001974:	4b31      	ldr	r3, [pc, #196]	@ (8001a3c <_ZL13MX_TIM17_Initv+0x114>)
 8001976:	2200      	movs	r2, #0
 8001978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800197a:	4830      	ldr	r0, [pc, #192]	@ (8001a3c <_ZL13MX_TIM17_Initv+0x114>)
 800197c:	f008 f936 	bl	8009bec <HAL_TIM_Base_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	bf14      	ite	ne
 8001986:	2301      	movne	r3, #1
 8001988:	2300      	moveq	r3, #0
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <_ZL13MX_TIM17_Initv+0x6c>
  {
    Error_Handler();
 8001990:	f000 fa84 	bl	8001e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001994:	4829      	ldr	r0, [pc, #164]	@ (8001a3c <_ZL13MX_TIM17_Initv+0x114>)
 8001996:	f008 f980 	bl	8009c9a <HAL_TIM_PWM_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf14      	ite	ne
 80019a0:	2301      	movne	r3, #1
 80019a2:	2300      	moveq	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <_ZL13MX_TIM17_Initv+0x86>
  {
    Error_Handler();
 80019aa:	f000 fa77 	bl	8001e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ae:	2360      	movs	r3, #96	@ 0x60
 80019b0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b6:	2300      	movs	r3, #0
 80019b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ba:	2300      	movs	r3, #0
 80019bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80019ce:	2200      	movs	r2, #0
 80019d0:	4619      	mov	r1, r3
 80019d2:	481a      	ldr	r0, [pc, #104]	@ (8001a3c <_ZL13MX_TIM17_Initv+0x114>)
 80019d4:	f008 fade 	bl	8009f94 <HAL_TIM_PWM_ConfigChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	bf14      	ite	ne
 80019de:	2301      	movne	r3, #1
 80019e0:	2300      	moveq	r3, #0
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <_ZL13MX_TIM17_Initv+0xc4>
  {
    Error_Handler();
 80019e8:	f000 fa58 	bl	8001e9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a04:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001a0e:	463b      	mov	r3, r7
 8001a10:	4619      	mov	r1, r3
 8001a12:	480a      	ldr	r0, [pc, #40]	@ (8001a3c <_ZL13MX_TIM17_Initv+0x114>)
 8001a14:	f008 ff7a 	bl	800a90c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bf14      	ite	ne
 8001a1e:	2301      	movne	r3, #1
 8001a20:	2300      	moveq	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <_ZL13MX_TIM17_Initv+0x104>
  {
    Error_Handler();
 8001a28:	f000 fa38 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001a2c:	4803      	ldr	r0, [pc, #12]	@ (8001a3c <_ZL13MX_TIM17_Initv+0x114>)
 8001a2e:	f000 febb 	bl	80027a8 <HAL_TIM_MspPostInit>

}
 8001a32:	bf00      	nop
 8001a34:	3750      	adds	r7, #80	@ 0x50
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	240002a8 	.word	0x240002a8
 8001a40:	40014800 	.word	0x40014800

08001a44 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a48:	4b2c      	ldr	r3, [pc, #176]	@ (8001afc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a4a:	4a2d      	ldr	r2, [pc, #180]	@ (8001b00 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001afc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a56:	4b29      	ldr	r3, [pc, #164]	@ (8001afc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a5c:	4b27      	ldr	r3, [pc, #156]	@ (8001afc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a62:	4b26      	ldr	r3, [pc, #152]	@ (8001afc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a68:	4b24      	ldr	r3, [pc, #144]	@ (8001afc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6e:	4b23      	ldr	r3, [pc, #140]	@ (8001afc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a74:	4b21      	ldr	r3, [pc, #132]	@ (8001afc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a7a:	4b20      	ldr	r3, [pc, #128]	@ (8001afc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a80:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a86:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a8c:	481b      	ldr	r0, [pc, #108]	@ (8001afc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a8e:	f008 ffc9 	bl	800aa24 <HAL_UART_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001aa2:	f000 f9fb 	bl	8001e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4814      	ldr	r0, [pc, #80]	@ (8001afc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001aaa:	f00a f974 	bl	800bd96 <HAL_UARTEx_SetTxFifoThreshold>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bf14      	ite	ne
 8001ab4:	2301      	movne	r3, #1
 8001ab6:	2300      	moveq	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8001abe:	f000 f9ed 	bl	8001e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	480d      	ldr	r0, [pc, #52]	@ (8001afc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001ac6:	f00a f9a4 	bl	800be12 <HAL_UARTEx_SetRxFifoThreshold>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bf14      	ite	ne
 8001ad0:	2301      	movne	r3, #1
 8001ad2:	2300      	moveq	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001ada:	f000 f9df 	bl	8001e9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ade:	4807      	ldr	r0, [pc, #28]	@ (8001afc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001ae0:	f00a f920 	bl	800bd24 <HAL_UARTEx_DisableFifoMode>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	bf14      	ite	ne
 8001aea:	2301      	movne	r3, #1
 8001aec:	2300      	moveq	r3, #0
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001af4:	f000 f9d2 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	240002f4 	.word	0x240002f4
 8001b00:	40004400 	.word	0x40004400

08001b04 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	@ 0x30
 8001b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b1a:	4b57      	ldr	r3, [pc, #348]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b20:	4a55      	ldr	r2, [pc, #340]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001b22:	f043 0320 	orr.w	r3, r3, #32
 8001b26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b2a:	4b53      	ldr	r3, [pc, #332]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b30:	f003 0320 	and.w	r3, r3, #32
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b38:	4b4f      	ldr	r3, [pc, #316]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b3e:	4a4e      	ldr	r2, [pc, #312]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b48:	4b4b      	ldr	r3, [pc, #300]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	4b48      	ldr	r3, [pc, #288]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b5c:	4a46      	ldr	r2, [pc, #280]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b66:	4b44      	ldr	r3, [pc, #272]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b74:	4b40      	ldr	r3, [pc, #256]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b7a:	4a3f      	ldr	r2, [pc, #252]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001b7c:	f043 0310 	orr.w	r3, r3, #16
 8001b80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b84:	4b3c      	ldr	r3, [pc, #240]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	4b39      	ldr	r3, [pc, #228]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b98:	4a37      	ldr	r2, [pc, #220]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001b9a:	f043 0302 	orr.w	r3, r3, #2
 8001b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ba2:	4b35      	ldr	r3, [pc, #212]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bb0:	4b31      	ldr	r3, [pc, #196]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb6:	4a30      	ldr	r2, [pc, #192]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001bb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bce:	4b2a      	ldr	r3, [pc, #168]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bd4:	4a28      	ldr	r2, [pc, #160]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001bd6:	f043 0308 	orr.w	r3, r3, #8
 8001bda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bde:	4b26      	ldr	r3, [pc, #152]	@ (8001c78 <_ZL12MX_GPIO_Initv+0x174>)
 8001be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bf2:	4822      	ldr	r0, [pc, #136]	@ (8001c7c <_ZL12MX_GPIO_Initv+0x178>)
 8001bf4:	f004 fc5a 	bl	80064ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2138      	movs	r1, #56	@ 0x38
 8001bfc:	4820      	ldr	r0, [pc, #128]	@ (8001c80 <_ZL12MX_GPIO_Initv+0x17c>)
 8001bfe:	f004 fc55 	bl	80064ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 8001c02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4818      	ldr	r0, [pc, #96]	@ (8001c7c <_ZL12MX_GPIO_Initv+0x178>)
 8001c1c:	f004 fa86 	bl	800612c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 8001c20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	4619      	mov	r1, r3
 8001c34:	4813      	ldr	r0, [pc, #76]	@ (8001c84 <_ZL12MX_GPIO_Initv+0x180>)
 8001c36:	f004 fa79 	bl	800612c <HAL_GPIO_Init>

  /*Configure GPIO pin : Charge_Button_Pin */
  GPIO_InitStruct.Pin = Charge_Button_Pin;
 8001c3a:	2380      	movs	r3, #128	@ 0x80
 8001c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Charge_Button_GPIO_Port, &GPIO_InitStruct);
 8001c46:	f107 031c 	add.w	r3, r7, #28
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	480e      	ldr	r0, [pc, #56]	@ (8001c88 <_ZL12MX_GPIO_Initv+0x184>)
 8001c4e:	f004 fa6d 	bl	800612c <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 8001c52:	2338      	movs	r3, #56	@ 0x38
 8001c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c56:	2301      	movs	r3, #1
 8001c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c62:	f107 031c 	add.w	r3, r7, #28
 8001c66:	4619      	mov	r1, r3
 8001c68:	4805      	ldr	r0, [pc, #20]	@ (8001c80 <_ZL12MX_GPIO_Initv+0x17c>)
 8001c6a:	f004 fa5f 	bl	800612c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c6e:	bf00      	nop
 8001c70:	3730      	adds	r7, #48	@ 0x30
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	58024400 	.word	0x58024400
 8001c7c:	58021400 	.word	0x58021400
 8001c80:	58020c00 	.word	0x58020c00
 8001c84:	58021000 	.word	0x58021000
 8001c88:	58021800 	.word	0x58021800

08001c8c <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d04b      	beq.n	8001d38 <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 8001ca0:	4b27      	ldr	r3, [pc, #156]	@ (8001d40 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001ca2:	4a28      	ldr	r2, [pc, #160]	@ (8001d44 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001ca4:	2140      	movs	r1, #64	@ 0x40
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f003 fb4c 	bl	8005344 <HAL_FDCAN_GetRxMessage>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	bf0c      	ite	eq
 8001cb2:	2301      	moveq	r3, #1
 8001cb4:	2300      	movne	r3, #0
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d02e      	beq.n	8001d1a <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 8001cbc:	4b21      	ldr	r3, [pc, #132]	@ (8001d44 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a21      	ldr	r2, [pc, #132]	@ (8001d48 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001cc2:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d44 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001ccc:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	e00c      	b.n	8001cee <HAL_FDCAN_RxFifo0Callback+0x62>
 8001cd4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d40 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4413      	add	r3, r2
 8001cda:	7819      	ldrb	r1, [r3, #0]
 8001cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8001d48 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3305      	adds	r3, #5
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3301      	adds	r3, #1
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b07      	cmp	r3, #7
 8001cf2:	ddef      	ble.n	8001cd4 <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001cf4:	4b14      	ldr	r3, [pc, #80]	@ (8001d48 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 8001cfa:	f000 ff8f 	bl	8002c1c <HAL_GetTick>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4a11      	ldr	r2, [pc, #68]	@ (8001d48 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001d02:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 8001d04:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001d06:	466c      	mov	r4, sp
 8001d08:	f103 0210 	add.w	r2, r3, #16
 8001d0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d10:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d16:	f000 fabf 	bl	8002298 <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f003 fc7c 	bl	800561c <HAL_FDCAN_ActivateNotification>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	bf14      	ite	ne
 8001d2a:	2301      	movne	r3, #1
 8001d2c:	2300      	moveq	r3, #0
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 8001d34:	f000 f8b2 	bl	8001e9c <Error_Handler>
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd90      	pop	{r4, r7, pc}
 8001d40:	24000420 	.word	0x24000420
 8001d44:	240003d0 	.word	0x240003d0
 8001d48:	240004a4 	.word	0x240004a4

08001d4c <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	4613      	mov	r3, r2
 8001d58:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d88 <module_send_message_CAN1+0x3c>)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 8001d60:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <module_send_message_CAN1+0x3c>)
 8001d62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d66:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	4a07      	ldr	r2, [pc, #28]	@ (8001d88 <module_send_message_CAN1+0x3c>)
 8001d6c:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	4905      	ldr	r1, [pc, #20]	@ (8001d88 <module_send_message_CAN1+0x3c>)
 8001d72:	4806      	ldr	r0, [pc, #24]	@ (8001d8c <module_send_message_CAN1+0x40>)
 8001d74:	f003 fa8b 	bl	800528e <HAL_FDCAN_AddMessageToTxFifoQ>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	75fb      	strb	r3, [r7, #23]

	return status;
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	24000388 	.word	0x24000388
 8001d8c:	24000168 	.word	0x24000168

08001d90 <module_send_message_NoExtId_CAN1>:

//NO extended ID
HAL_StatusTypeDef module_send_message_NoExtId_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <module_send_message_NoExtId_CAN1+0x38>)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_STANDARD_ID;
 8001da4:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <module_send_message_NoExtId_CAN1+0x38>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	4a06      	ldr	r2, [pc, #24]	@ (8001dc8 <module_send_message_NoExtId_CAN1+0x38>)
 8001dae:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	4905      	ldr	r1, [pc, #20]	@ (8001dc8 <module_send_message_NoExtId_CAN1+0x38>)
 8001db4:	4805      	ldr	r0, [pc, #20]	@ (8001dcc <module_send_message_NoExtId_CAN1+0x3c>)
 8001db6:	f003 fa6a 	bl	800528e <HAL_FDCAN_AddMessageToTxFifoQ>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	75fb      	strb	r3, [r7, #23]

	return status;
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	24000388 	.word	0x24000388
 8001dcc:	24000168 	.word	0x24000168

08001dd0 <module_send_message_CAN2>:

HAL_StatusTypeDef module_send_message_CAN2(uint32_t id, uint8_t* data, uint8_t length) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	71fb      	strb	r3, [r7, #7]
	TxHeader_bms.Identifier = id;
 8001dde:	4a0a      	ldr	r2, [pc, #40]	@ (8001e08 <module_send_message_CAN2+0x38>)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6013      	str	r3, [r2, #0]
	TxHeader_bms.IdType = FDCAN_STANDARD_ID;
 8001de4:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <module_send_message_CAN2+0x38>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	605a      	str	r2, [r3, #4]
	TxHeader_bms.DataLength = length;
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	4a06      	ldr	r2, [pc, #24]	@ (8001e08 <module_send_message_CAN2+0x38>)
 8001dee:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	4905      	ldr	r1, [pc, #20]	@ (8001e08 <module_send_message_CAN2+0x38>)
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <module_send_message_CAN2+0x3c>)
 8001df6:	f003 fa4a 	bl	800528e <HAL_FDCAN_AddMessageToTxFifoQ>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	75fb      	strb	r3, [r7, #23]

	return status;
 8001dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	240003ac 	.word	0x240003ac
 8001e0c:	24000208 	.word	0x24000208

08001e10 <print>:

void print(char uart_buffer[]){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4909      	ldr	r1, [pc, #36]	@ (8001e40 <print+0x30>)
 8001e1c:	4809      	ldr	r0, [pc, #36]	@ (8001e44 <print+0x34>)
 8001e1e:	f00a f885 	bl	800bf2c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001e22:	4808      	ldr	r0, [pc, #32]	@ (8001e44 <print+0x34>)
 8001e24:	f7fe fa74 	bl	8000310 <strlen>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e30:	4904      	ldr	r1, [pc, #16]	@ (8001e44 <print+0x34>)
 8001e32:	4805      	ldr	r0, [pc, #20]	@ (8001e48 <print+0x38>)
 8001e34:	f008 fe46 	bl	800aac4 <HAL_UART_Transmit>
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	0800cb5c 	.word	0x0800cb5c
 8001e44:	24000428 	.word	0x24000428
 8001e48:	240002f4 	.word	0x240002f4

08001e4c <printnl>:

void printnl(char uart_buffer[]){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s", uart_buffer);
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	4909      	ldr	r1, [pc, #36]	@ (8001e7c <printnl+0x30>)
 8001e58:	4809      	ldr	r0, [pc, #36]	@ (8001e80 <printnl+0x34>)
 8001e5a:	f00a f867 	bl	800bf2c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001e5e:	4808      	ldr	r0, [pc, #32]	@ (8001e80 <printnl+0x34>)
 8001e60:	f7fe fa56 	bl	8000310 <strlen>
 8001e64:	4603      	mov	r3, r0
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6c:	4904      	ldr	r1, [pc, #16]	@ (8001e80 <printnl+0x34>)
 8001e6e:	4805      	ldr	r0, [pc, #20]	@ (8001e84 <printnl+0x38>)
 8001e70:	f008 fe28 	bl	800aac4 <HAL_UART_Transmit>
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	0800cb64 	.word	0x0800cb64
 8001e80:	24000428 	.word	0x24000428
 8001e84:	240002f4 	.word	0x240002f4

08001e88 <getUARTState>:
void printValue(int value){
	sprintf(uart_msg, "%hu \n\r", value);
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
}

HAL_UART_StateTypeDef getUARTState(){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&huart2);
 8001e8c:	4802      	ldr	r0, [pc, #8]	@ (8001e98 <getUARTState+0x10>)
 8001e8e:	f008 fea7 	bl	800abe0 <HAL_UART_GetState>
 8001e92:	4603      	mov	r3, r0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	240002f4 	.word	0x240002f4

08001e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
}
 8001ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <Error_Handler+0x8>

08001ea8 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08c      	sub	sp, #48	@ 0x30
 8001eac:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
	int state_precharge = 0; // 0 means open, 1 closed
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	61bb      	str	r3, [r7, #24]
	int flag_current = Current_ERROR_Comunication;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	617b      	str	r3, [r7, #20]

	int gpio_charge = HAL_GPIO_ReadPin(Charge_Button_GPIO_Port,
 8001ec2:	2180      	movs	r1, #128	@ 0x80
 8001ec4:	48a6      	ldr	r0, [pc, #664]	@ (8002160 <_Z12select_statev+0x2b8>)
 8001ec6:	f004 fad9 	bl	800647c <HAL_GPIO_ReadPin>
 8001eca:	4603      	mov	r3, r0
			Charge_Button_Pin); // pull-up: 1 = charge started
 8001ecc:	613b      	str	r3, [r7, #16]
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 8001ece:	f000 fea5 	bl	8002c1c <HAL_GetTick>
 8001ed2:	60f8      	str	r0, [r7, #12]
	int time_s = HAL_GetTick();
 8001ed4:	f000 fea2 	bl	8002c1c <HAL_GetTick>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	60bb      	str	r3, [r7, #8]

	CPU.voltage_acum = 0; // For precharge
 8001edc:	4ba1      	ldr	r3, [pc, #644]	@ (8002164 <_Z12select_statev+0x2bc>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	62da      	str	r2, [r3, #44]	@ 0x2c

	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 8001ee2:	4ba1      	ldr	r3, [pc, #644]	@ (8002168 <_Z12select_statev+0x2c0>)
 8001ee4:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001ee8:	601a      	str	r2, [r3, #0]
	MAX_T = 0;
 8001eea:	4ba0      	ldr	r3, [pc, #640]	@ (800216c <_Z12select_statev+0x2c4>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ef4:	e06f      	b.n	8001fd6 <_Z12select_statev+0x12e>
		BMS[i].voltage_acum = 0; // For precharge
 8001ef6:	4a9e      	ldr	r2, [pc, #632]	@ (8002170 <_Z12select_statev+0x2c8>)
 8001ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001efa:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001efe:	fb01 f303 	mul.w	r3, r1, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	338c      	adds	r3, #140	@ 0x8c
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]

		if (BMS[i].query_voltage(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
 8001f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f0c:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001f10:	fb02 f303 	mul.w	r3, r2, r3
 8001f14:	4a96      	ldr	r2, [pc, #600]	@ (8002170 <_Z12select_statev+0x2c8>)
 8001f16:	4413      	add	r3, r2
 8001f18:	4a96      	ldr	r2, [pc, #600]	@ (8002174 <_Z12select_statev+0x2cc>)
 8001f1a:	68f9      	ldr	r1, [r7, #12]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fed5 	bl	8000ccc <_ZN7BMS_MOD13query_voltageEmPc>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf14      	ite	ne
 8001f28:	2301      	movne	r3, #1
 8001f2a:	2300      	moveq	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <_Z12select_statev+0x90>
		{
			//state = error;
			flag_ams_ok = 0;
 8001f32:	4b91      	ldr	r3, [pc, #580]	@ (8002178 <_Z12select_statev+0x2d0>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
		}

		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 8001f38:	4b8a      	ldr	r3, [pc, #552]	@ (8002164 <_Z12select_statev+0x2bc>)
 8001f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f3c:	498c      	ldr	r1, [pc, #560]	@ (8002170 <_Z12select_statev+0x2c8>)
 8001f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f40:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8001f44:	fb00 f303 	mul.w	r3, r0, r3
 8001f48:	440b      	add	r3, r1
 8001f4a:	338c      	adds	r3, #140	@ 0x8c
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	4a84      	ldr	r2, [pc, #528]	@ (8002164 <_Z12select_statev+0x2bc>)
 8001f52:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 8001f54:	4a86      	ldr	r2, [pc, #536]	@ (8002170 <_Z12select_statev+0x2c8>)
 8001f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f58:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001f5c:	fb01 f303 	mul.w	r3, r1, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	3390      	adds	r3, #144	@ 0x90
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4b80      	ldr	r3, [pc, #512]	@ (8002168 <_Z12select_statev+0x2c0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	da0a      	bge.n	8001f84 <_Z12select_statev+0xdc>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 8001f6e:	4a80      	ldr	r2, [pc, #512]	@ (8002170 <_Z12select_statev+0x2c8>)
 8001f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f72:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001f76:	fb01 f303 	mul.w	r3, r1, r3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3390      	adds	r3, #144	@ 0x90
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a79      	ldr	r2, [pc, #484]	@ (8002168 <_Z12select_statev+0x2c0>)
 8001f82:	6013      	str	r3, [r2, #0]

		if (BMS[i].query_temperature(time, buffer) != Temperatures_OK) {
 8001f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f86:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	4a78      	ldr	r2, [pc, #480]	@ (8002170 <_Z12select_statev+0x2c8>)
 8001f90:	4413      	add	r3, r2
 8001f92:	4a78      	ldr	r2, [pc, #480]	@ (8002174 <_Z12select_statev+0x2cc>)
 8001f94:	68f9      	ldr	r1, [r7, #12]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fefd 	bl	8000d96 <_ZN7BMS_MOD17query_temperatureEmPc>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
			//state = error;
		}

		if (BMS[i].MAX_T > MAX_T)
 8001fa0:	4a73      	ldr	r2, [pc, #460]	@ (8002170 <_Z12select_statev+0x2c8>)
 8001fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa4:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	33a0      	adds	r3, #160	@ 0xa0
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	4b6e      	ldr	r3, [pc, #440]	@ (800216c <_Z12select_statev+0x2c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	dd0a      	ble.n	8001fd0 <_Z12select_statev+0x128>
			MAX_T = BMS[i].MAX_T;
 8001fba:	4a6d      	ldr	r2, [pc, #436]	@ (8002170 <_Z12select_statev+0x2c8>)
 8001fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fbe:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	33a0      	adds	r3, #160	@ 0xa0
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a67      	ldr	r2, [pc, #412]	@ (800216c <_Z12select_statev+0x2c4>)
 8001fce:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fd6:	4b69      	ldr	r3, [pc, #420]	@ (800217c <_Z12select_statev+0x2d4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	db8a      	blt.n	8001ef6 <_Z12select_statev+0x4e>
	}

	if (time_s > time_sending_minV + 500) {
 8001fe0:	4b67      	ldr	r3, [pc, #412]	@ (8002180 <_Z12select_statev+0x2d8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	dd23      	ble.n	8002036 <_Z12select_statev+0x18e>
		message_MINV[1] = MIN_V & 0xFF;
 8001fee:	4b5e      	ldr	r3, [pc, #376]	@ (8002168 <_Z12select_statev+0x2c0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	4b63      	ldr	r3, [pc, #396]	@ (8002184 <_Z12select_statev+0x2dc>)
 8001ff6:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 8001ff8:	4b5b      	ldr	r3, [pc, #364]	@ (8002168 <_Z12select_statev+0x2c0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	121b      	asrs	r3, r3, #8
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	4b60      	ldr	r3, [pc, #384]	@ (8002184 <_Z12select_statev+0x2dc>)
 8002002:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 8002004:	4b5a      	ldr	r3, [pc, #360]	@ (8002170 <_Z12select_statev+0x2c8>)
 8002006:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800200a:	2b01      	cmp	r3, #1
 800200c:	d010      	beq.n	8002030 <_Z12select_statev+0x188>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 800200e:	2202      	movs	r2, #2
 8002010:	495c      	ldr	r1, [pc, #368]	@ (8002184 <_Z12select_statev+0x2dc>)
 8002012:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002016:	f7ff fe99 	bl	8001d4c <module_send_message_CAN1>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf14      	ite	ne
 8002020:	2301      	movne	r3, #1
 8002022:	2300      	moveq	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <_Z12select_statev+0x188>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 800202a:	4857      	ldr	r0, [pc, #348]	@ (8002188 <_Z12select_statev+0x2e0>)
 800202c:	f7ff fef0 	bl	8001e10 <print>
		}
		time_sending_minV = time_s;
 8002030:	4a53      	ldr	r2, [pc, #332]	@ (8002180 <_Z12select_statev+0x2d8>)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 8002036:	2300      	movs	r3, #0
 8002038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800203a:	e00d      	b.n	8002058 <_Z12select_statev+0x1b0>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 800203c:	4b4a      	ldr	r3, [pc, #296]	@ (8002168 <_Z12select_statev+0x2c0>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	494b      	ldr	r1, [pc, #300]	@ (8002170 <_Z12select_statev+0x2c8>)
 8002042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002044:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8002048:	fb00 f303 	mul.w	r3, r0, r3
 800204c:	440b      	add	r3, r1
 800204e:	3394      	adds	r3, #148	@ 0x94
 8002050:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8002052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002054:	3301      	adds	r3, #1
 8002056:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002058:	4b48      	ldr	r3, [pc, #288]	@ (800217c <_Z12select_statev+0x2d4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800205e:	429a      	cmp	r2, r3
 8002060:	dbec      	blt.n	800203c <_Z12select_statev+0x194>

	}

	flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
 8002062:	4a44      	ldr	r2, [pc, #272]	@ (8002174 <_Z12select_statev+0x2cc>)
 8002064:	68f9      	ldr	r1, [r7, #12]
 8002066:	483f      	ldr	r0, [pc, #252]	@ (8002164 <_Z12select_statev+0x2bc>)
 8002068:	f7fe ff70 	bl	8000f4c <_ZN7CPU_MOD5queryEmPc>
 800206c:	61b8      	str	r0, [r7, #24]
	//flag_cpu = CPU_OK;

	flag_current = current.query(time, buffer); //asking current how is it
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4a40      	ldr	r2, [pc, #256]	@ (8002174 <_Z12select_statev+0x2cc>)
 8002072:	4619      	mov	r1, r3
 8002074:	4845      	ldr	r0, [pc, #276]	@ (800218c <_Z12select_statev+0x2e4>)
 8002076:	f7ff f843 	bl	8001100 <_ZN11Current_MOD5queryEiPc>
 800207a:	6178      	str	r0, [r7, #20]

	switch (state) {
 800207c:	4b44      	ldr	r3, [pc, #272]	@ (8002190 <_Z12select_statev+0x2e8>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b05      	cmp	r3, #5
 8002082:	f200 80f4 	bhi.w	800226e <_Z12select_statev+0x3c6>
 8002086:	a201      	add	r2, pc, #4	@ (adr r2, 800208c <_Z12select_statev+0x1e4>)
 8002088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208c:	080020a5 	.word	0x080020a5
 8002090:	080020d7 	.word	0x080020d7
 8002094:	080020fb 	.word	0x080020fb
 8002098:	08002199 	.word	0x08002199
 800209c:	080021b9 	.word	0x080021b9
 80020a0:	080021f1 	.word	0x080021f1
	case start:
		state_air_n = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
		state_precharge = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_DISCONNECTED);
 80020b0:	2102      	movs	r1, #2
 80020b2:	482c      	ldr	r0, [pc, #176]	@ (8002164 <_Z12select_statev+0x2bc>)
 80020b4:	f7fe ff7c 	bl	8000fb0 <_ZN7CPU_MOD11updateStateEi>
		if (gpio_charge == GPIO_PIN_SET) {
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d103      	bne.n	80020c6 <_Z12select_statev+0x21e>
			state = charge;
 80020be:	4b34      	ldr	r3, [pc, #208]	@ (8002190 <_Z12select_statev+0x2e8>)
 80020c0:	2204      	movs	r2, #4
 80020c2:	701a      	strb	r2, [r3, #0]
		}

		else if (flag_cpu != CPU_ERROR_COMMUNICATION)
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
		break;
 80020c4:	e0ce      	b.n	8002264 <_Z12select_statev+0x3bc>
		else if (flag_cpu != CPU_ERROR_COMMUNICATION)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	f000 80cb 	beq.w	8002264 <_Z12select_statev+0x3bc>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 80020ce:	4b30      	ldr	r3, [pc, #192]	@ (8002190 <_Z12select_statev+0x2e8>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
		break;
 80020d4:	e0c6      	b.n	8002264 <_Z12select_statev+0x3bc>
	case precharge:
		state_air_n = 1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 80020de:	2301      	movs	r3, #1
 80020e0:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_PRECHARGE);
 80020e2:	2101      	movs	r1, #1
 80020e4:	481f      	ldr	r0, [pc, #124]	@ (8002164 <_Z12select_statev+0x2bc>)
 80020e6:	f7fe ff63 	bl	8000fb0 <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu == CPU_OK) {
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f040 808a 	bne.w	8002206 <_Z12select_statev+0x35e>
			state = transition;
 80020f2:	4b27      	ldr	r3, [pc, #156]	@ (8002190 <_Z12select_statev+0x2e8>)
 80020f4:	2202      	movs	r2, #2
 80020f6:	701a      	strb	r2, [r3, #0]
			//} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
			//state = error;
			//else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
			break;
 80020f8:	e0b9      	b.n	800226e <_Z12select_statev+0x3c6>
			case transition:
			state_air_n = 1;
 80020fa:	2301      	movs	r3, #1
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
			state_air_p = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	623b      	str	r3, [r7, #32]
			state_precharge = 1;
 8002102:	2301      	movs	r3, #1
 8002104:	61fb      	str	r3, [r7, #28]
			CPU.updateState(CPU_PRECHARGE);
 8002106:	2101      	movs	r1, #1
 8002108:	4816      	ldr	r0, [pc, #88]	@ (8002164 <_Z12select_statev+0x2bc>)
 800210a:	f7fe ff51 	bl	8000fb0 <_ZN7CPU_MOD11updateStateEi>
			if ((((CPU.voltage_acum) / 1000) * 0.9 < CPU.DC_BUS)
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <_Z12select_statev+0x2bc>)
 8002110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002112:	4a20      	ldr	r2, [pc, #128]	@ (8002194 <_Z12select_statev+0x2ec>)
 8002114:	fb82 1203 	smull	r1, r2, r2, r3
 8002118:	1192      	asrs	r2, r2, #6
 800211a:	17db      	asrs	r3, r3, #31
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	ee07 3a90 	vmov	s15, r3
 8002122:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002126:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8002158 <_Z12select_statev+0x2b0>
 800212a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800212e:	4b0d      	ldr	r3, [pc, #52]	@ (8002164 <_Z12select_statev+0x2bc>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800213a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800213e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002142:	d400      	bmi.n	8002146 <_Z12select_statev+0x29e>
					&& (CPU.voltage_acum != 0)) {
				state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
				//}else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
				//else if(flag_current != Current_OK) state = error;
			}
			break;
 8002144:	e090      	b.n	8002268 <_Z12select_statev+0x3c0>
					&& (CPU.voltage_acum != 0)) {
 8002146:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <_Z12select_statev+0x2bc>)
 8002148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 808c 	beq.w	8002268 <_Z12select_statev+0x3c0>
				state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 8002150:	4b0f      	ldr	r3, [pc, #60]	@ (8002190 <_Z12select_statev+0x2e8>)
 8002152:	2203      	movs	r2, #3
 8002154:	701a      	strb	r2, [r3, #0]
			break;
 8002156:	e087      	b.n	8002268 <_Z12select_statev+0x3c0>
 8002158:	cccccccd 	.word	0xcccccccd
 800215c:	3feccccc 	.word	0x3feccccc
 8002160:	58021800 	.word	0x58021800
 8002164:	24000c70 	.word	0x24000c70
 8002168:	24000004 	.word	0x24000004
 800216c:	24000c64 	.word	0x24000c64
 8002170:	240004bc 	.word	0x240004bc
 8002174:	24000cf4 	.word	0x24000cf4
 8002178:	24000008 	.word	0x24000008
 800217c:	24000000 	.word	0x24000000
 8002180:	24000c6c 	.word	0x24000c6c
 8002184:	24000c68 	.word	0x24000c68
 8002188:	0800cb70 	.word	0x0800cb70
 800218c:	24000cac 	.word	0x24000cac
 8002190:	24000cf0 	.word	0x24000cf0
 8002194:	10624dd3 	.word	0x10624dd3
			case run:
			state_air_n = 1;
 8002198:	2301      	movs	r3, #1
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
			state_air_p = 1;
 800219c:	2301      	movs	r3, #1
 800219e:	623b      	str	r3, [r7, #32]
			state_precharge = 1;
 80021a0:	2301      	movs	r3, #1
 80021a2:	61fb      	str	r3, [r7, #28]
			CPU.updateState(CPU_POWER);
 80021a4:	2100      	movs	r1, #0
 80021a6:	4834      	ldr	r0, [pc, #208]	@ (8002278 <_Z12select_statev+0x3d0>)
 80021a8:	f7fe ff02 	bl	8000fb0 <_ZN7CPU_MOD11updateStateEi>
			__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, FAN_TIMER_ARR);
 80021ac:	4b33      	ldr	r3, [pc, #204]	@ (800227c <_Z12select_statev+0x3d4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f642 123f 	movw	r2, #10559	@ 0x293f
 80021b4:	635a      	str	r2, [r3, #52]	@ 0x34
			}
			if (flag_current != Current_OK) {
				//state = error; //If current is too high, error
			}

			break;
 80021b6:	e05a      	b.n	800226e <_Z12select_statev+0x3c6>

			case charge:
			{
				state_air_n = 1;
 80021b8:	2301      	movs	r3, #1
 80021ba:	627b      	str	r3, [r7, #36]	@ 0x24
				state_air_p = 1;
 80021bc:	2301      	movs	r3, #1
 80021be:	623b      	str	r3, [r7, #32]
				state_precharge = 1;
 80021c0:	2301      	movs	r3, #1
 80021c2:	61fb      	str	r3, [r7, #28]
				CPU.updateState(CPU_CHARGING);
 80021c4:	2104      	movs	r1, #4
 80021c6:	482c      	ldr	r0, [pc, #176]	@ (8002278 <_Z12select_statev+0x3d0>)
 80021c8:	f7fe fef2 	bl	8000fb0 <_ZN7CPU_MOD11updateStateEi>

				__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, FAN_TIMER_ARR / 4); //25% fan speed
 80021cc:	4b2b      	ldr	r3, [pc, #172]	@ (800227c <_Z12select_statev+0x3d4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f640 224f 	movw	r2, #2639	@ 0xa4f
 80021d4:	635a      	str	r2, [r3, #52]	@ 0x34

				int32_t current_act = current.Current; //Actual current in mA to check if it's charging
 80021d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002280 <_Z12select_statev+0x3d8>)
 80021d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021da:	607b      	str	r3, [r7, #4]
				 state = error; //Charge has been interrupted
				 } else {
				 charge_current_error_counter = 0;
				 }*/

				if (gpio_charge == GPIO_PIN_RESET) {
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d144      	bne.n	800226c <_Z12select_statev+0x3c4>
					state = start;
 80021e2:	4b28      	ldr	r3, [pc, #160]	@ (8002284 <_Z12select_statev+0x3dc>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
					charge_current_error_counter = 0;
 80021e8:	4b27      	ldr	r3, [pc, #156]	@ (8002288 <_Z12select_statev+0x3e0>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
				}

				break;
 80021ee:	e03d      	b.n	800226c <_Z12select_statev+0x3c4>
			}

			case error:
			state_air_n = 0; //All relés closed
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	@ 0x24
			state_air_p = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	623b      	str	r3, [r7, #32]
			state_precharge = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61fb      	str	r3, [r7, #28]
			CPU.updateState(CPU_ERROR);
 80021fc:	2103      	movs	r1, #3
 80021fe:	481e      	ldr	r0, [pc, #120]	@ (8002278 <_Z12select_statev+0x3d0>)
 8002200:	f7fe fed6 	bl	8000fb0 <_ZN7CPU_MOD11updateStateEi>
			break;
 8002204:	e033      	b.n	800226e <_Z12select_statev+0x3c6>
		 sprintf(buffer, " - STATE:     %i\n", state);
		 print(buffer);
		 sprintf(buffer, "***********************\n");
		 print(buffer);*/
		HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
				flag_ams_ok ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002206:	4b21      	ldr	r3, [pc, #132]	@ (800228c <_Z12select_statev+0x3e4>)
 8002208:	681b      	ldr	r3, [r3, #0]
		HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <_Z12select_statev+0x36a>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <_Z12select_statev+0x36c>
 8002212:	2300      	movs	r3, #0
 8002214:	461a      	mov	r2, r3
 8002216:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800221a:	481d      	ldr	r0, [pc, #116]	@ (8002290 <_Z12select_statev+0x3e8>)
 800221c:	f004 f946 	bl	80064ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <_Z12select_statev+0x382>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <_Z12select_statev+0x384>
 800222a:	2300      	movs	r3, #0
 800222c:	461a      	mov	r2, r3
 800222e:	2108      	movs	r1, #8
 8002230:	4818      	ldr	r0, [pc, #96]	@ (8002294 <_Z12select_statev+0x3ec>)
 8002232:	f004 f93b 	bl	80064ac <HAL_GPIO_WritePin>
				state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <_Z12select_statev+0x398>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <_Z12select_statev+0x39a>
 8002240:	2300      	movs	r3, #0
 8002242:	461a      	mov	r2, r3
 8002244:	2110      	movs	r1, #16
 8002246:	4813      	ldr	r0, [pc, #76]	@ (8002294 <_Z12select_statev+0x3ec>)
 8002248:	f004 f930 	bl	80064ac <HAL_GPIO_WritePin>
				state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <_Z12select_statev+0x3ae>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <_Z12select_statev+0x3b0>
 8002256:	2300      	movs	r3, #0
 8002258:	461a      	mov	r2, r3
 800225a:	2120      	movs	r1, #32
 800225c:	480d      	ldr	r0, [pc, #52]	@ (8002294 <_Z12select_statev+0x3ec>)
 800225e:	f004 f925 	bl	80064ac <HAL_GPIO_WritePin>
		}

	}


}
 8002262:	e004      	b.n	800226e <_Z12select_statev+0x3c6>
		break;
 8002264:	bf00      	nop
 8002266:	e002      	b.n	800226e <_Z12select_statev+0x3c6>
			break;
 8002268:	bf00      	nop
 800226a:	e000      	b.n	800226e <_Z12select_statev+0x3c6>
				break;
 800226c:	bf00      	nop
}
 800226e:	bf00      	nop
 8002270:	3730      	adds	r7, #48	@ 0x30
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	24000c70 	.word	0x24000c70
 800227c:	240002a8 	.word	0x240002a8
 8002280:	24000cac 	.word	0x24000cac
 8002284:	24000cf0 	.word	0x24000cf0
 8002288:	24000ca8 	.word	0x24000ca8
 800228c:	24000008 	.word	0x24000008
 8002290:	58021400 	.word	0x58021400
 8002294:	58020c00 	.word	0x58020c00

08002298 <_Z11parse_state6CANMsg>:

	/*********************************************************************************************************
	 ** Function name:           parse_state
	 ** Descriptions:            Function for analysing the data from the CAN
	 *********************************************************************************************************/
void parse_state(CANMsg data) {
 8002298:	b084      	sub	sp, #16
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	f107 0c18 	add.w	ip, r7, #24
 80022a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t time = HAL_GetTick();
 80022a8:	f000 fcb8 	bl	8002c1c <HAL_GetTick>
 80022ac:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 80022ae:	2300      	movs	r3, #0
 80022b0:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < BMS_N; i++) {
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	e017      	b.n	80022e8 <_Z11parse_state6CANMsg+0x50>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], time); //Checking if the message received is for  BMS
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	4a25      	ldr	r2, [pc, #148]	@ (8002358 <_Z11parse_state6CANMsg+0xc0>)
 80022c4:	1898      	adds	r0, r3, r2
 80022c6:	69b9      	ldr	r1, [r7, #24]
 80022c8:	f107 021d 	add.w	r2, r7, #29
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	f7fe fbb1 	bl	8000a34 <_ZN7BMS_MOD5parseEmPhm>
 80022d2:	4603      	mov	r3, r0
 80022d4:	73fb      	strb	r3, [r7, #15]
		if (flag_bms)
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <_Z11parse_state6CANMsg+0x4a>
		i = BMS_N;
 80022dc:	4b1f      	ldr	r3, [pc, #124]	@ (800235c <_Z11parse_state6CANMsg+0xc4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < BMS_N; i++) {
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	3301      	adds	r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	4b1c      	ldr	r3, [pc, #112]	@ (800235c <_Z11parse_state6CANMsg+0xc4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	dbe2      	blt.n	80022b8 <_Z11parse_state6CANMsg+0x20>
	}

	if (!flag_bms) {
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	f083 0301 	eor.w	r3, r3, #1
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d025      	beq.n	800234a <_Z11parse_state6CANMsg+0xb2>
		if (CPU.parse(data.id, &data.buf[0], time))
 80022fe:	69b9      	ldr	r1, [r7, #24]
 8002300:	f107 021d 	add.w	r2, r7, #29
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	4816      	ldr	r0, [pc, #88]	@ (8002360 <_Z11parse_state6CANMsg+0xc8>)
 8002308:	f7fe fddc 	bl	8000ec4 <_ZN7CPU_MOD5parseEmPhm>
		;                       //Cheking if message is for CPU
		if (data.id == 419385575)//If message from this direction received, it is because the charger is connected and the accu is for charging
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	4a15      	ldr	r2, [pc, #84]	@ (8002364 <_Z11parse_state6CANMsg+0xcc>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d11a      	bne.n	800234a <_Z11parse_state6CANMsg+0xb2>
		{
			for (int i = 0; i < BMS_N; i++) {
 8002314:	2300      	movs	r3, #0
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	e00c      	b.n	8002334 <_Z11parse_state6CANMsg+0x9c>
				BMS[i].flag_charger = 1;
 800231a:	4a0f      	ldr	r2, [pc, #60]	@ (8002358 <_Z11parse_state6CANMsg+0xc0>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	3398      	adds	r3, #152	@ 0x98
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3301      	adds	r3, #1
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	4b09      	ldr	r3, [pc, #36]	@ (800235c <_Z11parse_state6CANMsg+0xc4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	429a      	cmp	r2, r3
 800233c:	dbed      	blt.n	800231a <_Z11parse_state6CANMsg+0x82>
			}

			current.flag_charger = 1;
 800233e:	4b0a      	ldr	r3, [pc, #40]	@ (8002368 <_Z11parse_state6CANMsg+0xd0>)
 8002340:	2201      	movs	r2, #1
 8002342:	639a      	str	r2, [r3, #56]	@ 0x38
			flag_charger = 1;
 8002344:	4b09      	ldr	r3, [pc, #36]	@ (800236c <_Z11parse_state6CANMsg+0xd4>)
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002354:	b004      	add	sp, #16
 8002356:	4770      	bx	lr
 8002358:	240004bc 	.word	0x240004bc
 800235c:	24000000 	.word	0x24000000
 8002360:	24000c70 	.word	0x24000c70
 8002364:	18ff50e7 	.word	0x18ff50e7
 8002368:	24000cac 	.word	0x24000cac
 800236c:	24000ca4 	.word	0x24000ca4

08002370 <_Z41__static_initialization_and_destruction_0v>:
 8002370:	b590      	push	{r4, r7, lr}
 8002372:	b087      	sub	sp, #28
 8002374:	af06      	add	r7, sp, #24
		};
 8002376:	4c40      	ldr	r4, [pc, #256]	@ (8002478 <_Z41__static_initialization_and_destruction_0v+0x108>)
 8002378:	2369      	movs	r3, #105	@ 0x69
 800237a:	9304      	str	r3, [sp, #16]
 800237c:	2332      	movs	r3, #50	@ 0x32
 800237e:	9303      	str	r3, [sp, #12]
 8002380:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002384:	9302      	str	r3, [sp, #8]
 8002386:	2313      	movs	r3, #19
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	233c      	movs	r3, #60	@ 0x3c
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002392:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002396:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800239a:	4620      	mov	r0, r4
 800239c:	f7fe f9a6 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80023a0:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 80023a4:	23cd      	movs	r3, #205	@ 0xcd
 80023a6:	9304      	str	r3, [sp, #16]
 80023a8:	2364      	movs	r3, #100	@ 0x64
 80023aa:	9303      	str	r3, [sp, #12]
 80023ac:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80023b0:	9302      	str	r3, [sp, #8]
 80023b2:	2313      	movs	r3, #19
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	233c      	movs	r3, #60	@ 0x3c
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80023be:	f241 0268 	movw	r2, #4200	@ 0x1068
 80023c2:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80023c6:	4620      	mov	r0, r4
 80023c8:	f7fe f990 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80023cc:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 80023d0:	f240 1331 	movw	r3, #305	@ 0x131
 80023d4:	9304      	str	r3, [sp, #16]
 80023d6:	2396      	movs	r3, #150	@ 0x96
 80023d8:	9303      	str	r3, [sp, #12]
 80023da:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80023de:	9302      	str	r3, [sp, #8]
 80023e0:	2313      	movs	r3, #19
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	233c      	movs	r3, #60	@ 0x3c
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80023ec:	f241 0268 	movw	r2, #4200	@ 0x1068
 80023f0:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80023f4:	4620      	mov	r0, r4
 80023f6:	f7fe f979 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80023fa:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 80023fe:	f240 1395 	movw	r3, #405	@ 0x195
 8002402:	9304      	str	r3, [sp, #16]
 8002404:	23c8      	movs	r3, #200	@ 0xc8
 8002406:	9303      	str	r3, [sp, #12]
 8002408:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800240c:	9302      	str	r3, [sp, #8]
 800240e:	2313      	movs	r3, #19
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	233c      	movs	r3, #60	@ 0x3c
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800241a:	f241 0268 	movw	r2, #4200	@ 0x1068
 800241e:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8002422:	4620      	mov	r0, r4
 8002424:	f7fe f962 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8002428:	f504 70c4 	add.w	r0, r4, #392	@ 0x188
 800242c:	f240 13f9 	movw	r3, #505	@ 0x1f9
 8002430:	9304      	str	r3, [sp, #16]
 8002432:	23fa      	movs	r3, #250	@ 0xfa
 8002434:	9303      	str	r3, [sp, #12]
 8002436:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800243a:	9302      	str	r3, [sp, #8]
 800243c:	2313      	movs	r3, #19
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	233c      	movs	r3, #60	@ 0x3c
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002448:	f241 0268 	movw	r2, #4200	@ 0x1068
 800244c:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8002450:	f7fe f94c 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 8002454:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002458:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800245c:	2120      	movs	r1, #32
 800245e:	4807      	ldr	r0, [pc, #28]	@ (800247c <_Z41__static_initialization_and_destruction_0v+0x10c>)
 8002460:	f7fe fcde 	bl	8000e20 <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 8002464:	22c8      	movs	r2, #200	@ 0xc8
 8002466:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800246a:	4805      	ldr	r0, [pc, #20]	@ (8002480 <_Z41__static_initialization_and_destruction_0v+0x110>)
 800246c:	f7fe fdfa 	bl	8001064 <_ZN11Current_MODC1Emi>
}
 8002470:	bf00      	nop
 8002472:	3704      	adds	r7, #4
 8002474:	46bd      	mov	sp, r7
 8002476:	bd90      	pop	{r4, r7, pc}
 8002478:	240004bc 	.word	0x240004bc
 800247c:	24000c70 	.word	0x24000c70
 8002480:	24000cac 	.word	0x24000cac

08002484 <_GLOBAL__sub_I_BMS>:
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
 8002488:	f7ff ff72 	bl	8002370 <_Z41__static_initialization_and_destruction_0v>
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	4b0a      	ldr	r3, [pc, #40]	@ (80024c0 <HAL_MspInit+0x30>)
 8002498:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800249c:	4a08      	ldr	r2, [pc, #32]	@ (80024c0 <HAL_MspInit+0x30>)
 800249e:	f043 0302 	orr.w	r3, r3, #2
 80024a2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80024a6:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <HAL_MspInit+0x30>)
 80024a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	58024400 	.word	0x58024400

080024c4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08c      	sub	sp, #48	@ 0x30
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 031c 	add.w	r3, r7, #28
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a31      	ldr	r2, [pc, #196]	@ (80025a8 <HAL_ADC_MspInit+0xe4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d12b      	bne.n	800253e <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80024e6:	4b31      	ldr	r3, [pc, #196]	@ (80025ac <HAL_ADC_MspInit+0xe8>)
 80024e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80024ec:	4a2f      	ldr	r2, [pc, #188]	@ (80025ac <HAL_ADC_MspInit+0xe8>)
 80024ee:	f043 0320 	orr.w	r3, r3, #32
 80024f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80024f6:	4b2d      	ldr	r3, [pc, #180]	@ (80025ac <HAL_ADC_MspInit+0xe8>)
 80024f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002504:	4b29      	ldr	r3, [pc, #164]	@ (80025ac <HAL_ADC_MspInit+0xe8>)
 8002506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800250a:	4a28      	ldr	r2, [pc, #160]	@ (80025ac <HAL_ADC_MspInit+0xe8>)
 800250c:	f043 0320 	orr.w	r3, r3, #32
 8002510:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002514:	4b25      	ldr	r3, [pc, #148]	@ (80025ac <HAL_ADC_MspInit+0xe8>)
 8002516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002522:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002528:	2303      	movs	r3, #3
 800252a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002530:	f107 031c 	add.w	r3, r7, #28
 8002534:	4619      	mov	r1, r3
 8002536:	481e      	ldr	r0, [pc, #120]	@ (80025b0 <HAL_ADC_MspInit+0xec>)
 8002538:	f003 fdf8 	bl	800612c <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 800253c:	e02f      	b.n	800259e <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1c      	ldr	r2, [pc, #112]	@ (80025b4 <HAL_ADC_MspInit+0xf0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d12a      	bne.n	800259e <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002548:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <HAL_ADC_MspInit+0xe8>)
 800254a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800254e:	4a17      	ldr	r2, [pc, #92]	@ (80025ac <HAL_ADC_MspInit+0xe8>)
 8002550:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002554:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002558:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <HAL_ADC_MspInit+0xe8>)
 800255a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800255e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002566:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <HAL_ADC_MspInit+0xe8>)
 8002568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800256c:	4a0f      	ldr	r2, [pc, #60]	@ (80025ac <HAL_ADC_MspInit+0xe8>)
 800256e:	f043 0320 	orr.w	r3, r3, #32
 8002572:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002576:	4b0d      	ldr	r3, [pc, #52]	@ (80025ac <HAL_ADC_MspInit+0xe8>)
 8002578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002584:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800258a:	2303      	movs	r3, #3
 800258c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002592:	f107 031c 	add.w	r3, r7, #28
 8002596:	4619      	mov	r1, r3
 8002598:	4805      	ldr	r0, [pc, #20]	@ (80025b0 <HAL_ADC_MspInit+0xec>)
 800259a:	f003 fdc7 	bl	800612c <HAL_GPIO_Init>
}
 800259e:	bf00      	nop
 80025a0:	3730      	adds	r7, #48	@ 0x30
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40022000 	.word	0x40022000
 80025ac:	58024400 	.word	0x58024400
 80025b0:	58021400 	.word	0x58021400
 80025b4:	58026000 	.word	0x58026000

080025b8 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b0ba      	sub	sp, #232	@ 0xe8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025d0:	f107 0318 	add.w	r3, r7, #24
 80025d4:	22b8      	movs	r2, #184	@ 0xb8
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f009 fcc9 	bl	800bf70 <memset>
  if(hfdcan->Instance==FDCAN1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a5a      	ldr	r2, [pc, #360]	@ (800274c <HAL_FDCAN_MspInit+0x194>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d157      	bne.n	8002698 <HAL_FDCAN_MspInit+0xe0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80025e8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025fa:	f107 0318 	add.w	r3, r7, #24
 80025fe:	4618      	mov	r0, r3
 8002600:	f004 ff0e 	bl	8007420 <HAL_RCCEx_PeriphCLKConfig>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800260a:	f7ff fc47 	bl	8001e9c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800260e:	4b50      	ldr	r3, [pc, #320]	@ (8002750 <HAL_FDCAN_MspInit+0x198>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3301      	adds	r3, #1
 8002614:	4a4e      	ldr	r2, [pc, #312]	@ (8002750 <HAL_FDCAN_MspInit+0x198>)
 8002616:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002618:	4b4d      	ldr	r3, [pc, #308]	@ (8002750 <HAL_FDCAN_MspInit+0x198>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d10e      	bne.n	800263e <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002620:	4b4c      	ldr	r3, [pc, #304]	@ (8002754 <HAL_FDCAN_MspInit+0x19c>)
 8002622:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002626:	4a4b      	ldr	r2, [pc, #300]	@ (8002754 <HAL_FDCAN_MspInit+0x19c>)
 8002628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800262c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002630:	4b48      	ldr	r3, [pc, #288]	@ (8002754 <HAL_FDCAN_MspInit+0x19c>)
 8002632:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800263e:	4b45      	ldr	r3, [pc, #276]	@ (8002754 <HAL_FDCAN_MspInit+0x19c>)
 8002640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002644:	4a43      	ldr	r2, [pc, #268]	@ (8002754 <HAL_FDCAN_MspInit+0x19c>)
 8002646:	f043 0308 	orr.w	r3, r3, #8
 800264a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800264e:	4b41      	ldr	r3, [pc, #260]	@ (8002754 <HAL_FDCAN_MspInit+0x19c>)
 8002650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800265c:	2303      	movs	r3, #3
 800265e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002674:	2309      	movs	r3, #9
 8002676:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800267a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800267e:	4619      	mov	r1, r3
 8002680:	4835      	ldr	r0, [pc, #212]	@ (8002758 <HAL_FDCAN_MspInit+0x1a0>)
 8002682:	f003 fd53 	bl	800612c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2100      	movs	r1, #0
 800268a:	2013      	movs	r0, #19
 800268c:	f002 fb4b 	bl	8004d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002690:	2013      	movs	r0, #19
 8002692:	f002 fb62 	bl	8004d5a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002696:	e054      	b.n	8002742 <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a2f      	ldr	r2, [pc, #188]	@ (800275c <HAL_FDCAN_MspInit+0x1a4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d14f      	bne.n	8002742 <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80026a2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026b4:	f107 0318 	add.w	r3, r7, #24
 80026b8:	4618      	mov	r0, r3
 80026ba:	f004 feb1 	bl	8007420 <HAL_RCCEx_PeriphCLKConfig>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 80026c4:	f7ff fbea 	bl	8001e9c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80026c8:	4b21      	ldr	r3, [pc, #132]	@ (8002750 <HAL_FDCAN_MspInit+0x198>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	4a20      	ldr	r2, [pc, #128]	@ (8002750 <HAL_FDCAN_MspInit+0x198>)
 80026d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80026d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002750 <HAL_FDCAN_MspInit+0x198>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d10e      	bne.n	80026f8 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80026da:	4b1e      	ldr	r3, [pc, #120]	@ (8002754 <HAL_FDCAN_MspInit+0x19c>)
 80026dc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80026e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002754 <HAL_FDCAN_MspInit+0x19c>)
 80026e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e6:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80026ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002754 <HAL_FDCAN_MspInit+0x19c>)
 80026ec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80026f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f8:	4b16      	ldr	r3, [pc, #88]	@ (8002754 <HAL_FDCAN_MspInit+0x19c>)
 80026fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026fe:	4a15      	ldr	r2, [pc, #84]	@ (8002754 <HAL_FDCAN_MspInit+0x19c>)
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002708:	4b12      	ldr	r3, [pc, #72]	@ (8002754 <HAL_FDCAN_MspInit+0x19c>)
 800270a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002716:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800271a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272a:	2300      	movs	r3, #0
 800272c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002730:	2309      	movs	r3, #9
 8002732:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002736:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800273a:	4619      	mov	r1, r3
 800273c:	4808      	ldr	r0, [pc, #32]	@ (8002760 <HAL_FDCAN_MspInit+0x1a8>)
 800273e:	f003 fcf5 	bl	800612c <HAL_GPIO_Init>
}
 8002742:	bf00      	nop
 8002744:	37e8      	adds	r7, #232	@ 0xe8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	4000a000 	.word	0x4000a000
 8002750:	24000d44 	.word	0x24000d44
 8002754:	58024400 	.word	0x58024400
 8002758:	58020c00 	.word	0x58020c00
 800275c:	4000a400 	.word	0x4000a400
 8002760:	58020400 	.word	0x58020400

08002764 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0b      	ldr	r2, [pc, #44]	@ (80027a0 <HAL_TIM_Base_MspInit+0x3c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d10e      	bne.n	8002794 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002776:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <HAL_TIM_Base_MspInit+0x40>)
 8002778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800277c:	4a09      	ldr	r2, [pc, #36]	@ (80027a4 <HAL_TIM_Base_MspInit+0x40>)
 800277e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002782:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002786:	4b07      	ldr	r3, [pc, #28]	@ (80027a4 <HAL_TIM_Base_MspInit+0x40>)
 8002788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800278c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	40014800 	.word	0x40014800
 80027a4:	58024400 	.word	0x58024400

080027a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a12      	ldr	r2, [pc, #72]	@ (8002810 <HAL_TIM_MspPostInit+0x68>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d11e      	bne.n	8002808 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027ca:	4b12      	ldr	r3, [pc, #72]	@ (8002814 <HAL_TIM_MspPostInit+0x6c>)
 80027cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027d0:	4a10      	ldr	r2, [pc, #64]	@ (8002814 <HAL_TIM_MspPostInit+0x6c>)
 80027d2:	f043 0320 	orr.w	r3, r3, #32
 80027d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027da:	4b0e      	ldr	r3, [pc, #56]	@ (8002814 <HAL_TIM_MspPostInit+0x6c>)
 80027dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PF7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027e8:	2380      	movs	r3, #128	@ 0x80
 80027ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80027f8:	2301      	movs	r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027fc:	f107 030c 	add.w	r3, r7, #12
 8002800:	4619      	mov	r1, r3
 8002802:	4805      	ldr	r0, [pc, #20]	@ (8002818 <HAL_TIM_MspPostInit+0x70>)
 8002804:	f003 fc92 	bl	800612c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002808:	bf00      	nop
 800280a:	3720      	adds	r7, #32
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40014800 	.word	0x40014800
 8002814:	58024400 	.word	0x58024400
 8002818:	58021400 	.word	0x58021400

0800281c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b0b8      	sub	sp, #224	@ 0xe0
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002834:	f107 0310 	add.w	r3, r7, #16
 8002838:	22b8      	movs	r2, #184	@ 0xb8
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f009 fb97 	bl	800bf70 <memset>
  if(huart->Instance==USART2)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a26      	ldr	r2, [pc, #152]	@ (80028e0 <HAL_UART_MspInit+0xc4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d145      	bne.n	80028d8 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800284c:	f04f 0202 	mov.w	r2, #2
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800285e:	f107 0310 	add.w	r3, r7, #16
 8002862:	4618      	mov	r0, r3
 8002864:	f004 fddc 	bl	8007420 <HAL_RCCEx_PeriphCLKConfig>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800286e:	f7ff fb15 	bl	8001e9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002872:	4b1c      	ldr	r3, [pc, #112]	@ (80028e4 <HAL_UART_MspInit+0xc8>)
 8002874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002878:	4a1a      	ldr	r2, [pc, #104]	@ (80028e4 <HAL_UART_MspInit+0xc8>)
 800287a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800287e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002882:	4b18      	ldr	r3, [pc, #96]	@ (80028e4 <HAL_UART_MspInit+0xc8>)
 8002884:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002890:	4b14      	ldr	r3, [pc, #80]	@ (80028e4 <HAL_UART_MspInit+0xc8>)
 8002892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002896:	4a13      	ldr	r2, [pc, #76]	@ (80028e4 <HAL_UART_MspInit+0xc8>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028a0:	4b10      	ldr	r3, [pc, #64]	@ (80028e4 <HAL_UART_MspInit+0xc8>)
 80028a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028ae:	230c      	movs	r3, #12
 80028b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028c6:	2307      	movs	r3, #7
 80028c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028cc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80028d0:	4619      	mov	r1, r3
 80028d2:	4805      	ldr	r0, [pc, #20]	@ (80028e8 <HAL_UART_MspInit+0xcc>)
 80028d4:	f003 fc2a 	bl	800612c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80028d8:	bf00      	nop
 80028da:	37e0      	adds	r7, #224	@ 0xe0
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40004400 	.word	0x40004400
 80028e4:	58024400 	.word	0x58024400
 80028e8:	58020000 	.word	0x58020000

080028ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <NMI_Handler+0x4>

080028f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <HardFault_Handler+0x4>

080028fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <MemManage_Handler+0x4>

08002904 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <BusFault_Handler+0x4>

0800290c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <UsageFault_Handler+0x4>

08002914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002942:	f000 f957 	bl	8002bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002950:	4802      	ldr	r0, [pc, #8]	@ (800295c <FDCAN1_IT0_IRQHandler+0x10>)
 8002952:	f002 fedd 	bl	8005710 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	24000168 	.word	0x24000168

08002960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002968:	4a14      	ldr	r2, [pc, #80]	@ (80029bc <_sbrk+0x5c>)
 800296a:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <_sbrk+0x60>)
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002974:	4b13      	ldr	r3, [pc, #76]	@ (80029c4 <_sbrk+0x64>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800297c:	4b11      	ldr	r3, [pc, #68]	@ (80029c4 <_sbrk+0x64>)
 800297e:	4a12      	ldr	r2, [pc, #72]	@ (80029c8 <_sbrk+0x68>)
 8002980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002982:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <_sbrk+0x64>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	429a      	cmp	r2, r3
 800298e:	d207      	bcs.n	80029a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002990:	f009 faf6 	bl	800bf80 <__errno>
 8002994:	4603      	mov	r3, r0
 8002996:	220c      	movs	r2, #12
 8002998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	e009      	b.n	80029b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a0:	4b08      	ldr	r3, [pc, #32]	@ (80029c4 <_sbrk+0x64>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029a6:	4b07      	ldr	r3, [pc, #28]	@ (80029c4 <_sbrk+0x64>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	4a05      	ldr	r2, [pc, #20]	@ (80029c4 <_sbrk+0x64>)
 80029b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029b2:	68fb      	ldr	r3, [r7, #12]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	24050000 	.word	0x24050000
 80029c0:	00000400 	.word	0x00000400
 80029c4:	24000d48 	.word	0x24000d48
 80029c8:	24000e98 	.word	0x24000e98

080029cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029d0:	4b32      	ldr	r3, [pc, #200]	@ (8002a9c <SystemInit+0xd0>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d6:	4a31      	ldr	r2, [pc, #196]	@ (8002a9c <SystemInit+0xd0>)
 80029d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029e0:	4b2f      	ldr	r3, [pc, #188]	@ (8002aa0 <SystemInit+0xd4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	2b06      	cmp	r3, #6
 80029ea:	d807      	bhi.n	80029fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029ec:	4b2c      	ldr	r3, [pc, #176]	@ (8002aa0 <SystemInit+0xd4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f023 030f 	bic.w	r3, r3, #15
 80029f4:	4a2a      	ldr	r2, [pc, #168]	@ (8002aa0 <SystemInit+0xd4>)
 80029f6:	f043 0307 	orr.w	r3, r3, #7
 80029fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80029fc:	4b29      	ldr	r3, [pc, #164]	@ (8002aa4 <SystemInit+0xd8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a28      	ldr	r2, [pc, #160]	@ (8002aa4 <SystemInit+0xd8>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a08:	4b26      	ldr	r3, [pc, #152]	@ (8002aa4 <SystemInit+0xd8>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002a0e:	4b25      	ldr	r3, [pc, #148]	@ (8002aa4 <SystemInit+0xd8>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4924      	ldr	r1, [pc, #144]	@ (8002aa4 <SystemInit+0xd8>)
 8002a14:	4b24      	ldr	r3, [pc, #144]	@ (8002aa8 <SystemInit+0xdc>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a1a:	4b21      	ldr	r3, [pc, #132]	@ (8002aa0 <SystemInit+0xd4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a26:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa0 <SystemInit+0xd4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 030f 	bic.w	r3, r3, #15
 8002a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa0 <SystemInit+0xd4>)
 8002a30:	f043 0307 	orr.w	r3, r3, #7
 8002a34:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002a36:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa4 <SystemInit+0xd8>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002a3c:	4b19      	ldr	r3, [pc, #100]	@ (8002aa4 <SystemInit+0xd8>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002a42:	4b18      	ldr	r3, [pc, #96]	@ (8002aa4 <SystemInit+0xd8>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002a48:	4b16      	ldr	r3, [pc, #88]	@ (8002aa4 <SystemInit+0xd8>)
 8002a4a:	4a18      	ldr	r2, [pc, #96]	@ (8002aac <SystemInit+0xe0>)
 8002a4c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002a4e:	4b15      	ldr	r3, [pc, #84]	@ (8002aa4 <SystemInit+0xd8>)
 8002a50:	4a17      	ldr	r2, [pc, #92]	@ (8002ab0 <SystemInit+0xe4>)
 8002a52:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002a54:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <SystemInit+0xd8>)
 8002a56:	4a17      	ldr	r2, [pc, #92]	@ (8002ab4 <SystemInit+0xe8>)
 8002a58:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002a5a:	4b12      	ldr	r3, [pc, #72]	@ (8002aa4 <SystemInit+0xd8>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002a60:	4b10      	ldr	r3, [pc, #64]	@ (8002aa4 <SystemInit+0xd8>)
 8002a62:	4a14      	ldr	r2, [pc, #80]	@ (8002ab4 <SystemInit+0xe8>)
 8002a64:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002a66:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa4 <SystemInit+0xd8>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa4 <SystemInit+0xd8>)
 8002a6e:	4a11      	ldr	r2, [pc, #68]	@ (8002ab4 <SystemInit+0xe8>)
 8002a70:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002a72:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <SystemInit+0xd8>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a78:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa4 <SystemInit+0xd8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a09      	ldr	r2, [pc, #36]	@ (8002aa4 <SystemInit+0xd8>)
 8002a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a84:	4b07      	ldr	r3, [pc, #28]	@ (8002aa4 <SystemInit+0xd8>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab8 <SystemInit+0xec>)
 8002a8c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002a90:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002a92:	bf00      	nop
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00
 8002aa0:	52002000 	.word	0x52002000
 8002aa4:	58024400 	.word	0x58024400
 8002aa8:	eaf6ed7f 	.word	0xeaf6ed7f
 8002aac:	02020200 	.word	0x02020200
 8002ab0:	01ff0000 	.word	0x01ff0000
 8002ab4:	01010280 	.word	0x01010280
 8002ab8:	52004000 	.word	0x52004000

08002abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002abc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002af4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ac0:	f7ff ff84 	bl	80029cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ac4:	480c      	ldr	r0, [pc, #48]	@ (8002af8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ac6:	490d      	ldr	r1, [pc, #52]	@ (8002afc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002acc:	e002      	b.n	8002ad4 <LoopCopyDataInit>

08002ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ad2:	3304      	adds	r3, #4

08002ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ad8:	d3f9      	bcc.n	8002ace <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ada:	4a0a      	ldr	r2, [pc, #40]	@ (8002b04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002adc:	4c0a      	ldr	r4, [pc, #40]	@ (8002b08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ae0:	e001      	b.n	8002ae6 <LoopFillZerobss>

08002ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ae2:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 8002ae4:	3204      	adds	r2, #4

08002ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ae8:	d3fb      	bcc.n	8002ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002aea:	f009 fa4f 	bl	800bf8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aee:	f7fe fba7 	bl	8001240 <main>
  bx  lr
 8002af2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002af4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002af8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002afc:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002b00:	0800cc6c 	.word	0x0800cc6c
  ldr r2, =_sbss
 8002b04:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8002b08:	24000e98 	.word	0x24000e98

08002b0c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b0c:	e7fe      	b.n	8002b0c <ADC3_IRQHandler>
	...

08002b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b16:	2003      	movs	r0, #3
 8002b18:	f002 f8fa 	bl	8004d10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b1c:	f004 faaa 	bl	8007074 <HAL_RCC_GetSysClockFreq>
 8002b20:	4602      	mov	r2, r0
 8002b22:	4b15      	ldr	r3, [pc, #84]	@ (8002b78 <HAL_Init+0x68>)
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	4913      	ldr	r1, [pc, #76]	@ (8002b7c <HAL_Init+0x6c>)
 8002b2e:	5ccb      	ldrb	r3, [r1, r3]
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	fa22 f303 	lsr.w	r3, r2, r3
 8002b38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b78 <HAL_Init+0x68>)
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	4a0e      	ldr	r2, [pc, #56]	@ (8002b7c <HAL_Init+0x6c>)
 8002b44:	5cd3      	ldrb	r3, [r2, r3]
 8002b46:	f003 031f 	and.w	r3, r3, #31
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b50:	4a0b      	ldr	r2, [pc, #44]	@ (8002b80 <HAL_Init+0x70>)
 8002b52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b54:	4a0b      	ldr	r2, [pc, #44]	@ (8002b84 <HAL_Init+0x74>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b5a:	200f      	movs	r0, #15
 8002b5c:	f000 f814 	bl	8002b88 <HAL_InitTick>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e002      	b.n	8002b70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b6a:	f7ff fc91 	bl	8002490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	58024400 	.word	0x58024400
 8002b7c:	0800cbdc 	.word	0x0800cbdc
 8002b80:	24000010 	.word	0x24000010
 8002b84:	2400000c 	.word	0x2400000c

08002b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b90:	4b15      	ldr	r3, [pc, #84]	@ (8002be8 <HAL_InitTick+0x60>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e021      	b.n	8002be0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b9c:	4b13      	ldr	r3, [pc, #76]	@ (8002bec <HAL_InitTick+0x64>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b11      	ldr	r3, [pc, #68]	@ (8002be8 <HAL_InitTick+0x60>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f002 f8df 	bl	8004d76 <HAL_SYSTICK_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e00e      	b.n	8002be0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b0f      	cmp	r3, #15
 8002bc6:	d80a      	bhi.n	8002bde <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd0:	f002 f8a9 	bl	8004d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bd4:	4a06      	ldr	r2, [pc, #24]	@ (8002bf0 <HAL_InitTick+0x68>)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e000      	b.n	8002be0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	24000018 	.word	0x24000018
 8002bec:	2400000c 	.word	0x2400000c
 8002bf0:	24000014 	.word	0x24000014

08002bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bf8:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <HAL_IncTick+0x20>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <HAL_IncTick+0x24>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <HAL_IncTick+0x24>)
 8002c06:	6013      	str	r3, [r2, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	24000018 	.word	0x24000018
 8002c18:	24000d4c 	.word	0x24000d4c

08002c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c20:	4b03      	ldr	r3, [pc, #12]	@ (8002c30 <HAL_GetTick+0x14>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	24000d4c 	.word	0x24000d4c

08002c34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	609a      	str	r2, [r3, #8]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a18      	ldr	r2, [pc, #96]	@ (8002d0c <LL_ADC_SetChannelPreselection+0x70>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d027      	beq.n	8002cfe <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d107      	bne.n	8002cc8 <LL_ADC_SetChannelPreselection+0x2c>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	0e9b      	lsrs	r3, r3, #26
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	e015      	b.n	8002cf4 <LL_ADC_SetChannelPreselection+0x58>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8002cde:	2320      	movs	r3, #32
 8002ce0:	e003      	b.n	8002cea <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	fab3 f383 	clz	r3, r3
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	f003 031f 	and.w	r3, r3, #31
 8002cee:	2201      	movs	r2, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	69d2      	ldr	r2, [r2, #28]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8002cfe:	bf00      	nop
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	58026000 	.word	0x58026000

08002d10 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3360      	adds	r3, #96	@ 0x60
 8002d22:	461a      	mov	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4a10      	ldr	r2, [pc, #64]	@ (8002d70 <LL_ADC_SetOffset+0x60>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d10b      	bne.n	8002d4c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002d4a:	e00b      	b.n	8002d64 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	601a      	str	r2, [r3, #0]
}
 8002d64:	bf00      	nop
 8002d66:	371c      	adds	r7, #28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	58026000 	.word	0x58026000

08002d74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3360      	adds	r3, #96	@ 0x60
 8002d82:	461a      	mov	r2, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	611a      	str	r2, [r3, #16]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4a0c      	ldr	r2, [pc, #48]	@ (8002e14 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00e      	beq.n	8002e06 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3360      	adds	r3, #96	@ 0x60
 8002dec:	461a      	mov	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	601a      	str	r2, [r3, #0]
  }
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	58026000 	.word	0x58026000

08002e18 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a0c      	ldr	r2, [pc, #48]	@ (8002e58 <LL_ADC_SetOffsetSaturation+0x40>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d10e      	bne.n	8002e4a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3360      	adds	r3, #96	@ 0x60
 8002e30:	461a      	mov	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	431a      	orrs	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	58026000 	.word	0x58026000

08002e5c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e9c <LL_ADC_SetOffsetSign+0x40>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d10e      	bne.n	8002e8e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3360      	adds	r3, #96	@ 0x60
 8002e74:	461a      	mov	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002e8e:	bf00      	nop
 8002e90:	371c      	adds	r7, #28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	58026000 	.word	0x58026000

08002ea0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3360      	adds	r3, #96	@ 0x60
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8002ef0 <LL_ADC_SetOffsetState+0x50>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d108      	bne.n	8002ed4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002ed2:	e007      	b.n	8002ee4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	601a      	str	r2, [r3, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	371c      	adds	r7, #28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	58026000 	.word	0x58026000

08002ef4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b087      	sub	sp, #28
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	3330      	adds	r3, #48	@ 0x30
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	4413      	add	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	211f      	movs	r1, #31
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	401a      	ands	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	0e9b      	lsrs	r3, r3, #26
 8002f52:	f003 011f 	and.w	r1, r3, #31
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	431a      	orrs	r2, r3
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f66:	bf00      	nop
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b087      	sub	sp, #28
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	3314      	adds	r3, #20
 8002f82:	461a      	mov	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	0e5b      	lsrs	r3, r3, #25
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	4413      	add	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	0d1b      	lsrs	r3, r3, #20
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	2107      	movs	r1, #7
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	0d1b      	lsrs	r3, r3, #20
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fbc:	bf00      	nop
 8002fbe:	371c      	adds	r7, #28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8003040 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d115      	bne.n	8003008 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	401a      	ands	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 0318 	and.w	r3, r3, #24
 8002ff2:	4914      	ldr	r1, [pc, #80]	@ (8003044 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ff4:	40d9      	lsrs	r1, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	400b      	ands	r3, r1
 8002ffa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ffe:	431a      	orrs	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003006:	e014      	b.n	8003032 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003014:	43db      	mvns	r3, r3
 8003016:	401a      	ands	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0318 	and.w	r3, r3, #24
 800301e:	4909      	ldr	r1, [pc, #36]	@ (8003044 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003020:	40d9      	lsrs	r1, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	400b      	ands	r3, r1
 8003026:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800302a:	431a      	orrs	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	58026000 	.word	0x58026000
 8003044:	000fffff 	.word	0x000fffff

08003048 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 031f 	and.w	r3, r3, #31
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	4b04      	ldr	r3, [pc, #16]	@ (80030a0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800308e:	4013      	ands	r3, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6093      	str	r3, [r2, #8]
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	5fffffc0 	.word	0x5fffffc0

080030a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030b8:	d101      	bne.n	80030be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	4b05      	ldr	r3, [pc, #20]	@ (80030f0 <LL_ADC_EnableInternalRegulator+0x24>)
 80030da:	4013      	ands	r3, r2
 80030dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	6fffffc0 	.word	0x6fffffc0

080030f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003104:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003108:	d101      	bne.n	800310e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	4b05      	ldr	r3, [pc, #20]	@ (8003140 <LL_ADC_Enable+0x24>)
 800312a:	4013      	ands	r3, r2
 800312c:	f043 0201 	orr.w	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	7fffffc0 	.word	0x7fffffc0

08003144 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	4b05      	ldr	r3, [pc, #20]	@ (8003168 <LL_ADC_Disable+0x24>)
 8003152:	4013      	ands	r3, r2
 8003154:	f043 0202 	orr.w	r2, r3, #2
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	7fffffc0 	.word	0x7fffffc0

0800316c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <LL_ADC_IsEnabled+0x18>
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <LL_ADC_IsEnabled+0x1a>
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d101      	bne.n	80031aa <LL_ADC_IsDisableOngoing+0x18>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <LL_ADC_IsDisableOngoing+0x1a>
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	4b05      	ldr	r3, [pc, #20]	@ (80031dc <LL_ADC_REG_StartConversion+0x24>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	f043 0204 	orr.w	r2, r3, #4
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	7fffffc0 	.word	0x7fffffc0

080031e0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	4b05      	ldr	r3, [pc, #20]	@ (8003204 <LL_ADC_REG_StopConversion+0x24>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	f043 0210 	orr.w	r2, r3, #16
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	7fffffc0 	.word	0x7fffffc0

08003208 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b04      	cmp	r3, #4
 800321a:	d101      	bne.n	8003220 <LL_ADC_REG_IsConversionOngoing+0x18>
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <LL_ADC_INJ_StopConversion+0x24>)
 800323e:	4013      	ands	r3, r2
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	7fffffc0 	.word	0x7fffffc0

08003258 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b08      	cmp	r3, #8
 800326a:	d101      	bne.n	8003270 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
	...

08003280 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b089      	sub	sp, #36	@ 0x24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800328c:	2300      	movs	r3, #0
 800328e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e1ee      	b.n	8003678 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d109      	bne.n	80032bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff f90b 	bl	80024c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff feef 	bl	80030a4 <LL_ADC_IsDeepPowerDownEnabled>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d004      	beq.n	80032d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fed5 	bl	8003080 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff ff0a 	bl	80030f4 <LL_ADC_IsInternalRegulatorEnabled>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d114      	bne.n	8003310 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff feee 	bl	80030cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032f0:	4b8e      	ldr	r3, [pc, #568]	@ (800352c <HAL_ADC_Init+0x2ac>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	099b      	lsrs	r3, r3, #6
 80032f6:	4a8e      	ldr	r2, [pc, #568]	@ (8003530 <HAL_ADC_Init+0x2b0>)
 80032f8:	fba2 2303 	umull	r2, r3, r2, r3
 80032fc:	099b      	lsrs	r3, r3, #6
 80032fe:	3301      	adds	r3, #1
 8003300:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003302:	e002      	b.n	800330a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	3b01      	subs	r3, #1
 8003308:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f9      	bne.n	8003304 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff feed 	bl	80030f4 <LL_ADC_IsInternalRegulatorEnabled>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10d      	bne.n	800333c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003324:	f043 0210 	orr.w	r2, r3, #16
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003330:	f043 0201 	orr.w	r2, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff61 	bl	8003208 <LL_ADC_REG_IsConversionOngoing>
 8003346:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b00      	cmp	r3, #0
 8003352:	f040 8188 	bne.w	8003666 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f040 8184 	bne.w	8003666 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003362:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003366:	f043 0202 	orr.w	r2, r3, #2
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fefa 	bl	800316c <LL_ADC_IsEnabled>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d136      	bne.n	80033ec <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a6c      	ldr	r2, [pc, #432]	@ (8003534 <HAL_ADC_Init+0x2b4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_ADC_Init+0x112>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a6a      	ldr	r2, [pc, #424]	@ (8003538 <HAL_ADC_Init+0x2b8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d10e      	bne.n	80033b0 <HAL_ADC_Init+0x130>
 8003392:	4868      	ldr	r0, [pc, #416]	@ (8003534 <HAL_ADC_Init+0x2b4>)
 8003394:	f7ff feea 	bl	800316c <LL_ADC_IsEnabled>
 8003398:	4604      	mov	r4, r0
 800339a:	4867      	ldr	r0, [pc, #412]	@ (8003538 <HAL_ADC_Init+0x2b8>)
 800339c:	f7ff fee6 	bl	800316c <LL_ADC_IsEnabled>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4323      	orrs	r3, r4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf0c      	ite	eq
 80033a8:	2301      	moveq	r3, #1
 80033aa:	2300      	movne	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	e008      	b.n	80033c2 <HAL_ADC_Init+0x142>
 80033b0:	4862      	ldr	r0, [pc, #392]	@ (800353c <HAL_ADC_Init+0x2bc>)
 80033b2:	f7ff fedb 	bl	800316c <LL_ADC_IsEnabled>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bf0c      	ite	eq
 80033bc:	2301      	moveq	r3, #1
 80033be:	2300      	movne	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d012      	beq.n	80033ec <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a5a      	ldr	r2, [pc, #360]	@ (8003534 <HAL_ADC_Init+0x2b4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d004      	beq.n	80033da <HAL_ADC_Init+0x15a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a58      	ldr	r2, [pc, #352]	@ (8003538 <HAL_ADC_Init+0x2b8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d101      	bne.n	80033de <HAL_ADC_Init+0x15e>
 80033da:	4a59      	ldr	r2, [pc, #356]	@ (8003540 <HAL_ADC_Init+0x2c0>)
 80033dc:	e000      	b.n	80033e0 <HAL_ADC_Init+0x160>
 80033de:	4a59      	ldr	r2, [pc, #356]	@ (8003544 <HAL_ADC_Init+0x2c4>)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4619      	mov	r1, r3
 80033e6:	4610      	mov	r0, r2
 80033e8:	f7ff fc24 	bl	8002c34 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a52      	ldr	r2, [pc, #328]	@ (800353c <HAL_ADC_Init+0x2bc>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d129      	bne.n	800344a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	7e5b      	ldrb	r3, [r3, #25]
 80033fa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003400:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003406:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b08      	cmp	r3, #8
 800340e:	d013      	beq.n	8003438 <HAL_ADC_Init+0x1b8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b0c      	cmp	r3, #12
 8003416:	d00d      	beq.n	8003434 <HAL_ADC_Init+0x1b4>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b1c      	cmp	r3, #28
 800341e:	d007      	beq.n	8003430 <HAL_ADC_Init+0x1b0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b18      	cmp	r3, #24
 8003426:	d101      	bne.n	800342c <HAL_ADC_Init+0x1ac>
 8003428:	2318      	movs	r3, #24
 800342a:	e006      	b.n	800343a <HAL_ADC_Init+0x1ba>
 800342c:	2300      	movs	r3, #0
 800342e:	e004      	b.n	800343a <HAL_ADC_Init+0x1ba>
 8003430:	2310      	movs	r3, #16
 8003432:	e002      	b.n	800343a <HAL_ADC_Init+0x1ba>
 8003434:	2308      	movs	r3, #8
 8003436:	e000      	b.n	800343a <HAL_ADC_Init+0x1ba>
 8003438:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800343a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003442:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	e00e      	b.n	8003468 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	7e5b      	ldrb	r3, [r3, #25]
 800344e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003454:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800345a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003462:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d106      	bne.n	8003480 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	3b01      	subs	r3, #1
 8003478:	045b      	lsls	r3, r3, #17
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003484:	2b00      	cmp	r3, #0
 8003486:	d009      	beq.n	800349c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003494:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a26      	ldr	r2, [pc, #152]	@ (800353c <HAL_ADC_Init+0x2bc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d115      	bne.n	80034d2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	4b26      	ldr	r3, [pc, #152]	@ (8003548 <HAL_ADC_Init+0x2c8>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	69b9      	ldr	r1, [r7, #24]
 80034b6:	430b      	orrs	r3, r1
 80034b8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	611a      	str	r2, [r3, #16]
 80034d0:	e009      	b.n	80034e6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	4b1c      	ldr	r3, [pc, #112]	@ (800354c <HAL_ADC_Init+0x2cc>)
 80034da:	4013      	ands	r3, r2
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	69b9      	ldr	r1, [r7, #24]
 80034e2:	430b      	orrs	r3, r1
 80034e4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff fe8c 	bl	8003208 <LL_ADC_REG_IsConversionOngoing>
 80034f0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff feae 	bl	8003258 <LL_ADC_INJ_IsConversionOngoing>
 80034fc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	f040 808e 	bne.w	8003622 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	f040 808a 	bne.w	8003622 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a0a      	ldr	r2, [pc, #40]	@ (800353c <HAL_ADC_Init+0x2bc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d11b      	bne.n	8003550 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	7e1b      	ldrb	r3, [r3, #24]
 800351c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003524:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003526:	4313      	orrs	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	e018      	b.n	800355e <HAL_ADC_Init+0x2de>
 800352c:	2400000c 	.word	0x2400000c
 8003530:	053e2d63 	.word	0x053e2d63
 8003534:	40022000 	.word	0x40022000
 8003538:	40022100 	.word	0x40022100
 800353c:	58026000 	.word	0x58026000
 8003540:	40022300 	.word	0x40022300
 8003544:	58026300 	.word	0x58026300
 8003548:	fff04007 	.word	0xfff04007
 800354c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	7e1b      	ldrb	r3, [r3, #24]
 8003554:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	4b46      	ldr	r3, [pc, #280]	@ (8003680 <HAL_ADC_Init+0x400>)
 8003566:	4013      	ands	r3, r2
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	69b9      	ldr	r1, [r7, #24]
 800356e:	430b      	orrs	r3, r1
 8003570:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003578:	2b01      	cmp	r3, #1
 800357a:	d137      	bne.n	80035ec <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003580:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a3f      	ldr	r2, [pc, #252]	@ (8003684 <HAL_ADC_Init+0x404>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d116      	bne.n	80035ba <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	4b3d      	ldr	r3, [pc, #244]	@ (8003688 <HAL_ADC_Init+0x408>)
 8003594:	4013      	ands	r3, r2
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800359e:	4311      	orrs	r1, r2
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035a4:	4311      	orrs	r1, r2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80035aa:	430a      	orrs	r2, r1
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	611a      	str	r2, [r3, #16]
 80035b8:	e020      	b.n	80035fc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	4b32      	ldr	r3, [pc, #200]	@ (800368c <HAL_ADC_Init+0x40c>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80035c8:	3a01      	subs	r2, #1
 80035ca:	0411      	lsls	r1, r2, #16
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80035d0:	4311      	orrs	r1, r2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035d6:	4311      	orrs	r1, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80035dc:	430a      	orrs	r2, r1
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0201 	orr.w	r2, r2, #1
 80035e8:	611a      	str	r2, [r3, #16]
 80035ea:	e007      	b.n	80035fc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0201 	bic.w	r2, r2, #1
 80035fa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1b      	ldr	r2, [pc, #108]	@ (8003684 <HAL_ADC_Init+0x404>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d002      	beq.n	8003622 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f001 f8b1 	bl	8004784 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d10c      	bne.n	8003644 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003630:	f023 010f 	bic.w	r1, r3, #15
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	1e5a      	subs	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	631a      	str	r2, [r3, #48]	@ 0x30
 8003642:	e007      	b.n	8003654 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 020f 	bic.w	r2, r2, #15
 8003652:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003658:	f023 0303 	bic.w	r3, r3, #3
 800365c:	f043 0201 	orr.w	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	661a      	str	r2, [r3, #96]	@ 0x60
 8003664:	e007      	b.n	8003676 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800366a:	f043 0210 	orr.w	r2, r3, #16
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003676:	7ffb      	ldrb	r3, [r7, #31]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3724      	adds	r7, #36	@ 0x24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd90      	pop	{r4, r7, pc}
 8003680:	ffffbffc 	.word	0xffffbffc
 8003684:	58026000 	.word	0x58026000
 8003688:	fc00f81f 	.word	0xfc00f81f
 800368c:	fc00f81e 	.word	0xfc00f81e

08003690 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a5c      	ldr	r2, [pc, #368]	@ (8003810 <HAL_ADC_Start+0x180>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d004      	beq.n	80036ac <HAL_ADC_Start+0x1c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003814 <HAL_ADC_Start+0x184>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d101      	bne.n	80036b0 <HAL_ADC_Start+0x20>
 80036ac:	4b5a      	ldr	r3, [pc, #360]	@ (8003818 <HAL_ADC_Start+0x188>)
 80036ae:	e000      	b.n	80036b2 <HAL_ADC_Start+0x22>
 80036b0:	4b5a      	ldr	r3, [pc, #360]	@ (800381c <HAL_ADC_Start+0x18c>)
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff fcc8 	bl	8003048 <LL_ADC_GetMultimode>
 80036b8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fda2 	bl	8003208 <LL_ADC_REG_IsConversionOngoing>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f040 809a 	bne.w	8003800 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_ADC_Start+0x4a>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e095      	b.n	8003806 <HAL_ADC_Start+0x176>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 ff64 	bl	80045b0 <ADC_Enable>
 80036e8:	4603      	mov	r3, r0
 80036ea:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80036ec:	7dfb      	ldrb	r3, [r7, #23]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f040 8081 	bne.w	80037f6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80036f8:	4b49      	ldr	r3, [pc, #292]	@ (8003820 <HAL_ADC_Start+0x190>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a42      	ldr	r2, [pc, #264]	@ (8003814 <HAL_ADC_Start+0x184>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d002      	beq.n	8003714 <HAL_ADC_Start+0x84>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	e000      	b.n	8003716 <HAL_ADC_Start+0x86>
 8003714:	4b3e      	ldr	r3, [pc, #248]	@ (8003810 <HAL_ADC_Start+0x180>)
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	4293      	cmp	r3, r2
 800371c:	d002      	beq.n	8003724 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d105      	bne.n	8003730 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003728:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003734:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800373c:	d106      	bne.n	800374c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003742:	f023 0206 	bic.w	r2, r3, #6
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	665a      	str	r2, [r3, #100]	@ 0x64
 800374a:	e002      	b.n	8003752 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	221c      	movs	r2, #28
 8003758:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a2b      	ldr	r2, [pc, #172]	@ (8003814 <HAL_ADC_Start+0x184>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d002      	beq.n	8003772 <HAL_ADC_Start+0xe2>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	e000      	b.n	8003774 <HAL_ADC_Start+0xe4>
 8003772:	4b27      	ldr	r3, [pc, #156]	@ (8003810 <HAL_ADC_Start+0x180>)
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	4293      	cmp	r3, r2
 800377a:	d008      	beq.n	800378e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b05      	cmp	r3, #5
 8003786:	d002      	beq.n	800378e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b09      	cmp	r3, #9
 800378c:	d114      	bne.n	80037b8 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80037a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fd01 	bl	80031b8 <LL_ADC_REG_StartConversion>
 80037b6:	e025      	b.n	8003804 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037bc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a12      	ldr	r2, [pc, #72]	@ (8003814 <HAL_ADC_Start+0x184>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d002      	beq.n	80037d4 <HAL_ADC_Start+0x144>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	e000      	b.n	80037d6 <HAL_ADC_Start+0x146>
 80037d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003810 <HAL_ADC_Start+0x180>)
 80037d6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00f      	beq.n	8003804 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80037ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	661a      	str	r2, [r3, #96]	@ 0x60
 80037f4:	e006      	b.n	8003804 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80037fe:	e001      	b.n	8003804 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003800:	2302      	movs	r3, #2
 8003802:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003804:	7dfb      	ldrb	r3, [r7, #23]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40022000 	.word	0x40022000
 8003814:	40022100 	.word	0x40022100
 8003818:	40022300 	.word	0x40022300
 800381c:	58026300 	.word	0x58026300
 8003820:	fffff0fe 	.word	0xfffff0fe

08003824 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_ADC_Stop+0x16>
 8003836:	2302      	movs	r3, #2
 8003838:	e021      	b.n	800387e <HAL_ADC_Stop+0x5a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003842:	2103      	movs	r1, #3
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fdf7 	bl	8004438 <ADC_ConversionStop>
 800384a:	4603      	mov	r3, r0
 800384c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10f      	bne.n	8003874 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 ff35 	bl	80046c4 <ADC_Disable>
 800385a:	4603      	mov	r3, r0
 800385c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d107      	bne.n	8003874 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003868:	4b07      	ldr	r3, [pc, #28]	@ (8003888 <HAL_ADC_Stop+0x64>)
 800386a:	4013      	ands	r3, r2
 800386c:	f043 0201 	orr.w	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800387c:	7bfb      	ldrb	r3, [r7, #15]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	ffffeefe 	.word	0xffffeefe

0800388c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a72      	ldr	r2, [pc, #456]	@ (8003a64 <HAL_ADC_PollForConversion+0x1d8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <HAL_ADC_PollForConversion+0x1e>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a70      	ldr	r2, [pc, #448]	@ (8003a68 <HAL_ADC_PollForConversion+0x1dc>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <HAL_ADC_PollForConversion+0x22>
 80038aa:	4b70      	ldr	r3, [pc, #448]	@ (8003a6c <HAL_ADC_PollForConversion+0x1e0>)
 80038ac:	e000      	b.n	80038b0 <HAL_ADC_PollForConversion+0x24>
 80038ae:	4b70      	ldr	r3, [pc, #448]	@ (8003a70 <HAL_ADC_PollForConversion+0x1e4>)
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fbc9 	bl	8003048 <LL_ADC_GetMultimode>
 80038b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d102      	bne.n	80038c6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80038c0:	2308      	movs	r3, #8
 80038c2:	61fb      	str	r3, [r7, #28]
 80038c4:	e037      	b.n	8003936 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b05      	cmp	r3, #5
 80038d0:	d002      	beq.n	80038d8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b09      	cmp	r3, #9
 80038d6:	d111      	bne.n	80038fc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ea:	f043 0220 	orr.w	r2, r3, #32
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0b1      	b.n	8003a5a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80038f6:	2304      	movs	r3, #4
 80038f8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80038fa:	e01c      	b.n	8003936 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a58      	ldr	r2, [pc, #352]	@ (8003a64 <HAL_ADC_PollForConversion+0x1d8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d004      	beq.n	8003910 <HAL_ADC_PollForConversion+0x84>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a57      	ldr	r2, [pc, #348]	@ (8003a68 <HAL_ADC_PollForConversion+0x1dc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d101      	bne.n	8003914 <HAL_ADC_PollForConversion+0x88>
 8003910:	4b56      	ldr	r3, [pc, #344]	@ (8003a6c <HAL_ADC_PollForConversion+0x1e0>)
 8003912:	e000      	b.n	8003916 <HAL_ADC_PollForConversion+0x8a>
 8003914:	4b56      	ldr	r3, [pc, #344]	@ (8003a70 <HAL_ADC_PollForConversion+0x1e4>)
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff fba4 	bl	8003064 <LL_ADC_GetMultiDMATransfer>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003926:	f043 0220 	orr.w	r2, r3, #32
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e093      	b.n	8003a5a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003932:	2304      	movs	r3, #4
 8003934:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003936:	f7ff f971 	bl	8002c1c <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800393c:	e021      	b.n	8003982 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d01d      	beq.n	8003982 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003946:	f7ff f969 	bl	8002c1c <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d302      	bcc.n	800395c <HAL_ADC_PollForConversion+0xd0>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d112      	bne.n	8003982 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	4013      	ands	r3, r2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10b      	bne.n	8003982 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396e:	f043 0204 	orr.w	r2, r3, #4
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e06b      	b.n	8003a5a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0d6      	beq.n	800393e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003994:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff faa7 	bl	8002ef4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d01c      	beq.n	80039e6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	7e5b      	ldrb	r3, [r3, #25]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d118      	bne.n	80039e6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d111      	bne.n	80039e6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d105      	bne.n	80039e6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039de:	f043 0201 	orr.w	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003a68 <HAL_ADC_PollForConversion+0x1dc>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d002      	beq.n	80039f6 <HAL_ADC_PollForConversion+0x16a>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	e000      	b.n	80039f8 <HAL_ADC_PollForConversion+0x16c>
 80039f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a64 <HAL_ADC_PollForConversion+0x1d8>)
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d008      	beq.n	8003a12 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2b05      	cmp	r3, #5
 8003a0a:	d002      	beq.n	8003a12 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2b09      	cmp	r3, #9
 8003a10:	d104      	bne.n	8003a1c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	e00c      	b.n	8003a36 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a11      	ldr	r2, [pc, #68]	@ (8003a68 <HAL_ADC_PollForConversion+0x1dc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d002      	beq.n	8003a2c <HAL_ADC_PollForConversion+0x1a0>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	e000      	b.n	8003a2e <HAL_ADC_PollForConversion+0x1a2>
 8003a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a64 <HAL_ADC_PollForConversion+0x1d8>)
 8003a2e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d104      	bne.n	8003a46 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2208      	movs	r2, #8
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	e008      	b.n	8003a58 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d103      	bne.n	8003a58 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	220c      	movs	r2, #12
 8003a56:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3720      	adds	r7, #32
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40022000 	.word	0x40022000
 8003a68:	40022100 	.word	0x40022100
 8003a6c:	40022300 	.word	0x40022300
 8003a70:	58026300 	.word	0x58026300

08003a74 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b0a5      	sub	sp, #148	@ 0x94
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003aaa:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4aa4      	ldr	r2, [pc, #656]	@ (8003d44 <HAL_ADC_ConfigChannel+0x2b4>)
 8003ab2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d102      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x34>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	f000 bca2 	b.w	8004408 <HAL_ADC_ConfigChannel+0x978>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff fb99 	bl	8003208 <LL_ADC_REG_IsConversionOngoing>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f040 8486 	bne.w	80043ea <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	db31      	blt.n	8003b4a <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a97      	ldr	r2, [pc, #604]	@ (8003d48 <HAL_ADC_ConfigChannel+0x2b8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d02c      	beq.n	8003b4a <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d108      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x7e>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	0e9b      	lsrs	r3, r3, #26
 8003b02:	f003 031f 	and.w	r3, r3, #31
 8003b06:	2201      	movs	r2, #1
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	e016      	b.n	8003b3c <HAL_ADC_ConfigChannel+0xac>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003b1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b1e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003b20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8003b26:	2320      	movs	r3, #32
 8003b28:	e003      	b.n	8003b32 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8003b2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b2c:	fab3 f383 	clz	r3, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	2201      	movs	r2, #1
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	69d1      	ldr	r1, [r2, #28]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	430b      	orrs	r3, r1
 8003b48:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	6859      	ldr	r1, [r3, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f7ff f9df 	bl	8002f1a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff fb51 	bl	8003208 <LL_ADC_REG_IsConversionOngoing>
 8003b66:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff fb72 	bl	8003258 <LL_ADC_INJ_IsConversionOngoing>
 8003b74:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f040 824a 	bne.w	8004016 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f040 8245 	bne.w	8004016 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	6819      	ldr	r1, [r3, #0]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f7ff f9ea 	bl	8002f72 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a69      	ldr	r2, [pc, #420]	@ (8003d48 <HAL_ADC_ConfigChannel+0x2b8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d10d      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	08db      	lsrs	r3, r3, #3
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003bc2:	e032      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003bc4:	4b61      	ldr	r3, [pc, #388]	@ (8003d4c <HAL_ADC_ConfigChannel+0x2bc>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003bcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bd0:	d10b      	bne.n	8003bea <HAL_ADC_ConfigChannel+0x15a>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	695a      	ldr	r2, [r3, #20]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	089b      	lsrs	r3, r3, #2
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	e01d      	b.n	8003c26 <HAL_ADC_ConfigChannel+0x196>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x180>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	e00a      	b.n	8003c26 <HAL_ADC_ConfigChannel+0x196>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	695a      	ldr	r2, [r3, #20]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	089b      	lsrs	r3, r3, #2
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d048      	beq.n	8003cc4 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	6919      	ldr	r1, [r3, #16]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c42:	f7ff f865 	bl	8002d10 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a3f      	ldr	r2, [pc, #252]	@ (8003d48 <HAL_ADC_ConfigChannel+0x2b8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d119      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	6919      	ldr	r1, [r3, #16]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	f7ff f8fd 	bl	8002e5c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6919      	ldr	r1, [r3, #16]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d102      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x1ea>
 8003c74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c78:	e000      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x1ec>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f7ff f8cb 	bl	8002e18 <LL_ADC_SetOffsetSaturation>
 8003c82:	e1c8      	b.n	8004016 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	6919      	ldr	r1, [r3, #16]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d102      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x20c>
 8003c96:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003c9a:	e000      	b.n	8003c9e <HAL_ADC_ConfigChannel+0x20e>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f7ff f898 	bl	8002dd4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6919      	ldr	r1, [r3, #16]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	7e1b      	ldrb	r3, [r3, #24]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d102      	bne.n	8003cba <HAL_ADC_ConfigChannel+0x22a>
 8003cb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003cb8:	e000      	b.n	8003cbc <HAL_ADC_ConfigChannel+0x22c>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	f7ff f86f 	bl	8002da0 <LL_ADC_SetDataRightShift>
 8003cc2:	e1a8      	b.n	8004016 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1f      	ldr	r2, [pc, #124]	@ (8003d48 <HAL_ADC_ConfigChannel+0x2b8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	f040 815b 	bne.w	8003f86 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff f84c 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10a      	bne.n	8003cfc <HAL_ADC_ConfigChannel+0x26c>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2100      	movs	r1, #0
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff f841 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	0e9b      	lsrs	r3, r3, #26
 8003cf6:	f003 021f 	and.w	r2, r3, #31
 8003cfa:	e017      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x29c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2100      	movs	r1, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff f836 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d0e:	fa93 f3a3 	rbit	r3, r3
 8003d12:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003d14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d16:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003d1e:	2320      	movs	r3, #32
 8003d20:	e003      	b.n	8003d2a <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8003d22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d24:	fab3 f383 	clz	r3, r3
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10b      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x2c0>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	0e9b      	lsrs	r3, r3, #26
 8003d3e:	f003 031f 	and.w	r3, r3, #31
 8003d42:	e017      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x2e4>
 8003d44:	47ff0000 	.word	0x47ff0000
 8003d48:	58026000 	.word	0x58026000
 8003d4c:	5c001000 	.word	0x5c001000
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d58:	fa93 f3a3 	rbit	r3, r3
 8003d5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003d5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d60:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003d62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8003d68:	2320      	movs	r3, #32
 8003d6a:	e003      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003d6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d6e:	fab3 f383 	clz	r3, r3
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d106      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2100      	movs	r1, #0
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff f88d 	bl	8002ea0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe fff1 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x322>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2101      	movs	r1, #1
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe ffe6 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003da8:	4603      	mov	r3, r0
 8003daa:	0e9b      	lsrs	r3, r3, #26
 8003dac:	f003 021f 	and.w	r2, r3, #31
 8003db0:	e017      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x352>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2101      	movs	r1, #1
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe ffdb 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dc4:	fa93 f3a3 	rbit	r3, r3
 8003dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dcc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8003dd4:	2320      	movs	r3, #32
 8003dd6:	e003      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8003dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dda:	fab3 f383 	clz	r3, r3
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d105      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x36a>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	0e9b      	lsrs	r3, r3, #26
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	e011      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x38e>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e02:	fa93 f3a3 	rbit	r3, r3
 8003e06:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003e08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003e0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003e12:	2320      	movs	r3, #32
 8003e14:	e003      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e18:	fab3 f383 	clz	r3, r3
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d106      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2200      	movs	r2, #0
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff f838 	bl	8002ea0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2102      	movs	r1, #2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe ff9c 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x3cc>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe ff91 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003e52:	4603      	mov	r3, r0
 8003e54:	0e9b      	lsrs	r3, r3, #26
 8003e56:	f003 021f 	and.w	r2, r3, #31
 8003e5a:	e017      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x3fc>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2102      	movs	r1, #2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fe ff86 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6e:	fa93 f3a3 	rbit	r3, r3
 8003e72:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003e7e:	2320      	movs	r3, #32
 8003e80:	e003      	b.n	8003e8a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e84:	fab3 f383 	clz	r3, r3
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x414>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	0e9b      	lsrs	r3, r3, #26
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	e011      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x438>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eac:	fa93 f3a3 	rbit	r3, r3
 8003eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003ebc:	2320      	movs	r3, #32
 8003ebe:	e003      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec2:	fab3 f383 	clz	r3, r3
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d106      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe ffe3 	bl	8002ea0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2103      	movs	r1, #3
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fe ff47 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x476>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2103      	movs	r1, #3
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe ff3c 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003efc:	4603      	mov	r3, r0
 8003efe:	0e9b      	lsrs	r3, r3, #26
 8003f00:	f003 021f 	and.w	r2, r3, #31
 8003f04:	e017      	b.n	8003f36 <HAL_ADC_ConfigChannel+0x4a6>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2103      	movs	r1, #3
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe ff31 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003f12:	4603      	mov	r3, r0
 8003f14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	fa93 f3a3 	rbit	r3, r3
 8003f1c:	61fb      	str	r3, [r7, #28]
  return result;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003f28:	2320      	movs	r3, #32
 8003f2a:	e003      	b.n	8003f34 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d105      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x4be>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	0e9b      	lsrs	r3, r3, #26
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	e011      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x4e2>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	fa93 f3a3 	rbit	r3, r3
 8003f5a:	613b      	str	r3, [r7, #16]
  return result;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8003f66:	2320      	movs	r3, #32
 8003f68:	e003      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	fab3 f383 	clz	r3, r3
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d14f      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2103      	movs	r1, #3
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe ff8e 	bl	8002ea0 <LL_ADC_SetOffsetState>
 8003f84:	e047      	b.n	8004016 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	069b      	lsls	r3, r3, #26
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d107      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003fa8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fb0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	069b      	lsls	r3, r3, #26
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d107      	bne.n	8003fce <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003fcc:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fd4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	069b      	lsls	r3, r3, #26
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d107      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ff0:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ff8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	069b      	lsls	r3, r3, #26
 8004002:	429a      	cmp	r2, r3
 8004004:	d107      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004014:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff f8a6 	bl	800316c <LL_ADC_IsEnabled>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	f040 81ea 	bne.w	80043fc <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	6819      	ldr	r1, [r3, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	461a      	mov	r2, r3
 8004036:	f7fe ffc7 	bl	8002fc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	4a7a      	ldr	r2, [pc, #488]	@ (8004228 <HAL_ADC_ConfigChannel+0x798>)
 8004040:	4293      	cmp	r3, r2
 8004042:	f040 80e0 	bne.w	8004206 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4977      	ldr	r1, [pc, #476]	@ (800422c <HAL_ADC_ConfigChannel+0x79c>)
 8004050:	428b      	cmp	r3, r1
 8004052:	d147      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x654>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4975      	ldr	r1, [pc, #468]	@ (8004230 <HAL_ADC_ConfigChannel+0x7a0>)
 800405a:	428b      	cmp	r3, r1
 800405c:	d040      	beq.n	80040e0 <HAL_ADC_ConfigChannel+0x650>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4974      	ldr	r1, [pc, #464]	@ (8004234 <HAL_ADC_ConfigChannel+0x7a4>)
 8004064:	428b      	cmp	r3, r1
 8004066:	d039      	beq.n	80040dc <HAL_ADC_ConfigChannel+0x64c>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4972      	ldr	r1, [pc, #456]	@ (8004238 <HAL_ADC_ConfigChannel+0x7a8>)
 800406e:	428b      	cmp	r3, r1
 8004070:	d032      	beq.n	80040d8 <HAL_ADC_ConfigChannel+0x648>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4971      	ldr	r1, [pc, #452]	@ (800423c <HAL_ADC_ConfigChannel+0x7ac>)
 8004078:	428b      	cmp	r3, r1
 800407a:	d02b      	beq.n	80040d4 <HAL_ADC_ConfigChannel+0x644>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	496f      	ldr	r1, [pc, #444]	@ (8004240 <HAL_ADC_ConfigChannel+0x7b0>)
 8004082:	428b      	cmp	r3, r1
 8004084:	d024      	beq.n	80040d0 <HAL_ADC_ConfigChannel+0x640>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	496e      	ldr	r1, [pc, #440]	@ (8004244 <HAL_ADC_ConfigChannel+0x7b4>)
 800408c:	428b      	cmp	r3, r1
 800408e:	d01d      	beq.n	80040cc <HAL_ADC_ConfigChannel+0x63c>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	496c      	ldr	r1, [pc, #432]	@ (8004248 <HAL_ADC_ConfigChannel+0x7b8>)
 8004096:	428b      	cmp	r3, r1
 8004098:	d016      	beq.n	80040c8 <HAL_ADC_ConfigChannel+0x638>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	496b      	ldr	r1, [pc, #428]	@ (800424c <HAL_ADC_ConfigChannel+0x7bc>)
 80040a0:	428b      	cmp	r3, r1
 80040a2:	d00f      	beq.n	80040c4 <HAL_ADC_ConfigChannel+0x634>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4969      	ldr	r1, [pc, #420]	@ (8004250 <HAL_ADC_ConfigChannel+0x7c0>)
 80040aa:	428b      	cmp	r3, r1
 80040ac:	d008      	beq.n	80040c0 <HAL_ADC_ConfigChannel+0x630>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4968      	ldr	r1, [pc, #416]	@ (8004254 <HAL_ADC_ConfigChannel+0x7c4>)
 80040b4:	428b      	cmp	r3, r1
 80040b6:	d101      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x62c>
 80040b8:	4b67      	ldr	r3, [pc, #412]	@ (8004258 <HAL_ADC_ConfigChannel+0x7c8>)
 80040ba:	e0a0      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80040bc:	2300      	movs	r3, #0
 80040be:	e09e      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80040c0:	4b66      	ldr	r3, [pc, #408]	@ (800425c <HAL_ADC_ConfigChannel+0x7cc>)
 80040c2:	e09c      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80040c4:	4b66      	ldr	r3, [pc, #408]	@ (8004260 <HAL_ADC_ConfigChannel+0x7d0>)
 80040c6:	e09a      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80040c8:	4b60      	ldr	r3, [pc, #384]	@ (800424c <HAL_ADC_ConfigChannel+0x7bc>)
 80040ca:	e098      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80040cc:	4b5e      	ldr	r3, [pc, #376]	@ (8004248 <HAL_ADC_ConfigChannel+0x7b8>)
 80040ce:	e096      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80040d0:	4b64      	ldr	r3, [pc, #400]	@ (8004264 <HAL_ADC_ConfigChannel+0x7d4>)
 80040d2:	e094      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80040d4:	4b64      	ldr	r3, [pc, #400]	@ (8004268 <HAL_ADC_ConfigChannel+0x7d8>)
 80040d6:	e092      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80040d8:	4b64      	ldr	r3, [pc, #400]	@ (800426c <HAL_ADC_ConfigChannel+0x7dc>)
 80040da:	e090      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80040dc:	4b64      	ldr	r3, [pc, #400]	@ (8004270 <HAL_ADC_ConfigChannel+0x7e0>)
 80040de:	e08e      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80040e0:	2301      	movs	r3, #1
 80040e2:	e08c      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4962      	ldr	r1, [pc, #392]	@ (8004274 <HAL_ADC_ConfigChannel+0x7e4>)
 80040ea:	428b      	cmp	r3, r1
 80040ec:	d140      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x6e0>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	494f      	ldr	r1, [pc, #316]	@ (8004230 <HAL_ADC_ConfigChannel+0x7a0>)
 80040f4:	428b      	cmp	r3, r1
 80040f6:	d039      	beq.n	800416c <HAL_ADC_ConfigChannel+0x6dc>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	494d      	ldr	r1, [pc, #308]	@ (8004234 <HAL_ADC_ConfigChannel+0x7a4>)
 80040fe:	428b      	cmp	r3, r1
 8004100:	d032      	beq.n	8004168 <HAL_ADC_ConfigChannel+0x6d8>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	494c      	ldr	r1, [pc, #304]	@ (8004238 <HAL_ADC_ConfigChannel+0x7a8>)
 8004108:	428b      	cmp	r3, r1
 800410a:	d02b      	beq.n	8004164 <HAL_ADC_ConfigChannel+0x6d4>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	494a      	ldr	r1, [pc, #296]	@ (800423c <HAL_ADC_ConfigChannel+0x7ac>)
 8004112:	428b      	cmp	r3, r1
 8004114:	d024      	beq.n	8004160 <HAL_ADC_ConfigChannel+0x6d0>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4949      	ldr	r1, [pc, #292]	@ (8004240 <HAL_ADC_ConfigChannel+0x7b0>)
 800411c:	428b      	cmp	r3, r1
 800411e:	d01d      	beq.n	800415c <HAL_ADC_ConfigChannel+0x6cc>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4947      	ldr	r1, [pc, #284]	@ (8004244 <HAL_ADC_ConfigChannel+0x7b4>)
 8004126:	428b      	cmp	r3, r1
 8004128:	d016      	beq.n	8004158 <HAL_ADC_ConfigChannel+0x6c8>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4946      	ldr	r1, [pc, #280]	@ (8004248 <HAL_ADC_ConfigChannel+0x7b8>)
 8004130:	428b      	cmp	r3, r1
 8004132:	d00f      	beq.n	8004154 <HAL_ADC_ConfigChannel+0x6c4>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4944      	ldr	r1, [pc, #272]	@ (800424c <HAL_ADC_ConfigChannel+0x7bc>)
 800413a:	428b      	cmp	r3, r1
 800413c:	d008      	beq.n	8004150 <HAL_ADC_ConfigChannel+0x6c0>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4944      	ldr	r1, [pc, #272]	@ (8004254 <HAL_ADC_ConfigChannel+0x7c4>)
 8004144:	428b      	cmp	r3, r1
 8004146:	d101      	bne.n	800414c <HAL_ADC_ConfigChannel+0x6bc>
 8004148:	4b43      	ldr	r3, [pc, #268]	@ (8004258 <HAL_ADC_ConfigChannel+0x7c8>)
 800414a:	e058      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 800414c:	2300      	movs	r3, #0
 800414e:	e056      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 8004150:	4b43      	ldr	r3, [pc, #268]	@ (8004260 <HAL_ADC_ConfigChannel+0x7d0>)
 8004152:	e054      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 8004154:	4b3d      	ldr	r3, [pc, #244]	@ (800424c <HAL_ADC_ConfigChannel+0x7bc>)
 8004156:	e052      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 8004158:	4b3b      	ldr	r3, [pc, #236]	@ (8004248 <HAL_ADC_ConfigChannel+0x7b8>)
 800415a:	e050      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 800415c:	4b41      	ldr	r3, [pc, #260]	@ (8004264 <HAL_ADC_ConfigChannel+0x7d4>)
 800415e:	e04e      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 8004160:	4b41      	ldr	r3, [pc, #260]	@ (8004268 <HAL_ADC_ConfigChannel+0x7d8>)
 8004162:	e04c      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 8004164:	4b41      	ldr	r3, [pc, #260]	@ (800426c <HAL_ADC_ConfigChannel+0x7dc>)
 8004166:	e04a      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 8004168:	4b41      	ldr	r3, [pc, #260]	@ (8004270 <HAL_ADC_ConfigChannel+0x7e0>)
 800416a:	e048      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 800416c:	2301      	movs	r3, #1
 800416e:	e046      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4940      	ldr	r1, [pc, #256]	@ (8004278 <HAL_ADC_ConfigChannel+0x7e8>)
 8004176:	428b      	cmp	r3, r1
 8004178:	d140      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x76c>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	492c      	ldr	r1, [pc, #176]	@ (8004230 <HAL_ADC_ConfigChannel+0x7a0>)
 8004180:	428b      	cmp	r3, r1
 8004182:	d039      	beq.n	80041f8 <HAL_ADC_ConfigChannel+0x768>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	492a      	ldr	r1, [pc, #168]	@ (8004234 <HAL_ADC_ConfigChannel+0x7a4>)
 800418a:	428b      	cmp	r3, r1
 800418c:	d032      	beq.n	80041f4 <HAL_ADC_ConfigChannel+0x764>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4929      	ldr	r1, [pc, #164]	@ (8004238 <HAL_ADC_ConfigChannel+0x7a8>)
 8004194:	428b      	cmp	r3, r1
 8004196:	d02b      	beq.n	80041f0 <HAL_ADC_ConfigChannel+0x760>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4927      	ldr	r1, [pc, #156]	@ (800423c <HAL_ADC_ConfigChannel+0x7ac>)
 800419e:	428b      	cmp	r3, r1
 80041a0:	d024      	beq.n	80041ec <HAL_ADC_ConfigChannel+0x75c>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4926      	ldr	r1, [pc, #152]	@ (8004240 <HAL_ADC_ConfigChannel+0x7b0>)
 80041a8:	428b      	cmp	r3, r1
 80041aa:	d01d      	beq.n	80041e8 <HAL_ADC_ConfigChannel+0x758>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4924      	ldr	r1, [pc, #144]	@ (8004244 <HAL_ADC_ConfigChannel+0x7b4>)
 80041b2:	428b      	cmp	r3, r1
 80041b4:	d016      	beq.n	80041e4 <HAL_ADC_ConfigChannel+0x754>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4923      	ldr	r1, [pc, #140]	@ (8004248 <HAL_ADC_ConfigChannel+0x7b8>)
 80041bc:	428b      	cmp	r3, r1
 80041be:	d00f      	beq.n	80041e0 <HAL_ADC_ConfigChannel+0x750>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4926      	ldr	r1, [pc, #152]	@ (8004260 <HAL_ADC_ConfigChannel+0x7d0>)
 80041c6:	428b      	cmp	r3, r1
 80041c8:	d008      	beq.n	80041dc <HAL_ADC_ConfigChannel+0x74c>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	492b      	ldr	r1, [pc, #172]	@ (800427c <HAL_ADC_ConfigChannel+0x7ec>)
 80041d0:	428b      	cmp	r3, r1
 80041d2:	d101      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x748>
 80041d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004280 <HAL_ADC_ConfigChannel+0x7f0>)
 80041d6:	e012      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80041d8:	2300      	movs	r3, #0
 80041da:	e010      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80041dc:	4b27      	ldr	r3, [pc, #156]	@ (800427c <HAL_ADC_ConfigChannel+0x7ec>)
 80041de:	e00e      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80041e0:	4b1a      	ldr	r3, [pc, #104]	@ (800424c <HAL_ADC_ConfigChannel+0x7bc>)
 80041e2:	e00c      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80041e4:	4b18      	ldr	r3, [pc, #96]	@ (8004248 <HAL_ADC_ConfigChannel+0x7b8>)
 80041e6:	e00a      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80041e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004264 <HAL_ADC_ConfigChannel+0x7d4>)
 80041ea:	e008      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80041ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004268 <HAL_ADC_ConfigChannel+0x7d8>)
 80041ee:	e006      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80041f0:	4b1e      	ldr	r3, [pc, #120]	@ (800426c <HAL_ADC_ConfigChannel+0x7dc>)
 80041f2:	e004      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80041f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004270 <HAL_ADC_ConfigChannel+0x7e0>)
 80041f6:	e002      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <HAL_ADC_ConfigChannel+0x76e>
 80041fc:	2300      	movs	r3, #0
 80041fe:	4619      	mov	r1, r3
 8004200:	4610      	mov	r0, r2
 8004202:	f7fe fd4b 	bl	8002c9c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	f280 80f6 	bge.w	80043fc <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a05      	ldr	r2, [pc, #20]	@ (800422c <HAL_ADC_ConfigChannel+0x79c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d004      	beq.n	8004224 <HAL_ADC_ConfigChannel+0x794>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a15      	ldr	r2, [pc, #84]	@ (8004274 <HAL_ADC_ConfigChannel+0x7e4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d131      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x7f8>
 8004224:	4b17      	ldr	r3, [pc, #92]	@ (8004284 <HAL_ADC_ConfigChannel+0x7f4>)
 8004226:	e030      	b.n	800428a <HAL_ADC_ConfigChannel+0x7fa>
 8004228:	47ff0000 	.word	0x47ff0000
 800422c:	40022000 	.word	0x40022000
 8004230:	04300002 	.word	0x04300002
 8004234:	08600004 	.word	0x08600004
 8004238:	0c900008 	.word	0x0c900008
 800423c:	10c00010 	.word	0x10c00010
 8004240:	14f00020 	.word	0x14f00020
 8004244:	2a000400 	.word	0x2a000400
 8004248:	2e300800 	.word	0x2e300800
 800424c:	32601000 	.word	0x32601000
 8004250:	43210000 	.word	0x43210000
 8004254:	4b840000 	.word	0x4b840000
 8004258:	4fb80000 	.word	0x4fb80000
 800425c:	47520000 	.word	0x47520000
 8004260:	36902000 	.word	0x36902000
 8004264:	25b00200 	.word	0x25b00200
 8004268:	21800100 	.word	0x21800100
 800426c:	1d500080 	.word	0x1d500080
 8004270:	19200040 	.word	0x19200040
 8004274:	40022100 	.word	0x40022100
 8004278:	58026000 	.word	0x58026000
 800427c:	3ac04000 	.word	0x3ac04000
 8004280:	3ef08000 	.word	0x3ef08000
 8004284:	40022300 	.word	0x40022300
 8004288:	4b61      	ldr	r3, [pc, #388]	@ (8004410 <HAL_ADC_ConfigChannel+0x980>)
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe fcf8 	bl	8002c80 <LL_ADC_GetCommonPathInternalCh>
 8004290:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a5f      	ldr	r2, [pc, #380]	@ (8004414 <HAL_ADC_ConfigChannel+0x984>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d004      	beq.n	80042a6 <HAL_ADC_ConfigChannel+0x816>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a5d      	ldr	r2, [pc, #372]	@ (8004418 <HAL_ADC_ConfigChannel+0x988>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d10e      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x834>
 80042a6:	485b      	ldr	r0, [pc, #364]	@ (8004414 <HAL_ADC_ConfigChannel+0x984>)
 80042a8:	f7fe ff60 	bl	800316c <LL_ADC_IsEnabled>
 80042ac:	4604      	mov	r4, r0
 80042ae:	485a      	ldr	r0, [pc, #360]	@ (8004418 <HAL_ADC_ConfigChannel+0x988>)
 80042b0:	f7fe ff5c 	bl	800316c <LL_ADC_IsEnabled>
 80042b4:	4603      	mov	r3, r0
 80042b6:	4323      	orrs	r3, r4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bf0c      	ite	eq
 80042bc:	2301      	moveq	r3, #1
 80042be:	2300      	movne	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	e008      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x846>
 80042c4:	4855      	ldr	r0, [pc, #340]	@ (800441c <HAL_ADC_ConfigChannel+0x98c>)
 80042c6:	f7fe ff51 	bl	800316c <LL_ADC_IsEnabled>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d07d      	beq.n	80043d6 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a50      	ldr	r2, [pc, #320]	@ (8004420 <HAL_ADC_ConfigChannel+0x990>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d130      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x8b6>
 80042e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d12b      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a4a      	ldr	r2, [pc, #296]	@ (800441c <HAL_ADC_ConfigChannel+0x98c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	f040 8081 	bne.w	80043fc <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a45      	ldr	r2, [pc, #276]	@ (8004414 <HAL_ADC_ConfigChannel+0x984>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_ADC_ConfigChannel+0x87e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a43      	ldr	r2, [pc, #268]	@ (8004418 <HAL_ADC_ConfigChannel+0x988>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d101      	bne.n	8004312 <HAL_ADC_ConfigChannel+0x882>
 800430e:	4a45      	ldr	r2, [pc, #276]	@ (8004424 <HAL_ADC_ConfigChannel+0x994>)
 8004310:	e000      	b.n	8004314 <HAL_ADC_ConfigChannel+0x884>
 8004312:	4a3f      	ldr	r2, [pc, #252]	@ (8004410 <HAL_ADC_ConfigChannel+0x980>)
 8004314:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004316:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800431a:	4619      	mov	r1, r3
 800431c:	4610      	mov	r0, r2
 800431e:	f7fe fc9c 	bl	8002c5a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004322:	4b41      	ldr	r3, [pc, #260]	@ (8004428 <HAL_ADC_ConfigChannel+0x998>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	099b      	lsrs	r3, r3, #6
 8004328:	4a40      	ldr	r2, [pc, #256]	@ (800442c <HAL_ADC_ConfigChannel+0x99c>)
 800432a:	fba2 2303 	umull	r2, r3, r2, r3
 800432e:	099b      	lsrs	r3, r3, #6
 8004330:	3301      	adds	r3, #1
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004336:	e002      	b.n	800433e <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3b01      	subs	r3, #1
 800433c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f9      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004344:	e05a      	b.n	80043fc <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a39      	ldr	r2, [pc, #228]	@ (8004430 <HAL_ADC_ConfigChannel+0x9a0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d11e      	bne.n	800438e <HAL_ADC_ConfigChannel+0x8fe>
 8004350:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004352:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d119      	bne.n	800438e <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a2f      	ldr	r2, [pc, #188]	@ (800441c <HAL_ADC_ConfigChannel+0x98c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d14b      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a2a      	ldr	r2, [pc, #168]	@ (8004414 <HAL_ADC_ConfigChannel+0x984>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <HAL_ADC_ConfigChannel+0x8e8>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a29      	ldr	r2, [pc, #164]	@ (8004418 <HAL_ADC_ConfigChannel+0x988>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d101      	bne.n	800437c <HAL_ADC_ConfigChannel+0x8ec>
 8004378:	4a2a      	ldr	r2, [pc, #168]	@ (8004424 <HAL_ADC_ConfigChannel+0x994>)
 800437a:	e000      	b.n	800437e <HAL_ADC_ConfigChannel+0x8ee>
 800437c:	4a24      	ldr	r2, [pc, #144]	@ (8004410 <HAL_ADC_ConfigChannel+0x980>)
 800437e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004380:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004384:	4619      	mov	r1, r3
 8004386:	4610      	mov	r0, r2
 8004388:	f7fe fc67 	bl	8002c5a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800438c:	e036      	b.n	80043fc <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a28      	ldr	r2, [pc, #160]	@ (8004434 <HAL_ADC_ConfigChannel+0x9a4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d131      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x96c>
 8004398:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800439a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d12c      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1d      	ldr	r2, [pc, #116]	@ (800441c <HAL_ADC_ConfigChannel+0x98c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d127      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a18      	ldr	r2, [pc, #96]	@ (8004414 <HAL_ADC_ConfigChannel+0x984>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d004      	beq.n	80043c0 <HAL_ADC_ConfigChannel+0x930>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a17      	ldr	r2, [pc, #92]	@ (8004418 <HAL_ADC_ConfigChannel+0x988>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d101      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x934>
 80043c0:	4a18      	ldr	r2, [pc, #96]	@ (8004424 <HAL_ADC_ConfigChannel+0x994>)
 80043c2:	e000      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x936>
 80043c4:	4a12      	ldr	r2, [pc, #72]	@ (8004410 <HAL_ADC_ConfigChannel+0x980>)
 80043c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043cc:	4619      	mov	r1, r3
 80043ce:	4610      	mov	r0, r2
 80043d0:	f7fe fc43 	bl	8002c5a <LL_ADC_SetCommonPathInternalCh>
 80043d4:	e012      	b.n	80043fc <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043da:	f043 0220 	orr.w	r2, r3, #32
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80043e8:	e008      	b.n	80043fc <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ee:	f043 0220 	orr.w	r2, r3, #32
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004404:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8004408:	4618      	mov	r0, r3
 800440a:	3794      	adds	r7, #148	@ 0x94
 800440c:	46bd      	mov	sp, r7
 800440e:	bd90      	pop	{r4, r7, pc}
 8004410:	58026300 	.word	0x58026300
 8004414:	40022000 	.word	0x40022000
 8004418:	40022100 	.word	0x40022100
 800441c:	58026000 	.word	0x58026000
 8004420:	c7520000 	.word	0xc7520000
 8004424:	40022300 	.word	0x40022300
 8004428:	2400000c 	.word	0x2400000c
 800442c:	053e2d63 	.word	0x053e2d63
 8004430:	c3210000 	.word	0xc3210000
 8004434:	cb840000 	.word	0xcb840000

08004438 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004442:	2300      	movs	r3, #0
 8004444:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f7fe feda 	bl	8003208 <LL_ADC_REG_IsConversionOngoing>
 8004454:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe fefc 	bl	8003258 <LL_ADC_INJ_IsConversionOngoing>
 8004460:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d103      	bne.n	8004470 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 8098 	beq.w	80045a0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d02a      	beq.n	80044d4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	7e5b      	ldrb	r3, [r3, #25]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d126      	bne.n	80044d4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	7e1b      	ldrb	r3, [r3, #24]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d122      	bne.n	80044d4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800448e:	2301      	movs	r3, #1
 8004490:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004492:	e014      	b.n	80044be <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	4a45      	ldr	r2, [pc, #276]	@ (80045ac <ADC_ConversionStop+0x174>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d90d      	bls.n	80044b8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a0:	f043 0210 	orr.w	r2, r3, #16
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044ac:	f043 0201 	orr.w	r2, r3, #1
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e074      	b.n	80045a2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	3301      	adds	r3, #1
 80044bc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c8:	2b40      	cmp	r3, #64	@ 0x40
 80044ca:	d1e3      	bne.n	8004494 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2240      	movs	r2, #64	@ 0x40
 80044d2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d014      	beq.n	8004504 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe fe92 	bl	8003208 <LL_ADC_REG_IsConversionOngoing>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00c      	beq.n	8004504 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe fe4f 	bl	8003192 <LL_ADC_IsDisableOngoing>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe fe6e 	bl	80031e0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d014      	beq.n	8004534 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f7fe fea2 	bl	8003258 <LL_ADC_INJ_IsConversionOngoing>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00c      	beq.n	8004534 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe fe37 	bl	8003192 <LL_ADC_IsDisableOngoing>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d104      	bne.n	8004534 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7fe fe7e 	bl	8003230 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d005      	beq.n	8004546 <ADC_ConversionStop+0x10e>
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b03      	cmp	r3, #3
 800453e:	d105      	bne.n	800454c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004540:	230c      	movs	r3, #12
 8004542:	617b      	str	r3, [r7, #20]
        break;
 8004544:	e005      	b.n	8004552 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004546:	2308      	movs	r3, #8
 8004548:	617b      	str	r3, [r7, #20]
        break;
 800454a:	e002      	b.n	8004552 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800454c:	2304      	movs	r3, #4
 800454e:	617b      	str	r3, [r7, #20]
        break;
 8004550:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004552:	f7fe fb63 	bl	8002c1c <HAL_GetTick>
 8004556:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004558:	e01b      	b.n	8004592 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800455a:	f7fe fb5f 	bl	8002c1c <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b05      	cmp	r3, #5
 8004566:	d914      	bls.n	8004592 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	4013      	ands	r3, r2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00d      	beq.n	8004592 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457a:	f043 0210 	orr.w	r2, r3, #16
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004586:	f043 0201 	orr.w	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e007      	b.n	80045a2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	4013      	ands	r3, r2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1dc      	bne.n	800455a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	000cdbff 	.word	0x000cdbff

080045b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fe fdd5 	bl	800316c <LL_ADC_IsEnabled>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d16e      	bne.n	80046a6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	4b38      	ldr	r3, [pc, #224]	@ (80046b0 <ADC_Enable+0x100>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00d      	beq.n	80045f2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045da:	f043 0210 	orr.w	r2, r3, #16
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045e6:	f043 0201 	orr.w	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e05a      	b.n	80046a8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe fd90 	bl	800311c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80045fc:	f7fe fb0e 	bl	8002c1c <HAL_GetTick>
 8004600:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a2b      	ldr	r2, [pc, #172]	@ (80046b4 <ADC_Enable+0x104>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d004      	beq.n	8004616 <ADC_Enable+0x66>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a29      	ldr	r2, [pc, #164]	@ (80046b8 <ADC_Enable+0x108>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d101      	bne.n	800461a <ADC_Enable+0x6a>
 8004616:	4b29      	ldr	r3, [pc, #164]	@ (80046bc <ADC_Enable+0x10c>)
 8004618:	e000      	b.n	800461c <ADC_Enable+0x6c>
 800461a:	4b29      	ldr	r3, [pc, #164]	@ (80046c0 <ADC_Enable+0x110>)
 800461c:	4618      	mov	r0, r3
 800461e:	f7fe fd13 	bl	8003048 <LL_ADC_GetMultimode>
 8004622:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a23      	ldr	r2, [pc, #140]	@ (80046b8 <ADC_Enable+0x108>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d002      	beq.n	8004634 <ADC_Enable+0x84>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	e000      	b.n	8004636 <ADC_Enable+0x86>
 8004634:	4b1f      	ldr	r3, [pc, #124]	@ (80046b4 <ADC_Enable+0x104>)
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6812      	ldr	r2, [r2, #0]
 800463a:	4293      	cmp	r3, r2
 800463c:	d02c      	beq.n	8004698 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d130      	bne.n	80046a6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004644:	e028      	b.n	8004698 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe fd8e 	bl	800316c <LL_ADC_IsEnabled>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d104      	bne.n	8004660 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe fd5e 	bl	800311c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004660:	f7fe fadc 	bl	8002c1c <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d914      	bls.n	8004698 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b01      	cmp	r3, #1
 800467a:	d00d      	beq.n	8004698 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004680:	f043 0210 	orr.w	r2, r3, #16
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800468c:	f043 0201 	orr.w	r2, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e007      	b.n	80046a8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d1cf      	bne.n	8004646 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	8000003f 	.word	0x8000003f
 80046b4:	40022000 	.word	0x40022000
 80046b8:	40022100 	.word	0x40022100
 80046bc:	40022300 	.word	0x40022300
 80046c0:	58026300 	.word	0x58026300

080046c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fe fd5e 	bl	8003192 <LL_ADC_IsDisableOngoing>
 80046d6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fe fd45 	bl	800316c <LL_ADC_IsEnabled>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d047      	beq.n	8004778 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d144      	bne.n	8004778 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 030d 	and.w	r3, r3, #13
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d10c      	bne.n	8004716 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f7fe fd1f 	bl	8003144 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2203      	movs	r2, #3
 800470c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800470e:	f7fe fa85 	bl	8002c1c <HAL_GetTick>
 8004712:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004714:	e029      	b.n	800476a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800471a:	f043 0210 	orr.w	r2, r3, #16
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004726:	f043 0201 	orr.w	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e023      	b.n	800477a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004732:	f7fe fa73 	bl	8002c1c <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d914      	bls.n	800476a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00d      	beq.n	800476a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004752:	f043 0210 	orr.w	r2, r3, #16
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800475e:	f043 0201 	orr.w	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e007      	b.n	800477a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1dc      	bne.n	8004732 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a6c      	ldr	r2, [pc, #432]	@ (8004944 <ADC_ConfigureBoostMode+0x1c0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d004      	beq.n	80047a0 <ADC_ConfigureBoostMode+0x1c>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a6b      	ldr	r2, [pc, #428]	@ (8004948 <ADC_ConfigureBoostMode+0x1c4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d109      	bne.n	80047b4 <ADC_ConfigureBoostMode+0x30>
 80047a0:	4b6a      	ldr	r3, [pc, #424]	@ (800494c <ADC_ConfigureBoostMode+0x1c8>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	bf14      	ite	ne
 80047ac:	2301      	movne	r3, #1
 80047ae:	2300      	moveq	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e008      	b.n	80047c6 <ADC_ConfigureBoostMode+0x42>
 80047b4:	4b66      	ldr	r3, [pc, #408]	@ (8004950 <ADC_ConfigureBoostMode+0x1cc>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	bf14      	ite	ne
 80047c0:	2301      	movne	r3, #1
 80047c2:	2300      	moveq	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d01c      	beq.n	8004804 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80047ca:	f002 fdcd 	bl	8007368 <HAL_RCC_GetHCLKFreq>
 80047ce:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047d8:	d010      	beq.n	80047fc <ADC_ConfigureBoostMode+0x78>
 80047da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047de:	d873      	bhi.n	80048c8 <ADC_ConfigureBoostMode+0x144>
 80047e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047e4:	d002      	beq.n	80047ec <ADC_ConfigureBoostMode+0x68>
 80047e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047ea:	d16d      	bne.n	80048c8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f8:	60fb      	str	r3, [r7, #12]
        break;
 80047fa:	e068      	b.n	80048ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	089b      	lsrs	r3, r3, #2
 8004800:	60fb      	str	r3, [r7, #12]
        break;
 8004802:	e064      	b.n	80048ce <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004804:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004808:	f04f 0100 	mov.w	r1, #0
 800480c:	f003 ffa8 	bl	8008760 <HAL_RCCEx_GetPeriphCLKFreq>
 8004810:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800481a:	d051      	beq.n	80048c0 <ADC_ConfigureBoostMode+0x13c>
 800481c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004820:	d854      	bhi.n	80048cc <ADC_ConfigureBoostMode+0x148>
 8004822:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004826:	d047      	beq.n	80048b8 <ADC_ConfigureBoostMode+0x134>
 8004828:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800482c:	d84e      	bhi.n	80048cc <ADC_ConfigureBoostMode+0x148>
 800482e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004832:	d03d      	beq.n	80048b0 <ADC_ConfigureBoostMode+0x12c>
 8004834:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004838:	d848      	bhi.n	80048cc <ADC_ConfigureBoostMode+0x148>
 800483a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800483e:	d033      	beq.n	80048a8 <ADC_ConfigureBoostMode+0x124>
 8004840:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004844:	d842      	bhi.n	80048cc <ADC_ConfigureBoostMode+0x148>
 8004846:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800484a:	d029      	beq.n	80048a0 <ADC_ConfigureBoostMode+0x11c>
 800484c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004850:	d83c      	bhi.n	80048cc <ADC_ConfigureBoostMode+0x148>
 8004852:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004856:	d01a      	beq.n	800488e <ADC_ConfigureBoostMode+0x10a>
 8004858:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800485c:	d836      	bhi.n	80048cc <ADC_ConfigureBoostMode+0x148>
 800485e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004862:	d014      	beq.n	800488e <ADC_ConfigureBoostMode+0x10a>
 8004864:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004868:	d830      	bhi.n	80048cc <ADC_ConfigureBoostMode+0x148>
 800486a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800486e:	d00e      	beq.n	800488e <ADC_ConfigureBoostMode+0x10a>
 8004870:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004874:	d82a      	bhi.n	80048cc <ADC_ConfigureBoostMode+0x148>
 8004876:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800487a:	d008      	beq.n	800488e <ADC_ConfigureBoostMode+0x10a>
 800487c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004880:	d824      	bhi.n	80048cc <ADC_ConfigureBoostMode+0x148>
 8004882:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004886:	d002      	beq.n	800488e <ADC_ConfigureBoostMode+0x10a>
 8004888:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800488c:	d11e      	bne.n	80048cc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	0c9b      	lsrs	r3, r3, #18
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	60fb      	str	r3, [r7, #12]
        break;
 800489e:	e016      	b.n	80048ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	091b      	lsrs	r3, r3, #4
 80048a4:	60fb      	str	r3, [r7, #12]
        break;
 80048a6:	e012      	b.n	80048ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	60fb      	str	r3, [r7, #12]
        break;
 80048ae:	e00e      	b.n	80048ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	099b      	lsrs	r3, r3, #6
 80048b4:	60fb      	str	r3, [r7, #12]
        break;
 80048b6:	e00a      	b.n	80048ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	09db      	lsrs	r3, r3, #7
 80048bc:	60fb      	str	r3, [r7, #12]
        break;
 80048be:	e006      	b.n	80048ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	0a1b      	lsrs	r3, r3, #8
 80048c4:	60fb      	str	r3, [r7, #12]
        break;
 80048c6:	e002      	b.n	80048ce <ADC_ConfigureBoostMode+0x14a>
        break;
 80048c8:	bf00      	nop
 80048ca:	e000      	b.n	80048ce <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80048cc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004954 <ADC_ConfigureBoostMode+0x1d0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d808      	bhi.n	80048ee <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80048ea:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80048ec:	e025      	b.n	800493a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4a19      	ldr	r2, [pc, #100]	@ (8004958 <ADC_ConfigureBoostMode+0x1d4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d80a      	bhi.n	800490c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004908:	609a      	str	r2, [r3, #8]
}
 800490a:	e016      	b.n	800493a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4a13      	ldr	r2, [pc, #76]	@ (800495c <ADC_ConfigureBoostMode+0x1d8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d80a      	bhi.n	800492a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004926:	609a      	str	r2, [r3, #8]
}
 8004928:	e007      	b.n	800493a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004938:	609a      	str	r2, [r3, #8]
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40022000 	.word	0x40022000
 8004948:	40022100 	.word	0x40022100
 800494c:	40022300 	.word	0x40022300
 8004950:	58026300 	.word	0x58026300
 8004954:	005f5e10 	.word	0x005f5e10
 8004958:	00bebc20 	.word	0x00bebc20
 800495c:	017d7840 	.word	0x017d7840

08004960 <LL_ADC_IsEnabled>:
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <LL_ADC_IsEnabled+0x18>
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <LL_ADC_IsEnabled+0x1a>
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <LL_ADC_REG_IsConversionOngoing>:
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	2b04      	cmp	r3, #4
 8004998:	d101      	bne.n	800499e <LL_ADC_REG_IsConversionOngoing+0x18>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80049ac:	b590      	push	{r4, r7, lr}
 80049ae:	b0a3      	sub	sp, #140	@ 0x8c
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e0c1      	b.n	8004b4e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80049d2:	2300      	movs	r3, #0
 80049d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80049d6:	2300      	movs	r3, #0
 80049d8:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a5e      	ldr	r2, [pc, #376]	@ (8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d102      	bne.n	80049ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049e4:	4b5d      	ldr	r3, [pc, #372]	@ (8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	e001      	b.n	80049ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049f8:	f043 0220 	orr.w	r2, r3, #32
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0a0      	b.n	8004b4e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff ffb9 	bl	8004986 <LL_ADC_REG_IsConversionOngoing>
 8004a14:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff ffb2 	bl	8004986 <LL_ADC_REG_IsConversionOngoing>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f040 8081 	bne.w	8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004a2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d17c      	bne.n	8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a48      	ldr	r2, [pc, #288]	@ (8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d004      	beq.n	8004a46 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a46      	ldr	r2, [pc, #280]	@ (8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d101      	bne.n	8004a4a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004a46:	4b46      	ldr	r3, [pc, #280]	@ (8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004a48:	e000      	b.n	8004a4c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004a4a:	4b46      	ldr	r3, [pc, #280]	@ (8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004a4c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d039      	beq.n	8004aca <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004a56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a66:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a3a      	ldr	r2, [pc, #232]	@ (8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d004      	beq.n	8004a7c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a39      	ldr	r2, [pc, #228]	@ (8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d10e      	bne.n	8004a9a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004a7c:	4836      	ldr	r0, [pc, #216]	@ (8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a7e:	f7ff ff6f 	bl	8004960 <LL_ADC_IsEnabled>
 8004a82:	4604      	mov	r4, r0
 8004a84:	4835      	ldr	r0, [pc, #212]	@ (8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a86:	f7ff ff6b 	bl	8004960 <LL_ADC_IsEnabled>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4323      	orrs	r3, r4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	bf0c      	ite	eq
 8004a92:	2301      	moveq	r3, #1
 8004a94:	2300      	movne	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	e008      	b.n	8004aac <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004a9a:	4833      	ldr	r0, [pc, #204]	@ (8004b68 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004a9c:	f7ff ff60 	bl	8004960 <LL_ADC_IsEnabled>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	bf0c      	ite	eq
 8004aa6:	2301      	moveq	r3, #1
 8004aa8:	2300      	movne	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d047      	beq.n	8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004ab0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8004b6c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	6811      	ldr	r1, [r2, #0]
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	6892      	ldr	r2, [r2, #8]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ac6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ac8:	e03a      	b.n	8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004aca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ad2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ad4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1f      	ldr	r2, [pc, #124]	@ (8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d004      	beq.n	8004aea <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d10e      	bne.n	8004b08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004aea:	481b      	ldr	r0, [pc, #108]	@ (8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004aec:	f7ff ff38 	bl	8004960 <LL_ADC_IsEnabled>
 8004af0:	4604      	mov	r4, r0
 8004af2:	481a      	ldr	r0, [pc, #104]	@ (8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004af4:	f7ff ff34 	bl	8004960 <LL_ADC_IsEnabled>
 8004af8:	4603      	mov	r3, r0
 8004afa:	4323      	orrs	r3, r4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	e008      	b.n	8004b1a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004b08:	4817      	ldr	r0, [pc, #92]	@ (8004b68 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004b0a:	f7ff ff29 	bl	8004960 <LL_ADC_IsEnabled>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bf0c      	ite	eq
 8004b14:	2301      	moveq	r3, #1
 8004b16:	2300      	movne	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d010      	beq.n	8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	4b12      	ldr	r3, [pc, #72]	@ (8004b6c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004b28:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b2a:	e009      	b.n	8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b30:	f043 0220 	orr.w	r2, r3, #32
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004b3e:	e000      	b.n	8004b42 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004b4a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	378c      	adds	r7, #140	@ 0x8c
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd90      	pop	{r4, r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40022000 	.word	0x40022000
 8004b5c:	40022100 	.word	0x40022100
 8004b60:	40022300 	.word	0x40022300
 8004b64:	58026300 	.word	0x58026300
 8004b68:	58026000 	.word	0x58026000
 8004b6c:	fffff0e0 	.word	0xfffff0e0

08004b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b80:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb0 <__NVIC_SetPriorityGrouping+0x40>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b98:	4b06      	ldr	r3, [pc, #24]	@ (8004bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b9e:	4a04      	ldr	r2, [pc, #16]	@ (8004bb0 <__NVIC_SetPriorityGrouping+0x40>)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	60d3      	str	r3, [r2, #12]
}
 8004ba4:	bf00      	nop
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	e000ed00 	.word	0xe000ed00
 8004bb4:	05fa0000 	.word	0x05fa0000

08004bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bbc:	4b04      	ldr	r3, [pc, #16]	@ (8004bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	0a1b      	lsrs	r3, r3, #8
 8004bc2:	f003 0307 	and.w	r3, r3, #7
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	e000ed00 	.word	0xe000ed00

08004bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	db0b      	blt.n	8004bfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004be6:	88fb      	ldrh	r3, [r7, #6]
 8004be8:	f003 021f 	and.w	r2, r3, #31
 8004bec:	4907      	ldr	r1, [pc, #28]	@ (8004c0c <__NVIC_EnableIRQ+0x38>)
 8004bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	2001      	movs	r0, #1
 8004bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	e000e100 	.word	0xe000e100

08004c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	6039      	str	r1, [r7, #0]
 8004c1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	db0a      	blt.n	8004c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	490c      	ldr	r1, [pc, #48]	@ (8004c5c <__NVIC_SetPriority+0x4c>)
 8004c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c2e:	0112      	lsls	r2, r2, #4
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	440b      	add	r3, r1
 8004c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c38:	e00a      	b.n	8004c50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	4908      	ldr	r1, [pc, #32]	@ (8004c60 <__NVIC_SetPriority+0x50>)
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	3b04      	subs	r3, #4
 8004c48:	0112      	lsls	r2, r2, #4
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	761a      	strb	r2, [r3, #24]
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	e000e100 	.word	0xe000e100
 8004c60:	e000ed00 	.word	0xe000ed00

08004c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b089      	sub	sp, #36	@ 0x24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	f1c3 0307 	rsb	r3, r3, #7
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	bf28      	it	cs
 8004c82:	2304      	movcs	r3, #4
 8004c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	2b06      	cmp	r3, #6
 8004c8c:	d902      	bls.n	8004c94 <NVIC_EncodePriority+0x30>
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	3b03      	subs	r3, #3
 8004c92:	e000      	b.n	8004c96 <NVIC_EncodePriority+0x32>
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c98:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43da      	mvns	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	401a      	ands	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cac:	f04f 31ff 	mov.w	r1, #4294967295
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb6:	43d9      	mvns	r1, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cbc:	4313      	orrs	r3, r2
         );
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3724      	adds	r7, #36	@ 0x24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
	...

08004ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cdc:	d301      	bcc.n	8004ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e00f      	b.n	8004d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8004d0c <SysTick_Config+0x40>)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cea:	210f      	movs	r1, #15
 8004cec:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf0:	f7ff ff8e 	bl	8004c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cf4:	4b05      	ldr	r3, [pc, #20]	@ (8004d0c <SysTick_Config+0x40>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cfa:	4b04      	ldr	r3, [pc, #16]	@ (8004d0c <SysTick_Config+0x40>)
 8004cfc:	2207      	movs	r2, #7
 8004cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	e000e010 	.word	0xe000e010

08004d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff ff29 	bl	8004b70 <__NVIC_SetPriorityGrouping>
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b086      	sub	sp, #24
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	607a      	str	r2, [r7, #4]
 8004d32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d34:	f7ff ff40 	bl	8004bb8 <__NVIC_GetPriorityGrouping>
 8004d38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	6978      	ldr	r0, [r7, #20]
 8004d40:	f7ff ff90 	bl	8004c64 <NVIC_EncodePriority>
 8004d44:	4602      	mov	r2, r0
 8004d46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff ff5f 	bl	8004c10 <__NVIC_SetPriority>
}
 8004d52:	bf00      	nop
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	4603      	mov	r3, r0
 8004d62:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff ff33 	bl	8004bd4 <__NVIC_EnableIRQ>
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff ffa4 	bl	8004ccc <SysTick_Config>
 8004d84:	4603      	mov	r3, r0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b098      	sub	sp, #96	@ 0x60
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004d98:	4a84      	ldr	r2, [pc, #528]	@ (8004fac <HAL_FDCAN_Init+0x21c>)
 8004d9a:	f107 030c 	add.w	r3, r7, #12
 8004d9e:	4611      	mov	r1, r2
 8004da0:	224c      	movs	r2, #76	@ 0x4c
 8004da2:	4618      	mov	r0, r3
 8004da4:	f007 f918 	bl	800bfd8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e1c6      	b.n	8005140 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a7e      	ldr	r2, [pc, #504]	@ (8004fb0 <HAL_FDCAN_Init+0x220>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d106      	bne.n	8004dca <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fd fbea 	bl	80025b8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0210 	bic.w	r2, r2, #16
 8004df2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004df4:	f7fd ff12 	bl	8002c1c <HAL_GetTick>
 8004df8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004dfa:	e014      	b.n	8004e26 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004dfc:	f7fd ff0e 	bl	8002c1c <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b0a      	cmp	r3, #10
 8004e08:	d90d      	bls.n	8004e26 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e10:	f043 0201 	orr.w	r2, r3, #1
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2203      	movs	r2, #3
 8004e1e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e18c      	b.n	8005140 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	f003 0308 	and.w	r3, r3, #8
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d0e3      	beq.n	8004dfc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0201 	orr.w	r2, r2, #1
 8004e42:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e44:	f7fd feea 	bl	8002c1c <HAL_GetTick>
 8004e48:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e4a:	e014      	b.n	8004e76 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004e4c:	f7fd fee6 	bl	8002c1c <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b0a      	cmp	r3, #10
 8004e58:	d90d      	bls.n	8004e76 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e60:	f043 0201 	orr.w	r2, r3, #1
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2203      	movs	r2, #3
 8004e6e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e164      	b.n	8005140 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0e3      	beq.n	8004e4c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0202 	orr.w	r2, r2, #2
 8004e92:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	7c1b      	ldrb	r3, [r3, #16]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d108      	bne.n	8004eae <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eaa:	619a      	str	r2, [r3, #24]
 8004eac:	e007      	b.n	8004ebe <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699a      	ldr	r2, [r3, #24]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ebc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	7c5b      	ldrb	r3, [r3, #17]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d108      	bne.n	8004ed8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	699a      	ldr	r2, [r3, #24]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ed4:	619a      	str	r2, [r3, #24]
 8004ed6:	e007      	b.n	8004ee8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ee6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	7c9b      	ldrb	r3, [r3, #18]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d108      	bne.n	8004f02 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004efe:	619a      	str	r2, [r3, #24]
 8004f00:	e007      	b.n	8004f12 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	699a      	ldr	r2, [r3, #24]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f10:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004f36:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0210 	bic.w	r2, r2, #16
 8004f46:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d108      	bne.n	8004f62 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0204 	orr.w	r2, r2, #4
 8004f5e:	619a      	str	r2, [r3, #24]
 8004f60:	e030      	b.n	8004fc4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d02c      	beq.n	8004fc4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d020      	beq.n	8004fb4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699a      	ldr	r2, [r3, #24]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f80:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0210 	orr.w	r2, r2, #16
 8004f90:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d114      	bne.n	8004fc4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699a      	ldr	r2, [r3, #24]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f042 0220 	orr.w	r2, r2, #32
 8004fa8:	619a      	str	r2, [r3, #24]
 8004faa:	e00b      	b.n	8004fc4 <HAL_FDCAN_Init+0x234>
 8004fac:	0800cb90 	.word	0x0800cb90
 8004fb0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0220 	orr.w	r2, r2, #32
 8004fc2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004fd4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004fdc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004fec:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004fee:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ff8:	d115      	bne.n	8005026 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffe:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005004:	3b01      	subs	r3, #1
 8005006:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005008:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500e:	3b01      	subs	r3, #1
 8005010:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005012:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501a:	3b01      	subs	r3, #1
 800501c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005022:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005024:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800504c:	4413      	add	r3, r2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d011      	beq.n	8005076 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800505a:	f023 0107 	bic.w	r1, r3, #7
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	3360      	adds	r3, #96	@ 0x60
 8005066:	443b      	add	r3, r7
 8005068:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d011      	beq.n	80050a2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005086:	f023 0107 	bic.w	r1, r3, #7
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	3360      	adds	r3, #96	@ 0x60
 8005092:	443b      	add	r3, r7
 8005094:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d012      	beq.n	80050d0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80050b2:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	3360      	adds	r3, #96	@ 0x60
 80050be:	443b      	add	r3, r7
 80050c0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80050c4:	011a      	lsls	r2, r3, #4
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d012      	beq.n	80050fe <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80050e0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	3360      	adds	r3, #96	@ 0x60
 80050ec:	443b      	add	r3, r7
 80050ee:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80050f2:	021a      	lsls	r2, r3, #8
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a11      	ldr	r2, [pc, #68]	@ (8005148 <HAL_FDCAN_Init+0x3b8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d107      	bne.n	8005118 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f022 0203 	bic.w	r2, r2, #3
 8005116:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fdf7 	bl	8005d24 <FDCAN_CalcultateRamBlockAddresses>
 8005136:	4603      	mov	r3, r0
 8005138:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 800513c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005140:	4618      	mov	r0, r3
 8005142:	3760      	adds	r7, #96	@ 0x60
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	4000a000 	.word	0x4000a000

0800514c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800515c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800515e:	7bfb      	ldrb	r3, [r7, #15]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d002      	beq.n	800516a <HAL_FDCAN_ConfigFilter+0x1e>
 8005164:	7bfb      	ldrb	r3, [r7, #15]
 8005166:	2b02      	cmp	r3, #2
 8005168:	d157      	bne.n	800521a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d12b      	bne.n	80051ca <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	2b07      	cmp	r3, #7
 8005178:	d10d      	bne.n	8005196 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8005186:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800518c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800518e:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	e00e      	b.n	80051b4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80051a2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80051aa:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	e025      	b.n	8005216 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	075a      	lsls	r2, r3, #29
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	2b07      	cmp	r3, #7
 80051de:	d103      	bne.n	80051e8 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	e006      	b.n	80051f6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	079a      	lsls	r2, r3, #30
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	4413      	add	r3, r2
 8005202:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	3304      	adds	r3, #4
 800520e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	e008      	b.n	800522c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005220:	f043 0202 	orr.w	r2, r3, #2
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
  }
}
 800522c:	4618      	mov	r0, r3
 800522e:	371c      	adds	r7, #28
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	d111      	bne.n	8005270 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699a      	ldr	r2, [r3, #24]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0201 	bic.w	r2, r2, #1
 8005262:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800526c:	2300      	movs	r3, #0
 800526e:	e008      	b.n	8005282 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005276:	f043 0204 	orr.w	r2, r3, #4
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
  }
}
 8005282:	4618      	mov	r0, r3
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b086      	sub	sp, #24
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d141      	bne.n	800532a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80052ae:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052bc:	f043 0220 	orr.w	r2, r3, #32
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e038      	b.n	800533c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80052d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d009      	beq.n	80052ee <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e026      	b.n	800533c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80052f6:	0c1b      	lsrs	r3, r3, #16
 80052f8:	f003 031f 	and.w	r3, r3, #31
 80052fc:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 fe93 	bl	8006030 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2101      	movs	r1, #1
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	fa01 f202 	lsl.w	r2, r1, r2
 8005316:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800531a:	2201      	movs	r2, #1
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	409a      	lsls	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	e008      	b.n	800533c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005330:	f043 0208 	orr.w	r2, r3, #8
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
  }
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005344:	b480      	push	{r7}
 8005346:	b08b      	sub	sp, #44	@ 0x2c
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800535c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800535e:	7efb      	ldrb	r3, [r7, #27]
 8005360:	2b02      	cmp	r3, #2
 8005362:	f040 8149 	bne.w	80055f8 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b40      	cmp	r3, #64	@ 0x40
 800536a:	d14c      	bne.n	8005406 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005374:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d109      	bne.n	8005390 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005382:	f043 0220 	orr.w	r2, r3, #32
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e13c      	b.n	800560a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005398:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800539c:	2b00      	cmp	r3, #0
 800539e:	d109      	bne.n	80053b4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e12a      	b.n	800560a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80053bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053c4:	d10a      	bne.n	80053dc <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80053ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053d6:	d101      	bne.n	80053dc <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80053d8:	2301      	movs	r3, #1
 80053da:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80053e4:	0a1b      	lsrs	r3, r3, #8
 80053e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	4413      	add	r3, r2
 80053ee:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f8:	69f9      	ldr	r1, [r7, #28]
 80053fa:	fb01 f303 	mul.w	r3, r1, r3
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	627b      	str	r3, [r7, #36]	@ 0x24
 8005404:	e068      	b.n	80054d8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b41      	cmp	r3, #65	@ 0x41
 800540a:	d14c      	bne.n	80054a6 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005414:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d109      	bne.n	8005430 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005422:	f043 0220 	orr.w	r2, r3, #32
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e0ec      	b.n	800560a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800543c:	2b00      	cmp	r3, #0
 800543e:	d109      	bne.n	8005454 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005446:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e0da      	b.n	800560a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800545c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005460:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005464:	d10a      	bne.n	800547c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800546e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005472:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005476:	d101      	bne.n	800547c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005478:	2301      	movs	r3, #1
 800547a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005484:	0a1b      	lsrs	r3, r3, #8
 8005486:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800548a:	69fa      	ldr	r2, [r7, #28]
 800548c:	4413      	add	r3, r2
 800548e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005498:	69f9      	ldr	r1, [r7, #28]
 800549a:	fb01 f303 	mul.w	r3, r1, r3
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a4:	e018      	b.n	80054d8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d309      	bcc.n	80054c4 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054b6:	f043 0220 	orr.w	r2, r3, #32
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e0a2      	b.n	800560a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054cc:	68b9      	ldr	r1, [r7, #8]
 80054ce:	fb01 f303 	mul.w	r3, r1, r3
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80054d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d107      	bne.n	80054fc <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80054ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	0c9b      	lsrs	r3, r3, #18
 80054f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	e005      	b.n	8005508 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80054fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005522:	3304      	adds	r3, #4
 8005524:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	b29a      	uxth	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	0c1b      	lsrs	r3, r3, #16
 8005536:	f003 020f 	and.w	r2, r3, #15
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800553e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	0e1b      	lsrs	r3, r3, #24
 800555c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	0fda      	lsrs	r2, r3, #31
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	3304      	adds	r3, #4
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005578:	2300      	movs	r3, #0
 800557a:	623b      	str	r3, [r7, #32]
 800557c:	e00a      	b.n	8005594 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	441a      	add	r2, r3
 8005584:	6839      	ldr	r1, [r7, #0]
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	440b      	add	r3, r1
 800558a:	7812      	ldrb	r2, [r2, #0]
 800558c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	3301      	adds	r3, #1
 8005592:	623b      	str	r3, [r7, #32]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	4a1f      	ldr	r2, [pc, #124]	@ (8005618 <HAL_FDCAN_GetRxMessage+0x2d4>)
 800559a:	5cd3      	ldrb	r3, [r2, r3]
 800559c:	461a      	mov	r2, r3
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d3ec      	bcc.n	800557e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b40      	cmp	r3, #64	@ 0x40
 80055a8:	d105      	bne.n	80055b6 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80055b4:	e01e      	b.n	80055f4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b41      	cmp	r3, #65	@ 0x41
 80055ba:	d105      	bne.n	80055c8 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80055c6:	e015      	b.n	80055f4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b1f      	cmp	r3, #31
 80055cc:	d808      	bhi.n	80055e0 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2101      	movs	r1, #1
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	fa01 f202 	lsl.w	r2, r1, r2
 80055da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80055de:	e009      	b.n	80055f4 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f003 021f 	and.w	r2, r3, #31
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2101      	movs	r1, #1
 80055ec:	fa01 f202 	lsl.w	r2, r1, r2
 80055f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	e008      	b.n	800560a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055fe:	f043 0208 	orr.w	r2, r3, #8
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
  }
}
 800560a:	4618      	mov	r0, r3
 800560c:	372c      	adds	r7, #44	@ 0x2c
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	0800cbec 	.word	0x0800cbec

0800561c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800562e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005630:	7dfb      	ldrb	r3, [r7, #23]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d002      	beq.n	800563c <HAL_FDCAN_ActivateNotification+0x20>
 8005636:	7dfb      	ldrb	r3, [r7, #23]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d155      	bne.n	80056e8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4013      	ands	r3, r2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d108      	bne.n	800565c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0201 	orr.w	r2, r2, #1
 8005658:	65da      	str	r2, [r3, #92]	@ 0x5c
 800565a:	e014      	b.n	8005686 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	4013      	ands	r3, r2
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	429a      	cmp	r2, r3
 800566a:	d108      	bne.n	800567e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0202 	orr.w	r2, r2, #2
 800567a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800567c:	e003      	b.n	8005686 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2203      	movs	r2, #3
 8005684:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800568c:	2b00      	cmp	r3, #0
 800568e:	d009      	beq.n	80056a4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	430a      	orrs	r2, r1
 80056a0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	430a      	orrs	r2, r1
 80056be:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005708 <HAL_FDCAN_ActivateNotification+0xec>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	6812      	ldr	r2, [r2, #0]
 80056d2:	430b      	orrs	r3, r1
 80056d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80056d6:	4b0d      	ldr	r3, [pc, #52]	@ (800570c <HAL_FDCAN_ActivateNotification+0xf0>)
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	0f9b      	lsrs	r3, r3, #30
 80056de:	490b      	ldr	r1, [pc, #44]	@ (800570c <HAL_FDCAN_ActivateNotification+0xf0>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e008      	b.n	80056fa <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056ee:	f043 0202 	orr.w	r2, r3, #2
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
  }
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	3fcfffff 	.word	0x3fcfffff
 800570c:	4000a800 	.word	0x4000a800

08005710 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b096      	sub	sp, #88	@ 0x58
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005718:	4b9a      	ldr	r3, [pc, #616]	@ (8005984 <HAL_FDCAN_IRQHandler+0x274>)
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	079b      	lsls	r3, r3, #30
 800571e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005720:	4b98      	ldr	r3, [pc, #608]	@ (8005984 <HAL_FDCAN_IRQHandler+0x274>)
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	079b      	lsls	r3, r3, #30
 8005726:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005728:	4013      	ands	r3, r2
 800572a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005732:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005736:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005740:	4013      	ands	r3, r2
 8005742:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005756:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005758:	4013      	ands	r3, r2
 800575a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005762:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005766:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800576e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005770:	4013      	ands	r3, r2
 8005772:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800577a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800577e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005786:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005788:	4013      	ands	r3, r2
 800578a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005792:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005796:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800579e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057a0:	4013      	ands	r3, r2
 80057a2:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80057b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b6:	0a1b      	lsrs	r3, r3, #8
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d010      	beq.n	80057e2 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80057c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c2:	0a1b      	lsrs	r3, r3, #8
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80057d6:	4b6b      	ldr	r3, [pc, #428]	@ (8005984 <HAL_FDCAN_IRQHandler+0x274>)
 80057d8:	2200      	movs	r2, #0
 80057da:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fa54 	bl	8005c8a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80057e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057e4:	0a9b      	lsrs	r3, r3, #10
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d01d      	beq.n	800582a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80057ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f0:	0a9b      	lsrs	r3, r3, #10
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d017      	beq.n	800582a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005802:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800580c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800580e:	4013      	ands	r3, r2
 8005810:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800581a:	651a      	str	r2, [r3, #80]	@ 0x50
 800581c:	4b59      	ldr	r3, [pc, #356]	@ (8005984 <HAL_FDCAN_IRQHandler+0x274>)
 800581e:	2200      	movs	r2, #0
 8005820:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005822:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fa07 	bl	8005c38 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800582a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00d      	beq.n	800584c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005836:	4b54      	ldr	r3, [pc, #336]	@ (8005988 <HAL_FDCAN_IRQHandler+0x278>)
 8005838:	400b      	ands	r3, r1
 800583a:	6513      	str	r3, [r2, #80]	@ 0x50
 800583c:	4a51      	ldr	r2, [pc, #324]	@ (8005984 <HAL_FDCAN_IRQHandler+0x274>)
 800583e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005840:	0f9b      	lsrs	r3, r3, #30
 8005842:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005844:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f9c0 	bl	8005bcc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800584c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00d      	beq.n	800586e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005858:	4b4b      	ldr	r3, [pc, #300]	@ (8005988 <HAL_FDCAN_IRQHandler+0x278>)
 800585a:	400b      	ands	r3, r1
 800585c:	6513      	str	r3, [r2, #80]	@ 0x50
 800585e:	4a49      	ldr	r2, [pc, #292]	@ (8005984 <HAL_FDCAN_IRQHandler+0x274>)
 8005860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005862:	0f9b      	lsrs	r3, r3, #30
 8005864:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005866:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f9ba 	bl	8005be2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800586e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00d      	beq.n	8005890 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800587a:	4b43      	ldr	r3, [pc, #268]	@ (8005988 <HAL_FDCAN_IRQHandler+0x278>)
 800587c:	400b      	ands	r3, r1
 800587e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005880:	4a40      	ldr	r2, [pc, #256]	@ (8005984 <HAL_FDCAN_IRQHandler+0x274>)
 8005882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005884:	0f9b      	lsrs	r3, r3, #30
 8005886:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005888:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fc f9fe 	bl	8001c8c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00d      	beq.n	80058b2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800589c:	4b3a      	ldr	r3, [pc, #232]	@ (8005988 <HAL_FDCAN_IRQHandler+0x278>)
 800589e:	400b      	ands	r3, r1
 80058a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80058a2:	4a38      	ldr	r2, [pc, #224]	@ (8005984 <HAL_FDCAN_IRQHandler+0x274>)
 80058a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058a6:	0f9b      	lsrs	r3, r3, #30
 80058a8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80058aa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f9a3 	bl	8005bf8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80058b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058b4:	0adb      	lsrs	r3, r3, #11
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d010      	beq.n	80058e0 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80058be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c0:	0adb      	lsrs	r3, r3, #11
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80058d4:	4b2b      	ldr	r3, [pc, #172]	@ (8005984 <HAL_FDCAN_IRQHandler+0x274>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f997 	bl	8005c0e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80058e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058e2:	0a5b      	lsrs	r3, r3, #9
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d01d      	beq.n	8005928 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80058ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ee:	0a5b      	lsrs	r3, r3, #9
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d017      	beq.n	8005928 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005900:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800590a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800590c:	4013      	ands	r3, r2
 800590e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005918:	651a      	str	r2, [r3, #80]	@ 0x50
 800591a:	4b1a      	ldr	r3, [pc, #104]	@ (8005984 <HAL_FDCAN_IRQHandler+0x274>)
 800591c:	2200      	movs	r2, #0
 800591e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005920:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f97d 	bl	8005c22 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800592a:	0cdb      	lsrs	r3, r3, #19
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d010      	beq.n	8005956 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005936:	0cdb      	lsrs	r3, r3, #19
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005948:	651a      	str	r2, [r3, #80]	@ 0x50
 800594a:	4b0e      	ldr	r3, [pc, #56]	@ (8005984 <HAL_FDCAN_IRQHandler+0x274>)
 800594c:	2200      	movs	r2, #0
 800594e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f97c 	bl	8005c4e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005958:	0c1b      	lsrs	r3, r3, #16
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d016      	beq.n	8005990 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005964:	0c1b      	lsrs	r3, r3, #16
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d010      	beq.n	8005990 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005976:	651a      	str	r2, [r3, #80]	@ 0x50
 8005978:	4b02      	ldr	r3, [pc, #8]	@ (8005984 <HAL_FDCAN_IRQHandler+0x274>)
 800597a:	2200      	movs	r2, #0
 800597c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	e004      	b.n	800598c <HAL_FDCAN_IRQHandler+0x27c>
 8005982:	bf00      	nop
 8005984:	4000a800 	.word	0x4000a800
 8005988:	3fcfffff 	.word	0x3fcfffff
 800598c:	f000 f969 	bl	8005c62 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005992:	0c9b      	lsrs	r3, r3, #18
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	d010      	beq.n	80059be <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800599c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599e:	0c9b      	lsrs	r3, r3, #18
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80059b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80059b2:	4b83      	ldr	r3, [pc, #524]	@ (8005bc0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f95c 	bl	8005c76 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80059be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059c0:	0c5b      	lsrs	r3, r3, #17
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d015      	beq.n	80059f6 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80059ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059cc:	0c5b      	lsrs	r3, r3, #17
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00f      	beq.n	80059f6 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80059de:	651a      	str	r2, [r3, #80]	@ 0x50
 80059e0:	4b77      	ldr	r3, [pc, #476]	@ (8005bc0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80059f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00d      	beq.n	8005a18 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a02:	4b70      	ldr	r3, [pc, #448]	@ (8005bc4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005a04:	400b      	ands	r3, r1
 8005a06:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a08:	4a6d      	ldr	r2, [pc, #436]	@ (8005bc0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005a0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a0c:	0f9b      	lsrs	r3, r3, #30
 8005a0e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005a10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f94d 	bl	8005cb2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d011      	beq.n	8005a42 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a24:	4b67      	ldr	r3, [pc, #412]	@ (8005bc4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005a26:	400b      	ands	r3, r1
 8005a28:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a2a:	4a65      	ldr	r2, [pc, #404]	@ (8005bc0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a2e:	0f9b      	lsrs	r3, r3, #30
 8005a30:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a60      	ldr	r2, [pc, #384]	@ (8005bc8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	f040 80ac 	bne.w	8005ba6 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80a4 	beq.w	8005ba6 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	f003 030f 	and.w	r3, r3, #15
 8005a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a72:	4013      	ands	r3, r2
 8005a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a80:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005a98:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005ab0:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab8:	6a3a      	ldr	r2, [r7, #32]
 8005aba:	4013      	ands	r3, r2
 8005abc:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005ac8:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d007      	beq.n	8005afc <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005af2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005af4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f8e6 	bl	8005cc8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b08:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005b0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f8e6 	bl	8005cde <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	099b      	lsrs	r3, r3, #6
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d01a      	beq.n	8005b54 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	099b      	lsrs	r3, r3, #6
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d014      	beq.n	8005b54 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b30:	0c1b      	lsrs	r3, r3, #16
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b40:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2240      	movs	r2, #64	@ 0x40
 8005b48:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	6939      	ldr	r1, [r7, #16]
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f8d0 	bl	8005cf4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b60:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005b62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f8d1 	bl	8005d0c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00b      	beq.n	8005b88 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	6a3a      	ldr	r2, [r7, #32]
 8005b76:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00b      	beq.n	8005ba6 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f874 	bl	8005c9e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005bb6:	bf00      	nop
 8005bb8:	3758      	adds	r7, #88	@ 0x58
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	4000a800 	.word	0x4000a800
 8005bc4:	3fcfffff 	.word	0x3fcfffff
 8005bc8:	4000a000 	.word	0x4000a000

08005bcc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b083      	sub	sp, #12
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
	...

08005d24 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d30:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005d3a:	4ba7      	ldr	r3, [pc, #668]	@ (8005fd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	0091      	lsls	r1, r2, #2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6812      	ldr	r2, [r2, #0]
 8005d46:	430b      	orrs	r3, r1
 8005d48:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d54:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5c:	041a      	lsls	r2, r3, #16
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	4413      	add	r3, r2
 8005d70:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005d7a:	4b97      	ldr	r3, [pc, #604]	@ (8005fd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	0091      	lsls	r1, r2, #2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6812      	ldr	r2, [r2, #0]
 8005d86:	430b      	orrs	r3, r1
 8005d88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d94:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d9c:	041a      	lsls	r2, r3, #16
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	4413      	add	r3, r2
 8005db2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005dbc:	4b86      	ldr	r3, [pc, #536]	@ (8005fd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	0091      	lsls	r1, r2, #2
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6812      	ldr	r2, [r2, #0]
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005dd6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dde:	041a      	lsls	r2, r3, #16
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005df2:	fb02 f303 	mul.w	r3, r2, r3
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	4413      	add	r3, r2
 8005dfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005e04:	4b74      	ldr	r3, [pc, #464]	@ (8005fd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	0091      	lsls	r1, r2, #2
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6812      	ldr	r2, [r2, #0]
 8005e10:	430b      	orrs	r3, r1
 8005e12:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e1e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e26:	041a      	lsls	r2, r3, #16
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005e3a:	fb02 f303 	mul.w	r3, r2, r3
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	4413      	add	r3, r2
 8005e42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005e4c:	4b62      	ldr	r3, [pc, #392]	@ (8005fd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	0091      	lsls	r1, r2, #2
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6812      	ldr	r2, [r2, #0]
 8005e58:	430b      	orrs	r3, r1
 8005e5a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005e66:	fb02 f303 	mul.w	r3, r2, r3
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005e78:	4b57      	ldr	r3, [pc, #348]	@ (8005fd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	0091      	lsls	r1, r2, #2
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6812      	ldr	r2, [r2, #0]
 8005e84:	430b      	orrs	r3, r1
 8005e86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e92:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e9a:	041a      	lsls	r2, r3, #16
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	4413      	add	r3, r2
 8005eb0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005eba:	4b47      	ldr	r3, [pc, #284]	@ (8005fd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	0091      	lsls	r1, r2, #2
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6812      	ldr	r2, [r2, #0]
 8005ec6:	430b      	orrs	r3, r1
 8005ec8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005ed4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005edc:	041a      	lsls	r2, r3, #16
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005ef0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ef8:	061a      	lsls	r2, r3, #24
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f08:	4b34      	ldr	r3, [pc, #208]	@ (8005fdc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009a      	lsls	r2, r3, #2
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	441a      	add	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	441a      	add	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005f3e:	fb01 f303 	mul.w	r3, r1, r3
 8005f42:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005f44:	441a      	add	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005f56:	fb01 f303 	mul.w	r3, r1, r3
 8005f5a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005f5c:	441a      	add	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005f6e:	fb01 f303 	mul.w	r3, r1, r3
 8005f72:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005f74:	441a      	add	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	441a      	add	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005f9e:	fb01 f303 	mul.w	r3, r1, r3
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	441a      	add	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005fba:	fb01 f303 	mul.w	r3, r1, r3
 8005fbe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005fc0:	441a      	add	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fce:	4a04      	ldr	r2, [pc, #16]	@ (8005fe0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d915      	bls.n	8006000 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005fd4:	e006      	b.n	8005fe4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005fd6:	bf00      	nop
 8005fd8:	ffff0003 	.word	0xffff0003
 8005fdc:	10002b00 	.word	0x10002b00
 8005fe0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fea:	f043 0220 	orr.w	r2, r3, #32
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2203      	movs	r2, #3
 8005ff8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e010      	b.n	8006022 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	e005      	b.n	8006014 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3304      	adds	r3, #4
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	429a      	cmp	r2, r3
 800601e:	d3f3      	bcc.n	8006008 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop

08006030 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006030:	b480      	push	{r7}
 8006032:	b089      	sub	sp, #36	@ 0x24
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10a      	bne.n	800605c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800604e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006056:	4313      	orrs	r3, r2
 8006058:	61fb      	str	r3, [r7, #28]
 800605a:	e00a      	b.n	8006072 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006064:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800606a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800606c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006070:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800607c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006082:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006088:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006090:	4313      	orrs	r3, r2
 8006092:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	fb01 f303 	mul.w	r3, r1, r3
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	69fa      	ldr	r2, [r7, #28]
 80060ae:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	3304      	adds	r3, #4
 80060b4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	3304      	adds	r3, #4
 80060c0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]
 80060c6:	e020      	b.n	800610a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	3303      	adds	r3, #3
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	4413      	add	r3, r2
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	3302      	adds	r3, #2
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	440b      	add	r3, r1
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80060e0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	3301      	adds	r3, #1
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	440b      	add	r3, r1
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80060ee:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	440a      	add	r2, r1
 80060f6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80060f8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	3304      	adds	r3, #4
 8006102:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	3304      	adds	r3, #4
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	4a06      	ldr	r2, [pc, #24]	@ (8006128 <FDCAN_CopyMessageToRAM+0xf8>)
 8006110:	5cd3      	ldrb	r3, [r2, r3]
 8006112:	461a      	mov	r2, r3
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	4293      	cmp	r3, r2
 8006118:	d3d6      	bcc.n	80060c8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800611a:	bf00      	nop
 800611c:	bf00      	nop
 800611e:	3724      	adds	r7, #36	@ 0x24
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	0800cbec 	.word	0x0800cbec

0800612c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800612c:	b480      	push	{r7}
 800612e:	b089      	sub	sp, #36	@ 0x24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006136:	2300      	movs	r3, #0
 8006138:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800613a:	4b86      	ldr	r3, [pc, #536]	@ (8006354 <HAL_GPIO_Init+0x228>)
 800613c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800613e:	e18c      	b.n	800645a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	2101      	movs	r1, #1
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	fa01 f303 	lsl.w	r3, r1, r3
 800614c:	4013      	ands	r3, r2
 800614e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 817e 	beq.w	8006454 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f003 0303 	and.w	r3, r3, #3
 8006160:	2b01      	cmp	r3, #1
 8006162:	d005      	beq.n	8006170 <HAL_GPIO_Init+0x44>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f003 0303 	and.w	r3, r3, #3
 800616c:	2b02      	cmp	r3, #2
 800616e:	d130      	bne.n	80061d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	2203      	movs	r2, #3
 800617c:	fa02 f303 	lsl.w	r3, r2, r3
 8006180:	43db      	mvns	r3, r3
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	4013      	ands	r3, r2
 8006186:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	68da      	ldr	r2, [r3, #12]
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	fa02 f303 	lsl.w	r3, r2, r3
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	4313      	orrs	r3, r2
 8006198:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061a6:	2201      	movs	r2, #1
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	43db      	mvns	r3, r3
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	4013      	ands	r3, r2
 80061b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	091b      	lsrs	r3, r3, #4
 80061bc:	f003 0201 	and.w	r2, r3, #1
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	fa02 f303 	lsl.w	r3, r2, r3
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d017      	beq.n	800620e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	2203      	movs	r2, #3
 80061ea:	fa02 f303 	lsl.w	r3, r2, r3
 80061ee:	43db      	mvns	r3, r3
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	4013      	ands	r3, r2
 80061f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	4313      	orrs	r3, r2
 8006206:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d123      	bne.n	8006262 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	08da      	lsrs	r2, r3, #3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	3208      	adds	r2, #8
 8006222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	220f      	movs	r2, #15
 8006232:	fa02 f303 	lsl.w	r3, r2, r3
 8006236:	43db      	mvns	r3, r3
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	4013      	ands	r3, r2
 800623c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	691a      	ldr	r2, [r3, #16]
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	fa02 f303 	lsl.w	r3, r2, r3
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	4313      	orrs	r3, r2
 8006252:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	08da      	lsrs	r2, r3, #3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3208      	adds	r2, #8
 800625c:	69b9      	ldr	r1, [r7, #24]
 800625e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	2203      	movs	r2, #3
 800626e:	fa02 f303 	lsl.w	r3, r2, r3
 8006272:	43db      	mvns	r3, r3
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	4013      	ands	r3, r2
 8006278:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f003 0203 	and.w	r2, r3, #3
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	4313      	orrs	r3, r2
 800628e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 80d8 	beq.w	8006454 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062a4:	4b2c      	ldr	r3, [pc, #176]	@ (8006358 <HAL_GPIO_Init+0x22c>)
 80062a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062aa:	4a2b      	ldr	r2, [pc, #172]	@ (8006358 <HAL_GPIO_Init+0x22c>)
 80062ac:	f043 0302 	orr.w	r3, r3, #2
 80062b0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80062b4:	4b28      	ldr	r3, [pc, #160]	@ (8006358 <HAL_GPIO_Init+0x22c>)
 80062b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062c2:	4a26      	ldr	r2, [pc, #152]	@ (800635c <HAL_GPIO_Init+0x230>)
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	089b      	lsrs	r3, r3, #2
 80062c8:	3302      	adds	r3, #2
 80062ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	220f      	movs	r2, #15
 80062da:	fa02 f303 	lsl.w	r3, r2, r3
 80062de:	43db      	mvns	r3, r3
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	4013      	ands	r3, r2
 80062e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006360 <HAL_GPIO_Init+0x234>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d04a      	beq.n	8006384 <HAL_GPIO_Init+0x258>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006364 <HAL_GPIO_Init+0x238>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d02b      	beq.n	800634e <HAL_GPIO_Init+0x222>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006368 <HAL_GPIO_Init+0x23c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d025      	beq.n	800634a <HAL_GPIO_Init+0x21e>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a1a      	ldr	r2, [pc, #104]	@ (800636c <HAL_GPIO_Init+0x240>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d01f      	beq.n	8006346 <HAL_GPIO_Init+0x21a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a19      	ldr	r2, [pc, #100]	@ (8006370 <HAL_GPIO_Init+0x244>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d019      	beq.n	8006342 <HAL_GPIO_Init+0x216>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a18      	ldr	r2, [pc, #96]	@ (8006374 <HAL_GPIO_Init+0x248>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d013      	beq.n	800633e <HAL_GPIO_Init+0x212>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a17      	ldr	r2, [pc, #92]	@ (8006378 <HAL_GPIO_Init+0x24c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00d      	beq.n	800633a <HAL_GPIO_Init+0x20e>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a16      	ldr	r2, [pc, #88]	@ (800637c <HAL_GPIO_Init+0x250>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d007      	beq.n	8006336 <HAL_GPIO_Init+0x20a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a15      	ldr	r2, [pc, #84]	@ (8006380 <HAL_GPIO_Init+0x254>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d101      	bne.n	8006332 <HAL_GPIO_Init+0x206>
 800632e:	2309      	movs	r3, #9
 8006330:	e029      	b.n	8006386 <HAL_GPIO_Init+0x25a>
 8006332:	230a      	movs	r3, #10
 8006334:	e027      	b.n	8006386 <HAL_GPIO_Init+0x25a>
 8006336:	2307      	movs	r3, #7
 8006338:	e025      	b.n	8006386 <HAL_GPIO_Init+0x25a>
 800633a:	2306      	movs	r3, #6
 800633c:	e023      	b.n	8006386 <HAL_GPIO_Init+0x25a>
 800633e:	2305      	movs	r3, #5
 8006340:	e021      	b.n	8006386 <HAL_GPIO_Init+0x25a>
 8006342:	2304      	movs	r3, #4
 8006344:	e01f      	b.n	8006386 <HAL_GPIO_Init+0x25a>
 8006346:	2303      	movs	r3, #3
 8006348:	e01d      	b.n	8006386 <HAL_GPIO_Init+0x25a>
 800634a:	2302      	movs	r3, #2
 800634c:	e01b      	b.n	8006386 <HAL_GPIO_Init+0x25a>
 800634e:	2301      	movs	r3, #1
 8006350:	e019      	b.n	8006386 <HAL_GPIO_Init+0x25a>
 8006352:	bf00      	nop
 8006354:	58000080 	.word	0x58000080
 8006358:	58024400 	.word	0x58024400
 800635c:	58000400 	.word	0x58000400
 8006360:	58020000 	.word	0x58020000
 8006364:	58020400 	.word	0x58020400
 8006368:	58020800 	.word	0x58020800
 800636c:	58020c00 	.word	0x58020c00
 8006370:	58021000 	.word	0x58021000
 8006374:	58021400 	.word	0x58021400
 8006378:	58021800 	.word	0x58021800
 800637c:	58021c00 	.word	0x58021c00
 8006380:	58022400 	.word	0x58022400
 8006384:	2300      	movs	r3, #0
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	f002 0203 	and.w	r2, r2, #3
 800638c:	0092      	lsls	r2, r2, #2
 800638e:	4093      	lsls	r3, r2
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	4313      	orrs	r3, r2
 8006394:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006396:	4938      	ldr	r1, [pc, #224]	@ (8006478 <HAL_GPIO_Init+0x34c>)
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	089b      	lsrs	r3, r3, #2
 800639c:	3302      	adds	r3, #2
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	43db      	mvns	r3, r3
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	4013      	ands	r3, r2
 80063b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80063ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80063d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	43db      	mvns	r3, r3
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	4013      	ands	r3, r2
 80063e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80063f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	43db      	mvns	r3, r3
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	4013      	ands	r3, r2
 800640e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	4313      	orrs	r3, r2
 8006422:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	43db      	mvns	r3, r3
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	4013      	ands	r3, r2
 8006438:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	4313      	orrs	r3, r2
 800644c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	3301      	adds	r3, #1
 8006458:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	fa22 f303 	lsr.w	r3, r2, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	f47f ae6b 	bne.w	8006140 <HAL_GPIO_Init+0x14>
  }
}
 800646a:	bf00      	nop
 800646c:	bf00      	nop
 800646e:	3724      	adds	r7, #36	@ 0x24
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	58000400 	.word	0x58000400

0800647c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	887b      	ldrh	r3, [r7, #2]
 800648e:	4013      	ands	r3, r2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006494:	2301      	movs	r3, #1
 8006496:	73fb      	strb	r3, [r7, #15]
 8006498:	e001      	b.n	800649e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800649a:	2300      	movs	r3, #0
 800649c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800649e:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	460b      	mov	r3, r1
 80064b6:	807b      	strh	r3, [r7, #2]
 80064b8:	4613      	mov	r3, r2
 80064ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064bc:	787b      	ldrb	r3, [r7, #1]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064c2:	887a      	ldrh	r2, [r7, #2]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80064c8:	e003      	b.n	80064d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80064ca:	887b      	ldrh	r3, [r7, #2]
 80064cc:	041a      	lsls	r2, r3, #16
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	619a      	str	r2, [r3, #24]
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
	...

080064e0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80064e8:	4b19      	ldr	r3, [pc, #100]	@ (8006550 <HAL_PWREx_ConfigSupply+0x70>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d00a      	beq.n	800650a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80064f4:	4b16      	ldr	r3, [pc, #88]	@ (8006550 <HAL_PWREx_ConfigSupply+0x70>)
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d001      	beq.n	8006506 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e01f      	b.n	8006546 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	e01d      	b.n	8006546 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800650a:	4b11      	ldr	r3, [pc, #68]	@ (8006550 <HAL_PWREx_ConfigSupply+0x70>)
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f023 0207 	bic.w	r2, r3, #7
 8006512:	490f      	ldr	r1, [pc, #60]	@ (8006550 <HAL_PWREx_ConfigSupply+0x70>)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4313      	orrs	r3, r2
 8006518:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800651a:	f7fc fb7f 	bl	8002c1c <HAL_GetTick>
 800651e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006520:	e009      	b.n	8006536 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006522:	f7fc fb7b 	bl	8002c1c <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006530:	d901      	bls.n	8006536 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e007      	b.n	8006546 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006536:	4b06      	ldr	r3, [pc, #24]	@ (8006550 <HAL_PWREx_ConfigSupply+0x70>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800653e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006542:	d1ee      	bne.n	8006522 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	58024800 	.word	0x58024800

08006554 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08c      	sub	sp, #48	@ 0x30
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e3c8      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 8087 	beq.w	8006682 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006574:	4b88      	ldr	r3, [pc, #544]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800657c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800657e:	4b86      	ldr	r3, [pc, #536]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 8006580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006582:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006586:	2b10      	cmp	r3, #16
 8006588:	d007      	beq.n	800659a <HAL_RCC_OscConfig+0x46>
 800658a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800658c:	2b18      	cmp	r3, #24
 800658e:	d110      	bne.n	80065b2 <HAL_RCC_OscConfig+0x5e>
 8006590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006592:	f003 0303 	and.w	r3, r3, #3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d10b      	bne.n	80065b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800659a:	4b7f      	ldr	r3, [pc, #508]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d06c      	beq.n	8006680 <HAL_RCC_OscConfig+0x12c>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d168      	bne.n	8006680 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e3a2      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065ba:	d106      	bne.n	80065ca <HAL_RCC_OscConfig+0x76>
 80065bc:	4b76      	ldr	r3, [pc, #472]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a75      	ldr	r2, [pc, #468]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 80065c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	e02e      	b.n	8006628 <HAL_RCC_OscConfig+0xd4>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10c      	bne.n	80065ec <HAL_RCC_OscConfig+0x98>
 80065d2:	4b71      	ldr	r3, [pc, #452]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a70      	ldr	r2, [pc, #448]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 80065d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	4b6e      	ldr	r3, [pc, #440]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a6d      	ldr	r2, [pc, #436]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 80065e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	e01d      	b.n	8006628 <HAL_RCC_OscConfig+0xd4>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065f4:	d10c      	bne.n	8006610 <HAL_RCC_OscConfig+0xbc>
 80065f6:	4b68      	ldr	r3, [pc, #416]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a67      	ldr	r2, [pc, #412]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 80065fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	4b65      	ldr	r3, [pc, #404]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a64      	ldr	r2, [pc, #400]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 8006608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	e00b      	b.n	8006628 <HAL_RCC_OscConfig+0xd4>
 8006610:	4b61      	ldr	r3, [pc, #388]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a60      	ldr	r2, [pc, #384]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 8006616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	4b5e      	ldr	r3, [pc, #376]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a5d      	ldr	r2, [pc, #372]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 8006622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d013      	beq.n	8006658 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006630:	f7fc faf4 	bl	8002c1c <HAL_GetTick>
 8006634:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006636:	e008      	b.n	800664a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006638:	f7fc faf0 	bl	8002c1c <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b64      	cmp	r3, #100	@ 0x64
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e356      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800664a:	4b53      	ldr	r3, [pc, #332]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d0f0      	beq.n	8006638 <HAL_RCC_OscConfig+0xe4>
 8006656:	e014      	b.n	8006682 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006658:	f7fc fae0 	bl	8002c1c <HAL_GetTick>
 800665c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006660:	f7fc fadc 	bl	8002c1c <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b64      	cmp	r3, #100	@ 0x64
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e342      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006672:	4b49      	ldr	r3, [pc, #292]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1f0      	bne.n	8006660 <HAL_RCC_OscConfig+0x10c>
 800667e:	e000      	b.n	8006682 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 808c 	beq.w	80067a8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006690:	4b41      	ldr	r3, [pc, #260]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006698:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800669a:	4b3f      	ldr	r3, [pc, #252]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 800669c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d007      	beq.n	80066b6 <HAL_RCC_OscConfig+0x162>
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	2b18      	cmp	r3, #24
 80066aa:	d137      	bne.n	800671c <HAL_RCC_OscConfig+0x1c8>
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d132      	bne.n	800671c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066b6:	4b38      	ldr	r3, [pc, #224]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d005      	beq.n	80066ce <HAL_RCC_OscConfig+0x17a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e314      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066ce:	4b32      	ldr	r3, [pc, #200]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f023 0219 	bic.w	r2, r3, #25
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	492f      	ldr	r1, [pc, #188]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e0:	f7fc fa9c 	bl	8002c1c <HAL_GetTick>
 80066e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066e8:	f7fc fa98 	bl	8002c1c <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e2fe      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066fa:	4b27      	ldr	r3, [pc, #156]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0f0      	beq.n	80066e8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006706:	4b24      	ldr	r3, [pc, #144]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	061b      	lsls	r3, r3, #24
 8006714:	4920      	ldr	r1, [pc, #128]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 8006716:	4313      	orrs	r3, r2
 8006718:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800671a:	e045      	b.n	80067a8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d026      	beq.n	8006772 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006724:	4b1c      	ldr	r3, [pc, #112]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f023 0219 	bic.w	r2, r3, #25
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	4919      	ldr	r1, [pc, #100]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 8006732:	4313      	orrs	r3, r2
 8006734:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006736:	f7fc fa71 	bl	8002c1c <HAL_GetTick>
 800673a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800673c:	e008      	b.n	8006750 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800673e:	f7fc fa6d 	bl	8002c1c <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d901      	bls.n	8006750 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e2d3      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006750:	4b11      	ldr	r3, [pc, #68]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0f0      	beq.n	800673e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800675c:	4b0e      	ldr	r3, [pc, #56]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	061b      	lsls	r3, r3, #24
 800676a:	490b      	ldr	r1, [pc, #44]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 800676c:	4313      	orrs	r3, r2
 800676e:	604b      	str	r3, [r1, #4]
 8006770:	e01a      	b.n	80067a8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006772:	4b09      	ldr	r3, [pc, #36]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a08      	ldr	r2, [pc, #32]	@ (8006798 <HAL_RCC_OscConfig+0x244>)
 8006778:	f023 0301 	bic.w	r3, r3, #1
 800677c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677e:	f7fc fa4d 	bl	8002c1c <HAL_GetTick>
 8006782:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006784:	e00a      	b.n	800679c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006786:	f7fc fa49 	bl	8002c1c <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d903      	bls.n	800679c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e2af      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
 8006798:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800679c:	4b96      	ldr	r3, [pc, #600]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1ee      	bne.n	8006786 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0310 	and.w	r3, r3, #16
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d06a      	beq.n	800688a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067b4:	4b90      	ldr	r3, [pc, #576]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067bc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067be:	4b8e      	ldr	r3, [pc, #568]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 80067c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	2b08      	cmp	r3, #8
 80067c8:	d007      	beq.n	80067da <HAL_RCC_OscConfig+0x286>
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	2b18      	cmp	r3, #24
 80067ce:	d11b      	bne.n	8006808 <HAL_RCC_OscConfig+0x2b4>
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d116      	bne.n	8006808 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067da:	4b87      	ldr	r3, [pc, #540]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d005      	beq.n	80067f2 <HAL_RCC_OscConfig+0x29e>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	2b80      	cmp	r3, #128	@ 0x80
 80067ec:	d001      	beq.n	80067f2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e282      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067f2:	4b81      	ldr	r3, [pc, #516]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	061b      	lsls	r3, r3, #24
 8006800:	497d      	ldr	r1, [pc, #500]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 8006802:	4313      	orrs	r3, r2
 8006804:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006806:	e040      	b.n	800688a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d023      	beq.n	8006858 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006810:	4b79      	ldr	r3, [pc, #484]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a78      	ldr	r2, [pc, #480]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 8006816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800681a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681c:	f7fc f9fe 	bl	8002c1c <HAL_GetTick>
 8006820:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006822:	e008      	b.n	8006836 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006824:	f7fc f9fa 	bl	8002c1c <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e260      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006836:	4b70      	ldr	r3, [pc, #448]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0f0      	beq.n	8006824 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006842:	4b6d      	ldr	r3, [pc, #436]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	061b      	lsls	r3, r3, #24
 8006850:	4969      	ldr	r1, [pc, #420]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 8006852:	4313      	orrs	r3, r2
 8006854:	60cb      	str	r3, [r1, #12]
 8006856:	e018      	b.n	800688a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006858:	4b67      	ldr	r3, [pc, #412]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a66      	ldr	r2, [pc, #408]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 800685e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006864:	f7fc f9da 	bl	8002c1c <HAL_GetTick>
 8006868:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800686c:	f7fc f9d6 	bl	8002c1c <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e23c      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800687e:	4b5e      	ldr	r3, [pc, #376]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1f0      	bne.n	800686c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0308 	and.w	r3, r3, #8
 8006892:	2b00      	cmp	r3, #0
 8006894:	d036      	beq.n	8006904 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d019      	beq.n	80068d2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800689e:	4b56      	ldr	r3, [pc, #344]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 80068a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068a2:	4a55      	ldr	r2, [pc, #340]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 80068a4:	f043 0301 	orr.w	r3, r3, #1
 80068a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068aa:	f7fc f9b7 	bl	8002c1c <HAL_GetTick>
 80068ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80068b0:	e008      	b.n	80068c4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068b2:	f7fc f9b3 	bl	8002c1c <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d901      	bls.n	80068c4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e219      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80068c4:	4b4c      	ldr	r3, [pc, #304]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 80068c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0f0      	beq.n	80068b2 <HAL_RCC_OscConfig+0x35e>
 80068d0:	e018      	b.n	8006904 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068d2:	4b49      	ldr	r3, [pc, #292]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 80068d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068d6:	4a48      	ldr	r2, [pc, #288]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 80068d8:	f023 0301 	bic.w	r3, r3, #1
 80068dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068de:	f7fc f99d 	bl	8002c1c <HAL_GetTick>
 80068e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068e4:	e008      	b.n	80068f8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068e6:	f7fc f999 	bl	8002c1c <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e1ff      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068f8:	4b3f      	ldr	r3, [pc, #252]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 80068fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1f0      	bne.n	80068e6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b00      	cmp	r3, #0
 800690e:	d036      	beq.n	800697e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d019      	beq.n	800694c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006918:	4b37      	ldr	r3, [pc, #220]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a36      	ldr	r2, [pc, #216]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 800691e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006922:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006924:	f7fc f97a 	bl	8002c1c <HAL_GetTick>
 8006928:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800692c:	f7fc f976 	bl	8002c1c <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b02      	cmp	r3, #2
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e1dc      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800693e:	4b2e      	ldr	r3, [pc, #184]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0f0      	beq.n	800692c <HAL_RCC_OscConfig+0x3d8>
 800694a:	e018      	b.n	800697e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800694c:	4b2a      	ldr	r3, [pc, #168]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a29      	ldr	r2, [pc, #164]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 8006952:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006956:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006958:	f7fc f960 	bl	8002c1c <HAL_GetTick>
 800695c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006960:	f7fc f95c 	bl	8002c1c <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e1c2      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006972:	4b21      	ldr	r3, [pc, #132]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1f0      	bne.n	8006960 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 8086 	beq.w	8006a98 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800698c:	4b1b      	ldr	r3, [pc, #108]	@ (80069fc <HAL_RCC_OscConfig+0x4a8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a1a      	ldr	r2, [pc, #104]	@ (80069fc <HAL_RCC_OscConfig+0x4a8>)
 8006992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006996:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006998:	f7fc f940 	bl	8002c1c <HAL_GetTick>
 800699c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069a0:	f7fc f93c 	bl	8002c1c <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b64      	cmp	r3, #100	@ 0x64
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e1a2      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069b2:	4b12      	ldr	r3, [pc, #72]	@ (80069fc <HAL_RCC_OscConfig+0x4a8>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0f0      	beq.n	80069a0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d106      	bne.n	80069d4 <HAL_RCC_OscConfig+0x480>
 80069c6:	4b0c      	ldr	r3, [pc, #48]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 80069c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ca:	4a0b      	ldr	r2, [pc, #44]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 80069cc:	f043 0301 	orr.w	r3, r3, #1
 80069d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80069d2:	e032      	b.n	8006a3a <HAL_RCC_OscConfig+0x4e6>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d111      	bne.n	8006a00 <HAL_RCC_OscConfig+0x4ac>
 80069dc:	4b06      	ldr	r3, [pc, #24]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 80069de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e0:	4a05      	ldr	r2, [pc, #20]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 80069e2:	f023 0301 	bic.w	r3, r3, #1
 80069e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80069e8:	4b03      	ldr	r3, [pc, #12]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 80069ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ec:	4a02      	ldr	r2, [pc, #8]	@ (80069f8 <HAL_RCC_OscConfig+0x4a4>)
 80069ee:	f023 0304 	bic.w	r3, r3, #4
 80069f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80069f4:	e021      	b.n	8006a3a <HAL_RCC_OscConfig+0x4e6>
 80069f6:	bf00      	nop
 80069f8:	58024400 	.word	0x58024400
 80069fc:	58024800 	.word	0x58024800
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2b05      	cmp	r3, #5
 8006a06:	d10c      	bne.n	8006a22 <HAL_RCC_OscConfig+0x4ce>
 8006a08:	4b83      	ldr	r3, [pc, #524]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a0c:	4a82      	ldr	r2, [pc, #520]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006a0e:	f043 0304 	orr.w	r3, r3, #4
 8006a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a14:	4b80      	ldr	r3, [pc, #512]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a18:	4a7f      	ldr	r2, [pc, #508]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006a1a:	f043 0301 	orr.w	r3, r3, #1
 8006a1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a20:	e00b      	b.n	8006a3a <HAL_RCC_OscConfig+0x4e6>
 8006a22:	4b7d      	ldr	r3, [pc, #500]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a26:	4a7c      	ldr	r2, [pc, #496]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006a28:	f023 0301 	bic.w	r3, r3, #1
 8006a2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a2e:	4b7a      	ldr	r3, [pc, #488]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a32:	4a79      	ldr	r2, [pc, #484]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006a34:	f023 0304 	bic.w	r3, r3, #4
 8006a38:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d015      	beq.n	8006a6e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a42:	f7fc f8eb 	bl	8002c1c <HAL_GetTick>
 8006a46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a48:	e00a      	b.n	8006a60 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a4a:	f7fc f8e7 	bl	8002c1c <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e14b      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a60:	4b6d      	ldr	r3, [pc, #436]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d0ee      	beq.n	8006a4a <HAL_RCC_OscConfig+0x4f6>
 8006a6c:	e014      	b.n	8006a98 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a6e:	f7fc f8d5 	bl	8002c1c <HAL_GetTick>
 8006a72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a74:	e00a      	b.n	8006a8c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a76:	f7fc f8d1 	bl	8002c1c <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d901      	bls.n	8006a8c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e135      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a8c:	4b62      	ldr	r3, [pc, #392]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1ee      	bne.n	8006a76 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 812a 	beq.w	8006cf6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006aa2:	4b5d      	ldr	r3, [pc, #372]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006aaa:	2b18      	cmp	r3, #24
 8006aac:	f000 80ba 	beq.w	8006c24 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	f040 8095 	bne.w	8006be4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aba:	4b57      	ldr	r3, [pc, #348]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a56      	ldr	r2, [pc, #344]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006ac0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac6:	f7fc f8a9 	bl	8002c1c <HAL_GetTick>
 8006aca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006acc:	e008      	b.n	8006ae0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ace:	f7fc f8a5 	bl	8002c1c <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e10b      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f0      	bne.n	8006ace <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006aec:	4b4a      	ldr	r3, [pc, #296]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006aee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006af0:	4b4a      	ldr	r3, [pc, #296]	@ (8006c1c <HAL_RCC_OscConfig+0x6c8>)
 8006af2:	4013      	ands	r3, r2
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006afc:	0112      	lsls	r2, r2, #4
 8006afe:	430a      	orrs	r2, r1
 8006b00:	4945      	ldr	r1, [pc, #276]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b14:	3b01      	subs	r3, #1
 8006b16:	025b      	lsls	r3, r3, #9
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b20:	3b01      	subs	r3, #1
 8006b22:	041b      	lsls	r3, r3, #16
 8006b24:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	061b      	lsls	r3, r3, #24
 8006b32:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006b36:	4938      	ldr	r1, [pc, #224]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006b3c:	4b36      	ldr	r3, [pc, #216]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b40:	4a35      	ldr	r2, [pc, #212]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006b42:	f023 0301 	bic.w	r3, r3, #1
 8006b46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b48:	4b33      	ldr	r3, [pc, #204]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006b4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b4c:	4b34      	ldr	r3, [pc, #208]	@ (8006c20 <HAL_RCC_OscConfig+0x6cc>)
 8006b4e:	4013      	ands	r3, r2
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006b54:	00d2      	lsls	r2, r2, #3
 8006b56:	4930      	ldr	r1, [pc, #192]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b60:	f023 020c 	bic.w	r2, r3, #12
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b68:	492b      	ldr	r1, [pc, #172]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b72:	f023 0202 	bic.w	r2, r3, #2
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b7a:	4927      	ldr	r1, [pc, #156]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b80:	4b25      	ldr	r3, [pc, #148]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b84:	4a24      	ldr	r2, [pc, #144]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b8c:	4b22      	ldr	r3, [pc, #136]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b90:	4a21      	ldr	r2, [pc, #132]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006b92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b98:	4b1f      	ldr	r3, [pc, #124]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9c:	4a1e      	ldr	r2, [pc, #120]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006b9e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ba2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006baa:	f043 0301 	orr.w	r3, r3, #1
 8006bae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bb0:	4b19      	ldr	r3, [pc, #100]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a18      	ldr	r2, [pc, #96]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006bb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bbc:	f7fc f82e 	bl	8002c1c <HAL_GetTick>
 8006bc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bc4:	f7fc f82a 	bl	8002c1c <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e090      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bd6:	4b10      	ldr	r3, [pc, #64]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0f0      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x670>
 8006be2:	e088      	b.n	8006cf6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006be4:	4b0c      	ldr	r3, [pc, #48]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a0b      	ldr	r2, [pc, #44]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006bea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf0:	f7fc f814 	bl	8002c1c <HAL_GetTick>
 8006bf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bf8:	f7fc f810 	bl	8002c1c <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e076      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c0a:	4b03      	ldr	r3, [pc, #12]	@ (8006c18 <HAL_RCC_OscConfig+0x6c4>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1f0      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x6a4>
 8006c16:	e06e      	b.n	8006cf6 <HAL_RCC_OscConfig+0x7a2>
 8006c18:	58024400 	.word	0x58024400
 8006c1c:	fffffc0c 	.word	0xfffffc0c
 8006c20:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006c24:	4b36      	ldr	r3, [pc, #216]	@ (8006d00 <HAL_RCC_OscConfig+0x7ac>)
 8006c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c28:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006c2a:	4b35      	ldr	r3, [pc, #212]	@ (8006d00 <HAL_RCC_OscConfig+0x7ac>)
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c2e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d031      	beq.n	8006c9c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f003 0203 	and.w	r2, r3, #3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d12a      	bne.n	8006c9c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	091b      	lsrs	r3, r3, #4
 8006c4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d122      	bne.n	8006c9c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c60:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d11a      	bne.n	8006c9c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	0a5b      	lsrs	r3, r3, #9
 8006c6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c72:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d111      	bne.n	8006c9c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	0c1b      	lsrs	r3, r3, #16
 8006c7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c84:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d108      	bne.n	8006c9c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	0e1b      	lsrs	r3, r3, #24
 8006c8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c96:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d001      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e02b      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006ca0:	4b17      	ldr	r3, [pc, #92]	@ (8006d00 <HAL_RCC_OscConfig+0x7ac>)
 8006ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ca4:	08db      	lsrs	r3, r3, #3
 8006ca6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006caa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d01f      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006cb6:	4b12      	ldr	r3, [pc, #72]	@ (8006d00 <HAL_RCC_OscConfig+0x7ac>)
 8006cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cba:	4a11      	ldr	r2, [pc, #68]	@ (8006d00 <HAL_RCC_OscConfig+0x7ac>)
 8006cbc:	f023 0301 	bic.w	r3, r3, #1
 8006cc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006cc2:	f7fb ffab 	bl	8002c1c <HAL_GetTick>
 8006cc6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006cc8:	bf00      	nop
 8006cca:	f7fb ffa7 	bl	8002c1c <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d0f9      	beq.n	8006cca <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006d00 <HAL_RCC_OscConfig+0x7ac>)
 8006cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cda:	4b0a      	ldr	r3, [pc, #40]	@ (8006d04 <HAL_RCC_OscConfig+0x7b0>)
 8006cdc:	4013      	ands	r3, r2
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006ce2:	00d2      	lsls	r2, r2, #3
 8006ce4:	4906      	ldr	r1, [pc, #24]	@ (8006d00 <HAL_RCC_OscConfig+0x7ac>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006cea:	4b05      	ldr	r3, [pc, #20]	@ (8006d00 <HAL_RCC_OscConfig+0x7ac>)
 8006cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cee:	4a04      	ldr	r2, [pc, #16]	@ (8006d00 <HAL_RCC_OscConfig+0x7ac>)
 8006cf0:	f043 0301 	orr.w	r3, r3, #1
 8006cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3730      	adds	r7, #48	@ 0x30
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	58024400 	.word	0x58024400
 8006d04:	ffff0007 	.word	0xffff0007

08006d08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e19c      	b.n	8007056 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d1c:	4b8a      	ldr	r3, [pc, #552]	@ (8006f48 <HAL_RCC_ClockConfig+0x240>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 030f 	and.w	r3, r3, #15
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d910      	bls.n	8006d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d2a:	4b87      	ldr	r3, [pc, #540]	@ (8006f48 <HAL_RCC_ClockConfig+0x240>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f023 020f 	bic.w	r2, r3, #15
 8006d32:	4985      	ldr	r1, [pc, #532]	@ (8006f48 <HAL_RCC_ClockConfig+0x240>)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d3a:	4b83      	ldr	r3, [pc, #524]	@ (8006f48 <HAL_RCC_ClockConfig+0x240>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d001      	beq.n	8006d4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e184      	b.n	8007056 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d010      	beq.n	8006d7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691a      	ldr	r2, [r3, #16]
 8006d5c:	4b7b      	ldr	r3, [pc, #492]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d908      	bls.n	8006d7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d68:	4b78      	ldr	r3, [pc, #480]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	4975      	ldr	r1, [pc, #468]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0308 	and.w	r3, r3, #8
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d010      	beq.n	8006da8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	695a      	ldr	r2, [r3, #20]
 8006d8a:	4b70      	ldr	r3, [pc, #448]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d908      	bls.n	8006da8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d96:	4b6d      	ldr	r3, [pc, #436]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	496a      	ldr	r1, [pc, #424]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d010      	beq.n	8006dd6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	699a      	ldr	r2, [r3, #24]
 8006db8:	4b64      	ldr	r3, [pc, #400]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d908      	bls.n	8006dd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006dc4:	4b61      	ldr	r3, [pc, #388]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006dc6:	69db      	ldr	r3, [r3, #28]
 8006dc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	495e      	ldr	r1, [pc, #376]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d010      	beq.n	8006e04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	69da      	ldr	r2, [r3, #28]
 8006de6:	4b59      	ldr	r3, [pc, #356]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d908      	bls.n	8006e04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006df2:	4b56      	ldr	r3, [pc, #344]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	4953      	ldr	r1, [pc, #332]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d010      	beq.n	8006e32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	4b4d      	ldr	r3, [pc, #308]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	f003 030f 	and.w	r3, r3, #15
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d908      	bls.n	8006e32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e20:	4b4a      	ldr	r3, [pc, #296]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	f023 020f 	bic.w	r2, r3, #15
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	4947      	ldr	r1, [pc, #284]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d055      	beq.n	8006eea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e3e:	4b43      	ldr	r3, [pc, #268]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	4940      	ldr	r1, [pc, #256]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d107      	bne.n	8006e68 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e58:	4b3c      	ldr	r3, [pc, #240]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d121      	bne.n	8006ea8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e0f6      	b.n	8007056 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d107      	bne.n	8006e80 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e70:	4b36      	ldr	r3, [pc, #216]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d115      	bne.n	8006ea8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e0ea      	b.n	8007056 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d107      	bne.n	8006e98 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e88:	4b30      	ldr	r3, [pc, #192]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d109      	bne.n	8006ea8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e0de      	b.n	8007056 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e98:	4b2c      	ldr	r3, [pc, #176]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e0d6      	b.n	8007056 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ea8:	4b28      	ldr	r3, [pc, #160]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	f023 0207 	bic.w	r2, r3, #7
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	4925      	ldr	r1, [pc, #148]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eba:	f7fb feaf 	bl	8002c1c <HAL_GetTick>
 8006ebe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ec0:	e00a      	b.n	8006ed8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ec2:	f7fb feab 	bl	8002c1c <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e0be      	b.n	8007056 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	00db      	lsls	r3, r3, #3
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d1eb      	bne.n	8006ec2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d010      	beq.n	8006f18 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	4b14      	ldr	r3, [pc, #80]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d208      	bcs.n	8006f18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f06:	4b11      	ldr	r3, [pc, #68]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	f023 020f 	bic.w	r2, r3, #15
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	490e      	ldr	r1, [pc, #56]	@ (8006f4c <HAL_RCC_ClockConfig+0x244>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f18:	4b0b      	ldr	r3, [pc, #44]	@ (8006f48 <HAL_RCC_ClockConfig+0x240>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 030f 	and.w	r3, r3, #15
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d214      	bcs.n	8006f50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f26:	4b08      	ldr	r3, [pc, #32]	@ (8006f48 <HAL_RCC_ClockConfig+0x240>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f023 020f 	bic.w	r2, r3, #15
 8006f2e:	4906      	ldr	r1, [pc, #24]	@ (8006f48 <HAL_RCC_ClockConfig+0x240>)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f36:	4b04      	ldr	r3, [pc, #16]	@ (8006f48 <HAL_RCC_ClockConfig+0x240>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 030f 	and.w	r3, r3, #15
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d005      	beq.n	8006f50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e086      	b.n	8007056 <HAL_RCC_ClockConfig+0x34e>
 8006f48:	52002000 	.word	0x52002000
 8006f4c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d010      	beq.n	8006f7e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691a      	ldr	r2, [r3, #16]
 8006f60:	4b3f      	ldr	r3, [pc, #252]	@ (8007060 <HAL_RCC_ClockConfig+0x358>)
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d208      	bcs.n	8006f7e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f6c:	4b3c      	ldr	r3, [pc, #240]	@ (8007060 <HAL_RCC_ClockConfig+0x358>)
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	4939      	ldr	r1, [pc, #228]	@ (8007060 <HAL_RCC_ClockConfig+0x358>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0308 	and.w	r3, r3, #8
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d010      	beq.n	8006fac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	695a      	ldr	r2, [r3, #20]
 8006f8e:	4b34      	ldr	r3, [pc, #208]	@ (8007060 <HAL_RCC_ClockConfig+0x358>)
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d208      	bcs.n	8006fac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f9a:	4b31      	ldr	r3, [pc, #196]	@ (8007060 <HAL_RCC_ClockConfig+0x358>)
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	492e      	ldr	r1, [pc, #184]	@ (8007060 <HAL_RCC_ClockConfig+0x358>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0310 	and.w	r3, r3, #16
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d010      	beq.n	8006fda <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	699a      	ldr	r2, [r3, #24]
 8006fbc:	4b28      	ldr	r3, [pc, #160]	@ (8007060 <HAL_RCC_ClockConfig+0x358>)
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d208      	bcs.n	8006fda <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006fc8:	4b25      	ldr	r3, [pc, #148]	@ (8007060 <HAL_RCC_ClockConfig+0x358>)
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	4922      	ldr	r1, [pc, #136]	@ (8007060 <HAL_RCC_ClockConfig+0x358>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0320 	and.w	r3, r3, #32
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d010      	beq.n	8007008 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	69da      	ldr	r2, [r3, #28]
 8006fea:	4b1d      	ldr	r3, [pc, #116]	@ (8007060 <HAL_RCC_ClockConfig+0x358>)
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d208      	bcs.n	8007008 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8007060 <HAL_RCC_ClockConfig+0x358>)
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	4917      	ldr	r1, [pc, #92]	@ (8007060 <HAL_RCC_ClockConfig+0x358>)
 8007004:	4313      	orrs	r3, r2
 8007006:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007008:	f000 f834 	bl	8007074 <HAL_RCC_GetSysClockFreq>
 800700c:	4602      	mov	r2, r0
 800700e:	4b14      	ldr	r3, [pc, #80]	@ (8007060 <HAL_RCC_ClockConfig+0x358>)
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	0a1b      	lsrs	r3, r3, #8
 8007014:	f003 030f 	and.w	r3, r3, #15
 8007018:	4912      	ldr	r1, [pc, #72]	@ (8007064 <HAL_RCC_ClockConfig+0x35c>)
 800701a:	5ccb      	ldrb	r3, [r1, r3]
 800701c:	f003 031f 	and.w	r3, r3, #31
 8007020:	fa22 f303 	lsr.w	r3, r2, r3
 8007024:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007026:	4b0e      	ldr	r3, [pc, #56]	@ (8007060 <HAL_RCC_ClockConfig+0x358>)
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	f003 030f 	and.w	r3, r3, #15
 800702e:	4a0d      	ldr	r2, [pc, #52]	@ (8007064 <HAL_RCC_ClockConfig+0x35c>)
 8007030:	5cd3      	ldrb	r3, [r2, r3]
 8007032:	f003 031f 	and.w	r3, r3, #31
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	fa22 f303 	lsr.w	r3, r2, r3
 800703c:	4a0a      	ldr	r2, [pc, #40]	@ (8007068 <HAL_RCC_ClockConfig+0x360>)
 800703e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007040:	4a0a      	ldr	r2, [pc, #40]	@ (800706c <HAL_RCC_ClockConfig+0x364>)
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007046:	4b0a      	ldr	r3, [pc, #40]	@ (8007070 <HAL_RCC_ClockConfig+0x368>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4618      	mov	r0, r3
 800704c:	f7fb fd9c 	bl	8002b88 <HAL_InitTick>
 8007050:	4603      	mov	r3, r0
 8007052:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007054:	7bfb      	ldrb	r3, [r7, #15]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	58024400 	.word	0x58024400
 8007064:	0800cbdc 	.word	0x0800cbdc
 8007068:	24000010 	.word	0x24000010
 800706c:	2400000c 	.word	0x2400000c
 8007070:	24000014 	.word	0x24000014

08007074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007074:	b480      	push	{r7}
 8007076:	b089      	sub	sp, #36	@ 0x24
 8007078:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800707a:	4bb3      	ldr	r3, [pc, #716]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007082:	2b18      	cmp	r3, #24
 8007084:	f200 8155 	bhi.w	8007332 <HAL_RCC_GetSysClockFreq+0x2be>
 8007088:	a201      	add	r2, pc, #4	@ (adr r2, 8007090 <HAL_RCC_GetSysClockFreq+0x1c>)
 800708a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708e:	bf00      	nop
 8007090:	080070f5 	.word	0x080070f5
 8007094:	08007333 	.word	0x08007333
 8007098:	08007333 	.word	0x08007333
 800709c:	08007333 	.word	0x08007333
 80070a0:	08007333 	.word	0x08007333
 80070a4:	08007333 	.word	0x08007333
 80070a8:	08007333 	.word	0x08007333
 80070ac:	08007333 	.word	0x08007333
 80070b0:	0800711b 	.word	0x0800711b
 80070b4:	08007333 	.word	0x08007333
 80070b8:	08007333 	.word	0x08007333
 80070bc:	08007333 	.word	0x08007333
 80070c0:	08007333 	.word	0x08007333
 80070c4:	08007333 	.word	0x08007333
 80070c8:	08007333 	.word	0x08007333
 80070cc:	08007333 	.word	0x08007333
 80070d0:	08007121 	.word	0x08007121
 80070d4:	08007333 	.word	0x08007333
 80070d8:	08007333 	.word	0x08007333
 80070dc:	08007333 	.word	0x08007333
 80070e0:	08007333 	.word	0x08007333
 80070e4:	08007333 	.word	0x08007333
 80070e8:	08007333 	.word	0x08007333
 80070ec:	08007333 	.word	0x08007333
 80070f0:	08007127 	.word	0x08007127
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070f4:	4b94      	ldr	r3, [pc, #592]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d009      	beq.n	8007114 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007100:	4b91      	ldr	r3, [pc, #580]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	08db      	lsrs	r3, r3, #3
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	4a90      	ldr	r2, [pc, #576]	@ (800734c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800710c:	fa22 f303 	lsr.w	r3, r2, r3
 8007110:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007112:	e111      	b.n	8007338 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007114:	4b8d      	ldr	r3, [pc, #564]	@ (800734c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007116:	61bb      	str	r3, [r7, #24]
      break;
 8007118:	e10e      	b.n	8007338 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800711a:	4b8d      	ldr	r3, [pc, #564]	@ (8007350 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800711c:	61bb      	str	r3, [r7, #24]
      break;
 800711e:	e10b      	b.n	8007338 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007120:	4b8c      	ldr	r3, [pc, #560]	@ (8007354 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007122:	61bb      	str	r3, [r7, #24]
      break;
 8007124:	e108      	b.n	8007338 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007126:	4b88      	ldr	r3, [pc, #544]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712a:	f003 0303 	and.w	r3, r3, #3
 800712e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007130:	4b85      	ldr	r3, [pc, #532]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007134:	091b      	lsrs	r3, r3, #4
 8007136:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800713a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800713c:	4b82      	ldr	r3, [pc, #520]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800713e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007146:	4b80      	ldr	r3, [pc, #512]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800714a:	08db      	lsrs	r3, r3, #3
 800714c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	fb02 f303 	mul.w	r3, r2, r3
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 80e1 	beq.w	800732c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2b02      	cmp	r3, #2
 800716e:	f000 8083 	beq.w	8007278 <HAL_RCC_GetSysClockFreq+0x204>
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2b02      	cmp	r3, #2
 8007176:	f200 80a1 	bhi.w	80072bc <HAL_RCC_GetSysClockFreq+0x248>
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <HAL_RCC_GetSysClockFreq+0x114>
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d056      	beq.n	8007234 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007186:	e099      	b.n	80072bc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007188:	4b6f      	ldr	r3, [pc, #444]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0320 	and.w	r3, r3, #32
 8007190:	2b00      	cmp	r3, #0
 8007192:	d02d      	beq.n	80071f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007194:	4b6c      	ldr	r3, [pc, #432]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	08db      	lsrs	r3, r3, #3
 800719a:	f003 0303 	and.w	r3, r3, #3
 800719e:	4a6b      	ldr	r2, [pc, #428]	@ (800734c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071a0:	fa22 f303 	lsr.w	r3, r2, r3
 80071a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071be:	4b62      	ldr	r3, [pc, #392]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80071d2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007358 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80071ee:	e087      	b.n	8007300 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800735c <HAL_RCC_GetSysClockFreq+0x2e8>
 80071fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007202:	4b51      	ldr	r3, [pc, #324]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007212:	ed97 6a02 	vldr	s12, [r7, #8]
 8007216:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007358 <HAL_RCC_GetSysClockFreq+0x2e4>
 800721a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007222:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007232:	e065      	b.n	8007300 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007360 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007246:	4b40      	ldr	r3, [pc, #256]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800724a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007256:	ed97 6a02 	vldr	s12, [r7, #8]
 800725a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007358 <HAL_RCC_GetSysClockFreq+0x2e4>
 800725e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007266:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800726a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007272:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007276:	e043      	b.n	8007300 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007282:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007364 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800728a:	4b2f      	ldr	r3, [pc, #188]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800728c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729a:	ed97 6a02 	vldr	s12, [r7, #8]
 800729e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007358 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072ba:	e021      	b.n	8007300 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007360 <HAL_RCC_GetSysClockFreq+0x2ec>
 80072ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072de:	ed97 6a02 	vldr	s12, [r7, #8]
 80072e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007358 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007300:	4b11      	ldr	r3, [pc, #68]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007304:	0a5b      	lsrs	r3, r3, #9
 8007306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800730a:	3301      	adds	r3, #1
 800730c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	ee07 3a90 	vmov	s15, r3
 8007314:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007318:	edd7 6a07 	vldr	s13, [r7, #28]
 800731c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007324:	ee17 3a90 	vmov	r3, s15
 8007328:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800732a:	e005      	b.n	8007338 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	61bb      	str	r3, [r7, #24]
      break;
 8007330:	e002      	b.n	8007338 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007332:	4b07      	ldr	r3, [pc, #28]	@ (8007350 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007334:	61bb      	str	r3, [r7, #24]
      break;
 8007336:	bf00      	nop
  }

  return sysclockfreq;
 8007338:	69bb      	ldr	r3, [r7, #24]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3724      	adds	r7, #36	@ 0x24
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	58024400 	.word	0x58024400
 800734c:	03d09000 	.word	0x03d09000
 8007350:	003d0900 	.word	0x003d0900
 8007354:	016e3600 	.word	0x016e3600
 8007358:	46000000 	.word	0x46000000
 800735c:	4c742400 	.word	0x4c742400
 8007360:	4a742400 	.word	0x4a742400
 8007364:	4bb71b00 	.word	0x4bb71b00

08007368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800736e:	f7ff fe81 	bl	8007074 <HAL_RCC_GetSysClockFreq>
 8007372:	4602      	mov	r2, r0
 8007374:	4b10      	ldr	r3, [pc, #64]	@ (80073b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	0a1b      	lsrs	r3, r3, #8
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	490f      	ldr	r1, [pc, #60]	@ (80073bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007380:	5ccb      	ldrb	r3, [r1, r3]
 8007382:	f003 031f 	and.w	r3, r3, #31
 8007386:	fa22 f303 	lsr.w	r3, r2, r3
 800738a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800738c:	4b0a      	ldr	r3, [pc, #40]	@ (80073b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	f003 030f 	and.w	r3, r3, #15
 8007394:	4a09      	ldr	r2, [pc, #36]	@ (80073bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007396:	5cd3      	ldrb	r3, [r2, r3]
 8007398:	f003 031f 	and.w	r3, r3, #31
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	fa22 f303 	lsr.w	r3, r2, r3
 80073a2:	4a07      	ldr	r2, [pc, #28]	@ (80073c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80073a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073a6:	4a07      	ldr	r2, [pc, #28]	@ (80073c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80073ac:	4b04      	ldr	r3, [pc, #16]	@ (80073c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80073ae:	681b      	ldr	r3, [r3, #0]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	58024400 	.word	0x58024400
 80073bc:	0800cbdc 	.word	0x0800cbdc
 80073c0:	24000010 	.word	0x24000010
 80073c4:	2400000c 	.word	0x2400000c

080073c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80073cc:	f7ff ffcc 	bl	8007368 <HAL_RCC_GetHCLKFreq>
 80073d0:	4602      	mov	r2, r0
 80073d2:	4b06      	ldr	r3, [pc, #24]	@ (80073ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	091b      	lsrs	r3, r3, #4
 80073d8:	f003 0307 	and.w	r3, r3, #7
 80073dc:	4904      	ldr	r1, [pc, #16]	@ (80073f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073de:	5ccb      	ldrb	r3, [r1, r3]
 80073e0:	f003 031f 	and.w	r3, r3, #31
 80073e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	58024400 	.word	0x58024400
 80073f0:	0800cbdc 	.word	0x0800cbdc

080073f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80073f8:	f7ff ffb6 	bl	8007368 <HAL_RCC_GetHCLKFreq>
 80073fc:	4602      	mov	r2, r0
 80073fe:	4b06      	ldr	r3, [pc, #24]	@ (8007418 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	0a1b      	lsrs	r3, r3, #8
 8007404:	f003 0307 	and.w	r3, r3, #7
 8007408:	4904      	ldr	r1, [pc, #16]	@ (800741c <HAL_RCC_GetPCLK2Freq+0x28>)
 800740a:	5ccb      	ldrb	r3, [r1, r3]
 800740c:	f003 031f 	and.w	r3, r3, #31
 8007410:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007414:	4618      	mov	r0, r3
 8007416:	bd80      	pop	{r7, pc}
 8007418:	58024400 	.word	0x58024400
 800741c:	0800cbdc 	.word	0x0800cbdc

08007420 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007424:	b0c6      	sub	sp, #280	@ 0x118
 8007426:	af00      	add	r7, sp, #0
 8007428:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800742c:	2300      	movs	r3, #0
 800742e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007432:	2300      	movs	r3, #0
 8007434:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007444:	2500      	movs	r5, #0
 8007446:	ea54 0305 	orrs.w	r3, r4, r5
 800744a:	d049      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800744c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007450:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007452:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007456:	d02f      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007458:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800745c:	d828      	bhi.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800745e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007462:	d01a      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007464:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007468:	d822      	bhi.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800746e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007472:	d007      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007474:	e01c      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007476:	4bab      	ldr	r3, [pc, #684]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747a:	4aaa      	ldr	r2, [pc, #680]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800747c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007480:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007482:	e01a      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007488:	3308      	adds	r3, #8
 800748a:	2102      	movs	r1, #2
 800748c:	4618      	mov	r0, r3
 800748e:	f002 fa49 	bl	8009924 <RCCEx_PLL2_Config>
 8007492:	4603      	mov	r3, r0
 8007494:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007498:	e00f      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800749a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800749e:	3328      	adds	r3, #40	@ 0x28
 80074a0:	2102      	movs	r1, #2
 80074a2:	4618      	mov	r0, r3
 80074a4:	f002 faf0 	bl	8009a88 <RCCEx_PLL3_Config>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80074ae:	e004      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074b6:	e000      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80074b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10a      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80074c2:	4b98      	ldr	r3, [pc, #608]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80074ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074d0:	4a94      	ldr	r2, [pc, #592]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074d2:	430b      	orrs	r3, r1
 80074d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80074d6:	e003      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80074ec:	f04f 0900 	mov.w	r9, #0
 80074f0:	ea58 0309 	orrs.w	r3, r8, r9
 80074f4:	d047      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80074f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	d82a      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007500:	a201      	add	r2, pc, #4	@ (adr r2, 8007508 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007506:	bf00      	nop
 8007508:	0800751d 	.word	0x0800751d
 800750c:	0800752b 	.word	0x0800752b
 8007510:	08007541 	.word	0x08007541
 8007514:	0800755f 	.word	0x0800755f
 8007518:	0800755f 	.word	0x0800755f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800751c:	4b81      	ldr	r3, [pc, #516]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800751e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007520:	4a80      	ldr	r2, [pc, #512]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007528:	e01a      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800752a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752e:	3308      	adds	r3, #8
 8007530:	2100      	movs	r1, #0
 8007532:	4618      	mov	r0, r3
 8007534:	f002 f9f6 	bl	8009924 <RCCEx_PLL2_Config>
 8007538:	4603      	mov	r3, r0
 800753a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800753e:	e00f      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007544:	3328      	adds	r3, #40	@ 0x28
 8007546:	2100      	movs	r1, #0
 8007548:	4618      	mov	r0, r3
 800754a:	f002 fa9d 	bl	8009a88 <RCCEx_PLL3_Config>
 800754e:	4603      	mov	r3, r0
 8007550:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007554:	e004      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800755c:	e000      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800755e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007560:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10a      	bne.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007568:	4b6e      	ldr	r3, [pc, #440]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800756a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800756c:	f023 0107 	bic.w	r1, r3, #7
 8007570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007576:	4a6b      	ldr	r2, [pc, #428]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007578:	430b      	orrs	r3, r1
 800757a:	6513      	str	r3, [r2, #80]	@ 0x50
 800757c:	e003      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800757e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007582:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007592:	f04f 0b00 	mov.w	fp, #0
 8007596:	ea5a 030b 	orrs.w	r3, sl, fp
 800759a:	d05b      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80075a4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80075a8:	d03b      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80075aa:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80075ae:	d834      	bhi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80075b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80075b4:	d037      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80075b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80075ba:	d82e      	bhi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80075bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80075c0:	d033      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80075c2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80075c6:	d828      	bhi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80075c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075cc:	d01a      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80075ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075d2:	d822      	bhi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d003      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80075d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075dc:	d007      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80075de:	e01c      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075e0:	4b50      	ldr	r3, [pc, #320]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e4:	4a4f      	ldr	r2, [pc, #316]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075ec:	e01e      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f2:	3308      	adds	r3, #8
 80075f4:	2100      	movs	r1, #0
 80075f6:	4618      	mov	r0, r3
 80075f8:	f002 f994 	bl	8009924 <RCCEx_PLL2_Config>
 80075fc:	4603      	mov	r3, r0
 80075fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007602:	e013      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007608:	3328      	adds	r3, #40	@ 0x28
 800760a:	2100      	movs	r1, #0
 800760c:	4618      	mov	r0, r3
 800760e:	f002 fa3b 	bl	8009a88 <RCCEx_PLL3_Config>
 8007612:	4603      	mov	r3, r0
 8007614:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007618:	e008      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007620:	e004      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007622:	bf00      	nop
 8007624:	e002      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007626:	bf00      	nop
 8007628:	e000      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800762a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800762c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10b      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007634:	4b3b      	ldr	r3, [pc, #236]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007638:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800763c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007640:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007644:	4a37      	ldr	r2, [pc, #220]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007646:	430b      	orrs	r3, r1
 8007648:	6593      	str	r3, [r2, #88]	@ 0x58
 800764a:	e003      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007650:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007660:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007664:	2300      	movs	r3, #0
 8007666:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800766a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800766e:	460b      	mov	r3, r1
 8007670:	4313      	orrs	r3, r2
 8007672:	d05d      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007678:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800767c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007680:	d03b      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007682:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007686:	d834      	bhi.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007688:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800768c:	d037      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800768e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007692:	d82e      	bhi.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007694:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007698:	d033      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800769a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800769e:	d828      	bhi.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80076a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076a4:	d01a      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80076a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076aa:	d822      	bhi.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d003      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80076b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076b4:	d007      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80076b6:	e01c      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076bc:	4a19      	ldr	r2, [pc, #100]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076c4:	e01e      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ca:	3308      	adds	r3, #8
 80076cc:	2100      	movs	r1, #0
 80076ce:	4618      	mov	r0, r3
 80076d0:	f002 f928 	bl	8009924 <RCCEx_PLL2_Config>
 80076d4:	4603      	mov	r3, r0
 80076d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80076da:	e013      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e0:	3328      	adds	r3, #40	@ 0x28
 80076e2:	2100      	movs	r1, #0
 80076e4:	4618      	mov	r0, r3
 80076e6:	f002 f9cf 	bl	8009a88 <RCCEx_PLL3_Config>
 80076ea:	4603      	mov	r3, r0
 80076ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076f0:	e008      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076f8:	e004      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80076fa:	bf00      	nop
 80076fc:	e002      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80076fe:	bf00      	nop
 8007700:	e000      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007704:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10d      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800770c:	4b05      	ldr	r3, [pc, #20]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800770e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007710:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007718:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800771c:	4a01      	ldr	r2, [pc, #4]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800771e:	430b      	orrs	r3, r1
 8007720:	6593      	str	r3, [r2, #88]	@ 0x58
 8007722:	e005      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007724:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007728:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800772c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800773c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007740:	2300      	movs	r3, #0
 8007742:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007746:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800774a:	460b      	mov	r3, r1
 800774c:	4313      	orrs	r3, r2
 800774e:	d03a      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007756:	2b30      	cmp	r3, #48	@ 0x30
 8007758:	d01f      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800775a:	2b30      	cmp	r3, #48	@ 0x30
 800775c:	d819      	bhi.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800775e:	2b20      	cmp	r3, #32
 8007760:	d00c      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007762:	2b20      	cmp	r3, #32
 8007764:	d815      	bhi.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d019      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800776a:	2b10      	cmp	r3, #16
 800776c:	d111      	bne.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800776e:	4baa      	ldr	r3, [pc, #680]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007772:	4aa9      	ldr	r2, [pc, #676]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007778:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800777a:	e011      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800777c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007780:	3308      	adds	r3, #8
 8007782:	2102      	movs	r1, #2
 8007784:	4618      	mov	r0, r3
 8007786:	f002 f8cd 	bl	8009924 <RCCEx_PLL2_Config>
 800778a:	4603      	mov	r3, r0
 800778c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007790:	e006      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007798:	e002      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800779a:	bf00      	nop
 800779c:	e000      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800779e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10a      	bne.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80077a8:	4b9b      	ldr	r3, [pc, #620]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077ac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80077b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077b6:	4a98      	ldr	r2, [pc, #608]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077b8:	430b      	orrs	r3, r1
 80077ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80077bc:	e003      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80077c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80077d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077d6:	2300      	movs	r3, #0
 80077d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80077dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80077e0:	460b      	mov	r3, r1
 80077e2:	4313      	orrs	r3, r2
 80077e4:	d051      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80077e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077f0:	d035      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80077f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077f6:	d82e      	bhi.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80077f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077fc:	d031      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80077fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007802:	d828      	bhi.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007804:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007808:	d01a      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800780a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800780e:	d822      	bhi.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007810:	2b00      	cmp	r3, #0
 8007812:	d003      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007818:	d007      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800781a:	e01c      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800781c:	4b7e      	ldr	r3, [pc, #504]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800781e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007820:	4a7d      	ldr	r2, [pc, #500]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007826:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007828:	e01c      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800782a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782e:	3308      	adds	r3, #8
 8007830:	2100      	movs	r1, #0
 8007832:	4618      	mov	r0, r3
 8007834:	f002 f876 	bl	8009924 <RCCEx_PLL2_Config>
 8007838:	4603      	mov	r3, r0
 800783a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800783e:	e011      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007844:	3328      	adds	r3, #40	@ 0x28
 8007846:	2100      	movs	r1, #0
 8007848:	4618      	mov	r0, r3
 800784a:	f002 f91d 	bl	8009a88 <RCCEx_PLL3_Config>
 800784e:	4603      	mov	r3, r0
 8007850:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007854:	e006      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800785c:	e002      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800785e:	bf00      	nop
 8007860:	e000      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007862:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007864:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10a      	bne.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800786c:	4b6a      	ldr	r3, [pc, #424]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800786e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007870:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800787a:	4a67      	ldr	r2, [pc, #412]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800787c:	430b      	orrs	r3, r1
 800787e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007880:	e003      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007882:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007886:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800788a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007892:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007896:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800789a:	2300      	movs	r3, #0
 800789c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80078a0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4313      	orrs	r3, r2
 80078a8:	d053      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80078aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078b4:	d033      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80078b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078ba:	d82c      	bhi.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80078bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078c0:	d02f      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80078c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078c6:	d826      	bhi.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80078c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078cc:	d02b      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80078ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078d2:	d820      	bhi.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80078d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078d8:	d012      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80078da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078de:	d81a      	bhi.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d022      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80078e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078e8:	d115      	bne.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ee:	3308      	adds	r3, #8
 80078f0:	2101      	movs	r1, #1
 80078f2:	4618      	mov	r0, r3
 80078f4:	f002 f816 	bl	8009924 <RCCEx_PLL2_Config>
 80078f8:	4603      	mov	r3, r0
 80078fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80078fe:	e015      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007904:	3328      	adds	r3, #40	@ 0x28
 8007906:	2101      	movs	r1, #1
 8007908:	4618      	mov	r0, r3
 800790a:	f002 f8bd 	bl	8009a88 <RCCEx_PLL3_Config>
 800790e:	4603      	mov	r3, r0
 8007910:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007914:	e00a      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800791c:	e006      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800791e:	bf00      	nop
 8007920:	e004      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007922:	bf00      	nop
 8007924:	e002      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007926:	bf00      	nop
 8007928:	e000      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800792a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800792c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10a      	bne.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007934:	4b38      	ldr	r3, [pc, #224]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007938:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800793c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007942:	4a35      	ldr	r2, [pc, #212]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007944:	430b      	orrs	r3, r1
 8007946:	6513      	str	r3, [r2, #80]	@ 0x50
 8007948:	e003      	b.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800794e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800795e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007962:	2300      	movs	r3, #0
 8007964:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007968:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800796c:	460b      	mov	r3, r1
 800796e:	4313      	orrs	r3, r2
 8007970:	d058      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007976:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800797a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800797e:	d033      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007980:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007984:	d82c      	bhi.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800798a:	d02f      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800798c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007990:	d826      	bhi.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007992:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007996:	d02b      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007998:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800799c:	d820      	bhi.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800799e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079a2:	d012      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80079a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079a8:	d81a      	bhi.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d022      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80079ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079b2:	d115      	bne.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b8:	3308      	adds	r3, #8
 80079ba:	2101      	movs	r1, #1
 80079bc:	4618      	mov	r0, r3
 80079be:	f001 ffb1 	bl	8009924 <RCCEx_PLL2_Config>
 80079c2:	4603      	mov	r3, r0
 80079c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80079c8:	e015      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ce:	3328      	adds	r3, #40	@ 0x28
 80079d0:	2101      	movs	r1, #1
 80079d2:	4618      	mov	r0, r3
 80079d4:	f002 f858 	bl	8009a88 <RCCEx_PLL3_Config>
 80079d8:	4603      	mov	r3, r0
 80079da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80079de:	e00a      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079e6:	e006      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80079e8:	bf00      	nop
 80079ea:	e004      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80079ec:	bf00      	nop
 80079ee:	e002      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80079f0:	bf00      	nop
 80079f2:	e000      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80079f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10e      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80079fe:	4b06      	ldr	r3, [pc, #24]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a02:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007a0e:	4a02      	ldr	r2, [pc, #8]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a10:	430b      	orrs	r3, r1
 8007a12:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a14:	e006      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007a16:	bf00      	nop
 8007a18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007a30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a34:	2300      	movs	r3, #0
 8007a36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007a3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4313      	orrs	r3, r2
 8007a42:	d037      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a4e:	d00e      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007a50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a54:	d816      	bhi.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d018      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007a5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a5e:	d111      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a60:	4bc4      	ldr	r3, [pc, #784]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a64:	4ac3      	ldr	r2, [pc, #780]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a6c:	e00f      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a72:	3308      	adds	r3, #8
 8007a74:	2101      	movs	r1, #1
 8007a76:	4618      	mov	r0, r3
 8007a78:	f001 ff54 	bl	8009924 <RCCEx_PLL2_Config>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a82:	e004      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a8a:	e000      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10a      	bne.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a96:	4bb7      	ldr	r3, [pc, #732]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a9a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aa4:	4ab3      	ldr	r2, [pc, #716]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007aa6:	430b      	orrs	r3, r1
 8007aa8:	6513      	str	r3, [r2, #80]	@ 0x50
 8007aaa:	e003      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ab0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007aca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007ace:	460b      	mov	r3, r1
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	d039      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d81c      	bhi.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007ade:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae4:	08007b21 	.word	0x08007b21
 8007ae8:	08007af5 	.word	0x08007af5
 8007aec:	08007b03 	.word	0x08007b03
 8007af0:	08007b21 	.word	0x08007b21
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007af4:	4b9f      	ldr	r3, [pc, #636]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af8:	4a9e      	ldr	r2, [pc, #632]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007afe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007b00:	e00f      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b06:	3308      	adds	r3, #8
 8007b08:	2102      	movs	r1, #2
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f001 ff0a 	bl	8009924 <RCCEx_PLL2_Config>
 8007b10:	4603      	mov	r3, r0
 8007b12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007b16:	e004      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b1e:	e000      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10a      	bne.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007b2a:	4b92      	ldr	r3, [pc, #584]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b2e:	f023 0103 	bic.w	r1, r3, #3
 8007b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b38:	4a8e      	ldr	r2, [pc, #568]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b3a:	430b      	orrs	r3, r1
 8007b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b3e:	e003      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b50:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007b54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4313      	orrs	r3, r2
 8007b66:	f000 8099 	beq.w	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b6a:	4b83      	ldr	r3, [pc, #524]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a82      	ldr	r2, [pc, #520]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b76:	f7fb f851 	bl	8002c1c <HAL_GetTick>
 8007b7a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b7e:	e00b      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b80:	f7fb f84c 	bl	8002c1c <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	2b64      	cmp	r3, #100	@ 0x64
 8007b8e:	d903      	bls.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b96:	e005      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b98:	4b77      	ldr	r3, [pc, #476]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d0ed      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d173      	bne.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007bac:	4b71      	ldr	r3, [pc, #452]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007bb8:	4053      	eors	r3, r2
 8007bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d015      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007bc2:	4b6c      	ldr	r3, [pc, #432]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bce:	4b69      	ldr	r3, [pc, #420]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bd2:	4a68      	ldr	r2, [pc, #416]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bd8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007bda:	4b66      	ldr	r3, [pc, #408]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bde:	4a65      	ldr	r2, [pc, #404]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007be0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007be4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007be6:	4a63      	ldr	r2, [pc, #396]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bfa:	d118      	bne.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bfc:	f7fb f80e 	bl	8002c1c <HAL_GetTick>
 8007c00:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c04:	e00d      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c06:	f7fb f809 	bl	8002c1c <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007c10:	1ad2      	subs	r2, r2, r3
 8007c12:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d903      	bls.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007c20:	e005      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c22:	4b54      	ldr	r3, [pc, #336]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d0eb      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007c2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d129      	bne.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c46:	d10e      	bne.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007c48:	4b4a      	ldr	r3, [pc, #296]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c58:	091a      	lsrs	r2, r3, #4
 8007c5a:	4b48      	ldr	r3, [pc, #288]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	4a45      	ldr	r2, [pc, #276]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c60:	430b      	orrs	r3, r1
 8007c62:	6113      	str	r3, [r2, #16]
 8007c64:	e005      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007c66:	4b43      	ldr	r3, [pc, #268]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	4a42      	ldr	r2, [pc, #264]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007c70:	6113      	str	r3, [r2, #16]
 8007c72:	4b40      	ldr	r3, [pc, #256]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c74:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c82:	4a3c      	ldr	r2, [pc, #240]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c84:	430b      	orrs	r3, r1
 8007c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c88:	e008      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007c92:	e003      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca4:	f002 0301 	and.w	r3, r2, #1
 8007ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007cac:	2300      	movs	r3, #0
 8007cae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007cb2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	f000 808f 	beq.w	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007cc4:	2b28      	cmp	r3, #40	@ 0x28
 8007cc6:	d871      	bhi.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cce:	bf00      	nop
 8007cd0:	08007db5 	.word	0x08007db5
 8007cd4:	08007dad 	.word	0x08007dad
 8007cd8:	08007dad 	.word	0x08007dad
 8007cdc:	08007dad 	.word	0x08007dad
 8007ce0:	08007dad 	.word	0x08007dad
 8007ce4:	08007dad 	.word	0x08007dad
 8007ce8:	08007dad 	.word	0x08007dad
 8007cec:	08007dad 	.word	0x08007dad
 8007cf0:	08007d81 	.word	0x08007d81
 8007cf4:	08007dad 	.word	0x08007dad
 8007cf8:	08007dad 	.word	0x08007dad
 8007cfc:	08007dad 	.word	0x08007dad
 8007d00:	08007dad 	.word	0x08007dad
 8007d04:	08007dad 	.word	0x08007dad
 8007d08:	08007dad 	.word	0x08007dad
 8007d0c:	08007dad 	.word	0x08007dad
 8007d10:	08007d97 	.word	0x08007d97
 8007d14:	08007dad 	.word	0x08007dad
 8007d18:	08007dad 	.word	0x08007dad
 8007d1c:	08007dad 	.word	0x08007dad
 8007d20:	08007dad 	.word	0x08007dad
 8007d24:	08007dad 	.word	0x08007dad
 8007d28:	08007dad 	.word	0x08007dad
 8007d2c:	08007dad 	.word	0x08007dad
 8007d30:	08007db5 	.word	0x08007db5
 8007d34:	08007dad 	.word	0x08007dad
 8007d38:	08007dad 	.word	0x08007dad
 8007d3c:	08007dad 	.word	0x08007dad
 8007d40:	08007dad 	.word	0x08007dad
 8007d44:	08007dad 	.word	0x08007dad
 8007d48:	08007dad 	.word	0x08007dad
 8007d4c:	08007dad 	.word	0x08007dad
 8007d50:	08007db5 	.word	0x08007db5
 8007d54:	08007dad 	.word	0x08007dad
 8007d58:	08007dad 	.word	0x08007dad
 8007d5c:	08007dad 	.word	0x08007dad
 8007d60:	08007dad 	.word	0x08007dad
 8007d64:	08007dad 	.word	0x08007dad
 8007d68:	08007dad 	.word	0x08007dad
 8007d6c:	08007dad 	.word	0x08007dad
 8007d70:	08007db5 	.word	0x08007db5
 8007d74:	58024400 	.word	0x58024400
 8007d78:	58024800 	.word	0x58024800
 8007d7c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d84:	3308      	adds	r3, #8
 8007d86:	2101      	movs	r1, #1
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f001 fdcb 	bl	8009924 <RCCEx_PLL2_Config>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d94:	e00f      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d9a:	3328      	adds	r3, #40	@ 0x28
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f001 fe72 	bl	8009a88 <RCCEx_PLL3_Config>
 8007da4:	4603      	mov	r3, r0
 8007da6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007daa:	e004      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007db2:	e000      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007db6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007dbe:	4bbf      	ldr	r3, [pc, #764]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dc2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dcc:	4abb      	ldr	r2, [pc, #748]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007dce:	430b      	orrs	r3, r1
 8007dd0:	6553      	str	r3, [r2, #84]	@ 0x54
 8007dd2:	e003      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de4:	f002 0302 	and.w	r3, r2, #2
 8007de8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007dec:	2300      	movs	r3, #0
 8007dee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007df2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007df6:	460b      	mov	r3, r1
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	d041      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e02:	2b05      	cmp	r3, #5
 8007e04:	d824      	bhi.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007e06:	a201      	add	r2, pc, #4	@ (adr r2, 8007e0c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0c:	08007e59 	.word	0x08007e59
 8007e10:	08007e25 	.word	0x08007e25
 8007e14:	08007e3b 	.word	0x08007e3b
 8007e18:	08007e59 	.word	0x08007e59
 8007e1c:	08007e59 	.word	0x08007e59
 8007e20:	08007e59 	.word	0x08007e59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e28:	3308      	adds	r3, #8
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f001 fd79 	bl	8009924 <RCCEx_PLL2_Config>
 8007e32:	4603      	mov	r3, r0
 8007e34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007e38:	e00f      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e3e:	3328      	adds	r3, #40	@ 0x28
 8007e40:	2101      	movs	r1, #1
 8007e42:	4618      	mov	r0, r3
 8007e44:	f001 fe20 	bl	8009a88 <RCCEx_PLL3_Config>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007e4e:	e004      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e56:	e000      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10a      	bne.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007e62:	4b96      	ldr	r3, [pc, #600]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e66:	f023 0107 	bic.w	r1, r3, #7
 8007e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e70:	4a92      	ldr	r2, [pc, #584]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e72:	430b      	orrs	r3, r1
 8007e74:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e76:	e003      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e88:	f002 0304 	and.w	r3, r2, #4
 8007e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e90:	2300      	movs	r3, #0
 8007e92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e96:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	d044      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ea8:	2b05      	cmp	r3, #5
 8007eaa:	d825      	bhi.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007eac:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb2:	bf00      	nop
 8007eb4:	08007f01 	.word	0x08007f01
 8007eb8:	08007ecd 	.word	0x08007ecd
 8007ebc:	08007ee3 	.word	0x08007ee3
 8007ec0:	08007f01 	.word	0x08007f01
 8007ec4:	08007f01 	.word	0x08007f01
 8007ec8:	08007f01 	.word	0x08007f01
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f001 fd25 	bl	8009924 <RCCEx_PLL2_Config>
 8007eda:	4603      	mov	r3, r0
 8007edc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007ee0:	e00f      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee6:	3328      	adds	r3, #40	@ 0x28
 8007ee8:	2101      	movs	r1, #1
 8007eea:	4618      	mov	r0, r3
 8007eec:	f001 fdcc 	bl	8009a88 <RCCEx_PLL3_Config>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007ef6:	e004      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007efe:	e000      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10b      	bne.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f0a:	4b6c      	ldr	r3, [pc, #432]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f0e:	f023 0107 	bic.w	r1, r3, #7
 8007f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f1a:	4a68      	ldr	r2, [pc, #416]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f20:	e003      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f002 0320 	and.w	r3, r2, #32
 8007f36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007f40:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4313      	orrs	r3, r2
 8007f48:	d055      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f56:	d033      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f5c:	d82c      	bhi.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f62:	d02f      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f68:	d826      	bhi.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007f6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f6e:	d02b      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007f70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f74:	d820      	bhi.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f7a:	d012      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007f7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f80:	d81a      	bhi.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d022      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007f86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f8a:	d115      	bne.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f90:	3308      	adds	r3, #8
 8007f92:	2100      	movs	r1, #0
 8007f94:	4618      	mov	r0, r3
 8007f96:	f001 fcc5 	bl	8009924 <RCCEx_PLL2_Config>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007fa0:	e015      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa6:	3328      	adds	r3, #40	@ 0x28
 8007fa8:	2102      	movs	r1, #2
 8007faa:	4618      	mov	r0, r3
 8007fac:	f001 fd6c 	bl	8009a88 <RCCEx_PLL3_Config>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007fb6:	e00a      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007fbe:	e006      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007fc0:	bf00      	nop
 8007fc2:	e004      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007fc4:	bf00      	nop
 8007fc6:	e002      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007fc8:	bf00      	nop
 8007fca:	e000      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10b      	bne.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007fd6:	4b39      	ldr	r3, [pc, #228]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fda:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fe6:	4a35      	ldr	r2, [pc, #212]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007fe8:	430b      	orrs	r3, r1
 8007fea:	6553      	str	r3, [r2, #84]	@ 0x54
 8007fec:	e003      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ff2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008002:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008006:	2300      	movs	r3, #0
 8008008:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800800c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008010:	460b      	mov	r3, r1
 8008012:	4313      	orrs	r3, r2
 8008014:	d058      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800801a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800801e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008022:	d033      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008024:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008028:	d82c      	bhi.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800802a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800802e:	d02f      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008034:	d826      	bhi.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008036:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800803a:	d02b      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800803c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008040:	d820      	bhi.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008042:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008046:	d012      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008048:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800804c:	d81a      	bhi.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800804e:	2b00      	cmp	r3, #0
 8008050:	d022      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008056:	d115      	bne.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800805c:	3308      	adds	r3, #8
 800805e:	2100      	movs	r1, #0
 8008060:	4618      	mov	r0, r3
 8008062:	f001 fc5f 	bl	8009924 <RCCEx_PLL2_Config>
 8008066:	4603      	mov	r3, r0
 8008068:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800806c:	e015      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800806e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008072:	3328      	adds	r3, #40	@ 0x28
 8008074:	2102      	movs	r1, #2
 8008076:	4618      	mov	r0, r3
 8008078:	f001 fd06 	bl	8009a88 <RCCEx_PLL3_Config>
 800807c:	4603      	mov	r3, r0
 800807e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008082:	e00a      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800808a:	e006      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800808c:	bf00      	nop
 800808e:	e004      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008090:	bf00      	nop
 8008092:	e002      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008094:	bf00      	nop
 8008096:	e000      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800809a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10e      	bne.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80080a2:	4b06      	ldr	r3, [pc, #24]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80080a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080a6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80080aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080b2:	4a02      	ldr	r2, [pc, #8]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80080b4:	430b      	orrs	r3, r1
 80080b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80080b8:	e006      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80080ba:	bf00      	nop
 80080bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80080c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80080d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80080d8:	2300      	movs	r3, #0
 80080da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80080e2:	460b      	mov	r3, r1
 80080e4:	4313      	orrs	r3, r2
 80080e6:	d055      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80080e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080f0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80080f4:	d033      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80080f6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80080fa:	d82c      	bhi.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80080fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008100:	d02f      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008102:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008106:	d826      	bhi.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008108:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800810c:	d02b      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800810e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008112:	d820      	bhi.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008114:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008118:	d012      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800811a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800811e:	d81a      	bhi.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008120:	2b00      	cmp	r3, #0
 8008122:	d022      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008124:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008128:	d115      	bne.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800812a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800812e:	3308      	adds	r3, #8
 8008130:	2100      	movs	r1, #0
 8008132:	4618      	mov	r0, r3
 8008134:	f001 fbf6 	bl	8009924 <RCCEx_PLL2_Config>
 8008138:	4603      	mov	r3, r0
 800813a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800813e:	e015      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008144:	3328      	adds	r3, #40	@ 0x28
 8008146:	2102      	movs	r1, #2
 8008148:	4618      	mov	r0, r3
 800814a:	f001 fc9d 	bl	8009a88 <RCCEx_PLL3_Config>
 800814e:	4603      	mov	r3, r0
 8008150:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008154:	e00a      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800815c:	e006      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800815e:	bf00      	nop
 8008160:	e004      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008162:	bf00      	nop
 8008164:	e002      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008166:	bf00      	nop
 8008168:	e000      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800816a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800816c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10b      	bne.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008174:	4ba0      	ldr	r3, [pc, #640]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008178:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800817c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008180:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008184:	4a9c      	ldr	r2, [pc, #624]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008186:	430b      	orrs	r3, r1
 8008188:	6593      	str	r3, [r2, #88]	@ 0x58
 800818a:	e003      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800818c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008190:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	f002 0308 	and.w	r3, r2, #8
 80081a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081a4:	2300      	movs	r3, #0
 80081a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80081aa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80081ae:	460b      	mov	r3, r1
 80081b0:	4313      	orrs	r3, r2
 80081b2:	d01e      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80081b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081c0:	d10c      	bne.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c6:	3328      	adds	r3, #40	@ 0x28
 80081c8:	2102      	movs	r1, #2
 80081ca:	4618      	mov	r0, r3
 80081cc:	f001 fc5c 	bl	8009a88 <RCCEx_PLL3_Config>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d002      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80081dc:	4b86      	ldr	r3, [pc, #536]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081e0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80081e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081ec:	4a82      	ldr	r2, [pc, #520]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081ee:	430b      	orrs	r3, r1
 80081f0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fa:	f002 0310 	and.w	r3, r2, #16
 80081fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008202:	2300      	movs	r3, #0
 8008204:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008208:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800820c:	460b      	mov	r3, r1
 800820e:	4313      	orrs	r3, r2
 8008210:	d01e      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800821a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800821e:	d10c      	bne.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008224:	3328      	adds	r3, #40	@ 0x28
 8008226:	2102      	movs	r1, #2
 8008228:	4618      	mov	r0, r3
 800822a:	f001 fc2d 	bl	8009a88 <RCCEx_PLL3_Config>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800823a:	4b6f      	ldr	r3, [pc, #444]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800823c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800823e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008246:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800824a:	4a6b      	ldr	r2, [pc, #428]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800824c:	430b      	orrs	r3, r1
 800824e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008258:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800825c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800825e:	2300      	movs	r3, #0
 8008260:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008262:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008266:	460b      	mov	r3, r1
 8008268:	4313      	orrs	r3, r2
 800826a:	d03e      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800826c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008270:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008274:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008278:	d022      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800827a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800827e:	d81b      	bhi.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008280:	2b00      	cmp	r3, #0
 8008282:	d003      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008288:	d00b      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800828a:	e015      	b.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800828c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008290:	3308      	adds	r3, #8
 8008292:	2100      	movs	r1, #0
 8008294:	4618      	mov	r0, r3
 8008296:	f001 fb45 	bl	8009924 <RCCEx_PLL2_Config>
 800829a:	4603      	mov	r3, r0
 800829c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80082a0:	e00f      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a6:	3328      	adds	r3, #40	@ 0x28
 80082a8:	2102      	movs	r1, #2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f001 fbec 	bl	8009a88 <RCCEx_PLL3_Config>
 80082b0:	4603      	mov	r3, r0
 80082b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80082b6:	e004      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80082be:	e000      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80082c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10b      	bne.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082ca:	4b4b      	ldr	r3, [pc, #300]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082ce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80082d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80082da:	4a47      	ldr	r2, [pc, #284]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082dc:	430b      	orrs	r3, r1
 80082de:	6593      	str	r3, [r2, #88]	@ 0x58
 80082e0:	e003      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80082ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80082f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80082f8:	2300      	movs	r3, #0
 80082fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80082fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008300:	460b      	mov	r3, r1
 8008302:	4313      	orrs	r3, r2
 8008304:	d03b      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800830a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800830e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008312:	d01f      	beq.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008314:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008318:	d818      	bhi.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800831a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800831e:	d003      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008320:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008324:	d007      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008326:	e011      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008328:	4b33      	ldr	r3, [pc, #204]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800832a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800832c:	4a32      	ldr	r2, [pc, #200]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800832e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008332:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008334:	e00f      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800833a:	3328      	adds	r3, #40	@ 0x28
 800833c:	2101      	movs	r1, #1
 800833e:	4618      	mov	r0, r3
 8008340:	f001 fba2 	bl	8009a88 <RCCEx_PLL3_Config>
 8008344:	4603      	mov	r3, r0
 8008346:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800834a:	e004      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008352:	e000      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008356:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10b      	bne.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800835e:	4b26      	ldr	r3, [pc, #152]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008362:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800836a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800836e:	4a22      	ldr	r2, [pc, #136]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008370:	430b      	orrs	r3, r1
 8008372:	6553      	str	r3, [r2, #84]	@ 0x54
 8008374:	e003      	b.n	800837e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008376:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800837a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800837e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800838a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800838c:	2300      	movs	r3, #0
 800838e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008390:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008394:	460b      	mov	r3, r1
 8008396:	4313      	orrs	r3, r2
 8008398:	d034      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800839a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800839e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d003      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80083a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083a8:	d007      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80083aa:	e011      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083ac:	4b12      	ldr	r3, [pc, #72]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b0:	4a11      	ldr	r2, [pc, #68]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80083b8:	e00e      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083be:	3308      	adds	r3, #8
 80083c0:	2102      	movs	r1, #2
 80083c2:	4618      	mov	r0, r3
 80083c4:	f001 faae 	bl	8009924 <RCCEx_PLL2_Config>
 80083c8:	4603      	mov	r3, r0
 80083ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80083ce:	e003      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80083d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d10d      	bne.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80083e0:	4b05      	ldr	r3, [pc, #20]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083ee:	4a02      	ldr	r2, [pc, #8]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083f0:	430b      	orrs	r3, r1
 80083f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80083f4:	e006      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80083f6:	bf00      	nop
 80083f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008400:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008410:	663b      	str	r3, [r7, #96]	@ 0x60
 8008412:	2300      	movs	r3, #0
 8008414:	667b      	str	r3, [r7, #100]	@ 0x64
 8008416:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800841a:	460b      	mov	r3, r1
 800841c:	4313      	orrs	r3, r2
 800841e:	d00c      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008424:	3328      	adds	r3, #40	@ 0x28
 8008426:	2102      	movs	r1, #2
 8008428:	4618      	mov	r0, r3
 800842a:	f001 fb2d 	bl	8009a88 <RCCEx_PLL3_Config>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d002      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800843a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008442:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008446:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008448:	2300      	movs	r3, #0
 800844a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800844c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008450:	460b      	mov	r3, r1
 8008452:	4313      	orrs	r3, r2
 8008454:	d036      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800845a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800845c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008460:	d018      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008462:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008466:	d811      	bhi.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800846c:	d014      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800846e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008472:	d80b      	bhi.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008474:	2b00      	cmp	r3, #0
 8008476:	d011      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008478:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800847c:	d106      	bne.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800847e:	4bb7      	ldr	r3, [pc, #732]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008482:	4ab6      	ldr	r2, [pc, #728]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008488:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800848a:	e008      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008492:	e004      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008494:	bf00      	nop
 8008496:	e002      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008498:	bf00      	nop
 800849a:	e000      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800849c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800849e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10a      	bne.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084a6:	4bad      	ldr	r3, [pc, #692]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80084ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084b4:	4aa9      	ldr	r2, [pc, #676]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084b6:	430b      	orrs	r3, r1
 80084b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80084ba:	e003      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80084c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084cc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80084d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80084d2:	2300      	movs	r3, #0
 80084d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80084d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80084da:	460b      	mov	r3, r1
 80084dc:	4313      	orrs	r3, r2
 80084de:	d009      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80084e0:	4b9e      	ldr	r3, [pc, #632]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80084e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ee:	4a9b      	ldr	r2, [pc, #620]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084f0:	430b      	orrs	r3, r1
 80084f2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008500:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008502:	2300      	movs	r3, #0
 8008504:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008506:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800850a:	460b      	mov	r3, r1
 800850c:	4313      	orrs	r3, r2
 800850e:	d009      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008510:	4b92      	ldr	r3, [pc, #584]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008514:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800851c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800851e:	4a8f      	ldr	r2, [pc, #572]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008520:	430b      	orrs	r3, r1
 8008522:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008530:	643b      	str	r3, [r7, #64]	@ 0x40
 8008532:	2300      	movs	r3, #0
 8008534:	647b      	str	r3, [r7, #68]	@ 0x44
 8008536:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800853a:	460b      	mov	r3, r1
 800853c:	4313      	orrs	r3, r2
 800853e:	d00e      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008540:	4b86      	ldr	r3, [pc, #536]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	4a85      	ldr	r2, [pc, #532]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008546:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800854a:	6113      	str	r3, [r2, #16]
 800854c:	4b83      	ldr	r3, [pc, #524]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800854e:	6919      	ldr	r1, [r3, #16]
 8008550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008554:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008558:	4a80      	ldr	r2, [pc, #512]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800855a:	430b      	orrs	r3, r1
 800855c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800855e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008566:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800856a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800856c:	2300      	movs	r3, #0
 800856e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008570:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008574:	460b      	mov	r3, r1
 8008576:	4313      	orrs	r3, r2
 8008578:	d009      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800857a:	4b78      	ldr	r3, [pc, #480]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800857c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800857e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008588:	4a74      	ldr	r2, [pc, #464]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800858a:	430b      	orrs	r3, r1
 800858c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800858e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008596:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800859a:	633b      	str	r3, [r7, #48]	@ 0x30
 800859c:	2300      	movs	r3, #0
 800859e:	637b      	str	r3, [r7, #52]	@ 0x34
 80085a0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80085a4:	460b      	mov	r3, r1
 80085a6:	4313      	orrs	r3, r2
 80085a8:	d00a      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80085aa:	4b6c      	ldr	r3, [pc, #432]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ae:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80085b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ba:	4a68      	ldr	r2, [pc, #416]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085bc:	430b      	orrs	r3, r1
 80085be:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80085c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	2100      	movs	r1, #0
 80085ca:	62b9      	str	r1, [r7, #40]	@ 0x28
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085d2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80085d6:	460b      	mov	r3, r1
 80085d8:	4313      	orrs	r3, r2
 80085da:	d011      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085e0:	3308      	adds	r3, #8
 80085e2:	2100      	movs	r1, #0
 80085e4:	4618      	mov	r0, r3
 80085e6:	f001 f99d 	bl	8009924 <RCCEx_PLL2_Config>
 80085ea:	4603      	mov	r3, r0
 80085ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80085f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008608:	2100      	movs	r1, #0
 800860a:	6239      	str	r1, [r7, #32]
 800860c:	f003 0302 	and.w	r3, r3, #2
 8008610:	627b      	str	r3, [r7, #36]	@ 0x24
 8008612:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008616:	460b      	mov	r3, r1
 8008618:	4313      	orrs	r3, r2
 800861a:	d011      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800861c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008620:	3308      	adds	r3, #8
 8008622:	2101      	movs	r1, #1
 8008624:	4618      	mov	r0, r3
 8008626:	f001 f97d 	bl	8009924 <RCCEx_PLL2_Config>
 800862a:	4603      	mov	r3, r0
 800862c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008630:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008634:	2b00      	cmp	r3, #0
 8008636:	d003      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008638:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800863c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008648:	2100      	movs	r1, #0
 800864a:	61b9      	str	r1, [r7, #24]
 800864c:	f003 0304 	and.w	r3, r3, #4
 8008650:	61fb      	str	r3, [r7, #28]
 8008652:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008656:	460b      	mov	r3, r1
 8008658:	4313      	orrs	r3, r2
 800865a:	d011      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800865c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008660:	3308      	adds	r3, #8
 8008662:	2102      	movs	r1, #2
 8008664:	4618      	mov	r0, r3
 8008666:	f001 f95d 	bl	8009924 <RCCEx_PLL2_Config>
 800866a:	4603      	mov	r3, r0
 800866c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008670:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008674:	2b00      	cmp	r3, #0
 8008676:	d003      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008678:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800867c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008688:	2100      	movs	r1, #0
 800868a:	6139      	str	r1, [r7, #16]
 800868c:	f003 0308 	and.w	r3, r3, #8
 8008690:	617b      	str	r3, [r7, #20]
 8008692:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008696:	460b      	mov	r3, r1
 8008698:	4313      	orrs	r3, r2
 800869a:	d011      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800869c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a0:	3328      	adds	r3, #40	@ 0x28
 80086a2:	2100      	movs	r1, #0
 80086a4:	4618      	mov	r0, r3
 80086a6:	f001 f9ef 	bl	8009a88 <RCCEx_PLL3_Config>
 80086aa:	4603      	mov	r3, r0
 80086ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80086b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d003      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80086c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c8:	2100      	movs	r1, #0
 80086ca:	60b9      	str	r1, [r7, #8]
 80086cc:	f003 0310 	and.w	r3, r3, #16
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80086d6:	460b      	mov	r3, r1
 80086d8:	4313      	orrs	r3, r2
 80086da:	d011      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086e0:	3328      	adds	r3, #40	@ 0x28
 80086e2:	2101      	movs	r1, #1
 80086e4:	4618      	mov	r0, r3
 80086e6:	f001 f9cf 	bl	8009a88 <RCCEx_PLL3_Config>
 80086ea:	4603      	mov	r3, r0
 80086ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80086f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d003      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	2100      	movs	r1, #0
 800870a:	6039      	str	r1, [r7, #0]
 800870c:	f003 0320 	and.w	r3, r3, #32
 8008710:	607b      	str	r3, [r7, #4]
 8008712:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008716:	460b      	mov	r3, r1
 8008718:	4313      	orrs	r3, r2
 800871a:	d011      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800871c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008720:	3328      	adds	r3, #40	@ 0x28
 8008722:	2102      	movs	r1, #2
 8008724:	4618      	mov	r0, r3
 8008726:	f001 f9af 	bl	8009a88 <RCCEx_PLL3_Config>
 800872a:	4603      	mov	r3, r0
 800872c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008730:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008738:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800873c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008740:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	e000      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
}
 800874e:	4618      	mov	r0, r3
 8008750:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008754:	46bd      	mov	sp, r7
 8008756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800875a:	bf00      	nop
 800875c:	58024400 	.word	0x58024400

08008760 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b090      	sub	sp, #64	@ 0x40
 8008764:	af00      	add	r7, sp, #0
 8008766:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800876a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800876e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008772:	430b      	orrs	r3, r1
 8008774:	f040 8094 	bne.w	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008778:	4b9b      	ldr	r3, [pc, #620]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800877a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800877c:	f003 0307 	and.w	r3, r3, #7
 8008780:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008784:	2b04      	cmp	r3, #4
 8008786:	f200 8087 	bhi.w	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800878a:	a201      	add	r2, pc, #4	@ (adr r2, 8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800878c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008790:	080087a5 	.word	0x080087a5
 8008794:	080087cd 	.word	0x080087cd
 8008798:	080087f5 	.word	0x080087f5
 800879c:	08008891 	.word	0x08008891
 80087a0:	0800881d 	.word	0x0800881d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087a4:	4b90      	ldr	r3, [pc, #576]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087b0:	d108      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 ff62 	bl	8009680 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087c0:	f000 bc93 	b.w	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087c8:	f000 bc8f 	b.w	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087cc:	4b86      	ldr	r3, [pc, #536]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087d8:	d108      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087da:	f107 0318 	add.w	r3, r7, #24
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 fca6 	bl	8009130 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087e8:	f000 bc7f 	b.w	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087ec:	2300      	movs	r3, #0
 80087ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087f0:	f000 bc7b 	b.w	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087f4:	4b7c      	ldr	r3, [pc, #496]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008800:	d108      	bne.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008802:	f107 030c 	add.w	r3, r7, #12
 8008806:	4618      	mov	r0, r3
 8008808:	f000 fde6 	bl	80093d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008810:	f000 bc6b 	b.w	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008814:	2300      	movs	r3, #0
 8008816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008818:	f000 bc67 	b.w	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800881c:	4b72      	ldr	r3, [pc, #456]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800881e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008820:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008824:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008826:	4b70      	ldr	r3, [pc, #448]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0304 	and.w	r3, r3, #4
 800882e:	2b04      	cmp	r3, #4
 8008830:	d10c      	bne.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008834:	2b00      	cmp	r3, #0
 8008836:	d109      	bne.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008838:	4b6b      	ldr	r3, [pc, #428]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	08db      	lsrs	r3, r3, #3
 800883e:	f003 0303 	and.w	r3, r3, #3
 8008842:	4a6a      	ldr	r2, [pc, #424]	@ (80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008844:	fa22 f303 	lsr.w	r3, r2, r3
 8008848:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800884a:	e01f      	b.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800884c:	4b66      	ldr	r3, [pc, #408]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008858:	d106      	bne.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800885a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800885c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008860:	d102      	bne.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008862:	4b63      	ldr	r3, [pc, #396]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008864:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008866:	e011      	b.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008868:	4b5f      	ldr	r3, [pc, #380]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008870:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008874:	d106      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800887c:	d102      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800887e:	4b5d      	ldr	r3, [pc, #372]	@ (80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008880:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008882:	e003      	b.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008884:	2300      	movs	r3, #0
 8008886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008888:	f000 bc2f 	b.w	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800888c:	f000 bc2d 	b.w	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008890:	4b59      	ldr	r3, [pc, #356]	@ (80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008894:	f000 bc29 	b.w	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008898:	2300      	movs	r3, #0
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800889c:	f000 bc25 	b.w	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80088a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088a4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80088a8:	430b      	orrs	r3, r1
 80088aa:	f040 80a7 	bne.w	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80088ae:	4b4e      	ldr	r3, [pc, #312]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088b2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80088b6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80088b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088be:	d054      	beq.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80088c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088c6:	f200 808b 	bhi.w	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80088ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088cc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80088d0:	f000 8083 	beq.w	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80088d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80088da:	f200 8081 	bhi.w	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80088de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088e4:	d02f      	beq.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80088e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088ec:	d878      	bhi.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80088ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d004      	beq.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80088f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088fa:	d012      	beq.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80088fc:	e070      	b.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088fe:	4b3a      	ldr	r3, [pc, #232]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008906:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800890a:	d107      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800890c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008910:	4618      	mov	r0, r3
 8008912:	f000 feb5 	bl	8009680 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800891a:	e3e6      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800891c:	2300      	movs	r3, #0
 800891e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008920:	e3e3      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008922:	4b31      	ldr	r3, [pc, #196]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800892a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800892e:	d107      	bne.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008930:	f107 0318 	add.w	r3, r7, #24
 8008934:	4618      	mov	r0, r3
 8008936:	f000 fbfb 	bl	8009130 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800893e:	e3d4      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008940:	2300      	movs	r3, #0
 8008942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008944:	e3d1      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008946:	4b28      	ldr	r3, [pc, #160]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800894e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008952:	d107      	bne.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008954:	f107 030c 	add.w	r3, r7, #12
 8008958:	4618      	mov	r0, r3
 800895a:	f000 fd3d 	bl	80093d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008962:	e3c2      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008964:	2300      	movs	r3, #0
 8008966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008968:	e3bf      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800896a:	4b1f      	ldr	r3, [pc, #124]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800896c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800896e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008972:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008974:	4b1c      	ldr	r3, [pc, #112]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0304 	and.w	r3, r3, #4
 800897c:	2b04      	cmp	r3, #4
 800897e:	d10c      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008982:	2b00      	cmp	r3, #0
 8008984:	d109      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008986:	4b18      	ldr	r3, [pc, #96]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	08db      	lsrs	r3, r3, #3
 800898c:	f003 0303 	and.w	r3, r3, #3
 8008990:	4a16      	ldr	r2, [pc, #88]	@ (80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008992:	fa22 f303 	lsr.w	r3, r2, r3
 8008996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008998:	e01e      	b.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800899a:	4b13      	ldr	r3, [pc, #76]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089a6:	d106      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80089a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089ae:	d102      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089b0:	4b0f      	ldr	r3, [pc, #60]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80089b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089b4:	e010      	b.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089b6:	4b0c      	ldr	r3, [pc, #48]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089c2:	d106      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80089c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089ca:	d102      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089cc:	4b09      	ldr	r3, [pc, #36]	@ (80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80089ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089d0:	e002      	b.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089d2:	2300      	movs	r3, #0
 80089d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80089d6:	e388      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80089d8:	e387      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089da:	4b07      	ldr	r3, [pc, #28]	@ (80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80089dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089de:	e384      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80089e0:	2300      	movs	r3, #0
 80089e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089e4:	e381      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80089e6:	bf00      	nop
 80089e8:	58024400 	.word	0x58024400
 80089ec:	03d09000 	.word	0x03d09000
 80089f0:	003d0900 	.word	0x003d0900
 80089f4:	016e3600 	.word	0x016e3600
 80089f8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80089fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a00:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008a04:	430b      	orrs	r3, r1
 8008a06:	f040 809c 	bne.w	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008a0a:	4b9e      	ldr	r3, [pc, #632]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a0e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008a12:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a1a:	d054      	beq.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a22:	f200 808b 	bhi.w	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a28:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008a2c:	f000 8083 	beq.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008a36:	f200 8081 	bhi.w	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a40:	d02f      	beq.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a48:	d878      	bhi.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d004      	beq.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a56:	d012      	beq.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008a58:	e070      	b.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a5a:	4b8a      	ldr	r3, [pc, #552]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a66:	d107      	bne.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 fe07 	bl	8009680 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a76:	e338      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a7c:	e335      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a7e:	4b81      	ldr	r3, [pc, #516]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a8a:	d107      	bne.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a8c:	f107 0318 	add.w	r3, r7, #24
 8008a90:	4618      	mov	r0, r3
 8008a92:	f000 fb4d 	bl	8009130 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a9a:	e326      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aa0:	e323      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008aa2:	4b78      	ldr	r3, [pc, #480]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aae:	d107      	bne.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ab0:	f107 030c 	add.w	r3, r7, #12
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 fc8f 	bl	80093d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008abe:	e314      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ac4:	e311      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ace:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ad0:	4b6c      	ldr	r3, [pc, #432]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0304 	and.w	r3, r3, #4
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	d10c      	bne.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d109      	bne.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ae2:	4b68      	ldr	r3, [pc, #416]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	08db      	lsrs	r3, r3, #3
 8008ae8:	f003 0303 	and.w	r3, r3, #3
 8008aec:	4a66      	ldr	r2, [pc, #408]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008aee:	fa22 f303 	lsr.w	r3, r2, r3
 8008af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008af4:	e01e      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008af6:	4b63      	ldr	r3, [pc, #396]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b02:	d106      	bne.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b0a:	d102      	bne.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b0c:	4b5f      	ldr	r3, [pc, #380]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b10:	e010      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b12:	4b5c      	ldr	r3, [pc, #368]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b1e:	d106      	bne.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b26:	d102      	bne.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b28:	4b59      	ldr	r3, [pc, #356]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b2c:	e002      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b32:	e2da      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b34:	e2d9      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b36:	4b57      	ldr	r3, [pc, #348]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b3a:	e2d6      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b40:	e2d3      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008b42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b46:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008b4a:	430b      	orrs	r3, r1
 8008b4c:	f040 80a7 	bne.w	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008b50:	4b4c      	ldr	r3, [pc, #304]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b54:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008b58:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b60:	d055      	beq.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b68:	f200 8096 	bhi.w	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b72:	f000 8084 	beq.w	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b7c:	f200 808c 	bhi.w	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b86:	d030      	beq.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b8e:	f200 8083 	bhi.w	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d004      	beq.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b9e:	d012      	beq.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008ba0:	e07a      	b.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ba2:	4b38      	ldr	r3, [pc, #224]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008baa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bae:	d107      	bne.n	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f000 fd63 	bl	8009680 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bbe:	e294      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bc4:	e291      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bd2:	d107      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bd4:	f107 0318 	add.w	r3, r7, #24
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f000 faa9 	bl	8009130 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008be2:	e282      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008be8:	e27f      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bea:	4b26      	ldr	r3, [pc, #152]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bf6:	d107      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bf8:	f107 030c 	add.w	r3, r7, #12
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f000 fbeb 	bl	80093d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c06:	e270      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c0c:	e26d      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c16:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c18:	4b1a      	ldr	r3, [pc, #104]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0304 	and.w	r3, r3, #4
 8008c20:	2b04      	cmp	r3, #4
 8008c22:	d10c      	bne.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d109      	bne.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c2a:	4b16      	ldr	r3, [pc, #88]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	08db      	lsrs	r3, r3, #3
 8008c30:	f003 0303 	and.w	r3, r3, #3
 8008c34:	4a14      	ldr	r2, [pc, #80]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008c36:	fa22 f303 	lsr.w	r3, r2, r3
 8008c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c3c:	e01e      	b.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c3e:	4b11      	ldr	r3, [pc, #68]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c4a:	d106      	bne.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c52:	d102      	bne.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c54:	4b0d      	ldr	r3, [pc, #52]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c58:	e010      	b.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c66:	d106      	bne.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c6e:	d102      	bne.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c70:	4b07      	ldr	r3, [pc, #28]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c74:	e002      	b.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c76:	2300      	movs	r3, #0
 8008c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c7a:	e236      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c7c:	e235      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c7e:	4b05      	ldr	r3, [pc, #20]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c82:	e232      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c84:	58024400 	.word	0x58024400
 8008c88:	03d09000 	.word	0x03d09000
 8008c8c:	003d0900 	.word	0x003d0900
 8008c90:	016e3600 	.word	0x016e3600
 8008c94:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c9c:	e225      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008c9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ca2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008ca6:	430b      	orrs	r3, r1
 8008ca8:	f040 8085 	bne.w	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008cac:	4b9c      	ldr	r3, [pc, #624]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cb0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008cbc:	d06b      	beq.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008cc4:	d874      	bhi.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ccc:	d056      	beq.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008cd4:	d86c      	bhi.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008cdc:	d03b      	beq.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ce4:	d864      	bhi.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cec:	d021      	beq.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cf4:	d85c      	bhi.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d004      	beq.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d02:	d004      	beq.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008d04:	e054      	b.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008d06:	f7fe fb5f 	bl	80073c8 <HAL_RCC_GetPCLK1Freq>
 8008d0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d0c:	e1ed      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d0e:	4b84      	ldr	r3, [pc, #528]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d1a:	d107      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d1c:	f107 0318 	add.w	r3, r7, #24
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 fa05 	bl	8009130 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d2a:	e1de      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d30:	e1db      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d32:	4b7b      	ldr	r3, [pc, #492]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d3e:	d107      	bne.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d40:	f107 030c 	add.w	r3, r7, #12
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 fb47 	bl	80093d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d4e:	e1cc      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d50:	2300      	movs	r3, #0
 8008d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d54:	e1c9      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d56:	4b72      	ldr	r3, [pc, #456]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0304 	and.w	r3, r3, #4
 8008d5e:	2b04      	cmp	r3, #4
 8008d60:	d109      	bne.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d62:	4b6f      	ldr	r3, [pc, #444]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	08db      	lsrs	r3, r3, #3
 8008d68:	f003 0303 	and.w	r3, r3, #3
 8008d6c:	4a6d      	ldr	r2, [pc, #436]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d74:	e1b9      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d76:	2300      	movs	r3, #0
 8008d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d7a:	e1b6      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008d7c:	4b68      	ldr	r3, [pc, #416]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d88:	d102      	bne.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008d8a:	4b67      	ldr	r3, [pc, #412]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d8e:	e1ac      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d90:	2300      	movs	r3, #0
 8008d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d94:	e1a9      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008d96:	4b62      	ldr	r3, [pc, #392]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008da2:	d102      	bne.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008da4:	4b61      	ldr	r3, [pc, #388]	@ (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008da8:	e19f      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dae:	e19c      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008db4:	e199      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dba:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008dbe:	430b      	orrs	r3, r1
 8008dc0:	d173      	bne.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008dc2:	4b57      	ldr	r3, [pc, #348]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008dca:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dd2:	d02f      	beq.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dda:	d863      	bhi.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d004      	beq.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008de8:	d012      	beq.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008dea:	e05b      	b.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dec:	4b4c      	ldr	r3, [pc, #304]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008df4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008df8:	d107      	bne.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dfa:	f107 0318 	add.w	r3, r7, #24
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 f996 	bl	8009130 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e08:	e16f      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e0e:	e16c      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e10:	4b43      	ldr	r3, [pc, #268]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e1c:	d107      	bne.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e1e:	f107 030c 	add.w	r3, r7, #12
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 fad8 	bl	80093d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e2c:	e15d      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e32:	e15a      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e34:	4b3a      	ldr	r3, [pc, #232]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008e3c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e3e:	4b38      	ldr	r3, [pc, #224]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 0304 	and.w	r3, r3, #4
 8008e46:	2b04      	cmp	r3, #4
 8008e48:	d10c      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d109      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e50:	4b33      	ldr	r3, [pc, #204]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	08db      	lsrs	r3, r3, #3
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	4a32      	ldr	r2, [pc, #200]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e62:	e01e      	b.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e64:	4b2e      	ldr	r3, [pc, #184]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e70:	d106      	bne.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e78:	d102      	bne.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e7e:	e010      	b.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e80:	4b27      	ldr	r3, [pc, #156]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e8c:	d106      	bne.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e94:	d102      	bne.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e96:	4b25      	ldr	r3, [pc, #148]	@ (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e9a:	e002      	b.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008ea0:	e123      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ea2:	e122      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ea8:	e11f      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eae:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008eb2:	430b      	orrs	r3, r1
 8008eb4:	d13c      	bne.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ebe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d004      	beq.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ecc:	d012      	beq.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008ece:	e023      	b.n	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ed0:	4b13      	ldr	r3, [pc, #76]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ed8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008edc:	d107      	bne.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 fbcc 	bl	8009680 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eec:	e0fd      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ef2:	e0fa      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008efc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f00:	d107      	bne.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f02:	f107 0318 	add.w	r3, r7, #24
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 f912 	bl	8009130 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f10:	e0eb      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f16:	e0e8      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f1c:	e0e5      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f1e:	bf00      	nop
 8008f20:	58024400 	.word	0x58024400
 8008f24:	03d09000 	.word	0x03d09000
 8008f28:	003d0900 	.word	0x003d0900
 8008f2c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f34:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008f38:	430b      	orrs	r3, r1
 8008f3a:	f040 8085 	bne.w	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008f3e:	4b6d      	ldr	r3, [pc, #436]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f42:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008f46:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f4e:	d06b      	beq.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f56:	d874      	bhi.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f5e:	d056      	beq.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f66:	d86c      	bhi.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f6e:	d03b      	beq.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f76:	d864      	bhi.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f7e:	d021      	beq.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f86:	d85c      	bhi.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d004      	beq.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f94:	d004      	beq.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008f96:	e054      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008f98:	f000 f8b4 	bl	8009104 <HAL_RCCEx_GetD3PCLK1Freq>
 8008f9c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f9e:	e0a4      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fa0:	4b54      	ldr	r3, [pc, #336]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fac:	d107      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fae:	f107 0318 	add.w	r3, r7, #24
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 f8bc 	bl	8009130 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fbc:	e095      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fc2:	e092      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fc4:	4b4b      	ldr	r3, [pc, #300]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fd0:	d107      	bne.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fd2:	f107 030c 	add.w	r3, r7, #12
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 f9fe 	bl	80093d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fe0:	e083      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fe6:	e080      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008fe8:	4b42      	ldr	r3, [pc, #264]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0304 	and.w	r3, r3, #4
 8008ff0:	2b04      	cmp	r3, #4
 8008ff2:	d109      	bne.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ff4:	4b3f      	ldr	r3, [pc, #252]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	08db      	lsrs	r3, r3, #3
 8008ffa:	f003 0303 	and.w	r3, r3, #3
 8008ffe:	4a3e      	ldr	r2, [pc, #248]	@ (80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009000:	fa22 f303 	lsr.w	r3, r2, r3
 8009004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009006:	e070      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009008:	2300      	movs	r3, #0
 800900a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800900c:	e06d      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800900e:	4b39      	ldr	r3, [pc, #228]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800901a:	d102      	bne.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800901c:	4b37      	ldr	r3, [pc, #220]	@ (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800901e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009020:	e063      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009022:	2300      	movs	r3, #0
 8009024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009026:	e060      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009028:	4b32      	ldr	r3, [pc, #200]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009030:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009034:	d102      	bne.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8009036:	4b32      	ldr	r3, [pc, #200]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800903a:	e056      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800903c:	2300      	movs	r3, #0
 800903e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009040:	e053      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009046:	e050      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800904c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009050:	430b      	orrs	r3, r1
 8009052:	d148      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009054:	4b27      	ldr	r3, [pc, #156]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009058:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800905c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800905e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009060:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009064:	d02a      	beq.n	80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800906c:	d838      	bhi.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800906e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009070:	2b00      	cmp	r3, #0
 8009072:	d004      	beq.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009076:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800907a:	d00d      	beq.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800907c:	e030      	b.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800907e:	4b1d      	ldr	r3, [pc, #116]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009086:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800908a:	d102      	bne.n	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800908c:	4b1c      	ldr	r3, [pc, #112]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800908e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009090:	e02b      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009092:	2300      	movs	r3, #0
 8009094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009096:	e028      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009098:	4b16      	ldr	r3, [pc, #88]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090a4:	d107      	bne.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 fae8 	bl	8009680 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090b4:	e019      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090b6:	2300      	movs	r3, #0
 80090b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090ba:	e016      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090bc:	4b0d      	ldr	r3, [pc, #52]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090c8:	d107      	bne.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090ca:	f107 0318 	add.w	r3, r7, #24
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 f82e 	bl	8009130 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090d8:	e007      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090da:	2300      	movs	r3, #0
 80090dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090de:	e004      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090e4:	e001      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80090e6:	2300      	movs	r3, #0
 80090e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80090ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3740      	adds	r7, #64	@ 0x40
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	58024400 	.word	0x58024400
 80090f8:	03d09000 	.word	0x03d09000
 80090fc:	003d0900 	.word	0x003d0900
 8009100:	016e3600 	.word	0x016e3600

08009104 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009108:	f7fe f92e 	bl	8007368 <HAL_RCC_GetHCLKFreq>
 800910c:	4602      	mov	r2, r0
 800910e:	4b06      	ldr	r3, [pc, #24]	@ (8009128 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	091b      	lsrs	r3, r3, #4
 8009114:	f003 0307 	and.w	r3, r3, #7
 8009118:	4904      	ldr	r1, [pc, #16]	@ (800912c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800911a:	5ccb      	ldrb	r3, [r1, r3]
 800911c:	f003 031f 	and.w	r3, r3, #31
 8009120:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009124:	4618      	mov	r0, r3
 8009126:	bd80      	pop	{r7, pc}
 8009128:	58024400 	.word	0x58024400
 800912c:	0800cbdc 	.word	0x0800cbdc

08009130 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009130:	b480      	push	{r7}
 8009132:	b089      	sub	sp, #36	@ 0x24
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009138:	4ba1      	ldr	r3, [pc, #644]	@ (80093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800913a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800913c:	f003 0303 	and.w	r3, r3, #3
 8009140:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009142:	4b9f      	ldr	r3, [pc, #636]	@ (80093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009146:	0b1b      	lsrs	r3, r3, #12
 8009148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800914c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800914e:	4b9c      	ldr	r3, [pc, #624]	@ (80093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009152:	091b      	lsrs	r3, r3, #4
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800915a:	4b99      	ldr	r3, [pc, #612]	@ (80093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800915c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800915e:	08db      	lsrs	r3, r3, #3
 8009160:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	fb02 f303 	mul.w	r3, r2, r3
 800916a:	ee07 3a90 	vmov	s15, r3
 800916e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009172:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 8111 	beq.w	80093a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	2b02      	cmp	r3, #2
 8009182:	f000 8083 	beq.w	800928c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	2b02      	cmp	r3, #2
 800918a:	f200 80a1 	bhi.w	80092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d003      	beq.n	800919c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	2b01      	cmp	r3, #1
 8009198:	d056      	beq.n	8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800919a:	e099      	b.n	80092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800919c:	4b88      	ldr	r3, [pc, #544]	@ (80093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 0320 	and.w	r3, r3, #32
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d02d      	beq.n	8009204 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091a8:	4b85      	ldr	r3, [pc, #532]	@ (80093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	08db      	lsrs	r3, r3, #3
 80091ae:	f003 0303 	and.w	r3, r3, #3
 80091b2:	4a84      	ldr	r2, [pc, #528]	@ (80093c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80091b4:	fa22 f303 	lsr.w	r3, r2, r3
 80091b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	ee07 3a90 	vmov	s15, r3
 80091c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	ee07 3a90 	vmov	s15, r3
 80091ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091d2:	4b7b      	ldr	r3, [pc, #492]	@ (80093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091da:	ee07 3a90 	vmov	s15, r3
 80091de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80091e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009202:	e087      	b.n	8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	ee07 3a90 	vmov	s15, r3
 800920a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80093cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009216:	4b6a      	ldr	r3, [pc, #424]	@ (80093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800921a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800921e:	ee07 3a90 	vmov	s15, r3
 8009222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009226:	ed97 6a03 	vldr	s12, [r7, #12]
 800922a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800922e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800923a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800923e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009246:	e065      	b.n	8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	ee07 3a90 	vmov	s15, r3
 800924e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009252:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80093d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800925a:	4b59      	ldr	r3, [pc, #356]	@ (80093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800925c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800925e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009262:	ee07 3a90 	vmov	s15, r3
 8009266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800926a:	ed97 6a03 	vldr	s12, [r7, #12]
 800926e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800927a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800927e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800928a:	e043      	b.n	8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	ee07 3a90 	vmov	s15, r3
 8009292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009296:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800929a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800929e:	4b48      	ldr	r3, [pc, #288]	@ (80093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092a6:	ee07 3a90 	vmov	s15, r3
 80092aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80092b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092ce:	e021      	b.n	8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	ee07 3a90 	vmov	s15, r3
 80092d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80093d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80092de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092e2:	4b37      	ldr	r3, [pc, #220]	@ (80093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ea:	ee07 3a90 	vmov	s15, r3
 80092ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80092f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800930a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800930e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009312:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009314:	4b2a      	ldr	r3, [pc, #168]	@ (80093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009318:	0a5b      	lsrs	r3, r3, #9
 800931a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009326:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800932a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800932e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800933a:	ee17 2a90 	vmov	r2, s15
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009342:	4b1f      	ldr	r3, [pc, #124]	@ (80093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009346:	0c1b      	lsrs	r3, r3, #16
 8009348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800934c:	ee07 3a90 	vmov	s15, r3
 8009350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009354:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800935c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009368:	ee17 2a90 	vmov	r2, s15
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009370:	4b13      	ldr	r3, [pc, #76]	@ (80093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009374:	0e1b      	lsrs	r3, r3, #24
 8009376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009382:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800938a:	edd7 6a07 	vldr	s13, [r7, #28]
 800938e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009396:	ee17 2a90 	vmov	r2, s15
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800939e:	e008      	b.n	80093b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	609a      	str	r2, [r3, #8]
}
 80093b2:	bf00      	nop
 80093b4:	3724      	adds	r7, #36	@ 0x24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	58024400 	.word	0x58024400
 80093c4:	03d09000 	.word	0x03d09000
 80093c8:	46000000 	.word	0x46000000
 80093cc:	4c742400 	.word	0x4c742400
 80093d0:	4a742400 	.word	0x4a742400
 80093d4:	4bb71b00 	.word	0x4bb71b00

080093d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80093d8:	b480      	push	{r7}
 80093da:	b089      	sub	sp, #36	@ 0x24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093e0:	4ba1      	ldr	r3, [pc, #644]	@ (8009668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e4:	f003 0303 	and.w	r3, r3, #3
 80093e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80093ea:	4b9f      	ldr	r3, [pc, #636]	@ (8009668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ee:	0d1b      	lsrs	r3, r3, #20
 80093f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80093f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80093f6:	4b9c      	ldr	r3, [pc, #624]	@ (8009668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093fa:	0a1b      	lsrs	r3, r3, #8
 80093fc:	f003 0301 	and.w	r3, r3, #1
 8009400:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009402:	4b99      	ldr	r3, [pc, #612]	@ (8009668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009406:	08db      	lsrs	r3, r3, #3
 8009408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	fb02 f303 	mul.w	r3, r2, r3
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	2b00      	cmp	r3, #0
 8009422:	f000 8111 	beq.w	8009648 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	2b02      	cmp	r3, #2
 800942a:	f000 8083 	beq.w	8009534 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	2b02      	cmp	r3, #2
 8009432:	f200 80a1 	bhi.w	8009578 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d003      	beq.n	8009444 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d056      	beq.n	80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009442:	e099      	b.n	8009578 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009444:	4b88      	ldr	r3, [pc, #544]	@ (8009668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0320 	and.w	r3, r3, #32
 800944c:	2b00      	cmp	r3, #0
 800944e:	d02d      	beq.n	80094ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009450:	4b85      	ldr	r3, [pc, #532]	@ (8009668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	08db      	lsrs	r3, r3, #3
 8009456:	f003 0303 	and.w	r3, r3, #3
 800945a:	4a84      	ldr	r2, [pc, #528]	@ (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800945c:	fa22 f303 	lsr.w	r3, r2, r3
 8009460:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	ee07 3a90 	vmov	s15, r3
 8009468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	ee07 3a90 	vmov	s15, r3
 8009472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800947a:	4b7b      	ldr	r3, [pc, #492]	@ (8009668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800947c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800947e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800948a:	ed97 6a03 	vldr	s12, [r7, #12]
 800948e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800949a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800949e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80094aa:	e087      	b.n	80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	ee07 3a90 	vmov	s15, r3
 80094b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009674 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80094ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094be:	4b6a      	ldr	r3, [pc, #424]	@ (8009668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c6:	ee07 3a90 	vmov	s15, r3
 80094ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80094d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094ee:	e065      	b.n	80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	ee07 3a90 	vmov	s15, r3
 80094f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80094fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009502:	4b59      	ldr	r3, [pc, #356]	@ (8009668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800950a:	ee07 3a90 	vmov	s15, r3
 800950e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009512:	ed97 6a03 	vldr	s12, [r7, #12]
 8009516:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800951a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800951e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800952a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800952e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009532:	e043      	b.n	80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	ee07 3a90 	vmov	s15, r3
 800953a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800967c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009546:	4b48      	ldr	r3, [pc, #288]	@ (8009668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800954a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800954e:	ee07 3a90 	vmov	s15, r3
 8009552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009556:	ed97 6a03 	vldr	s12, [r7, #12]
 800955a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800955e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800956a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800956e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009576:	e021      	b.n	80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	ee07 3a90 	vmov	s15, r3
 800957e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009582:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800958a:	4b37      	ldr	r3, [pc, #220]	@ (8009668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800958c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800958e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009592:	ee07 3a90 	vmov	s15, r3
 8009596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800959a:	ed97 6a03 	vldr	s12, [r7, #12]
 800959e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80095bc:	4b2a      	ldr	r3, [pc, #168]	@ (8009668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095c0:	0a5b      	lsrs	r3, r3, #9
 80095c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095c6:	ee07 3a90 	vmov	s15, r3
 80095ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80095da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095e2:	ee17 2a90 	vmov	r2, s15
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80095ea:	4b1f      	ldr	r3, [pc, #124]	@ (8009668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ee:	0c1b      	lsrs	r3, r3, #16
 80095f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095f4:	ee07 3a90 	vmov	s15, r3
 80095f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009600:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009604:	edd7 6a07 	vldr	s13, [r7, #28]
 8009608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800960c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009610:	ee17 2a90 	vmov	r2, s15
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009618:	4b13      	ldr	r3, [pc, #76]	@ (8009668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800961a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800961c:	0e1b      	lsrs	r3, r3, #24
 800961e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009622:	ee07 3a90 	vmov	s15, r3
 8009626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800962a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800962e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009632:	edd7 6a07 	vldr	s13, [r7, #28]
 8009636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800963a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800963e:	ee17 2a90 	vmov	r2, s15
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009646:	e008      	b.n	800965a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	609a      	str	r2, [r3, #8]
}
 800965a:	bf00      	nop
 800965c:	3724      	adds	r7, #36	@ 0x24
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	58024400 	.word	0x58024400
 800966c:	03d09000 	.word	0x03d09000
 8009670:	46000000 	.word	0x46000000
 8009674:	4c742400 	.word	0x4c742400
 8009678:	4a742400 	.word	0x4a742400
 800967c:	4bb71b00 	.word	0x4bb71b00

08009680 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009680:	b480      	push	{r7}
 8009682:	b089      	sub	sp, #36	@ 0x24
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009688:	4ba0      	ldr	r3, [pc, #640]	@ (800990c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800968a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800968c:	f003 0303 	and.w	r3, r3, #3
 8009690:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009692:	4b9e      	ldr	r3, [pc, #632]	@ (800990c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009696:	091b      	lsrs	r3, r3, #4
 8009698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800969c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800969e:	4b9b      	ldr	r3, [pc, #620]	@ (800990c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80096a8:	4b98      	ldr	r3, [pc, #608]	@ (800990c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096ac:	08db      	lsrs	r3, r3, #3
 80096ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096b2:	693a      	ldr	r2, [r7, #16]
 80096b4:	fb02 f303 	mul.w	r3, r2, r3
 80096b8:	ee07 3a90 	vmov	s15, r3
 80096bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096c0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f000 8111 	beq.w	80098ee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	f000 8083 	beq.w	80097da <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	f200 80a1 	bhi.w	800981e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d003      	beq.n	80096ea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d056      	beq.n	8009796 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80096e8:	e099      	b.n	800981e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096ea:	4b88      	ldr	r3, [pc, #544]	@ (800990c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f003 0320 	and.w	r3, r3, #32
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d02d      	beq.n	8009752 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096f6:	4b85      	ldr	r3, [pc, #532]	@ (800990c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	08db      	lsrs	r3, r3, #3
 80096fc:	f003 0303 	and.w	r3, r3, #3
 8009700:	4a83      	ldr	r2, [pc, #524]	@ (8009910 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009702:	fa22 f303 	lsr.w	r3, r2, r3
 8009706:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	ee07 3a90 	vmov	s15, r3
 800970e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	ee07 3a90 	vmov	s15, r3
 8009718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009720:	4b7a      	ldr	r3, [pc, #488]	@ (800990c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009728:	ee07 3a90 	vmov	s15, r3
 800972c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009730:	ed97 6a03 	vldr	s12, [r7, #12]
 8009734:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009738:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800973c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009740:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009744:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800974c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009750:	e087      	b.n	8009862 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	ee07 3a90 	vmov	s15, r3
 8009758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800975c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009918 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009764:	4b69      	ldr	r3, [pc, #420]	@ (800990c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800976c:	ee07 3a90 	vmov	s15, r3
 8009770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009774:	ed97 6a03 	vldr	s12, [r7, #12]
 8009778:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800977c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009780:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009784:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800978c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009790:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009794:	e065      	b.n	8009862 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	ee07 3a90 	vmov	s15, r3
 800979c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800991c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80097a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097a8:	4b58      	ldr	r3, [pc, #352]	@ (800990c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097b0:	ee07 3a90 	vmov	s15, r3
 80097b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80097bc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097d8:	e043      	b.n	8009862 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	ee07 3a90 	vmov	s15, r3
 80097e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009920 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80097e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ec:	4b47      	ldr	r3, [pc, #284]	@ (800990c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097f4:	ee07 3a90 	vmov	s15, r3
 80097f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009800:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009804:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009808:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800980c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009818:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800981c:	e021      	b.n	8009862 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	ee07 3a90 	vmov	s15, r3
 8009824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009828:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009918 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800982c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009830:	4b36      	ldr	r3, [pc, #216]	@ (800990c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009838:	ee07 3a90 	vmov	s15, r3
 800983c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009840:	ed97 6a03 	vldr	s12, [r7, #12]
 8009844:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009848:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800984c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009850:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009854:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800985c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009860:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009862:	4b2a      	ldr	r3, [pc, #168]	@ (800990c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009866:	0a5b      	lsrs	r3, r3, #9
 8009868:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800986c:	ee07 3a90 	vmov	s15, r3
 8009870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009874:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009878:	ee37 7a87 	vadd.f32	s14, s15, s14
 800987c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009888:	ee17 2a90 	vmov	r2, s15
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009890:	4b1e      	ldr	r3, [pc, #120]	@ (800990c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009894:	0c1b      	lsrs	r3, r3, #16
 8009896:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800989a:	ee07 3a90 	vmov	s15, r3
 800989e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80098a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80098ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098b6:	ee17 2a90 	vmov	r2, s15
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80098be:	4b13      	ldr	r3, [pc, #76]	@ (800990c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098c2:	0e1b      	lsrs	r3, r3, #24
 80098c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098c8:	ee07 3a90 	vmov	s15, r3
 80098cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80098d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80098dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098e4:	ee17 2a90 	vmov	r2, s15
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80098ec:	e008      	b.n	8009900 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	609a      	str	r2, [r3, #8]
}
 8009900:	bf00      	nop
 8009902:	3724      	adds	r7, #36	@ 0x24
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr
 800990c:	58024400 	.word	0x58024400
 8009910:	03d09000 	.word	0x03d09000
 8009914:	46000000 	.word	0x46000000
 8009918:	4c742400 	.word	0x4c742400
 800991c:	4a742400 	.word	0x4a742400
 8009920:	4bb71b00 	.word	0x4bb71b00

08009924 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009932:	4b53      	ldr	r3, [pc, #332]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 8009934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009936:	f003 0303 	and.w	r3, r3, #3
 800993a:	2b03      	cmp	r3, #3
 800993c:	d101      	bne.n	8009942 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e099      	b.n	8009a76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009942:	4b4f      	ldr	r3, [pc, #316]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a4e      	ldr	r2, [pc, #312]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 8009948:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800994c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800994e:	f7f9 f965 	bl	8002c1c <HAL_GetTick>
 8009952:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009954:	e008      	b.n	8009968 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009956:	f7f9 f961 	bl	8002c1c <HAL_GetTick>
 800995a:	4602      	mov	r2, r0
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	2b02      	cmp	r3, #2
 8009962:	d901      	bls.n	8009968 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009964:	2303      	movs	r3, #3
 8009966:	e086      	b.n	8009a76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009968:	4b45      	ldr	r3, [pc, #276]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009970:	2b00      	cmp	r3, #0
 8009972:	d1f0      	bne.n	8009956 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009974:	4b42      	ldr	r3, [pc, #264]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 8009976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009978:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	031b      	lsls	r3, r3, #12
 8009982:	493f      	ldr	r1, [pc, #252]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 8009984:	4313      	orrs	r3, r2
 8009986:	628b      	str	r3, [r1, #40]	@ 0x28
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	3b01      	subs	r3, #1
 800998e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	3b01      	subs	r3, #1
 8009998:	025b      	lsls	r3, r3, #9
 800999a:	b29b      	uxth	r3, r3
 800999c:	431a      	orrs	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	3b01      	subs	r3, #1
 80099a4:	041b      	lsls	r3, r3, #16
 80099a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80099aa:	431a      	orrs	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	3b01      	subs	r3, #1
 80099b2:	061b      	lsls	r3, r3, #24
 80099b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80099b8:	4931      	ldr	r1, [pc, #196]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 80099ba:	4313      	orrs	r3, r2
 80099bc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80099be:	4b30      	ldr	r3, [pc, #192]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 80099c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	492d      	ldr	r1, [pc, #180]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 80099cc:	4313      	orrs	r3, r2
 80099ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80099d0:	4b2b      	ldr	r3, [pc, #172]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 80099d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d4:	f023 0220 	bic.w	r2, r3, #32
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	4928      	ldr	r1, [pc, #160]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 80099de:	4313      	orrs	r3, r2
 80099e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80099e2:	4b27      	ldr	r3, [pc, #156]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 80099e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e6:	4a26      	ldr	r2, [pc, #152]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 80099e8:	f023 0310 	bic.w	r3, r3, #16
 80099ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80099ee:	4b24      	ldr	r3, [pc, #144]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 80099f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099f2:	4b24      	ldr	r3, [pc, #144]	@ (8009a84 <RCCEx_PLL2_Config+0x160>)
 80099f4:	4013      	ands	r3, r2
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	69d2      	ldr	r2, [r2, #28]
 80099fa:	00d2      	lsls	r2, r2, #3
 80099fc:	4920      	ldr	r1, [pc, #128]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009a02:	4b1f      	ldr	r3, [pc, #124]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 8009a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a06:	4a1e      	ldr	r2, [pc, #120]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 8009a08:	f043 0310 	orr.w	r3, r3, #16
 8009a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d106      	bne.n	8009a22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009a14:	4b1a      	ldr	r3, [pc, #104]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 8009a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a18:	4a19      	ldr	r2, [pc, #100]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 8009a1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a20:	e00f      	b.n	8009a42 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d106      	bne.n	8009a36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009a28:	4b15      	ldr	r3, [pc, #84]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 8009a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a2c:	4a14      	ldr	r2, [pc, #80]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 8009a2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a34:	e005      	b.n	8009a42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009a36:	4b12      	ldr	r3, [pc, #72]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 8009a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a3a:	4a11      	ldr	r2, [pc, #68]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 8009a3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009a40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009a42:	4b0f      	ldr	r3, [pc, #60]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a0e      	ldr	r2, [pc, #56]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 8009a48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a4e:	f7f9 f8e5 	bl	8002c1c <HAL_GetTick>
 8009a52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a54:	e008      	b.n	8009a68 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a56:	f7f9 f8e1 	bl	8002c1c <HAL_GetTick>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d901      	bls.n	8009a68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e006      	b.n	8009a76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a68:	4b05      	ldr	r3, [pc, #20]	@ (8009a80 <RCCEx_PLL2_Config+0x15c>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d0f0      	beq.n	8009a56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	58024400 	.word	0x58024400
 8009a84:	ffff0007 	.word	0xffff0007

08009a88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a92:	2300      	movs	r3, #0
 8009a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a96:	4b53      	ldr	r3, [pc, #332]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9a:	f003 0303 	and.w	r3, r3, #3
 8009a9e:	2b03      	cmp	r3, #3
 8009aa0:	d101      	bne.n	8009aa6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e099      	b.n	8009bda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009aa6:	4b4f      	ldr	r3, [pc, #316]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a4e      	ldr	r2, [pc, #312]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009aac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ab2:	f7f9 f8b3 	bl	8002c1c <HAL_GetTick>
 8009ab6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ab8:	e008      	b.n	8009acc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009aba:	f7f9 f8af 	bl	8002c1c <HAL_GetTick>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	d901      	bls.n	8009acc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ac8:	2303      	movs	r3, #3
 8009aca:	e086      	b.n	8009bda <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009acc:	4b45      	ldr	r3, [pc, #276]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1f0      	bne.n	8009aba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009ad8:	4b42      	ldr	r3, [pc, #264]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009adc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	051b      	lsls	r3, r3, #20
 8009ae6:	493f      	ldr	r1, [pc, #252]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	628b      	str	r3, [r1, #40]	@ 0x28
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	3b01      	subs	r3, #1
 8009afc:	025b      	lsls	r3, r3, #9
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	431a      	orrs	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	3b01      	subs	r3, #1
 8009b08:	041b      	lsls	r3, r3, #16
 8009b0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b0e:	431a      	orrs	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	3b01      	subs	r3, #1
 8009b16:	061b      	lsls	r3, r3, #24
 8009b18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009b1c:	4931      	ldr	r1, [pc, #196]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b22:	4b30      	ldr	r3, [pc, #192]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	695b      	ldr	r3, [r3, #20]
 8009b2e:	492d      	ldr	r1, [pc, #180]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009b30:	4313      	orrs	r3, r2
 8009b32:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009b34:	4b2b      	ldr	r3, [pc, #172]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b38:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	4928      	ldr	r1, [pc, #160]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009b42:	4313      	orrs	r3, r2
 8009b44:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009b46:	4b27      	ldr	r3, [pc, #156]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b4a:	4a26      	ldr	r2, [pc, #152]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009b4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009b52:	4b24      	ldr	r3, [pc, #144]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009b54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b56:	4b24      	ldr	r3, [pc, #144]	@ (8009be8 <RCCEx_PLL3_Config+0x160>)
 8009b58:	4013      	ands	r3, r2
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	69d2      	ldr	r2, [r2, #28]
 8009b5e:	00d2      	lsls	r2, r2, #3
 8009b60:	4920      	ldr	r1, [pc, #128]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009b62:	4313      	orrs	r3, r2
 8009b64:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009b66:	4b1f      	ldr	r3, [pc, #124]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d106      	bne.n	8009b86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009b78:	4b1a      	ldr	r3, [pc, #104]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b7c:	4a19      	ldr	r2, [pc, #100]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009b7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009b82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b84:	e00f      	b.n	8009ba6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d106      	bne.n	8009b9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009b8c:	4b15      	ldr	r3, [pc, #84]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b90:	4a14      	ldr	r2, [pc, #80]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009b92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009b96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b98:	e005      	b.n	8009ba6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009b9a:	4b12      	ldr	r3, [pc, #72]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b9e:	4a11      	ldr	r2, [pc, #68]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009ba0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a0e      	ldr	r2, [pc, #56]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bb2:	f7f9 f833 	bl	8002c1c <HAL_GetTick>
 8009bb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bb8:	e008      	b.n	8009bcc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009bba:	f7f9 f82f 	bl	8002c1c <HAL_GetTick>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d901      	bls.n	8009bcc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e006      	b.n	8009bda <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bcc:	4b05      	ldr	r3, [pc, #20]	@ (8009be4 <RCCEx_PLL3_Config+0x15c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d0f0      	beq.n	8009bba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	58024400 	.word	0x58024400
 8009be8:	ffff0007 	.word	0xffff0007

08009bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e049      	b.n	8009c92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d106      	bne.n	8009c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7f8 fda6 	bl	8002764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	3304      	adds	r3, #4
 8009c28:	4619      	mov	r1, r3
 8009c2a:	4610      	mov	r0, r2
 8009c2c:	f000 fac6 	bl	800a1bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b082      	sub	sp, #8
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d101      	bne.n	8009cac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e049      	b.n	8009d40 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d106      	bne.n	8009cc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f841 	bl	8009d48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2202      	movs	r2, #2
 8009cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	3304      	adds	r3, #4
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	4610      	mov	r0, r2
 8009cda:	f000 fa6f 	bl	800a1bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2201      	movs	r2, #1
 8009d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2201      	movs	r2, #1
 8009d12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2201      	movs	r2, #1
 8009d22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2201      	movs	r2, #1
 8009d32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d109      	bne.n	8009d80 <HAL_TIM_PWM_Start+0x24>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	bf14      	ite	ne
 8009d78:	2301      	movne	r3, #1
 8009d7a:	2300      	moveq	r3, #0
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	e03c      	b.n	8009dfa <HAL_TIM_PWM_Start+0x9e>
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	2b04      	cmp	r3, #4
 8009d84:	d109      	bne.n	8009d9a <HAL_TIM_PWM_Start+0x3e>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	bf14      	ite	ne
 8009d92:	2301      	movne	r3, #1
 8009d94:	2300      	moveq	r3, #0
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	e02f      	b.n	8009dfa <HAL_TIM_PWM_Start+0x9e>
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	2b08      	cmp	r3, #8
 8009d9e:	d109      	bne.n	8009db4 <HAL_TIM_PWM_Start+0x58>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	bf14      	ite	ne
 8009dac:	2301      	movne	r3, #1
 8009dae:	2300      	moveq	r3, #0
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	e022      	b.n	8009dfa <HAL_TIM_PWM_Start+0x9e>
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	2b0c      	cmp	r3, #12
 8009db8:	d109      	bne.n	8009dce <HAL_TIM_PWM_Start+0x72>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	bf14      	ite	ne
 8009dc6:	2301      	movne	r3, #1
 8009dc8:	2300      	moveq	r3, #0
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	e015      	b.n	8009dfa <HAL_TIM_PWM_Start+0x9e>
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	2b10      	cmp	r3, #16
 8009dd2:	d109      	bne.n	8009de8 <HAL_TIM_PWM_Start+0x8c>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	bf14      	ite	ne
 8009de0:	2301      	movne	r3, #1
 8009de2:	2300      	moveq	r3, #0
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	e008      	b.n	8009dfa <HAL_TIM_PWM_Start+0x9e>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	bf14      	ite	ne
 8009df4:	2301      	movne	r3, #1
 8009df6:	2300      	moveq	r3, #0
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e0ab      	b.n	8009f5a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d104      	bne.n	8009e12 <HAL_TIM_PWM_Start+0xb6>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e10:	e023      	b.n	8009e5a <HAL_TIM_PWM_Start+0xfe>
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	2b04      	cmp	r3, #4
 8009e16:	d104      	bne.n	8009e22 <HAL_TIM_PWM_Start+0xc6>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2202      	movs	r2, #2
 8009e1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e20:	e01b      	b.n	8009e5a <HAL_TIM_PWM_Start+0xfe>
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	2b08      	cmp	r3, #8
 8009e26:	d104      	bne.n	8009e32 <HAL_TIM_PWM_Start+0xd6>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2202      	movs	r2, #2
 8009e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e30:	e013      	b.n	8009e5a <HAL_TIM_PWM_Start+0xfe>
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	2b0c      	cmp	r3, #12
 8009e36:	d104      	bne.n	8009e42 <HAL_TIM_PWM_Start+0xe6>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2202      	movs	r2, #2
 8009e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e40:	e00b      	b.n	8009e5a <HAL_TIM_PWM_Start+0xfe>
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	2b10      	cmp	r3, #16
 8009e46:	d104      	bne.n	8009e52 <HAL_TIM_PWM_Start+0xf6>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e50:	e003      	b.n	8009e5a <HAL_TIM_PWM_Start+0xfe>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2202      	movs	r2, #2
 8009e56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	6839      	ldr	r1, [r7, #0]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 fd2c 	bl	800a8c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a3d      	ldr	r2, [pc, #244]	@ (8009f64 <HAL_TIM_PWM_Start+0x208>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d013      	beq.n	8009e9a <HAL_TIM_PWM_Start+0x13e>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a3c      	ldr	r2, [pc, #240]	@ (8009f68 <HAL_TIM_PWM_Start+0x20c>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d00e      	beq.n	8009e9a <HAL_TIM_PWM_Start+0x13e>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a3a      	ldr	r2, [pc, #232]	@ (8009f6c <HAL_TIM_PWM_Start+0x210>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d009      	beq.n	8009e9a <HAL_TIM_PWM_Start+0x13e>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a39      	ldr	r2, [pc, #228]	@ (8009f70 <HAL_TIM_PWM_Start+0x214>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d004      	beq.n	8009e9a <HAL_TIM_PWM_Start+0x13e>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a37      	ldr	r2, [pc, #220]	@ (8009f74 <HAL_TIM_PWM_Start+0x218>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d101      	bne.n	8009e9e <HAL_TIM_PWM_Start+0x142>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e000      	b.n	8009ea0 <HAL_TIM_PWM_Start+0x144>
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d007      	beq.n	8009eb4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009eb2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8009f64 <HAL_TIM_PWM_Start+0x208>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d02c      	beq.n	8009f18 <HAL_TIM_PWM_Start+0x1bc>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ec6:	d027      	beq.n	8009f18 <HAL_TIM_PWM_Start+0x1bc>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a2a      	ldr	r2, [pc, #168]	@ (8009f78 <HAL_TIM_PWM_Start+0x21c>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d022      	beq.n	8009f18 <HAL_TIM_PWM_Start+0x1bc>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a29      	ldr	r2, [pc, #164]	@ (8009f7c <HAL_TIM_PWM_Start+0x220>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d01d      	beq.n	8009f18 <HAL_TIM_PWM_Start+0x1bc>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a27      	ldr	r2, [pc, #156]	@ (8009f80 <HAL_TIM_PWM_Start+0x224>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d018      	beq.n	8009f18 <HAL_TIM_PWM_Start+0x1bc>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a1f      	ldr	r2, [pc, #124]	@ (8009f68 <HAL_TIM_PWM_Start+0x20c>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d013      	beq.n	8009f18 <HAL_TIM_PWM_Start+0x1bc>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a23      	ldr	r2, [pc, #140]	@ (8009f84 <HAL_TIM_PWM_Start+0x228>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d00e      	beq.n	8009f18 <HAL_TIM_PWM_Start+0x1bc>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a1b      	ldr	r2, [pc, #108]	@ (8009f6c <HAL_TIM_PWM_Start+0x210>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d009      	beq.n	8009f18 <HAL_TIM_PWM_Start+0x1bc>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a1f      	ldr	r2, [pc, #124]	@ (8009f88 <HAL_TIM_PWM_Start+0x22c>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d004      	beq.n	8009f18 <HAL_TIM_PWM_Start+0x1bc>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a1e      	ldr	r2, [pc, #120]	@ (8009f8c <HAL_TIM_PWM_Start+0x230>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d115      	bne.n	8009f44 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689a      	ldr	r2, [r3, #8]
 8009f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8009f90 <HAL_TIM_PWM_Start+0x234>)
 8009f20:	4013      	ands	r3, r2
 8009f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2b06      	cmp	r3, #6
 8009f28:	d015      	beq.n	8009f56 <HAL_TIM_PWM_Start+0x1fa>
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f30:	d011      	beq.n	8009f56 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f042 0201 	orr.w	r2, r2, #1
 8009f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f42:	e008      	b.n	8009f56 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f042 0201 	orr.w	r2, r2, #1
 8009f52:	601a      	str	r2, [r3, #0]
 8009f54:	e000      	b.n	8009f58 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	40010000 	.word	0x40010000
 8009f68:	40010400 	.word	0x40010400
 8009f6c:	40014000 	.word	0x40014000
 8009f70:	40014400 	.word	0x40014400
 8009f74:	40014800 	.word	0x40014800
 8009f78:	40000400 	.word	0x40000400
 8009f7c:	40000800 	.word	0x40000800
 8009f80:	40000c00 	.word	0x40000c00
 8009f84:	40001800 	.word	0x40001800
 8009f88:	4000e000 	.word	0x4000e000
 8009f8c:	4000e400 	.word	0x4000e400
 8009f90:	00010007 	.word	0x00010007

08009f94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d101      	bne.n	8009fb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009fae:	2302      	movs	r3, #2
 8009fb0:	e0ff      	b.n	800a1b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2b14      	cmp	r3, #20
 8009fbe:	f200 80f0 	bhi.w	800a1a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8009fc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc8:	0800a01d 	.word	0x0800a01d
 8009fcc:	0800a1a3 	.word	0x0800a1a3
 8009fd0:	0800a1a3 	.word	0x0800a1a3
 8009fd4:	0800a1a3 	.word	0x0800a1a3
 8009fd8:	0800a05d 	.word	0x0800a05d
 8009fdc:	0800a1a3 	.word	0x0800a1a3
 8009fe0:	0800a1a3 	.word	0x0800a1a3
 8009fe4:	0800a1a3 	.word	0x0800a1a3
 8009fe8:	0800a09f 	.word	0x0800a09f
 8009fec:	0800a1a3 	.word	0x0800a1a3
 8009ff0:	0800a1a3 	.word	0x0800a1a3
 8009ff4:	0800a1a3 	.word	0x0800a1a3
 8009ff8:	0800a0df 	.word	0x0800a0df
 8009ffc:	0800a1a3 	.word	0x0800a1a3
 800a000:	0800a1a3 	.word	0x0800a1a3
 800a004:	0800a1a3 	.word	0x0800a1a3
 800a008:	0800a121 	.word	0x0800a121
 800a00c:	0800a1a3 	.word	0x0800a1a3
 800a010:	0800a1a3 	.word	0x0800a1a3
 800a014:	0800a1a3 	.word	0x0800a1a3
 800a018:	0800a161 	.word	0x0800a161
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68b9      	ldr	r1, [r7, #8]
 800a022:	4618      	mov	r0, r3
 800a024:	f000 f976 	bl	800a314 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	699a      	ldr	r2, [r3, #24]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f042 0208 	orr.w	r2, r2, #8
 800a036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	699a      	ldr	r2, [r3, #24]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f022 0204 	bic.w	r2, r2, #4
 800a046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6999      	ldr	r1, [r3, #24]
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	691a      	ldr	r2, [r3, #16]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	430a      	orrs	r2, r1
 800a058:	619a      	str	r2, [r3, #24]
      break;
 800a05a:	e0a5      	b.n	800a1a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68b9      	ldr	r1, [r7, #8]
 800a062:	4618      	mov	r0, r3
 800a064:	f000 f9e6 	bl	800a434 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	699a      	ldr	r2, [r3, #24]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	699a      	ldr	r2, [r3, #24]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	6999      	ldr	r1, [r3, #24]
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	021a      	lsls	r2, r3, #8
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	430a      	orrs	r2, r1
 800a09a:	619a      	str	r2, [r3, #24]
      break;
 800a09c:	e084      	b.n	800a1a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	68b9      	ldr	r1, [r7, #8]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f000 fa4f 	bl	800a548 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	69da      	ldr	r2, [r3, #28]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f042 0208 	orr.w	r2, r2, #8
 800a0b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	69da      	ldr	r2, [r3, #28]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f022 0204 	bic.w	r2, r2, #4
 800a0c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	69d9      	ldr	r1, [r3, #28]
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	691a      	ldr	r2, [r3, #16]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	430a      	orrs	r2, r1
 800a0da:	61da      	str	r2, [r3, #28]
      break;
 800a0dc:	e064      	b.n	800a1a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68b9      	ldr	r1, [r7, #8]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f000 fab7 	bl	800a658 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	69da      	ldr	r2, [r3, #28]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a0f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	69da      	ldr	r2, [r3, #28]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	69d9      	ldr	r1, [r3, #28]
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	021a      	lsls	r2, r3, #8
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	430a      	orrs	r2, r1
 800a11c:	61da      	str	r2, [r3, #28]
      break;
 800a11e:	e043      	b.n	800a1a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68b9      	ldr	r1, [r7, #8]
 800a126:	4618      	mov	r0, r3
 800a128:	f000 fb00 	bl	800a72c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f042 0208 	orr.w	r2, r2, #8
 800a13a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f022 0204 	bic.w	r2, r2, #4
 800a14a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	691a      	ldr	r2, [r3, #16]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	430a      	orrs	r2, r1
 800a15c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a15e:	e023      	b.n	800a1a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	68b9      	ldr	r1, [r7, #8]
 800a166:	4618      	mov	r0, r3
 800a168:	f000 fb44 	bl	800a7f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a17a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a18a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	021a      	lsls	r2, r3, #8
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	430a      	orrs	r2, r1
 800a19e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a1a0:	e002      	b.n	800a1a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	75fb      	strb	r3, [r7, #23]
      break;
 800a1a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a1b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3718      	adds	r7, #24
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop

0800a1bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b085      	sub	sp, #20
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a47      	ldr	r2, [pc, #284]	@ (800a2ec <TIM_Base_SetConfig+0x130>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d013      	beq.n	800a1fc <TIM_Base_SetConfig+0x40>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1da:	d00f      	beq.n	800a1fc <TIM_Base_SetConfig+0x40>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a44      	ldr	r2, [pc, #272]	@ (800a2f0 <TIM_Base_SetConfig+0x134>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d00b      	beq.n	800a1fc <TIM_Base_SetConfig+0x40>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a43      	ldr	r2, [pc, #268]	@ (800a2f4 <TIM_Base_SetConfig+0x138>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d007      	beq.n	800a1fc <TIM_Base_SetConfig+0x40>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a42      	ldr	r2, [pc, #264]	@ (800a2f8 <TIM_Base_SetConfig+0x13c>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d003      	beq.n	800a1fc <TIM_Base_SetConfig+0x40>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a41      	ldr	r2, [pc, #260]	@ (800a2fc <TIM_Base_SetConfig+0x140>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d108      	bne.n	800a20e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4a36      	ldr	r2, [pc, #216]	@ (800a2ec <TIM_Base_SetConfig+0x130>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d027      	beq.n	800a266 <TIM_Base_SetConfig+0xaa>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a21c:	d023      	beq.n	800a266 <TIM_Base_SetConfig+0xaa>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a33      	ldr	r2, [pc, #204]	@ (800a2f0 <TIM_Base_SetConfig+0x134>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d01f      	beq.n	800a266 <TIM_Base_SetConfig+0xaa>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a32      	ldr	r2, [pc, #200]	@ (800a2f4 <TIM_Base_SetConfig+0x138>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d01b      	beq.n	800a266 <TIM_Base_SetConfig+0xaa>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a31      	ldr	r2, [pc, #196]	@ (800a2f8 <TIM_Base_SetConfig+0x13c>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d017      	beq.n	800a266 <TIM_Base_SetConfig+0xaa>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a30      	ldr	r2, [pc, #192]	@ (800a2fc <TIM_Base_SetConfig+0x140>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d013      	beq.n	800a266 <TIM_Base_SetConfig+0xaa>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a2f      	ldr	r2, [pc, #188]	@ (800a300 <TIM_Base_SetConfig+0x144>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d00f      	beq.n	800a266 <TIM_Base_SetConfig+0xaa>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a2e      	ldr	r2, [pc, #184]	@ (800a304 <TIM_Base_SetConfig+0x148>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d00b      	beq.n	800a266 <TIM_Base_SetConfig+0xaa>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4a2d      	ldr	r2, [pc, #180]	@ (800a308 <TIM_Base_SetConfig+0x14c>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d007      	beq.n	800a266 <TIM_Base_SetConfig+0xaa>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	4a2c      	ldr	r2, [pc, #176]	@ (800a30c <TIM_Base_SetConfig+0x150>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d003      	beq.n	800a266 <TIM_Base_SetConfig+0xaa>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4a2b      	ldr	r2, [pc, #172]	@ (800a310 <TIM_Base_SetConfig+0x154>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d108      	bne.n	800a278 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a26c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	4313      	orrs	r3, r2
 800a276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	695b      	ldr	r3, [r3, #20]
 800a282:	4313      	orrs	r3, r2
 800a284:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	689a      	ldr	r2, [r3, #8]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a14      	ldr	r2, [pc, #80]	@ (800a2ec <TIM_Base_SetConfig+0x130>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d00f      	beq.n	800a2be <TIM_Base_SetConfig+0x102>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a16      	ldr	r2, [pc, #88]	@ (800a2fc <TIM_Base_SetConfig+0x140>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d00b      	beq.n	800a2be <TIM_Base_SetConfig+0x102>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a15      	ldr	r2, [pc, #84]	@ (800a300 <TIM_Base_SetConfig+0x144>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d007      	beq.n	800a2be <TIM_Base_SetConfig+0x102>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a14      	ldr	r2, [pc, #80]	@ (800a304 <TIM_Base_SetConfig+0x148>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d003      	beq.n	800a2be <TIM_Base_SetConfig+0x102>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a13      	ldr	r2, [pc, #76]	@ (800a308 <TIM_Base_SetConfig+0x14c>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d103      	bne.n	800a2c6 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	691a      	ldr	r2, [r3, #16]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f043 0204 	orr.w	r2, r3, #4
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	601a      	str	r2, [r3, #0]
}
 800a2de:	bf00      	nop
 800a2e0:	3714      	adds	r7, #20
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	40010000 	.word	0x40010000
 800a2f0:	40000400 	.word	0x40000400
 800a2f4:	40000800 	.word	0x40000800
 800a2f8:	40000c00 	.word	0x40000c00
 800a2fc:	40010400 	.word	0x40010400
 800a300:	40014000 	.word	0x40014000
 800a304:	40014400 	.word	0x40014400
 800a308:	40014800 	.word	0x40014800
 800a30c:	4000e000 	.word	0x4000e000
 800a310:	4000e400 	.word	0x4000e400

0800a314 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a314:	b480      	push	{r7}
 800a316:	b087      	sub	sp, #28
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a1b      	ldr	r3, [r3, #32]
 800a328:	f023 0201 	bic.w	r2, r3, #1
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	699b      	ldr	r3, [r3, #24]
 800a33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	4b37      	ldr	r3, [pc, #220]	@ (800a41c <TIM_OC1_SetConfig+0x108>)
 800a340:	4013      	ands	r3, r2
 800a342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f023 0303 	bic.w	r3, r3, #3
 800a34a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	4313      	orrs	r3, r2
 800a354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	f023 0302 	bic.w	r3, r3, #2
 800a35c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	4313      	orrs	r3, r2
 800a366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a2d      	ldr	r2, [pc, #180]	@ (800a420 <TIM_OC1_SetConfig+0x10c>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d00f      	beq.n	800a390 <TIM_OC1_SetConfig+0x7c>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a2c      	ldr	r2, [pc, #176]	@ (800a424 <TIM_OC1_SetConfig+0x110>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d00b      	beq.n	800a390 <TIM_OC1_SetConfig+0x7c>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a2b      	ldr	r2, [pc, #172]	@ (800a428 <TIM_OC1_SetConfig+0x114>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d007      	beq.n	800a390 <TIM_OC1_SetConfig+0x7c>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a2a      	ldr	r2, [pc, #168]	@ (800a42c <TIM_OC1_SetConfig+0x118>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d003      	beq.n	800a390 <TIM_OC1_SetConfig+0x7c>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a29      	ldr	r2, [pc, #164]	@ (800a430 <TIM_OC1_SetConfig+0x11c>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d10c      	bne.n	800a3aa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	f023 0308 	bic.w	r3, r3, #8
 800a396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f023 0304 	bic.w	r3, r3, #4
 800a3a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	4a1c      	ldr	r2, [pc, #112]	@ (800a420 <TIM_OC1_SetConfig+0x10c>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d00f      	beq.n	800a3d2 <TIM_OC1_SetConfig+0xbe>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4a1b      	ldr	r2, [pc, #108]	@ (800a424 <TIM_OC1_SetConfig+0x110>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d00b      	beq.n	800a3d2 <TIM_OC1_SetConfig+0xbe>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4a1a      	ldr	r2, [pc, #104]	@ (800a428 <TIM_OC1_SetConfig+0x114>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d007      	beq.n	800a3d2 <TIM_OC1_SetConfig+0xbe>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	4a19      	ldr	r2, [pc, #100]	@ (800a42c <TIM_OC1_SetConfig+0x118>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d003      	beq.n	800a3d2 <TIM_OC1_SetConfig+0xbe>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4a18      	ldr	r2, [pc, #96]	@ (800a430 <TIM_OC1_SetConfig+0x11c>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d111      	bne.n	800a3f6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a3e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	693a      	ldr	r2, [r7, #16]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	685a      	ldr	r2, [r3, #4]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	621a      	str	r2, [r3, #32]
}
 800a410:	bf00      	nop
 800a412:	371c      	adds	r7, #28
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	fffeff8f 	.word	0xfffeff8f
 800a420:	40010000 	.word	0x40010000
 800a424:	40010400 	.word	0x40010400
 800a428:	40014000 	.word	0x40014000
 800a42c:	40014400 	.word	0x40014400
 800a430:	40014800 	.word	0x40014800

0800a434 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a434:	b480      	push	{r7}
 800a436:	b087      	sub	sp, #28
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a1b      	ldr	r3, [r3, #32]
 800a442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a1b      	ldr	r3, [r3, #32]
 800a448:	f023 0210 	bic.w	r2, r3, #16
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	4b34      	ldr	r3, [pc, #208]	@ (800a530 <TIM_OC2_SetConfig+0xfc>)
 800a460:	4013      	ands	r3, r2
 800a462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a46a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	021b      	lsls	r3, r3, #8
 800a472:	68fa      	ldr	r2, [r7, #12]
 800a474:	4313      	orrs	r3, r2
 800a476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	f023 0320 	bic.w	r3, r3, #32
 800a47e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	011b      	lsls	r3, r3, #4
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	4313      	orrs	r3, r2
 800a48a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a29      	ldr	r2, [pc, #164]	@ (800a534 <TIM_OC2_SetConfig+0x100>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d003      	beq.n	800a49c <TIM_OC2_SetConfig+0x68>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a28      	ldr	r2, [pc, #160]	@ (800a538 <TIM_OC2_SetConfig+0x104>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d10d      	bne.n	800a4b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	011b      	lsls	r3, r3, #4
 800a4aa:	697a      	ldr	r2, [r7, #20]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a1e      	ldr	r2, [pc, #120]	@ (800a534 <TIM_OC2_SetConfig+0x100>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d00f      	beq.n	800a4e0 <TIM_OC2_SetConfig+0xac>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a1d      	ldr	r2, [pc, #116]	@ (800a538 <TIM_OC2_SetConfig+0x104>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d00b      	beq.n	800a4e0 <TIM_OC2_SetConfig+0xac>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a1c      	ldr	r2, [pc, #112]	@ (800a53c <TIM_OC2_SetConfig+0x108>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d007      	beq.n	800a4e0 <TIM_OC2_SetConfig+0xac>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a1b      	ldr	r2, [pc, #108]	@ (800a540 <TIM_OC2_SetConfig+0x10c>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d003      	beq.n	800a4e0 <TIM_OC2_SetConfig+0xac>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a1a      	ldr	r2, [pc, #104]	@ (800a544 <TIM_OC2_SetConfig+0x110>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d113      	bne.n	800a508 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a4e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a4ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	695b      	ldr	r3, [r3, #20]
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	693a      	ldr	r2, [r7, #16]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	693a      	ldr	r2, [r7, #16]
 800a504:	4313      	orrs	r3, r2
 800a506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	693a      	ldr	r2, [r7, #16]
 800a50c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	685a      	ldr	r2, [r3, #4]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	697a      	ldr	r2, [r7, #20]
 800a520:	621a      	str	r2, [r3, #32]
}
 800a522:	bf00      	nop
 800a524:	371c      	adds	r7, #28
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	feff8fff 	.word	0xfeff8fff
 800a534:	40010000 	.word	0x40010000
 800a538:	40010400 	.word	0x40010400
 800a53c:	40014000 	.word	0x40014000
 800a540:	40014400 	.word	0x40014400
 800a544:	40014800 	.word	0x40014800

0800a548 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a548:	b480      	push	{r7}
 800a54a:	b087      	sub	sp, #28
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a1b      	ldr	r3, [r3, #32]
 800a556:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a1b      	ldr	r3, [r3, #32]
 800a55c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	69db      	ldr	r3, [r3, #28]
 800a56e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	4b33      	ldr	r3, [pc, #204]	@ (800a640 <TIM_OC3_SetConfig+0xf8>)
 800a574:	4013      	ands	r3, r2
 800a576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f023 0303 	bic.w	r3, r3, #3
 800a57e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	4313      	orrs	r3, r2
 800a588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	021b      	lsls	r3, r3, #8
 800a598:	697a      	ldr	r2, [r7, #20]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a28      	ldr	r2, [pc, #160]	@ (800a644 <TIM_OC3_SetConfig+0xfc>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d003      	beq.n	800a5ae <TIM_OC3_SetConfig+0x66>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a27      	ldr	r2, [pc, #156]	@ (800a648 <TIM_OC3_SetConfig+0x100>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d10d      	bne.n	800a5ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a5b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	021b      	lsls	r3, r3, #8
 800a5bc:	697a      	ldr	r2, [r7, #20]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a5c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a1d      	ldr	r2, [pc, #116]	@ (800a644 <TIM_OC3_SetConfig+0xfc>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d00f      	beq.n	800a5f2 <TIM_OC3_SetConfig+0xaa>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a1c      	ldr	r2, [pc, #112]	@ (800a648 <TIM_OC3_SetConfig+0x100>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d00b      	beq.n	800a5f2 <TIM_OC3_SetConfig+0xaa>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a1b      	ldr	r2, [pc, #108]	@ (800a64c <TIM_OC3_SetConfig+0x104>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d007      	beq.n	800a5f2 <TIM_OC3_SetConfig+0xaa>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a1a      	ldr	r2, [pc, #104]	@ (800a650 <TIM_OC3_SetConfig+0x108>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d003      	beq.n	800a5f2 <TIM_OC3_SetConfig+0xaa>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4a19      	ldr	r2, [pc, #100]	@ (800a654 <TIM_OC3_SetConfig+0x10c>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d113      	bne.n	800a61a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a5f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	695b      	ldr	r3, [r3, #20]
 800a606:	011b      	lsls	r3, r3, #4
 800a608:	693a      	ldr	r2, [r7, #16]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	011b      	lsls	r3, r3, #4
 800a614:	693a      	ldr	r2, [r7, #16]
 800a616:	4313      	orrs	r3, r2
 800a618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	693a      	ldr	r2, [r7, #16]
 800a61e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	68fa      	ldr	r2, [r7, #12]
 800a624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	685a      	ldr	r2, [r3, #4]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	621a      	str	r2, [r3, #32]
}
 800a634:	bf00      	nop
 800a636:	371c      	adds	r7, #28
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr
 800a640:	fffeff8f 	.word	0xfffeff8f
 800a644:	40010000 	.word	0x40010000
 800a648:	40010400 	.word	0x40010400
 800a64c:	40014000 	.word	0x40014000
 800a650:	40014400 	.word	0x40014400
 800a654:	40014800 	.word	0x40014800

0800a658 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a658:	b480      	push	{r7}
 800a65a:	b087      	sub	sp, #28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a1b      	ldr	r3, [r3, #32]
 800a66c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	69db      	ldr	r3, [r3, #28]
 800a67e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	4b24      	ldr	r3, [pc, #144]	@ (800a714 <TIM_OC4_SetConfig+0xbc>)
 800a684:	4013      	ands	r3, r2
 800a686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a68e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	021b      	lsls	r3, r3, #8
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	4313      	orrs	r3, r2
 800a69a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a6a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	031b      	lsls	r3, r3, #12
 800a6aa:	693a      	ldr	r2, [r7, #16]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a19      	ldr	r2, [pc, #100]	@ (800a718 <TIM_OC4_SetConfig+0xc0>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d00f      	beq.n	800a6d8 <TIM_OC4_SetConfig+0x80>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a18      	ldr	r2, [pc, #96]	@ (800a71c <TIM_OC4_SetConfig+0xc4>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d00b      	beq.n	800a6d8 <TIM_OC4_SetConfig+0x80>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a17      	ldr	r2, [pc, #92]	@ (800a720 <TIM_OC4_SetConfig+0xc8>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d007      	beq.n	800a6d8 <TIM_OC4_SetConfig+0x80>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4a16      	ldr	r2, [pc, #88]	@ (800a724 <TIM_OC4_SetConfig+0xcc>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d003      	beq.n	800a6d8 <TIM_OC4_SetConfig+0x80>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4a15      	ldr	r2, [pc, #84]	@ (800a728 <TIM_OC4_SetConfig+0xd0>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d109      	bne.n	800a6ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a6de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	695b      	ldr	r3, [r3, #20]
 800a6e4:	019b      	lsls	r3, r3, #6
 800a6e6:	697a      	ldr	r2, [r7, #20]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	697a      	ldr	r2, [r7, #20]
 800a6f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	621a      	str	r2, [r3, #32]
}
 800a706:	bf00      	nop
 800a708:	371c      	adds	r7, #28
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	feff8fff 	.word	0xfeff8fff
 800a718:	40010000 	.word	0x40010000
 800a71c:	40010400 	.word	0x40010400
 800a720:	40014000 	.word	0x40014000
 800a724:	40014400 	.word	0x40014400
 800a728:	40014800 	.word	0x40014800

0800a72c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b087      	sub	sp, #28
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a1b      	ldr	r3, [r3, #32]
 800a73a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6a1b      	ldr	r3, [r3, #32]
 800a740:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	4b21      	ldr	r3, [pc, #132]	@ (800a7dc <TIM_OC5_SetConfig+0xb0>)
 800a758:	4013      	ands	r3, r2
 800a75a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	4313      	orrs	r3, r2
 800a764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a76c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	041b      	lsls	r3, r3, #16
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	4313      	orrs	r3, r2
 800a778:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a18      	ldr	r2, [pc, #96]	@ (800a7e0 <TIM_OC5_SetConfig+0xb4>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d00f      	beq.n	800a7a2 <TIM_OC5_SetConfig+0x76>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a17      	ldr	r2, [pc, #92]	@ (800a7e4 <TIM_OC5_SetConfig+0xb8>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d00b      	beq.n	800a7a2 <TIM_OC5_SetConfig+0x76>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a16      	ldr	r2, [pc, #88]	@ (800a7e8 <TIM_OC5_SetConfig+0xbc>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d007      	beq.n	800a7a2 <TIM_OC5_SetConfig+0x76>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a15      	ldr	r2, [pc, #84]	@ (800a7ec <TIM_OC5_SetConfig+0xc0>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d003      	beq.n	800a7a2 <TIM_OC5_SetConfig+0x76>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a14      	ldr	r2, [pc, #80]	@ (800a7f0 <TIM_OC5_SetConfig+0xc4>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d109      	bne.n	800a7b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	021b      	lsls	r3, r3, #8
 800a7b0:	697a      	ldr	r2, [r7, #20]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	697a      	ldr	r2, [r7, #20]
 800a7ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	693a      	ldr	r2, [r7, #16]
 800a7ce:	621a      	str	r2, [r3, #32]
}
 800a7d0:	bf00      	nop
 800a7d2:	371c      	adds	r7, #28
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	fffeff8f 	.word	0xfffeff8f
 800a7e0:	40010000 	.word	0x40010000
 800a7e4:	40010400 	.word	0x40010400
 800a7e8:	40014000 	.word	0x40014000
 800a7ec:	40014400 	.word	0x40014400
 800a7f0:	40014800 	.word	0x40014800

0800a7f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b087      	sub	sp, #28
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a1b      	ldr	r3, [r3, #32]
 800a802:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a1b      	ldr	r3, [r3, #32]
 800a808:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a81a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	4b22      	ldr	r3, [pc, #136]	@ (800a8a8 <TIM_OC6_SetConfig+0xb4>)
 800a820:	4013      	ands	r3, r2
 800a822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	021b      	lsls	r3, r3, #8
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	4313      	orrs	r3, r2
 800a82e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a836:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	051b      	lsls	r3, r3, #20
 800a83e:	693a      	ldr	r2, [r7, #16]
 800a840:	4313      	orrs	r3, r2
 800a842:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a19      	ldr	r2, [pc, #100]	@ (800a8ac <TIM_OC6_SetConfig+0xb8>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d00f      	beq.n	800a86c <TIM_OC6_SetConfig+0x78>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a18      	ldr	r2, [pc, #96]	@ (800a8b0 <TIM_OC6_SetConfig+0xbc>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d00b      	beq.n	800a86c <TIM_OC6_SetConfig+0x78>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a17      	ldr	r2, [pc, #92]	@ (800a8b4 <TIM_OC6_SetConfig+0xc0>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d007      	beq.n	800a86c <TIM_OC6_SetConfig+0x78>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a16      	ldr	r2, [pc, #88]	@ (800a8b8 <TIM_OC6_SetConfig+0xc4>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d003      	beq.n	800a86c <TIM_OC6_SetConfig+0x78>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4a15      	ldr	r2, [pc, #84]	@ (800a8bc <TIM_OC6_SetConfig+0xc8>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d109      	bne.n	800a880 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a872:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	695b      	ldr	r3, [r3, #20]
 800a878:	029b      	lsls	r3, r3, #10
 800a87a:	697a      	ldr	r2, [r7, #20]
 800a87c:	4313      	orrs	r3, r2
 800a87e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	697a      	ldr	r2, [r7, #20]
 800a884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	685a      	ldr	r2, [r3, #4]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	693a      	ldr	r2, [r7, #16]
 800a898:	621a      	str	r2, [r3, #32]
}
 800a89a:	bf00      	nop
 800a89c:	371c      	adds	r7, #28
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	feff8fff 	.word	0xfeff8fff
 800a8ac:	40010000 	.word	0x40010000
 800a8b0:	40010400 	.word	0x40010400
 800a8b4:	40014000 	.word	0x40014000
 800a8b8:	40014400 	.word	0x40014400
 800a8bc:	40014800 	.word	0x40014800

0800a8c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b087      	sub	sp, #28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	f003 031f 	and.w	r3, r3, #31
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a8d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6a1a      	ldr	r2, [r3, #32]
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	43db      	mvns	r3, r3
 800a8e2:	401a      	ands	r2, r3
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6a1a      	ldr	r2, [r3, #32]
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	f003 031f 	and.w	r3, r3, #31
 800a8f2:	6879      	ldr	r1, [r7, #4]
 800a8f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a8f8:	431a      	orrs	r2, r3
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	621a      	str	r2, [r3, #32]
}
 800a8fe:	bf00      	nop
 800a900:	371c      	adds	r7, #28
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
	...

0800a90c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b085      	sub	sp, #20
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a916:	2300      	movs	r3, #0
 800a918:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a920:	2b01      	cmp	r3, #1
 800a922:	d101      	bne.n	800a928 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a924:	2302      	movs	r3, #2
 800a926:	e073      	b.n	800aa10 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	4313      	orrs	r3, r2
 800a94a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	4313      	orrs	r3, r2
 800a958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4313      	orrs	r3, r2
 800a966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	4313      	orrs	r3, r2
 800a974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	4313      	orrs	r3, r2
 800a982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a98e:	4313      	orrs	r3, r2
 800a990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	699b      	ldr	r3, [r3, #24]
 800a99c:	041b      	lsls	r3, r3, #16
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	69db      	ldr	r3, [r3, #28]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a19      	ldr	r2, [pc, #100]	@ (800aa1c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d004      	beq.n	800a9c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a18      	ldr	r2, [pc, #96]	@ (800aa20 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d11c      	bne.n	800a9fe <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ce:	051b      	lsls	r3, r3, #20
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	6a1b      	ldr	r3, [r3, #32]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aa0e:	2300      	movs	r3, #0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3714      	adds	r7, #20
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr
 800aa1c:	40010000 	.word	0x40010000
 800aa20:	40010400 	.word	0x40010400

0800aa24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d101      	bne.n	800aa36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	e042      	b.n	800aabc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d106      	bne.n	800aa4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f7f7 fee7 	bl	800281c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2224      	movs	r2, #36	@ 0x24
 800aa52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f022 0201 	bic.w	r2, r2, #1
 800aa64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d002      	beq.n	800aa74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 ff38 	bl	800b8e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 f8c9 	bl	800ac0c <UART_SetConfig>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d101      	bne.n	800aa84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	e01b      	b.n	800aabc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	685a      	ldr	r2, [r3, #4]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aa92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	689a      	ldr	r2, [r3, #8]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aaa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f042 0201 	orr.w	r2, r2, #1
 800aab2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 ffb7 	bl	800ba28 <UART_CheckIdleState>
 800aaba:	4603      	mov	r3, r0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b08a      	sub	sp, #40	@ 0x28
 800aac8:	af02      	add	r7, sp, #8
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	603b      	str	r3, [r7, #0]
 800aad0:	4613      	mov	r3, r2
 800aad2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aada:	2b20      	cmp	r3, #32
 800aadc:	d17b      	bne.n	800abd6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d002      	beq.n	800aaea <HAL_UART_Transmit+0x26>
 800aae4:	88fb      	ldrh	r3, [r7, #6]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
 800aaec:	e074      	b.n	800abd8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2221      	movs	r2, #33	@ 0x21
 800aafa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aafe:	f7f8 f88d 	bl	8002c1c <HAL_GetTick>
 800ab02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	88fa      	ldrh	r2, [r7, #6]
 800ab08:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	88fa      	ldrh	r2, [r7, #6]
 800ab10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab1c:	d108      	bne.n	800ab30 <HAL_UART_Transmit+0x6c>
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d104      	bne.n	800ab30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ab26:	2300      	movs	r3, #0
 800ab28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	61bb      	str	r3, [r7, #24]
 800ab2e:	e003      	b.n	800ab38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab34:	2300      	movs	r3, #0
 800ab36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ab38:	e030      	b.n	800ab9c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	9300      	str	r3, [sp, #0]
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	2200      	movs	r2, #0
 800ab42:	2180      	movs	r1, #128	@ 0x80
 800ab44:	68f8      	ldr	r0, [r7, #12]
 800ab46:	f001 f819 	bl	800bb7c <UART_WaitOnFlagUntilTimeout>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d005      	beq.n	800ab5c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2220      	movs	r2, #32
 800ab54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e03d      	b.n	800abd8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10b      	bne.n	800ab7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	881b      	ldrh	r3, [r3, #0]
 800ab66:	461a      	mov	r2, r3
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab70:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	3302      	adds	r3, #2
 800ab76:	61bb      	str	r3, [r7, #24]
 800ab78:	e007      	b.n	800ab8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	781a      	ldrb	r2, [r3, #0]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	3301      	adds	r3, #1
 800ab88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	3b01      	subs	r3, #1
 800ab94:	b29a      	uxth	r2, r3
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1c8      	bne.n	800ab3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	2200      	movs	r2, #0
 800abb0:	2140      	movs	r1, #64	@ 0x40
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f000 ffe2 	bl	800bb7c <UART_WaitOnFlagUntilTimeout>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d005      	beq.n	800abca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2220      	movs	r2, #32
 800abc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800abc6:	2303      	movs	r3, #3
 800abc8:	e006      	b.n	800abd8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2220      	movs	r2, #32
 800abce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800abd2:	2300      	movs	r3, #0
 800abd4:	e000      	b.n	800abd8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800abd6:	2302      	movs	r3, #2
  }
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3720      	adds	r7, #32
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abee:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abf6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	4313      	orrs	r3, r2
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3714      	adds	r7, #20
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr
	...

0800ac0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac10:	b092      	sub	sp, #72	@ 0x48
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac16:	2300      	movs	r3, #0
 800ac18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	689a      	ldr	r2, [r3, #8]
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	691b      	ldr	r3, [r3, #16]
 800ac24:	431a      	orrs	r2, r3
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	695b      	ldr	r3, [r3, #20]
 800ac2a:	431a      	orrs	r2, r3
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	69db      	ldr	r3, [r3, #28]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	4bbe      	ldr	r3, [pc, #760]	@ (800af34 <UART_SetConfig+0x328>)
 800ac3c:	4013      	ands	r3, r2
 800ac3e:	697a      	ldr	r2, [r7, #20]
 800ac40:	6812      	ldr	r2, [r2, #0]
 800ac42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ac44:	430b      	orrs	r3, r1
 800ac46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	68da      	ldr	r2, [r3, #12]
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	430a      	orrs	r2, r1
 800ac5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4ab3      	ldr	r2, [pc, #716]	@ (800af38 <UART_SetConfig+0x32c>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d004      	beq.n	800ac78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	6a1b      	ldr	r3, [r3, #32]
 800ac72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac74:	4313      	orrs	r3, r2
 800ac76:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	689a      	ldr	r2, [r3, #8]
 800ac7e:	4baf      	ldr	r3, [pc, #700]	@ (800af3c <UART_SetConfig+0x330>)
 800ac80:	4013      	ands	r3, r2
 800ac82:	697a      	ldr	r2, [r7, #20]
 800ac84:	6812      	ldr	r2, [r2, #0]
 800ac86:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ac88:	430b      	orrs	r3, r1
 800ac8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac92:	f023 010f 	bic.w	r1, r3, #15
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	430a      	orrs	r2, r1
 800aca0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4aa6      	ldr	r2, [pc, #664]	@ (800af40 <UART_SetConfig+0x334>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d177      	bne.n	800ad9c <UART_SetConfig+0x190>
 800acac:	4ba5      	ldr	r3, [pc, #660]	@ (800af44 <UART_SetConfig+0x338>)
 800acae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800acb4:	2b28      	cmp	r3, #40	@ 0x28
 800acb6:	d86d      	bhi.n	800ad94 <UART_SetConfig+0x188>
 800acb8:	a201      	add	r2, pc, #4	@ (adr r2, 800acc0 <UART_SetConfig+0xb4>)
 800acba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acbe:	bf00      	nop
 800acc0:	0800ad65 	.word	0x0800ad65
 800acc4:	0800ad95 	.word	0x0800ad95
 800acc8:	0800ad95 	.word	0x0800ad95
 800accc:	0800ad95 	.word	0x0800ad95
 800acd0:	0800ad95 	.word	0x0800ad95
 800acd4:	0800ad95 	.word	0x0800ad95
 800acd8:	0800ad95 	.word	0x0800ad95
 800acdc:	0800ad95 	.word	0x0800ad95
 800ace0:	0800ad6d 	.word	0x0800ad6d
 800ace4:	0800ad95 	.word	0x0800ad95
 800ace8:	0800ad95 	.word	0x0800ad95
 800acec:	0800ad95 	.word	0x0800ad95
 800acf0:	0800ad95 	.word	0x0800ad95
 800acf4:	0800ad95 	.word	0x0800ad95
 800acf8:	0800ad95 	.word	0x0800ad95
 800acfc:	0800ad95 	.word	0x0800ad95
 800ad00:	0800ad75 	.word	0x0800ad75
 800ad04:	0800ad95 	.word	0x0800ad95
 800ad08:	0800ad95 	.word	0x0800ad95
 800ad0c:	0800ad95 	.word	0x0800ad95
 800ad10:	0800ad95 	.word	0x0800ad95
 800ad14:	0800ad95 	.word	0x0800ad95
 800ad18:	0800ad95 	.word	0x0800ad95
 800ad1c:	0800ad95 	.word	0x0800ad95
 800ad20:	0800ad7d 	.word	0x0800ad7d
 800ad24:	0800ad95 	.word	0x0800ad95
 800ad28:	0800ad95 	.word	0x0800ad95
 800ad2c:	0800ad95 	.word	0x0800ad95
 800ad30:	0800ad95 	.word	0x0800ad95
 800ad34:	0800ad95 	.word	0x0800ad95
 800ad38:	0800ad95 	.word	0x0800ad95
 800ad3c:	0800ad95 	.word	0x0800ad95
 800ad40:	0800ad85 	.word	0x0800ad85
 800ad44:	0800ad95 	.word	0x0800ad95
 800ad48:	0800ad95 	.word	0x0800ad95
 800ad4c:	0800ad95 	.word	0x0800ad95
 800ad50:	0800ad95 	.word	0x0800ad95
 800ad54:	0800ad95 	.word	0x0800ad95
 800ad58:	0800ad95 	.word	0x0800ad95
 800ad5c:	0800ad95 	.word	0x0800ad95
 800ad60:	0800ad8d 	.word	0x0800ad8d
 800ad64:	2301      	movs	r3, #1
 800ad66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad6a:	e326      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800ad6c:	2304      	movs	r3, #4
 800ad6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad72:	e322      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800ad74:	2308      	movs	r3, #8
 800ad76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad7a:	e31e      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800ad7c:	2310      	movs	r3, #16
 800ad7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad82:	e31a      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800ad84:	2320      	movs	r3, #32
 800ad86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8a:	e316      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800ad8c:	2340      	movs	r3, #64	@ 0x40
 800ad8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad92:	e312      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800ad94:	2380      	movs	r3, #128	@ 0x80
 800ad96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad9a:	e30e      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a69      	ldr	r2, [pc, #420]	@ (800af48 <UART_SetConfig+0x33c>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d130      	bne.n	800ae08 <UART_SetConfig+0x1fc>
 800ada6:	4b67      	ldr	r3, [pc, #412]	@ (800af44 <UART_SetConfig+0x338>)
 800ada8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adaa:	f003 0307 	and.w	r3, r3, #7
 800adae:	2b05      	cmp	r3, #5
 800adb0:	d826      	bhi.n	800ae00 <UART_SetConfig+0x1f4>
 800adb2:	a201      	add	r2, pc, #4	@ (adr r2, 800adb8 <UART_SetConfig+0x1ac>)
 800adb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb8:	0800add1 	.word	0x0800add1
 800adbc:	0800add9 	.word	0x0800add9
 800adc0:	0800ade1 	.word	0x0800ade1
 800adc4:	0800ade9 	.word	0x0800ade9
 800adc8:	0800adf1 	.word	0x0800adf1
 800adcc:	0800adf9 	.word	0x0800adf9
 800add0:	2300      	movs	r3, #0
 800add2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800add6:	e2f0      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800add8:	2304      	movs	r3, #4
 800adda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adde:	e2ec      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800ade0:	2308      	movs	r3, #8
 800ade2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ade6:	e2e8      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800ade8:	2310      	movs	r3, #16
 800adea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adee:	e2e4      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800adf0:	2320      	movs	r3, #32
 800adf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf6:	e2e0      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800adf8:	2340      	movs	r3, #64	@ 0x40
 800adfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfe:	e2dc      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800ae00:	2380      	movs	r3, #128	@ 0x80
 800ae02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae06:	e2d8      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a4f      	ldr	r2, [pc, #316]	@ (800af4c <UART_SetConfig+0x340>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d130      	bne.n	800ae74 <UART_SetConfig+0x268>
 800ae12:	4b4c      	ldr	r3, [pc, #304]	@ (800af44 <UART_SetConfig+0x338>)
 800ae14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae16:	f003 0307 	and.w	r3, r3, #7
 800ae1a:	2b05      	cmp	r3, #5
 800ae1c:	d826      	bhi.n	800ae6c <UART_SetConfig+0x260>
 800ae1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ae24 <UART_SetConfig+0x218>)
 800ae20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae24:	0800ae3d 	.word	0x0800ae3d
 800ae28:	0800ae45 	.word	0x0800ae45
 800ae2c:	0800ae4d 	.word	0x0800ae4d
 800ae30:	0800ae55 	.word	0x0800ae55
 800ae34:	0800ae5d 	.word	0x0800ae5d
 800ae38:	0800ae65 	.word	0x0800ae65
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae42:	e2ba      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800ae44:	2304      	movs	r3, #4
 800ae46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae4a:	e2b6      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800ae4c:	2308      	movs	r3, #8
 800ae4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae52:	e2b2      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800ae54:	2310      	movs	r3, #16
 800ae56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae5a:	e2ae      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800ae5c:	2320      	movs	r3, #32
 800ae5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae62:	e2aa      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800ae64:	2340      	movs	r3, #64	@ 0x40
 800ae66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae6a:	e2a6      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800ae6c:	2380      	movs	r3, #128	@ 0x80
 800ae6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae72:	e2a2      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a35      	ldr	r2, [pc, #212]	@ (800af50 <UART_SetConfig+0x344>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d130      	bne.n	800aee0 <UART_SetConfig+0x2d4>
 800ae7e:	4b31      	ldr	r3, [pc, #196]	@ (800af44 <UART_SetConfig+0x338>)
 800ae80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae82:	f003 0307 	and.w	r3, r3, #7
 800ae86:	2b05      	cmp	r3, #5
 800ae88:	d826      	bhi.n	800aed8 <UART_SetConfig+0x2cc>
 800ae8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae90 <UART_SetConfig+0x284>)
 800ae8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae90:	0800aea9 	.word	0x0800aea9
 800ae94:	0800aeb1 	.word	0x0800aeb1
 800ae98:	0800aeb9 	.word	0x0800aeb9
 800ae9c:	0800aec1 	.word	0x0800aec1
 800aea0:	0800aec9 	.word	0x0800aec9
 800aea4:	0800aed1 	.word	0x0800aed1
 800aea8:	2300      	movs	r3, #0
 800aeaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeae:	e284      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800aeb0:	2304      	movs	r3, #4
 800aeb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeb6:	e280      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800aeb8:	2308      	movs	r3, #8
 800aeba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aebe:	e27c      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800aec0:	2310      	movs	r3, #16
 800aec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aec6:	e278      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800aec8:	2320      	movs	r3, #32
 800aeca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aece:	e274      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800aed0:	2340      	movs	r3, #64	@ 0x40
 800aed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aed6:	e270      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800aed8:	2380      	movs	r3, #128	@ 0x80
 800aeda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aede:	e26c      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a1b      	ldr	r2, [pc, #108]	@ (800af54 <UART_SetConfig+0x348>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d142      	bne.n	800af70 <UART_SetConfig+0x364>
 800aeea:	4b16      	ldr	r3, [pc, #88]	@ (800af44 <UART_SetConfig+0x338>)
 800aeec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeee:	f003 0307 	and.w	r3, r3, #7
 800aef2:	2b05      	cmp	r3, #5
 800aef4:	d838      	bhi.n	800af68 <UART_SetConfig+0x35c>
 800aef6:	a201      	add	r2, pc, #4	@ (adr r2, 800aefc <UART_SetConfig+0x2f0>)
 800aef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aefc:	0800af15 	.word	0x0800af15
 800af00:	0800af1d 	.word	0x0800af1d
 800af04:	0800af25 	.word	0x0800af25
 800af08:	0800af2d 	.word	0x0800af2d
 800af0c:	0800af59 	.word	0x0800af59
 800af10:	0800af61 	.word	0x0800af61
 800af14:	2300      	movs	r3, #0
 800af16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af1a:	e24e      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800af1c:	2304      	movs	r3, #4
 800af1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af22:	e24a      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800af24:	2308      	movs	r3, #8
 800af26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af2a:	e246      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800af2c:	2310      	movs	r3, #16
 800af2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af32:	e242      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800af34:	cfff69f3 	.word	0xcfff69f3
 800af38:	58000c00 	.word	0x58000c00
 800af3c:	11fff4ff 	.word	0x11fff4ff
 800af40:	40011000 	.word	0x40011000
 800af44:	58024400 	.word	0x58024400
 800af48:	40004400 	.word	0x40004400
 800af4c:	40004800 	.word	0x40004800
 800af50:	40004c00 	.word	0x40004c00
 800af54:	40005000 	.word	0x40005000
 800af58:	2320      	movs	r3, #32
 800af5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af5e:	e22c      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800af60:	2340      	movs	r3, #64	@ 0x40
 800af62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af66:	e228      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800af68:	2380      	movs	r3, #128	@ 0x80
 800af6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af6e:	e224      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4ab1      	ldr	r2, [pc, #708]	@ (800b23c <UART_SetConfig+0x630>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d176      	bne.n	800b068 <UART_SetConfig+0x45c>
 800af7a:	4bb1      	ldr	r3, [pc, #708]	@ (800b240 <UART_SetConfig+0x634>)
 800af7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800af82:	2b28      	cmp	r3, #40	@ 0x28
 800af84:	d86c      	bhi.n	800b060 <UART_SetConfig+0x454>
 800af86:	a201      	add	r2, pc, #4	@ (adr r2, 800af8c <UART_SetConfig+0x380>)
 800af88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af8c:	0800b031 	.word	0x0800b031
 800af90:	0800b061 	.word	0x0800b061
 800af94:	0800b061 	.word	0x0800b061
 800af98:	0800b061 	.word	0x0800b061
 800af9c:	0800b061 	.word	0x0800b061
 800afa0:	0800b061 	.word	0x0800b061
 800afa4:	0800b061 	.word	0x0800b061
 800afa8:	0800b061 	.word	0x0800b061
 800afac:	0800b039 	.word	0x0800b039
 800afb0:	0800b061 	.word	0x0800b061
 800afb4:	0800b061 	.word	0x0800b061
 800afb8:	0800b061 	.word	0x0800b061
 800afbc:	0800b061 	.word	0x0800b061
 800afc0:	0800b061 	.word	0x0800b061
 800afc4:	0800b061 	.word	0x0800b061
 800afc8:	0800b061 	.word	0x0800b061
 800afcc:	0800b041 	.word	0x0800b041
 800afd0:	0800b061 	.word	0x0800b061
 800afd4:	0800b061 	.word	0x0800b061
 800afd8:	0800b061 	.word	0x0800b061
 800afdc:	0800b061 	.word	0x0800b061
 800afe0:	0800b061 	.word	0x0800b061
 800afe4:	0800b061 	.word	0x0800b061
 800afe8:	0800b061 	.word	0x0800b061
 800afec:	0800b049 	.word	0x0800b049
 800aff0:	0800b061 	.word	0x0800b061
 800aff4:	0800b061 	.word	0x0800b061
 800aff8:	0800b061 	.word	0x0800b061
 800affc:	0800b061 	.word	0x0800b061
 800b000:	0800b061 	.word	0x0800b061
 800b004:	0800b061 	.word	0x0800b061
 800b008:	0800b061 	.word	0x0800b061
 800b00c:	0800b051 	.word	0x0800b051
 800b010:	0800b061 	.word	0x0800b061
 800b014:	0800b061 	.word	0x0800b061
 800b018:	0800b061 	.word	0x0800b061
 800b01c:	0800b061 	.word	0x0800b061
 800b020:	0800b061 	.word	0x0800b061
 800b024:	0800b061 	.word	0x0800b061
 800b028:	0800b061 	.word	0x0800b061
 800b02c:	0800b059 	.word	0x0800b059
 800b030:	2301      	movs	r3, #1
 800b032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b036:	e1c0      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b038:	2304      	movs	r3, #4
 800b03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b03e:	e1bc      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b040:	2308      	movs	r3, #8
 800b042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b046:	e1b8      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b048:	2310      	movs	r3, #16
 800b04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b04e:	e1b4      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b050:	2320      	movs	r3, #32
 800b052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b056:	e1b0      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b058:	2340      	movs	r3, #64	@ 0x40
 800b05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b05e:	e1ac      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b060:	2380      	movs	r3, #128	@ 0x80
 800b062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b066:	e1a8      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a75      	ldr	r2, [pc, #468]	@ (800b244 <UART_SetConfig+0x638>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d130      	bne.n	800b0d4 <UART_SetConfig+0x4c8>
 800b072:	4b73      	ldr	r3, [pc, #460]	@ (800b240 <UART_SetConfig+0x634>)
 800b074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b076:	f003 0307 	and.w	r3, r3, #7
 800b07a:	2b05      	cmp	r3, #5
 800b07c:	d826      	bhi.n	800b0cc <UART_SetConfig+0x4c0>
 800b07e:	a201      	add	r2, pc, #4	@ (adr r2, 800b084 <UART_SetConfig+0x478>)
 800b080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b084:	0800b09d 	.word	0x0800b09d
 800b088:	0800b0a5 	.word	0x0800b0a5
 800b08c:	0800b0ad 	.word	0x0800b0ad
 800b090:	0800b0b5 	.word	0x0800b0b5
 800b094:	0800b0bd 	.word	0x0800b0bd
 800b098:	0800b0c5 	.word	0x0800b0c5
 800b09c:	2300      	movs	r3, #0
 800b09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0a2:	e18a      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b0a4:	2304      	movs	r3, #4
 800b0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0aa:	e186      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b0ac:	2308      	movs	r3, #8
 800b0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0b2:	e182      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b0b4:	2310      	movs	r3, #16
 800b0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ba:	e17e      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b0bc:	2320      	movs	r3, #32
 800b0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0c2:	e17a      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b0c4:	2340      	movs	r3, #64	@ 0x40
 800b0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ca:	e176      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b0cc:	2380      	movs	r3, #128	@ 0x80
 800b0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0d2:	e172      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a5b      	ldr	r2, [pc, #364]	@ (800b248 <UART_SetConfig+0x63c>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d130      	bne.n	800b140 <UART_SetConfig+0x534>
 800b0de:	4b58      	ldr	r3, [pc, #352]	@ (800b240 <UART_SetConfig+0x634>)
 800b0e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0e2:	f003 0307 	and.w	r3, r3, #7
 800b0e6:	2b05      	cmp	r3, #5
 800b0e8:	d826      	bhi.n	800b138 <UART_SetConfig+0x52c>
 800b0ea:	a201      	add	r2, pc, #4	@ (adr r2, 800b0f0 <UART_SetConfig+0x4e4>)
 800b0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f0:	0800b109 	.word	0x0800b109
 800b0f4:	0800b111 	.word	0x0800b111
 800b0f8:	0800b119 	.word	0x0800b119
 800b0fc:	0800b121 	.word	0x0800b121
 800b100:	0800b129 	.word	0x0800b129
 800b104:	0800b131 	.word	0x0800b131
 800b108:	2300      	movs	r3, #0
 800b10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b10e:	e154      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b110:	2304      	movs	r3, #4
 800b112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b116:	e150      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b118:	2308      	movs	r3, #8
 800b11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b11e:	e14c      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b120:	2310      	movs	r3, #16
 800b122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b126:	e148      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b128:	2320      	movs	r3, #32
 800b12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b12e:	e144      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b130:	2340      	movs	r3, #64	@ 0x40
 800b132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b136:	e140      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b138:	2380      	movs	r3, #128	@ 0x80
 800b13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b13e:	e13c      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a41      	ldr	r2, [pc, #260]	@ (800b24c <UART_SetConfig+0x640>)
 800b146:	4293      	cmp	r3, r2
 800b148:	f040 8082 	bne.w	800b250 <UART_SetConfig+0x644>
 800b14c:	4b3c      	ldr	r3, [pc, #240]	@ (800b240 <UART_SetConfig+0x634>)
 800b14e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b150:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b154:	2b28      	cmp	r3, #40	@ 0x28
 800b156:	d86d      	bhi.n	800b234 <UART_SetConfig+0x628>
 800b158:	a201      	add	r2, pc, #4	@ (adr r2, 800b160 <UART_SetConfig+0x554>)
 800b15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b15e:	bf00      	nop
 800b160:	0800b205 	.word	0x0800b205
 800b164:	0800b235 	.word	0x0800b235
 800b168:	0800b235 	.word	0x0800b235
 800b16c:	0800b235 	.word	0x0800b235
 800b170:	0800b235 	.word	0x0800b235
 800b174:	0800b235 	.word	0x0800b235
 800b178:	0800b235 	.word	0x0800b235
 800b17c:	0800b235 	.word	0x0800b235
 800b180:	0800b20d 	.word	0x0800b20d
 800b184:	0800b235 	.word	0x0800b235
 800b188:	0800b235 	.word	0x0800b235
 800b18c:	0800b235 	.word	0x0800b235
 800b190:	0800b235 	.word	0x0800b235
 800b194:	0800b235 	.word	0x0800b235
 800b198:	0800b235 	.word	0x0800b235
 800b19c:	0800b235 	.word	0x0800b235
 800b1a0:	0800b215 	.word	0x0800b215
 800b1a4:	0800b235 	.word	0x0800b235
 800b1a8:	0800b235 	.word	0x0800b235
 800b1ac:	0800b235 	.word	0x0800b235
 800b1b0:	0800b235 	.word	0x0800b235
 800b1b4:	0800b235 	.word	0x0800b235
 800b1b8:	0800b235 	.word	0x0800b235
 800b1bc:	0800b235 	.word	0x0800b235
 800b1c0:	0800b21d 	.word	0x0800b21d
 800b1c4:	0800b235 	.word	0x0800b235
 800b1c8:	0800b235 	.word	0x0800b235
 800b1cc:	0800b235 	.word	0x0800b235
 800b1d0:	0800b235 	.word	0x0800b235
 800b1d4:	0800b235 	.word	0x0800b235
 800b1d8:	0800b235 	.word	0x0800b235
 800b1dc:	0800b235 	.word	0x0800b235
 800b1e0:	0800b225 	.word	0x0800b225
 800b1e4:	0800b235 	.word	0x0800b235
 800b1e8:	0800b235 	.word	0x0800b235
 800b1ec:	0800b235 	.word	0x0800b235
 800b1f0:	0800b235 	.word	0x0800b235
 800b1f4:	0800b235 	.word	0x0800b235
 800b1f8:	0800b235 	.word	0x0800b235
 800b1fc:	0800b235 	.word	0x0800b235
 800b200:	0800b22d 	.word	0x0800b22d
 800b204:	2301      	movs	r3, #1
 800b206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b20a:	e0d6      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b20c:	2304      	movs	r3, #4
 800b20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b212:	e0d2      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b214:	2308      	movs	r3, #8
 800b216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b21a:	e0ce      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b21c:	2310      	movs	r3, #16
 800b21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b222:	e0ca      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b224:	2320      	movs	r3, #32
 800b226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b22a:	e0c6      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b22c:	2340      	movs	r3, #64	@ 0x40
 800b22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b232:	e0c2      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b234:	2380      	movs	r3, #128	@ 0x80
 800b236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b23a:	e0be      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b23c:	40011400 	.word	0x40011400
 800b240:	58024400 	.word	0x58024400
 800b244:	40007800 	.word	0x40007800
 800b248:	40007c00 	.word	0x40007c00
 800b24c:	40011800 	.word	0x40011800
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4aad      	ldr	r2, [pc, #692]	@ (800b50c <UART_SetConfig+0x900>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d176      	bne.n	800b348 <UART_SetConfig+0x73c>
 800b25a:	4bad      	ldr	r3, [pc, #692]	@ (800b510 <UART_SetConfig+0x904>)
 800b25c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b25e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b262:	2b28      	cmp	r3, #40	@ 0x28
 800b264:	d86c      	bhi.n	800b340 <UART_SetConfig+0x734>
 800b266:	a201      	add	r2, pc, #4	@ (adr r2, 800b26c <UART_SetConfig+0x660>)
 800b268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b26c:	0800b311 	.word	0x0800b311
 800b270:	0800b341 	.word	0x0800b341
 800b274:	0800b341 	.word	0x0800b341
 800b278:	0800b341 	.word	0x0800b341
 800b27c:	0800b341 	.word	0x0800b341
 800b280:	0800b341 	.word	0x0800b341
 800b284:	0800b341 	.word	0x0800b341
 800b288:	0800b341 	.word	0x0800b341
 800b28c:	0800b319 	.word	0x0800b319
 800b290:	0800b341 	.word	0x0800b341
 800b294:	0800b341 	.word	0x0800b341
 800b298:	0800b341 	.word	0x0800b341
 800b29c:	0800b341 	.word	0x0800b341
 800b2a0:	0800b341 	.word	0x0800b341
 800b2a4:	0800b341 	.word	0x0800b341
 800b2a8:	0800b341 	.word	0x0800b341
 800b2ac:	0800b321 	.word	0x0800b321
 800b2b0:	0800b341 	.word	0x0800b341
 800b2b4:	0800b341 	.word	0x0800b341
 800b2b8:	0800b341 	.word	0x0800b341
 800b2bc:	0800b341 	.word	0x0800b341
 800b2c0:	0800b341 	.word	0x0800b341
 800b2c4:	0800b341 	.word	0x0800b341
 800b2c8:	0800b341 	.word	0x0800b341
 800b2cc:	0800b329 	.word	0x0800b329
 800b2d0:	0800b341 	.word	0x0800b341
 800b2d4:	0800b341 	.word	0x0800b341
 800b2d8:	0800b341 	.word	0x0800b341
 800b2dc:	0800b341 	.word	0x0800b341
 800b2e0:	0800b341 	.word	0x0800b341
 800b2e4:	0800b341 	.word	0x0800b341
 800b2e8:	0800b341 	.word	0x0800b341
 800b2ec:	0800b331 	.word	0x0800b331
 800b2f0:	0800b341 	.word	0x0800b341
 800b2f4:	0800b341 	.word	0x0800b341
 800b2f8:	0800b341 	.word	0x0800b341
 800b2fc:	0800b341 	.word	0x0800b341
 800b300:	0800b341 	.word	0x0800b341
 800b304:	0800b341 	.word	0x0800b341
 800b308:	0800b341 	.word	0x0800b341
 800b30c:	0800b339 	.word	0x0800b339
 800b310:	2301      	movs	r3, #1
 800b312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b316:	e050      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b318:	2304      	movs	r3, #4
 800b31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b31e:	e04c      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b320:	2308      	movs	r3, #8
 800b322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b326:	e048      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b328:	2310      	movs	r3, #16
 800b32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b32e:	e044      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b330:	2320      	movs	r3, #32
 800b332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b336:	e040      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b338:	2340      	movs	r3, #64	@ 0x40
 800b33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b33e:	e03c      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b340:	2380      	movs	r3, #128	@ 0x80
 800b342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b346:	e038      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a71      	ldr	r2, [pc, #452]	@ (800b514 <UART_SetConfig+0x908>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d130      	bne.n	800b3b4 <UART_SetConfig+0x7a8>
 800b352:	4b6f      	ldr	r3, [pc, #444]	@ (800b510 <UART_SetConfig+0x904>)
 800b354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b356:	f003 0307 	and.w	r3, r3, #7
 800b35a:	2b05      	cmp	r3, #5
 800b35c:	d826      	bhi.n	800b3ac <UART_SetConfig+0x7a0>
 800b35e:	a201      	add	r2, pc, #4	@ (adr r2, 800b364 <UART_SetConfig+0x758>)
 800b360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b364:	0800b37d 	.word	0x0800b37d
 800b368:	0800b385 	.word	0x0800b385
 800b36c:	0800b38d 	.word	0x0800b38d
 800b370:	0800b395 	.word	0x0800b395
 800b374:	0800b39d 	.word	0x0800b39d
 800b378:	0800b3a5 	.word	0x0800b3a5
 800b37c:	2302      	movs	r3, #2
 800b37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b382:	e01a      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b384:	2304      	movs	r3, #4
 800b386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b38a:	e016      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b38c:	2308      	movs	r3, #8
 800b38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b392:	e012      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b394:	2310      	movs	r3, #16
 800b396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b39a:	e00e      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b39c:	2320      	movs	r3, #32
 800b39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3a2:	e00a      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b3a4:	2340      	movs	r3, #64	@ 0x40
 800b3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3aa:	e006      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b3ac:	2380      	movs	r3, #128	@ 0x80
 800b3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3b2:	e002      	b.n	800b3ba <UART_SetConfig+0x7ae>
 800b3b4:	2380      	movs	r3, #128	@ 0x80
 800b3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a55      	ldr	r2, [pc, #340]	@ (800b514 <UART_SetConfig+0x908>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	f040 80f8 	bne.w	800b5b6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b3c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b3ca:	2b20      	cmp	r3, #32
 800b3cc:	dc46      	bgt.n	800b45c <UART_SetConfig+0x850>
 800b3ce:	2b02      	cmp	r3, #2
 800b3d0:	db75      	blt.n	800b4be <UART_SetConfig+0x8b2>
 800b3d2:	3b02      	subs	r3, #2
 800b3d4:	2b1e      	cmp	r3, #30
 800b3d6:	d872      	bhi.n	800b4be <UART_SetConfig+0x8b2>
 800b3d8:	a201      	add	r2, pc, #4	@ (adr r2, 800b3e0 <UART_SetConfig+0x7d4>)
 800b3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3de:	bf00      	nop
 800b3e0:	0800b463 	.word	0x0800b463
 800b3e4:	0800b4bf 	.word	0x0800b4bf
 800b3e8:	0800b46b 	.word	0x0800b46b
 800b3ec:	0800b4bf 	.word	0x0800b4bf
 800b3f0:	0800b4bf 	.word	0x0800b4bf
 800b3f4:	0800b4bf 	.word	0x0800b4bf
 800b3f8:	0800b47b 	.word	0x0800b47b
 800b3fc:	0800b4bf 	.word	0x0800b4bf
 800b400:	0800b4bf 	.word	0x0800b4bf
 800b404:	0800b4bf 	.word	0x0800b4bf
 800b408:	0800b4bf 	.word	0x0800b4bf
 800b40c:	0800b4bf 	.word	0x0800b4bf
 800b410:	0800b4bf 	.word	0x0800b4bf
 800b414:	0800b4bf 	.word	0x0800b4bf
 800b418:	0800b48b 	.word	0x0800b48b
 800b41c:	0800b4bf 	.word	0x0800b4bf
 800b420:	0800b4bf 	.word	0x0800b4bf
 800b424:	0800b4bf 	.word	0x0800b4bf
 800b428:	0800b4bf 	.word	0x0800b4bf
 800b42c:	0800b4bf 	.word	0x0800b4bf
 800b430:	0800b4bf 	.word	0x0800b4bf
 800b434:	0800b4bf 	.word	0x0800b4bf
 800b438:	0800b4bf 	.word	0x0800b4bf
 800b43c:	0800b4bf 	.word	0x0800b4bf
 800b440:	0800b4bf 	.word	0x0800b4bf
 800b444:	0800b4bf 	.word	0x0800b4bf
 800b448:	0800b4bf 	.word	0x0800b4bf
 800b44c:	0800b4bf 	.word	0x0800b4bf
 800b450:	0800b4bf 	.word	0x0800b4bf
 800b454:	0800b4bf 	.word	0x0800b4bf
 800b458:	0800b4b1 	.word	0x0800b4b1
 800b45c:	2b40      	cmp	r3, #64	@ 0x40
 800b45e:	d02a      	beq.n	800b4b6 <UART_SetConfig+0x8aa>
 800b460:	e02d      	b.n	800b4be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b462:	f7fd fe4f 	bl	8009104 <HAL_RCCEx_GetD3PCLK1Freq>
 800b466:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b468:	e02f      	b.n	800b4ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b46a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fd fe5e 	bl	8009130 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b478:	e027      	b.n	800b4ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b47a:	f107 0318 	add.w	r3, r7, #24
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fd ffaa 	bl	80093d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b488:	e01f      	b.n	800b4ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b48a:	4b21      	ldr	r3, [pc, #132]	@ (800b510 <UART_SetConfig+0x904>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 0320 	and.w	r3, r3, #32
 800b492:	2b00      	cmp	r3, #0
 800b494:	d009      	beq.n	800b4aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b496:	4b1e      	ldr	r3, [pc, #120]	@ (800b510 <UART_SetConfig+0x904>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	08db      	lsrs	r3, r3, #3
 800b49c:	f003 0303 	and.w	r3, r3, #3
 800b4a0:	4a1d      	ldr	r2, [pc, #116]	@ (800b518 <UART_SetConfig+0x90c>)
 800b4a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b4a8:	e00f      	b.n	800b4ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b4aa:	4b1b      	ldr	r3, [pc, #108]	@ (800b518 <UART_SetConfig+0x90c>)
 800b4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4ae:	e00c      	b.n	800b4ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b4b0:	4b1a      	ldr	r3, [pc, #104]	@ (800b51c <UART_SetConfig+0x910>)
 800b4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4b4:	e009      	b.n	800b4ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4bc:	e005      	b.n	800b4ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b4c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b4ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	f000 81ee 	beq.w	800b8ae <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4d6:	4a12      	ldr	r2, [pc, #72]	@ (800b520 <UART_SetConfig+0x914>)
 800b4d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4dc:	461a      	mov	r2, r3
 800b4de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4e4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	685a      	ldr	r2, [r3, #4]
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	005b      	lsls	r3, r3, #1
 800b4ee:	4413      	add	r3, r2
 800b4f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d305      	bcc.n	800b502 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b4fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d910      	bls.n	800b524 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b502:	2301      	movs	r3, #1
 800b504:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b508:	e1d1      	b.n	800b8ae <UART_SetConfig+0xca2>
 800b50a:	bf00      	nop
 800b50c:	40011c00 	.word	0x40011c00
 800b510:	58024400 	.word	0x58024400
 800b514:	58000c00 	.word	0x58000c00
 800b518:	03d09000 	.word	0x03d09000
 800b51c:	003d0900 	.word	0x003d0900
 800b520:	0800cbfc 	.word	0x0800cbfc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b526:	2200      	movs	r2, #0
 800b528:	60bb      	str	r3, [r7, #8]
 800b52a:	60fa      	str	r2, [r7, #12]
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b530:	4ac0      	ldr	r2, [pc, #768]	@ (800b834 <UART_SetConfig+0xc28>)
 800b532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b536:	b29b      	uxth	r3, r3
 800b538:	2200      	movs	r2, #0
 800b53a:	603b      	str	r3, [r7, #0]
 800b53c:	607a      	str	r2, [r7, #4]
 800b53e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b542:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b546:	f7f4 ff3b 	bl	80003c0 <__aeabi_uldivmod>
 800b54a:	4602      	mov	r2, r0
 800b54c:	460b      	mov	r3, r1
 800b54e:	4610      	mov	r0, r2
 800b550:	4619      	mov	r1, r3
 800b552:	f04f 0200 	mov.w	r2, #0
 800b556:	f04f 0300 	mov.w	r3, #0
 800b55a:	020b      	lsls	r3, r1, #8
 800b55c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b560:	0202      	lsls	r2, r0, #8
 800b562:	6979      	ldr	r1, [r7, #20]
 800b564:	6849      	ldr	r1, [r1, #4]
 800b566:	0849      	lsrs	r1, r1, #1
 800b568:	2000      	movs	r0, #0
 800b56a:	460c      	mov	r4, r1
 800b56c:	4605      	mov	r5, r0
 800b56e:	eb12 0804 	adds.w	r8, r2, r4
 800b572:	eb43 0905 	adc.w	r9, r3, r5
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	469a      	mov	sl, r3
 800b57e:	4693      	mov	fp, r2
 800b580:	4652      	mov	r2, sl
 800b582:	465b      	mov	r3, fp
 800b584:	4640      	mov	r0, r8
 800b586:	4649      	mov	r1, r9
 800b588:	f7f4 ff1a 	bl	80003c0 <__aeabi_uldivmod>
 800b58c:	4602      	mov	r2, r0
 800b58e:	460b      	mov	r3, r1
 800b590:	4613      	mov	r3, r2
 800b592:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b596:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b59a:	d308      	bcc.n	800b5ae <UART_SetConfig+0x9a2>
 800b59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b59e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5a2:	d204      	bcs.n	800b5ae <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b5aa:	60da      	str	r2, [r3, #12]
 800b5ac:	e17f      	b.n	800b8ae <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b5b4:	e17b      	b.n	800b8ae <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	69db      	ldr	r3, [r3, #28]
 800b5ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b5be:	f040 80bd 	bne.w	800b73c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b5c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b5c6:	2b20      	cmp	r3, #32
 800b5c8:	dc48      	bgt.n	800b65c <UART_SetConfig+0xa50>
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	db7b      	blt.n	800b6c6 <UART_SetConfig+0xaba>
 800b5ce:	2b20      	cmp	r3, #32
 800b5d0:	d879      	bhi.n	800b6c6 <UART_SetConfig+0xaba>
 800b5d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b5d8 <UART_SetConfig+0x9cc>)
 800b5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d8:	0800b663 	.word	0x0800b663
 800b5dc:	0800b66b 	.word	0x0800b66b
 800b5e0:	0800b6c7 	.word	0x0800b6c7
 800b5e4:	0800b6c7 	.word	0x0800b6c7
 800b5e8:	0800b673 	.word	0x0800b673
 800b5ec:	0800b6c7 	.word	0x0800b6c7
 800b5f0:	0800b6c7 	.word	0x0800b6c7
 800b5f4:	0800b6c7 	.word	0x0800b6c7
 800b5f8:	0800b683 	.word	0x0800b683
 800b5fc:	0800b6c7 	.word	0x0800b6c7
 800b600:	0800b6c7 	.word	0x0800b6c7
 800b604:	0800b6c7 	.word	0x0800b6c7
 800b608:	0800b6c7 	.word	0x0800b6c7
 800b60c:	0800b6c7 	.word	0x0800b6c7
 800b610:	0800b6c7 	.word	0x0800b6c7
 800b614:	0800b6c7 	.word	0x0800b6c7
 800b618:	0800b693 	.word	0x0800b693
 800b61c:	0800b6c7 	.word	0x0800b6c7
 800b620:	0800b6c7 	.word	0x0800b6c7
 800b624:	0800b6c7 	.word	0x0800b6c7
 800b628:	0800b6c7 	.word	0x0800b6c7
 800b62c:	0800b6c7 	.word	0x0800b6c7
 800b630:	0800b6c7 	.word	0x0800b6c7
 800b634:	0800b6c7 	.word	0x0800b6c7
 800b638:	0800b6c7 	.word	0x0800b6c7
 800b63c:	0800b6c7 	.word	0x0800b6c7
 800b640:	0800b6c7 	.word	0x0800b6c7
 800b644:	0800b6c7 	.word	0x0800b6c7
 800b648:	0800b6c7 	.word	0x0800b6c7
 800b64c:	0800b6c7 	.word	0x0800b6c7
 800b650:	0800b6c7 	.word	0x0800b6c7
 800b654:	0800b6c7 	.word	0x0800b6c7
 800b658:	0800b6b9 	.word	0x0800b6b9
 800b65c:	2b40      	cmp	r3, #64	@ 0x40
 800b65e:	d02e      	beq.n	800b6be <UART_SetConfig+0xab2>
 800b660:	e031      	b.n	800b6c6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b662:	f7fb feb1 	bl	80073c8 <HAL_RCC_GetPCLK1Freq>
 800b666:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b668:	e033      	b.n	800b6d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b66a:	f7fb fec3 	bl	80073f4 <HAL_RCC_GetPCLK2Freq>
 800b66e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b670:	e02f      	b.n	800b6d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b676:	4618      	mov	r0, r3
 800b678:	f7fd fd5a 	bl	8009130 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b680:	e027      	b.n	800b6d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b682:	f107 0318 	add.w	r3, r7, #24
 800b686:	4618      	mov	r0, r3
 800b688:	f7fd fea6 	bl	80093d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b690:	e01f      	b.n	800b6d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b692:	4b69      	ldr	r3, [pc, #420]	@ (800b838 <UART_SetConfig+0xc2c>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f003 0320 	and.w	r3, r3, #32
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d009      	beq.n	800b6b2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b69e:	4b66      	ldr	r3, [pc, #408]	@ (800b838 <UART_SetConfig+0xc2c>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	08db      	lsrs	r3, r3, #3
 800b6a4:	f003 0303 	and.w	r3, r3, #3
 800b6a8:	4a64      	ldr	r2, [pc, #400]	@ (800b83c <UART_SetConfig+0xc30>)
 800b6aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b6b0:	e00f      	b.n	800b6d2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b6b2:	4b62      	ldr	r3, [pc, #392]	@ (800b83c <UART_SetConfig+0xc30>)
 800b6b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6b6:	e00c      	b.n	800b6d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b6b8:	4b61      	ldr	r3, [pc, #388]	@ (800b840 <UART_SetConfig+0xc34>)
 800b6ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6bc:	e009      	b.n	800b6d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b6c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6c4:	e005      	b.n	800b6d2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b6d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b6d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f000 80ea 	beq.w	800b8ae <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6de:	4a55      	ldr	r2, [pc, #340]	@ (800b834 <UART_SetConfig+0xc28>)
 800b6e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6ec:	005a      	lsls	r2, r3, #1
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	085b      	lsrs	r3, r3, #1
 800b6f4:	441a      	add	r2, r3
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b702:	2b0f      	cmp	r3, #15
 800b704:	d916      	bls.n	800b734 <UART_SetConfig+0xb28>
 800b706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b70c:	d212      	bcs.n	800b734 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b710:	b29b      	uxth	r3, r3
 800b712:	f023 030f 	bic.w	r3, r3, #15
 800b716:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b71a:	085b      	lsrs	r3, r3, #1
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	f003 0307 	and.w	r3, r3, #7
 800b722:	b29a      	uxth	r2, r3
 800b724:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b726:	4313      	orrs	r3, r2
 800b728:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b730:	60da      	str	r2, [r3, #12]
 800b732:	e0bc      	b.n	800b8ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b73a:	e0b8      	b.n	800b8ae <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b73c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b740:	2b20      	cmp	r3, #32
 800b742:	dc4b      	bgt.n	800b7dc <UART_SetConfig+0xbd0>
 800b744:	2b00      	cmp	r3, #0
 800b746:	f2c0 8087 	blt.w	800b858 <UART_SetConfig+0xc4c>
 800b74a:	2b20      	cmp	r3, #32
 800b74c:	f200 8084 	bhi.w	800b858 <UART_SetConfig+0xc4c>
 800b750:	a201      	add	r2, pc, #4	@ (adr r2, 800b758 <UART_SetConfig+0xb4c>)
 800b752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b756:	bf00      	nop
 800b758:	0800b7e3 	.word	0x0800b7e3
 800b75c:	0800b7eb 	.word	0x0800b7eb
 800b760:	0800b859 	.word	0x0800b859
 800b764:	0800b859 	.word	0x0800b859
 800b768:	0800b7f3 	.word	0x0800b7f3
 800b76c:	0800b859 	.word	0x0800b859
 800b770:	0800b859 	.word	0x0800b859
 800b774:	0800b859 	.word	0x0800b859
 800b778:	0800b803 	.word	0x0800b803
 800b77c:	0800b859 	.word	0x0800b859
 800b780:	0800b859 	.word	0x0800b859
 800b784:	0800b859 	.word	0x0800b859
 800b788:	0800b859 	.word	0x0800b859
 800b78c:	0800b859 	.word	0x0800b859
 800b790:	0800b859 	.word	0x0800b859
 800b794:	0800b859 	.word	0x0800b859
 800b798:	0800b813 	.word	0x0800b813
 800b79c:	0800b859 	.word	0x0800b859
 800b7a0:	0800b859 	.word	0x0800b859
 800b7a4:	0800b859 	.word	0x0800b859
 800b7a8:	0800b859 	.word	0x0800b859
 800b7ac:	0800b859 	.word	0x0800b859
 800b7b0:	0800b859 	.word	0x0800b859
 800b7b4:	0800b859 	.word	0x0800b859
 800b7b8:	0800b859 	.word	0x0800b859
 800b7bc:	0800b859 	.word	0x0800b859
 800b7c0:	0800b859 	.word	0x0800b859
 800b7c4:	0800b859 	.word	0x0800b859
 800b7c8:	0800b859 	.word	0x0800b859
 800b7cc:	0800b859 	.word	0x0800b859
 800b7d0:	0800b859 	.word	0x0800b859
 800b7d4:	0800b859 	.word	0x0800b859
 800b7d8:	0800b84b 	.word	0x0800b84b
 800b7dc:	2b40      	cmp	r3, #64	@ 0x40
 800b7de:	d037      	beq.n	800b850 <UART_SetConfig+0xc44>
 800b7e0:	e03a      	b.n	800b858 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7e2:	f7fb fdf1 	bl	80073c8 <HAL_RCC_GetPCLK1Freq>
 800b7e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b7e8:	e03c      	b.n	800b864 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7ea:	f7fb fe03 	bl	80073f4 <HAL_RCC_GetPCLK2Freq>
 800b7ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b7f0:	e038      	b.n	800b864 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7fd fc9a 	bl	8009130 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b800:	e030      	b.n	800b864 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b802:	f107 0318 	add.w	r3, r7, #24
 800b806:	4618      	mov	r0, r3
 800b808:	f7fd fde6 	bl	80093d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b810:	e028      	b.n	800b864 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b812:	4b09      	ldr	r3, [pc, #36]	@ (800b838 <UART_SetConfig+0xc2c>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 0320 	and.w	r3, r3, #32
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d012      	beq.n	800b844 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b81e:	4b06      	ldr	r3, [pc, #24]	@ (800b838 <UART_SetConfig+0xc2c>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	08db      	lsrs	r3, r3, #3
 800b824:	f003 0303 	and.w	r3, r3, #3
 800b828:	4a04      	ldr	r2, [pc, #16]	@ (800b83c <UART_SetConfig+0xc30>)
 800b82a:	fa22 f303 	lsr.w	r3, r2, r3
 800b82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b830:	e018      	b.n	800b864 <UART_SetConfig+0xc58>
 800b832:	bf00      	nop
 800b834:	0800cbfc 	.word	0x0800cbfc
 800b838:	58024400 	.word	0x58024400
 800b83c:	03d09000 	.word	0x03d09000
 800b840:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b844:	4b24      	ldr	r3, [pc, #144]	@ (800b8d8 <UART_SetConfig+0xccc>)
 800b846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b848:	e00c      	b.n	800b864 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b84a:	4b24      	ldr	r3, [pc, #144]	@ (800b8dc <UART_SetConfig+0xcd0>)
 800b84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b84e:	e009      	b.n	800b864 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b850:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b856:	e005      	b.n	800b864 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b858:	2300      	movs	r3, #0
 800b85a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b85c:	2301      	movs	r3, #1
 800b85e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b862:	bf00      	nop
    }

    if (pclk != 0U)
 800b864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b866:	2b00      	cmp	r3, #0
 800b868:	d021      	beq.n	800b8ae <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b86e:	4a1c      	ldr	r2, [pc, #112]	@ (800b8e0 <UART_SetConfig+0xcd4>)
 800b870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b874:	461a      	mov	r2, r3
 800b876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b878:	fbb3 f2f2 	udiv	r2, r3, r2
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	085b      	lsrs	r3, r3, #1
 800b882:	441a      	add	r2, r3
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	fbb2 f3f3 	udiv	r3, r2, r3
 800b88c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b890:	2b0f      	cmp	r3, #15
 800b892:	d909      	bls.n	800b8a8 <UART_SetConfig+0xc9c>
 800b894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b89a:	d205      	bcs.n	800b8a8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b89e:	b29a      	uxth	r2, r3
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	60da      	str	r2, [r3, #12]
 800b8a6:	e002      	b.n	800b8ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b8ca:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3748      	adds	r7, #72	@ 0x48
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b8d8:	03d09000 	.word	0x03d09000
 800b8dc:	003d0900 	.word	0x003d0900
 800b8e0:	0800cbfc 	.word	0x0800cbfc

0800b8e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8f0:	f003 0308 	and.w	r3, r3, #8
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00a      	beq.n	800b90e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	430a      	orrs	r2, r1
 800b90c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b912:	f003 0301 	and.w	r3, r3, #1
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00a      	beq.n	800b930 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	430a      	orrs	r2, r1
 800b92e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b934:	f003 0302 	and.w	r3, r3, #2
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00a      	beq.n	800b952 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	430a      	orrs	r2, r1
 800b950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b956:	f003 0304 	and.w	r3, r3, #4
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00a      	beq.n	800b974 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	430a      	orrs	r2, r1
 800b972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b978:	f003 0310 	and.w	r3, r3, #16
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00a      	beq.n	800b996 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	430a      	orrs	r2, r1
 800b994:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b99a:	f003 0320 	and.w	r3, r3, #32
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00a      	beq.n	800b9b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	430a      	orrs	r2, r1
 800b9b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d01a      	beq.n	800b9fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	430a      	orrs	r2, r1
 800b9d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9e2:	d10a      	bne.n	800b9fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	430a      	orrs	r2, r1
 800b9f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d00a      	beq.n	800ba1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	430a      	orrs	r2, r1
 800ba1a:	605a      	str	r2, [r3, #4]
  }
}
 800ba1c:	bf00      	nop
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b098      	sub	sp, #96	@ 0x60
 800ba2c:	af02      	add	r7, sp, #8
 800ba2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba38:	f7f7 f8f0 	bl	8002c1c <HAL_GetTick>
 800ba3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f003 0308 	and.w	r3, r3, #8
 800ba48:	2b08      	cmp	r3, #8
 800ba4a:	d12f      	bne.n	800baac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba54:	2200      	movs	r2, #0
 800ba56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f88e 	bl	800bb7c <UART_WaitOnFlagUntilTimeout>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d022      	beq.n	800baac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba6e:	e853 3f00 	ldrex	r3, [r3]
 800ba72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ba74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba7a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	461a      	mov	r2, r3
 800ba82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba84:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba86:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba8c:	e841 2300 	strex	r3, r2, [r1]
 800ba90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1e6      	bne.n	800ba66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2220      	movs	r2, #32
 800ba9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800baa8:	2303      	movs	r3, #3
 800baaa:	e063      	b.n	800bb74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f003 0304 	and.w	r3, r3, #4
 800bab6:	2b04      	cmp	r3, #4
 800bab8:	d149      	bne.n	800bb4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800baba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800babe:	9300      	str	r3, [sp, #0]
 800bac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bac2:	2200      	movs	r2, #0
 800bac4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 f857 	bl	800bb7c <UART_WaitOnFlagUntilTimeout>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d03c      	beq.n	800bb4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800badc:	e853 3f00 	ldrex	r3, [r3]
 800bae0:	623b      	str	r3, [r7, #32]
   return(result);
 800bae2:	6a3b      	ldr	r3, [r7, #32]
 800bae4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	461a      	mov	r2, r3
 800baf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baf2:	633b      	str	r3, [r7, #48]	@ 0x30
 800baf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800baf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bafa:	e841 2300 	strex	r3, r2, [r1]
 800bafe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bb00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d1e6      	bne.n	800bad4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	3308      	adds	r3, #8
 800bb0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	e853 3f00 	ldrex	r3, [r3]
 800bb14:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f023 0301 	bic.w	r3, r3, #1
 800bb1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	3308      	adds	r3, #8
 800bb24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb26:	61fa      	str	r2, [r7, #28]
 800bb28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2a:	69b9      	ldr	r1, [r7, #24]
 800bb2c:	69fa      	ldr	r2, [r7, #28]
 800bb2e:	e841 2300 	strex	r3, r2, [r1]
 800bb32:	617b      	str	r3, [r7, #20]
   return(result);
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1e5      	bne.n	800bb06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2220      	movs	r2, #32
 800bb3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb4a:	2303      	movs	r3, #3
 800bb4c:	e012      	b.n	800bb74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2220      	movs	r2, #32
 800bb52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2220      	movs	r2, #32
 800bb5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb72:	2300      	movs	r3, #0
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3758      	adds	r7, #88	@ 0x58
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	603b      	str	r3, [r7, #0]
 800bb88:	4613      	mov	r3, r2
 800bb8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb8c:	e04f      	b.n	800bc2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb94:	d04b      	beq.n	800bc2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb96:	f7f7 f841 	bl	8002c1c <HAL_GetTick>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	69ba      	ldr	r2, [r7, #24]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d302      	bcc.n	800bbac <UART_WaitOnFlagUntilTimeout+0x30>
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d101      	bne.n	800bbb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bbac:	2303      	movs	r3, #3
 800bbae:	e04e      	b.n	800bc4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f003 0304 	and.w	r3, r3, #4
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d037      	beq.n	800bc2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	2b80      	cmp	r3, #128	@ 0x80
 800bbc2:	d034      	beq.n	800bc2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2b40      	cmp	r3, #64	@ 0x40
 800bbc8:	d031      	beq.n	800bc2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	69db      	ldr	r3, [r3, #28]
 800bbd0:	f003 0308 	and.w	r3, r3, #8
 800bbd4:	2b08      	cmp	r3, #8
 800bbd6:	d110      	bne.n	800bbfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2208      	movs	r2, #8
 800bbde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f000 f839 	bl	800bc58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2208      	movs	r2, #8
 800bbea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e029      	b.n	800bc4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	69db      	ldr	r3, [r3, #28]
 800bc00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bc04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc08:	d111      	bne.n	800bc2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bc12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f000 f81f 	bl	800bc58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2220      	movs	r2, #32
 800bc1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	e00f      	b.n	800bc4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	69da      	ldr	r2, [r3, #28]
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	4013      	ands	r3, r2
 800bc38:	68ba      	ldr	r2, [r7, #8]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	bf0c      	ite	eq
 800bc3e:	2301      	moveq	r3, #1
 800bc40:	2300      	movne	r3, #0
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	461a      	mov	r2, r3
 800bc46:	79fb      	ldrb	r3, [r7, #7]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d0a0      	beq.n	800bb8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc4c:	2300      	movs	r3, #0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
	...

0800bc58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b095      	sub	sp, #84	@ 0x54
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc68:	e853 3f00 	ldrex	r3, [r3]
 800bc6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bc6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc7e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc80:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bc84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc86:	e841 2300 	strex	r3, r2, [r1]
 800bc8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bc8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d1e6      	bne.n	800bc60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	3308      	adds	r3, #8
 800bc98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9a:	6a3b      	ldr	r3, [r7, #32]
 800bc9c:	e853 3f00 	ldrex	r3, [r3]
 800bca0:	61fb      	str	r3, [r7, #28]
   return(result);
 800bca2:	69fa      	ldr	r2, [r7, #28]
 800bca4:	4b1e      	ldr	r3, [pc, #120]	@ (800bd20 <UART_EndRxTransfer+0xc8>)
 800bca6:	4013      	ands	r3, r2
 800bca8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	3308      	adds	r3, #8
 800bcb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bcb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bcb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bcb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcba:	e841 2300 	strex	r3, r2, [r1]
 800bcbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1e5      	bne.n	800bc92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d118      	bne.n	800bd00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	e853 3f00 	ldrex	r3, [r3]
 800bcda:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	f023 0310 	bic.w	r3, r3, #16
 800bce2:	647b      	str	r3, [r7, #68]	@ 0x44
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	461a      	mov	r2, r3
 800bcea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcec:	61bb      	str	r3, [r7, #24]
 800bcee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf0:	6979      	ldr	r1, [r7, #20]
 800bcf2:	69ba      	ldr	r2, [r7, #24]
 800bcf4:	e841 2300 	strex	r3, r2, [r1]
 800bcf8:	613b      	str	r3, [r7, #16]
   return(result);
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d1e6      	bne.n	800bcce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2220      	movs	r2, #32
 800bd04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bd14:	bf00      	nop
 800bd16:	3754      	adds	r7, #84	@ 0x54
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	effffffe 	.word	0xeffffffe

0800bd24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b085      	sub	sp, #20
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d101      	bne.n	800bd3a <HAL_UARTEx_DisableFifoMode+0x16>
 800bd36:	2302      	movs	r3, #2
 800bd38:	e027      	b.n	800bd8a <HAL_UARTEx_DisableFifoMode+0x66>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2224      	movs	r2, #36	@ 0x24
 800bd46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f022 0201 	bic.w	r2, r2, #1
 800bd60:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bd68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2220      	movs	r2, #32
 800bd7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd88:	2300      	movs	r3, #0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3714      	adds	r7, #20
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr

0800bd96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b084      	sub	sp, #16
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
 800bd9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d101      	bne.n	800bdae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bdaa:	2302      	movs	r3, #2
 800bdac:	e02d      	b.n	800be0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2224      	movs	r2, #36	@ 0x24
 800bdba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f022 0201 	bic.w	r2, r2, #1
 800bdd4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	683a      	ldr	r2, [r7, #0]
 800bde6:	430a      	orrs	r2, r1
 800bde8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 f850 	bl	800be90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2220      	movs	r2, #32
 800bdfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b084      	sub	sp, #16
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
 800be1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800be22:	2b01      	cmp	r3, #1
 800be24:	d101      	bne.n	800be2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800be26:	2302      	movs	r3, #2
 800be28:	e02d      	b.n	800be86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2201      	movs	r2, #1
 800be2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2224      	movs	r2, #36	@ 0x24
 800be36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f022 0201 	bic.w	r2, r2, #1
 800be50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	683a      	ldr	r2, [r7, #0]
 800be62:	430a      	orrs	r2, r1
 800be64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 f812 	bl	800be90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	68fa      	ldr	r2, [r7, #12]
 800be72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2220      	movs	r2, #32
 800be78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
	...

0800be90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d108      	bne.n	800beb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2201      	movs	r2, #1
 800bea4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2201      	movs	r2, #1
 800beac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800beb0:	e031      	b.n	800bf16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800beb2:	2310      	movs	r3, #16
 800beb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800beb6:	2310      	movs	r3, #16
 800beb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	0e5b      	lsrs	r3, r3, #25
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	f003 0307 	and.w	r3, r3, #7
 800bec8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	0f5b      	lsrs	r3, r3, #29
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	f003 0307 	and.w	r3, r3, #7
 800bed8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800beda:	7bbb      	ldrb	r3, [r7, #14]
 800bedc:	7b3a      	ldrb	r2, [r7, #12]
 800bede:	4911      	ldr	r1, [pc, #68]	@ (800bf24 <UARTEx_SetNbDataToProcess+0x94>)
 800bee0:	5c8a      	ldrb	r2, [r1, r2]
 800bee2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bee6:	7b3a      	ldrb	r2, [r7, #12]
 800bee8:	490f      	ldr	r1, [pc, #60]	@ (800bf28 <UARTEx_SetNbDataToProcess+0x98>)
 800beea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800beec:	fb93 f3f2 	sdiv	r3, r3, r2
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bef8:	7bfb      	ldrb	r3, [r7, #15]
 800befa:	7b7a      	ldrb	r2, [r7, #13]
 800befc:	4909      	ldr	r1, [pc, #36]	@ (800bf24 <UARTEx_SetNbDataToProcess+0x94>)
 800befe:	5c8a      	ldrb	r2, [r1, r2]
 800bf00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bf04:	7b7a      	ldrb	r2, [r7, #13]
 800bf06:	4908      	ldr	r1, [pc, #32]	@ (800bf28 <UARTEx_SetNbDataToProcess+0x98>)
 800bf08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf0e:	b29a      	uxth	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bf16:	bf00      	nop
 800bf18:	3714      	adds	r7, #20
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	0800cc14 	.word	0x0800cc14
 800bf28:	0800cc1c 	.word	0x0800cc1c

0800bf2c <siprintf>:
 800bf2c:	b40e      	push	{r1, r2, r3}
 800bf2e:	b510      	push	{r4, lr}
 800bf30:	b09d      	sub	sp, #116	@ 0x74
 800bf32:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bf34:	9002      	str	r0, [sp, #8]
 800bf36:	9006      	str	r0, [sp, #24]
 800bf38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bf3c:	480a      	ldr	r0, [pc, #40]	@ (800bf68 <siprintf+0x3c>)
 800bf3e:	9107      	str	r1, [sp, #28]
 800bf40:	9104      	str	r1, [sp, #16]
 800bf42:	490a      	ldr	r1, [pc, #40]	@ (800bf6c <siprintf+0x40>)
 800bf44:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf48:	9105      	str	r1, [sp, #20]
 800bf4a:	2400      	movs	r4, #0
 800bf4c:	a902      	add	r1, sp, #8
 800bf4e:	6800      	ldr	r0, [r0, #0]
 800bf50:	9301      	str	r3, [sp, #4]
 800bf52:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bf54:	f000 f9a2 	bl	800c29c <_svfiprintf_r>
 800bf58:	9b02      	ldr	r3, [sp, #8]
 800bf5a:	701c      	strb	r4, [r3, #0]
 800bf5c:	b01d      	add	sp, #116	@ 0x74
 800bf5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf62:	b003      	add	sp, #12
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop
 800bf68:	2400001c 	.word	0x2400001c
 800bf6c:	ffff0208 	.word	0xffff0208

0800bf70 <memset>:
 800bf70:	4402      	add	r2, r0
 800bf72:	4603      	mov	r3, r0
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d100      	bne.n	800bf7a <memset+0xa>
 800bf78:	4770      	bx	lr
 800bf7a:	f803 1b01 	strb.w	r1, [r3], #1
 800bf7e:	e7f9      	b.n	800bf74 <memset+0x4>

0800bf80 <__errno>:
 800bf80:	4b01      	ldr	r3, [pc, #4]	@ (800bf88 <__errno+0x8>)
 800bf82:	6818      	ldr	r0, [r3, #0]
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	2400001c 	.word	0x2400001c

0800bf8c <__libc_init_array>:
 800bf8c:	b570      	push	{r4, r5, r6, lr}
 800bf8e:	4d0d      	ldr	r5, [pc, #52]	@ (800bfc4 <__libc_init_array+0x38>)
 800bf90:	4c0d      	ldr	r4, [pc, #52]	@ (800bfc8 <__libc_init_array+0x3c>)
 800bf92:	1b64      	subs	r4, r4, r5
 800bf94:	10a4      	asrs	r4, r4, #2
 800bf96:	2600      	movs	r6, #0
 800bf98:	42a6      	cmp	r6, r4
 800bf9a:	d109      	bne.n	800bfb0 <__libc_init_array+0x24>
 800bf9c:	4d0b      	ldr	r5, [pc, #44]	@ (800bfcc <__libc_init_array+0x40>)
 800bf9e:	4c0c      	ldr	r4, [pc, #48]	@ (800bfd0 <__libc_init_array+0x44>)
 800bfa0:	f000 fc64 	bl	800c86c <_init>
 800bfa4:	1b64      	subs	r4, r4, r5
 800bfa6:	10a4      	asrs	r4, r4, #2
 800bfa8:	2600      	movs	r6, #0
 800bfaa:	42a6      	cmp	r6, r4
 800bfac:	d105      	bne.n	800bfba <__libc_init_array+0x2e>
 800bfae:	bd70      	pop	{r4, r5, r6, pc}
 800bfb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfb4:	4798      	blx	r3
 800bfb6:	3601      	adds	r6, #1
 800bfb8:	e7ee      	b.n	800bf98 <__libc_init_array+0xc>
 800bfba:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfbe:	4798      	blx	r3
 800bfc0:	3601      	adds	r6, #1
 800bfc2:	e7f2      	b.n	800bfaa <__libc_init_array+0x1e>
 800bfc4:	0800cc60 	.word	0x0800cc60
 800bfc8:	0800cc60 	.word	0x0800cc60
 800bfcc:	0800cc60 	.word	0x0800cc60
 800bfd0:	0800cc68 	.word	0x0800cc68

0800bfd4 <__retarget_lock_acquire_recursive>:
 800bfd4:	4770      	bx	lr

0800bfd6 <__retarget_lock_release_recursive>:
 800bfd6:	4770      	bx	lr

0800bfd8 <memcpy>:
 800bfd8:	440a      	add	r2, r1
 800bfda:	4291      	cmp	r1, r2
 800bfdc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfe0:	d100      	bne.n	800bfe4 <memcpy+0xc>
 800bfe2:	4770      	bx	lr
 800bfe4:	b510      	push	{r4, lr}
 800bfe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfee:	4291      	cmp	r1, r2
 800bff0:	d1f9      	bne.n	800bfe6 <memcpy+0xe>
 800bff2:	bd10      	pop	{r4, pc}

0800bff4 <_free_r>:
 800bff4:	b538      	push	{r3, r4, r5, lr}
 800bff6:	4605      	mov	r5, r0
 800bff8:	2900      	cmp	r1, #0
 800bffa:	d041      	beq.n	800c080 <_free_r+0x8c>
 800bffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c000:	1f0c      	subs	r4, r1, #4
 800c002:	2b00      	cmp	r3, #0
 800c004:	bfb8      	it	lt
 800c006:	18e4      	addlt	r4, r4, r3
 800c008:	f000 f8e0 	bl	800c1cc <__malloc_lock>
 800c00c:	4a1d      	ldr	r2, [pc, #116]	@ (800c084 <_free_r+0x90>)
 800c00e:	6813      	ldr	r3, [r2, #0]
 800c010:	b933      	cbnz	r3, 800c020 <_free_r+0x2c>
 800c012:	6063      	str	r3, [r4, #4]
 800c014:	6014      	str	r4, [r2, #0]
 800c016:	4628      	mov	r0, r5
 800c018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c01c:	f000 b8dc 	b.w	800c1d8 <__malloc_unlock>
 800c020:	42a3      	cmp	r3, r4
 800c022:	d908      	bls.n	800c036 <_free_r+0x42>
 800c024:	6820      	ldr	r0, [r4, #0]
 800c026:	1821      	adds	r1, r4, r0
 800c028:	428b      	cmp	r3, r1
 800c02a:	bf01      	itttt	eq
 800c02c:	6819      	ldreq	r1, [r3, #0]
 800c02e:	685b      	ldreq	r3, [r3, #4]
 800c030:	1809      	addeq	r1, r1, r0
 800c032:	6021      	streq	r1, [r4, #0]
 800c034:	e7ed      	b.n	800c012 <_free_r+0x1e>
 800c036:	461a      	mov	r2, r3
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	b10b      	cbz	r3, 800c040 <_free_r+0x4c>
 800c03c:	42a3      	cmp	r3, r4
 800c03e:	d9fa      	bls.n	800c036 <_free_r+0x42>
 800c040:	6811      	ldr	r1, [r2, #0]
 800c042:	1850      	adds	r0, r2, r1
 800c044:	42a0      	cmp	r0, r4
 800c046:	d10b      	bne.n	800c060 <_free_r+0x6c>
 800c048:	6820      	ldr	r0, [r4, #0]
 800c04a:	4401      	add	r1, r0
 800c04c:	1850      	adds	r0, r2, r1
 800c04e:	4283      	cmp	r3, r0
 800c050:	6011      	str	r1, [r2, #0]
 800c052:	d1e0      	bne.n	800c016 <_free_r+0x22>
 800c054:	6818      	ldr	r0, [r3, #0]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	6053      	str	r3, [r2, #4]
 800c05a:	4408      	add	r0, r1
 800c05c:	6010      	str	r0, [r2, #0]
 800c05e:	e7da      	b.n	800c016 <_free_r+0x22>
 800c060:	d902      	bls.n	800c068 <_free_r+0x74>
 800c062:	230c      	movs	r3, #12
 800c064:	602b      	str	r3, [r5, #0]
 800c066:	e7d6      	b.n	800c016 <_free_r+0x22>
 800c068:	6820      	ldr	r0, [r4, #0]
 800c06a:	1821      	adds	r1, r4, r0
 800c06c:	428b      	cmp	r3, r1
 800c06e:	bf04      	itt	eq
 800c070:	6819      	ldreq	r1, [r3, #0]
 800c072:	685b      	ldreq	r3, [r3, #4]
 800c074:	6063      	str	r3, [r4, #4]
 800c076:	bf04      	itt	eq
 800c078:	1809      	addeq	r1, r1, r0
 800c07a:	6021      	streq	r1, [r4, #0]
 800c07c:	6054      	str	r4, [r2, #4]
 800c07e:	e7ca      	b.n	800c016 <_free_r+0x22>
 800c080:	bd38      	pop	{r3, r4, r5, pc}
 800c082:	bf00      	nop
 800c084:	24000e94 	.word	0x24000e94

0800c088 <sbrk_aligned>:
 800c088:	b570      	push	{r4, r5, r6, lr}
 800c08a:	4e0f      	ldr	r6, [pc, #60]	@ (800c0c8 <sbrk_aligned+0x40>)
 800c08c:	460c      	mov	r4, r1
 800c08e:	6831      	ldr	r1, [r6, #0]
 800c090:	4605      	mov	r5, r0
 800c092:	b911      	cbnz	r1, 800c09a <sbrk_aligned+0x12>
 800c094:	f000 fba4 	bl	800c7e0 <_sbrk_r>
 800c098:	6030      	str	r0, [r6, #0]
 800c09a:	4621      	mov	r1, r4
 800c09c:	4628      	mov	r0, r5
 800c09e:	f000 fb9f 	bl	800c7e0 <_sbrk_r>
 800c0a2:	1c43      	adds	r3, r0, #1
 800c0a4:	d103      	bne.n	800c0ae <sbrk_aligned+0x26>
 800c0a6:	f04f 34ff 	mov.w	r4, #4294967295
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	bd70      	pop	{r4, r5, r6, pc}
 800c0ae:	1cc4      	adds	r4, r0, #3
 800c0b0:	f024 0403 	bic.w	r4, r4, #3
 800c0b4:	42a0      	cmp	r0, r4
 800c0b6:	d0f8      	beq.n	800c0aa <sbrk_aligned+0x22>
 800c0b8:	1a21      	subs	r1, r4, r0
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	f000 fb90 	bl	800c7e0 <_sbrk_r>
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	d1f2      	bne.n	800c0aa <sbrk_aligned+0x22>
 800c0c4:	e7ef      	b.n	800c0a6 <sbrk_aligned+0x1e>
 800c0c6:	bf00      	nop
 800c0c8:	24000e90 	.word	0x24000e90

0800c0cc <_malloc_r>:
 800c0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0d0:	1ccd      	adds	r5, r1, #3
 800c0d2:	f025 0503 	bic.w	r5, r5, #3
 800c0d6:	3508      	adds	r5, #8
 800c0d8:	2d0c      	cmp	r5, #12
 800c0da:	bf38      	it	cc
 800c0dc:	250c      	movcc	r5, #12
 800c0de:	2d00      	cmp	r5, #0
 800c0e0:	4606      	mov	r6, r0
 800c0e2:	db01      	blt.n	800c0e8 <_malloc_r+0x1c>
 800c0e4:	42a9      	cmp	r1, r5
 800c0e6:	d904      	bls.n	800c0f2 <_malloc_r+0x26>
 800c0e8:	230c      	movs	r3, #12
 800c0ea:	6033      	str	r3, [r6, #0]
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c1c8 <_malloc_r+0xfc>
 800c0f6:	f000 f869 	bl	800c1cc <__malloc_lock>
 800c0fa:	f8d8 3000 	ldr.w	r3, [r8]
 800c0fe:	461c      	mov	r4, r3
 800c100:	bb44      	cbnz	r4, 800c154 <_malloc_r+0x88>
 800c102:	4629      	mov	r1, r5
 800c104:	4630      	mov	r0, r6
 800c106:	f7ff ffbf 	bl	800c088 <sbrk_aligned>
 800c10a:	1c43      	adds	r3, r0, #1
 800c10c:	4604      	mov	r4, r0
 800c10e:	d158      	bne.n	800c1c2 <_malloc_r+0xf6>
 800c110:	f8d8 4000 	ldr.w	r4, [r8]
 800c114:	4627      	mov	r7, r4
 800c116:	2f00      	cmp	r7, #0
 800c118:	d143      	bne.n	800c1a2 <_malloc_r+0xd6>
 800c11a:	2c00      	cmp	r4, #0
 800c11c:	d04b      	beq.n	800c1b6 <_malloc_r+0xea>
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	4639      	mov	r1, r7
 800c122:	4630      	mov	r0, r6
 800c124:	eb04 0903 	add.w	r9, r4, r3
 800c128:	f000 fb5a 	bl	800c7e0 <_sbrk_r>
 800c12c:	4581      	cmp	r9, r0
 800c12e:	d142      	bne.n	800c1b6 <_malloc_r+0xea>
 800c130:	6821      	ldr	r1, [r4, #0]
 800c132:	1a6d      	subs	r5, r5, r1
 800c134:	4629      	mov	r1, r5
 800c136:	4630      	mov	r0, r6
 800c138:	f7ff ffa6 	bl	800c088 <sbrk_aligned>
 800c13c:	3001      	adds	r0, #1
 800c13e:	d03a      	beq.n	800c1b6 <_malloc_r+0xea>
 800c140:	6823      	ldr	r3, [r4, #0]
 800c142:	442b      	add	r3, r5
 800c144:	6023      	str	r3, [r4, #0]
 800c146:	f8d8 3000 	ldr.w	r3, [r8]
 800c14a:	685a      	ldr	r2, [r3, #4]
 800c14c:	bb62      	cbnz	r2, 800c1a8 <_malloc_r+0xdc>
 800c14e:	f8c8 7000 	str.w	r7, [r8]
 800c152:	e00f      	b.n	800c174 <_malloc_r+0xa8>
 800c154:	6822      	ldr	r2, [r4, #0]
 800c156:	1b52      	subs	r2, r2, r5
 800c158:	d420      	bmi.n	800c19c <_malloc_r+0xd0>
 800c15a:	2a0b      	cmp	r2, #11
 800c15c:	d917      	bls.n	800c18e <_malloc_r+0xc2>
 800c15e:	1961      	adds	r1, r4, r5
 800c160:	42a3      	cmp	r3, r4
 800c162:	6025      	str	r5, [r4, #0]
 800c164:	bf18      	it	ne
 800c166:	6059      	strne	r1, [r3, #4]
 800c168:	6863      	ldr	r3, [r4, #4]
 800c16a:	bf08      	it	eq
 800c16c:	f8c8 1000 	streq.w	r1, [r8]
 800c170:	5162      	str	r2, [r4, r5]
 800c172:	604b      	str	r3, [r1, #4]
 800c174:	4630      	mov	r0, r6
 800c176:	f000 f82f 	bl	800c1d8 <__malloc_unlock>
 800c17a:	f104 000b 	add.w	r0, r4, #11
 800c17e:	1d23      	adds	r3, r4, #4
 800c180:	f020 0007 	bic.w	r0, r0, #7
 800c184:	1ac2      	subs	r2, r0, r3
 800c186:	bf1c      	itt	ne
 800c188:	1a1b      	subne	r3, r3, r0
 800c18a:	50a3      	strne	r3, [r4, r2]
 800c18c:	e7af      	b.n	800c0ee <_malloc_r+0x22>
 800c18e:	6862      	ldr	r2, [r4, #4]
 800c190:	42a3      	cmp	r3, r4
 800c192:	bf0c      	ite	eq
 800c194:	f8c8 2000 	streq.w	r2, [r8]
 800c198:	605a      	strne	r2, [r3, #4]
 800c19a:	e7eb      	b.n	800c174 <_malloc_r+0xa8>
 800c19c:	4623      	mov	r3, r4
 800c19e:	6864      	ldr	r4, [r4, #4]
 800c1a0:	e7ae      	b.n	800c100 <_malloc_r+0x34>
 800c1a2:	463c      	mov	r4, r7
 800c1a4:	687f      	ldr	r7, [r7, #4]
 800c1a6:	e7b6      	b.n	800c116 <_malloc_r+0x4a>
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	42a3      	cmp	r3, r4
 800c1ae:	d1fb      	bne.n	800c1a8 <_malloc_r+0xdc>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	6053      	str	r3, [r2, #4]
 800c1b4:	e7de      	b.n	800c174 <_malloc_r+0xa8>
 800c1b6:	230c      	movs	r3, #12
 800c1b8:	6033      	str	r3, [r6, #0]
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	f000 f80c 	bl	800c1d8 <__malloc_unlock>
 800c1c0:	e794      	b.n	800c0ec <_malloc_r+0x20>
 800c1c2:	6005      	str	r5, [r0, #0]
 800c1c4:	e7d6      	b.n	800c174 <_malloc_r+0xa8>
 800c1c6:	bf00      	nop
 800c1c8:	24000e94 	.word	0x24000e94

0800c1cc <__malloc_lock>:
 800c1cc:	4801      	ldr	r0, [pc, #4]	@ (800c1d4 <__malloc_lock+0x8>)
 800c1ce:	f7ff bf01 	b.w	800bfd4 <__retarget_lock_acquire_recursive>
 800c1d2:	bf00      	nop
 800c1d4:	24000e8c 	.word	0x24000e8c

0800c1d8 <__malloc_unlock>:
 800c1d8:	4801      	ldr	r0, [pc, #4]	@ (800c1e0 <__malloc_unlock+0x8>)
 800c1da:	f7ff befc 	b.w	800bfd6 <__retarget_lock_release_recursive>
 800c1de:	bf00      	nop
 800c1e0:	24000e8c 	.word	0x24000e8c

0800c1e4 <__ssputs_r>:
 800c1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1e8:	688e      	ldr	r6, [r1, #8]
 800c1ea:	461f      	mov	r7, r3
 800c1ec:	42be      	cmp	r6, r7
 800c1ee:	680b      	ldr	r3, [r1, #0]
 800c1f0:	4682      	mov	sl, r0
 800c1f2:	460c      	mov	r4, r1
 800c1f4:	4690      	mov	r8, r2
 800c1f6:	d82d      	bhi.n	800c254 <__ssputs_r+0x70>
 800c1f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c200:	d026      	beq.n	800c250 <__ssputs_r+0x6c>
 800c202:	6965      	ldr	r5, [r4, #20]
 800c204:	6909      	ldr	r1, [r1, #16]
 800c206:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c20a:	eba3 0901 	sub.w	r9, r3, r1
 800c20e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c212:	1c7b      	adds	r3, r7, #1
 800c214:	444b      	add	r3, r9
 800c216:	106d      	asrs	r5, r5, #1
 800c218:	429d      	cmp	r5, r3
 800c21a:	bf38      	it	cc
 800c21c:	461d      	movcc	r5, r3
 800c21e:	0553      	lsls	r3, r2, #21
 800c220:	d527      	bpl.n	800c272 <__ssputs_r+0x8e>
 800c222:	4629      	mov	r1, r5
 800c224:	f7ff ff52 	bl	800c0cc <_malloc_r>
 800c228:	4606      	mov	r6, r0
 800c22a:	b360      	cbz	r0, 800c286 <__ssputs_r+0xa2>
 800c22c:	6921      	ldr	r1, [r4, #16]
 800c22e:	464a      	mov	r2, r9
 800c230:	f7ff fed2 	bl	800bfd8 <memcpy>
 800c234:	89a3      	ldrh	r3, [r4, #12]
 800c236:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c23a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c23e:	81a3      	strh	r3, [r4, #12]
 800c240:	6126      	str	r6, [r4, #16]
 800c242:	6165      	str	r5, [r4, #20]
 800c244:	444e      	add	r6, r9
 800c246:	eba5 0509 	sub.w	r5, r5, r9
 800c24a:	6026      	str	r6, [r4, #0]
 800c24c:	60a5      	str	r5, [r4, #8]
 800c24e:	463e      	mov	r6, r7
 800c250:	42be      	cmp	r6, r7
 800c252:	d900      	bls.n	800c256 <__ssputs_r+0x72>
 800c254:	463e      	mov	r6, r7
 800c256:	6820      	ldr	r0, [r4, #0]
 800c258:	4632      	mov	r2, r6
 800c25a:	4641      	mov	r1, r8
 800c25c:	f000 faa6 	bl	800c7ac <memmove>
 800c260:	68a3      	ldr	r3, [r4, #8]
 800c262:	1b9b      	subs	r3, r3, r6
 800c264:	60a3      	str	r3, [r4, #8]
 800c266:	6823      	ldr	r3, [r4, #0]
 800c268:	4433      	add	r3, r6
 800c26a:	6023      	str	r3, [r4, #0]
 800c26c:	2000      	movs	r0, #0
 800c26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c272:	462a      	mov	r2, r5
 800c274:	f000 fac4 	bl	800c800 <_realloc_r>
 800c278:	4606      	mov	r6, r0
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d1e0      	bne.n	800c240 <__ssputs_r+0x5c>
 800c27e:	6921      	ldr	r1, [r4, #16]
 800c280:	4650      	mov	r0, sl
 800c282:	f7ff feb7 	bl	800bff4 <_free_r>
 800c286:	230c      	movs	r3, #12
 800c288:	f8ca 3000 	str.w	r3, [sl]
 800c28c:	89a3      	ldrh	r3, [r4, #12]
 800c28e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c292:	81a3      	strh	r3, [r4, #12]
 800c294:	f04f 30ff 	mov.w	r0, #4294967295
 800c298:	e7e9      	b.n	800c26e <__ssputs_r+0x8a>
	...

0800c29c <_svfiprintf_r>:
 800c29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a0:	4698      	mov	r8, r3
 800c2a2:	898b      	ldrh	r3, [r1, #12]
 800c2a4:	061b      	lsls	r3, r3, #24
 800c2a6:	b09d      	sub	sp, #116	@ 0x74
 800c2a8:	4607      	mov	r7, r0
 800c2aa:	460d      	mov	r5, r1
 800c2ac:	4614      	mov	r4, r2
 800c2ae:	d510      	bpl.n	800c2d2 <_svfiprintf_r+0x36>
 800c2b0:	690b      	ldr	r3, [r1, #16]
 800c2b2:	b973      	cbnz	r3, 800c2d2 <_svfiprintf_r+0x36>
 800c2b4:	2140      	movs	r1, #64	@ 0x40
 800c2b6:	f7ff ff09 	bl	800c0cc <_malloc_r>
 800c2ba:	6028      	str	r0, [r5, #0]
 800c2bc:	6128      	str	r0, [r5, #16]
 800c2be:	b930      	cbnz	r0, 800c2ce <_svfiprintf_r+0x32>
 800c2c0:	230c      	movs	r3, #12
 800c2c2:	603b      	str	r3, [r7, #0]
 800c2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c8:	b01d      	add	sp, #116	@ 0x74
 800c2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ce:	2340      	movs	r3, #64	@ 0x40
 800c2d0:	616b      	str	r3, [r5, #20]
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2d6:	2320      	movs	r3, #32
 800c2d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2e0:	2330      	movs	r3, #48	@ 0x30
 800c2e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c480 <_svfiprintf_r+0x1e4>
 800c2e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2ea:	f04f 0901 	mov.w	r9, #1
 800c2ee:	4623      	mov	r3, r4
 800c2f0:	469a      	mov	sl, r3
 800c2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2f6:	b10a      	cbz	r2, 800c2fc <_svfiprintf_r+0x60>
 800c2f8:	2a25      	cmp	r2, #37	@ 0x25
 800c2fa:	d1f9      	bne.n	800c2f0 <_svfiprintf_r+0x54>
 800c2fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c300:	d00b      	beq.n	800c31a <_svfiprintf_r+0x7e>
 800c302:	465b      	mov	r3, fp
 800c304:	4622      	mov	r2, r4
 800c306:	4629      	mov	r1, r5
 800c308:	4638      	mov	r0, r7
 800c30a:	f7ff ff6b 	bl	800c1e4 <__ssputs_r>
 800c30e:	3001      	adds	r0, #1
 800c310:	f000 80a7 	beq.w	800c462 <_svfiprintf_r+0x1c6>
 800c314:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c316:	445a      	add	r2, fp
 800c318:	9209      	str	r2, [sp, #36]	@ 0x24
 800c31a:	f89a 3000 	ldrb.w	r3, [sl]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f000 809f 	beq.w	800c462 <_svfiprintf_r+0x1c6>
 800c324:	2300      	movs	r3, #0
 800c326:	f04f 32ff 	mov.w	r2, #4294967295
 800c32a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c32e:	f10a 0a01 	add.w	sl, sl, #1
 800c332:	9304      	str	r3, [sp, #16]
 800c334:	9307      	str	r3, [sp, #28]
 800c336:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c33a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c33c:	4654      	mov	r4, sl
 800c33e:	2205      	movs	r2, #5
 800c340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c344:	484e      	ldr	r0, [pc, #312]	@ (800c480 <_svfiprintf_r+0x1e4>)
 800c346:	f7f3 ffeb 	bl	8000320 <memchr>
 800c34a:	9a04      	ldr	r2, [sp, #16]
 800c34c:	b9d8      	cbnz	r0, 800c386 <_svfiprintf_r+0xea>
 800c34e:	06d0      	lsls	r0, r2, #27
 800c350:	bf44      	itt	mi
 800c352:	2320      	movmi	r3, #32
 800c354:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c358:	0711      	lsls	r1, r2, #28
 800c35a:	bf44      	itt	mi
 800c35c:	232b      	movmi	r3, #43	@ 0x2b
 800c35e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c362:	f89a 3000 	ldrb.w	r3, [sl]
 800c366:	2b2a      	cmp	r3, #42	@ 0x2a
 800c368:	d015      	beq.n	800c396 <_svfiprintf_r+0xfa>
 800c36a:	9a07      	ldr	r2, [sp, #28]
 800c36c:	4654      	mov	r4, sl
 800c36e:	2000      	movs	r0, #0
 800c370:	f04f 0c0a 	mov.w	ip, #10
 800c374:	4621      	mov	r1, r4
 800c376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c37a:	3b30      	subs	r3, #48	@ 0x30
 800c37c:	2b09      	cmp	r3, #9
 800c37e:	d94b      	bls.n	800c418 <_svfiprintf_r+0x17c>
 800c380:	b1b0      	cbz	r0, 800c3b0 <_svfiprintf_r+0x114>
 800c382:	9207      	str	r2, [sp, #28]
 800c384:	e014      	b.n	800c3b0 <_svfiprintf_r+0x114>
 800c386:	eba0 0308 	sub.w	r3, r0, r8
 800c38a:	fa09 f303 	lsl.w	r3, r9, r3
 800c38e:	4313      	orrs	r3, r2
 800c390:	9304      	str	r3, [sp, #16]
 800c392:	46a2      	mov	sl, r4
 800c394:	e7d2      	b.n	800c33c <_svfiprintf_r+0xa0>
 800c396:	9b03      	ldr	r3, [sp, #12]
 800c398:	1d19      	adds	r1, r3, #4
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	9103      	str	r1, [sp, #12]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	bfbb      	ittet	lt
 800c3a2:	425b      	neglt	r3, r3
 800c3a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c3a8:	9307      	strge	r3, [sp, #28]
 800c3aa:	9307      	strlt	r3, [sp, #28]
 800c3ac:	bfb8      	it	lt
 800c3ae:	9204      	strlt	r2, [sp, #16]
 800c3b0:	7823      	ldrb	r3, [r4, #0]
 800c3b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3b4:	d10a      	bne.n	800c3cc <_svfiprintf_r+0x130>
 800c3b6:	7863      	ldrb	r3, [r4, #1]
 800c3b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3ba:	d132      	bne.n	800c422 <_svfiprintf_r+0x186>
 800c3bc:	9b03      	ldr	r3, [sp, #12]
 800c3be:	1d1a      	adds	r2, r3, #4
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	9203      	str	r2, [sp, #12]
 800c3c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3c8:	3402      	adds	r4, #2
 800c3ca:	9305      	str	r3, [sp, #20]
 800c3cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c490 <_svfiprintf_r+0x1f4>
 800c3d0:	7821      	ldrb	r1, [r4, #0]
 800c3d2:	2203      	movs	r2, #3
 800c3d4:	4650      	mov	r0, sl
 800c3d6:	f7f3 ffa3 	bl	8000320 <memchr>
 800c3da:	b138      	cbz	r0, 800c3ec <_svfiprintf_r+0x150>
 800c3dc:	9b04      	ldr	r3, [sp, #16]
 800c3de:	eba0 000a 	sub.w	r0, r0, sl
 800c3e2:	2240      	movs	r2, #64	@ 0x40
 800c3e4:	4082      	lsls	r2, r0
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	3401      	adds	r4, #1
 800c3ea:	9304      	str	r3, [sp, #16]
 800c3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3f0:	4824      	ldr	r0, [pc, #144]	@ (800c484 <_svfiprintf_r+0x1e8>)
 800c3f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3f6:	2206      	movs	r2, #6
 800c3f8:	f7f3 ff92 	bl	8000320 <memchr>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d036      	beq.n	800c46e <_svfiprintf_r+0x1d2>
 800c400:	4b21      	ldr	r3, [pc, #132]	@ (800c488 <_svfiprintf_r+0x1ec>)
 800c402:	bb1b      	cbnz	r3, 800c44c <_svfiprintf_r+0x1b0>
 800c404:	9b03      	ldr	r3, [sp, #12]
 800c406:	3307      	adds	r3, #7
 800c408:	f023 0307 	bic.w	r3, r3, #7
 800c40c:	3308      	adds	r3, #8
 800c40e:	9303      	str	r3, [sp, #12]
 800c410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c412:	4433      	add	r3, r6
 800c414:	9309      	str	r3, [sp, #36]	@ 0x24
 800c416:	e76a      	b.n	800c2ee <_svfiprintf_r+0x52>
 800c418:	fb0c 3202 	mla	r2, ip, r2, r3
 800c41c:	460c      	mov	r4, r1
 800c41e:	2001      	movs	r0, #1
 800c420:	e7a8      	b.n	800c374 <_svfiprintf_r+0xd8>
 800c422:	2300      	movs	r3, #0
 800c424:	3401      	adds	r4, #1
 800c426:	9305      	str	r3, [sp, #20]
 800c428:	4619      	mov	r1, r3
 800c42a:	f04f 0c0a 	mov.w	ip, #10
 800c42e:	4620      	mov	r0, r4
 800c430:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c434:	3a30      	subs	r2, #48	@ 0x30
 800c436:	2a09      	cmp	r2, #9
 800c438:	d903      	bls.n	800c442 <_svfiprintf_r+0x1a6>
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d0c6      	beq.n	800c3cc <_svfiprintf_r+0x130>
 800c43e:	9105      	str	r1, [sp, #20]
 800c440:	e7c4      	b.n	800c3cc <_svfiprintf_r+0x130>
 800c442:	fb0c 2101 	mla	r1, ip, r1, r2
 800c446:	4604      	mov	r4, r0
 800c448:	2301      	movs	r3, #1
 800c44a:	e7f0      	b.n	800c42e <_svfiprintf_r+0x192>
 800c44c:	ab03      	add	r3, sp, #12
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	462a      	mov	r2, r5
 800c452:	4b0e      	ldr	r3, [pc, #56]	@ (800c48c <_svfiprintf_r+0x1f0>)
 800c454:	a904      	add	r1, sp, #16
 800c456:	4638      	mov	r0, r7
 800c458:	f3af 8000 	nop.w
 800c45c:	1c42      	adds	r2, r0, #1
 800c45e:	4606      	mov	r6, r0
 800c460:	d1d6      	bne.n	800c410 <_svfiprintf_r+0x174>
 800c462:	89ab      	ldrh	r3, [r5, #12]
 800c464:	065b      	lsls	r3, r3, #25
 800c466:	f53f af2d 	bmi.w	800c2c4 <_svfiprintf_r+0x28>
 800c46a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c46c:	e72c      	b.n	800c2c8 <_svfiprintf_r+0x2c>
 800c46e:	ab03      	add	r3, sp, #12
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	462a      	mov	r2, r5
 800c474:	4b05      	ldr	r3, [pc, #20]	@ (800c48c <_svfiprintf_r+0x1f0>)
 800c476:	a904      	add	r1, sp, #16
 800c478:	4638      	mov	r0, r7
 800c47a:	f000 f879 	bl	800c570 <_printf_i>
 800c47e:	e7ed      	b.n	800c45c <_svfiprintf_r+0x1c0>
 800c480:	0800cc24 	.word	0x0800cc24
 800c484:	0800cc2e 	.word	0x0800cc2e
 800c488:	00000000 	.word	0x00000000
 800c48c:	0800c1e5 	.word	0x0800c1e5
 800c490:	0800cc2a 	.word	0x0800cc2a

0800c494 <_printf_common>:
 800c494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c498:	4616      	mov	r6, r2
 800c49a:	4698      	mov	r8, r3
 800c49c:	688a      	ldr	r2, [r1, #8]
 800c49e:	690b      	ldr	r3, [r1, #16]
 800c4a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	bfb8      	it	lt
 800c4a8:	4613      	movlt	r3, r2
 800c4aa:	6033      	str	r3, [r6, #0]
 800c4ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c4b0:	4607      	mov	r7, r0
 800c4b2:	460c      	mov	r4, r1
 800c4b4:	b10a      	cbz	r2, 800c4ba <_printf_common+0x26>
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	6033      	str	r3, [r6, #0]
 800c4ba:	6823      	ldr	r3, [r4, #0]
 800c4bc:	0699      	lsls	r1, r3, #26
 800c4be:	bf42      	ittt	mi
 800c4c0:	6833      	ldrmi	r3, [r6, #0]
 800c4c2:	3302      	addmi	r3, #2
 800c4c4:	6033      	strmi	r3, [r6, #0]
 800c4c6:	6825      	ldr	r5, [r4, #0]
 800c4c8:	f015 0506 	ands.w	r5, r5, #6
 800c4cc:	d106      	bne.n	800c4dc <_printf_common+0x48>
 800c4ce:	f104 0a19 	add.w	sl, r4, #25
 800c4d2:	68e3      	ldr	r3, [r4, #12]
 800c4d4:	6832      	ldr	r2, [r6, #0]
 800c4d6:	1a9b      	subs	r3, r3, r2
 800c4d8:	42ab      	cmp	r3, r5
 800c4da:	dc26      	bgt.n	800c52a <_printf_common+0x96>
 800c4dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c4e0:	6822      	ldr	r2, [r4, #0]
 800c4e2:	3b00      	subs	r3, #0
 800c4e4:	bf18      	it	ne
 800c4e6:	2301      	movne	r3, #1
 800c4e8:	0692      	lsls	r2, r2, #26
 800c4ea:	d42b      	bmi.n	800c544 <_printf_common+0xb0>
 800c4ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c4f0:	4641      	mov	r1, r8
 800c4f2:	4638      	mov	r0, r7
 800c4f4:	47c8      	blx	r9
 800c4f6:	3001      	adds	r0, #1
 800c4f8:	d01e      	beq.n	800c538 <_printf_common+0xa4>
 800c4fa:	6823      	ldr	r3, [r4, #0]
 800c4fc:	6922      	ldr	r2, [r4, #16]
 800c4fe:	f003 0306 	and.w	r3, r3, #6
 800c502:	2b04      	cmp	r3, #4
 800c504:	bf02      	ittt	eq
 800c506:	68e5      	ldreq	r5, [r4, #12]
 800c508:	6833      	ldreq	r3, [r6, #0]
 800c50a:	1aed      	subeq	r5, r5, r3
 800c50c:	68a3      	ldr	r3, [r4, #8]
 800c50e:	bf0c      	ite	eq
 800c510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c514:	2500      	movne	r5, #0
 800c516:	4293      	cmp	r3, r2
 800c518:	bfc4      	itt	gt
 800c51a:	1a9b      	subgt	r3, r3, r2
 800c51c:	18ed      	addgt	r5, r5, r3
 800c51e:	2600      	movs	r6, #0
 800c520:	341a      	adds	r4, #26
 800c522:	42b5      	cmp	r5, r6
 800c524:	d11a      	bne.n	800c55c <_printf_common+0xc8>
 800c526:	2000      	movs	r0, #0
 800c528:	e008      	b.n	800c53c <_printf_common+0xa8>
 800c52a:	2301      	movs	r3, #1
 800c52c:	4652      	mov	r2, sl
 800c52e:	4641      	mov	r1, r8
 800c530:	4638      	mov	r0, r7
 800c532:	47c8      	blx	r9
 800c534:	3001      	adds	r0, #1
 800c536:	d103      	bne.n	800c540 <_printf_common+0xac>
 800c538:	f04f 30ff 	mov.w	r0, #4294967295
 800c53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c540:	3501      	adds	r5, #1
 800c542:	e7c6      	b.n	800c4d2 <_printf_common+0x3e>
 800c544:	18e1      	adds	r1, r4, r3
 800c546:	1c5a      	adds	r2, r3, #1
 800c548:	2030      	movs	r0, #48	@ 0x30
 800c54a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c54e:	4422      	add	r2, r4
 800c550:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c554:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c558:	3302      	adds	r3, #2
 800c55a:	e7c7      	b.n	800c4ec <_printf_common+0x58>
 800c55c:	2301      	movs	r3, #1
 800c55e:	4622      	mov	r2, r4
 800c560:	4641      	mov	r1, r8
 800c562:	4638      	mov	r0, r7
 800c564:	47c8      	blx	r9
 800c566:	3001      	adds	r0, #1
 800c568:	d0e6      	beq.n	800c538 <_printf_common+0xa4>
 800c56a:	3601      	adds	r6, #1
 800c56c:	e7d9      	b.n	800c522 <_printf_common+0x8e>
	...

0800c570 <_printf_i>:
 800c570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c574:	7e0f      	ldrb	r7, [r1, #24]
 800c576:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c578:	2f78      	cmp	r7, #120	@ 0x78
 800c57a:	4691      	mov	r9, r2
 800c57c:	4680      	mov	r8, r0
 800c57e:	460c      	mov	r4, r1
 800c580:	469a      	mov	sl, r3
 800c582:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c586:	d807      	bhi.n	800c598 <_printf_i+0x28>
 800c588:	2f62      	cmp	r7, #98	@ 0x62
 800c58a:	d80a      	bhi.n	800c5a2 <_printf_i+0x32>
 800c58c:	2f00      	cmp	r7, #0
 800c58e:	f000 80d1 	beq.w	800c734 <_printf_i+0x1c4>
 800c592:	2f58      	cmp	r7, #88	@ 0x58
 800c594:	f000 80b8 	beq.w	800c708 <_printf_i+0x198>
 800c598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c59c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c5a0:	e03a      	b.n	800c618 <_printf_i+0xa8>
 800c5a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c5a6:	2b15      	cmp	r3, #21
 800c5a8:	d8f6      	bhi.n	800c598 <_printf_i+0x28>
 800c5aa:	a101      	add	r1, pc, #4	@ (adr r1, 800c5b0 <_printf_i+0x40>)
 800c5ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5b0:	0800c609 	.word	0x0800c609
 800c5b4:	0800c61d 	.word	0x0800c61d
 800c5b8:	0800c599 	.word	0x0800c599
 800c5bc:	0800c599 	.word	0x0800c599
 800c5c0:	0800c599 	.word	0x0800c599
 800c5c4:	0800c599 	.word	0x0800c599
 800c5c8:	0800c61d 	.word	0x0800c61d
 800c5cc:	0800c599 	.word	0x0800c599
 800c5d0:	0800c599 	.word	0x0800c599
 800c5d4:	0800c599 	.word	0x0800c599
 800c5d8:	0800c599 	.word	0x0800c599
 800c5dc:	0800c71b 	.word	0x0800c71b
 800c5e0:	0800c647 	.word	0x0800c647
 800c5e4:	0800c6d5 	.word	0x0800c6d5
 800c5e8:	0800c599 	.word	0x0800c599
 800c5ec:	0800c599 	.word	0x0800c599
 800c5f0:	0800c73d 	.word	0x0800c73d
 800c5f4:	0800c599 	.word	0x0800c599
 800c5f8:	0800c647 	.word	0x0800c647
 800c5fc:	0800c599 	.word	0x0800c599
 800c600:	0800c599 	.word	0x0800c599
 800c604:	0800c6dd 	.word	0x0800c6dd
 800c608:	6833      	ldr	r3, [r6, #0]
 800c60a:	1d1a      	adds	r2, r3, #4
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	6032      	str	r2, [r6, #0]
 800c610:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c614:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c618:	2301      	movs	r3, #1
 800c61a:	e09c      	b.n	800c756 <_printf_i+0x1e6>
 800c61c:	6833      	ldr	r3, [r6, #0]
 800c61e:	6820      	ldr	r0, [r4, #0]
 800c620:	1d19      	adds	r1, r3, #4
 800c622:	6031      	str	r1, [r6, #0]
 800c624:	0606      	lsls	r6, r0, #24
 800c626:	d501      	bpl.n	800c62c <_printf_i+0xbc>
 800c628:	681d      	ldr	r5, [r3, #0]
 800c62a:	e003      	b.n	800c634 <_printf_i+0xc4>
 800c62c:	0645      	lsls	r5, r0, #25
 800c62e:	d5fb      	bpl.n	800c628 <_printf_i+0xb8>
 800c630:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c634:	2d00      	cmp	r5, #0
 800c636:	da03      	bge.n	800c640 <_printf_i+0xd0>
 800c638:	232d      	movs	r3, #45	@ 0x2d
 800c63a:	426d      	negs	r5, r5
 800c63c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c640:	4858      	ldr	r0, [pc, #352]	@ (800c7a4 <_printf_i+0x234>)
 800c642:	230a      	movs	r3, #10
 800c644:	e011      	b.n	800c66a <_printf_i+0xfa>
 800c646:	6821      	ldr	r1, [r4, #0]
 800c648:	6833      	ldr	r3, [r6, #0]
 800c64a:	0608      	lsls	r0, r1, #24
 800c64c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c650:	d402      	bmi.n	800c658 <_printf_i+0xe8>
 800c652:	0649      	lsls	r1, r1, #25
 800c654:	bf48      	it	mi
 800c656:	b2ad      	uxthmi	r5, r5
 800c658:	2f6f      	cmp	r7, #111	@ 0x6f
 800c65a:	4852      	ldr	r0, [pc, #328]	@ (800c7a4 <_printf_i+0x234>)
 800c65c:	6033      	str	r3, [r6, #0]
 800c65e:	bf14      	ite	ne
 800c660:	230a      	movne	r3, #10
 800c662:	2308      	moveq	r3, #8
 800c664:	2100      	movs	r1, #0
 800c666:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c66a:	6866      	ldr	r6, [r4, #4]
 800c66c:	60a6      	str	r6, [r4, #8]
 800c66e:	2e00      	cmp	r6, #0
 800c670:	db05      	blt.n	800c67e <_printf_i+0x10e>
 800c672:	6821      	ldr	r1, [r4, #0]
 800c674:	432e      	orrs	r6, r5
 800c676:	f021 0104 	bic.w	r1, r1, #4
 800c67a:	6021      	str	r1, [r4, #0]
 800c67c:	d04b      	beq.n	800c716 <_printf_i+0x1a6>
 800c67e:	4616      	mov	r6, r2
 800c680:	fbb5 f1f3 	udiv	r1, r5, r3
 800c684:	fb03 5711 	mls	r7, r3, r1, r5
 800c688:	5dc7      	ldrb	r7, [r0, r7]
 800c68a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c68e:	462f      	mov	r7, r5
 800c690:	42bb      	cmp	r3, r7
 800c692:	460d      	mov	r5, r1
 800c694:	d9f4      	bls.n	800c680 <_printf_i+0x110>
 800c696:	2b08      	cmp	r3, #8
 800c698:	d10b      	bne.n	800c6b2 <_printf_i+0x142>
 800c69a:	6823      	ldr	r3, [r4, #0]
 800c69c:	07df      	lsls	r7, r3, #31
 800c69e:	d508      	bpl.n	800c6b2 <_printf_i+0x142>
 800c6a0:	6923      	ldr	r3, [r4, #16]
 800c6a2:	6861      	ldr	r1, [r4, #4]
 800c6a4:	4299      	cmp	r1, r3
 800c6a6:	bfde      	ittt	le
 800c6a8:	2330      	movle	r3, #48	@ 0x30
 800c6aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c6b2:	1b92      	subs	r2, r2, r6
 800c6b4:	6122      	str	r2, [r4, #16]
 800c6b6:	f8cd a000 	str.w	sl, [sp]
 800c6ba:	464b      	mov	r3, r9
 800c6bc:	aa03      	add	r2, sp, #12
 800c6be:	4621      	mov	r1, r4
 800c6c0:	4640      	mov	r0, r8
 800c6c2:	f7ff fee7 	bl	800c494 <_printf_common>
 800c6c6:	3001      	adds	r0, #1
 800c6c8:	d14a      	bne.n	800c760 <_printf_i+0x1f0>
 800c6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ce:	b004      	add	sp, #16
 800c6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6d4:	6823      	ldr	r3, [r4, #0]
 800c6d6:	f043 0320 	orr.w	r3, r3, #32
 800c6da:	6023      	str	r3, [r4, #0]
 800c6dc:	4832      	ldr	r0, [pc, #200]	@ (800c7a8 <_printf_i+0x238>)
 800c6de:	2778      	movs	r7, #120	@ 0x78
 800c6e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c6e4:	6823      	ldr	r3, [r4, #0]
 800c6e6:	6831      	ldr	r1, [r6, #0]
 800c6e8:	061f      	lsls	r7, r3, #24
 800c6ea:	f851 5b04 	ldr.w	r5, [r1], #4
 800c6ee:	d402      	bmi.n	800c6f6 <_printf_i+0x186>
 800c6f0:	065f      	lsls	r7, r3, #25
 800c6f2:	bf48      	it	mi
 800c6f4:	b2ad      	uxthmi	r5, r5
 800c6f6:	6031      	str	r1, [r6, #0]
 800c6f8:	07d9      	lsls	r1, r3, #31
 800c6fa:	bf44      	itt	mi
 800c6fc:	f043 0320 	orrmi.w	r3, r3, #32
 800c700:	6023      	strmi	r3, [r4, #0]
 800c702:	b11d      	cbz	r5, 800c70c <_printf_i+0x19c>
 800c704:	2310      	movs	r3, #16
 800c706:	e7ad      	b.n	800c664 <_printf_i+0xf4>
 800c708:	4826      	ldr	r0, [pc, #152]	@ (800c7a4 <_printf_i+0x234>)
 800c70a:	e7e9      	b.n	800c6e0 <_printf_i+0x170>
 800c70c:	6823      	ldr	r3, [r4, #0]
 800c70e:	f023 0320 	bic.w	r3, r3, #32
 800c712:	6023      	str	r3, [r4, #0]
 800c714:	e7f6      	b.n	800c704 <_printf_i+0x194>
 800c716:	4616      	mov	r6, r2
 800c718:	e7bd      	b.n	800c696 <_printf_i+0x126>
 800c71a:	6833      	ldr	r3, [r6, #0]
 800c71c:	6825      	ldr	r5, [r4, #0]
 800c71e:	6961      	ldr	r1, [r4, #20]
 800c720:	1d18      	adds	r0, r3, #4
 800c722:	6030      	str	r0, [r6, #0]
 800c724:	062e      	lsls	r6, r5, #24
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	d501      	bpl.n	800c72e <_printf_i+0x1be>
 800c72a:	6019      	str	r1, [r3, #0]
 800c72c:	e002      	b.n	800c734 <_printf_i+0x1c4>
 800c72e:	0668      	lsls	r0, r5, #25
 800c730:	d5fb      	bpl.n	800c72a <_printf_i+0x1ba>
 800c732:	8019      	strh	r1, [r3, #0]
 800c734:	2300      	movs	r3, #0
 800c736:	6123      	str	r3, [r4, #16]
 800c738:	4616      	mov	r6, r2
 800c73a:	e7bc      	b.n	800c6b6 <_printf_i+0x146>
 800c73c:	6833      	ldr	r3, [r6, #0]
 800c73e:	1d1a      	adds	r2, r3, #4
 800c740:	6032      	str	r2, [r6, #0]
 800c742:	681e      	ldr	r6, [r3, #0]
 800c744:	6862      	ldr	r2, [r4, #4]
 800c746:	2100      	movs	r1, #0
 800c748:	4630      	mov	r0, r6
 800c74a:	f7f3 fde9 	bl	8000320 <memchr>
 800c74e:	b108      	cbz	r0, 800c754 <_printf_i+0x1e4>
 800c750:	1b80      	subs	r0, r0, r6
 800c752:	6060      	str	r0, [r4, #4]
 800c754:	6863      	ldr	r3, [r4, #4]
 800c756:	6123      	str	r3, [r4, #16]
 800c758:	2300      	movs	r3, #0
 800c75a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c75e:	e7aa      	b.n	800c6b6 <_printf_i+0x146>
 800c760:	6923      	ldr	r3, [r4, #16]
 800c762:	4632      	mov	r2, r6
 800c764:	4649      	mov	r1, r9
 800c766:	4640      	mov	r0, r8
 800c768:	47d0      	blx	sl
 800c76a:	3001      	adds	r0, #1
 800c76c:	d0ad      	beq.n	800c6ca <_printf_i+0x15a>
 800c76e:	6823      	ldr	r3, [r4, #0]
 800c770:	079b      	lsls	r3, r3, #30
 800c772:	d413      	bmi.n	800c79c <_printf_i+0x22c>
 800c774:	68e0      	ldr	r0, [r4, #12]
 800c776:	9b03      	ldr	r3, [sp, #12]
 800c778:	4298      	cmp	r0, r3
 800c77a:	bfb8      	it	lt
 800c77c:	4618      	movlt	r0, r3
 800c77e:	e7a6      	b.n	800c6ce <_printf_i+0x15e>
 800c780:	2301      	movs	r3, #1
 800c782:	4632      	mov	r2, r6
 800c784:	4649      	mov	r1, r9
 800c786:	4640      	mov	r0, r8
 800c788:	47d0      	blx	sl
 800c78a:	3001      	adds	r0, #1
 800c78c:	d09d      	beq.n	800c6ca <_printf_i+0x15a>
 800c78e:	3501      	adds	r5, #1
 800c790:	68e3      	ldr	r3, [r4, #12]
 800c792:	9903      	ldr	r1, [sp, #12]
 800c794:	1a5b      	subs	r3, r3, r1
 800c796:	42ab      	cmp	r3, r5
 800c798:	dcf2      	bgt.n	800c780 <_printf_i+0x210>
 800c79a:	e7eb      	b.n	800c774 <_printf_i+0x204>
 800c79c:	2500      	movs	r5, #0
 800c79e:	f104 0619 	add.w	r6, r4, #25
 800c7a2:	e7f5      	b.n	800c790 <_printf_i+0x220>
 800c7a4:	0800cc35 	.word	0x0800cc35
 800c7a8:	0800cc46 	.word	0x0800cc46

0800c7ac <memmove>:
 800c7ac:	4288      	cmp	r0, r1
 800c7ae:	b510      	push	{r4, lr}
 800c7b0:	eb01 0402 	add.w	r4, r1, r2
 800c7b4:	d902      	bls.n	800c7bc <memmove+0x10>
 800c7b6:	4284      	cmp	r4, r0
 800c7b8:	4623      	mov	r3, r4
 800c7ba:	d807      	bhi.n	800c7cc <memmove+0x20>
 800c7bc:	1e43      	subs	r3, r0, #1
 800c7be:	42a1      	cmp	r1, r4
 800c7c0:	d008      	beq.n	800c7d4 <memmove+0x28>
 800c7c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7ca:	e7f8      	b.n	800c7be <memmove+0x12>
 800c7cc:	4402      	add	r2, r0
 800c7ce:	4601      	mov	r1, r0
 800c7d0:	428a      	cmp	r2, r1
 800c7d2:	d100      	bne.n	800c7d6 <memmove+0x2a>
 800c7d4:	bd10      	pop	{r4, pc}
 800c7d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7de:	e7f7      	b.n	800c7d0 <memmove+0x24>

0800c7e0 <_sbrk_r>:
 800c7e0:	b538      	push	{r3, r4, r5, lr}
 800c7e2:	4d06      	ldr	r5, [pc, #24]	@ (800c7fc <_sbrk_r+0x1c>)
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	4608      	mov	r0, r1
 800c7ea:	602b      	str	r3, [r5, #0]
 800c7ec:	f7f6 f8b8 	bl	8002960 <_sbrk>
 800c7f0:	1c43      	adds	r3, r0, #1
 800c7f2:	d102      	bne.n	800c7fa <_sbrk_r+0x1a>
 800c7f4:	682b      	ldr	r3, [r5, #0]
 800c7f6:	b103      	cbz	r3, 800c7fa <_sbrk_r+0x1a>
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	bd38      	pop	{r3, r4, r5, pc}
 800c7fc:	24000e88 	.word	0x24000e88

0800c800 <_realloc_r>:
 800c800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c804:	4607      	mov	r7, r0
 800c806:	4614      	mov	r4, r2
 800c808:	460d      	mov	r5, r1
 800c80a:	b921      	cbnz	r1, 800c816 <_realloc_r+0x16>
 800c80c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c810:	4611      	mov	r1, r2
 800c812:	f7ff bc5b 	b.w	800c0cc <_malloc_r>
 800c816:	b92a      	cbnz	r2, 800c824 <_realloc_r+0x24>
 800c818:	f7ff fbec 	bl	800bff4 <_free_r>
 800c81c:	4625      	mov	r5, r4
 800c81e:	4628      	mov	r0, r5
 800c820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c824:	f000 f81a 	bl	800c85c <_malloc_usable_size_r>
 800c828:	4284      	cmp	r4, r0
 800c82a:	4606      	mov	r6, r0
 800c82c:	d802      	bhi.n	800c834 <_realloc_r+0x34>
 800c82e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c832:	d8f4      	bhi.n	800c81e <_realloc_r+0x1e>
 800c834:	4621      	mov	r1, r4
 800c836:	4638      	mov	r0, r7
 800c838:	f7ff fc48 	bl	800c0cc <_malloc_r>
 800c83c:	4680      	mov	r8, r0
 800c83e:	b908      	cbnz	r0, 800c844 <_realloc_r+0x44>
 800c840:	4645      	mov	r5, r8
 800c842:	e7ec      	b.n	800c81e <_realloc_r+0x1e>
 800c844:	42b4      	cmp	r4, r6
 800c846:	4622      	mov	r2, r4
 800c848:	4629      	mov	r1, r5
 800c84a:	bf28      	it	cs
 800c84c:	4632      	movcs	r2, r6
 800c84e:	f7ff fbc3 	bl	800bfd8 <memcpy>
 800c852:	4629      	mov	r1, r5
 800c854:	4638      	mov	r0, r7
 800c856:	f7ff fbcd 	bl	800bff4 <_free_r>
 800c85a:	e7f1      	b.n	800c840 <_realloc_r+0x40>

0800c85c <_malloc_usable_size_r>:
 800c85c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c860:	1f18      	subs	r0, r3, #4
 800c862:	2b00      	cmp	r3, #0
 800c864:	bfbc      	itt	lt
 800c866:	580b      	ldrlt	r3, [r1, r0]
 800c868:	18c0      	addlt	r0, r0, r3
 800c86a:	4770      	bx	lr

0800c86c <_init>:
 800c86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86e:	bf00      	nop
 800c870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c872:	bc08      	pop	{r3}
 800c874:	469e      	mov	lr, r3
 800c876:	4770      	bx	lr

0800c878 <_fini>:
 800c878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87a:	bf00      	nop
 800c87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c87e:	bc08      	pop	{r3}
 800c880:	469e      	mov	lr, r3
 800c882:	4770      	bx	lr
