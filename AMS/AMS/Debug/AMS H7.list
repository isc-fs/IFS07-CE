
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c490  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  0800c760  0800c760  0000d760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c9ac  0800c9ac  0000d9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800c9b4  0800c9b4  0000d9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c9bc  0800c9bc  0000d9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0800c9c0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e30  2400006c  0800ca2c  0000e06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000e9c  0800ca2c  0000ee9c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026f69  00000000  00000000  0000e09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c05  00000000  00000000  00035003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001920  00000000  00000000  00038c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013ae  00000000  00000000  0003a528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b7cc  00000000  00000000  0003b8d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020d32  00000000  00000000  000770a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176211  00000000  00000000  00097dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020dfe5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007324  00000000  00000000  0020e028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000042  00000000  00000000  0021534c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c748 	.word	0x0800c748

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0800c748 	.word	0x0800c748

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <_ZN7BMS_MODC1Emiiihjii>:
/*********************************************************************************************************
 ** Function name:           BMS_MOD
 ** Descriptions:            Initialization function of teh class
 *********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT,
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
		uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG_V, int _LAG_T) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800072c:	61da      	str	r2, [r3, #28]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	22fa      	movs	r2, #250	@ 0xfa
 8000732:	621a      	str	r2, [r3, #32]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800073a:	625a      	str	r2, [r3, #36]	@ 0x24
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800074a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000752:	631a      	str	r2, [r3, #48]	@ 0x30
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	69da      	ldr	r2, [r3, #28]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2200      	movs	r2, #0
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	63da      	str	r2, [r3, #60]	@ 0x3c
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	641a      	str	r2, [r3, #64]	@ 0x40
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2200      	movs	r2, #0
 8000776:	645a      	str	r2, [r3, #68]	@ 0x44
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	649a      	str	r2, [r3, #72]	@ 0x48
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2200      	movs	r2, #0
 8000784:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2200      	movs	r2, #0
 800078c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2200      	movs	r2, #0
 8000794:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2200      	movs	r2, #0
 800079c:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2213      	movs	r2, #19
 80007a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	220a      	movs	r2, #10
 80007ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3358      	adds	r3, #88	@ 0x58
 80007b2:	2230      	movs	r2, #48	@ 0x30
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00b fb48 	bl	800be4c <memset>
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2200      	movs	r2, #0
 80007c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2200      	movs	r2, #0
 80007c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2200      	movs	r2, #0
 80007d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f241 0268 	movw	r2, #4200	@ 0x1068
 80007da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2200      	movs	r2, #0
 80007e2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2200      	movs	r2, #0
 80007ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2200      	movs	r2, #0
 80007f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	33a4      	adds	r3, #164	@ 0xa4
 80007fa:	224c      	movs	r2, #76	@ 0x4c
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00b fb24 	bl	800be4c <memset>
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	33f0      	adds	r3, #240	@ 0xf0
 8000808:	2298      	movs	r2, #152	@ 0x98
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f00b fb1d 	bl	800be4c <memset>
	CANID = _ID;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	601a      	str	r2, [r3, #0]
	LIMIT_MAX_V = _MAXV;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	60da      	str	r2, [r3, #12]
	LIMIT_MIN_V = _MINV;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	611a      	str	r2, [r3, #16]
	LIMIT_MAX_T = _MAXT;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	6a3a      	ldr	r2, [r7, #32]
 8000828:	615a      	str	r2, [r3, #20]
	NUM_CELLS = _NUMCELLS;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000830:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

	uint32_t now = HAL_GetTick();
 8000834:	f002 f976 	bl	8002b24 <HAL_GetTick>
 8000838:	6178      	str	r0, [r7, #20]

	time_lim_plotted_volts = now + _LAG_V;
 800083a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	441a      	add	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	635a      	str	r2, [r3, #52]	@ 0x34
	time_lim_sent_volts = now + _LAG_V;
 8000844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	441a      	add	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	639a      	str	r2, [r3, #56]	@ 0x38
	time_lim_received_volts = now + TIME_LIM_RECV_VOLTS + _LAG_V;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	441a      	add	r2, r3
 8000856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000858:	441a      	add	r2, r3
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	63da      	str	r2, [r3, #60]	@ 0x3c

	time_lim_plotted_temps = now + _LAG_T;
 800085e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	441a      	add	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	641a      	str	r2, [r3, #64]	@ 0x40
	time_lim_sent_temps = now + _LAG_T;
 8000868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	441a      	add	r2, r3
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	645a      	str	r2, [r3, #68]	@ 0x44
	time_lim_received_temps = now + TIME_LIM_RECV_TEMPS + _LAG_T;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	441a      	add	r2, r3
 800087a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800087c:	441a      	add	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	4618      	mov	r0, r3
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <_ZN7BMS_MOD5parseEmPhm>:

/*********************************************************************************************************
 ** Function name:           parse
 ** Descriptions:            Function for parsing the received data via CAN protocol
 *********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	603b      	str	r3, [r7, #0]
	if (id > CANID && id < CANID + 30) {
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	f240 8130 	bls.w	8000b06 <_ZN7BMS_MOD5parseEmPhm+0x27a>
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	331e      	adds	r3, #30
 80008ac:	68ba      	ldr	r2, [r7, #8]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	f080 8129 	bcs.w	8000b06 <_ZN7BMS_MOD5parseEmPhm+0x27a>
		int m = id % CANID;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80008be:	fb01 f202 	mul.w	r2, r1, r2
 80008c2:	1a9b      	subs	r3, r3, r2
 80008c4:	617b      	str	r3, [r7, #20]
		int pos = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
		if (m >= 1 && m <= 5) {
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	f340 809e 	ble.w	8000a0e <_ZN7BMS_MOD5parseEmPhm+0x182>
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	f300 809a 	bgt.w	8000a0e <_ZN7BMS_MOD5parseEmPhm+0x182>
			time_lim_received_volts = t + TIME_LIM_RECV_VOLTS;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	441a      	add	r2, r3
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	63da      	str	r2, [r3, #60]	@ 0x3c

			for (int i = 0; i < 4; i++) {
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80008ea:	e04e      	b.n	800098a <_ZN7BMS_MOD5parseEmPhm+0xfe>
				pos = (m - 1) * 4 + i;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008f4:	4413      	add	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
				if (pos >= 19)
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	2b12      	cmp	r3, #18
 80008fc:	dc49      	bgt.n	8000992 <_ZN7BMS_MOD5parseEmPhm+0x106>
					break;

				cellVoltagemV[pos] = (buf[2 * i] << 8) | buf[2 * i + 1];
 80008fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	461a      	mov	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4413      	add	r3, r2
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800090e:	0052      	lsls	r2, r2, #1
 8000910:	3201      	adds	r2, #1
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	440a      	add	r2, r1
 8000916:	7812      	ldrb	r2, [r2, #0]
 8000918:	431a      	orrs	r2, r3
 800091a:	68f9      	ldr	r1, [r7, #12]
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	3328      	adds	r3, #40	@ 0x28
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	440b      	add	r3, r1
 8000924:	605a      	str	r2, [r3, #4]
				 //error_volt = BMS_OK;
				 } else {
				 flag_error_volt[pos] = 0;
				 }*/

				if ((cellVoltagemV[pos] > LIMIT_MAX_V) && pos < NUM_CELLS) {
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	3328      	adds	r3, #40	@ 0x28
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	4413      	add	r3, r2
 8000930:	685a      	ldr	r2, [r3, #4]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	429a      	cmp	r2, r3
 8000938:	dd1e      	ble.n	8000978 <_ZN7BMS_MOD5parseEmPhm+0xec>
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000940:	461a      	mov	r2, r3
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	4293      	cmp	r3, r2
 8000946:	da17      	bge.n	8000978 <_ZN7BMS_MOD5parseEmPhm+0xec>
					flag_error_volt[pos]++;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	3216      	adds	r2, #22
 800094e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000952:	1c59      	adds	r1, r3, #1
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	3216      	adds	r2, #22
 800095a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					if (flag_error_volt[pos] >= max_flag)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	3216      	adds	r2, #22
 8000964:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800096c:	429a      	cmp	r2, r3
 800096e:	db09      	blt.n	8000984 <_ZN7BMS_MOD5parseEmPhm+0xf8>
						error_volt = BMS_ERROR_VOLTS;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2202      	movs	r2, #2
 8000974:	605a      	str	r2, [r3, #4]
					if (flag_error_volt[pos] >= max_flag)
 8000976:	e005      	b.n	8000984 <_ZN7BMS_MOD5parseEmPhm+0xf8>
					//error_volt = BMS_OK;
				} else {
					flag_error_volt[pos] = 0;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	3216      	adds	r2, #22
 800097e:	2100      	movs	r1, #0
 8000980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int i = 0; i < 4; i++) {
 8000984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000986:	3301      	adds	r3, #1
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
 800098a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800098c:	2b03      	cmp	r3, #3
 800098e:	ddad      	ble.n	80008ec <_ZN7BMS_MOD5parseEmPhm+0x60>
 8000990:	e000      	b.n	8000994 <_ZN7BMS_MOD5parseEmPhm+0x108>
					break;
 8000992:	bf00      	nop
				}
			}

			MAX_V = cellVoltagemV[0];
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	619a      	str	r2, [r3, #24]
			MIN_V = cellVoltagemV[0];
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			for (int i = 1; i < 19; i++) {
 80009aa:	2301      	movs	r3, #1
 80009ac:	623b      	str	r3, [r7, #32]
 80009ae:	e029      	b.n	8000a04 <_ZN7BMS_MOD5parseEmPhm+0x178>
				if (cellVoltagemV[i] > MAX_V)
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	6a3b      	ldr	r3, [r7, #32]
 80009b4:	3328      	adds	r3, #40	@ 0x28
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	dd08      	ble.n	80009d6 <_ZN7BMS_MOD5parseEmPhm+0x14a>
					MAX_V = cellVoltagemV[i];
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	6a3b      	ldr	r3, [r7, #32]
 80009c8:	3328      	adds	r3, #40	@ 0x28
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	619a      	str	r2, [r3, #24]
 80009d4:	e013      	b.n	80009fe <_ZN7BMS_MOD5parseEmPhm+0x172>
				else if (cellVoltagemV[i] < MIN_V)
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	6a3b      	ldr	r3, [r7, #32]
 80009da:	3328      	adds	r3, #40	@ 0x28
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4413      	add	r3, r2
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009e8:	429a      	cmp	r2, r3
 80009ea:	da08      	bge.n	80009fe <_ZN7BMS_MOD5parseEmPhm+0x172>
					MIN_V = cellVoltagemV[i];
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	6a3b      	ldr	r3, [r7, #32]
 80009f0:	3328      	adds	r3, #40	@ 0x28
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4413      	add	r3, r2
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			for (int i = 1; i < 19; i++) {
 80009fe:	6a3b      	ldr	r3, [r7, #32]
 8000a00:	3301      	adds	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	2b12      	cmp	r3, #18
 8000a08:	ddd2      	ble.n	80009b0 <_ZN7BMS_MOD5parseEmPhm+0x124>
			}

			return true;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e07c      	b.n	8000b08 <_ZN7BMS_MOD5parseEmPhm+0x27c>

		} else if (m >= 21 && m <= 25) {
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	2b14      	cmp	r3, #20
 8000a12:	dd78      	ble.n	8000b06 <_ZN7BMS_MOD5parseEmPhm+0x27a>
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	2b19      	cmp	r3, #25
 8000a18:	dc75      	bgt.n	8000b06 <_ZN7BMS_MOD5parseEmPhm+0x27a>
			// m = 21 → packet 0, m = 25 → packet 4
			time_lim_received_temps = t + TIME_LIM_RECV_TEMPS;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	441a      	add	r2, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	649a      	str	r2, [r3, #72]	@ 0x48
			if (flag_charger == 1)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d104      	bne.n	8000a3a <_ZN7BMS_MOD5parseEmPhm+0x1ae>
				module_send_message_CAN1(id, buf, 8);
 8000a30:	2208      	movs	r2, #8
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	68b8      	ldr	r0, [r7, #8]
 8000a36:	f001 f88d 	bl	8001b54 <module_send_message_CAN1>

			for (int i = 0; i < 8; i++) {
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
 8000a3e:	e021      	b.n	8000a84 <_ZN7BMS_MOD5parseEmPhm+0x1f8>
				pos = (m - 21) * 8 + i;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	3b15      	subs	r3, #21
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	69fa      	ldr	r2, [r7, #28]
 8000a48:	4413      	add	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
				if (pos >= 38)
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	2b25      	cmp	r3, #37	@ 0x25
 8000a50:	dc1c      	bgt.n	8000a8c <_ZN7BMS_MOD5parseEmPhm+0x200>
					break;

				cellTemperature[pos] = buf[i];
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	4413      	add	r3, r2
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	323c      	adds	r2, #60	@ 0x3c
 8000a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				if (cellTemperature[pos] > LIMIT_MAX_T)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	323c      	adds	r2, #60	@ 0x3c
 8000a6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dd02      	ble.n	8000a7e <_ZN7BMS_MOD5parseEmPhm+0x1f2>
					error_temp = BMS_ERROR_TEMP;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2203      	movs	r2, #3
 8000a7c:	609a      	str	r2, [r3, #8]
			for (int i = 0; i < 8; i++) {
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3301      	adds	r3, #1
 8000a82:	61fb      	str	r3, [r7, #28]
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	2b07      	cmp	r3, #7
 8000a88:	ddda      	ble.n	8000a40 <_ZN7BMS_MOD5parseEmPhm+0x1b4>
 8000a8a:	e000      	b.n	8000a8e <_ZN7BMS_MOD5parseEmPhm+0x202>
					break;
 8000a8c:	bf00      	nop

			}

			MAX_T = cellTemperature[0];
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			MIN_T = cellTemperature[0];
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
			for (int i = 0; i < 38; i++) {
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	e027      	b.n	8000afc <_ZN7BMS_MOD5parseEmPhm+0x270>
				if (cellTemperature[i] > MAX_T)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	323c      	adds	r2, #60	@ 0x3c
 8000ab2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000abc:	429a      	cmp	r2, r3
 8000abe:	dd08      	ble.n	8000ad2 <_ZN7BMS_MOD5parseEmPhm+0x246>
					MAX_T = cellTemperature[i];
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	323c      	adds	r2, #60	@ 0x3c
 8000ac6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8000ad0:	e011      	b.n	8000af6 <_ZN7BMS_MOD5parseEmPhm+0x26a>
				else if (cellTemperature[i] < MIN_T)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	323c      	adds	r2, #60	@ 0x3c
 8000ad8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	da07      	bge.n	8000af6 <_ZN7BMS_MOD5parseEmPhm+0x26a>
					MIN_T = cellTemperature[i];
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	323c      	adds	r2, #60	@ 0x3c
 8000aec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
			for (int i = 0; i < 38; i++) {
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	3301      	adds	r3, #1
 8000afa:	61bb      	str	r3, [r7, #24]
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	2b25      	cmp	r3, #37	@ 0x25
 8000b00:	ddd4      	ble.n	8000aac <_ZN7BMS_MOD5parseEmPhm+0x220>
			}

			return true;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e000      	b.n	8000b08 <_ZN7BMS_MOD5parseEmPhm+0x27c>
		}

	}

	return false;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3728      	adds	r7, #40	@ 0x28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <_ZN7BMS_MOD13query_voltageEmPc>:

/*********************************************************************************************************
 ** Function name:           query_voltage
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/
int BMS_MOD::query_voltage(uint32_t time, char *buffer) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
	// Shunt voltage in milivolts

	if (get_state() == charge) {
 8000b1c:	f001 f908 	bl	8001d30 <_Z9get_statev>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	bf0c      	ite	eq
 8000b26:	2301      	moveq	r3, #1
 8000b28:	2300      	movne	r3, #0
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00f      	beq.n	8000b50 <_ZN7BMS_MOD13query_voltageEmPc+0x40>
		//Only balance when charging
		message_balancing[1] = BALANCING_V & 0xFF; // Coment this two lines for disabling the balancing
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		message_balancing[0] = (BALANCING_V >> 8) & 0xFF; // Coment this two lines for disabling the balancing
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b44:	121b      	asrs	r3, r3, #8
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8000b4e:	e007      	b.n	8000b60 <_ZN7BMS_MOD13query_voltageEmPc+0x50>

	} else {

		//Don't do anything

		message_balancing[0] = 0;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		message_balancing[1] = 0;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	}

	if (time > time_lim_sent_volts) {
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b64:	68ba      	ldr	r2, [r7, #8]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d91d      	bls.n	8000ba6 <_ZN7BMS_MOD13query_voltageEmPc+0x96>
		time_lim_sent_volts += TIME_LIM_SEND_VOLTS;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	6a1b      	ldr	r3, [r3, #32]
 8000b72:	441a      	add	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	639a      	str	r2, [r3, #56]	@ 0x38
		if (CANID != 0x00) { //It keeps sending 0x00 and dont know where
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d012      	beq.n	8000ba6 <_ZN7BMS_MOD13query_voltageEmPc+0x96>
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6818      	ldr	r0, [r3, #0]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	334c      	adds	r3, #76	@ 0x4c
 8000b88:	2202      	movs	r2, #2
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f001 f824 	bl	8001bd8 <module_send_message_CAN2>
 8000b90:	4603      	mov	r3, r0
					!= HAL_OK) {
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	bf14      	ite	ne
 8000b96:	2301      	movne	r3, #1
 8000b98:	2300      	moveq	r3, #0
 8000b9a:	b2db      	uxtb	r3, r3
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d002      	beq.n	8000ba6 <_ZN7BMS_MOD13query_voltageEmPc+0x96>
				error_volt = BMS_ERROR_COMMUNICATION;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	605a      	str	r2, [r3, #4]
	if (time > time_lim_received_volts) {

		//error_volt = BMS_ERROR_COMMUNICATION;
	}

	if (TIME_LIM_PLOT_VOLTS > 0 && time > time_lim_plotted_volts) {
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d00b      	beq.n	8000bc6 <_ZN7BMS_MOD13query_voltageEmPc+0xb6>
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d906      	bls.n	8000bc6 <_ZN7BMS_MOD13query_voltageEmPc+0xb6>
		time_lim_plotted_volts += TIME_LIM_PLOT_VOLTS;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	69db      	ldr	r3, [r3, #28]
 8000bc0:	441a      	add	r2, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	635a      	str	r2, [r3, #52]	@ 0x34
		//voltage_info(buffer);
	}

	for (int i = 0; i < NUM_CELLS; i++) {
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	e00f      	b.n	8000bec <_ZN7BMS_MOD13query_voltageEmPc+0xdc>
		voltage_acum += cellVoltagemV[i];
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000bd2:	68f9      	ldr	r1, [r7, #12]
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	3328      	adds	r3, #40	@ 0x28
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	440b      	add	r3, r1
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	441a      	add	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	for (int i = 0; i < NUM_CELLS; i++) {
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3301      	adds	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	dbe8      	blt.n	8000bcc <_ZN7BMS_MOD13query_voltageEmPc+0xbc>
	}
	return error_volt;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	685b      	ldr	r3, [r3, #4]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <_ZN7BMS_MOD17query_temperatureEmPc>:
/*********************************************************************************************************
 ** Function name:           query_temperature
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/

int BMS_MOD::query_temperature(uint32_t time, char *buffer) {
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b084      	sub	sp, #16
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
// Function for performing a correct behavior
	if (time > time_lim_sent_temps) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE TEMPERATURES
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d91b      	bls.n	8000c54 <_ZN7BMS_MOD17query_temperatureEmPc+0x4e>
		time_lim_sent_temps += TIME_LIM_SEND_TEMPS;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c24:	441a      	add	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	645a      	str	r2, [r3, #68]	@ 0x44

		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f103 0014 	add.w	r0, r3, #20
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	334e      	adds	r3, #78	@ 0x4e
 8000c36:	2202      	movs	r2, #2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f000 ffcd 	bl	8001bd8 <module_send_message_CAN2>
 8000c3e:	4603      	mov	r3, r0
				!= HAL_OK) {
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	bf14      	ite	ne
 8000c44:	2301      	movne	r3, #1
 8000c46:	2300      	moveq	r3, #0
 8000c48:	b2db      	uxtb	r3, r3
		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <_ZN7BMS_MOD17query_temperatureEmPc+0x4e>
			error_temp = BMS_ERROR_TEMP; // If the message is not sended then, error
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2203      	movs	r2, #3
 8000c52:	609a      	str	r2, [r3, #8]
		}
	}

	if (time_lim_sent_temps > 0 && time > time_lim_received_temps
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d00f      	beq.n	8000c7c <_ZN7BMS_MOD17query_temperatureEmPc+0x76>
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c60:	68ba      	ldr	r2, [r7, #8]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d90a      	bls.n	8000c7c <_ZN7BMS_MOD17query_temperatureEmPc+0x76>
			&& time - time_lim_received_temps > TIME_LIM_RECV_TEMPS) {
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	1ad2      	subs	r2, r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d902      	bls.n	8000c7c <_ZN7BMS_MOD17query_temperatureEmPc+0x76>
		error_temp = BMS_ERROR_COMMUNICATION;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	609a      	str	r2, [r3, #8]
	}

	if (TIME_LIM_PLOT_TEMPS > 0 && time > time_lim_plotted_temps) {
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d00b      	beq.n	8000c9c <_ZN7BMS_MOD17query_temperatureEmPc+0x96>
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c88:	68ba      	ldr	r2, [r7, #8]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d906      	bls.n	8000c9c <_ZN7BMS_MOD17query_temperatureEmPc+0x96>
		time_lim_plotted_temps += TIME_LIM_PLOT_TEMPS;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c96:	441a      	add	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	641a      	str	r2, [r3, #64]	@ 0x40
		//temperature_info(buffer);
	}

	return error_temp;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	689b      	ldr	r3, [r3, #8]

}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2202      	movs	r2, #2
 8000ccc:	731a      	strb	r2, [r3, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	611a      	str	r2, [r3, #16]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cda:	615a      	str	r2, [r3, #20]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2264      	movs	r2, #100	@ 0x64
 8000ce0:	619a      	str	r2, [r3, #24]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4a18      	ldr	r2, [pc, #96]	@ (8000d48 <_ZN7CPU_MODC1Emmi+0xa0>)
 8000ce6:	61da      	str	r2, [r3, #28]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	695a      	ldr	r2, [r3, #20]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	621a      	str	r2, [r3, #32]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	@ 0x24
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	69da      	ldr	r2, [r3, #28]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2200      	movs	r2, #0
 8000d02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2200      	movs	r2, #0
 8000d08:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	68ba      	ldr	r2, [r7, #8]
 8000d0e:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	6a1a      	ldr	r2, [r3, #32]
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	441a      	add	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	441a      	add	r2, r3
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	441a      	add	r2, r3
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	000f4240 	.word	0x000f4240

08000d4c <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d60:	d131      	bne.n	8000dc6 <_ZN7CPU_MOD5parseEmPhm+0x7a>
        error = CPU_OK;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	69da      	ldr	r2, [r3, #28]
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	441a      	add	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3301      	adds	r3, #1
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	021b      	lsls	r3, r3, #8
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	7812      	ldrb	r2, [r2, #0]
 8000d80:	431a      	orrs	r2, r3
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8000d8e:	dd18      	ble.n	8000dc2 <_ZN7CPU_MOD5parseEmPhm+0x76>
            error = CPU_BUS_LINE_OK;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2202      	movs	r2, #2
 8000d94:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	6818      	ldr	r0, [r3, #0]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	330c      	adds	r3, #12
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4619      	mov	r1, r3
 8000da2:	f000 fed7 	bl	8001b54 <module_send_message_CAN1>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	bf14      	ite	ne
 8000dac:	2301      	movne	r3, #1
 8000dae:	2300      	moveq	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d005      	beq.n	8000dc2 <_ZN7CPU_MOD5parseEmPhm+0x76>
                error = CPU_ERROR_COMMUNICATION;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2201      	movs	r2, #1
 8000dba:	609a      	str	r2, [r3, #8]
                print((char*)"error message");
 8000dbc:	4804      	ldr	r0, [pc, #16]	@ (8000dd0 <_ZN7CPU_MOD5parseEmPhm+0x84>)
 8000dbe:	f000 ff2b 	bl	8001c18 <print>
            }

        }
        return true;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e000      	b.n	8000dc8 <_ZN7CPU_MOD5parseEmPhm+0x7c>
    }
    return false;
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	0800c848 	.word	0x0800c848

08000dd4 <_ZN7CPU_MOD5queryEmPc>:

// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function to check if i need to send a mesage new mesage and the received mesajes interval are within the limits
// ********************************************************************************************************
int CPU_MOD::query(uint32_t time, char* buffer) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
	// Function for performing a correct behaivour
    if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE BMS
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d906      	bls.n	8000df8 <_ZN7CPU_MOD5queryEmPc+0x24>
        time_lim_sended += TIME_LIM_SEND;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	441a      	add	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (time > time_lim_received)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d902      	bls.n	8000e08 <_ZN7CPU_MOD5queryEmPc+0x34>
        error = CPU_ERROR_COMMUNICATION; ///////Cheking if everything is alright each time
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2201      	movs	r2, #1
 8000e06:	609a      	str	r2, [r3, #8]

    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d00b      	beq.n	8000e28 <_ZN7CPU_MOD5queryEmPc+0x54>
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	68ba      	ldr	r2, [r7, #8]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d906      	bls.n	8000e28 <_ZN7CPU_MOD5queryEmPc+0x54>
        time_lim_plotted += TIME_LIM_PLOT;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6a1a      	ldr	r2, [r3, #32]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	441a      	add	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	621a      	str	r2, [r3, #32]
        //info(buffer);
    }
    return error;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	689b      	ldr	r3, [r3, #8]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <_ZN7CPU_MOD11updateStateEi>:

void CPU_MOD::updateState(int s) {
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	731a      	strb	r2, [r3, #12]
    current_state = s;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	683a      	ldr	r2, [r7, #0]
 8000e4e:	611a      	str	r2, [r3, #16]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX)
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2200      	movs	r2, #0
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2200      	movs	r2, #0
 8000e78:	721a      	strb	r2, [r3, #8]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	725a      	strb	r2, [r3, #9]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000ea4:	621a      	str	r2, [r3, #32]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	22fa      	movs	r2, #250	@ 0xfa
 8000eaa:	625a      	str	r2, [r3, #36]	@ 0x24
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2232      	movs	r2, #50	@ 0x32
 8000eb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2232      	movs	r2, #50	@ 0x32
 8000eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	641a      	str	r2, [r3, #64]	@ 0x40
{
    CANID = ID;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	605a      	str	r2, [r3, #4]
    C_MAX = _C_MAX;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	601a      	str	r2, [r3, #0]
    flag_error_current = 1;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	61da      	str	r2, [r3, #28]
}
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4618      	mov	r0, r3
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <_ZN11Current_MOD5queryEiPc>:
// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char* buffer)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
    error = Current_OK;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2200      	movs	r2, #0
 8000f08:	631a      	str	r2, [r3, #48]	@ 0x30

    //printValue(Current);
    Current=(2.5-VoltageV)/0.0057; //Sensitivity is 5,7 mv/A
    */

    Current = readAnalogValue();
 8000f0a:	f000 fec1 	bl	8001c90 <readAnalogValue>
 8000f0e:	eef0 7a40 	vmov.f32	s15, s0
 8000f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f16:	ee17 2a90 	vmov	r2, s15
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(Current > C_MAX*0.8 && Current < C_MAX)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f22:	ee07 3a90 	vmov	s15, r3
 8000f26:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f36:	ed9f 5b42 	vldr	d5, [pc, #264]	@ 8001040 <_ZN11Current_MOD5queryEiPc+0x148>
 8000f3a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f46:	dd11      	ble.n	8000f6c <_ZN11Current_MOD5queryEiPc+0x74>
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	da0b      	bge.n	8000f6c <_ZN11Current_MOD5queryEiPc+0x74>
    {
        if(flag_error_current == 0) module_send_message_NoExtId_CAN1(0x500,message,1); //If current between 80 and 100% of maximun, sends alert
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	69db      	ldr	r3, [r3, #28]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d107      	bne.n	8000f6c <_ZN11Current_MOD5queryEiPc+0x74>
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	3308      	adds	r3, #8
 8000f60:	2201      	movs	r2, #1
 8000f62:	4619      	mov	r1, r3
 8000f64:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8000f68:	f000 fe16 	bl	8001b98 <module_send_message_NoExtId_CAN1>
    }

    if (Current > C_MAX)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dd18      	ble.n	8000faa <_ZN11Current_MOD5queryEiPc+0xb2>
    {
        if (flag_error_current == 1) {
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d107      	bne.n	8000f90 <_ZN11Current_MOD5queryEiPc+0x98>
        	module_send_message_NoExtId_CAN1(0x501, message, 2); //If current over maximun, sends alert
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	3308      	adds	r3, #8
 8000f84:	2202      	movs	r2, #2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f240 5001 	movw	r0, #1281	@ 0x501
 8000f8c:	f000 fe04 	bl	8001b98 <module_send_message_NoExtId_CAN1>
        }

        flag_error_current++;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	61da      	str	r2, [r3, #28]

        if (flag_charger != 1 || flag_charger == 1) //Only cut the AMS if accu not connected to charger, during charging the current control is on charger
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d119      	bne.n	8000fd6 <_ZN11Current_MOD5queryEiPc+0xde>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	e015      	b.n	8000fd6 <_ZN11Current_MOD5queryEiPc+0xde>
            }
        }
    }
    else
    {
        if (flag_error_current != 0)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00e      	beq.n	8000fd0 <_ZN11Current_MOD5queryEiPc+0xd8>
		for (int i = 0; i < 5; i++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	e008      	b.n	8000fca <_ZN11Current_MOD5queryEiPc+0xd2>
		{
			module_send_message_NoExtId_CAN1(0x502, 0, 2); //If current normal, sends green flag
 8000fb8:	2202      	movs	r2, #2
 8000fba:	2100      	movs	r1, #0
 8000fbc:	f240 5002 	movw	r0, #1282	@ 0x502
 8000fc0:	f000 fdea 	bl	8001b98 <module_send_message_NoExtId_CAN1>
		for (int i = 0; i < 5; i++)
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	ddf3      	ble.n	8000fb8 <_ZN11Current_MOD5queryEiPc+0xc0>
		}
        flag_error_current = 0;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
    }


    if (time > time_lim_sended)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dd16      	ble.n	800100e <_ZN11Current_MOD5queryEiPc+0x116>
    {
        time_lim_sended += TIME_LIM_SEND;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe8:	441a      	add	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	62da      	str	r2, [r3, #44]	@ 0x2c
        message[0] = 0;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	721a      	strb	r2, [r3, #8]
        message[1] = Current & 0xFF;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	725a      	strb	r2, [r3, #9]
        module_send_message_NoExtId_CAN1(CANID, message, 2); //Sends current through CAN each interval of ms
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6858      	ldr	r0, [r3, #4]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3308      	adds	r3, #8
 8001006:	2202      	movs	r2, #2
 8001008:	4619      	mov	r1, r3
 800100a:	f000 fdc5 	bl	8001b98 <module_send_message_NoExtId_CAN1>
    }


    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	2b00      	cmp	r3, #0
 8001014:	dd0b      	ble.n	800102e <_ZN11Current_MOD5queryEiPc+0x136>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	429a      	cmp	r2, r3
 800101e:	dd06      	ble.n	800102e <_ZN11Current_MOD5queryEiPc+0x136>
    {
        time_lim_plotted += TIME_LIM_PLOT;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	441a      	add	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	629a      	str	r2, [r3, #40]	@ 0x28
        //info(buffer);

    }

    
    return error;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 8001032:	4618      	mov	r0, r3
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	f3af 8000 	nop.w
 8001040:	9999999a 	.word	0x9999999a
 8001044:	3fe99999 	.word	0x3fe99999

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b085      	sub	sp, #20
 800104c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104e:	f001 fce3 	bl	8002a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001052:	f000 f8a5 	bl	80011a0 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001056:	f000 f91f 	bl	8001298 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105a:	f000 fc57 	bl	800190c <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 800105e:	f000 fadd 	bl	800161c <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 8001062:	f000 fa51 	bl	8001508 <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 8001066:	f000 fbf1 	bl	800184c <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 800106a:	f000 f949 	bl	8001300 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 800106e:	f000 f9d1 	bl	8001414 <_ZL12MX_ADC3_Initv>
  MX_TIM17_Init();
 8001072:	f000 fb5d 	bl	8001730 <_ZL13MX_TIM17_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001076:	2100      	movs	r1, #0
 8001078:	483e      	ldr	r0, [pc, #248]	@ (8001174 <main+0x12c>)
 800107a:	f008 fdf3 	bl	8009c64 <HAL_TIM_PWM_Start>



  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 800107e:	483e      	ldr	r0, [pc, #248]	@ (8001178 <main+0x130>)
 8001080:	f004 f85e 	bl	8005140 <HAL_FDCAN_Start>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	bf0c      	ite	eq
 800108a:	2301      	moveq	r3, #1
 800108c:	2300      	movne	r3, #0
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <main+0x52>
	  print((char*)"CAN_ACU iniciado");
 8001094:	4839      	ldr	r0, [pc, #228]	@ (800117c <main+0x134>)
 8001096:	f000 fdbf 	bl	8001c18 <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 800109a:	2200      	movs	r2, #0
 800109c:	2101      	movs	r1, #1
 800109e:	4836      	ldr	r0, [pc, #216]	@ (8001178 <main+0x130>)
 80010a0:	f004 fa40 	bl	8005524 <HAL_FDCAN_ActivateNotification>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	bf0c      	ite	eq
 80010aa:	2301      	moveq	r3, #1
 80010ac:	2300      	movne	r3, #0
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <main+0x72>
  {
	  print((char*)"CAN_ACU notification");
 80010b4:	4832      	ldr	r0, [pc, #200]	@ (8001180 <main+0x138>)
 80010b6:	f000 fdaf 	bl	8001c18 <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 80010ba:	4832      	ldr	r0, [pc, #200]	@ (8001184 <main+0x13c>)
 80010bc:	f004 f840 	bl	8005140 <HAL_FDCAN_Start>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	bf0c      	ite	eq
 80010c6:	2301      	moveq	r3, #1
 80010c8:	2300      	movne	r3, #0
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d002      	beq.n	80010d6 <main+0x8e>
	  print((char*)"CAN_BMS iniciado");
 80010d0:	482d      	ldr	r0, [pc, #180]	@ (8001188 <main+0x140>)
 80010d2:	f000 fda1 	bl	8001c18 <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 80010d6:	482d      	ldr	r0, [pc, #180]	@ (800118c <main+0x144>)
 80010d8:	f002 fa5e 	bl	8003598 <HAL_ADC_Start>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	bf0c      	ite	eq
 80010e2:	2301      	moveq	r3, #1
 80010e4:	2300      	movne	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <main+0xaa>
	  print((char*)"ADC iniciado");
 80010ec:	4828      	ldr	r0, [pc, #160]	@ (8001190 <main+0x148>)
 80010ee:	f000 fd93 	bl	8001c18 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 80010f2:	f000 fe29 	bl	8001d48 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 80010f6:	4b27      	ldr	r3, [pc, #156]	@ (8001194 <main+0x14c>)
 80010f8:	4a27      	ldr	r2, [pc, #156]	@ (8001198 <main+0x150>)
 80010fa:	2140      	movs	r1, #64	@ 0x40
 80010fc:	4821      	ldr	r0, [pc, #132]	@ (8001184 <main+0x13c>)
 80010fe:	f004 f8a5 	bl	800524c <HAL_FDCAN_GetRxMessage>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	bf0c      	ite	eq
 8001108:	2301      	moveq	r3, #1
 800110a:	2300      	movne	r3, #0
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0ef      	beq.n	80010f2 <main+0xaa>

		  msg_bms.id = RxHeader_bms.Identifier;
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <main+0x150>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a21      	ldr	r2, [pc, #132]	@ (800119c <main+0x154>)
 8001118:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 800111a:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <main+0x150>)
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b1e      	ldr	r3, [pc, #120]	@ (800119c <main+0x154>)
 8001122:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	e00c      	b.n	8001144 <main+0xfc>
 800112a:	4a1a      	ldr	r2, [pc, #104]	@ (8001194 <main+0x14c>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	7819      	ldrb	r1, [r3, #0]
 8001132:	4a1a      	ldr	r2, [pc, #104]	@ (800119c <main+0x154>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4413      	add	r3, r2
 8001138:	3305      	adds	r3, #5
 800113a:	460a      	mov	r2, r1
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3301      	adds	r3, #1
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b07      	cmp	r3, #7
 8001148:	ddef      	ble.n	800112a <main+0xe2>
		  msg_bms.bus = 2;
 800114a:	4b14      	ldr	r3, [pc, #80]	@ (800119c <main+0x154>)
 800114c:	2202      	movs	r2, #2
 800114e:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 8001150:	f001 fce8 	bl	8002b24 <HAL_GetTick>
 8001154:	4603      	mov	r3, r0
 8001156:	4a11      	ldr	r2, [pc, #68]	@ (800119c <main+0x154>)
 8001158:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 800115a:	4b10      	ldr	r3, [pc, #64]	@ (800119c <main+0x154>)
 800115c:	466c      	mov	r4, sp
 800115e:	f103 0210 	add.w	r2, r3, #16
 8001162:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001166:	e884 0003 	stmia.w	r4, {r0, r1}
 800116a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800116c:	f001 f816 	bl	800219c <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001170:	e7bf      	b.n	80010f2 <main+0xaa>
 8001172:	bf00      	nop
 8001174:	240002a8 	.word	0x240002a8
 8001178:	24000168 	.word	0x24000168
 800117c:	0800c858 	.word	0x0800c858
 8001180:	0800c86c 	.word	0x0800c86c
 8001184:	24000208 	.word	0x24000208
 8001188:	0800c884 	.word	0x0800c884
 800118c:	240000f8 	.word	0x240000f8
 8001190:	0800c898 	.word	0x0800c898
 8001194:	24000420 	.word	0x24000420
 8001198:	240003f8 	.word	0x240003f8
 800119c:	2400048c 	.word	0x2400048c

080011a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b09c      	sub	sp, #112	@ 0x70
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011aa:	224c      	movs	r2, #76	@ 0x4c
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f00a fe4c 	bl	800be4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2220      	movs	r2, #32
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f00a fe46 	bl	800be4c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011c0:	2002      	movs	r0, #2
 80011c2:	f005 f911 	bl	80063e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4b32      	ldr	r3, [pc, #200]	@ (8001294 <_Z18SystemClock_Configv+0xf4>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4a31      	ldr	r2, [pc, #196]	@ (8001294 <_Z18SystemClock_Configv+0xf4>)
 80011d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011d4:	6193      	str	r3, [r2, #24]
 80011d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001294 <_Z18SystemClock_Configv+0xf4>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011e2:	bf00      	nop
 80011e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001294 <_Z18SystemClock_Configv+0xf4>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011f0:	bf14      	ite	ne
 80011f2:	2301      	movne	r3, #1
 80011f4:	2300      	moveq	r3, #0
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f3      	bne.n	80011e4 <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011fc:	2301      	movs	r3, #1
 80011fe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001200:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001204:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001206:	2302      	movs	r3, #2
 8001208:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800120a:	2302      	movs	r3, #2
 800120c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800120e:	2302      	movs	r3, #2
 8001210:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001212:	232c      	movs	r3, #44	@ 0x2c
 8001214:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001216:	2301      	movs	r3, #1
 8001218:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800121a:	2304      	movs	r3, #4
 800121c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800121e:	2302      	movs	r3, #2
 8001220:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001222:	230c      	movs	r3, #12
 8001224:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001226:	2300      	movs	r3, #0
 8001228:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001232:	4618      	mov	r0, r3
 8001234:	f005 f912 	bl	800645c <HAL_RCC_OscConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	bf14      	ite	ne
 800123e:	2301      	movne	r3, #1
 8001240:	2300      	moveq	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8001248:	f000 fd6c 	bl	8001d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	233f      	movs	r3, #63	@ 0x3f
 800124e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001250:	2303      	movs	r3, #3
 8001252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001258:	2308      	movs	r3, #8
 800125a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800125c:	2340      	movs	r3, #64	@ 0x40
 800125e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001260:	2340      	movs	r3, #64	@ 0x40
 8001262:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001264:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001268:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800126a:	2340      	movs	r3, #64	@ 0x40
 800126c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2103      	movs	r1, #3
 8001272:	4618      	mov	r0, r3
 8001274:	f005 fccc 	bl	8006c10 <HAL_RCC_ClockConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	bf14      	ite	ne
 800127e:	2301      	movne	r3, #1
 8001280:	2300      	moveq	r3, #0
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 8001288:	f000 fd4c 	bl	8001d24 <Error_Handler>
  }
}
 800128c:	bf00      	nop
 800128e:	3770      	adds	r7, #112	@ 0x70
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	58024800 	.word	0x58024800

08001298 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b0ae      	sub	sp, #184	@ 0xb8
 800129c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800129e:	463b      	mov	r3, r7
 80012a0:	22b8      	movs	r2, #184	@ 0xb8
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f00a fdd1 	bl	800be4c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012aa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80012ae:	f04f 0300 	mov.w	r3, #0
 80012b2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80012b6:	2302      	movs	r3, #2
 80012b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80012ba:	2310      	movs	r3, #16
 80012bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80012be:	2302      	movs	r3, #2
 80012c0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012c2:	2302      	movs	r3, #2
 80012c4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80012ca:	23c0      	movs	r3, #192	@ 0xc0
 80012cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	4618      	mov	r0, r3
 80012e0:	f006 f822 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	bf14      	ite	ne
 80012ea:	2301      	movne	r3, #1
 80012ec:	2300      	moveq	r3, #0
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 80012f4:	f000 fd16 	bl	8001d24 <Error_Handler>
  }
}
 80012f8:	bf00      	nop
 80012fa:	37b8      	adds	r7, #184	@ 0xb8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	@ 0x30
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001312:	463b      	mov	r3, r7
 8001314:	2224      	movs	r2, #36	@ 0x24
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f00a fd97 	bl	800be4c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800131e:	4b3a      	ldr	r3, [pc, #232]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 8001320:	4a3a      	ldr	r2, [pc, #232]	@ (800140c <_ZL12MX_ADC1_Initv+0x10c>)
 8001322:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001324:	4b38      	ldr	r3, [pc, #224]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 8001326:	2200      	movs	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800132a:	4b37      	ldr	r3, [pc, #220]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 800132c:	2208      	movs	r2, #8
 800132e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001330:	4b35      	ldr	r3, [pc, #212]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001336:	4b34      	ldr	r3, [pc, #208]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 8001338:	2204      	movs	r2, #4
 800133a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800133c:	4b32      	ldr	r3, [pc, #200]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 800133e:	2200      	movs	r2, #0
 8001340:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001342:	4b31      	ldr	r3, [pc, #196]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 8001344:	2200      	movs	r2, #0
 8001346:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001348:	4b2f      	ldr	r3, [pc, #188]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 800134a:	2201      	movs	r2, #1
 800134c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800134e:	4b2e      	ldr	r3, [pc, #184]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001356:	4b2c      	ldr	r3, [pc, #176]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 8001358:	2200      	movs	r2, #0
 800135a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800135c:	4b2a      	ldr	r3, [pc, #168]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 800135e:	2200      	movs	r2, #0
 8001360:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001362:	4b29      	ldr	r3, [pc, #164]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 8001364:	2200      	movs	r2, #0
 8001366:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001368:	4b27      	ldr	r3, [pc, #156]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 800136a:	2200      	movs	r2, #0
 800136c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800136e:	4b26      	ldr	r3, [pc, #152]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 8001370:	2200      	movs	r2, #0
 8001372:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001374:	4b24      	ldr	r3, [pc, #144]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 800137e:	2201      	movs	r2, #1
 8001380:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001382:	4821      	ldr	r0, [pc, #132]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 8001384:	f001 ff00 	bl	8003188 <HAL_ADC_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	bf14      	ite	ne
 800138e:	2301      	movne	r3, #1
 8001390:	2300      	moveq	r3, #0
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8001398:	f000 fcc4 	bl	8001d24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a4:	4619      	mov	r1, r3
 80013a6:	4818      	ldr	r0, [pc, #96]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 80013a8:	f003 fa84 	bl	80048b4 <HAL_ADCEx_MultiModeConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	bf14      	ite	ne
 80013b2:	2301      	movne	r3, #1
 80013b4:	2300      	moveq	r3, #0
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 80013bc:	f000 fcb2 	bl	8001d24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013c0:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <_ZL12MX_ADC1_Initv+0x110>)
 80013c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013c4:	2306      	movs	r3, #6
 80013c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013cc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80013d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013d2:	2304      	movs	r3, #4
 80013d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	4619      	mov	r1, r3
 80013e4:	4808      	ldr	r0, [pc, #32]	@ (8001408 <_ZL12MX_ADC1_Initv+0x108>)
 80013e6:	f002 fad7 	bl	8003998 <HAL_ADC_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf14      	ite	ne
 80013f0:	2301      	movne	r3, #1
 80013f2:	2300      	moveq	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <_ZL12MX_ADC1_Initv+0xfe>
  {
    Error_Handler();
 80013fa:	f000 fc93 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	3730      	adds	r7, #48	@ 0x30
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	24000088 	.word	0x24000088
 800140c:	40022000 	.word	0x40022000
 8001410:	08600004 	.word	0x08600004

08001414 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	@ 0x28
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2224      	movs	r2, #36	@ 0x24
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f00a fd13 	bl	800be4c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001426:	4b35      	ldr	r3, [pc, #212]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 8001428:	4a35      	ldr	r2, [pc, #212]	@ (8001500 <_ZL12MX_ADC3_Initv+0xec>)
 800142a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800142c:	4b33      	ldr	r3, [pc, #204]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 8001432:	4b32      	ldr	r3, [pc, #200]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 8001434:	220c      	movs	r2, #12
 8001436:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001438:	4b30      	ldr	r3, [pc, #192]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800143e:	4b2f      	ldr	r3, [pc, #188]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001444:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 8001446:	2204      	movs	r2, #4
 8001448:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800144a:	4b2c      	ldr	r3, [pc, #176]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 800144c:	2200      	movs	r2, #0
 800144e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001450:	4b2a      	ldr	r3, [pc, #168]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 8001452:	2200      	movs	r2, #0
 8001454:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001456:	4b29      	ldr	r3, [pc, #164]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 8001458:	2201      	movs	r2, #1
 800145a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800145c:	4b27      	ldr	r3, [pc, #156]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001464:	4b25      	ldr	r3, [pc, #148]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 8001466:	2200      	movs	r2, #0
 8001468:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800146a:	4b24      	ldr	r3, [pc, #144]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 800146c:	2200      	movs	r2, #0
 800146e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001470:	4b22      	ldr	r3, [pc, #136]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001478:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 800147a:	2200      	movs	r2, #0
 800147c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800147e:	4b1f      	ldr	r3, [pc, #124]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 8001480:	2200      	movs	r2, #0
 8001482:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001484:	4b1d      	ldr	r3, [pc, #116]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 8001486:	2200      	movs	r2, #0
 8001488:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800148a:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 800148c:	2200      	movs	r2, #0
 800148e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001490:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8001498:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 800149a:	2200      	movs	r2, #0
 800149c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800149e:	4817      	ldr	r0, [pc, #92]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 80014a0:	f001 fe72 	bl	8003188 <HAL_ADC_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	bf14      	ite	ne
 80014aa:	2301      	movne	r3, #1
 80014ac:	2300      	moveq	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 80014b4:	f000 fc36 	bl	8001d24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <_ZL12MX_ADC3_Initv+0xf0>)
 80014ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014bc:	2306      	movs	r3, #6
 80014be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014c4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80014c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014ca:	2304      	movs	r3, #4
 80014cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	4619      	mov	r1, r3
 80014da:	4808      	ldr	r0, [pc, #32]	@ (80014fc <_ZL12MX_ADC3_Initv+0xe8>)
 80014dc:	f002 fa5c 	bl	8003998 <HAL_ADC_ConfigChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	bf14      	ite	ne
 80014e6:	2301      	movne	r3, #1
 80014e8:	2300      	moveq	r3, #0
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 80014f0:	f000 fc18 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	3728      	adds	r7, #40	@ 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	240000f8 	.word	0x240000f8
 8001500:	58026000 	.word	0x58026000
 8001504:	1d500080 	.word	0x1d500080

08001508 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800150e:	4b41      	ldr	r3, [pc, #260]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001510:	4a41      	ldr	r2, [pc, #260]	@ (8001618 <_ZL14MX_FDCAN1_Initv+0x110>)
 8001512:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001514:	4b3f      	ldr	r3, [pc, #252]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001516:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800151a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800151c:	4b3d      	ldr	r3, [pc, #244]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001522:	4b3c      	ldr	r3, [pc, #240]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001524:	2200      	movs	r2, #0
 8001526:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001528:	4b3a      	ldr	r3, [pc, #232]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800152a:	2200      	movs	r2, #0
 800152c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800152e:	4b39      	ldr	r3, [pc, #228]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001530:	2200      	movs	r2, #0
 8001532:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 8001534:	4b37      	ldr	r3, [pc, #220]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001536:	2203      	movs	r2, #3
 8001538:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800153a:	4b36      	ldr	r3, [pc, #216]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800153c:	2201      	movs	r2, #1
 800153e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 8001540:	4b34      	ldr	r3, [pc, #208]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001542:	220a      	movs	r2, #10
 8001544:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8001546:	4b33      	ldr	r3, [pc, #204]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001548:	2205      	movs	r2, #5
 800154a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800154c:	4b31      	ldr	r3, [pc, #196]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800154e:	2201      	movs	r2, #1
 8001550:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001552:	4b30      	ldr	r3, [pc, #192]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001554:	2201      	movs	r2, #1
 8001556:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001558:	4b2e      	ldr	r3, [pc, #184]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800155a:	2201      	movs	r2, #1
 800155c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800155e:	4b2d      	ldr	r3, [pc, #180]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001560:	2201      	movs	r2, #1
 8001562:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001564:	4b2b      	ldr	r3, [pc, #172]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001566:	2200      	movs	r2, #0
 8001568:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800156a:	4b2a      	ldr	r3, [pc, #168]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800156c:	2200      	movs	r2, #0
 800156e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 8001570:	4b28      	ldr	r3, [pc, #160]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001572:	2205      	movs	r2, #5
 8001574:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8001576:	4b27      	ldr	r3, [pc, #156]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001578:	2220      	movs	r2, #32
 800157a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800157c:	4b25      	ldr	r3, [pc, #148]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800157e:	2204      	movs	r2, #4
 8001580:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8001582:	4b24      	ldr	r3, [pc, #144]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001584:	2220      	movs	r2, #32
 8001586:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001588:	4b22      	ldr	r3, [pc, #136]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800158a:	2204      	movs	r2, #4
 800158c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 800158e:	4b21      	ldr	r3, [pc, #132]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001590:	2201      	movs	r2, #1
 8001592:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001594:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001596:	2204      	movs	r2, #4
 8001598:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 800159a:	4b1e      	ldr	r3, [pc, #120]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800159c:	2201      	movs	r2, #1
 800159e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 80015a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80015a2:	2220      	movs	r2, #32
 80015a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80015a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80015a8:	2220      	movs	r2, #32
 80015aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80015ac:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80015b2:	4b18      	ldr	r3, [pc, #96]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80015b4:	2204      	movs	r2, #4
 80015b6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80015b8:	4816      	ldr	r0, [pc, #88]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80015ba:	f003 fb6d 	bl	8004c98 <HAL_FDCAN_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bf14      	ite	ne
 80015c4:	2301      	movne	r3, #1
 80015c6:	2300      	moveq	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 80015ce:	f000 fba9 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80015d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015d6:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80015dc:	2302      	movs	r3, #2
 80015de:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80015e0:	2301      	movs	r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80015ec:	463b      	mov	r3, r7
 80015ee:	4619      	mov	r1, r3
 80015f0:	4808      	ldr	r0, [pc, #32]	@ (8001614 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80015f2:	f003 fd2f 	bl	8005054 <HAL_FDCAN_ConfigFilter>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf14      	ite	ne
 80015fc:	2301      	movne	r3, #1
 80015fe:	2300      	moveq	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 8001606:	f000 fb8d 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	3720      	adds	r7, #32
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	24000168 	.word	0x24000168
 8001618:	4000a000 	.word	0x4000a000

0800161c <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001622:	4b41      	ldr	r3, [pc, #260]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001624:	4a41      	ldr	r2, [pc, #260]	@ (800172c <_ZL14MX_FDCAN2_Initv+0x110>)
 8001626:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001628:	4b3f      	ldr	r3, [pc, #252]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800162a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800162e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001630:	4b3d      	ldr	r3, [pc, #244]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001636:	4b3c      	ldr	r3, [pc, #240]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001638:	2200      	movs	r2, #0
 800163a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800163c:	4b3a      	ldr	r3, [pc, #232]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800163e:	2200      	movs	r2, #0
 8001640:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001642:	4b39      	ldr	r3, [pc, #228]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001644:	2200      	movs	r2, #0
 8001646:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 3;
 8001648:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800164a:	2203      	movs	r2, #3
 800164c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800164e:	4b36      	ldr	r3, [pc, #216]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001650:	2201      	movs	r2, #1
 8001652:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 8001654:	4b34      	ldr	r3, [pc, #208]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001656:	220a      	movs	r2, #10
 8001658:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 800165a:	4b33      	ldr	r3, [pc, #204]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800165c:	2205      	movs	r2, #5
 800165e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001660:	4b31      	ldr	r3, [pc, #196]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001662:	2201      	movs	r2, #1
 8001664:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001666:	4b30      	ldr	r3, [pc, #192]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001668:	2201      	movs	r2, #1
 800166a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800166c:	4b2e      	ldr	r3, [pc, #184]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800166e:	2201      	movs	r2, #1
 8001670:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001672:	4b2d      	ldr	r3, [pc, #180]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001674:	2201      	movs	r2, #1
 8001676:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001678:	4b2b      	ldr	r3, [pc, #172]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800167a:	2200      	movs	r2, #0
 800167c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800167e:	4b2a      	ldr	r3, [pc, #168]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001680:	2200      	movs	r2, #0
 8001682:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 8001684:	4b28      	ldr	r3, [pc, #160]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001686:	2205      	movs	r2, #5
 8001688:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 800168a:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800168c:	2220      	movs	r2, #32
 800168e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001690:	4b25      	ldr	r3, [pc, #148]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001692:	2204      	movs	r2, #4
 8001694:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 8001696:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001698:	2220      	movs	r2, #32
 800169a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800169c:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800169e:	2204      	movs	r2, #4
 80016a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 80016a2:	4b21      	ldr	r3, [pc, #132]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80016a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80016aa:	2204      	movs	r2, #4
 80016ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 80016ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 80016b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80016b6:	2220      	movs	r2, #32
 80016b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80016bc:	2220      	movs	r2, #32
 80016be:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80016c0:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80016c6:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80016c8:	2204      	movs	r2, #4
 80016ca:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80016cc:	4816      	ldr	r0, [pc, #88]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80016ce:	f003 fae3 	bl	8004c98 <HAL_FDCAN_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf14      	ite	ne
 80016d8:	2301      	movne	r3, #1
 80016da:	2300      	moveq	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 80016e2:	f000 fb1f 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80016e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016ea:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80016f0:	2302      	movs	r3, #2
 80016f2:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80016f4:	2301      	movs	r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 80016f8:	2310      	movs	r3, #16
 80016fa:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 80016fc:	2310      	movs	r3, #16
 80016fe:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001700:	463b      	mov	r3, r7
 8001702:	4619      	mov	r1, r3
 8001704:	4808      	ldr	r0, [pc, #32]	@ (8001728 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001706:	f003 fca5 	bl	8005054 <HAL_FDCAN_ConfigFilter>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf14      	ite	ne
 8001710:	2301      	movne	r3, #1
 8001712:	2300      	moveq	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 800171a:	f000 fb03 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	3720      	adds	r7, #32
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	24000208 	.word	0x24000208
 800172c:	4000a400 	.word	0x4000a400

08001730 <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b094      	sub	sp, #80	@ 0x50
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001736:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	615a      	str	r2, [r3, #20]
 8001748:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800174a:	463b      	mov	r3, r7
 800174c:	2234      	movs	r2, #52	@ 0x34
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f00a fb7b 	bl	800be4c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001756:	4b3b      	ldr	r3, [pc, #236]	@ (8001844 <_ZL13MX_TIM17_Initv+0x114>)
 8001758:	4a3b      	ldr	r2, [pc, #236]	@ (8001848 <_ZL13MX_TIM17_Initv+0x118>)
 800175a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800175c:	4b39      	ldr	r3, [pc, #228]	@ (8001844 <_ZL13MX_TIM17_Initv+0x114>)
 800175e:	2200      	movs	r2, #0
 8001760:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001762:	4b38      	ldr	r3, [pc, #224]	@ (8001844 <_ZL13MX_TIM17_Initv+0x114>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10559;
 8001768:	4b36      	ldr	r3, [pc, #216]	@ (8001844 <_ZL13MX_TIM17_Initv+0x114>)
 800176a:	f642 123f 	movw	r2, #10559	@ 0x293f
 800176e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001770:	4b34      	ldr	r3, [pc, #208]	@ (8001844 <_ZL13MX_TIM17_Initv+0x114>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001776:	4b33      	ldr	r3, [pc, #204]	@ (8001844 <_ZL13MX_TIM17_Initv+0x114>)
 8001778:	2200      	movs	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800177c:	4b31      	ldr	r3, [pc, #196]	@ (8001844 <_ZL13MX_TIM17_Initv+0x114>)
 800177e:	2280      	movs	r2, #128	@ 0x80
 8001780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001782:	4830      	ldr	r0, [pc, #192]	@ (8001844 <_ZL13MX_TIM17_Initv+0x114>)
 8001784:	f008 f9b6 	bl	8009af4 <HAL_TIM_Base_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	bf14      	ite	ne
 800178e:	2301      	movne	r3, #1
 8001790:	2300      	moveq	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <_ZL13MX_TIM17_Initv+0x6c>
  {
    Error_Handler();
 8001798:	f000 fac4 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800179c:	4829      	ldr	r0, [pc, #164]	@ (8001844 <_ZL13MX_TIM17_Initv+0x114>)
 800179e:	f008 fa00 	bl	8009ba2 <HAL_TIM_PWM_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <_ZL13MX_TIM17_Initv+0x86>
  {
    Error_Handler();
 80017b2:	f000 fab7 	bl	8001d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b6:	2360      	movs	r3, #96	@ 0x60
 80017b8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017be:	2300      	movs	r3, #0
 80017c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017c2:	2300      	movs	r3, #0
 80017c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017d6:	2200      	movs	r2, #0
 80017d8:	4619      	mov	r1, r3
 80017da:	481a      	ldr	r0, [pc, #104]	@ (8001844 <_ZL13MX_TIM17_Initv+0x114>)
 80017dc:	f008 fb5e 	bl	8009e9c <HAL_TIM_PWM_ConfigChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bf14      	ite	ne
 80017e6:	2301      	movne	r3, #1
 80017e8:	2300      	moveq	r3, #0
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <_ZL13MX_TIM17_Initv+0xc4>
  {
    Error_Handler();
 80017f0:	f000 fa98 	bl	8001d24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001808:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800180c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001816:	463b      	mov	r3, r7
 8001818:	4619      	mov	r1, r3
 800181a:	480a      	ldr	r0, [pc, #40]	@ (8001844 <_ZL13MX_TIM17_Initv+0x114>)
 800181c:	f008 fffa 	bl	800a814 <HAL_TIMEx_ConfigBreakDeadTime>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	bf14      	ite	ne
 8001826:	2301      	movne	r3, #1
 8001828:	2300      	moveq	r3, #0
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <_ZL13MX_TIM17_Initv+0x104>
  {
    Error_Handler();
 8001830:	f000 fa78 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001834:	4803      	ldr	r0, [pc, #12]	@ (8001844 <_ZL13MX_TIM17_Initv+0x114>)
 8001836:	f000 ff39 	bl	80026ac <HAL_TIM_MspPostInit>

}
 800183a:	bf00      	nop
 800183c:	3750      	adds	r7, #80	@ 0x50
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	240002a8 	.word	0x240002a8
 8001848:	40014800 	.word	0x40014800

0800184c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001850:	4b2c      	ldr	r3, [pc, #176]	@ (8001904 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001852:	4a2d      	ldr	r2, [pc, #180]	@ (8001908 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001856:	4b2b      	ldr	r3, [pc, #172]	@ (8001904 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800185c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800185e:	4b29      	ldr	r3, [pc, #164]	@ (8001904 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001864:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800186a:	4b26      	ldr	r3, [pc, #152]	@ (8001904 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001870:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001872:	220c      	movs	r2, #12
 8001874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001876:	4b23      	ldr	r3, [pc, #140]	@ (8001904 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800187c:	4b21      	ldr	r3, [pc, #132]	@ (8001904 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001882:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001888:	4b1e      	ldr	r3, [pc, #120]	@ (8001904 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800188a:	2200      	movs	r2, #0
 800188c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800188e:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001890:	2200      	movs	r2, #0
 8001892:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001894:	481b      	ldr	r0, [pc, #108]	@ (8001904 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001896:	f009 f849 	bl	800a92c <HAL_UART_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf14      	ite	ne
 80018a0:	2301      	movne	r3, #1
 80018a2:	2300      	moveq	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 80018aa:	f000 fa3b 	bl	8001d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ae:	2100      	movs	r1, #0
 80018b0:	4814      	ldr	r0, [pc, #80]	@ (8001904 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018b2:	f00a f9de 	bl	800bc72 <HAL_UARTEx_SetTxFifoThreshold>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf14      	ite	ne
 80018bc:	2301      	movne	r3, #1
 80018be:	2300      	moveq	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 80018c6:	f000 fa2d 	bl	8001d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ca:	2100      	movs	r1, #0
 80018cc:	480d      	ldr	r0, [pc, #52]	@ (8001904 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018ce:	f00a fa0e 	bl	800bcee <HAL_UARTEx_SetRxFifoThreshold>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf14      	ite	ne
 80018d8:	2301      	movne	r3, #1
 80018da:	2300      	moveq	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80018e2:	f000 fa1f 	bl	8001d24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018e6:	4807      	ldr	r0, [pc, #28]	@ (8001904 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018e8:	f00a f98a 	bl	800bc00 <HAL_UARTEx_DisableFifoMode>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bf14      	ite	ne
 80018f2:	2301      	movne	r3, #1
 80018f4:	2300      	moveq	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80018fc:	f000 fa12 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	240002f4 	.word	0x240002f4
 8001908:	40004400 	.word	0x40004400

0800190c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08c      	sub	sp, #48	@ 0x30
 8001910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001922:	4b57      	ldr	r3, [pc, #348]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 8001924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001928:	4a55      	ldr	r2, [pc, #340]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 800192a:	f043 0320 	orr.w	r3, r3, #32
 800192e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001932:	4b53      	ldr	r3, [pc, #332]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 8001934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001938:	f003 0320 	and.w	r3, r3, #32
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001940:	4b4f      	ldr	r3, [pc, #316]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 8001942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001946:	4a4e      	ldr	r2, [pc, #312]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 8001948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800194c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001950:	4b4b      	ldr	r3, [pc, #300]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 8001952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	4b48      	ldr	r3, [pc, #288]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 8001960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001964:	4a46      	ldr	r2, [pc, #280]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800196e:	4b44      	ldr	r3, [pc, #272]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 8001970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800197c:	4b40      	ldr	r3, [pc, #256]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 800197e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001982:	4a3f      	ldr	r2, [pc, #252]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 8001984:	f043 0310 	orr.w	r3, r3, #16
 8001988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800198c:	4b3c      	ldr	r3, [pc, #240]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 800198e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199a:	4b39      	ldr	r3, [pc, #228]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a0:	4a37      	ldr	r2, [pc, #220]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019aa:	4b35      	ldr	r3, [pc, #212]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019b8:	4b31      	ldr	r3, [pc, #196]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 80019ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019be:	4a30      	ldr	r2, [pc, #192]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 80019c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 80019ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 80019d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019dc:	4a28      	ldr	r2, [pc, #160]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 80019de:	f043 0308 	orr.w	r3, r3, #8
 80019e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019e6:	4b26      	ldr	r3, [pc, #152]	@ (8001a80 <_ZL12MX_GPIO_Initv+0x174>)
 80019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019fa:	4822      	ldr	r0, [pc, #136]	@ (8001a84 <_ZL12MX_GPIO_Initv+0x178>)
 80019fc:	f004 fcda 	bl	80063b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2138      	movs	r1, #56	@ 0x38
 8001a04:	4820      	ldr	r0, [pc, #128]	@ (8001a88 <_ZL12MX_GPIO_Initv+0x17c>)
 8001a06:	f004 fcd5 	bl	80063b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 8001a0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 031c 	add.w	r3, r7, #28
 8001a20:	4619      	mov	r1, r3
 8001a22:	4818      	ldr	r0, [pc, #96]	@ (8001a84 <_ZL12MX_GPIO_Initv+0x178>)
 8001a24:	f004 fb06 	bl	8006034 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 8001a28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4813      	ldr	r0, [pc, #76]	@ (8001a8c <_ZL12MX_GPIO_Initv+0x180>)
 8001a3e:	f004 faf9 	bl	8006034 <HAL_GPIO_Init>

  /*Configure GPIO pin : Charge_Button_Pin */
  GPIO_InitStruct.Pin = Charge_Button_Pin;
 8001a42:	2380      	movs	r3, #128	@ 0x80
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Charge_Button_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	4619      	mov	r1, r3
 8001a54:	480e      	ldr	r0, [pc, #56]	@ (8001a90 <_ZL12MX_GPIO_Initv+0x184>)
 8001a56:	f004 faed 	bl	8006034 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 8001a5a:	2338      	movs	r3, #56	@ 0x38
 8001a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4805      	ldr	r0, [pc, #20]	@ (8001a88 <_ZL12MX_GPIO_Initv+0x17c>)
 8001a72:	f004 fadf 	bl	8006034 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a76:	bf00      	nop
 8001a78:	3730      	adds	r7, #48	@ 0x30
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	58024400 	.word	0x58024400
 8001a84:	58021400 	.word	0x58021400
 8001a88:	58020c00 	.word	0x58020c00
 8001a8c:	58021000 	.word	0x58021000
 8001a90:	58021800 	.word	0x58021800

08001a94 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d04b      	beq.n	8001b40 <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 8001aa8:	4b27      	ldr	r3, [pc, #156]	@ (8001b48 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001aaa:	4a28      	ldr	r2, [pc, #160]	@ (8001b4c <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001aac:	2140      	movs	r1, #64	@ 0x40
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f003 fbcc 	bl	800524c <HAL_FDCAN_GetRxMessage>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	bf0c      	ite	eq
 8001aba:	2301      	moveq	r3, #1
 8001abc:	2300      	movne	r3, #0
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d02e      	beq.n	8001b22 <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 8001ac4:	4b21      	ldr	r3, [pc, #132]	@ (8001b4c <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a21      	ldr	r2, [pc, #132]	@ (8001b50 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001aca:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001acc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b4c <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b50 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001ad4:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	e00c      	b.n	8001af6 <HAL_FDCAN_RxFifo0Callback+0x62>
 8001adc:	4a1a      	ldr	r2, [pc, #104]	@ (8001b48 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	7819      	ldrb	r1, [r3, #0]
 8001ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8001b50 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4413      	add	r3, r2
 8001aea:	3305      	adds	r3, #5
 8001aec:	460a      	mov	r2, r1
 8001aee:	701a      	strb	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	3301      	adds	r3, #1
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b07      	cmp	r3, #7
 8001afa:	ddef      	ble.n	8001adc <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001afc:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 8001b02:	f001 f80f 	bl	8002b24 <HAL_GetTick>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4a11      	ldr	r2, [pc, #68]	@ (8001b50 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001b0a:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 8001b0c:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001b0e:	466c      	mov	r4, sp
 8001b10:	f103 0210 	add.w	r2, r3, #16
 8001b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b18:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b1e:	f000 fb3d 	bl	800219c <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001b22:	2200      	movs	r2, #0
 8001b24:	2101      	movs	r1, #1
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f003 fcfc 	bl	8005524 <HAL_FDCAN_ActivateNotification>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	bf14      	ite	ne
 8001b32:	2301      	movne	r3, #1
 8001b34:	2300      	moveq	r3, #0
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 8001b3c:	f000 f8f2 	bl	8001d24 <Error_Handler>
    }
  }
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd90      	pop	{r4, r7, pc}
 8001b48:	24000420 	.word	0x24000420
 8001b4c:	240003d0 	.word	0x240003d0
 8001b50:	240004a4 	.word	0x240004a4

08001b54 <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001b62:	4a0b      	ldr	r2, [pc, #44]	@ (8001b90 <module_send_message_CAN1+0x3c>)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 8001b68:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <module_send_message_CAN1+0x3c>)
 8001b6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b6e:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	4a07      	ldr	r2, [pc, #28]	@ (8001b90 <module_send_message_CAN1+0x3c>)
 8001b74:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	4905      	ldr	r1, [pc, #20]	@ (8001b90 <module_send_message_CAN1+0x3c>)
 8001b7a:	4806      	ldr	r0, [pc, #24]	@ (8001b94 <module_send_message_CAN1+0x40>)
 8001b7c:	f003 fb0b 	bl	8005196 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001b80:	4603      	mov	r3, r0
 8001b82:	75fb      	strb	r3, [r7, #23]

	return status;
 8001b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	24000388 	.word	0x24000388
 8001b94:	24000168 	.word	0x24000168

08001b98 <module_send_message_NoExtId_CAN1>:

//NO extended ID
HAL_StatusTypeDef module_send_message_NoExtId_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd0 <module_send_message_NoExtId_CAN1+0x38>)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_STANDARD_ID;
 8001bac:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <module_send_message_NoExtId_CAN1+0x38>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	4a06      	ldr	r2, [pc, #24]	@ (8001bd0 <module_send_message_NoExtId_CAN1+0x38>)
 8001bb6:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	4905      	ldr	r1, [pc, #20]	@ (8001bd0 <module_send_message_NoExtId_CAN1+0x38>)
 8001bbc:	4805      	ldr	r0, [pc, #20]	@ (8001bd4 <module_send_message_NoExtId_CAN1+0x3c>)
 8001bbe:	f003 faea 	bl	8005196 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	75fb      	strb	r3, [r7, #23]

	return status;
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	24000388 	.word	0x24000388
 8001bd4:	24000168 	.word	0x24000168

08001bd8 <module_send_message_CAN2>:

HAL_StatusTypeDef module_send_message_CAN2(uint32_t id, uint8_t* data, uint8_t length) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	4613      	mov	r3, r2
 8001be4:	71fb      	strb	r3, [r7, #7]
	TxHeader_bms.Identifier = id;
 8001be6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <module_send_message_CAN2+0x38>)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6013      	str	r3, [r2, #0]
	TxHeader_bms.IdType = FDCAN_STANDARD_ID;
 8001bec:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <module_send_message_CAN2+0x38>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	605a      	str	r2, [r3, #4]
	TxHeader_bms.DataLength = length;
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	4a06      	ldr	r2, [pc, #24]	@ (8001c10 <module_send_message_CAN2+0x38>)
 8001bf6:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	4905      	ldr	r1, [pc, #20]	@ (8001c10 <module_send_message_CAN2+0x38>)
 8001bfc:	4805      	ldr	r0, [pc, #20]	@ (8001c14 <module_send_message_CAN2+0x3c>)
 8001bfe:	f003 faca 	bl	8005196 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001c02:	4603      	mov	r3, r0
 8001c04:	75fb      	strb	r3, [r7, #23]

	return status;
 8001c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	240003ac 	.word	0x240003ac
 8001c14:	24000208 	.word	0x24000208

08001c18 <print>:

void print(char uart_buffer[]){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4909      	ldr	r1, [pc, #36]	@ (8001c48 <print+0x30>)
 8001c24:	4809      	ldr	r0, [pc, #36]	@ (8001c4c <print+0x34>)
 8001c26:	f00a f8ef 	bl	800be08 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001c2a:	4808      	ldr	r0, [pc, #32]	@ (8001c4c <print+0x34>)
 8001c2c:	f7fe fb70 	bl	8000310 <strlen>
 8001c30:	4603      	mov	r3, r0
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	f04f 33ff 	mov.w	r3, #4294967295
 8001c38:	4904      	ldr	r1, [pc, #16]	@ (8001c4c <print+0x34>)
 8001c3a:	4805      	ldr	r0, [pc, #20]	@ (8001c50 <print+0x38>)
 8001c3c:	f008 fec6 	bl	800a9cc <HAL_UART_Transmit>
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	0800c8a8 	.word	0x0800c8a8
 8001c4c:	24000428 	.word	0x24000428
 8001c50:	240002f4 	.word	0x240002f4

08001c54 <printValue>:
void printnl(char uart_buffer[]){
	sprintf(uart_msg, "%s", uart_buffer);
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
}

void printValue(int value){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	4909      	ldr	r1, [pc, #36]	@ (8001c84 <printValue+0x30>)
 8001c60:	4809      	ldr	r0, [pc, #36]	@ (8001c88 <printValue+0x34>)
 8001c62:	f00a f8d1 	bl	800be08 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001c66:	4808      	ldr	r0, [pc, #32]	@ (8001c88 <printValue+0x34>)
 8001c68:	f7fe fb52 	bl	8000310 <strlen>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295
 8001c74:	4904      	ldr	r1, [pc, #16]	@ (8001c88 <printValue+0x34>)
 8001c76:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <printValue+0x38>)
 8001c78:	f008 fea8 	bl	800a9cc <HAL_UART_Transmit>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	0800c8b4 	.word	0x0800c8b4
 8001c88:	24000428 	.word	0x24000428
 8001c8c:	240002f4 	.word	0x240002f4

08001c90 <readAnalogValue>:

HAL_UART_StateTypeDef getUARTState(){
	return HAL_UART_GetState(&huart2);
}

float readAnalogValue(void){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
	analogValue = HAL_ADC_GetValue(&hadc3);
	HAL_ADC_Stop(&hadc3);
	return analogValue;*/


	HAL_ADC_Start(&hadc1);
 8001c96:	4820      	ldr	r0, [pc, #128]	@ (8001d18 <readAnalogValue+0x88>)
 8001c98:	f001 fc7e 	bl	8003598 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	481d      	ldr	r0, [pc, #116]	@ (8001d18 <readAnalogValue+0x88>)
 8001ca2:	f001 fd77 	bl	8003794 <HAL_ADC_PollForConversion>

	float adc_value, V_adc;
	int current;

	adc_value = HAL_ADC_GetValue(&hadc1);
 8001ca6:	481c      	ldr	r0, [pc, #112]	@ (8001d18 <readAnalogValue+0x88>)
 8001ca8:	f001 fe68 	bl	800397c <HAL_ADC_GetValue>
 8001cac:	ee07 0a90 	vmov	s15, r0
 8001cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb4:	edc7 7a03 	vstr	s15, [r7, #12]
	V_adc = (adc_value * 5 / 4095); //12 bits de resolución
 8001cb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cbc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001cc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cc4:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8001d1c <readAnalogValue+0x8c>
 8001cc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ccc:	edc7 7a02 	vstr	s15, [r7, #8]

	current = (3020 - adc_value) * 0.14286;
 8001cd0:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001d20 <readAnalogValue+0x90>
 8001cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ce0:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8001d10 <readAnalogValue+0x80>
 8001ce4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ce8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001cec:	ee17 3a90 	vmov	r3, s15
 8001cf0:	607b      	str	r3, [r7, #4]

	HAL_ADC_Stop(&hadc1);
 8001cf2:	4809      	ldr	r0, [pc, #36]	@ (8001d18 <readAnalogValue+0x88>)
 8001cf4:	f001 fd1a 	bl	800372c <HAL_ADC_Stop>
	return current;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001d02:	eeb0 0a67 	vmov.f32	s0, s15
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	f3af 8000 	nop.w
 8001d10:	89f40a28 	.word	0x89f40a28
 8001d14:	3fc2493c 	.word	0x3fc2493c
 8001d18:	24000088 	.word	0x24000088
 8001d1c:	457ff000 	.word	0x457ff000
 8001d20:	453cc000 	.word	0x453cc000

08001d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d28:	b672      	cpsid	i
}
 8001d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <Error_Handler+0x8>

08001d30 <_Z9get_statev>:
/*********************************************************************************************************
 ** Function name:           get_state
 ** Descriptions:            get the current state
 *********************************************************************************************************/

STATE get_state() {
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
    return state;
 8001d34:	4b03      	ldr	r3, [pc, #12]	@ (8001d44 <_Z9get_statev+0x14>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	24000cf4 	.word	0x24000cf4

08001d48 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08c      	sub	sp, #48	@ 0x30
 8001d4c:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 8001d52:	2300      	movs	r3, #0
 8001d54:	62bb      	str	r3, [r7, #40]	@ 0x28
	int state_precharge = 0; // 0 means open, 1 closed
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	61bb      	str	r3, [r7, #24]
	int flag_current = Current_ERROR_Comunication;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	617b      	str	r3, [r7, #20]


	int gpio_charge = HAL_GPIO_ReadPin(Charge_Button_GPIO_Port, Charge_Button_Pin); // pull-up: 1 = charge started
 8001d62:	2180      	movs	r1, #128	@ 0x80
 8001d64:	48a3      	ldr	r0, [pc, #652]	@ (8001ff4 <_Z12select_statev+0x2ac>)
 8001d66:	f004 fb0d 	bl	8006384 <HAL_GPIO_ReadPin>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	613b      	str	r3, [r7, #16]
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 8001d6e:	f000 fed9 	bl	8002b24 <HAL_GetTick>
 8001d72:	60f8      	str	r0, [r7, #12]
	int time_s = HAL_GetTick();
 8001d74:	f000 fed6 	bl	8002b24 <HAL_GetTick>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60bb      	str	r3, [r7, #8]


	CPU.voltage_acum = 0; // For precharge
 8001d7c:	4b9e      	ldr	r3, [pc, #632]	@ (8001ff8 <_Z12select_statev+0x2b0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	62da      	str	r2, [r3, #44]	@ 0x2c


	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 8001d82:	4b9e      	ldr	r3, [pc, #632]	@ (8001ffc <_Z12select_statev+0x2b4>)
 8001d84:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001d88:	601a      	str	r2, [r3, #0]
	MAX_T = 0;
 8001d8a:	4b9d      	ldr	r3, [pc, #628]	@ (8002000 <_Z12select_statev+0x2b8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
 8001d94:	e06f      	b.n	8001e76 <_Z12select_statev+0x12e>
		BMS[i].voltage_acum = 0;// For precharge
 8001d96:	4a9b      	ldr	r2, [pc, #620]	@ (8002004 <_Z12select_statev+0x2bc>)
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	4413      	add	r3, r2
 8001da4:	338c      	adds	r3, #140	@ 0x8c
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]


		if (BMS[i].query_voltage(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001db0:	fb02 f303 	mul.w	r3, r2, r3
 8001db4:	4a93      	ldr	r2, [pc, #588]	@ (8002004 <_Z12select_statev+0x2bc>)
 8001db6:	4413      	add	r3, r2
 8001db8:	4a93      	ldr	r2, [pc, #588]	@ (8002008 <_Z12select_statev+0x2c0>)
 8001dba:	68f9      	ldr	r1, [r7, #12]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fea7 	bl	8000b10 <_ZN7BMS_MOD13query_voltageEmPc>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf14      	ite	ne
 8001dc8:	2301      	movne	r3, #1
 8001dca:	2300      	moveq	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <_Z12select_statev+0x90>
		{
			//state = error;
			flag_ams_ok = 0;
 8001dd2:	4b8e      	ldr	r3, [pc, #568]	@ (800200c <_Z12select_statev+0x2c4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
		}

		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 8001dd8:	4b87      	ldr	r3, [pc, #540]	@ (8001ff8 <_Z12select_statev+0x2b0>)
 8001dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ddc:	4989      	ldr	r1, [pc, #548]	@ (8002004 <_Z12select_statev+0x2bc>)
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8001de4:	fb00 f303 	mul.w	r3, r0, r3
 8001de8:	440b      	add	r3, r1
 8001dea:	338c      	adds	r3, #140	@ 0x8c
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a81      	ldr	r2, [pc, #516]	@ (8001ff8 <_Z12select_statev+0x2b0>)
 8001df2:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 8001df4:	4a83      	ldr	r2, [pc, #524]	@ (8002004 <_Z12select_statev+0x2bc>)
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001dfc:	fb01 f303 	mul.w	r3, r1, r3
 8001e00:	4413      	add	r3, r2
 8001e02:	3390      	adds	r3, #144	@ 0x90
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	4b7d      	ldr	r3, [pc, #500]	@ (8001ffc <_Z12select_statev+0x2b4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	da0a      	bge.n	8001e24 <_Z12select_statev+0xdc>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 8001e0e:	4a7d      	ldr	r2, [pc, #500]	@ (8002004 <_Z12select_statev+0x2bc>)
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001e16:	fb01 f303 	mul.w	r3, r1, r3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3390      	adds	r3, #144	@ 0x90
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a76      	ldr	r2, [pc, #472]	@ (8001ffc <_Z12select_statev+0x2b4>)
 8001e22:	6013      	str	r3, [r2, #0]


		if (BMS[i].query_temperature(time, buffer) != Temperatures_OK){
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	4a75      	ldr	r2, [pc, #468]	@ (8002004 <_Z12select_statev+0x2bc>)
 8001e30:	4413      	add	r3, r2
 8001e32:	4a75      	ldr	r2, [pc, #468]	@ (8002008 <_Z12select_statev+0x2c0>)
 8001e34:	68f9      	ldr	r1, [r7, #12]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fee5 	bl	8000c06 <_ZN7BMS_MOD17query_temperatureEmPc>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
			//state = error;
		}

		if (BMS[i].MAX_T > MAX_T)
 8001e40:	4a70      	ldr	r2, [pc, #448]	@ (8002004 <_Z12select_statev+0x2bc>)
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001e48:	fb01 f303 	mul.w	r3, r1, r3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	33a0      	adds	r3, #160	@ 0xa0
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	4b6b      	ldr	r3, [pc, #428]	@ (8002000 <_Z12select_statev+0x2b8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	dd0a      	ble.n	8001e70 <_Z12select_statev+0x128>
			MAX_T = BMS[i].MAX_T;
 8001e5a:	4a6a      	ldr	r2, [pc, #424]	@ (8002004 <_Z12select_statev+0x2bc>)
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001e62:	fb01 f303 	mul.w	r3, r1, r3
 8001e66:	4413      	add	r3, r2
 8001e68:	33a0      	adds	r3, #160	@ 0xa0
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a64      	ldr	r2, [pc, #400]	@ (8002000 <_Z12select_statev+0x2b8>)
 8001e6e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	3301      	adds	r3, #1
 8001e74:	623b      	str	r3, [r7, #32]
 8001e76:	4b66      	ldr	r3, [pc, #408]	@ (8002010 <_Z12select_statev+0x2c8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6a3a      	ldr	r2, [r7, #32]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	db8a      	blt.n	8001d96 <_Z12select_statev+0x4e>
	}

	if (time_s > time_sending_minV + 500) {
 8001e80:	4b64      	ldr	r3, [pc, #400]	@ (8002014 <_Z12select_statev+0x2cc>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	dd23      	ble.n	8001ed6 <_Z12select_statev+0x18e>
		message_MINV[1] = MIN_V & 0xFF;
 8001e8e:	4b5b      	ldr	r3, [pc, #364]	@ (8001ffc <_Z12select_statev+0x2b4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b60      	ldr	r3, [pc, #384]	@ (8002018 <_Z12select_statev+0x2d0>)
 8001e96:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 8001e98:	4b58      	ldr	r3, [pc, #352]	@ (8001ffc <_Z12select_statev+0x2b4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	121b      	asrs	r3, r3, #8
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	4b5d      	ldr	r3, [pc, #372]	@ (8002018 <_Z12select_statev+0x2d0>)
 8001ea2:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 8001ea4:	4b57      	ldr	r3, [pc, #348]	@ (8002004 <_Z12select_statev+0x2bc>)
 8001ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d010      	beq.n	8001ed0 <_Z12select_statev+0x188>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 8001eae:	2202      	movs	r2, #2
 8001eb0:	4959      	ldr	r1, [pc, #356]	@ (8002018 <_Z12select_statev+0x2d0>)
 8001eb2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001eb6:	f7ff fe4d 	bl	8001b54 <module_send_message_CAN1>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf14      	ite	ne
 8001ec0:	2301      	movne	r3, #1
 8001ec2:	2300      	moveq	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <_Z12select_statev+0x188>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 8001eca:	4854      	ldr	r0, [pc, #336]	@ (800201c <_Z12select_statev+0x2d4>)
 8001ecc:	f7ff fea4 	bl	8001c18 <print>
		}
		time_sending_minV = time_s;
 8001ed0:	4a50      	ldr	r2, [pc, #320]	@ (8002014 <_Z12select_statev+0x2cc>)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	e00d      	b.n	8001ef8 <_Z12select_statev+0x1b0>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 8001edc:	4b47      	ldr	r3, [pc, #284]	@ (8001ffc <_Z12select_statev+0x2b4>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4948      	ldr	r1, [pc, #288]	@ (8002004 <_Z12select_statev+0x2bc>)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8001ee8:	fb00 f303 	mul.w	r3, r0, r3
 8001eec:	440b      	add	r3, r1
 8001eee:	3394      	adds	r3, #148	@ 0x94
 8001ef0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	4b45      	ldr	r3, [pc, #276]	@ (8002010 <_Z12select_statev+0x2c8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	69fa      	ldr	r2, [r7, #28]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	dbec      	blt.n	8001edc <_Z12select_statev+0x194>

	}


	flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
 8001f02:	4a41      	ldr	r2, [pc, #260]	@ (8002008 <_Z12select_statev+0x2c0>)
 8001f04:	68f9      	ldr	r1, [r7, #12]
 8001f06:	483c      	ldr	r0, [pc, #240]	@ (8001ff8 <_Z12select_statev+0x2b0>)
 8001f08:	f7fe ff64 	bl	8000dd4 <_ZN7CPU_MOD5queryEmPc>
 8001f0c:	61b8      	str	r0, [r7, #24]
	//flag_cpu = CPU_OK;

	flag_current = current.query(time, buffer); //asking current how is it
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4a3d      	ldr	r2, [pc, #244]	@ (8002008 <_Z12select_statev+0x2c0>)
 8001f12:	4619      	mov	r1, r3
 8001f14:	4842      	ldr	r0, [pc, #264]	@ (8002020 <_Z12select_statev+0x2d8>)
 8001f16:	f7fe ffef 	bl	8000ef8 <_ZN11Current_MOD5queryEiPc>
 8001f1a:	6178      	str	r0, [r7, #20]
	print((char*)"voltage acu");
	printValue(CPU.voltage_acum);
	print((char*)"dc bus");
	printValue(CPU.DC_BUS);
	printValue(state);*/
	switch (state) {
 8001f1c:	4b41      	ldr	r3, [pc, #260]	@ (8002024 <_Z12select_statev+0x2dc>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	f200 80ed 	bhi.w	8002100 <_Z12select_statev+0x3b8>
 8001f26:	a201      	add	r2, pc, #4	@ (adr r2, 8001f2c <_Z12select_statev+0x1e4>)
 8001f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2c:	08001f45 	.word	0x08001f45
 8001f30:	08001f87 	.word	0x08001f87
 8001f34:	08001fb9 	.word	0x08001fb9
 8001f38:	08002031 	.word	0x08002031
 8001f3c:	08002081 	.word	0x08002081
 8001f40:	080020cd 	.word	0x080020cd
	case start:
		state_air_n = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_DISCONNECTED);
 8001f50:	2102      	movs	r1, #2
 8001f52:	4829      	ldr	r0, [pc, #164]	@ (8001ff8 <_Z12select_statev+0x2b0>)
 8001f54:	f7fe ff70 	bl	8000e38 <_ZN7CPU_MOD11updateStateEi>
		fan_speed = 0;
 8001f58:	4b33      	ldr	r3, [pc, #204]	@ (8002028 <_Z12select_statev+0x2e0>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 8001f5e:	4b32      	ldr	r3, [pc, #200]	@ (8002028 <_Z12select_statev+0x2e0>)
 8001f60:	881a      	ldrh	r2, [r3, #0]
 8001f62:	4b32      	ldr	r3, [pc, #200]	@ (800202c <_Z12select_statev+0x2e4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	635a      	str	r2, [r3, #52]	@ 0x34
		if(gpio_charge == GPIO_PIN_SET){
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d103      	bne.n	8001f76 <_Z12select_statev+0x22e>
			state = charge;
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002024 <_Z12select_statev+0x2dc>)
 8001f70:	2204      	movs	r2, #4
 8001f72:	701a      	strb	r2, [r3, #0]
		}

		else if (flag_cpu != CPU_ERROR_COMMUNICATION)
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
		break;
 8001f74:	e0bd      	b.n	80020f2 <_Z12select_statev+0x3aa>
		else if (flag_cpu != CPU_ERROR_COMMUNICATION)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	f000 80ba 	beq.w	80020f2 <_Z12select_statev+0x3aa>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 8001f7e:	4b29      	ldr	r3, [pc, #164]	@ (8002024 <_Z12select_statev+0x2dc>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
		break;
 8001f84:	e0b5      	b.n	80020f2 <_Z12select_statev+0x3aa>
	case precharge:
		state_air_n = 1;
 8001f86:	2301      	movs	r3, #1
 8001f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_PRECHARGE);
 8001f92:	2101      	movs	r1, #1
 8001f94:	4818      	ldr	r0, [pc, #96]	@ (8001ff8 <_Z12select_statev+0x2b0>)
 8001f96:	f7fe ff4f 	bl	8000e38 <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu == CPU_OK) {
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d103      	bne.n	8001fa8 <_Z12select_statev+0x260>
			state = transition;
 8001fa0:	4b20      	ldr	r3, [pc, #128]	@ (8002024 <_Z12select_statev+0x2dc>)
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	701a      	strb	r2, [r3, #0]
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
			state = error;
		 //else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
		break;
 8001fa6:	e0a6      	b.n	80020f6 <_Z12select_statev+0x3ae>
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	f040 80a3 	bne.w	80020f6 <_Z12select_statev+0x3ae>
			state = error;
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8002024 <_Z12select_statev+0x2dc>)
 8001fb2:	2205      	movs	r2, #5
 8001fb4:	701a      	strb	r2, [r3, #0]
		break;
 8001fb6:	e09e      	b.n	80020f6 <_Z12select_statev+0x3ae>
	case transition:
		state_air_n = 1;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_PRECHARGE);
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	480c      	ldr	r0, [pc, #48]	@ (8001ff8 <_Z12select_statev+0x2b0>)
 8001fc8:	f7fe ff36 	bl	8000e38 <_ZN7CPU_MOD11updateStateEi>
		//if (((CPU.voltage_acum)) * 0.7 < CPU.DC_BUS){
		printValue(CPU.DC_BUS);
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff8 <_Z12select_statev+0x2b0>)
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fe3f 	bl	8001c54 <printValue>
		if(CPU.DC_BUS > 200 && 	CPU.DC_BUS <500){
 8001fd6:	4b08      	ldr	r3, [pc, #32]	@ (8001ff8 <_Z12select_statev+0x2b0>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	2bc8      	cmp	r3, #200	@ 0xc8
 8001fdc:	f340 808d 	ble.w	80020fa <_Z12select_statev+0x3b2>
 8001fe0:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <_Z12select_statev+0x2b0>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001fe8:	f280 8087 	bge.w	80020fa <_Z12select_statev+0x3b2>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 8001fec:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <_Z12select_statev+0x2dc>)
 8001fee:	2203      	movs	r2, #3
 8001ff0:	701a      	strb	r2, [r3, #0]
		//}else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
		 //else if(flag_current != Current_OK) state = error;
		}
		break;
 8001ff2:	e082      	b.n	80020fa <_Z12select_statev+0x3b2>
 8001ff4:	58021800 	.word	0x58021800
 8001ff8:	24000c74 	.word	0x24000c74
 8001ffc:	24000004 	.word	0x24000004
 8002000:	24000c64 	.word	0x24000c64
 8002004:	240004bc 	.word	0x240004bc
 8002008:	24000cf8 	.word	0x24000cf8
 800200c:	24000008 	.word	0x24000008
 8002010:	24000000 	.word	0x24000000
 8002014:	24000c6c 	.word	0x24000c6c
 8002018:	24000c68 	.word	0x24000c68
 800201c:	0800c8bc 	.word	0x0800c8bc
 8002020:	24000cb0 	.word	0x24000cb0
 8002024:	24000cf4 	.word	0x24000cf4
 8002028:	24000c70 	.word	0x24000c70
 800202c:	240002a8 	.word	0x240002a8
	case run:
		state_air_n = 1;
 8002030:	2301      	movs	r3, #1
 8002032:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 1;
 8002034:	2301      	movs	r3, #1
 8002036:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002038:	2301      	movs	r3, #1
 800203a:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_POWER);
 800203c:	2100      	movs	r1, #0
 800203e:	4849      	ldr	r0, [pc, #292]	@ (8002164 <_Z12select_statev+0x41c>)
 8002040:	f7fe fefa 	bl	8000e38 <_ZN7CPU_MOD11updateStateEi>
		print((char*)"run");
 8002044:	4848      	ldr	r0, [pc, #288]	@ (8002168 <_Z12select_statev+0x420>)
 8002046:	f7ff fde7 	bl	8001c18 <print>
		fan_speed = (FAN_TIMER_ARR * 75) / 100;
 800204a:	4b48      	ldr	r3, [pc, #288]	@ (800216c <_Z12select_statev+0x424>)
 800204c:	f641 62ef 	movw	r2, #7919	@ 0x1eef
 8002050:	801a      	strh	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 8002052:	4b46      	ldr	r3, [pc, #280]	@ (800216c <_Z12select_statev+0x424>)
 8002054:	881a      	ldrh	r2, [r3, #0]
 8002056:	4b46      	ldr	r3, [pc, #280]	@ (8002170 <_Z12select_statev+0x428>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	635a      	str	r2, [r3, #52]	@ 0x34

		if ((flag_cpu == CPU_ERROR_COMMUNICATION) && (flag_charger == 1)){
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d106      	bne.n	8002070 <_Z12select_statev+0x328>
 8002062:	4b44      	ldr	r3, [pc, #272]	@ (8002174 <_Z12select_statev+0x42c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d102      	bne.n	8002070 <_Z12select_statev+0x328>
			//state = error; //If I disconnect the charger, error
			print((char*)"CPU");
 800206a:	4843      	ldr	r0, [pc, #268]	@ (8002178 <_Z12select_statev+0x430>)
 800206c:	f7ff fdd4 	bl	8001c18 <print>
		}
		if (flag_current != Current_OK){
			//state = error; //If current is too high, error
		}
		if(HAL_GPIO_ReadPin(DIGITAL1_GPIO_Port, DIGITAL1_Pin) == GPIO_PIN_RESET){ //SDC IO
 8002070:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002074:	4841      	ldr	r0, [pc, #260]	@ (800217c <_Z12select_statev+0x434>)
 8002076:	f004 f985 	bl	8006384 <HAL_GPIO_ReadPin>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
			//state = error;
			//print((char*)"DIGITAL");
		}
		break;
 800207e:	e03f      	b.n	8002100 <_Z12select_statev+0x3b8>

	case charge: {
		state_air_n = 1;
 8002080:	2301      	movs	r3, #1
 8002082:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 1;
 8002084:	2301      	movs	r3, #1
 8002086:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002088:	2301      	movs	r3, #1
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_CHARGING);
 800208c:	2104      	movs	r1, #4
 800208e:	4835      	ldr	r0, [pc, #212]	@ (8002164 <_Z12select_statev+0x41c>)
 8002090:	f7fe fed2 	bl	8000e38 <_ZN7CPU_MOD11updateStateEi>


		fan_speed = (FAN_TIMER_ARR * 40) / 100;
 8002094:	4b35      	ldr	r3, [pc, #212]	@ (800216c <_Z12select_statev+0x424>)
 8002096:	f241 027f 	movw	r2, #4223	@ 0x107f
 800209a:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 800209c:	4b33      	ldr	r3, [pc, #204]	@ (800216c <_Z12select_statev+0x424>)
 800209e:	881a      	ldrh	r2, [r3, #0]
 80020a0:	4b33      	ldr	r3, [pc, #204]	@ (8002170 <_Z12select_statev+0x428>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	635a      	str	r2, [r3, #52]	@ 0x34


		int32_t current_act = current.Current / 1000; //Actual current in mA to check if it's charging
 80020a6:	4b36      	ldr	r3, [pc, #216]	@ (8002180 <_Z12select_statev+0x438>)
 80020a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020aa:	4a36      	ldr	r2, [pc, #216]	@ (8002184 <_Z12select_statev+0x43c>)
 80020ac:	fb82 1203 	smull	r1, r2, r2, r3
 80020b0:	1192      	asrs	r2, r2, #6
 80020b2:	17db      	asrs	r3, r3, #31
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	607b      	str	r3, [r7, #4]
				state = error; //Charge has been interrupted
		} else {
			charge_current_error_counter = 0;
		}*/

		if (gpio_charge == GPIO_PIN_RESET){
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d11f      	bne.n	80020fe <_Z12select_statev+0x3b6>
			state = start;
 80020be:	4b32      	ldr	r3, [pc, #200]	@ (8002188 <_Z12select_statev+0x440>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
			charge_current_error_counter = 0;
 80020c4:	4b31      	ldr	r3, [pc, #196]	@ (800218c <_Z12select_statev+0x444>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
		}


		break;
 80020ca:	e018      	b.n	80020fe <_Z12select_statev+0x3b6>
	}

	case error:
		state_air_n = 0; //All relés closed
 80020cc:	2300      	movs	r3, #0
 80020ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_ERROR);
 80020d8:	2103      	movs	r1, #3
 80020da:	4822      	ldr	r0, [pc, #136]	@ (8002164 <_Z12select_statev+0x41c>)
 80020dc:	f7fe feac 	bl	8000e38 <_ZN7CPU_MOD11updateStateEi>
		fan_speed = 0;
 80020e0:	4b22      	ldr	r3, [pc, #136]	@ (800216c <_Z12select_statev+0x424>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 80020e6:	4b21      	ldr	r3, [pc, #132]	@ (800216c <_Z12select_statev+0x424>)
 80020e8:	881a      	ldrh	r2, [r3, #0]
 80020ea:	4b21      	ldr	r3, [pc, #132]	@ (8002170 <_Z12select_statev+0x428>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 80020f0:	e006      	b.n	8002100 <_Z12select_statev+0x3b8>
		break;
 80020f2:	bf00      	nop
 80020f4:	e004      	b.n	8002100 <_Z12select_statev+0x3b8>
		break;
 80020f6:	bf00      	nop
 80020f8:	e002      	b.n	8002100 <_Z12select_statev+0x3b8>
		break;
 80020fa:	bf00      	nop
 80020fc:	e000      	b.n	8002100 <_Z12select_statev+0x3b8>
		break;
 80020fe:	bf00      	nop
	 sprintf(buffer, " - STATE:     %i\n", state);
	 print(buffer);
	 sprintf(buffer, "***********************\n");
	 print(buffer);*/
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
			flag_ams_ok ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002100:	4b23      	ldr	r3, [pc, #140]	@ (8002190 <_Z12select_statev+0x448>)
 8002102:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <_Z12select_statev+0x3c4>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <_Z12select_statev+0x3c6>
 800210c:	2300      	movs	r3, #0
 800210e:	461a      	mov	r2, r3
 8002110:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002114:	481f      	ldr	r0, [pc, #124]	@ (8002194 <_Z12select_statev+0x44c>)
 8002116:	f004 f94d 	bl	80063b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 800211a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <_Z12select_statev+0x3dc>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <_Z12select_statev+0x3de>
 8002124:	2300      	movs	r3, #0
 8002126:	461a      	mov	r2, r3
 8002128:	2108      	movs	r1, #8
 800212a:	481b      	ldr	r0, [pc, #108]	@ (8002198 <_Z12select_statev+0x450>)
 800212c:	f004 f942 	bl	80063b4 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 8002130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <_Z12select_statev+0x3f2>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <_Z12select_statev+0x3f4>
 800213a:	2300      	movs	r3, #0
 800213c:	461a      	mov	r2, r3
 800213e:	2110      	movs	r1, #16
 8002140:	4815      	ldr	r0, [pc, #84]	@ (8002198 <_Z12select_statev+0x450>)
 8002142:	f004 f937 	bl	80063b4 <HAL_GPIO_WritePin>
			state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <_Z12select_statev+0x408>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <_Z12select_statev+0x40a>
 8002150:	2300      	movs	r3, #0
 8002152:	461a      	mov	r2, r3
 8002154:	2120      	movs	r1, #32
 8002156:	4810      	ldr	r0, [pc, #64]	@ (8002198 <_Z12select_statev+0x450>)
 8002158:	f004 f92c 	bl	80063b4 <HAL_GPIO_WritePin>





}
 800215c:	bf00      	nop
 800215e:	3730      	adds	r7, #48	@ 0x30
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	24000c74 	.word	0x24000c74
 8002168:	0800c8dc 	.word	0x0800c8dc
 800216c:	24000c70 	.word	0x24000c70
 8002170:	240002a8 	.word	0x240002a8
 8002174:	24000ca8 	.word	0x24000ca8
 8002178:	0800c8e0 	.word	0x0800c8e0
 800217c:	58021000 	.word	0x58021000
 8002180:	24000cb0 	.word	0x24000cb0
 8002184:	10624dd3 	.word	0x10624dd3
 8002188:	24000cf4 	.word	0x24000cf4
 800218c:	24000cac 	.word	0x24000cac
 8002190:	24000008 	.word	0x24000008
 8002194:	58021400 	.word	0x58021400
 8002198:	58020c00 	.word	0x58020c00

0800219c <_Z11parse_state6CANMsg>:

/*********************************************************************************************************
 ** Function name:           parse_state
 ** Descriptions:            Function for analysing the data from the CAN
 *********************************************************************************************************/
void parse_state(CANMsg data) {
 800219c:	b084      	sub	sp, #16
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	f107 0c18 	add.w	ip, r7, #24
 80021a8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t time = HAL_GetTick();
 80021ac:	f000 fcba 	bl	8002b24 <HAL_GetTick>
 80021b0:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 80021b2:	2300      	movs	r3, #0
 80021b4:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < BMS_N; i++) {
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	e017      	b.n	80021ec <_Z11parse_state6CANMsg+0x50>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], time); //Checking if the message received is for  BMS
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	4a25      	ldr	r2, [pc, #148]	@ (800225c <_Z11parse_state6CANMsg+0xc0>)
 80021c8:	1898      	adds	r0, r3, r2
 80021ca:	69b9      	ldr	r1, [r7, #24]
 80021cc:	f107 021d 	add.w	r2, r7, #29
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f7fe fb5b 	bl	800088c <_ZN7BMS_MOD5parseEmPhm>
 80021d6:	4603      	mov	r3, r0
 80021d8:	73fb      	strb	r3, [r7, #15]
		if (flag_bms)
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <_Z11parse_state6CANMsg+0x4a>
			i = BMS_N;
 80021e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002260 <_Z11parse_state6CANMsg+0xc4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < BMS_N; i++) {
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	3301      	adds	r3, #1
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002260 <_Z11parse_state6CANMsg+0xc4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	dbe2      	blt.n	80021bc <_Z11parse_state6CANMsg+0x20>
	}

	if (!flag_bms) {
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	f083 0301 	eor.w	r3, r3, #1
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d025      	beq.n	800224e <_Z11parse_state6CANMsg+0xb2>
		if (CPU.parse(data.id, &data.buf[0], time))
 8002202:	69b9      	ldr	r1, [r7, #24]
 8002204:	f107 021d 	add.w	r2, r7, #29
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	4816      	ldr	r0, [pc, #88]	@ (8002264 <_Z11parse_state6CANMsg+0xc8>)
 800220c:	f7fe fd9e 	bl	8000d4c <_ZN7CPU_MOD5parseEmPhm>
			;                       //Cheking if message is for CPU
		if (data.id == 419385575) //If message from this direction received, it is because the charger is connected and the accu is for charging
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	4a15      	ldr	r2, [pc, #84]	@ (8002268 <_Z11parse_state6CANMsg+0xcc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d11a      	bne.n	800224e <_Z11parse_state6CANMsg+0xb2>
				{
			for (int i = 0; i < BMS_N; i++) {
 8002218:	2300      	movs	r3, #0
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	e00c      	b.n	8002238 <_Z11parse_state6CANMsg+0x9c>
				BMS[i].flag_charger = 1;
 800221e:	4a0f      	ldr	r2, [pc, #60]	@ (800225c <_Z11parse_state6CANMsg+0xc0>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	3398      	adds	r3, #152	@ 0x98
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3301      	adds	r3, #1
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <_Z11parse_state6CANMsg+0xc4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	429a      	cmp	r2, r3
 8002240:	dbed      	blt.n	800221e <_Z11parse_state6CANMsg+0x82>
			}

			current.flag_charger = 1;
 8002242:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <_Z11parse_state6CANMsg+0xd0>)
 8002244:	2201      	movs	r2, #1
 8002246:	639a      	str	r2, [r3, #56]	@ 0x38
			flag_charger = 1;
 8002248:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <_Z11parse_state6CANMsg+0xd4>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002258:	b004      	add	sp, #16
 800225a:	4770      	bx	lr
 800225c:	240004bc 	.word	0x240004bc
 8002260:	24000000 	.word	0x24000000
 8002264:	24000c74 	.word	0x24000c74
 8002268:	18ff50e7 	.word	0x18ff50e7
 800226c:	24000cb0 	.word	0x24000cb0
 8002270:	24000ca8 	.word	0x24000ca8

08002274 <_Z41__static_initialization_and_destruction_0v>:
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b087      	sub	sp, #28
 8002278:	af06      	add	r7, sp, #24
		};
 800227a:	4c40      	ldr	r4, [pc, #256]	@ (800237c <_Z41__static_initialization_and_destruction_0v+0x108>)
 800227c:	2369      	movs	r3, #105	@ 0x69
 800227e:	9304      	str	r3, [sp, #16]
 8002280:	2332      	movs	r3, #50	@ 0x32
 8002282:	9303      	str	r3, [sp, #12]
 8002284:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002288:	9302      	str	r3, [sp, #8]
 800228a:	2313      	movs	r3, #19
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	233c      	movs	r3, #60	@ 0x3c
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002296:	f241 0268 	movw	r2, #4200	@ 0x1068
 800229a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800229e:	4620      	mov	r0, r4
 80022a0:	f7fe fa24 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80022a4:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 80022a8:	23cd      	movs	r3, #205	@ 0xcd
 80022aa:	9304      	str	r3, [sp, #16]
 80022ac:	2364      	movs	r3, #100	@ 0x64
 80022ae:	9303      	str	r3, [sp, #12]
 80022b0:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80022b4:	9302      	str	r3, [sp, #8]
 80022b6:	2313      	movs	r3, #19
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	233c      	movs	r3, #60	@ 0x3c
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80022c2:	f241 0268 	movw	r2, #4200	@ 0x1068
 80022c6:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80022ca:	4620      	mov	r0, r4
 80022cc:	f7fe fa0e 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80022d0:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 80022d4:	f240 1331 	movw	r3, #305	@ 0x131
 80022d8:	9304      	str	r3, [sp, #16]
 80022da:	2396      	movs	r3, #150	@ 0x96
 80022dc:	9303      	str	r3, [sp, #12]
 80022de:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80022e2:	9302      	str	r3, [sp, #8]
 80022e4:	2313      	movs	r3, #19
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	233c      	movs	r3, #60	@ 0x3c
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80022f0:	f241 0268 	movw	r2, #4200	@ 0x1068
 80022f4:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80022f8:	4620      	mov	r0, r4
 80022fa:	f7fe f9f7 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80022fe:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 8002302:	f240 1395 	movw	r3, #405	@ 0x195
 8002306:	9304      	str	r3, [sp, #16]
 8002308:	23c8      	movs	r3, #200	@ 0xc8
 800230a:	9303      	str	r3, [sp, #12]
 800230c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002310:	9302      	str	r3, [sp, #8]
 8002312:	2313      	movs	r3, #19
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	233c      	movs	r3, #60	@ 0x3c
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800231e:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002322:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8002326:	4620      	mov	r0, r4
 8002328:	f7fe f9e0 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 800232c:	f504 70c4 	add.w	r0, r4, #392	@ 0x188
 8002330:	f240 13f9 	movw	r3, #505	@ 0x1f9
 8002334:	9304      	str	r3, [sp, #16]
 8002336:	23fa      	movs	r3, #250	@ 0xfa
 8002338:	9303      	str	r3, [sp, #12]
 800233a:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800233e:	9302      	str	r3, [sp, #8]
 8002340:	2313      	movs	r3, #19
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	233c      	movs	r3, #60	@ 0x3c
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800234c:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002350:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8002354:	f7fe f9ca 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 8002358:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800235c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002360:	2120      	movs	r1, #32
 8002362:	4807      	ldr	r0, [pc, #28]	@ (8002380 <_Z41__static_initialization_and_destruction_0v+0x10c>)
 8002364:	f7fe fca0 	bl	8000ca8 <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 8002368:	22c8      	movs	r2, #200	@ 0xc8
 800236a:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800236e:	4805      	ldr	r0, [pc, #20]	@ (8002384 <_Z41__static_initialization_and_destruction_0v+0x110>)
 8002370:	f7fe fd74 	bl	8000e5c <_ZN11Current_MODC1Emi>
}
 8002374:	bf00      	nop
 8002376:	3704      	adds	r7, #4
 8002378:	46bd      	mov	sp, r7
 800237a:	bd90      	pop	{r4, r7, pc}
 800237c:	240004bc 	.word	0x240004bc
 8002380:	24000c74 	.word	0x24000c74
 8002384:	24000cb0 	.word	0x24000cb0

08002388 <_GLOBAL__sub_I_BMS>:
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
 800238c:	f7ff ff72 	bl	8002274 <_Z41__static_initialization_and_destruction_0v>
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239a:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <HAL_MspInit+0x30>)
 800239c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023a0:	4a08      	ldr	r2, [pc, #32]	@ (80023c4 <HAL_MspInit+0x30>)
 80023a2:	f043 0302 	orr.w	r3, r3, #2
 80023a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023aa:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <HAL_MspInit+0x30>)
 80023ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	58024400 	.word	0x58024400

080023c8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08c      	sub	sp, #48	@ 0x30
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 031c 	add.w	r3, r7, #28
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a31      	ldr	r2, [pc, #196]	@ (80024ac <HAL_ADC_MspInit+0xe4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d12b      	bne.n	8002442 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80023ea:	4b31      	ldr	r3, [pc, #196]	@ (80024b0 <HAL_ADC_MspInit+0xe8>)
 80023ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023f0:	4a2f      	ldr	r2, [pc, #188]	@ (80024b0 <HAL_ADC_MspInit+0xe8>)
 80023f2:	f043 0320 	orr.w	r3, r3, #32
 80023f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80023fa:	4b2d      	ldr	r3, [pc, #180]	@ (80024b0 <HAL_ADC_MspInit+0xe8>)
 80023fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002408:	4b29      	ldr	r3, [pc, #164]	@ (80024b0 <HAL_ADC_MspInit+0xe8>)
 800240a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800240e:	4a28      	ldr	r2, [pc, #160]	@ (80024b0 <HAL_ADC_MspInit+0xe8>)
 8002410:	f043 0320 	orr.w	r3, r3, #32
 8002414:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002418:	4b25      	ldr	r3, [pc, #148]	@ (80024b0 <HAL_ADC_MspInit+0xe8>)
 800241a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002426:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800242a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800242c:	2303      	movs	r3, #3
 800242e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	4619      	mov	r1, r3
 800243a:	481e      	ldr	r0, [pc, #120]	@ (80024b4 <HAL_ADC_MspInit+0xec>)
 800243c:	f003 fdfa 	bl	8006034 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002440:	e02f      	b.n	80024a2 <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1c      	ldr	r2, [pc, #112]	@ (80024b8 <HAL_ADC_MspInit+0xf0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d12a      	bne.n	80024a2 <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800244c:	4b18      	ldr	r3, [pc, #96]	@ (80024b0 <HAL_ADC_MspInit+0xe8>)
 800244e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002452:	4a17      	ldr	r2, [pc, #92]	@ (80024b0 <HAL_ADC_MspInit+0xe8>)
 8002454:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002458:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800245c:	4b14      	ldr	r3, [pc, #80]	@ (80024b0 <HAL_ADC_MspInit+0xe8>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002462:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800246a:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <HAL_ADC_MspInit+0xe8>)
 800246c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002470:	4a0f      	ldr	r2, [pc, #60]	@ (80024b0 <HAL_ADC_MspInit+0xe8>)
 8002472:	f043 0320 	orr.w	r3, r3, #32
 8002476:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800247a:	4b0d      	ldr	r3, [pc, #52]	@ (80024b0 <HAL_ADC_MspInit+0xe8>)
 800247c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002488:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800248c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800248e:	2303      	movs	r3, #3
 8002490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002496:	f107 031c 	add.w	r3, r7, #28
 800249a:	4619      	mov	r1, r3
 800249c:	4805      	ldr	r0, [pc, #20]	@ (80024b4 <HAL_ADC_MspInit+0xec>)
 800249e:	f003 fdc9 	bl	8006034 <HAL_GPIO_Init>
}
 80024a2:	bf00      	nop
 80024a4:	3730      	adds	r7, #48	@ 0x30
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40022000 	.word	0x40022000
 80024b0:	58024400 	.word	0x58024400
 80024b4:	58021400 	.word	0x58021400
 80024b8:	58026000 	.word	0x58026000

080024bc <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b0ba      	sub	sp, #232	@ 0xe8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d4:	f107 0318 	add.w	r3, r7, #24
 80024d8:	22b8      	movs	r2, #184	@ 0xb8
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f009 fcb5 	bl	800be4c <memset>
  if(hfdcan->Instance==FDCAN1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a5a      	ldr	r2, [pc, #360]	@ (8002650 <HAL_FDCAN_MspInit+0x194>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d157      	bne.n	800259c <HAL_FDCAN_MspInit+0xe0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80024ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024fe:	f107 0318 	add.w	r3, r7, #24
 8002502:	4618      	mov	r0, r3
 8002504:	f004 ff10 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800250e:	f7ff fc09 	bl	8001d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002512:	4b50      	ldr	r3, [pc, #320]	@ (8002654 <HAL_FDCAN_MspInit+0x198>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	3301      	adds	r3, #1
 8002518:	4a4e      	ldr	r2, [pc, #312]	@ (8002654 <HAL_FDCAN_MspInit+0x198>)
 800251a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800251c:	4b4d      	ldr	r3, [pc, #308]	@ (8002654 <HAL_FDCAN_MspInit+0x198>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d10e      	bne.n	8002542 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002524:	4b4c      	ldr	r3, [pc, #304]	@ (8002658 <HAL_FDCAN_MspInit+0x19c>)
 8002526:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800252a:	4a4b      	ldr	r2, [pc, #300]	@ (8002658 <HAL_FDCAN_MspInit+0x19c>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002530:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002534:	4b48      	ldr	r3, [pc, #288]	@ (8002658 <HAL_FDCAN_MspInit+0x19c>)
 8002536:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800253a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002542:	4b45      	ldr	r3, [pc, #276]	@ (8002658 <HAL_FDCAN_MspInit+0x19c>)
 8002544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002548:	4a43      	ldr	r2, [pc, #268]	@ (8002658 <HAL_FDCAN_MspInit+0x19c>)
 800254a:	f043 0308 	orr.w	r3, r3, #8
 800254e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002552:	4b41      	ldr	r3, [pc, #260]	@ (8002658 <HAL_FDCAN_MspInit+0x19c>)
 8002554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002560:	2303      	movs	r3, #3
 8002562:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002566:	2302      	movs	r3, #2
 8002568:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002578:	2309      	movs	r3, #9
 800257a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800257e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002582:	4619      	mov	r1, r3
 8002584:	4835      	ldr	r0, [pc, #212]	@ (800265c <HAL_FDCAN_MspInit+0x1a0>)
 8002586:	f003 fd55 	bl	8006034 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	2013      	movs	r0, #19
 8002590:	f002 fb4d 	bl	8004c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002594:	2013      	movs	r0, #19
 8002596:	f002 fb64 	bl	8004c62 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800259a:	e054      	b.n	8002646 <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002660 <HAL_FDCAN_MspInit+0x1a4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d14f      	bne.n	8002646 <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80025a6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b8:	f107 0318 	add.w	r3, r7, #24
 80025bc:	4618      	mov	r0, r3
 80025be:	f004 feb3 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 80025c8:	f7ff fbac 	bl	8001d24 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80025cc:	4b21      	ldr	r3, [pc, #132]	@ (8002654 <HAL_FDCAN_MspInit+0x198>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3301      	adds	r3, #1
 80025d2:	4a20      	ldr	r2, [pc, #128]	@ (8002654 <HAL_FDCAN_MspInit+0x198>)
 80025d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80025d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002654 <HAL_FDCAN_MspInit+0x198>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d10e      	bne.n	80025fc <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80025de:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <HAL_FDCAN_MspInit+0x19c>)
 80025e0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80025e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002658 <HAL_FDCAN_MspInit+0x19c>)
 80025e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ea:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80025ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <HAL_FDCAN_MspInit+0x19c>)
 80025f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80025f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fc:	4b16      	ldr	r3, [pc, #88]	@ (8002658 <HAL_FDCAN_MspInit+0x19c>)
 80025fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002602:	4a15      	ldr	r2, [pc, #84]	@ (8002658 <HAL_FDCAN_MspInit+0x19c>)
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800260c:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <HAL_FDCAN_MspInit+0x19c>)
 800260e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800261a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800261e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002634:	2309      	movs	r3, #9
 8002636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800263e:	4619      	mov	r1, r3
 8002640:	4808      	ldr	r0, [pc, #32]	@ (8002664 <HAL_FDCAN_MspInit+0x1a8>)
 8002642:	f003 fcf7 	bl	8006034 <HAL_GPIO_Init>
}
 8002646:	bf00      	nop
 8002648:	37e8      	adds	r7, #232	@ 0xe8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	4000a000 	.word	0x4000a000
 8002654:	24000d48 	.word	0x24000d48
 8002658:	58024400 	.word	0x58024400
 800265c:	58020c00 	.word	0x58020c00
 8002660:	4000a400 	.word	0x4000a400
 8002664:	58020400 	.word	0x58020400

08002668 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0b      	ldr	r2, [pc, #44]	@ (80026a4 <HAL_TIM_Base_MspInit+0x3c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d10e      	bne.n	8002698 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800267a:	4b0b      	ldr	r3, [pc, #44]	@ (80026a8 <HAL_TIM_Base_MspInit+0x40>)
 800267c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002680:	4a09      	ldr	r2, [pc, #36]	@ (80026a8 <HAL_TIM_Base_MspInit+0x40>)
 8002682:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002686:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800268a:	4b07      	ldr	r3, [pc, #28]	@ (80026a8 <HAL_TIM_Base_MspInit+0x40>)
 800268c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002690:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	40014800 	.word	0x40014800
 80026a8:	58024400 	.word	0x58024400

080026ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a13      	ldr	r2, [pc, #76]	@ (8002718 <HAL_TIM_MspPostInit+0x6c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d11f      	bne.n	800270e <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ce:	4b13      	ldr	r3, [pc, #76]	@ (800271c <HAL_TIM_MspPostInit+0x70>)
 80026d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026d4:	4a11      	ldr	r2, [pc, #68]	@ (800271c <HAL_TIM_MspPostInit+0x70>)
 80026d6:	f043 0302 	orr.w	r3, r3, #2
 80026da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026de:	4b0f      	ldr	r3, [pc, #60]	@ (800271c <HAL_TIM_MspPostInit+0x70>)
 80026e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PB9     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f2:	2302      	movs	r3, #2
 80026f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80026fe:	2301      	movs	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002702:	f107 030c 	add.w	r3, r7, #12
 8002706:	4619      	mov	r1, r3
 8002708:	4805      	ldr	r0, [pc, #20]	@ (8002720 <HAL_TIM_MspPostInit+0x74>)
 800270a:	f003 fc93 	bl	8006034 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800270e:	bf00      	nop
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40014800 	.word	0x40014800
 800271c:	58024400 	.word	0x58024400
 8002720:	58020400 	.word	0x58020400

08002724 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b0b8      	sub	sp, #224	@ 0xe0
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800273c:	f107 0310 	add.w	r3, r7, #16
 8002740:	22b8      	movs	r2, #184	@ 0xb8
 8002742:	2100      	movs	r1, #0
 8002744:	4618      	mov	r0, r3
 8002746:	f009 fb81 	bl	800be4c <memset>
  if(huart->Instance==USART2)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a26      	ldr	r2, [pc, #152]	@ (80027e8 <HAL_UART_MspInit+0xc4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d145      	bne.n	80027e0 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002754:	f04f 0202 	mov.w	r2, #2
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002760:	2300      	movs	r3, #0
 8002762:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002766:	f107 0310 	add.w	r3, r7, #16
 800276a:	4618      	mov	r0, r3
 800276c:	f004 fddc 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002776:	f7ff fad5 	bl	8001d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800277a:	4b1c      	ldr	r3, [pc, #112]	@ (80027ec <HAL_UART_MspInit+0xc8>)
 800277c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002780:	4a1a      	ldr	r2, [pc, #104]	@ (80027ec <HAL_UART_MspInit+0xc8>)
 8002782:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002786:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800278a:	4b18      	ldr	r3, [pc, #96]	@ (80027ec <HAL_UART_MspInit+0xc8>)
 800278c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002798:	4b14      	ldr	r3, [pc, #80]	@ (80027ec <HAL_UART_MspInit+0xc8>)
 800279a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800279e:	4a13      	ldr	r2, [pc, #76]	@ (80027ec <HAL_UART_MspInit+0xc8>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027a8:	4b10      	ldr	r3, [pc, #64]	@ (80027ec <HAL_UART_MspInit+0xc8>)
 80027aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027b6:	230c      	movs	r3, #12
 80027b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027bc:	2302      	movs	r3, #2
 80027be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027ce:	2307      	movs	r3, #7
 80027d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80027d8:	4619      	mov	r1, r3
 80027da:	4805      	ldr	r0, [pc, #20]	@ (80027f0 <HAL_UART_MspInit+0xcc>)
 80027dc:	f003 fc2a 	bl	8006034 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80027e0:	bf00      	nop
 80027e2:	37e0      	adds	r7, #224	@ 0xe0
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40004400 	.word	0x40004400
 80027ec:	58024400 	.word	0x58024400
 80027f0:	58020000 	.word	0x58020000

080027f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <NMI_Handler+0x4>

080027fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002800:	bf00      	nop
 8002802:	e7fd      	b.n	8002800 <HardFault_Handler+0x4>

08002804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002808:	bf00      	nop
 800280a:	e7fd      	b.n	8002808 <MemManage_Handler+0x4>

0800280c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002810:	bf00      	nop
 8002812:	e7fd      	b.n	8002810 <BusFault_Handler+0x4>

08002814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002818:	bf00      	nop
 800281a:	e7fd      	b.n	8002818 <UsageFault_Handler+0x4>

0800281c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800284a:	f000 f957 	bl	8002afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002858:	4802      	ldr	r0, [pc, #8]	@ (8002864 <FDCAN1_IT0_IRQHandler+0x10>)
 800285a:	f002 fedd 	bl	8005618 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	24000168 	.word	0x24000168

08002868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002870:	4a14      	ldr	r2, [pc, #80]	@ (80028c4 <_sbrk+0x5c>)
 8002872:	4b15      	ldr	r3, [pc, #84]	@ (80028c8 <_sbrk+0x60>)
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800287c:	4b13      	ldr	r3, [pc, #76]	@ (80028cc <_sbrk+0x64>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002884:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <_sbrk+0x64>)
 8002886:	4a12      	ldr	r2, [pc, #72]	@ (80028d0 <_sbrk+0x68>)
 8002888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800288a:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <_sbrk+0x64>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	429a      	cmp	r2, r3
 8002896:	d207      	bcs.n	80028a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002898:	f009 fae0 	bl	800be5c <__errno>
 800289c:	4603      	mov	r3, r0
 800289e:	220c      	movs	r2, #12
 80028a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	e009      	b.n	80028bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a8:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <_sbrk+0x64>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ae:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <_sbrk+0x64>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	4a05      	ldr	r2, [pc, #20]	@ (80028cc <_sbrk+0x64>)
 80028b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ba:	68fb      	ldr	r3, [r7, #12]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	24050000 	.word	0x24050000
 80028c8:	00000400 	.word	0x00000400
 80028cc:	24000d4c 	.word	0x24000d4c
 80028d0:	24000ea0 	.word	0x24000ea0

080028d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028d8:	4b32      	ldr	r3, [pc, #200]	@ (80029a4 <SystemInit+0xd0>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028de:	4a31      	ldr	r2, [pc, #196]	@ (80029a4 <SystemInit+0xd0>)
 80028e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028e8:	4b2f      	ldr	r3, [pc, #188]	@ (80029a8 <SystemInit+0xd4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	2b06      	cmp	r3, #6
 80028f2:	d807      	bhi.n	8002904 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028f4:	4b2c      	ldr	r3, [pc, #176]	@ (80029a8 <SystemInit+0xd4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f023 030f 	bic.w	r3, r3, #15
 80028fc:	4a2a      	ldr	r2, [pc, #168]	@ (80029a8 <SystemInit+0xd4>)
 80028fe:	f043 0307 	orr.w	r3, r3, #7
 8002902:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002904:	4b29      	ldr	r3, [pc, #164]	@ (80029ac <SystemInit+0xd8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a28      	ldr	r2, [pc, #160]	@ (80029ac <SystemInit+0xd8>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002910:	4b26      	ldr	r3, [pc, #152]	@ (80029ac <SystemInit+0xd8>)
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002916:	4b25      	ldr	r3, [pc, #148]	@ (80029ac <SystemInit+0xd8>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4924      	ldr	r1, [pc, #144]	@ (80029ac <SystemInit+0xd8>)
 800291c:	4b24      	ldr	r3, [pc, #144]	@ (80029b0 <SystemInit+0xdc>)
 800291e:	4013      	ands	r3, r2
 8002920:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002922:	4b21      	ldr	r3, [pc, #132]	@ (80029a8 <SystemInit+0xd4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d007      	beq.n	800293e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800292e:	4b1e      	ldr	r3, [pc, #120]	@ (80029a8 <SystemInit+0xd4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 030f 	bic.w	r3, r3, #15
 8002936:	4a1c      	ldr	r2, [pc, #112]	@ (80029a8 <SystemInit+0xd4>)
 8002938:	f043 0307 	orr.w	r3, r3, #7
 800293c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800293e:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <SystemInit+0xd8>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002944:	4b19      	ldr	r3, [pc, #100]	@ (80029ac <SystemInit+0xd8>)
 8002946:	2200      	movs	r2, #0
 8002948:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800294a:	4b18      	ldr	r3, [pc, #96]	@ (80029ac <SystemInit+0xd8>)
 800294c:	2200      	movs	r2, #0
 800294e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002950:	4b16      	ldr	r3, [pc, #88]	@ (80029ac <SystemInit+0xd8>)
 8002952:	4a18      	ldr	r2, [pc, #96]	@ (80029b4 <SystemInit+0xe0>)
 8002954:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002956:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <SystemInit+0xd8>)
 8002958:	4a17      	ldr	r2, [pc, #92]	@ (80029b8 <SystemInit+0xe4>)
 800295a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800295c:	4b13      	ldr	r3, [pc, #76]	@ (80029ac <SystemInit+0xd8>)
 800295e:	4a17      	ldr	r2, [pc, #92]	@ (80029bc <SystemInit+0xe8>)
 8002960:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002962:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <SystemInit+0xd8>)
 8002964:	2200      	movs	r2, #0
 8002966:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002968:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <SystemInit+0xd8>)
 800296a:	4a14      	ldr	r2, [pc, #80]	@ (80029bc <SystemInit+0xe8>)
 800296c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800296e:	4b0f      	ldr	r3, [pc, #60]	@ (80029ac <SystemInit+0xd8>)
 8002970:	2200      	movs	r2, #0
 8002972:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002974:	4b0d      	ldr	r3, [pc, #52]	@ (80029ac <SystemInit+0xd8>)
 8002976:	4a11      	ldr	r2, [pc, #68]	@ (80029bc <SystemInit+0xe8>)
 8002978:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800297a:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <SystemInit+0xd8>)
 800297c:	2200      	movs	r2, #0
 800297e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002980:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <SystemInit+0xd8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a09      	ldr	r2, [pc, #36]	@ (80029ac <SystemInit+0xd8>)
 8002986:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800298a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800298c:	4b07      	ldr	r3, [pc, #28]	@ (80029ac <SystemInit+0xd8>)
 800298e:	2200      	movs	r2, #0
 8002990:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002992:	4b0b      	ldr	r3, [pc, #44]	@ (80029c0 <SystemInit+0xec>)
 8002994:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002998:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800299a:	bf00      	nop
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000ed00 	.word	0xe000ed00
 80029a8:	52002000 	.word	0x52002000
 80029ac:	58024400 	.word	0x58024400
 80029b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80029b4:	02020200 	.word	0x02020200
 80029b8:	01ff0000 	.word	0x01ff0000
 80029bc:	01010280 	.word	0x01010280
 80029c0:	52004000 	.word	0x52004000

080029c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80029c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029c8:	f7ff ff84 	bl	80028d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029cc:	480c      	ldr	r0, [pc, #48]	@ (8002a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029ce:	490d      	ldr	r1, [pc, #52]	@ (8002a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029d4:	e002      	b.n	80029dc <LoopCopyDataInit>

080029d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029da:	3304      	adds	r3, #4

080029dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e0:	d3f9      	bcc.n	80029d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029e2:	4a0a      	ldr	r2, [pc, #40]	@ (8002a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e8:	e001      	b.n	80029ee <LoopFillZerobss>

080029ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ea:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 80029ec:	3204      	adds	r2, #4

080029ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f0:	d3fb      	bcc.n	80029ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029f2:	f009 fa39 	bl	800be68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029f6:	f7fe fb27 	bl	8001048 <main>
  bx  lr
 80029fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029fc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002a00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a04:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002a08:	0800c9c0 	.word	0x0800c9c0
  ldr r2, =_sbss
 8002a0c:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8002a10:	24000e9c 	.word	0x24000e9c

08002a14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a14:	e7fe      	b.n	8002a14 <ADC3_IRQHandler>
	...

08002a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a1e:	2003      	movs	r0, #3
 8002a20:	f002 f8fa 	bl	8004c18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a24:	f004 faaa 	bl	8006f7c <HAL_RCC_GetSysClockFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b15      	ldr	r3, [pc, #84]	@ (8002a80 <HAL_Init+0x68>)
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	4913      	ldr	r1, [pc, #76]	@ (8002a84 <HAL_Init+0x6c>)
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a42:	4b0f      	ldr	r3, [pc, #60]	@ (8002a80 <HAL_Init+0x68>)
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a84 <HAL_Init+0x6c>)
 8002a4c:	5cd3      	ldrb	r3, [r2, r3]
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	fa22 f303 	lsr.w	r3, r2, r3
 8002a58:	4a0b      	ldr	r2, [pc, #44]	@ (8002a88 <HAL_Init+0x70>)
 8002a5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a8c <HAL_Init+0x74>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a62:	200f      	movs	r0, #15
 8002a64:	f000 f814 	bl	8002a90 <HAL_InitTick>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e002      	b.n	8002a78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a72:	f7ff fc8f 	bl	8002394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	58024400 	.word	0x58024400
 8002a84:	0800c930 	.word	0x0800c930
 8002a88:	24000010 	.word	0x24000010
 8002a8c:	2400000c 	.word	0x2400000c

08002a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a98:	4b15      	ldr	r3, [pc, #84]	@ (8002af0 <HAL_InitTick+0x60>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e021      	b.n	8002ae8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002aa4:	4b13      	ldr	r3, [pc, #76]	@ (8002af4 <HAL_InitTick+0x64>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b11      	ldr	r3, [pc, #68]	@ (8002af0 <HAL_InitTick+0x60>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	4619      	mov	r1, r3
 8002aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aba:	4618      	mov	r0, r3
 8002abc:	f002 f8df 	bl	8004c7e <HAL_SYSTICK_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e00e      	b.n	8002ae8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b0f      	cmp	r3, #15
 8002ace:	d80a      	bhi.n	8002ae6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad8:	f002 f8a9 	bl	8004c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002adc:	4a06      	ldr	r2, [pc, #24]	@ (8002af8 <HAL_InitTick+0x68>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e000      	b.n	8002ae8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	24000018 	.word	0x24000018
 8002af4:	2400000c 	.word	0x2400000c
 8002af8:	24000014 	.word	0x24000014

08002afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b00:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_IncTick+0x20>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <HAL_IncTick+0x24>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	4a04      	ldr	r2, [pc, #16]	@ (8002b20 <HAL_IncTick+0x24>)
 8002b0e:	6013      	str	r3, [r2, #0]
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	24000018 	.word	0x24000018
 8002b20:	24000d50 	.word	0x24000d50

08002b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return uwTick;
 8002b28:	4b03      	ldr	r3, [pc, #12]	@ (8002b38 <HAL_GetTick+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	24000d50 	.word	0x24000d50

08002b3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	609a      	str	r2, [r3, #8]
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a18      	ldr	r2, [pc, #96]	@ (8002c14 <LL_ADC_SetChannelPreselection+0x70>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d027      	beq.n	8002c06 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d107      	bne.n	8002bd0 <LL_ADC_SetChannelPreselection+0x2c>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	0e9b      	lsrs	r3, r3, #26
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	2201      	movs	r2, #1
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	e015      	b.n	8002bfc <LL_ADC_SetChannelPreselection+0x58>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8002be6:	2320      	movs	r3, #32
 8002be8:	e003      	b.n	8002bf2 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f003 031f 	and.w	r3, r3, #31
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	69d2      	ldr	r2, [r2, #28]
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8002c06:	bf00      	nop
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	58026000 	.word	0x58026000

08002c18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3360      	adds	r3, #96	@ 0x60
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4a10      	ldr	r2, [pc, #64]	@ (8002c78 <LL_ADC_SetOffset+0x60>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d10b      	bne.n	8002c54 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002c52:	e00b      	b.n	8002c6c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	431a      	orrs	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	601a      	str	r2, [r3, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	58026000 	.word	0x58026000

08002c7c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3360      	adds	r3, #96	@ 0x60
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	611a      	str	r2, [r3, #16]
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4a0c      	ldr	r2, [pc, #48]	@ (8002d1c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00e      	beq.n	8002d0e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3360      	adds	r3, #96	@ 0x60
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	601a      	str	r2, [r3, #0]
  }
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	58026000 	.word	0x58026000

08002d20 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d60 <LL_ADC_SetOffsetSaturation+0x40>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d10e      	bne.n	8002d52 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3360      	adds	r3, #96	@ 0x60
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	58026000 	.word	0x58026000

08002d64 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4a0c      	ldr	r2, [pc, #48]	@ (8002da4 <LL_ADC_SetOffsetSign+0x40>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d10e      	bne.n	8002d96 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	3360      	adds	r3, #96	@ 0x60
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	431a      	orrs	r2, r3
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	58026000 	.word	0x58026000

08002da8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3360      	adds	r3, #96	@ 0x60
 8002db8:	461a      	mov	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8002df8 <LL_ADC_SetOffsetState+0x50>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d108      	bne.n	8002ddc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002dda:	e007      	b.n	8002dec <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	601a      	str	r2, [r3, #0]
}
 8002dec:	bf00      	nop
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	58026000 	.word	0x58026000

08002dfc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b087      	sub	sp, #28
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3330      	adds	r3, #48	@ 0x30
 8002e32:	461a      	mov	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	0a1b      	lsrs	r3, r3, #8
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	4413      	add	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	211f      	movs	r1, #31
 8002e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	401a      	ands	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	0e9b      	lsrs	r3, r3, #26
 8002e5a:	f003 011f 	and.w	r1, r3, #31
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	fa01 f303 	lsl.w	r3, r1, r3
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e6e:	bf00      	nop
 8002e70:	371c      	adds	r7, #28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b087      	sub	sp, #28
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3314      	adds	r3, #20
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	0e5b      	lsrs	r3, r3, #25
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	4413      	add	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	0d1b      	lsrs	r3, r3, #20
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	2107      	movs	r1, #7
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	401a      	ands	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	0d1b      	lsrs	r3, r3, #20
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ec4:	bf00      	nop
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4a1a      	ldr	r2, [pc, #104]	@ (8002f48 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d115      	bne.n	8002f10 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0318 	and.w	r3, r3, #24
 8002efa:	4914      	ldr	r1, [pc, #80]	@ (8002f4c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002efc:	40d9      	lsrs	r1, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	400b      	ands	r3, r1
 8002f02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f06:	431a      	orrs	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002f0e:	e014      	b.n	8002f3a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	401a      	ands	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0318 	and.w	r3, r3, #24
 8002f26:	4909      	ldr	r1, [pc, #36]	@ (8002f4c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002f28:	40d9      	lsrs	r1, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	400b      	ands	r3, r1
 8002f2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f32:	431a      	orrs	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	58026000 	.word	0x58026000
 8002f4c:	000fffff 	.word	0x000fffff

08002f50 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 031f 	and.w	r3, r3, #31
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	4b04      	ldr	r3, [pc, #16]	@ (8002fa8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6093      	str	r3, [r2, #8]
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	5fffffc0 	.word	0x5fffffc0

08002fac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fc0:	d101      	bne.n	8002fc6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	4b05      	ldr	r3, [pc, #20]	@ (8002ff8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	6fffffc0 	.word	0x6fffffc0

08002ffc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800300c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003010:	d101      	bne.n	8003016 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	4b05      	ldr	r3, [pc, #20]	@ (8003048 <LL_ADC_Enable+0x24>)
 8003032:	4013      	ands	r3, r2
 8003034:	f043 0201 	orr.w	r2, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	7fffffc0 	.word	0x7fffffc0

0800304c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <LL_ADC_Disable+0x24>)
 800305a:	4013      	ands	r3, r2
 800305c:	f043 0202 	orr.w	r2, r3, #2
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	7fffffc0 	.word	0x7fffffc0

08003074 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <LL_ADC_IsEnabled+0x18>
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <LL_ADC_IsEnabled+0x1a>
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d101      	bne.n	80030b2 <LL_ADC_IsDisableOngoing+0x18>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <LL_ADC_IsDisableOngoing+0x1a>
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <LL_ADC_REG_StartConversion+0x24>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	f043 0204 	orr.w	r2, r3, #4
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	7fffffc0 	.word	0x7fffffc0

080030e8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	4b05      	ldr	r3, [pc, #20]	@ (800310c <LL_ADC_REG_StopConversion+0x24>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	f043 0210 	orr.w	r2, r3, #16
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	7fffffc0 	.word	0x7fffffc0

08003110 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b04      	cmp	r3, #4
 8003122:	d101      	bne.n	8003128 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	4b05      	ldr	r3, [pc, #20]	@ (800315c <LL_ADC_INJ_StopConversion+0x24>)
 8003146:	4013      	ands	r3, r2
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	7fffffc0 	.word	0x7fffffc0

08003160 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b08      	cmp	r3, #8
 8003172:	d101      	bne.n	8003178 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b089      	sub	sp, #36	@ 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e1ee      	b.n	8003580 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d109      	bne.n	80031c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff f909 	bl	80023c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff feef 	bl	8002fac <LL_ADC_IsDeepPowerDownEnabled>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d004      	beq.n	80031de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fed5 	bl	8002f88 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff ff0a 	bl	8002ffc <LL_ADC_IsInternalRegulatorEnabled>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d114      	bne.n	8003218 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff feee 	bl	8002fd4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031f8:	4b8e      	ldr	r3, [pc, #568]	@ (8003434 <HAL_ADC_Init+0x2ac>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	099b      	lsrs	r3, r3, #6
 80031fe:	4a8e      	ldr	r2, [pc, #568]	@ (8003438 <HAL_ADC_Init+0x2b0>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	099b      	lsrs	r3, r3, #6
 8003206:	3301      	adds	r3, #1
 8003208:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800320a:	e002      	b.n	8003212 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	3b01      	subs	r3, #1
 8003210:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f9      	bne.n	800320c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff feed 	bl	8002ffc <LL_ADC_IsInternalRegulatorEnabled>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10d      	bne.n	8003244 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800322c:	f043 0210 	orr.w	r2, r3, #16
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003238:	f043 0201 	orr.w	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff61 	bl	8003110 <LL_ADC_REG_IsConversionOngoing>
 800324e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b00      	cmp	r3, #0
 800325a:	f040 8188 	bne.w	800356e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	f040 8184 	bne.w	800356e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800326e:	f043 0202 	orr.w	r2, r3, #2
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fefa 	bl	8003074 <LL_ADC_IsEnabled>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d136      	bne.n	80032f4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a6c      	ldr	r2, [pc, #432]	@ (800343c <HAL_ADC_Init+0x2b4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d004      	beq.n	800329a <HAL_ADC_Init+0x112>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a6a      	ldr	r2, [pc, #424]	@ (8003440 <HAL_ADC_Init+0x2b8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d10e      	bne.n	80032b8 <HAL_ADC_Init+0x130>
 800329a:	4868      	ldr	r0, [pc, #416]	@ (800343c <HAL_ADC_Init+0x2b4>)
 800329c:	f7ff feea 	bl	8003074 <LL_ADC_IsEnabled>
 80032a0:	4604      	mov	r4, r0
 80032a2:	4867      	ldr	r0, [pc, #412]	@ (8003440 <HAL_ADC_Init+0x2b8>)
 80032a4:	f7ff fee6 	bl	8003074 <LL_ADC_IsEnabled>
 80032a8:	4603      	mov	r3, r0
 80032aa:	4323      	orrs	r3, r4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	e008      	b.n	80032ca <HAL_ADC_Init+0x142>
 80032b8:	4862      	ldr	r0, [pc, #392]	@ (8003444 <HAL_ADC_Init+0x2bc>)
 80032ba:	f7ff fedb 	bl	8003074 <LL_ADC_IsEnabled>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf0c      	ite	eq
 80032c4:	2301      	moveq	r3, #1
 80032c6:	2300      	movne	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d012      	beq.n	80032f4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a5a      	ldr	r2, [pc, #360]	@ (800343c <HAL_ADC_Init+0x2b4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d004      	beq.n	80032e2 <HAL_ADC_Init+0x15a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a58      	ldr	r2, [pc, #352]	@ (8003440 <HAL_ADC_Init+0x2b8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d101      	bne.n	80032e6 <HAL_ADC_Init+0x15e>
 80032e2:	4a59      	ldr	r2, [pc, #356]	@ (8003448 <HAL_ADC_Init+0x2c0>)
 80032e4:	e000      	b.n	80032e8 <HAL_ADC_Init+0x160>
 80032e6:	4a59      	ldr	r2, [pc, #356]	@ (800344c <HAL_ADC_Init+0x2c4>)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4619      	mov	r1, r3
 80032ee:	4610      	mov	r0, r2
 80032f0:	f7ff fc24 	bl	8002b3c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a52      	ldr	r2, [pc, #328]	@ (8003444 <HAL_ADC_Init+0x2bc>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d129      	bne.n	8003352 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	7e5b      	ldrb	r3, [r3, #25]
 8003302:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003308:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800330e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b08      	cmp	r3, #8
 8003316:	d013      	beq.n	8003340 <HAL_ADC_Init+0x1b8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b0c      	cmp	r3, #12
 800331e:	d00d      	beq.n	800333c <HAL_ADC_Init+0x1b4>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b1c      	cmp	r3, #28
 8003326:	d007      	beq.n	8003338 <HAL_ADC_Init+0x1b0>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b18      	cmp	r3, #24
 800332e:	d101      	bne.n	8003334 <HAL_ADC_Init+0x1ac>
 8003330:	2318      	movs	r3, #24
 8003332:	e006      	b.n	8003342 <HAL_ADC_Init+0x1ba>
 8003334:	2300      	movs	r3, #0
 8003336:	e004      	b.n	8003342 <HAL_ADC_Init+0x1ba>
 8003338:	2310      	movs	r3, #16
 800333a:	e002      	b.n	8003342 <HAL_ADC_Init+0x1ba>
 800333c:	2308      	movs	r3, #8
 800333e:	e000      	b.n	8003342 <HAL_ADC_Init+0x1ba>
 8003340:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003342:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800334a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800334c:	4313      	orrs	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
 8003350:	e00e      	b.n	8003370 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	7e5b      	ldrb	r3, [r3, #25]
 8003356:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800335c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003362:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800336a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800336c:	4313      	orrs	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d106      	bne.n	8003388 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337e:	3b01      	subs	r3, #1
 8003380:	045b      	lsls	r3, r3, #17
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338c:	2b00      	cmp	r3, #0
 800338e:	d009      	beq.n	80033a4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003394:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a26      	ldr	r2, [pc, #152]	@ (8003444 <HAL_ADC_Init+0x2bc>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d115      	bne.n	80033da <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	4b26      	ldr	r3, [pc, #152]	@ (8003450 <HAL_ADC_Init+0x2c8>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	69b9      	ldr	r1, [r7, #24]
 80033be:	430b      	orrs	r3, r1
 80033c0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	611a      	str	r2, [r3, #16]
 80033d8:	e009      	b.n	80033ee <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003454 <HAL_ADC_Init+0x2cc>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	69b9      	ldr	r1, [r7, #24]
 80033ea:	430b      	orrs	r3, r1
 80033ec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fe8c 	bl	8003110 <LL_ADC_REG_IsConversionOngoing>
 80033f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff feae 	bl	8003160 <LL_ADC_INJ_IsConversionOngoing>
 8003404:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f040 808e 	bne.w	800352a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	f040 808a 	bne.w	800352a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a0a      	ldr	r2, [pc, #40]	@ (8003444 <HAL_ADC_Init+0x2bc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d11b      	bne.n	8003458 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	7e1b      	ldrb	r3, [r3, #24]
 8003424:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800342c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	e018      	b.n	8003466 <HAL_ADC_Init+0x2de>
 8003434:	2400000c 	.word	0x2400000c
 8003438:	053e2d63 	.word	0x053e2d63
 800343c:	40022000 	.word	0x40022000
 8003440:	40022100 	.word	0x40022100
 8003444:	58026000 	.word	0x58026000
 8003448:	40022300 	.word	0x40022300
 800344c:	58026300 	.word	0x58026300
 8003450:	fff04007 	.word	0xfff04007
 8003454:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	7e1b      	ldrb	r3, [r3, #24]
 800345c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	4b46      	ldr	r3, [pc, #280]	@ (8003588 <HAL_ADC_Init+0x400>)
 800346e:	4013      	ands	r3, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	69b9      	ldr	r1, [r7, #24]
 8003476:	430b      	orrs	r3, r1
 8003478:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003480:	2b01      	cmp	r3, #1
 8003482:	d137      	bne.n	80034f4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003488:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a3f      	ldr	r2, [pc, #252]	@ (800358c <HAL_ADC_Init+0x404>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d116      	bne.n	80034c2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	4b3d      	ldr	r3, [pc, #244]	@ (8003590 <HAL_ADC_Init+0x408>)
 800349c:	4013      	ands	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034a6:	4311      	orrs	r1, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034ac:	4311      	orrs	r1, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80034b2:	430a      	orrs	r2, r1
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	611a      	str	r2, [r3, #16]
 80034c0:	e020      	b.n	8003504 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	4b32      	ldr	r3, [pc, #200]	@ (8003594 <HAL_ADC_Init+0x40c>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034d0:	3a01      	subs	r2, #1
 80034d2:	0411      	lsls	r1, r2, #16
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034d8:	4311      	orrs	r1, r2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034de:	4311      	orrs	r1, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80034e4:	430a      	orrs	r2, r1
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	611a      	str	r2, [r3, #16]
 80034f2:	e007      	b.n	8003504 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1b      	ldr	r2, [pc, #108]	@ (800358c <HAL_ADC_Init+0x404>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d002      	beq.n	800352a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f001 f8b1 	bl	800468c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d10c      	bne.n	800354c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003538:	f023 010f 	bic.w	r1, r3, #15
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	1e5a      	subs	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	631a      	str	r2, [r3, #48]	@ 0x30
 800354a:	e007      	b.n	800355c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 020f 	bic.w	r2, r2, #15
 800355a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003560:	f023 0303 	bic.w	r3, r3, #3
 8003564:	f043 0201 	orr.w	r2, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	661a      	str	r2, [r3, #96]	@ 0x60
 800356c:	e007      	b.n	800357e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003572:	f043 0210 	orr.w	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800357e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3724      	adds	r7, #36	@ 0x24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd90      	pop	{r4, r7, pc}
 8003588:	ffffbffc 	.word	0xffffbffc
 800358c:	58026000 	.word	0x58026000
 8003590:	fc00f81f 	.word	0xfc00f81f
 8003594:	fc00f81e 	.word	0xfc00f81e

08003598 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a5c      	ldr	r2, [pc, #368]	@ (8003718 <HAL_ADC_Start+0x180>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d004      	beq.n	80035b4 <HAL_ADC_Start+0x1c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a5b      	ldr	r2, [pc, #364]	@ (800371c <HAL_ADC_Start+0x184>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d101      	bne.n	80035b8 <HAL_ADC_Start+0x20>
 80035b4:	4b5a      	ldr	r3, [pc, #360]	@ (8003720 <HAL_ADC_Start+0x188>)
 80035b6:	e000      	b.n	80035ba <HAL_ADC_Start+0x22>
 80035b8:	4b5a      	ldr	r3, [pc, #360]	@ (8003724 <HAL_ADC_Start+0x18c>)
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fcc8 	bl	8002f50 <LL_ADC_GetMultimode>
 80035c0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fda2 	bl	8003110 <LL_ADC_REG_IsConversionOngoing>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f040 809a 	bne.w	8003708 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_ADC_Start+0x4a>
 80035de:	2302      	movs	r3, #2
 80035e0:	e095      	b.n	800370e <HAL_ADC_Start+0x176>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 ff64 	bl	80044b8 <ADC_Enable>
 80035f0:	4603      	mov	r3, r0
 80035f2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80035f4:	7dfb      	ldrb	r3, [r7, #23]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 8081 	bne.w	80036fe <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003600:	4b49      	ldr	r3, [pc, #292]	@ (8003728 <HAL_ADC_Start+0x190>)
 8003602:	4013      	ands	r3, r2
 8003604:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a42      	ldr	r2, [pc, #264]	@ (800371c <HAL_ADC_Start+0x184>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d002      	beq.n	800361c <HAL_ADC_Start+0x84>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	e000      	b.n	800361e <HAL_ADC_Start+0x86>
 800361c:	4b3e      	ldr	r3, [pc, #248]	@ (8003718 <HAL_ADC_Start+0x180>)
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	4293      	cmp	r3, r2
 8003624:	d002      	beq.n	800362c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d105      	bne.n	8003638 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003630:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003644:	d106      	bne.n	8003654 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800364a:	f023 0206 	bic.w	r2, r3, #6
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	665a      	str	r2, [r3, #100]	@ 0x64
 8003652:	e002      	b.n	800365a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	221c      	movs	r2, #28
 8003660:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a2b      	ldr	r2, [pc, #172]	@ (800371c <HAL_ADC_Start+0x184>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d002      	beq.n	800367a <HAL_ADC_Start+0xe2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	e000      	b.n	800367c <HAL_ADC_Start+0xe4>
 800367a:	4b27      	ldr	r3, [pc, #156]	@ (8003718 <HAL_ADC_Start+0x180>)
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	4293      	cmp	r3, r2
 8003682:	d008      	beq.n	8003696 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b05      	cmp	r3, #5
 800368e:	d002      	beq.n	8003696 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	2b09      	cmp	r3, #9
 8003694:	d114      	bne.n	80036c0 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d007      	beq.n	80036b4 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036ac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fd01 	bl	80030c0 <LL_ADC_REG_StartConversion>
 80036be:	e025      	b.n	800370c <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a12      	ldr	r2, [pc, #72]	@ (800371c <HAL_ADC_Start+0x184>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d002      	beq.n	80036dc <HAL_ADC_Start+0x144>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	e000      	b.n	80036de <HAL_ADC_Start+0x146>
 80036dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003718 <HAL_ADC_Start+0x180>)
 80036de:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00f      	beq.n	800370c <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	661a      	str	r2, [r3, #96]	@ 0x60
 80036fc:	e006      	b.n	800370c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003706:	e001      	b.n	800370c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003708:	2302      	movs	r3, #2
 800370a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800370c:	7dfb      	ldrb	r3, [r7, #23]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40022000 	.word	0x40022000
 800371c:	40022100 	.word	0x40022100
 8003720:	40022300 	.word	0x40022300
 8003724:	58026300 	.word	0x58026300
 8003728:	fffff0fe 	.word	0xfffff0fe

0800372c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_ADC_Stop+0x16>
 800373e:	2302      	movs	r3, #2
 8003740:	e021      	b.n	8003786 <HAL_ADC_Stop+0x5a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800374a:	2103      	movs	r1, #3
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fdf7 	bl	8004340 <ADC_ConversionStop>
 8003752:	4603      	mov	r3, r0
 8003754:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10f      	bne.n	800377c <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 ff35 	bl	80045cc <ADC_Disable>
 8003762:	4603      	mov	r3, r0
 8003764:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d107      	bne.n	800377c <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003770:	4b07      	ldr	r3, [pc, #28]	@ (8003790 <HAL_ADC_Stop+0x64>)
 8003772:	4013      	ands	r3, r2
 8003774:	f043 0201 	orr.w	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	ffffeefe 	.word	0xffffeefe

08003794 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a72      	ldr	r2, [pc, #456]	@ (800396c <HAL_ADC_PollForConversion+0x1d8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d004      	beq.n	80037b2 <HAL_ADC_PollForConversion+0x1e>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a70      	ldr	r2, [pc, #448]	@ (8003970 <HAL_ADC_PollForConversion+0x1dc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d101      	bne.n	80037b6 <HAL_ADC_PollForConversion+0x22>
 80037b2:	4b70      	ldr	r3, [pc, #448]	@ (8003974 <HAL_ADC_PollForConversion+0x1e0>)
 80037b4:	e000      	b.n	80037b8 <HAL_ADC_PollForConversion+0x24>
 80037b6:	4b70      	ldr	r3, [pc, #448]	@ (8003978 <HAL_ADC_PollForConversion+0x1e4>)
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff fbc9 	bl	8002f50 <LL_ADC_GetMultimode>
 80037be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d102      	bne.n	80037ce <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80037c8:	2308      	movs	r3, #8
 80037ca:	61fb      	str	r3, [r7, #28]
 80037cc:	e037      	b.n	800383e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2b05      	cmp	r3, #5
 80037d8:	d002      	beq.n	80037e0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b09      	cmp	r3, #9
 80037de:	d111      	bne.n	8003804 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f2:	f043 0220 	orr.w	r2, r3, #32
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e0b1      	b.n	8003962 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80037fe:	2304      	movs	r3, #4
 8003800:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003802:	e01c      	b.n	800383e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a58      	ldr	r2, [pc, #352]	@ (800396c <HAL_ADC_PollForConversion+0x1d8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d004      	beq.n	8003818 <HAL_ADC_PollForConversion+0x84>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a57      	ldr	r2, [pc, #348]	@ (8003970 <HAL_ADC_PollForConversion+0x1dc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d101      	bne.n	800381c <HAL_ADC_PollForConversion+0x88>
 8003818:	4b56      	ldr	r3, [pc, #344]	@ (8003974 <HAL_ADC_PollForConversion+0x1e0>)
 800381a:	e000      	b.n	800381e <HAL_ADC_PollForConversion+0x8a>
 800381c:	4b56      	ldr	r3, [pc, #344]	@ (8003978 <HAL_ADC_PollForConversion+0x1e4>)
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fba4 	bl	8002f6c <LL_ADC_GetMultiDMATransfer>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382e:	f043 0220 	orr.w	r2, r3, #32
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e093      	b.n	8003962 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800383a:	2304      	movs	r3, #4
 800383c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800383e:	f7ff f971 	bl	8002b24 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003844:	e021      	b.n	800388a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384c:	d01d      	beq.n	800388a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800384e:	f7ff f969 	bl	8002b24 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d302      	bcc.n	8003864 <HAL_ADC_PollForConversion+0xd0>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d112      	bne.n	800388a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	4013      	ands	r3, r2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10b      	bne.n	800388a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003876:	f043 0204 	orr.w	r2, r3, #4
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e06b      	b.n	8003962 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	4013      	ands	r3, r2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0d6      	beq.n	8003846 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800389c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff faa7 	bl	8002dfc <LL_ADC_REG_IsTriggerSourceSWStart>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01c      	beq.n	80038ee <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	7e5b      	ldrb	r3, [r3, #25]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d118      	bne.n	80038ee <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d111      	bne.n	80038ee <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e6:	f043 0201 	orr.w	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003970 <HAL_ADC_PollForConversion+0x1dc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d002      	beq.n	80038fe <HAL_ADC_PollForConversion+0x16a>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	e000      	b.n	8003900 <HAL_ADC_PollForConversion+0x16c>
 80038fe:	4b1b      	ldr	r3, [pc, #108]	@ (800396c <HAL_ADC_PollForConversion+0x1d8>)
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	4293      	cmp	r3, r2
 8003906:	d008      	beq.n	800391a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b05      	cmp	r3, #5
 8003912:	d002      	beq.n	800391a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b09      	cmp	r3, #9
 8003918:	d104      	bne.n	8003924 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	e00c      	b.n	800393e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a11      	ldr	r2, [pc, #68]	@ (8003970 <HAL_ADC_PollForConversion+0x1dc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d002      	beq.n	8003934 <HAL_ADC_PollForConversion+0x1a0>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	e000      	b.n	8003936 <HAL_ADC_PollForConversion+0x1a2>
 8003934:	4b0d      	ldr	r3, [pc, #52]	@ (800396c <HAL_ADC_PollForConversion+0x1d8>)
 8003936:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	2b08      	cmp	r3, #8
 8003942:	d104      	bne.n	800394e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2208      	movs	r2, #8
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	e008      	b.n	8003960 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d103      	bne.n	8003960 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	220c      	movs	r2, #12
 800395e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40022000 	.word	0x40022000
 8003970:	40022100 	.word	0x40022100
 8003974:	40022300 	.word	0x40022300
 8003978:	58026300 	.word	0x58026300

0800397c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b0a5      	sub	sp, #148	@ 0x94
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039b2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4aa4      	ldr	r2, [pc, #656]	@ (8003c4c <HAL_ADC_ConfigChannel+0x2b4>)
 80039ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d102      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x34>
 80039c6:	2302      	movs	r3, #2
 80039c8:	f000 bca2 	b.w	8004310 <HAL_ADC_ConfigChannel+0x978>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fb99 	bl	8003110 <LL_ADC_REG_IsConversionOngoing>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f040 8486 	bne.w	80042f2 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	db31      	blt.n	8003a52 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a97      	ldr	r2, [pc, #604]	@ (8003c50 <HAL_ADC_ConfigChannel+0x2b8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d02c      	beq.n	8003a52 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d108      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x7e>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	0e9b      	lsrs	r3, r3, #26
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	2201      	movs	r2, #1
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	e016      	b.n	8003a44 <HAL_ADC_ConfigChannel+0xac>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003a24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a26:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003a28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8003a2e:	2320      	movs	r3, #32
 8003a30:	e003      	b.n	8003a3a <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8003a32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a34:	fab3 f383 	clz	r3, r3
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	2201      	movs	r2, #1
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	69d1      	ldr	r1, [r2, #28]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6812      	ldr	r2, [r2, #0]
 8003a4e:	430b      	orrs	r3, r1
 8003a50:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6859      	ldr	r1, [r3, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f7ff f9df 	bl	8002e22 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fb51 	bl	8003110 <LL_ADC_REG_IsConversionOngoing>
 8003a6e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fb72 	bl	8003160 <LL_ADC_INJ_IsConversionOngoing>
 8003a7c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f040 824a 	bne.w	8003f1e <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f040 8245 	bne.w	8003f1e <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6818      	ldr	r0, [r3, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	6819      	ldr	r1, [r3, #0]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f7ff f9ea 	bl	8002e7a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a69      	ldr	r2, [pc, #420]	@ (8003c50 <HAL_ADC_ConfigChannel+0x2b8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d10d      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	695a      	ldr	r2, [r3, #20]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	08db      	lsrs	r3, r3, #3
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003aca:	e032      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003acc:	4b61      	ldr	r3, [pc, #388]	@ (8003c54 <HAL_ADC_ConfigChannel+0x2bc>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003ad4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ad8:	d10b      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x15a>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	089b      	lsrs	r3, r3, #2
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	e01d      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x196>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10b      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x180>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	695a      	ldr	r2, [r3, #20]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	089b      	lsrs	r3, r3, #2
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	e00a      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x196>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	695a      	ldr	r2, [r3, #20]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	089b      	lsrs	r3, r3, #2
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d048      	beq.n	8003bcc <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6919      	ldr	r1, [r3, #16]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b4a:	f7ff f865 	bl	8002c18 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a3f      	ldr	r2, [pc, #252]	@ (8003c50 <HAL_ADC_ConfigChannel+0x2b8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d119      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	6919      	ldr	r1, [r3, #16]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	461a      	mov	r2, r3
 8003b66:	f7ff f8fd 	bl	8002d64 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6919      	ldr	r1, [r3, #16]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d102      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x1ea>
 8003b7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b80:	e000      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x1ec>
 8003b82:	2300      	movs	r3, #0
 8003b84:	461a      	mov	r2, r3
 8003b86:	f7ff f8cb 	bl	8002d20 <LL_ADC_SetOffsetSaturation>
 8003b8a:	e1c8      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	6919      	ldr	r1, [r3, #16]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d102      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x20c>
 8003b9e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003ba2:	e000      	b.n	8003ba6 <HAL_ADC_ConfigChannel+0x20e>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f7ff f898 	bl	8002cdc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	6919      	ldr	r1, [r3, #16]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	7e1b      	ldrb	r3, [r3, #24]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d102      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x22a>
 8003bbc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003bc0:	e000      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x22c>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	f7ff f86f 	bl	8002ca8 <LL_ADC_SetDataRightShift>
 8003bca:	e1a8      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c50 <HAL_ADC_ConfigChannel+0x2b8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	f040 815b 	bne.w	8003e8e <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff f84c 	bl	8002c7c <LL_ADC_GetOffsetChannel>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x26c>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff f841 	bl	8002c7c <LL_ADC_GetOffsetChannel>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	0e9b      	lsrs	r3, r3, #26
 8003bfe:	f003 021f 	and.w	r2, r3, #31
 8003c02:	e017      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x29c>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff f836 	bl	8002c7c <LL_ADC_GetOffsetChannel>
 8003c10:	4603      	mov	r3, r0
 8003c12:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c16:	fa93 f3a3 	rbit	r3, r3
 8003c1a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003c1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003c26:	2320      	movs	r3, #32
 8003c28:	e003      	b.n	8003c32 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8003c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c2c:	fab3 f383 	clz	r3, r3
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	461a      	mov	r2, r3
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10b      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x2c0>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	0e9b      	lsrs	r3, r3, #26
 8003c46:	f003 031f 	and.w	r3, r3, #31
 8003c4a:	e017      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x2e4>
 8003c4c:	47ff0000 	.word	0x47ff0000
 8003c50:	58026000 	.word	0x58026000
 8003c54:	5c001000 	.word	0x5c001000
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003c66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c68:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003c6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8003c70:	2320      	movs	r3, #32
 8003c72:	e003      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003c74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c76:	fab3 f383 	clz	r3, r3
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d106      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2200      	movs	r2, #0
 8003c86:	2100      	movs	r1, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff f88d 	bl	8002da8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2101      	movs	r1, #1
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fe fff1 	bl	8002c7c <LL_ADC_GetOffsetChannel>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10a      	bne.n	8003cba <HAL_ADC_ConfigChannel+0x322>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2101      	movs	r1, #1
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fe ffe6 	bl	8002c7c <LL_ADC_GetOffsetChannel>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	0e9b      	lsrs	r3, r3, #26
 8003cb4:	f003 021f 	and.w	r2, r3, #31
 8003cb8:	e017      	b.n	8003cea <HAL_ADC_ConfigChannel+0x352>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe ffdb 	bl	8002c7c <LL_ADC_GetOffsetChannel>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ccc:	fa93 f3a3 	rbit	r3, r3
 8003cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cd4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8003cdc:	2320      	movs	r3, #32
 8003cde:	e003      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8003ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce2:	fab3 f383 	clz	r3, r3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d105      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x36a>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	0e9b      	lsrs	r3, r3, #26
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	e011      	b.n	8003d26 <HAL_ADC_ConfigChannel+0x38e>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003d10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d12:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003d14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003d1a:	2320      	movs	r3, #32
 8003d1c:	e003      	b.n	8003d26 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d20:	fab3 f383 	clz	r3, r3
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d106      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	2101      	movs	r1, #1
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff f838 	bl	8002da8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2102      	movs	r1, #2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe ff9c 	bl	8002c7c <LL_ADC_GetOffsetChannel>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10a      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x3cc>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2102      	movs	r1, #2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fe ff91 	bl	8002c7c <LL_ADC_GetOffsetChannel>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	0e9b      	lsrs	r3, r3, #26
 8003d5e:	f003 021f 	and.w	r2, r3, #31
 8003d62:	e017      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x3fc>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2102      	movs	r1, #2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe ff86 	bl	8002c7c <LL_ADC_GetOffsetChannel>
 8003d70:	4603      	mov	r3, r0
 8003d72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d76:	fa93 f3a3 	rbit	r3, r3
 8003d7a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003d86:	2320      	movs	r3, #32
 8003d88:	e003      	b.n	8003d92 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d8c:	fab3 f383 	clz	r3, r3
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d105      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x414>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	0e9b      	lsrs	r3, r3, #26
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	e011      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x438>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db4:	fa93 f3a3 	rbit	r3, r3
 8003db8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003dc4:	2320      	movs	r3, #32
 8003dc6:	e003      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dca:	fab3 f383 	clz	r3, r3
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d106      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2102      	movs	r1, #2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fe ffe3 	bl	8002da8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2103      	movs	r1, #3
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fe ff47 	bl	8002c7c <LL_ADC_GetOffsetChannel>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10a      	bne.n	8003e0e <HAL_ADC_ConfigChannel+0x476>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2103      	movs	r1, #3
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe ff3c 	bl	8002c7c <LL_ADC_GetOffsetChannel>
 8003e04:	4603      	mov	r3, r0
 8003e06:	0e9b      	lsrs	r3, r3, #26
 8003e08:	f003 021f 	and.w	r2, r3, #31
 8003e0c:	e017      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x4a6>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2103      	movs	r1, #3
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe ff31 	bl	8002c7c <LL_ADC_GetOffsetChannel>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	fa93 f3a3 	rbit	r3, r3
 8003e24:	61fb      	str	r3, [r7, #28]
  return result;
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003e30:	2320      	movs	r3, #32
 8003e32:	e003      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	fab3 f383 	clz	r3, r3
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d105      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x4be>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	0e9b      	lsrs	r3, r3, #26
 8003e50:	f003 031f 	and.w	r3, r3, #31
 8003e54:	e011      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x4e2>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	fa93 f3a3 	rbit	r3, r3
 8003e62:	613b      	str	r3, [r7, #16]
  return result;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8003e6e:	2320      	movs	r3, #32
 8003e70:	e003      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	fab3 f383 	clz	r3, r3
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d14f      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2200      	movs	r2, #0
 8003e84:	2103      	movs	r1, #3
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fe ff8e 	bl	8002da8 <LL_ADC_SetOffsetState>
 8003e8c:	e047      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	069b      	lsls	r3, r3, #26
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d107      	bne.n	8003eb2 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003eb0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eb8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	069b      	lsls	r3, r3, #26
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d107      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ed4:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003edc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	069b      	lsls	r3, r3, #26
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d107      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ef8:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f00:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	069b      	lsls	r3, r3, #26
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d107      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f1c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff f8a6 	bl	8003074 <LL_ADC_IsEnabled>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f040 81ea 	bne.w	8004304 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	6819      	ldr	r1, [r3, #0]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f7fe ffc7 	bl	8002ed0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	4a7a      	ldr	r2, [pc, #488]	@ (8004130 <HAL_ADC_ConfigChannel+0x798>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	f040 80e0 	bne.w	800410e <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4977      	ldr	r1, [pc, #476]	@ (8004134 <HAL_ADC_ConfigChannel+0x79c>)
 8003f58:	428b      	cmp	r3, r1
 8003f5a:	d147      	bne.n	8003fec <HAL_ADC_ConfigChannel+0x654>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4975      	ldr	r1, [pc, #468]	@ (8004138 <HAL_ADC_ConfigChannel+0x7a0>)
 8003f62:	428b      	cmp	r3, r1
 8003f64:	d040      	beq.n	8003fe8 <HAL_ADC_ConfigChannel+0x650>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4974      	ldr	r1, [pc, #464]	@ (800413c <HAL_ADC_ConfigChannel+0x7a4>)
 8003f6c:	428b      	cmp	r3, r1
 8003f6e:	d039      	beq.n	8003fe4 <HAL_ADC_ConfigChannel+0x64c>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4972      	ldr	r1, [pc, #456]	@ (8004140 <HAL_ADC_ConfigChannel+0x7a8>)
 8003f76:	428b      	cmp	r3, r1
 8003f78:	d032      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0x648>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4971      	ldr	r1, [pc, #452]	@ (8004144 <HAL_ADC_ConfigChannel+0x7ac>)
 8003f80:	428b      	cmp	r3, r1
 8003f82:	d02b      	beq.n	8003fdc <HAL_ADC_ConfigChannel+0x644>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	496f      	ldr	r1, [pc, #444]	@ (8004148 <HAL_ADC_ConfigChannel+0x7b0>)
 8003f8a:	428b      	cmp	r3, r1
 8003f8c:	d024      	beq.n	8003fd8 <HAL_ADC_ConfigChannel+0x640>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	496e      	ldr	r1, [pc, #440]	@ (800414c <HAL_ADC_ConfigChannel+0x7b4>)
 8003f94:	428b      	cmp	r3, r1
 8003f96:	d01d      	beq.n	8003fd4 <HAL_ADC_ConfigChannel+0x63c>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	496c      	ldr	r1, [pc, #432]	@ (8004150 <HAL_ADC_ConfigChannel+0x7b8>)
 8003f9e:	428b      	cmp	r3, r1
 8003fa0:	d016      	beq.n	8003fd0 <HAL_ADC_ConfigChannel+0x638>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	496b      	ldr	r1, [pc, #428]	@ (8004154 <HAL_ADC_ConfigChannel+0x7bc>)
 8003fa8:	428b      	cmp	r3, r1
 8003faa:	d00f      	beq.n	8003fcc <HAL_ADC_ConfigChannel+0x634>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4969      	ldr	r1, [pc, #420]	@ (8004158 <HAL_ADC_ConfigChannel+0x7c0>)
 8003fb2:	428b      	cmp	r3, r1
 8003fb4:	d008      	beq.n	8003fc8 <HAL_ADC_ConfigChannel+0x630>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4968      	ldr	r1, [pc, #416]	@ (800415c <HAL_ADC_ConfigChannel+0x7c4>)
 8003fbc:	428b      	cmp	r3, r1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x62c>
 8003fc0:	4b67      	ldr	r3, [pc, #412]	@ (8004160 <HAL_ADC_ConfigChannel+0x7c8>)
 8003fc2:	e0a0      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	e09e      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8003fc8:	4b66      	ldr	r3, [pc, #408]	@ (8004164 <HAL_ADC_ConfigChannel+0x7cc>)
 8003fca:	e09c      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8003fcc:	4b66      	ldr	r3, [pc, #408]	@ (8004168 <HAL_ADC_ConfigChannel+0x7d0>)
 8003fce:	e09a      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8003fd0:	4b60      	ldr	r3, [pc, #384]	@ (8004154 <HAL_ADC_ConfigChannel+0x7bc>)
 8003fd2:	e098      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8003fd4:	4b5e      	ldr	r3, [pc, #376]	@ (8004150 <HAL_ADC_ConfigChannel+0x7b8>)
 8003fd6:	e096      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8003fd8:	4b64      	ldr	r3, [pc, #400]	@ (800416c <HAL_ADC_ConfigChannel+0x7d4>)
 8003fda:	e094      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8003fdc:	4b64      	ldr	r3, [pc, #400]	@ (8004170 <HAL_ADC_ConfigChannel+0x7d8>)
 8003fde:	e092      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8003fe0:	4b64      	ldr	r3, [pc, #400]	@ (8004174 <HAL_ADC_ConfigChannel+0x7dc>)
 8003fe2:	e090      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8003fe4:	4b64      	ldr	r3, [pc, #400]	@ (8004178 <HAL_ADC_ConfigChannel+0x7e0>)
 8003fe6:	e08e      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e08c      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4962      	ldr	r1, [pc, #392]	@ (800417c <HAL_ADC_ConfigChannel+0x7e4>)
 8003ff2:	428b      	cmp	r3, r1
 8003ff4:	d140      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x6e0>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	494f      	ldr	r1, [pc, #316]	@ (8004138 <HAL_ADC_ConfigChannel+0x7a0>)
 8003ffc:	428b      	cmp	r3, r1
 8003ffe:	d039      	beq.n	8004074 <HAL_ADC_ConfigChannel+0x6dc>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	494d      	ldr	r1, [pc, #308]	@ (800413c <HAL_ADC_ConfigChannel+0x7a4>)
 8004006:	428b      	cmp	r3, r1
 8004008:	d032      	beq.n	8004070 <HAL_ADC_ConfigChannel+0x6d8>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	494c      	ldr	r1, [pc, #304]	@ (8004140 <HAL_ADC_ConfigChannel+0x7a8>)
 8004010:	428b      	cmp	r3, r1
 8004012:	d02b      	beq.n	800406c <HAL_ADC_ConfigChannel+0x6d4>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	494a      	ldr	r1, [pc, #296]	@ (8004144 <HAL_ADC_ConfigChannel+0x7ac>)
 800401a:	428b      	cmp	r3, r1
 800401c:	d024      	beq.n	8004068 <HAL_ADC_ConfigChannel+0x6d0>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4949      	ldr	r1, [pc, #292]	@ (8004148 <HAL_ADC_ConfigChannel+0x7b0>)
 8004024:	428b      	cmp	r3, r1
 8004026:	d01d      	beq.n	8004064 <HAL_ADC_ConfigChannel+0x6cc>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4947      	ldr	r1, [pc, #284]	@ (800414c <HAL_ADC_ConfigChannel+0x7b4>)
 800402e:	428b      	cmp	r3, r1
 8004030:	d016      	beq.n	8004060 <HAL_ADC_ConfigChannel+0x6c8>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4946      	ldr	r1, [pc, #280]	@ (8004150 <HAL_ADC_ConfigChannel+0x7b8>)
 8004038:	428b      	cmp	r3, r1
 800403a:	d00f      	beq.n	800405c <HAL_ADC_ConfigChannel+0x6c4>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4944      	ldr	r1, [pc, #272]	@ (8004154 <HAL_ADC_ConfigChannel+0x7bc>)
 8004042:	428b      	cmp	r3, r1
 8004044:	d008      	beq.n	8004058 <HAL_ADC_ConfigChannel+0x6c0>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4944      	ldr	r1, [pc, #272]	@ (800415c <HAL_ADC_ConfigChannel+0x7c4>)
 800404c:	428b      	cmp	r3, r1
 800404e:	d101      	bne.n	8004054 <HAL_ADC_ConfigChannel+0x6bc>
 8004050:	4b43      	ldr	r3, [pc, #268]	@ (8004160 <HAL_ADC_ConfigChannel+0x7c8>)
 8004052:	e058      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8004054:	2300      	movs	r3, #0
 8004056:	e056      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8004058:	4b43      	ldr	r3, [pc, #268]	@ (8004168 <HAL_ADC_ConfigChannel+0x7d0>)
 800405a:	e054      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 800405c:	4b3d      	ldr	r3, [pc, #244]	@ (8004154 <HAL_ADC_ConfigChannel+0x7bc>)
 800405e:	e052      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8004060:	4b3b      	ldr	r3, [pc, #236]	@ (8004150 <HAL_ADC_ConfigChannel+0x7b8>)
 8004062:	e050      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8004064:	4b41      	ldr	r3, [pc, #260]	@ (800416c <HAL_ADC_ConfigChannel+0x7d4>)
 8004066:	e04e      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8004068:	4b41      	ldr	r3, [pc, #260]	@ (8004170 <HAL_ADC_ConfigChannel+0x7d8>)
 800406a:	e04c      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 800406c:	4b41      	ldr	r3, [pc, #260]	@ (8004174 <HAL_ADC_ConfigChannel+0x7dc>)
 800406e:	e04a      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8004070:	4b41      	ldr	r3, [pc, #260]	@ (8004178 <HAL_ADC_ConfigChannel+0x7e0>)
 8004072:	e048      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8004074:	2301      	movs	r3, #1
 8004076:	e046      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4940      	ldr	r1, [pc, #256]	@ (8004180 <HAL_ADC_ConfigChannel+0x7e8>)
 800407e:	428b      	cmp	r3, r1
 8004080:	d140      	bne.n	8004104 <HAL_ADC_ConfigChannel+0x76c>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	492c      	ldr	r1, [pc, #176]	@ (8004138 <HAL_ADC_ConfigChannel+0x7a0>)
 8004088:	428b      	cmp	r3, r1
 800408a:	d039      	beq.n	8004100 <HAL_ADC_ConfigChannel+0x768>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	492a      	ldr	r1, [pc, #168]	@ (800413c <HAL_ADC_ConfigChannel+0x7a4>)
 8004092:	428b      	cmp	r3, r1
 8004094:	d032      	beq.n	80040fc <HAL_ADC_ConfigChannel+0x764>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4929      	ldr	r1, [pc, #164]	@ (8004140 <HAL_ADC_ConfigChannel+0x7a8>)
 800409c:	428b      	cmp	r3, r1
 800409e:	d02b      	beq.n	80040f8 <HAL_ADC_ConfigChannel+0x760>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4927      	ldr	r1, [pc, #156]	@ (8004144 <HAL_ADC_ConfigChannel+0x7ac>)
 80040a6:	428b      	cmp	r3, r1
 80040a8:	d024      	beq.n	80040f4 <HAL_ADC_ConfigChannel+0x75c>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4926      	ldr	r1, [pc, #152]	@ (8004148 <HAL_ADC_ConfigChannel+0x7b0>)
 80040b0:	428b      	cmp	r3, r1
 80040b2:	d01d      	beq.n	80040f0 <HAL_ADC_ConfigChannel+0x758>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4924      	ldr	r1, [pc, #144]	@ (800414c <HAL_ADC_ConfigChannel+0x7b4>)
 80040ba:	428b      	cmp	r3, r1
 80040bc:	d016      	beq.n	80040ec <HAL_ADC_ConfigChannel+0x754>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4923      	ldr	r1, [pc, #140]	@ (8004150 <HAL_ADC_ConfigChannel+0x7b8>)
 80040c4:	428b      	cmp	r3, r1
 80040c6:	d00f      	beq.n	80040e8 <HAL_ADC_ConfigChannel+0x750>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4926      	ldr	r1, [pc, #152]	@ (8004168 <HAL_ADC_ConfigChannel+0x7d0>)
 80040ce:	428b      	cmp	r3, r1
 80040d0:	d008      	beq.n	80040e4 <HAL_ADC_ConfigChannel+0x74c>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	492b      	ldr	r1, [pc, #172]	@ (8004184 <HAL_ADC_ConfigChannel+0x7ec>)
 80040d8:	428b      	cmp	r3, r1
 80040da:	d101      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x748>
 80040dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004188 <HAL_ADC_ConfigChannel+0x7f0>)
 80040de:	e012      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 80040e0:	2300      	movs	r3, #0
 80040e2:	e010      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 80040e4:	4b27      	ldr	r3, [pc, #156]	@ (8004184 <HAL_ADC_ConfigChannel+0x7ec>)
 80040e6:	e00e      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 80040e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004154 <HAL_ADC_ConfigChannel+0x7bc>)
 80040ea:	e00c      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 80040ec:	4b18      	ldr	r3, [pc, #96]	@ (8004150 <HAL_ADC_ConfigChannel+0x7b8>)
 80040ee:	e00a      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 80040f0:	4b1e      	ldr	r3, [pc, #120]	@ (800416c <HAL_ADC_ConfigChannel+0x7d4>)
 80040f2:	e008      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 80040f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004170 <HAL_ADC_ConfigChannel+0x7d8>)
 80040f6:	e006      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 80040f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004174 <HAL_ADC_ConfigChannel+0x7dc>)
 80040fa:	e004      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 80040fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004178 <HAL_ADC_ConfigChannel+0x7e0>)
 80040fe:	e002      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <HAL_ADC_ConfigChannel+0x76e>
 8004104:	2300      	movs	r3, #0
 8004106:	4619      	mov	r1, r3
 8004108:	4610      	mov	r0, r2
 800410a:	f7fe fd4b 	bl	8002ba4 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	f280 80f6 	bge.w	8004304 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a05      	ldr	r2, [pc, #20]	@ (8004134 <HAL_ADC_ConfigChannel+0x79c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_ADC_ConfigChannel+0x794>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a15      	ldr	r2, [pc, #84]	@ (800417c <HAL_ADC_ConfigChannel+0x7e4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d131      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x7f8>
 800412c:	4b17      	ldr	r3, [pc, #92]	@ (800418c <HAL_ADC_ConfigChannel+0x7f4>)
 800412e:	e030      	b.n	8004192 <HAL_ADC_ConfigChannel+0x7fa>
 8004130:	47ff0000 	.word	0x47ff0000
 8004134:	40022000 	.word	0x40022000
 8004138:	04300002 	.word	0x04300002
 800413c:	08600004 	.word	0x08600004
 8004140:	0c900008 	.word	0x0c900008
 8004144:	10c00010 	.word	0x10c00010
 8004148:	14f00020 	.word	0x14f00020
 800414c:	2a000400 	.word	0x2a000400
 8004150:	2e300800 	.word	0x2e300800
 8004154:	32601000 	.word	0x32601000
 8004158:	43210000 	.word	0x43210000
 800415c:	4b840000 	.word	0x4b840000
 8004160:	4fb80000 	.word	0x4fb80000
 8004164:	47520000 	.word	0x47520000
 8004168:	36902000 	.word	0x36902000
 800416c:	25b00200 	.word	0x25b00200
 8004170:	21800100 	.word	0x21800100
 8004174:	1d500080 	.word	0x1d500080
 8004178:	19200040 	.word	0x19200040
 800417c:	40022100 	.word	0x40022100
 8004180:	58026000 	.word	0x58026000
 8004184:	3ac04000 	.word	0x3ac04000
 8004188:	3ef08000 	.word	0x3ef08000
 800418c:	40022300 	.word	0x40022300
 8004190:	4b61      	ldr	r3, [pc, #388]	@ (8004318 <HAL_ADC_ConfigChannel+0x980>)
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe fcf8 	bl	8002b88 <LL_ADC_GetCommonPathInternalCh>
 8004198:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a5f      	ldr	r2, [pc, #380]	@ (800431c <HAL_ADC_ConfigChannel+0x984>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d004      	beq.n	80041ae <HAL_ADC_ConfigChannel+0x816>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a5d      	ldr	r2, [pc, #372]	@ (8004320 <HAL_ADC_ConfigChannel+0x988>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d10e      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x834>
 80041ae:	485b      	ldr	r0, [pc, #364]	@ (800431c <HAL_ADC_ConfigChannel+0x984>)
 80041b0:	f7fe ff60 	bl	8003074 <LL_ADC_IsEnabled>
 80041b4:	4604      	mov	r4, r0
 80041b6:	485a      	ldr	r0, [pc, #360]	@ (8004320 <HAL_ADC_ConfigChannel+0x988>)
 80041b8:	f7fe ff5c 	bl	8003074 <LL_ADC_IsEnabled>
 80041bc:	4603      	mov	r3, r0
 80041be:	4323      	orrs	r3, r4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	e008      	b.n	80041de <HAL_ADC_ConfigChannel+0x846>
 80041cc:	4855      	ldr	r0, [pc, #340]	@ (8004324 <HAL_ADC_ConfigChannel+0x98c>)
 80041ce:	f7fe ff51 	bl	8003074 <LL_ADC_IsEnabled>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bf0c      	ite	eq
 80041d8:	2301      	moveq	r3, #1
 80041da:	2300      	movne	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d07d      	beq.n	80042de <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a50      	ldr	r2, [pc, #320]	@ (8004328 <HAL_ADC_ConfigChannel+0x990>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d130      	bne.n	800424e <HAL_ADC_ConfigChannel+0x8b6>
 80041ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d12b      	bne.n	800424e <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a4a      	ldr	r2, [pc, #296]	@ (8004324 <HAL_ADC_ConfigChannel+0x98c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	f040 8081 	bne.w	8004304 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a45      	ldr	r2, [pc, #276]	@ (800431c <HAL_ADC_ConfigChannel+0x984>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d004      	beq.n	8004216 <HAL_ADC_ConfigChannel+0x87e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a43      	ldr	r2, [pc, #268]	@ (8004320 <HAL_ADC_ConfigChannel+0x988>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d101      	bne.n	800421a <HAL_ADC_ConfigChannel+0x882>
 8004216:	4a45      	ldr	r2, [pc, #276]	@ (800432c <HAL_ADC_ConfigChannel+0x994>)
 8004218:	e000      	b.n	800421c <HAL_ADC_ConfigChannel+0x884>
 800421a:	4a3f      	ldr	r2, [pc, #252]	@ (8004318 <HAL_ADC_ConfigChannel+0x980>)
 800421c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800421e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004222:	4619      	mov	r1, r3
 8004224:	4610      	mov	r0, r2
 8004226:	f7fe fc9c 	bl	8002b62 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800422a:	4b41      	ldr	r3, [pc, #260]	@ (8004330 <HAL_ADC_ConfigChannel+0x998>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	099b      	lsrs	r3, r3, #6
 8004230:	4a40      	ldr	r2, [pc, #256]	@ (8004334 <HAL_ADC_ConfigChannel+0x99c>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	099b      	lsrs	r3, r3, #6
 8004238:	3301      	adds	r3, #1
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800423e:	e002      	b.n	8004246 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3b01      	subs	r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f9      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800424c:	e05a      	b.n	8004304 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a39      	ldr	r2, [pc, #228]	@ (8004338 <HAL_ADC_ConfigChannel+0x9a0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d11e      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x8fe>
 8004258:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800425a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d119      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2f      	ldr	r2, [pc, #188]	@ (8004324 <HAL_ADC_ConfigChannel+0x98c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d14b      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a2a      	ldr	r2, [pc, #168]	@ (800431c <HAL_ADC_ConfigChannel+0x984>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d004      	beq.n	8004280 <HAL_ADC_ConfigChannel+0x8e8>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a29      	ldr	r2, [pc, #164]	@ (8004320 <HAL_ADC_ConfigChannel+0x988>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d101      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x8ec>
 8004280:	4a2a      	ldr	r2, [pc, #168]	@ (800432c <HAL_ADC_ConfigChannel+0x994>)
 8004282:	e000      	b.n	8004286 <HAL_ADC_ConfigChannel+0x8ee>
 8004284:	4a24      	ldr	r2, [pc, #144]	@ (8004318 <HAL_ADC_ConfigChannel+0x980>)
 8004286:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004288:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800428c:	4619      	mov	r1, r3
 800428e:	4610      	mov	r0, r2
 8004290:	f7fe fc67 	bl	8002b62 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004294:	e036      	b.n	8004304 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a28      	ldr	r2, [pc, #160]	@ (800433c <HAL_ADC_ConfigChannel+0x9a4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d131      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x96c>
 80042a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d12c      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004324 <HAL_ADC_ConfigChannel+0x98c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d127      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a18      	ldr	r2, [pc, #96]	@ (800431c <HAL_ADC_ConfigChannel+0x984>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d004      	beq.n	80042c8 <HAL_ADC_ConfigChannel+0x930>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a17      	ldr	r2, [pc, #92]	@ (8004320 <HAL_ADC_ConfigChannel+0x988>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d101      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x934>
 80042c8:	4a18      	ldr	r2, [pc, #96]	@ (800432c <HAL_ADC_ConfigChannel+0x994>)
 80042ca:	e000      	b.n	80042ce <HAL_ADC_ConfigChannel+0x936>
 80042cc:	4a12      	ldr	r2, [pc, #72]	@ (8004318 <HAL_ADC_ConfigChannel+0x980>)
 80042ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f7fe fc43 	bl	8002b62 <LL_ADC_SetCommonPathInternalCh>
 80042dc:	e012      	b.n	8004304 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e2:	f043 0220 	orr.w	r2, r3, #32
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80042f0:	e008      	b.n	8004304 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042f6:	f043 0220 	orr.w	r2, r3, #32
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800430c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8004310:	4618      	mov	r0, r3
 8004312:	3794      	adds	r7, #148	@ 0x94
 8004314:	46bd      	mov	sp, r7
 8004316:	bd90      	pop	{r4, r7, pc}
 8004318:	58026300 	.word	0x58026300
 800431c:	40022000 	.word	0x40022000
 8004320:	40022100 	.word	0x40022100
 8004324:	58026000 	.word	0x58026000
 8004328:	c7520000 	.word	0xc7520000
 800432c:	40022300 	.word	0x40022300
 8004330:	2400000c 	.word	0x2400000c
 8004334:	053e2d63 	.word	0x053e2d63
 8004338:	c3210000 	.word	0xc3210000
 800433c:	cb840000 	.word	0xcb840000

08004340 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800434a:	2300      	movs	r3, #0
 800434c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f7fe feda 	bl	8003110 <LL_ADC_REG_IsConversionOngoing>
 800435c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe fefc 	bl	8003160 <LL_ADC_INJ_IsConversionOngoing>
 8004368:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d103      	bne.n	8004378 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8098 	beq.w	80044a8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d02a      	beq.n	80043dc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	7e5b      	ldrb	r3, [r3, #25]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d126      	bne.n	80043dc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	7e1b      	ldrb	r3, [r3, #24]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d122      	bne.n	80043dc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004396:	2301      	movs	r3, #1
 8004398:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800439a:	e014      	b.n	80043c6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	4a45      	ldr	r2, [pc, #276]	@ (80044b4 <ADC_ConversionStop+0x174>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d90d      	bls.n	80043c0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043a8:	f043 0210 	orr.w	r2, r3, #16
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043b4:	f043 0201 	orr.w	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e074      	b.n	80044aa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	3301      	adds	r3, #1
 80043c4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d0:	2b40      	cmp	r3, #64	@ 0x40
 80043d2:	d1e3      	bne.n	800439c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2240      	movs	r2, #64	@ 0x40
 80043da:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d014      	beq.n	800440c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe fe92 	bl	8003110 <LL_ADC_REG_IsConversionOngoing>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00c      	beq.n	800440c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe fe4f 	bl	800309a <LL_ADC_IsDisableOngoing>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d104      	bne.n	800440c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe fe6e 	bl	80030e8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d014      	beq.n	800443c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe fea2 	bl	8003160 <LL_ADC_INJ_IsConversionOngoing>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00c      	beq.n	800443c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe fe37 	bl	800309a <LL_ADC_IsDisableOngoing>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d104      	bne.n	800443c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe fe7e 	bl	8003138 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d005      	beq.n	800444e <ADC_ConversionStop+0x10e>
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	2b03      	cmp	r3, #3
 8004446:	d105      	bne.n	8004454 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004448:	230c      	movs	r3, #12
 800444a:	617b      	str	r3, [r7, #20]
        break;
 800444c:	e005      	b.n	800445a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800444e:	2308      	movs	r3, #8
 8004450:	617b      	str	r3, [r7, #20]
        break;
 8004452:	e002      	b.n	800445a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004454:	2304      	movs	r3, #4
 8004456:	617b      	str	r3, [r7, #20]
        break;
 8004458:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800445a:	f7fe fb63 	bl	8002b24 <HAL_GetTick>
 800445e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004460:	e01b      	b.n	800449a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004462:	f7fe fb5f 	bl	8002b24 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b05      	cmp	r3, #5
 800446e:	d914      	bls.n	800449a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	4013      	ands	r3, r2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00d      	beq.n	800449a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004482:	f043 0210 	orr.w	r2, r3, #16
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800448e:	f043 0201 	orr.w	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e007      	b.n	80044aa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1dc      	bne.n	8004462 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3720      	adds	r7, #32
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	000cdbff 	.word	0x000cdbff

080044b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fe fdd5 	bl	8003074 <LL_ADC_IsEnabled>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d16e      	bne.n	80045ae <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	4b38      	ldr	r3, [pc, #224]	@ (80045b8 <ADC_Enable+0x100>)
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00d      	beq.n	80044fa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e2:	f043 0210 	orr.w	r2, r3, #16
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044ee:	f043 0201 	orr.w	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e05a      	b.n	80045b0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe fd90 	bl	8003024 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004504:	f7fe fb0e 	bl	8002b24 <HAL_GetTick>
 8004508:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a2b      	ldr	r2, [pc, #172]	@ (80045bc <ADC_Enable+0x104>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d004      	beq.n	800451e <ADC_Enable+0x66>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a29      	ldr	r2, [pc, #164]	@ (80045c0 <ADC_Enable+0x108>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d101      	bne.n	8004522 <ADC_Enable+0x6a>
 800451e:	4b29      	ldr	r3, [pc, #164]	@ (80045c4 <ADC_Enable+0x10c>)
 8004520:	e000      	b.n	8004524 <ADC_Enable+0x6c>
 8004522:	4b29      	ldr	r3, [pc, #164]	@ (80045c8 <ADC_Enable+0x110>)
 8004524:	4618      	mov	r0, r3
 8004526:	f7fe fd13 	bl	8002f50 <LL_ADC_GetMultimode>
 800452a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a23      	ldr	r2, [pc, #140]	@ (80045c0 <ADC_Enable+0x108>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d002      	beq.n	800453c <ADC_Enable+0x84>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	e000      	b.n	800453e <ADC_Enable+0x86>
 800453c:	4b1f      	ldr	r3, [pc, #124]	@ (80045bc <ADC_Enable+0x104>)
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	4293      	cmp	r3, r2
 8004544:	d02c      	beq.n	80045a0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d130      	bne.n	80045ae <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800454c:	e028      	b.n	80045a0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fd8e 	bl	8003074 <LL_ADC_IsEnabled>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d104      	bne.n	8004568 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f7fe fd5e 	bl	8003024 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004568:	f7fe fadc 	bl	8002b24 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d914      	bls.n	80045a0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b01      	cmp	r3, #1
 8004582:	d00d      	beq.n	80045a0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004588:	f043 0210 	orr.w	r2, r3, #16
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004594:	f043 0201 	orr.w	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e007      	b.n	80045b0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d1cf      	bne.n	800454e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	8000003f 	.word	0x8000003f
 80045bc:	40022000 	.word	0x40022000
 80045c0:	40022100 	.word	0x40022100
 80045c4:	40022300 	.word	0x40022300
 80045c8:	58026300 	.word	0x58026300

080045cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fe fd5e 	bl	800309a <LL_ADC_IsDisableOngoing>
 80045de:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fe fd45 	bl	8003074 <LL_ADC_IsEnabled>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d047      	beq.n	8004680 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d144      	bne.n	8004680 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 030d 	and.w	r3, r3, #13
 8004600:	2b01      	cmp	r3, #1
 8004602:	d10c      	bne.n	800461e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe fd1f 	bl	800304c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2203      	movs	r2, #3
 8004614:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004616:	f7fe fa85 	bl	8002b24 <HAL_GetTick>
 800461a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800461c:	e029      	b.n	8004672 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004622:	f043 0210 	orr.w	r2, r3, #16
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800462e:	f043 0201 	orr.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e023      	b.n	8004682 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800463a:	f7fe fa73 	bl	8002b24 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d914      	bls.n	8004672 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00d      	beq.n	8004672 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800465a:	f043 0210 	orr.w	r2, r3, #16
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004666:	f043 0201 	orr.w	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e007      	b.n	8004682 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1dc      	bne.n	800463a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a6c      	ldr	r2, [pc, #432]	@ (800484c <ADC_ConfigureBoostMode+0x1c0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d004      	beq.n	80046a8 <ADC_ConfigureBoostMode+0x1c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a6b      	ldr	r2, [pc, #428]	@ (8004850 <ADC_ConfigureBoostMode+0x1c4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d109      	bne.n	80046bc <ADC_ConfigureBoostMode+0x30>
 80046a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004854 <ADC_ConfigureBoostMode+0x1c8>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	bf14      	ite	ne
 80046b4:	2301      	movne	r3, #1
 80046b6:	2300      	moveq	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	e008      	b.n	80046ce <ADC_ConfigureBoostMode+0x42>
 80046bc:	4b66      	ldr	r3, [pc, #408]	@ (8004858 <ADC_ConfigureBoostMode+0x1cc>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	bf14      	ite	ne
 80046c8:	2301      	movne	r3, #1
 80046ca:	2300      	moveq	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01c      	beq.n	800470c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80046d2:	f002 fdcd 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 80046d6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046e0:	d010      	beq.n	8004704 <ADC_ConfigureBoostMode+0x78>
 80046e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046e6:	d873      	bhi.n	80047d0 <ADC_ConfigureBoostMode+0x144>
 80046e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ec:	d002      	beq.n	80046f4 <ADC_ConfigureBoostMode+0x68>
 80046ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046f2:	d16d      	bne.n	80047d0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	0c1b      	lsrs	r3, r3, #16
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	60fb      	str	r3, [r7, #12]
        break;
 8004702:	e068      	b.n	80047d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	60fb      	str	r3, [r7, #12]
        break;
 800470a:	e064      	b.n	80047d6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800470c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004710:	f04f 0100 	mov.w	r1, #0
 8004714:	f003 ffa8 	bl	8008668 <HAL_RCCEx_GetPeriphCLKFreq>
 8004718:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004722:	d051      	beq.n	80047c8 <ADC_ConfigureBoostMode+0x13c>
 8004724:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004728:	d854      	bhi.n	80047d4 <ADC_ConfigureBoostMode+0x148>
 800472a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800472e:	d047      	beq.n	80047c0 <ADC_ConfigureBoostMode+0x134>
 8004730:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004734:	d84e      	bhi.n	80047d4 <ADC_ConfigureBoostMode+0x148>
 8004736:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800473a:	d03d      	beq.n	80047b8 <ADC_ConfigureBoostMode+0x12c>
 800473c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004740:	d848      	bhi.n	80047d4 <ADC_ConfigureBoostMode+0x148>
 8004742:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004746:	d033      	beq.n	80047b0 <ADC_ConfigureBoostMode+0x124>
 8004748:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800474c:	d842      	bhi.n	80047d4 <ADC_ConfigureBoostMode+0x148>
 800474e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004752:	d029      	beq.n	80047a8 <ADC_ConfigureBoostMode+0x11c>
 8004754:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004758:	d83c      	bhi.n	80047d4 <ADC_ConfigureBoostMode+0x148>
 800475a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800475e:	d01a      	beq.n	8004796 <ADC_ConfigureBoostMode+0x10a>
 8004760:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004764:	d836      	bhi.n	80047d4 <ADC_ConfigureBoostMode+0x148>
 8004766:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800476a:	d014      	beq.n	8004796 <ADC_ConfigureBoostMode+0x10a>
 800476c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004770:	d830      	bhi.n	80047d4 <ADC_ConfigureBoostMode+0x148>
 8004772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004776:	d00e      	beq.n	8004796 <ADC_ConfigureBoostMode+0x10a>
 8004778:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800477c:	d82a      	bhi.n	80047d4 <ADC_ConfigureBoostMode+0x148>
 800477e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004782:	d008      	beq.n	8004796 <ADC_ConfigureBoostMode+0x10a>
 8004784:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004788:	d824      	bhi.n	80047d4 <ADC_ConfigureBoostMode+0x148>
 800478a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800478e:	d002      	beq.n	8004796 <ADC_ConfigureBoostMode+0x10a>
 8004790:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004794:	d11e      	bne.n	80047d4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	0c9b      	lsrs	r3, r3, #18
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a4:	60fb      	str	r3, [r7, #12]
        break;
 80047a6:	e016      	b.n	80047d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	091b      	lsrs	r3, r3, #4
 80047ac:	60fb      	str	r3, [r7, #12]
        break;
 80047ae:	e012      	b.n	80047d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	60fb      	str	r3, [r7, #12]
        break;
 80047b6:	e00e      	b.n	80047d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	099b      	lsrs	r3, r3, #6
 80047bc:	60fb      	str	r3, [r7, #12]
        break;
 80047be:	e00a      	b.n	80047d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	09db      	lsrs	r3, r3, #7
 80047c4:	60fb      	str	r3, [r7, #12]
        break;
 80047c6:	e006      	b.n	80047d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	0a1b      	lsrs	r3, r3, #8
 80047cc:	60fb      	str	r3, [r7, #12]
        break;
 80047ce:	e002      	b.n	80047d6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80047d0:	bf00      	nop
 80047d2:	e000      	b.n	80047d6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80047d4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4a1f      	ldr	r2, [pc, #124]	@ (800485c <ADC_ConfigureBoostMode+0x1d0>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d808      	bhi.n	80047f6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80047f2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80047f4:	e025      	b.n	8004842 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4a19      	ldr	r2, [pc, #100]	@ (8004860 <ADC_ConfigureBoostMode+0x1d4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d80a      	bhi.n	8004814 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004810:	609a      	str	r2, [r3, #8]
}
 8004812:	e016      	b.n	8004842 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4a13      	ldr	r2, [pc, #76]	@ (8004864 <ADC_ConfigureBoostMode+0x1d8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d80a      	bhi.n	8004832 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800482e:	609a      	str	r2, [r3, #8]
}
 8004830:	e007      	b.n	8004842 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004840:	609a      	str	r2, [r3, #8]
}
 8004842:	bf00      	nop
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40022000 	.word	0x40022000
 8004850:	40022100 	.word	0x40022100
 8004854:	40022300 	.word	0x40022300
 8004858:	58026300 	.word	0x58026300
 800485c:	005f5e10 	.word	0x005f5e10
 8004860:	00bebc20 	.word	0x00bebc20
 8004864:	017d7840 	.word	0x017d7840

08004868 <LL_ADC_IsEnabled>:
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <LL_ADC_IsEnabled+0x18>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <LL_ADC_IsEnabled+0x1a>
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <LL_ADC_REG_IsConversionOngoing>:
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d101      	bne.n	80048a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80048b4:	b590      	push	{r4, r7, lr}
 80048b6:	b0a3      	sub	sp, #140	@ 0x8c
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e0c1      	b.n	8004a56 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80048da:	2300      	movs	r3, #0
 80048dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80048de:	2300      	movs	r3, #0
 80048e0:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a5e      	ldr	r2, [pc, #376]	@ (8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d102      	bne.n	80048f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80048ec:	4b5d      	ldr	r3, [pc, #372]	@ (8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	e001      	b.n	80048f6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10b      	bne.n	8004914 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004900:	f043 0220 	orr.w	r2, r3, #32
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0a0      	b.n	8004a56 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff ffb9 	bl	800488e <LL_ADC_REG_IsConversionOngoing>
 800491c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff ffb2 	bl	800488e <LL_ADC_REG_IsConversionOngoing>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	f040 8081 	bne.w	8004a34 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004932:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004936:	2b00      	cmp	r3, #0
 8004938:	d17c      	bne.n	8004a34 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a48      	ldr	r2, [pc, #288]	@ (8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d004      	beq.n	800494e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a46      	ldr	r2, [pc, #280]	@ (8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d101      	bne.n	8004952 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800494e:	4b46      	ldr	r3, [pc, #280]	@ (8004a68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004950:	e000      	b.n	8004954 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004952:	4b46      	ldr	r3, [pc, #280]	@ (8004a6c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004954:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d039      	beq.n	80049d2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800495e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	431a      	orrs	r2, r3
 800496c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800496e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a3a      	ldr	r2, [pc, #232]	@ (8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d004      	beq.n	8004984 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a39      	ldr	r2, [pc, #228]	@ (8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d10e      	bne.n	80049a2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004984:	4836      	ldr	r0, [pc, #216]	@ (8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004986:	f7ff ff6f 	bl	8004868 <LL_ADC_IsEnabled>
 800498a:	4604      	mov	r4, r0
 800498c:	4835      	ldr	r0, [pc, #212]	@ (8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800498e:	f7ff ff6b 	bl	8004868 <LL_ADC_IsEnabled>
 8004992:	4603      	mov	r3, r0
 8004994:	4323      	orrs	r3, r4
 8004996:	2b00      	cmp	r3, #0
 8004998:	bf0c      	ite	eq
 800499a:	2301      	moveq	r3, #1
 800499c:	2300      	movne	r3, #0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	e008      	b.n	80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80049a2:	4833      	ldr	r0, [pc, #204]	@ (8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80049a4:	f7ff ff60 	bl	8004868 <LL_ADC_IsEnabled>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bf0c      	ite	eq
 80049ae:	2301      	moveq	r3, #1
 80049b0:	2300      	movne	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d047      	beq.n	8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80049b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80049be:	4013      	ands	r3, r2
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	6811      	ldr	r1, [r2, #0]
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	6892      	ldr	r2, [r2, #8]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	431a      	orrs	r2, r3
 80049cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049ce:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049d0:	e03a      	b.n	8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80049d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049dc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d004      	beq.n	80049f2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d10e      	bne.n	8004a10 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80049f2:	481b      	ldr	r0, [pc, #108]	@ (8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049f4:	f7ff ff38 	bl	8004868 <LL_ADC_IsEnabled>
 80049f8:	4604      	mov	r4, r0
 80049fa:	481a      	ldr	r0, [pc, #104]	@ (8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049fc:	f7ff ff34 	bl	8004868 <LL_ADC_IsEnabled>
 8004a00:	4603      	mov	r3, r0
 8004a02:	4323      	orrs	r3, r4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	bf0c      	ite	eq
 8004a08:	2301      	moveq	r3, #1
 8004a0a:	2300      	movne	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	e008      	b.n	8004a22 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004a10:	4817      	ldr	r0, [pc, #92]	@ (8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004a12:	f7ff ff29 	bl	8004868 <LL_ADC_IsEnabled>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	bf0c      	ite	eq
 8004a1c:	2301      	moveq	r3, #1
 8004a1e:	2300      	movne	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d010      	beq.n	8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	4b12      	ldr	r3, [pc, #72]	@ (8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004a30:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a32:	e009      	b.n	8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a38:	f043 0220 	orr.w	r2, r3, #32
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004a46:	e000      	b.n	8004a4a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004a52:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	378c      	adds	r7, #140	@ 0x8c
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd90      	pop	{r4, r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40022000 	.word	0x40022000
 8004a64:	40022100 	.word	0x40022100
 8004a68:	40022300 	.word	0x40022300
 8004a6c:	58026300 	.word	0x58026300
 8004a70:	58026000 	.word	0x58026000
 8004a74:	fffff0e0 	.word	0xfffff0e0

08004a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a88:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab8 <__NVIC_SetPriorityGrouping+0x40>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a94:	4013      	ands	r3, r2
 8004a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004aa0:	4b06      	ldr	r3, [pc, #24]	@ (8004abc <__NVIC_SetPriorityGrouping+0x44>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aa6:	4a04      	ldr	r2, [pc, #16]	@ (8004ab8 <__NVIC_SetPriorityGrouping+0x40>)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	60d3      	str	r3, [r2, #12]
}
 8004aac:	bf00      	nop
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	e000ed00 	.word	0xe000ed00
 8004abc:	05fa0000 	.word	0x05fa0000

08004ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ac4:	4b04      	ldr	r3, [pc, #16]	@ (8004ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	f003 0307 	and.w	r3, r3, #7
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	e000ed00 	.word	0xe000ed00

08004adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	db0b      	blt.n	8004b06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aee:	88fb      	ldrh	r3, [r7, #6]
 8004af0:	f003 021f 	and.w	r2, r3, #31
 8004af4:	4907      	ldr	r1, [pc, #28]	@ (8004b14 <__NVIC_EnableIRQ+0x38>)
 8004af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	2001      	movs	r0, #1
 8004afe:	fa00 f202 	lsl.w	r2, r0, r2
 8004b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	e000e100 	.word	0xe000e100

08004b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	6039      	str	r1, [r7, #0]
 8004b22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	db0a      	blt.n	8004b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	490c      	ldr	r1, [pc, #48]	@ (8004b64 <__NVIC_SetPriority+0x4c>)
 8004b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b36:	0112      	lsls	r2, r2, #4
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b40:	e00a      	b.n	8004b58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	4908      	ldr	r1, [pc, #32]	@ (8004b68 <__NVIC_SetPriority+0x50>)
 8004b48:	88fb      	ldrh	r3, [r7, #6]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	3b04      	subs	r3, #4
 8004b50:	0112      	lsls	r2, r2, #4
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	440b      	add	r3, r1
 8004b56:	761a      	strb	r2, [r3, #24]
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	e000e100 	.word	0xe000e100
 8004b68:	e000ed00 	.word	0xe000ed00

08004b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b089      	sub	sp, #36	@ 0x24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f1c3 0307 	rsb	r3, r3, #7
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	bf28      	it	cs
 8004b8a:	2304      	movcs	r3, #4
 8004b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	3304      	adds	r3, #4
 8004b92:	2b06      	cmp	r3, #6
 8004b94:	d902      	bls.n	8004b9c <NVIC_EncodePriority+0x30>
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	3b03      	subs	r3, #3
 8004b9a:	e000      	b.n	8004b9e <NVIC_EncodePriority+0x32>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43da      	mvns	r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	401a      	ands	r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbe:	43d9      	mvns	r1, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc4:	4313      	orrs	r3, r2
         );
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3724      	adds	r7, #36	@ 0x24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004be4:	d301      	bcc.n	8004bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004be6:	2301      	movs	r3, #1
 8004be8:	e00f      	b.n	8004c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bea:	4a0a      	ldr	r2, [pc, #40]	@ (8004c14 <SysTick_Config+0x40>)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bf2:	210f      	movs	r1, #15
 8004bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf8:	f7ff ff8e 	bl	8004b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bfc:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <SysTick_Config+0x40>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c02:	4b04      	ldr	r3, [pc, #16]	@ (8004c14 <SysTick_Config+0x40>)
 8004c04:	2207      	movs	r2, #7
 8004c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	e000e010 	.word	0xe000e010

08004c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff ff29 	bl	8004a78 <__NVIC_SetPriorityGrouping>
}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b086      	sub	sp, #24
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	4603      	mov	r3, r0
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	607a      	str	r2, [r7, #4]
 8004c3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c3c:	f7ff ff40 	bl	8004ac0 <__NVIC_GetPriorityGrouping>
 8004c40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	6978      	ldr	r0, [r7, #20]
 8004c48:	f7ff ff90 	bl	8004b6c <NVIC_EncodePriority>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c52:	4611      	mov	r1, r2
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff ff5f 	bl	8004b18 <__NVIC_SetPriority>
}
 8004c5a:	bf00      	nop
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	4603      	mov	r3, r0
 8004c6a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff ff33 	bl	8004adc <__NVIC_EnableIRQ>
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff ffa4 	bl	8004bd4 <SysTick_Config>
 8004c8c:	4603      	mov	r3, r0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b098      	sub	sp, #96	@ 0x60
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004ca0:	4a84      	ldr	r2, [pc, #528]	@ (8004eb4 <HAL_FDCAN_Init+0x21c>)
 8004ca2:	f107 030c 	add.w	r3, r7, #12
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	224c      	movs	r2, #76	@ 0x4c
 8004caa:	4618      	mov	r0, r3
 8004cac:	f007 f902 	bl	800beb4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e1c6      	b.n	8005048 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a7e      	ldr	r2, [pc, #504]	@ (8004eb8 <HAL_FDCAN_Init+0x220>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d106      	bne.n	8004cd2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ccc:	461a      	mov	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d106      	bne.n	8004cec <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7fd fbe8 	bl	80024bc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0210 	bic.w	r2, r2, #16
 8004cfa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cfc:	f7fd ff12 	bl	8002b24 <HAL_GetTick>
 8004d00:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004d02:	e014      	b.n	8004d2e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d04:	f7fd ff0e 	bl	8002b24 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b0a      	cmp	r3, #10
 8004d10:	d90d      	bls.n	8004d2e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d18:	f043 0201 	orr.w	r2, r3, #1
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2203      	movs	r2, #3
 8004d26:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e18c      	b.n	8005048 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d0e3      	beq.n	8004d04 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d4c:	f7fd feea 	bl	8002b24 <HAL_GetTick>
 8004d50:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d52:	e014      	b.n	8004d7e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d54:	f7fd fee6 	bl	8002b24 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b0a      	cmp	r3, #10
 8004d60:	d90d      	bls.n	8004d7e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d68:	f043 0201 	orr.w	r2, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2203      	movs	r2, #3
 8004d76:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e164      	b.n	8005048 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0e3      	beq.n	8004d54 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699a      	ldr	r2, [r3, #24]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0202 	orr.w	r2, r2, #2
 8004d9a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	7c1b      	ldrb	r3, [r3, #16]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d108      	bne.n	8004db6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004db2:	619a      	str	r2, [r3, #24]
 8004db4:	e007      	b.n	8004dc6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	699a      	ldr	r2, [r3, #24]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dc4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	7c5b      	ldrb	r3, [r3, #17]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d108      	bne.n	8004de0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	699a      	ldr	r2, [r3, #24]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ddc:	619a      	str	r2, [r3, #24]
 8004dde:	e007      	b.n	8004df0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004dee:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	7c9b      	ldrb	r3, [r3, #18]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d108      	bne.n	8004e0a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e06:	619a      	str	r2, [r3, #24]
 8004e08:	e007      	b.n	8004e1a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	699a      	ldr	r2, [r3, #24]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e18:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004e3e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0210 	bic.w	r2, r2, #16
 8004e4e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d108      	bne.n	8004e6a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699a      	ldr	r2, [r3, #24]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0204 	orr.w	r2, r2, #4
 8004e66:	619a      	str	r2, [r3, #24]
 8004e68:	e030      	b.n	8004ecc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d02c      	beq.n	8004ecc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d020      	beq.n	8004ebc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	699a      	ldr	r2, [r3, #24]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e88:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0210 	orr.w	r2, r2, #16
 8004e98:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d114      	bne.n	8004ecc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699a      	ldr	r2, [r3, #24]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 0220 	orr.w	r2, r2, #32
 8004eb0:	619a      	str	r2, [r3, #24]
 8004eb2:	e00b      	b.n	8004ecc <HAL_FDCAN_Init+0x234>
 8004eb4:	0800c8e4 	.word	0x0800c8e4
 8004eb8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699a      	ldr	r2, [r3, #24]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0220 	orr.w	r2, r2, #32
 8004eca:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004edc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ee4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ef4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ef6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f00:	d115      	bne.n	8004f2e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f06:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f10:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f16:	3b01      	subs	r3, #1
 8004f18:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004f1a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f22:	3b01      	subs	r3, #1
 8004f24:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004f2a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f2c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f54:	4413      	add	r3, r2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d011      	beq.n	8004f7e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004f62:	f023 0107 	bic.w	r1, r3, #7
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	3360      	adds	r3, #96	@ 0x60
 8004f6e:	443b      	add	r3, r7
 8004f70:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d011      	beq.n	8004faa <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f8e:	f023 0107 	bic.w	r1, r3, #7
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	3360      	adds	r3, #96	@ 0x60
 8004f9a:	443b      	add	r3, r7
 8004f9c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d012      	beq.n	8004fd8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004fba:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	3360      	adds	r3, #96	@ 0x60
 8004fc6:	443b      	add	r3, r7
 8004fc8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004fcc:	011a      	lsls	r2, r3, #4
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d012      	beq.n	8005006 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004fe8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	3360      	adds	r3, #96	@ 0x60
 8004ff4:	443b      	add	r3, r7
 8004ff6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004ffa:	021a      	lsls	r2, r3, #8
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a11      	ldr	r2, [pc, #68]	@ (8005050 <HAL_FDCAN_Init+0x3b8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d107      	bne.n	8005020 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f022 0203 	bic.w	r2, r2, #3
 800501e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 fdf7 	bl	8005c2c <FDCAN_CalcultateRamBlockAddresses>
 800503e:	4603      	mov	r3, r0
 8005040:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005044:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005048:	4618      	mov	r0, r3
 800504a:	3760      	adds	r7, #96	@ 0x60
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	4000a000 	.word	0x4000a000

08005054 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005064:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d002      	beq.n	8005072 <HAL_FDCAN_ConfigFilter+0x1e>
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d157      	bne.n	8005122 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d12b      	bne.n	80050d2 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	2b07      	cmp	r3, #7
 8005080:	d10d      	bne.n	800509e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800508e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005094:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8005096:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	e00e      	b.n	80050bc <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80050aa:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80050b2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	e025      	b.n	800511e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	075a      	lsls	r2, r3, #29
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	2b07      	cmp	r3, #7
 80050e6:	d103      	bne.n	80050f0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	e006      	b.n	80050fe <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	079a      	lsls	r2, r3, #30
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	4413      	add	r3, r2
 800510a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	3304      	adds	r3, #4
 8005116:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	e008      	b.n	8005134 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005128:	f043 0202 	orr.w	r2, r3, #2
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
  }
}
 8005134:	4618      	mov	r0, r3
 8005136:	371c      	adds	r7, #28
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	d111      	bne.n	8005178 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0201 	bic.w	r2, r2, #1
 800516a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	e008      	b.n	800518a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800517e:	f043 0204 	orr.w	r2, r3, #4
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
  }
}
 800518a:	4618      	mov	r0, r3
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b086      	sub	sp, #24
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d141      	bne.n	8005232 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80051b6:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d109      	bne.n	80051d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051c4:	f043 0220 	orr.w	r2, r3, #32
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e038      	b.n	8005244 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80051da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d009      	beq.n	80051f6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e026      	b.n	8005244 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80051fe:	0c1b      	lsrs	r3, r3, #16
 8005200:	f003 031f 	and.w	r3, r3, #31
 8005204:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 fe93 	bl	8005f38 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2101      	movs	r1, #1
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	fa01 f202 	lsl.w	r2, r1, r2
 800521e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005222:	2201      	movs	r2, #1
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	409a      	lsls	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	e008      	b.n	8005244 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005238:	f043 0208 	orr.w	r2, r3, #8
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
  }
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800524c:	b480      	push	{r7}
 800524e:	b08b      	sub	sp, #44	@ 0x2c
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800525a:	2300      	movs	r3, #0
 800525c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005264:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005266:	7efb      	ldrb	r3, [r7, #27]
 8005268:	2b02      	cmp	r3, #2
 800526a:	f040 8149 	bne.w	8005500 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b40      	cmp	r3, #64	@ 0x40
 8005272:	d14c      	bne.n	800530e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800527c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d109      	bne.n	8005298 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800528a:	f043 0220 	orr.w	r2, r3, #32
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e13c      	b.n	8005512 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d109      	bne.n	80052bc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e12a      	b.n	8005512 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052cc:	d10a      	bne.n	80052e4 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80052d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052de:	d101      	bne.n	80052e4 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80052e0:	2301      	movs	r3, #1
 80052e2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052ec:	0a1b      	lsrs	r3, r3, #8
 80052ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052f2:	69fa      	ldr	r2, [r7, #28]
 80052f4:	4413      	add	r3, r2
 80052f6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005300:	69f9      	ldr	r1, [r7, #28]
 8005302:	fb01 f303 	mul.w	r3, r1, r3
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	627b      	str	r3, [r7, #36]	@ 0x24
 800530c:	e068      	b.n	80053e0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b41      	cmp	r3, #65	@ 0x41
 8005312:	d14c      	bne.n	80053ae <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800531c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d109      	bne.n	8005338 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800532a:	f043 0220 	orr.w	r2, r3, #32
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e0ec      	b.n	8005512 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005340:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005344:	2b00      	cmp	r3, #0
 8005346:	d109      	bne.n	800535c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800534e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e0da      	b.n	8005512 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005364:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005368:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800536c:	d10a      	bne.n	8005384 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005376:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800537a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800537e:	d101      	bne.n	8005384 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005380:	2301      	movs	r3, #1
 8005382:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800538c:	0a1b      	lsrs	r3, r3, #8
 800538e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	4413      	add	r3, r2
 8005396:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053a0:	69f9      	ldr	r1, [r7, #28]
 80053a2:	fb01 f303 	mul.w	r3, r1, r3
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ac:	e018      	b.n	80053e0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d309      	bcc.n	80053cc <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053be:	f043 0220 	orr.w	r2, r3, #32
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0a2      	b.n	8005512 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	fb01 f303 	mul.w	r3, r1, r3
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80053e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d107      	bne.n	8005404 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	0c9b      	lsrs	r3, r3, #18
 80053fa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	e005      	b.n	8005410 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	3304      	adds	r3, #4
 800542c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	b29a      	uxth	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	0c1b      	lsrs	r3, r3, #16
 800543e:	f003 020f 	and.w	r2, r3, #15
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800545e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	0e1b      	lsrs	r3, r3, #24
 8005464:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800546c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	0fda      	lsrs	r2, r3, #31
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	3304      	adds	r3, #4
 800547a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005480:	2300      	movs	r3, #0
 8005482:	623b      	str	r3, [r7, #32]
 8005484:	e00a      	b.n	800549c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	441a      	add	r2, r3
 800548c:	6839      	ldr	r1, [r7, #0]
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	440b      	add	r3, r1
 8005492:	7812      	ldrb	r2, [r2, #0]
 8005494:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	3301      	adds	r3, #1
 800549a:	623b      	str	r3, [r7, #32]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005520 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80054a2:	5cd3      	ldrb	r3, [r2, r3]
 80054a4:	461a      	mov	r2, r3
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d3ec      	bcc.n	8005486 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b40      	cmp	r3, #64	@ 0x40
 80054b0:	d105      	bne.n	80054be <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69fa      	ldr	r2, [r7, #28]
 80054b8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80054bc:	e01e      	b.n	80054fc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b41      	cmp	r3, #65	@ 0x41
 80054c2:	d105      	bne.n	80054d0 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	69fa      	ldr	r2, [r7, #28]
 80054ca:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80054ce:	e015      	b.n	80054fc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b1f      	cmp	r3, #31
 80054d4:	d808      	bhi.n	80054e8 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2101      	movs	r1, #1
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	fa01 f202 	lsl.w	r2, r1, r2
 80054e2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80054e6:	e009      	b.n	80054fc <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f003 021f 	and.w	r2, r3, #31
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2101      	movs	r1, #1
 80054f4:	fa01 f202 	lsl.w	r2, r1, r2
 80054f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	e008      	b.n	8005512 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005506:	f043 0208 	orr.w	r2, r3, #8
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
  }
}
 8005512:	4618      	mov	r0, r3
 8005514:	372c      	adds	r7, #44	@ 0x2c
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	0800c940 	.word	0x0800c940

08005524 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005536:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005538:	7dfb      	ldrb	r3, [r7, #23]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d002      	beq.n	8005544 <HAL_FDCAN_ActivateNotification+0x20>
 800553e:	7dfb      	ldrb	r3, [r7, #23]
 8005540:	2b02      	cmp	r3, #2
 8005542:	d155      	bne.n	80055f0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	4013      	ands	r3, r2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d108      	bne.n	8005564 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0201 	orr.w	r2, r2, #1
 8005560:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005562:	e014      	b.n	800558e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4013      	ands	r3, r2
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	429a      	cmp	r2, r3
 8005572:	d108      	bne.n	8005586 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0202 	orr.w	r2, r2, #2
 8005582:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005584:	e003      	b.n	800558e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2203      	movs	r2, #3
 800558c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005594:	2b00      	cmp	r3, #0
 8005596:	d009      	beq.n	80055ac <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d009      	beq.n	80055ca <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005610 <HAL_FDCAN_ActivateNotification+0xec>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	6812      	ldr	r2, [r2, #0]
 80055da:	430b      	orrs	r3, r1
 80055dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80055de:	4b0d      	ldr	r3, [pc, #52]	@ (8005614 <HAL_FDCAN_ActivateNotification+0xf0>)
 80055e0:	695a      	ldr	r2, [r3, #20]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	0f9b      	lsrs	r3, r3, #30
 80055e6:	490b      	ldr	r1, [pc, #44]	@ (8005614 <HAL_FDCAN_ActivateNotification+0xf0>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	e008      	b.n	8005602 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055f6:	f043 0202 	orr.w	r2, r3, #2
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
  }
}
 8005602:	4618      	mov	r0, r3
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	3fcfffff 	.word	0x3fcfffff
 8005614:	4000a800 	.word	0x4000a800

08005618 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b096      	sub	sp, #88	@ 0x58
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005620:	4b9a      	ldr	r3, [pc, #616]	@ (800588c <HAL_FDCAN_IRQHandler+0x274>)
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	079b      	lsls	r3, r3, #30
 8005626:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005628:	4b98      	ldr	r3, [pc, #608]	@ (800588c <HAL_FDCAN_IRQHandler+0x274>)
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	079b      	lsls	r3, r3, #30
 800562e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005630:	4013      	ands	r3, r2
 8005632:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800563a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800563e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005646:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005648:	4013      	ands	r3, r2
 800564a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800565e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005660:	4013      	ands	r3, r2
 8005662:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800566a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800566e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005678:	4013      	ands	r3, r2
 800567a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005682:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005686:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800568e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005690:	4013      	ands	r3, r2
 8005692:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800569a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800569e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056a8:	4013      	ands	r3, r2
 80056aa:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80056bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056be:	0a1b      	lsrs	r3, r3, #8
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d010      	beq.n	80056ea <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80056c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ca:	0a1b      	lsrs	r3, r3, #8
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00a      	beq.n	80056ea <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80056de:	4b6b      	ldr	r3, [pc, #428]	@ (800588c <HAL_FDCAN_IRQHandler+0x274>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fa54 	bl	8005b92 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80056ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ec:	0a9b      	lsrs	r3, r3, #10
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d01d      	beq.n	8005732 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80056f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f8:	0a9b      	lsrs	r3, r3, #10
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d017      	beq.n	8005732 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800570a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005714:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005716:	4013      	ands	r3, r2
 8005718:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005722:	651a      	str	r2, [r3, #80]	@ 0x50
 8005724:	4b59      	ldr	r3, [pc, #356]	@ (800588c <HAL_FDCAN_IRQHandler+0x274>)
 8005726:	2200      	movs	r2, #0
 8005728:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800572a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 fa07 	bl	8005b40 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00d      	beq.n	8005754 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800573e:	4b54      	ldr	r3, [pc, #336]	@ (8005890 <HAL_FDCAN_IRQHandler+0x278>)
 8005740:	400b      	ands	r3, r1
 8005742:	6513      	str	r3, [r2, #80]	@ 0x50
 8005744:	4a51      	ldr	r2, [pc, #324]	@ (800588c <HAL_FDCAN_IRQHandler+0x274>)
 8005746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005748:	0f9b      	lsrs	r3, r3, #30
 800574a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800574c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f9c0 	bl	8005ad4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005754:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00d      	beq.n	8005776 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005760:	4b4b      	ldr	r3, [pc, #300]	@ (8005890 <HAL_FDCAN_IRQHandler+0x278>)
 8005762:	400b      	ands	r3, r1
 8005764:	6513      	str	r3, [r2, #80]	@ 0x50
 8005766:	4a49      	ldr	r2, [pc, #292]	@ (800588c <HAL_FDCAN_IRQHandler+0x274>)
 8005768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800576a:	0f9b      	lsrs	r3, r3, #30
 800576c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800576e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f9ba 	bl	8005aea <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005776:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00d      	beq.n	8005798 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005782:	4b43      	ldr	r3, [pc, #268]	@ (8005890 <HAL_FDCAN_IRQHandler+0x278>)
 8005784:	400b      	ands	r3, r1
 8005786:	6513      	str	r3, [r2, #80]	@ 0x50
 8005788:	4a40      	ldr	r2, [pc, #256]	@ (800588c <HAL_FDCAN_IRQHandler+0x274>)
 800578a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800578c:	0f9b      	lsrs	r3, r3, #30
 800578e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005790:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fc f97e 	bl	8001a94 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00d      	beq.n	80057ba <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80057a4:	4b3a      	ldr	r3, [pc, #232]	@ (8005890 <HAL_FDCAN_IRQHandler+0x278>)
 80057a6:	400b      	ands	r3, r1
 80057a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80057aa:	4a38      	ldr	r2, [pc, #224]	@ (800588c <HAL_FDCAN_IRQHandler+0x274>)
 80057ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057ae:	0f9b      	lsrs	r3, r3, #30
 80057b0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80057b2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f9a3 	bl	8005b00 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80057ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057bc:	0adb      	lsrs	r3, r3, #11
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d010      	beq.n	80057e8 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80057c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c8:	0adb      	lsrs	r3, r3, #11
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057da:	651a      	str	r2, [r3, #80]	@ 0x50
 80057dc:	4b2b      	ldr	r3, [pc, #172]	@ (800588c <HAL_FDCAN_IRQHandler+0x274>)
 80057de:	2200      	movs	r2, #0
 80057e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f997 	bl	8005b16 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80057e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ea:	0a5b      	lsrs	r3, r3, #9
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d01d      	beq.n	8005830 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80057f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f6:	0a5b      	lsrs	r3, r3, #9
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d017      	beq.n	8005830 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005808:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005814:	4013      	ands	r3, r2
 8005816:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005820:	651a      	str	r2, [r3, #80]	@ 0x50
 8005822:	4b1a      	ldr	r3, [pc, #104]	@ (800588c <HAL_FDCAN_IRQHandler+0x274>)
 8005824:	2200      	movs	r2, #0
 8005826:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005828:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f97d 	bl	8005b2a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005832:	0cdb      	lsrs	r3, r3, #19
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b00      	cmp	r3, #0
 800583a:	d010      	beq.n	800585e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800583c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583e:	0cdb      	lsrs	r3, r3, #19
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005850:	651a      	str	r2, [r3, #80]	@ 0x50
 8005852:	4b0e      	ldr	r3, [pc, #56]	@ (800588c <HAL_FDCAN_IRQHandler+0x274>)
 8005854:	2200      	movs	r2, #0
 8005856:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f97c 	bl	8005b56 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800585e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005860:	0c1b      	lsrs	r3, r3, #16
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d016      	beq.n	8005898 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800586a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586c:	0c1b      	lsrs	r3, r3, #16
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d010      	beq.n	8005898 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800587e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005880:	4b02      	ldr	r3, [pc, #8]	@ (800588c <HAL_FDCAN_IRQHandler+0x274>)
 8005882:	2200      	movs	r2, #0
 8005884:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	e004      	b.n	8005894 <HAL_FDCAN_IRQHandler+0x27c>
 800588a:	bf00      	nop
 800588c:	4000a800 	.word	0x4000a800
 8005890:	3fcfffff 	.word	0x3fcfffff
 8005894:	f000 f969 	bl	8005b6a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800589a:	0c9b      	lsrs	r3, r3, #18
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d010      	beq.n	80058c6 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80058a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a6:	0c9b      	lsrs	r3, r3, #18
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80058b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80058ba:	4b83      	ldr	r3, [pc, #524]	@ (8005ac8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80058bc:	2200      	movs	r2, #0
 80058be:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f95c 	bl	8005b7e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80058c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c8:	0c5b      	lsrs	r3, r3, #17
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d015      	beq.n	80058fe <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80058d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d4:	0c5b      	lsrs	r3, r3, #17
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00f      	beq.n	80058fe <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80058e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80058e8:	4b77      	ldr	r3, [pc, #476]	@ (8005ac8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80058fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00d      	beq.n	8005920 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800590a:	4b70      	ldr	r3, [pc, #448]	@ (8005acc <HAL_FDCAN_IRQHandler+0x4b4>)
 800590c:	400b      	ands	r3, r1
 800590e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005910:	4a6d      	ldr	r2, [pc, #436]	@ (8005ac8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005914:	0f9b      	lsrs	r3, r3, #30
 8005916:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005918:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f94d 	bl	8005bba <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005922:	2b00      	cmp	r3, #0
 8005924:	d011      	beq.n	800594a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800592c:	4b67      	ldr	r3, [pc, #412]	@ (8005acc <HAL_FDCAN_IRQHandler+0x4b4>)
 800592e:	400b      	ands	r3, r1
 8005930:	6513      	str	r3, [r2, #80]	@ 0x50
 8005932:	4a65      	ldr	r2, [pc, #404]	@ (8005ac8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005936:	0f9b      	lsrs	r3, r3, #30
 8005938:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a60      	ldr	r2, [pc, #384]	@ (8005ad0 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	f040 80ac 	bne.w	8005aae <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 80a4 	beq.w	8005aae <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	f003 030f 	and.w	r3, r3, #15
 8005970:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800597a:	4013      	ands	r3, r2
 800597c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005988:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005990:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005992:	4013      	ands	r3, r2
 8005994:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80059a0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059aa:	4013      	ands	r3, r2
 80059ac:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80059b8:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c0:	6a3a      	ldr	r2, [r7, #32]
 80059c2:	4013      	ands	r3, r2
 80059c4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80059d0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d8:	69fa      	ldr	r2, [r7, #28]
 80059da:	4013      	ands	r3, r2
 80059dc:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80059ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d007      	beq.n	8005a04 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059fa:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80059fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f8e6 	bl	8005bd0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a10:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005a12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f8e6 	bl	8005be6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	099b      	lsrs	r3, r3, #6
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d01a      	beq.n	8005a5c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	099b      	lsrs	r3, r3, #6
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d014      	beq.n	8005a5c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a38:	0c1b      	lsrs	r3, r3, #16
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a48:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2240      	movs	r2, #64	@ 0x40
 8005a50:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	6939      	ldr	r1, [r7, #16]
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f8d0 	bl	8005bfc <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d007      	beq.n	8005a72 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a68:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005a6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f8d1 	bl	8005c14 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	6a3a      	ldr	r2, [r7, #32]
 8005a7e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00b      	beq.n	8005aae <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f874 	bl	8005ba6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005abe:	bf00      	nop
 8005ac0:	3758      	adds	r7, #88	@ 0x58
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	4000a800 	.word	0x4000a800
 8005acc:	3fcfffff 	.word	0x3fcfffff
 8005ad0:	4000a000 	.word	0x4000a000

08005ad4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
	...

08005c2c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c38:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005c42:	4ba7      	ldr	r3, [pc, #668]	@ (8005ee0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	0091      	lsls	r1, r2, #2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6812      	ldr	r2, [r2, #0]
 8005c4e:	430b      	orrs	r3, r1
 8005c50:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c5c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c64:	041a      	lsls	r2, r3, #16
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	4413      	add	r3, r2
 8005c78:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005c82:	4b97      	ldr	r3, [pc, #604]	@ (8005ee0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	0091      	lsls	r1, r2, #2
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	430b      	orrs	r3, r1
 8005c90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c9c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca4:	041a      	lsls	r2, r3, #16
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	4413      	add	r3, r2
 8005cba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005cc4:	4b86      	ldr	r3, [pc, #536]	@ (8005ee0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	0091      	lsls	r1, r2, #2
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005cde:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce6:	041a      	lsls	r2, r3, #16
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005cfa:	fb02 f303 	mul.w	r3, r2, r3
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	4413      	add	r3, r2
 8005d02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005d0c:	4b74      	ldr	r3, [pc, #464]	@ (8005ee0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d0e:	4013      	ands	r3, r2
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	0091      	lsls	r1, r2, #2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6812      	ldr	r2, [r2, #0]
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d26:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d2e:	041a      	lsls	r2, r3, #16
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005d42:	fb02 f303 	mul.w	r3, r2, r3
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	4413      	add	r3, r2
 8005d4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005d54:	4b62      	ldr	r3, [pc, #392]	@ (8005ee0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d56:	4013      	ands	r3, r2
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	0091      	lsls	r1, r2, #2
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6812      	ldr	r2, [r2, #0]
 8005d60:	430b      	orrs	r3, r1
 8005d62:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005d6e:	fb02 f303 	mul.w	r3, r2, r3
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	4413      	add	r3, r2
 8005d76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005d80:	4b57      	ldr	r3, [pc, #348]	@ (8005ee0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d82:	4013      	ands	r3, r2
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	0091      	lsls	r1, r2, #2
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6812      	ldr	r2, [r2, #0]
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d9a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da2:	041a      	lsls	r2, r3, #16
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	4413      	add	r3, r2
 8005db8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005dc2:	4b47      	ldr	r3, [pc, #284]	@ (8005ee0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	0091      	lsls	r1, r2, #2
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6812      	ldr	r2, [r2, #0]
 8005dce:	430b      	orrs	r3, r1
 8005dd0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005ddc:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de4:	041a      	lsls	r2, r3, #16
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005df8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e00:	061a      	lsls	r2, r3, #24
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e10:	4b34      	ldr	r3, [pc, #208]	@ (8005ee4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005e12:	4413      	add	r3, r2
 8005e14:	009a      	lsls	r2, r3, #2
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	441a      	add	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	441a      	add	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005e46:	fb01 f303 	mul.w	r3, r1, r3
 8005e4a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005e4c:	441a      	add	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005e5e:	fb01 f303 	mul.w	r3, r1, r3
 8005e62:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005e64:	441a      	add	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e72:	6879      	ldr	r1, [r7, #4]
 8005e74:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005e76:	fb01 f303 	mul.w	r3, r1, r3
 8005e7a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005e7c:	441a      	add	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	441a      	add	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005ea6:	fb01 f303 	mul.w	r3, r1, r3
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	441a      	add	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005ec2:	fb01 f303 	mul.w	r3, r1, r3
 8005ec6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005ec8:	441a      	add	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed6:	4a04      	ldr	r2, [pc, #16]	@ (8005ee8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d915      	bls.n	8005f08 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005edc:	e006      	b.n	8005eec <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005ede:	bf00      	nop
 8005ee0:	ffff0003 	.word	0xffff0003
 8005ee4:	10002b00 	.word	0x10002b00
 8005ee8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ef2:	f043 0220 	orr.w	r2, r3, #32
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2203      	movs	r2, #3
 8005f00:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e010      	b.n	8005f2a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	e005      	b.n	8005f1c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	3304      	adds	r3, #4
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d3f3      	bcc.n	8005f10 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop

08005f38 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b089      	sub	sp, #36	@ 0x24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10a      	bne.n	8005f64 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005f56:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	61fb      	str	r3, [r7, #28]
 8005f62:	e00a      	b.n	8005f7a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005f6c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005f72:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f78:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005f84:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005f8a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005f90:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	fb01 f303 	mul.w	r3, r1, r3
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	3304      	adds	r3, #4
 8005fbc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005fca:	2300      	movs	r3, #0
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	e020      	b.n	8006012 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	3303      	adds	r3, #3
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	3302      	adds	r3, #2
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	440b      	add	r3, r1
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005fe8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	3301      	adds	r3, #1
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	440b      	add	r3, r1
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005ff6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006000:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	3304      	adds	r3, #4
 800600a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	3304      	adds	r3, #4
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	4a06      	ldr	r2, [pc, #24]	@ (8006030 <FDCAN_CopyMessageToRAM+0xf8>)
 8006018:	5cd3      	ldrb	r3, [r2, r3]
 800601a:	461a      	mov	r2, r3
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	4293      	cmp	r3, r2
 8006020:	d3d6      	bcc.n	8005fd0 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	3724      	adds	r7, #36	@ 0x24
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	0800c940 	.word	0x0800c940

08006034 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006034:	b480      	push	{r7}
 8006036:	b089      	sub	sp, #36	@ 0x24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800603e:	2300      	movs	r3, #0
 8006040:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006042:	4b86      	ldr	r3, [pc, #536]	@ (800625c <HAL_GPIO_Init+0x228>)
 8006044:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006046:	e18c      	b.n	8006362 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	2101      	movs	r1, #1
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	fa01 f303 	lsl.w	r3, r1, r3
 8006054:	4013      	ands	r3, r2
 8006056:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 817e 	beq.w	800635c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f003 0303 	and.w	r3, r3, #3
 8006068:	2b01      	cmp	r3, #1
 800606a:	d005      	beq.n	8006078 <HAL_GPIO_Init+0x44>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d130      	bne.n	80060da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	2203      	movs	r2, #3
 8006084:	fa02 f303 	lsl.w	r3, r2, r3
 8006088:	43db      	mvns	r3, r3
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	4013      	ands	r3, r2
 800608e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	fa02 f303 	lsl.w	r3, r2, r3
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	4313      	orrs	r3, r2
 80060a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060ae:	2201      	movs	r2, #1
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	43db      	mvns	r3, r3
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	4013      	ands	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	091b      	lsrs	r3, r3, #4
 80060c4:	f003 0201 	and.w	r2, r3, #1
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	fa02 f303 	lsl.w	r3, r2, r3
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f003 0303 	and.w	r3, r3, #3
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d017      	beq.n	8006116 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	2203      	movs	r2, #3
 80060f2:	fa02 f303 	lsl.w	r3, r2, r3
 80060f6:	43db      	mvns	r3, r3
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	4013      	ands	r3, r2
 80060fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	4313      	orrs	r3, r2
 800610e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d123      	bne.n	800616a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	08da      	lsrs	r2, r3, #3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3208      	adds	r2, #8
 800612a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	220f      	movs	r2, #15
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	43db      	mvns	r3, r3
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	4013      	ands	r3, r2
 8006144:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	fa02 f303 	lsl.w	r3, r2, r3
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	4313      	orrs	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	08da      	lsrs	r2, r3, #3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3208      	adds	r2, #8
 8006164:	69b9      	ldr	r1, [r7, #24]
 8006166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	2203      	movs	r2, #3
 8006176:	fa02 f303 	lsl.w	r3, r2, r3
 800617a:	43db      	mvns	r3, r3
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	4013      	ands	r3, r2
 8006180:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f003 0203 	and.w	r2, r3, #3
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	4313      	orrs	r3, r2
 8006196:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 80d8 	beq.w	800635c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061ac:	4b2c      	ldr	r3, [pc, #176]	@ (8006260 <HAL_GPIO_Init+0x22c>)
 80061ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80061b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006260 <HAL_GPIO_Init+0x22c>)
 80061b4:	f043 0302 	orr.w	r3, r3, #2
 80061b8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80061bc:	4b28      	ldr	r3, [pc, #160]	@ (8006260 <HAL_GPIO_Init+0x22c>)
 80061be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061ca:	4a26      	ldr	r2, [pc, #152]	@ (8006264 <HAL_GPIO_Init+0x230>)
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	089b      	lsrs	r3, r3, #2
 80061d0:	3302      	adds	r3, #2
 80061d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	220f      	movs	r2, #15
 80061e2:	fa02 f303 	lsl.w	r3, r2, r3
 80061e6:	43db      	mvns	r3, r3
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	4013      	ands	r3, r2
 80061ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006268 <HAL_GPIO_Init+0x234>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d04a      	beq.n	800628c <HAL_GPIO_Init+0x258>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a1c      	ldr	r2, [pc, #112]	@ (800626c <HAL_GPIO_Init+0x238>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d02b      	beq.n	8006256 <HAL_GPIO_Init+0x222>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a1b      	ldr	r2, [pc, #108]	@ (8006270 <HAL_GPIO_Init+0x23c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d025      	beq.n	8006252 <HAL_GPIO_Init+0x21e>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a1a      	ldr	r2, [pc, #104]	@ (8006274 <HAL_GPIO_Init+0x240>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d01f      	beq.n	800624e <HAL_GPIO_Init+0x21a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a19      	ldr	r2, [pc, #100]	@ (8006278 <HAL_GPIO_Init+0x244>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d019      	beq.n	800624a <HAL_GPIO_Init+0x216>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a18      	ldr	r2, [pc, #96]	@ (800627c <HAL_GPIO_Init+0x248>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d013      	beq.n	8006246 <HAL_GPIO_Init+0x212>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a17      	ldr	r2, [pc, #92]	@ (8006280 <HAL_GPIO_Init+0x24c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00d      	beq.n	8006242 <HAL_GPIO_Init+0x20e>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a16      	ldr	r2, [pc, #88]	@ (8006284 <HAL_GPIO_Init+0x250>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d007      	beq.n	800623e <HAL_GPIO_Init+0x20a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a15      	ldr	r2, [pc, #84]	@ (8006288 <HAL_GPIO_Init+0x254>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d101      	bne.n	800623a <HAL_GPIO_Init+0x206>
 8006236:	2309      	movs	r3, #9
 8006238:	e029      	b.n	800628e <HAL_GPIO_Init+0x25a>
 800623a:	230a      	movs	r3, #10
 800623c:	e027      	b.n	800628e <HAL_GPIO_Init+0x25a>
 800623e:	2307      	movs	r3, #7
 8006240:	e025      	b.n	800628e <HAL_GPIO_Init+0x25a>
 8006242:	2306      	movs	r3, #6
 8006244:	e023      	b.n	800628e <HAL_GPIO_Init+0x25a>
 8006246:	2305      	movs	r3, #5
 8006248:	e021      	b.n	800628e <HAL_GPIO_Init+0x25a>
 800624a:	2304      	movs	r3, #4
 800624c:	e01f      	b.n	800628e <HAL_GPIO_Init+0x25a>
 800624e:	2303      	movs	r3, #3
 8006250:	e01d      	b.n	800628e <HAL_GPIO_Init+0x25a>
 8006252:	2302      	movs	r3, #2
 8006254:	e01b      	b.n	800628e <HAL_GPIO_Init+0x25a>
 8006256:	2301      	movs	r3, #1
 8006258:	e019      	b.n	800628e <HAL_GPIO_Init+0x25a>
 800625a:	bf00      	nop
 800625c:	58000080 	.word	0x58000080
 8006260:	58024400 	.word	0x58024400
 8006264:	58000400 	.word	0x58000400
 8006268:	58020000 	.word	0x58020000
 800626c:	58020400 	.word	0x58020400
 8006270:	58020800 	.word	0x58020800
 8006274:	58020c00 	.word	0x58020c00
 8006278:	58021000 	.word	0x58021000
 800627c:	58021400 	.word	0x58021400
 8006280:	58021800 	.word	0x58021800
 8006284:	58021c00 	.word	0x58021c00
 8006288:	58022400 	.word	0x58022400
 800628c:	2300      	movs	r3, #0
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	f002 0203 	and.w	r2, r2, #3
 8006294:	0092      	lsls	r2, r2, #2
 8006296:	4093      	lsls	r3, r2
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	4313      	orrs	r3, r2
 800629c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800629e:	4938      	ldr	r1, [pc, #224]	@ (8006380 <HAL_GPIO_Init+0x34c>)
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	089b      	lsrs	r3, r3, #2
 80062a4:	3302      	adds	r3, #2
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	43db      	mvns	r3, r3
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	4013      	ands	r3, r2
 80062bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80062d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80062da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	43db      	mvns	r3, r3
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	4013      	ands	r3, r2
 80062ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006300:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	43db      	mvns	r3, r3
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	4013      	ands	r3, r2
 8006316:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	43db      	mvns	r3, r3
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	4013      	ands	r3, r2
 8006340:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	3301      	adds	r3, #1
 8006360:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	fa22 f303 	lsr.w	r3, r2, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	f47f ae6b 	bne.w	8006048 <HAL_GPIO_Init+0x14>
  }
}
 8006372:	bf00      	nop
 8006374:	bf00      	nop
 8006376:	3724      	adds	r7, #36	@ 0x24
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	58000400 	.word	0x58000400

08006384 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	887b      	ldrh	r3, [r7, #2]
 8006396:	4013      	ands	r3, r2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800639c:	2301      	movs	r3, #1
 800639e:	73fb      	strb	r3, [r7, #15]
 80063a0:	e001      	b.n	80063a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063a2:	2300      	movs	r3, #0
 80063a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	807b      	strh	r3, [r7, #2]
 80063c0:	4613      	mov	r3, r2
 80063c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063c4:	787b      	ldrb	r3, [r7, #1]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063ca:	887a      	ldrh	r2, [r7, #2]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80063d0:	e003      	b.n	80063da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063d2:	887b      	ldrh	r3, [r7, #2]
 80063d4:	041a      	lsls	r2, r3, #16
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	619a      	str	r2, [r3, #24]
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
	...

080063e8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80063f0:	4b19      	ldr	r3, [pc, #100]	@ (8006458 <HAL_PWREx_ConfigSupply+0x70>)
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d00a      	beq.n	8006412 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80063fc:	4b16      	ldr	r3, [pc, #88]	@ (8006458 <HAL_PWREx_ConfigSupply+0x70>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f003 0307 	and.w	r3, r3, #7
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	429a      	cmp	r2, r3
 8006408:	d001      	beq.n	800640e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e01f      	b.n	800644e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	e01d      	b.n	800644e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006412:	4b11      	ldr	r3, [pc, #68]	@ (8006458 <HAL_PWREx_ConfigSupply+0x70>)
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f023 0207 	bic.w	r2, r3, #7
 800641a:	490f      	ldr	r1, [pc, #60]	@ (8006458 <HAL_PWREx_ConfigSupply+0x70>)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4313      	orrs	r3, r2
 8006420:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006422:	f7fc fb7f 	bl	8002b24 <HAL_GetTick>
 8006426:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006428:	e009      	b.n	800643e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800642a:	f7fc fb7b 	bl	8002b24 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006438:	d901      	bls.n	800643e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e007      	b.n	800644e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800643e:	4b06      	ldr	r3, [pc, #24]	@ (8006458 <HAL_PWREx_ConfigSupply+0x70>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800644a:	d1ee      	bne.n	800642a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	58024800 	.word	0x58024800

0800645c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08c      	sub	sp, #48	@ 0x30
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e3c8      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 8087 	beq.w	800658a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800647c:	4b88      	ldr	r3, [pc, #544]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006484:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006486:	4b86      	ldr	r3, [pc, #536]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 8006488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800648a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800648c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648e:	2b10      	cmp	r3, #16
 8006490:	d007      	beq.n	80064a2 <HAL_RCC_OscConfig+0x46>
 8006492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006494:	2b18      	cmp	r3, #24
 8006496:	d110      	bne.n	80064ba <HAL_RCC_OscConfig+0x5e>
 8006498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d10b      	bne.n	80064ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064a2:	4b7f      	ldr	r3, [pc, #508]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d06c      	beq.n	8006588 <HAL_RCC_OscConfig+0x12c>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d168      	bne.n	8006588 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e3a2      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064c2:	d106      	bne.n	80064d2 <HAL_RCC_OscConfig+0x76>
 80064c4:	4b76      	ldr	r3, [pc, #472]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a75      	ldr	r2, [pc, #468]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 80064ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	e02e      	b.n	8006530 <HAL_RCC_OscConfig+0xd4>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10c      	bne.n	80064f4 <HAL_RCC_OscConfig+0x98>
 80064da:	4b71      	ldr	r3, [pc, #452]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a70      	ldr	r2, [pc, #448]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 80064e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	4b6e      	ldr	r3, [pc, #440]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a6d      	ldr	r2, [pc, #436]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 80064ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	e01d      	b.n	8006530 <HAL_RCC_OscConfig+0xd4>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064fc:	d10c      	bne.n	8006518 <HAL_RCC_OscConfig+0xbc>
 80064fe:	4b68      	ldr	r3, [pc, #416]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a67      	ldr	r2, [pc, #412]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 8006504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	4b65      	ldr	r3, [pc, #404]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a64      	ldr	r2, [pc, #400]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 8006510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	e00b      	b.n	8006530 <HAL_RCC_OscConfig+0xd4>
 8006518:	4b61      	ldr	r3, [pc, #388]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a60      	ldr	r2, [pc, #384]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 800651e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	4b5e      	ldr	r3, [pc, #376]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a5d      	ldr	r2, [pc, #372]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 800652a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800652e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d013      	beq.n	8006560 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006538:	f7fc faf4 	bl	8002b24 <HAL_GetTick>
 800653c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006540:	f7fc faf0 	bl	8002b24 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b64      	cmp	r3, #100	@ 0x64
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e356      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006552:	4b53      	ldr	r3, [pc, #332]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0f0      	beq.n	8006540 <HAL_RCC_OscConfig+0xe4>
 800655e:	e014      	b.n	800658a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006560:	f7fc fae0 	bl	8002b24 <HAL_GetTick>
 8006564:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006568:	f7fc fadc 	bl	8002b24 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b64      	cmp	r3, #100	@ 0x64
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e342      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800657a:	4b49      	ldr	r3, [pc, #292]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f0      	bne.n	8006568 <HAL_RCC_OscConfig+0x10c>
 8006586:	e000      	b.n	800658a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 808c 	beq.w	80066b0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006598:	4b41      	ldr	r3, [pc, #260]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065a2:	4b3f      	ldr	r3, [pc, #252]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 80065a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d007      	beq.n	80065be <HAL_RCC_OscConfig+0x162>
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	2b18      	cmp	r3, #24
 80065b2:	d137      	bne.n	8006624 <HAL_RCC_OscConfig+0x1c8>
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	f003 0303 	and.w	r3, r3, #3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d132      	bne.n	8006624 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065be:	4b38      	ldr	r3, [pc, #224]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d005      	beq.n	80065d6 <HAL_RCC_OscConfig+0x17a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e314      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065d6:	4b32      	ldr	r3, [pc, #200]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f023 0219 	bic.w	r2, r3, #25
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	492f      	ldr	r1, [pc, #188]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e8:	f7fc fa9c 	bl	8002b24 <HAL_GetTick>
 80065ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065ee:	e008      	b.n	8006602 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065f0:	f7fc fa98 	bl	8002b24 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e2fe      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006602:	4b27      	ldr	r3, [pc, #156]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0f0      	beq.n	80065f0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800660e:	4b24      	ldr	r3, [pc, #144]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	061b      	lsls	r3, r3, #24
 800661c:	4920      	ldr	r1, [pc, #128]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 800661e:	4313      	orrs	r3, r2
 8006620:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006622:	e045      	b.n	80066b0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d026      	beq.n	800667a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800662c:	4b1c      	ldr	r3, [pc, #112]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f023 0219 	bic.w	r2, r3, #25
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4919      	ldr	r1, [pc, #100]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 800663a:	4313      	orrs	r3, r2
 800663c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663e:	f7fc fa71 	bl	8002b24 <HAL_GetTick>
 8006642:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006644:	e008      	b.n	8006658 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006646:	f7fc fa6d 	bl	8002b24 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d901      	bls.n	8006658 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e2d3      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006658:	4b11      	ldr	r3, [pc, #68]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d0f0      	beq.n	8006646 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006664:	4b0e      	ldr	r3, [pc, #56]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	061b      	lsls	r3, r3, #24
 8006672:	490b      	ldr	r1, [pc, #44]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 8006674:	4313      	orrs	r3, r2
 8006676:	604b      	str	r3, [r1, #4]
 8006678:	e01a      	b.n	80066b0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800667a:	4b09      	ldr	r3, [pc, #36]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a08      	ldr	r2, [pc, #32]	@ (80066a0 <HAL_RCC_OscConfig+0x244>)
 8006680:	f023 0301 	bic.w	r3, r3, #1
 8006684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006686:	f7fc fa4d 	bl	8002b24 <HAL_GetTick>
 800668a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800668c:	e00a      	b.n	80066a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800668e:	f7fc fa49 	bl	8002b24 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d903      	bls.n	80066a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e2af      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
 80066a0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066a4:	4b96      	ldr	r3, [pc, #600]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1ee      	bne.n	800668e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0310 	and.w	r3, r3, #16
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d06a      	beq.n	8006792 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066bc:	4b90      	ldr	r3, [pc, #576]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066c4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066c6:	4b8e      	ldr	r3, [pc, #568]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 80066c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ca:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	2b08      	cmp	r3, #8
 80066d0:	d007      	beq.n	80066e2 <HAL_RCC_OscConfig+0x286>
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	2b18      	cmp	r3, #24
 80066d6:	d11b      	bne.n	8006710 <HAL_RCC_OscConfig+0x2b4>
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d116      	bne.n	8006710 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066e2:	4b87      	ldr	r3, [pc, #540]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <HAL_RCC_OscConfig+0x29e>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	2b80      	cmp	r3, #128	@ 0x80
 80066f4:	d001      	beq.n	80066fa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e282      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066fa:	4b81      	ldr	r3, [pc, #516]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	061b      	lsls	r3, r3, #24
 8006708:	497d      	ldr	r1, [pc, #500]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 800670a:	4313      	orrs	r3, r2
 800670c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800670e:	e040      	b.n	8006792 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d023      	beq.n	8006760 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006718:	4b79      	ldr	r3, [pc, #484]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a78      	ldr	r2, [pc, #480]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 800671e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006724:	f7fc f9fe 	bl	8002b24 <HAL_GetTick>
 8006728:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800672c:	f7fc f9fa 	bl	8002b24 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e260      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800673e:	4b70      	ldr	r3, [pc, #448]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0f0      	beq.n	800672c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800674a:	4b6d      	ldr	r3, [pc, #436]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	061b      	lsls	r3, r3, #24
 8006758:	4969      	ldr	r1, [pc, #420]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 800675a:	4313      	orrs	r3, r2
 800675c:	60cb      	str	r3, [r1, #12]
 800675e:	e018      	b.n	8006792 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006760:	4b67      	ldr	r3, [pc, #412]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a66      	ldr	r2, [pc, #408]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 8006766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800676a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676c:	f7fc f9da 	bl	8002b24 <HAL_GetTick>
 8006770:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006772:	e008      	b.n	8006786 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006774:	f7fc f9d6 	bl	8002b24 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b02      	cmp	r3, #2
 8006780:	d901      	bls.n	8006786 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e23c      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006786:	4b5e      	ldr	r3, [pc, #376]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1f0      	bne.n	8006774 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d036      	beq.n	800680c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d019      	beq.n	80067da <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067a6:	4b56      	ldr	r3, [pc, #344]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 80067a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067aa:	4a55      	ldr	r2, [pc, #340]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 80067ac:	f043 0301 	orr.w	r3, r3, #1
 80067b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b2:	f7fc f9b7 	bl	8002b24 <HAL_GetTick>
 80067b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067b8:	e008      	b.n	80067cc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067ba:	f7fc f9b3 	bl	8002b24 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d901      	bls.n	80067cc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e219      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067cc:	4b4c      	ldr	r3, [pc, #304]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 80067ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d0f0      	beq.n	80067ba <HAL_RCC_OscConfig+0x35e>
 80067d8:	e018      	b.n	800680c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067da:	4b49      	ldr	r3, [pc, #292]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 80067dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067de:	4a48      	ldr	r2, [pc, #288]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 80067e0:	f023 0301 	bic.w	r3, r3, #1
 80067e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e6:	f7fc f99d 	bl	8002b24 <HAL_GetTick>
 80067ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067ec:	e008      	b.n	8006800 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067ee:	f7fc f999 	bl	8002b24 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d901      	bls.n	8006800 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e1ff      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006800:	4b3f      	ldr	r3, [pc, #252]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 8006802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1f0      	bne.n	80067ee <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b00      	cmp	r3, #0
 8006816:	d036      	beq.n	8006886 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d019      	beq.n	8006854 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006820:	4b37      	ldr	r3, [pc, #220]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a36      	ldr	r2, [pc, #216]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 8006826:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800682a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800682c:	f7fc f97a 	bl	8002b24 <HAL_GetTick>
 8006830:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006832:	e008      	b.n	8006846 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006834:	f7fc f976 	bl	8002b24 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b02      	cmp	r3, #2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e1dc      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006846:	4b2e      	ldr	r3, [pc, #184]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0f0      	beq.n	8006834 <HAL_RCC_OscConfig+0x3d8>
 8006852:	e018      	b.n	8006886 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006854:	4b2a      	ldr	r3, [pc, #168]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a29      	ldr	r2, [pc, #164]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 800685a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800685e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006860:	f7fc f960 	bl	8002b24 <HAL_GetTick>
 8006864:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006868:	f7fc f95c 	bl	8002b24 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e1c2      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800687a:	4b21      	ldr	r3, [pc, #132]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1f0      	bne.n	8006868 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0304 	and.w	r3, r3, #4
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 8086 	beq.w	80069a0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006894:	4b1b      	ldr	r3, [pc, #108]	@ (8006904 <HAL_RCC_OscConfig+0x4a8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a1a      	ldr	r2, [pc, #104]	@ (8006904 <HAL_RCC_OscConfig+0x4a8>)
 800689a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800689e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068a0:	f7fc f940 	bl	8002b24 <HAL_GetTick>
 80068a4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068a6:	e008      	b.n	80068ba <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068a8:	f7fc f93c 	bl	8002b24 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b64      	cmp	r3, #100	@ 0x64
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e1a2      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068ba:	4b12      	ldr	r3, [pc, #72]	@ (8006904 <HAL_RCC_OscConfig+0x4a8>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0f0      	beq.n	80068a8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d106      	bne.n	80068dc <HAL_RCC_OscConfig+0x480>
 80068ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 80068d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068d2:	4a0b      	ldr	r2, [pc, #44]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 80068d4:	f043 0301 	orr.w	r3, r3, #1
 80068d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80068da:	e032      	b.n	8006942 <HAL_RCC_OscConfig+0x4e6>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d111      	bne.n	8006908 <HAL_RCC_OscConfig+0x4ac>
 80068e4:	4b06      	ldr	r3, [pc, #24]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 80068e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e8:	4a05      	ldr	r2, [pc, #20]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 80068ea:	f023 0301 	bic.w	r3, r3, #1
 80068ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80068f0:	4b03      	ldr	r3, [pc, #12]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 80068f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f4:	4a02      	ldr	r2, [pc, #8]	@ (8006900 <HAL_RCC_OscConfig+0x4a4>)
 80068f6:	f023 0304 	bic.w	r3, r3, #4
 80068fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80068fc:	e021      	b.n	8006942 <HAL_RCC_OscConfig+0x4e6>
 80068fe:	bf00      	nop
 8006900:	58024400 	.word	0x58024400
 8006904:	58024800 	.word	0x58024800
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	2b05      	cmp	r3, #5
 800690e:	d10c      	bne.n	800692a <HAL_RCC_OscConfig+0x4ce>
 8006910:	4b83      	ldr	r3, [pc, #524]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006914:	4a82      	ldr	r2, [pc, #520]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006916:	f043 0304 	orr.w	r3, r3, #4
 800691a:	6713      	str	r3, [r2, #112]	@ 0x70
 800691c:	4b80      	ldr	r3, [pc, #512]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 800691e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006920:	4a7f      	ldr	r2, [pc, #508]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006922:	f043 0301 	orr.w	r3, r3, #1
 8006926:	6713      	str	r3, [r2, #112]	@ 0x70
 8006928:	e00b      	b.n	8006942 <HAL_RCC_OscConfig+0x4e6>
 800692a:	4b7d      	ldr	r3, [pc, #500]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 800692c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800692e:	4a7c      	ldr	r2, [pc, #496]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006930:	f023 0301 	bic.w	r3, r3, #1
 8006934:	6713      	str	r3, [r2, #112]	@ 0x70
 8006936:	4b7a      	ldr	r3, [pc, #488]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800693a:	4a79      	ldr	r2, [pc, #484]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 800693c:	f023 0304 	bic.w	r3, r3, #4
 8006940:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d015      	beq.n	8006976 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800694a:	f7fc f8eb 	bl	8002b24 <HAL_GetTick>
 800694e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006950:	e00a      	b.n	8006968 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006952:	f7fc f8e7 	bl	8002b24 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006960:	4293      	cmp	r3, r2
 8006962:	d901      	bls.n	8006968 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e14b      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006968:	4b6d      	ldr	r3, [pc, #436]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 800696a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0ee      	beq.n	8006952 <HAL_RCC_OscConfig+0x4f6>
 8006974:	e014      	b.n	80069a0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006976:	f7fc f8d5 	bl	8002b24 <HAL_GetTick>
 800697a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800697c:	e00a      	b.n	8006994 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800697e:	f7fc f8d1 	bl	8002b24 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800698c:	4293      	cmp	r3, r2
 800698e:	d901      	bls.n	8006994 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e135      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006994:	4b62      	ldr	r3, [pc, #392]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1ee      	bne.n	800697e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 812a 	beq.w	8006bfe <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80069aa:	4b5d      	ldr	r3, [pc, #372]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069b2:	2b18      	cmp	r3, #24
 80069b4:	f000 80ba 	beq.w	8006b2c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069bc:	2b02      	cmp	r3, #2
 80069be:	f040 8095 	bne.w	8006aec <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069c2:	4b57      	ldr	r3, [pc, #348]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a56      	ldr	r2, [pc, #344]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 80069c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ce:	f7fc f8a9 	bl	8002b24 <HAL_GetTick>
 80069d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069d4:	e008      	b.n	80069e8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069d6:	f7fc f8a5 	bl	8002b24 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d901      	bls.n	80069e8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e10b      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069e8:	4b4d      	ldr	r3, [pc, #308]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1f0      	bne.n	80069d6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069f4:	4b4a      	ldr	r3, [pc, #296]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 80069f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069f8:	4b4a      	ldr	r3, [pc, #296]	@ (8006b24 <HAL_RCC_OscConfig+0x6c8>)
 80069fa:	4013      	ands	r3, r2
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006a04:	0112      	lsls	r2, r2, #4
 8006a06:	430a      	orrs	r2, r1
 8006a08:	4945      	ldr	r1, [pc, #276]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a12:	3b01      	subs	r3, #1
 8006a14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	025b      	lsls	r3, r3, #9
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	041b      	lsls	r3, r3, #16
 8006a2c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a36:	3b01      	subs	r3, #1
 8006a38:	061b      	lsls	r3, r3, #24
 8006a3a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006a3e:	4938      	ldr	r1, [pc, #224]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006a44:	4b36      	ldr	r3, [pc, #216]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a48:	4a35      	ldr	r2, [pc, #212]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006a4a:	f023 0301 	bic.w	r3, r3, #1
 8006a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a50:	4b33      	ldr	r3, [pc, #204]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006a52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a54:	4b34      	ldr	r3, [pc, #208]	@ (8006b28 <HAL_RCC_OscConfig+0x6cc>)
 8006a56:	4013      	ands	r3, r2
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a5c:	00d2      	lsls	r2, r2, #3
 8006a5e:	4930      	ldr	r1, [pc, #192]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a64:	4b2e      	ldr	r3, [pc, #184]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a68:	f023 020c 	bic.w	r2, r3, #12
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a70:	492b      	ldr	r1, [pc, #172]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a76:	4b2a      	ldr	r3, [pc, #168]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7a:	f023 0202 	bic.w	r2, r3, #2
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a82:	4927      	ldr	r1, [pc, #156]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a88:	4b25      	ldr	r3, [pc, #148]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8c:	4a24      	ldr	r2, [pc, #144]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a94:	4b22      	ldr	r3, [pc, #136]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a98:	4a21      	ldr	r2, [pc, #132]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa4:	4a1e      	ldr	r2, [pc, #120]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006aa6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006aac:	4b1c      	ldr	r3, [pc, #112]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006ab2:	f043 0301 	orr.w	r3, r3, #1
 8006ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ab8:	4b19      	ldr	r3, [pc, #100]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a18      	ldr	r2, [pc, #96]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac4:	f7fc f82e 	bl	8002b24 <HAL_GetTick>
 8006ac8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006aca:	e008      	b.n	8006ade <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006acc:	f7fc f82a 	bl	8002b24 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e090      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ade:	4b10      	ldr	r3, [pc, #64]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0f0      	beq.n	8006acc <HAL_RCC_OscConfig+0x670>
 8006aea:	e088      	b.n	8006bfe <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aec:	4b0c      	ldr	r3, [pc, #48]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a0b      	ldr	r2, [pc, #44]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006af2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af8:	f7fc f814 	bl	8002b24 <HAL_GetTick>
 8006afc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006afe:	e008      	b.n	8006b12 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b00:	f7fc f810 	bl	8002b24 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d901      	bls.n	8006b12 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e076      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b12:	4b03      	ldr	r3, [pc, #12]	@ (8006b20 <HAL_RCC_OscConfig+0x6c4>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1f0      	bne.n	8006b00 <HAL_RCC_OscConfig+0x6a4>
 8006b1e:	e06e      	b.n	8006bfe <HAL_RCC_OscConfig+0x7a2>
 8006b20:	58024400 	.word	0x58024400
 8006b24:	fffffc0c 	.word	0xfffffc0c
 8006b28:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b2c:	4b36      	ldr	r3, [pc, #216]	@ (8006c08 <HAL_RCC_OscConfig+0x7ac>)
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b32:	4b35      	ldr	r3, [pc, #212]	@ (8006c08 <HAL_RCC_OscConfig+0x7ac>)
 8006b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b36:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d031      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f003 0203 	and.w	r2, r3, #3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d12a      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	091b      	lsrs	r3, r3, #4
 8006b52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d122      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b68:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d11a      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	0a5b      	lsrs	r3, r3, #9
 8006b72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b7a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d111      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	0c1b      	lsrs	r3, r3, #16
 8006b84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d108      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	0e1b      	lsrs	r3, r3, #24
 8006b96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d001      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e02b      	b.n	8006c00 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006ba8:	4b17      	ldr	r3, [pc, #92]	@ (8006c08 <HAL_RCC_OscConfig+0x7ac>)
 8006baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bac:	08db      	lsrs	r3, r3, #3
 8006bae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bb2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d01f      	beq.n	8006bfe <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006bbe:	4b12      	ldr	r3, [pc, #72]	@ (8006c08 <HAL_RCC_OscConfig+0x7ac>)
 8006bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc2:	4a11      	ldr	r2, [pc, #68]	@ (8006c08 <HAL_RCC_OscConfig+0x7ac>)
 8006bc4:	f023 0301 	bic.w	r3, r3, #1
 8006bc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bca:	f7fb ffab 	bl	8002b24 <HAL_GetTick>
 8006bce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006bd0:	bf00      	nop
 8006bd2:	f7fb ffa7 	bl	8002b24 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d0f9      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006bde:	4b0a      	ldr	r3, [pc, #40]	@ (8006c08 <HAL_RCC_OscConfig+0x7ac>)
 8006be0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006be2:	4b0a      	ldr	r3, [pc, #40]	@ (8006c0c <HAL_RCC_OscConfig+0x7b0>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006bea:	00d2      	lsls	r2, r2, #3
 8006bec:	4906      	ldr	r1, [pc, #24]	@ (8006c08 <HAL_RCC_OscConfig+0x7ac>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006bf2:	4b05      	ldr	r3, [pc, #20]	@ (8006c08 <HAL_RCC_OscConfig+0x7ac>)
 8006bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf6:	4a04      	ldr	r2, [pc, #16]	@ (8006c08 <HAL_RCC_OscConfig+0x7ac>)
 8006bf8:	f043 0301 	orr.w	r3, r3, #1
 8006bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3730      	adds	r7, #48	@ 0x30
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	58024400 	.word	0x58024400
 8006c0c:	ffff0007 	.word	0xffff0007

08006c10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e19c      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c24:	4b8a      	ldr	r3, [pc, #552]	@ (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 030f 	and.w	r3, r3, #15
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d910      	bls.n	8006c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c32:	4b87      	ldr	r3, [pc, #540]	@ (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f023 020f 	bic.w	r2, r3, #15
 8006c3a:	4985      	ldr	r1, [pc, #532]	@ (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c42:	4b83      	ldr	r3, [pc, #524]	@ (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d001      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e184      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d010      	beq.n	8006c82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691a      	ldr	r2, [r3, #16]
 8006c64:	4b7b      	ldr	r3, [pc, #492]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d908      	bls.n	8006c82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c70:	4b78      	ldr	r3, [pc, #480]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	4975      	ldr	r1, [pc, #468]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d010      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	695a      	ldr	r2, [r3, #20]
 8006c92:	4b70      	ldr	r3, [pc, #448]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d908      	bls.n	8006cb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	496a      	ldr	r1, [pc, #424]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0310 	and.w	r3, r3, #16
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d010      	beq.n	8006cde <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	699a      	ldr	r2, [r3, #24]
 8006cc0:	4b64      	ldr	r3, [pc, #400]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d908      	bls.n	8006cde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ccc:	4b61      	ldr	r3, [pc, #388]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	495e      	ldr	r1, [pc, #376]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0320 	and.w	r3, r3, #32
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d010      	beq.n	8006d0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	69da      	ldr	r2, [r3, #28]
 8006cee:	4b59      	ldr	r3, [pc, #356]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d908      	bls.n	8006d0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006cfa:	4b56      	ldr	r3, [pc, #344]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	4953      	ldr	r1, [pc, #332]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d010      	beq.n	8006d3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	4b4d      	ldr	r3, [pc, #308]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	f003 030f 	and.w	r3, r3, #15
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d908      	bls.n	8006d3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d28:	4b4a      	ldr	r3, [pc, #296]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	f023 020f 	bic.w	r2, r3, #15
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	4947      	ldr	r1, [pc, #284]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d055      	beq.n	8006df2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d46:	4b43      	ldr	r3, [pc, #268]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	4940      	ldr	r1, [pc, #256]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d107      	bne.n	8006d70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d60:	4b3c      	ldr	r3, [pc, #240]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d121      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e0f6      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d107      	bne.n	8006d88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d78:	4b36      	ldr	r3, [pc, #216]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d115      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e0ea      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d107      	bne.n	8006da0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d90:	4b30      	ldr	r3, [pc, #192]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d109      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e0de      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006da0:	4b2c      	ldr	r3, [pc, #176]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e0d6      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006db0:	4b28      	ldr	r3, [pc, #160]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	f023 0207 	bic.w	r2, r3, #7
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	4925      	ldr	r1, [pc, #148]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dc2:	f7fb feaf 	bl	8002b24 <HAL_GetTick>
 8006dc6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dc8:	e00a      	b.n	8006de0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dca:	f7fb feab 	bl	8002b24 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d901      	bls.n	8006de0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e0be      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006de0:	4b1c      	ldr	r3, [pc, #112]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d1eb      	bne.n	8006dca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d010      	beq.n	8006e20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	4b14      	ldr	r3, [pc, #80]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d208      	bcs.n	8006e20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e0e:	4b11      	ldr	r3, [pc, #68]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f023 020f 	bic.w	r2, r3, #15
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	490e      	ldr	r1, [pc, #56]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e20:	4b0b      	ldr	r3, [pc, #44]	@ (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 030f 	and.w	r3, r3, #15
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d214      	bcs.n	8006e58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e2e:	4b08      	ldr	r3, [pc, #32]	@ (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f023 020f 	bic.w	r2, r3, #15
 8006e36:	4906      	ldr	r1, [pc, #24]	@ (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e3e:	4b04      	ldr	r3, [pc, #16]	@ (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d005      	beq.n	8006e58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e086      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
 8006e50:	52002000 	.word	0x52002000
 8006e54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d010      	beq.n	8006e86 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691a      	ldr	r2, [r3, #16]
 8006e68:	4b3f      	ldr	r3, [pc, #252]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d208      	bcs.n	8006e86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e74:	4b3c      	ldr	r3, [pc, #240]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	4939      	ldr	r1, [pc, #228]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0308 	and.w	r3, r3, #8
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d010      	beq.n	8006eb4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	695a      	ldr	r2, [r3, #20]
 8006e96:	4b34      	ldr	r3, [pc, #208]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d208      	bcs.n	8006eb4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ea2:	4b31      	ldr	r3, [pc, #196]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	492e      	ldr	r1, [pc, #184]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0310 	and.w	r3, r3, #16
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d010      	beq.n	8006ee2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	699a      	ldr	r2, [r3, #24]
 8006ec4:	4b28      	ldr	r3, [pc, #160]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d208      	bcs.n	8006ee2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ed0:	4b25      	ldr	r3, [pc, #148]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	4922      	ldr	r1, [pc, #136]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0320 	and.w	r3, r3, #32
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d010      	beq.n	8006f10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	69da      	ldr	r2, [r3, #28]
 8006ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d208      	bcs.n	8006f10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006efe:	4b1a      	ldr	r3, [pc, #104]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	4917      	ldr	r1, [pc, #92]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f10:	f000 f834 	bl	8006f7c <HAL_RCC_GetSysClockFreq>
 8006f14:	4602      	mov	r2, r0
 8006f16:	4b14      	ldr	r3, [pc, #80]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	0a1b      	lsrs	r3, r3, #8
 8006f1c:	f003 030f 	and.w	r3, r3, #15
 8006f20:	4912      	ldr	r1, [pc, #72]	@ (8006f6c <HAL_RCC_ClockConfig+0x35c>)
 8006f22:	5ccb      	ldrb	r3, [r1, r3]
 8006f24:	f003 031f 	and.w	r3, r3, #31
 8006f28:	fa22 f303 	lsr.w	r3, r2, r3
 8006f2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	f003 030f 	and.w	r3, r3, #15
 8006f36:	4a0d      	ldr	r2, [pc, #52]	@ (8006f6c <HAL_RCC_ClockConfig+0x35c>)
 8006f38:	5cd3      	ldrb	r3, [r2, r3]
 8006f3a:	f003 031f 	and.w	r3, r3, #31
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	fa22 f303 	lsr.w	r3, r2, r3
 8006f44:	4a0a      	ldr	r2, [pc, #40]	@ (8006f70 <HAL_RCC_ClockConfig+0x360>)
 8006f46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f48:	4a0a      	ldr	r2, [pc, #40]	@ (8006f74 <HAL_RCC_ClockConfig+0x364>)
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f78 <HAL_RCC_ClockConfig+0x368>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fb fd9c 	bl	8002a90 <HAL_InitTick>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	58024400 	.word	0x58024400
 8006f6c:	0800c930 	.word	0x0800c930
 8006f70:	24000010 	.word	0x24000010
 8006f74:	2400000c 	.word	0x2400000c
 8006f78:	24000014 	.word	0x24000014

08006f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b089      	sub	sp, #36	@ 0x24
 8006f80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f82:	4bb3      	ldr	r3, [pc, #716]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f8a:	2b18      	cmp	r3, #24
 8006f8c:	f200 8155 	bhi.w	800723a <HAL_RCC_GetSysClockFreq+0x2be>
 8006f90:	a201      	add	r2, pc, #4	@ (adr r2, 8006f98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f96:	bf00      	nop
 8006f98:	08006ffd 	.word	0x08006ffd
 8006f9c:	0800723b 	.word	0x0800723b
 8006fa0:	0800723b 	.word	0x0800723b
 8006fa4:	0800723b 	.word	0x0800723b
 8006fa8:	0800723b 	.word	0x0800723b
 8006fac:	0800723b 	.word	0x0800723b
 8006fb0:	0800723b 	.word	0x0800723b
 8006fb4:	0800723b 	.word	0x0800723b
 8006fb8:	08007023 	.word	0x08007023
 8006fbc:	0800723b 	.word	0x0800723b
 8006fc0:	0800723b 	.word	0x0800723b
 8006fc4:	0800723b 	.word	0x0800723b
 8006fc8:	0800723b 	.word	0x0800723b
 8006fcc:	0800723b 	.word	0x0800723b
 8006fd0:	0800723b 	.word	0x0800723b
 8006fd4:	0800723b 	.word	0x0800723b
 8006fd8:	08007029 	.word	0x08007029
 8006fdc:	0800723b 	.word	0x0800723b
 8006fe0:	0800723b 	.word	0x0800723b
 8006fe4:	0800723b 	.word	0x0800723b
 8006fe8:	0800723b 	.word	0x0800723b
 8006fec:	0800723b 	.word	0x0800723b
 8006ff0:	0800723b 	.word	0x0800723b
 8006ff4:	0800723b 	.word	0x0800723b
 8006ff8:	0800702f 	.word	0x0800702f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ffc:	4b94      	ldr	r3, [pc, #592]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0320 	and.w	r3, r3, #32
 8007004:	2b00      	cmp	r3, #0
 8007006:	d009      	beq.n	800701c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007008:	4b91      	ldr	r3, [pc, #580]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	08db      	lsrs	r3, r3, #3
 800700e:	f003 0303 	and.w	r3, r3, #3
 8007012:	4a90      	ldr	r2, [pc, #576]	@ (8007254 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007014:	fa22 f303 	lsr.w	r3, r2, r3
 8007018:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800701a:	e111      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800701c:	4b8d      	ldr	r3, [pc, #564]	@ (8007254 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800701e:	61bb      	str	r3, [r7, #24]
      break;
 8007020:	e10e      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007022:	4b8d      	ldr	r3, [pc, #564]	@ (8007258 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007024:	61bb      	str	r3, [r7, #24]
      break;
 8007026:	e10b      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007028:	4b8c      	ldr	r3, [pc, #560]	@ (800725c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800702a:	61bb      	str	r3, [r7, #24]
      break;
 800702c:	e108      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800702e:	4b88      	ldr	r3, [pc, #544]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007032:	f003 0303 	and.w	r3, r3, #3
 8007036:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007038:	4b85      	ldr	r3, [pc, #532]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800703a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703c:	091b      	lsrs	r3, r3, #4
 800703e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007042:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007044:	4b82      	ldr	r3, [pc, #520]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800704e:	4b80      	ldr	r3, [pc, #512]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007052:	08db      	lsrs	r3, r3, #3
 8007054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	fb02 f303 	mul.w	r3, r2, r3
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007066:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 80e1 	beq.w	8007234 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2b02      	cmp	r3, #2
 8007076:	f000 8083 	beq.w	8007180 <HAL_RCC_GetSysClockFreq+0x204>
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2b02      	cmp	r3, #2
 800707e:	f200 80a1 	bhi.w	80071c4 <HAL_RCC_GetSysClockFreq+0x248>
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <HAL_RCC_GetSysClockFreq+0x114>
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d056      	beq.n	800713c <HAL_RCC_GetSysClockFreq+0x1c0>
 800708e:	e099      	b.n	80071c4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007090:	4b6f      	ldr	r3, [pc, #444]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b00      	cmp	r3, #0
 800709a:	d02d      	beq.n	80070f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800709c:	4b6c      	ldr	r3, [pc, #432]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	08db      	lsrs	r3, r3, #3
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	4a6b      	ldr	r2, [pc, #428]	@ (8007254 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070a8:	fa22 f303 	lsr.w	r3, r2, r3
 80070ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	ee07 3a90 	vmov	s15, r3
 80070b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c6:	4b62      	ldr	r3, [pc, #392]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80070da:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007260 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80070f6:	e087      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007102:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007264 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710a:	4b51      	ldr	r3, [pc, #324]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800710c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711a:	ed97 6a02 	vldr	s12, [r7, #8]
 800711e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007260 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800712e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007136:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800713a:	e065      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007146:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007268 <HAL_RCC_GetSysClockFreq+0x2ec>
 800714a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800714e:	4b40      	ldr	r3, [pc, #256]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007162:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007260 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800716e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800717e:	e043      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800726c <HAL_RCC_GetSysClockFreq+0x2f0>
 800718e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007192:	4b2f      	ldr	r3, [pc, #188]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80071a6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007260 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071c2:	e021      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007268 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d6:	4b1e      	ldr	r3, [pc, #120]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80071ea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007260 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007202:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007206:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007208:	4b11      	ldr	r3, [pc, #68]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800720a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800720c:	0a5b      	lsrs	r3, r3, #9
 800720e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007212:	3301      	adds	r3, #1
 8007214:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	ee07 3a90 	vmov	s15, r3
 800721c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007220:	edd7 6a07 	vldr	s13, [r7, #28]
 8007224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800722c:	ee17 3a90 	vmov	r3, s15
 8007230:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007232:	e005      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	61bb      	str	r3, [r7, #24]
      break;
 8007238:	e002      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800723a:	4b07      	ldr	r3, [pc, #28]	@ (8007258 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800723c:	61bb      	str	r3, [r7, #24]
      break;
 800723e:	bf00      	nop
  }

  return sysclockfreq;
 8007240:	69bb      	ldr	r3, [r7, #24]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3724      	adds	r7, #36	@ 0x24
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	58024400 	.word	0x58024400
 8007254:	03d09000 	.word	0x03d09000
 8007258:	003d0900 	.word	0x003d0900
 800725c:	016e3600 	.word	0x016e3600
 8007260:	46000000 	.word	0x46000000
 8007264:	4c742400 	.word	0x4c742400
 8007268:	4a742400 	.word	0x4a742400
 800726c:	4bb71b00 	.word	0x4bb71b00

08007270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007276:	f7ff fe81 	bl	8006f7c <HAL_RCC_GetSysClockFreq>
 800727a:	4602      	mov	r2, r0
 800727c:	4b10      	ldr	r3, [pc, #64]	@ (80072c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	0a1b      	lsrs	r3, r3, #8
 8007282:	f003 030f 	and.w	r3, r3, #15
 8007286:	490f      	ldr	r1, [pc, #60]	@ (80072c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007288:	5ccb      	ldrb	r3, [r1, r3]
 800728a:	f003 031f 	and.w	r3, r3, #31
 800728e:	fa22 f303 	lsr.w	r3, r2, r3
 8007292:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007294:	4b0a      	ldr	r3, [pc, #40]	@ (80072c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	4a09      	ldr	r2, [pc, #36]	@ (80072c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800729e:	5cd3      	ldrb	r3, [r2, r3]
 80072a0:	f003 031f 	and.w	r3, r3, #31
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	fa22 f303 	lsr.w	r3, r2, r3
 80072aa:	4a07      	ldr	r2, [pc, #28]	@ (80072c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80072ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072ae:	4a07      	ldr	r2, [pc, #28]	@ (80072cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072b4:	4b04      	ldr	r3, [pc, #16]	@ (80072c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80072b6:	681b      	ldr	r3, [r3, #0]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	58024400 	.word	0x58024400
 80072c4:	0800c930 	.word	0x0800c930
 80072c8:	24000010 	.word	0x24000010
 80072cc:	2400000c 	.word	0x2400000c

080072d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80072d4:	f7ff ffcc 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 80072d8:	4602      	mov	r2, r0
 80072da:	4b06      	ldr	r3, [pc, #24]	@ (80072f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	091b      	lsrs	r3, r3, #4
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	4904      	ldr	r1, [pc, #16]	@ (80072f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072e6:	5ccb      	ldrb	r3, [r1, r3]
 80072e8:	f003 031f 	and.w	r3, r3, #31
 80072ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	58024400 	.word	0x58024400
 80072f8:	0800c930 	.word	0x0800c930

080072fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007300:	f7ff ffb6 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 8007304:	4602      	mov	r2, r0
 8007306:	4b06      	ldr	r3, [pc, #24]	@ (8007320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	0a1b      	lsrs	r3, r3, #8
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	4904      	ldr	r1, [pc, #16]	@ (8007324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007312:	5ccb      	ldrb	r3, [r1, r3]
 8007314:	f003 031f 	and.w	r3, r3, #31
 8007318:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800731c:	4618      	mov	r0, r3
 800731e:	bd80      	pop	{r7, pc}
 8007320:	58024400 	.word	0x58024400
 8007324:	0800c930 	.word	0x0800c930

08007328 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800732c:	b0c6      	sub	sp, #280	@ 0x118
 800732e:	af00      	add	r7, sp, #0
 8007330:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007334:	2300      	movs	r3, #0
 8007336:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800733a:	2300      	movs	r3, #0
 800733c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800734c:	2500      	movs	r5, #0
 800734e:	ea54 0305 	orrs.w	r3, r4, r5
 8007352:	d049      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007358:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800735a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800735e:	d02f      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007360:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007364:	d828      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007366:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800736a:	d01a      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800736c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007370:	d822      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007376:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800737a:	d007      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800737c:	e01c      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800737e:	4bab      	ldr	r3, [pc, #684]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007382:	4aaa      	ldr	r2, [pc, #680]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007388:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800738a:	e01a      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800738c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007390:	3308      	adds	r3, #8
 8007392:	2102      	movs	r1, #2
 8007394:	4618      	mov	r0, r3
 8007396:	f002 fa49 	bl	800982c <RCCEx_PLL2_Config>
 800739a:	4603      	mov	r3, r0
 800739c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073a0:	e00f      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a6:	3328      	adds	r3, #40	@ 0x28
 80073a8:	2102      	movs	r1, #2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f002 faf0 	bl	8009990 <RCCEx_PLL3_Config>
 80073b0:	4603      	mov	r3, r0
 80073b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073b6:	e004      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073be:	e000      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80073c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10a      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80073ca:	4b98      	ldr	r3, [pc, #608]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80073d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073d8:	4a94      	ldr	r2, [pc, #592]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073da:	430b      	orrs	r3, r1
 80073dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80073de:	e003      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80073f4:	f04f 0900 	mov.w	r9, #0
 80073f8:	ea58 0309 	orrs.w	r3, r8, r9
 80073fc:	d047      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80073fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007404:	2b04      	cmp	r3, #4
 8007406:	d82a      	bhi.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007408:	a201      	add	r2, pc, #4	@ (adr r2, 8007410 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800740a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740e:	bf00      	nop
 8007410:	08007425 	.word	0x08007425
 8007414:	08007433 	.word	0x08007433
 8007418:	08007449 	.word	0x08007449
 800741c:	08007467 	.word	0x08007467
 8007420:	08007467 	.word	0x08007467
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007424:	4b81      	ldr	r3, [pc, #516]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007428:	4a80      	ldr	r2, [pc, #512]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800742a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800742e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007430:	e01a      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007436:	3308      	adds	r3, #8
 8007438:	2100      	movs	r1, #0
 800743a:	4618      	mov	r0, r3
 800743c:	f002 f9f6 	bl	800982c <RCCEx_PLL2_Config>
 8007440:	4603      	mov	r3, r0
 8007442:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007446:	e00f      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744c:	3328      	adds	r3, #40	@ 0x28
 800744e:	2100      	movs	r1, #0
 8007450:	4618      	mov	r0, r3
 8007452:	f002 fa9d 	bl	8009990 <RCCEx_PLL3_Config>
 8007456:	4603      	mov	r3, r0
 8007458:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800745c:	e004      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007464:	e000      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007468:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007470:	4b6e      	ldr	r3, [pc, #440]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007474:	f023 0107 	bic.w	r1, r3, #7
 8007478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800747c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800747e:	4a6b      	ldr	r2, [pc, #428]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007480:	430b      	orrs	r3, r1
 8007482:	6513      	str	r3, [r2, #80]	@ 0x50
 8007484:	e003      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007486:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800748a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800748e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800749a:	f04f 0b00 	mov.w	fp, #0
 800749e:	ea5a 030b 	orrs.w	r3, sl, fp
 80074a2:	d05b      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80074a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80074ac:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80074b0:	d03b      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80074b2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80074b6:	d834      	bhi.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80074b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80074bc:	d037      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80074be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80074c2:	d82e      	bhi.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80074c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80074c8:	d033      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80074ca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80074ce:	d828      	bhi.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80074d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074d4:	d01a      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80074d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074da:	d822      	bhi.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80074e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074e4:	d007      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80074e6:	e01c      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e8:	4b50      	ldr	r3, [pc, #320]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ec:	4a4f      	ldr	r2, [pc, #316]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074f4:	e01e      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074fa:	3308      	adds	r3, #8
 80074fc:	2100      	movs	r1, #0
 80074fe:	4618      	mov	r0, r3
 8007500:	f002 f994 	bl	800982c <RCCEx_PLL2_Config>
 8007504:	4603      	mov	r3, r0
 8007506:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800750a:	e013      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800750c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007510:	3328      	adds	r3, #40	@ 0x28
 8007512:	2100      	movs	r1, #0
 8007514:	4618      	mov	r0, r3
 8007516:	f002 fa3b 	bl	8009990 <RCCEx_PLL3_Config>
 800751a:	4603      	mov	r3, r0
 800751c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007520:	e008      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007528:	e004      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800752a:	bf00      	nop
 800752c:	e002      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800752e:	bf00      	nop
 8007530:	e000      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007534:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10b      	bne.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800753c:	4b3b      	ldr	r3, [pc, #236]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800753e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007540:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007548:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800754c:	4a37      	ldr	r2, [pc, #220]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800754e:	430b      	orrs	r3, r1
 8007550:	6593      	str	r3, [r2, #88]	@ 0x58
 8007552:	e003      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007554:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007558:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800755c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007564:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007568:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800756c:	2300      	movs	r3, #0
 800756e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007572:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007576:	460b      	mov	r3, r1
 8007578:	4313      	orrs	r3, r2
 800757a:	d05d      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800757c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007580:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007584:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007588:	d03b      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800758a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800758e:	d834      	bhi.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007590:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007594:	d037      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007596:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800759a:	d82e      	bhi.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800759c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80075a0:	d033      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80075a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80075a6:	d828      	bhi.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80075a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075ac:	d01a      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80075ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075b2:	d822      	bhi.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80075b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075bc:	d007      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80075be:	e01c      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075c0:	4b1a      	ldr	r3, [pc, #104]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c4:	4a19      	ldr	r2, [pc, #100]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075cc:	e01e      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d2:	3308      	adds	r3, #8
 80075d4:	2100      	movs	r1, #0
 80075d6:	4618      	mov	r0, r3
 80075d8:	f002 f928 	bl	800982c <RCCEx_PLL2_Config>
 80075dc:	4603      	mov	r3, r0
 80075de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80075e2:	e013      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e8:	3328      	adds	r3, #40	@ 0x28
 80075ea:	2100      	movs	r1, #0
 80075ec:	4618      	mov	r0, r3
 80075ee:	f002 f9cf 	bl	8009990 <RCCEx_PLL3_Config>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075f8:	e008      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007600:	e004      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007602:	bf00      	nop
 8007604:	e002      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007606:	bf00      	nop
 8007608:	e000      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800760a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800760c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10d      	bne.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007614:	4b05      	ldr	r3, [pc, #20]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007618:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800761c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007620:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007624:	4a01      	ldr	r2, [pc, #4]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007626:	430b      	orrs	r3, r1
 8007628:	6593      	str	r3, [r2, #88]	@ 0x58
 800762a:	e005      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800762c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007630:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007634:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800763c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007640:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007644:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007648:	2300      	movs	r3, #0
 800764a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800764e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007652:	460b      	mov	r3, r1
 8007654:	4313      	orrs	r3, r2
 8007656:	d03a      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800765c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800765e:	2b30      	cmp	r3, #48	@ 0x30
 8007660:	d01f      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007662:	2b30      	cmp	r3, #48	@ 0x30
 8007664:	d819      	bhi.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007666:	2b20      	cmp	r3, #32
 8007668:	d00c      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800766a:	2b20      	cmp	r3, #32
 800766c:	d815      	bhi.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800766e:	2b00      	cmp	r3, #0
 8007670:	d019      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007672:	2b10      	cmp	r3, #16
 8007674:	d111      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007676:	4baa      	ldr	r3, [pc, #680]	@ (8007920 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767a:	4aa9      	ldr	r2, [pc, #676]	@ (8007920 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800767c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007680:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007682:	e011      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007688:	3308      	adds	r3, #8
 800768a:	2102      	movs	r1, #2
 800768c:	4618      	mov	r0, r3
 800768e:	f002 f8cd 	bl	800982c <RCCEx_PLL2_Config>
 8007692:	4603      	mov	r3, r0
 8007694:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007698:	e006      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076a0:	e002      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80076a2:	bf00      	nop
 80076a4:	e000      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80076a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10a      	bne.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80076b0:	4b9b      	ldr	r3, [pc, #620]	@ (8007920 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076b4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80076b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076be:	4a98      	ldr	r2, [pc, #608]	@ (8007920 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076c0:	430b      	orrs	r3, r1
 80076c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076c4:	e003      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80076ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80076da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076de:	2300      	movs	r3, #0
 80076e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80076e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80076e8:	460b      	mov	r3, r1
 80076ea:	4313      	orrs	r3, r2
 80076ec:	d051      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80076ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076f8:	d035      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80076fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076fe:	d82e      	bhi.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007700:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007704:	d031      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007706:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800770a:	d828      	bhi.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800770c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007710:	d01a      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007716:	d822      	bhi.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800771c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007720:	d007      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007722:	e01c      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007724:	4b7e      	ldr	r3, [pc, #504]	@ (8007920 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007728:	4a7d      	ldr	r2, [pc, #500]	@ (8007920 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800772a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800772e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007730:	e01c      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007736:	3308      	adds	r3, #8
 8007738:	2100      	movs	r1, #0
 800773a:	4618      	mov	r0, r3
 800773c:	f002 f876 	bl	800982c <RCCEx_PLL2_Config>
 8007740:	4603      	mov	r3, r0
 8007742:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007746:	e011      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800774c:	3328      	adds	r3, #40	@ 0x28
 800774e:	2100      	movs	r1, #0
 8007750:	4618      	mov	r0, r3
 8007752:	f002 f91d 	bl	8009990 <RCCEx_PLL3_Config>
 8007756:	4603      	mov	r3, r0
 8007758:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800775c:	e006      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007764:	e002      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007766:	bf00      	nop
 8007768:	e000      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800776a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800776c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10a      	bne.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007774:	4b6a      	ldr	r3, [pc, #424]	@ (8007920 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007778:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800777c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007782:	4a67      	ldr	r2, [pc, #412]	@ (8007920 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007784:	430b      	orrs	r3, r1
 8007786:	6513      	str	r3, [r2, #80]	@ 0x50
 8007788:	e003      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800778a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800778e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800779e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077a2:	2300      	movs	r3, #0
 80077a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077a8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4313      	orrs	r3, r2
 80077b0:	d053      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80077b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80077bc:	d033      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80077be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80077c2:	d82c      	bhi.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80077c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80077c8:	d02f      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80077ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80077ce:	d826      	bhi.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80077d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80077d4:	d02b      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80077d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80077da:	d820      	bhi.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80077dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077e0:	d012      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80077e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077e6:	d81a      	bhi.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d022      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80077ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077f0:	d115      	bne.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f6:	3308      	adds	r3, #8
 80077f8:	2101      	movs	r1, #1
 80077fa:	4618      	mov	r0, r3
 80077fc:	f002 f816 	bl	800982c <RCCEx_PLL2_Config>
 8007800:	4603      	mov	r3, r0
 8007802:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007806:	e015      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800780c:	3328      	adds	r3, #40	@ 0x28
 800780e:	2101      	movs	r1, #1
 8007810:	4618      	mov	r0, r3
 8007812:	f002 f8bd 	bl	8009990 <RCCEx_PLL3_Config>
 8007816:	4603      	mov	r3, r0
 8007818:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800781c:	e00a      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007824:	e006      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007826:	bf00      	nop
 8007828:	e004      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800782a:	bf00      	nop
 800782c:	e002      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800782e:	bf00      	nop
 8007830:	e000      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007834:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10a      	bne.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800783c:	4b38      	ldr	r3, [pc, #224]	@ (8007920 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800783e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007840:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800784a:	4a35      	ldr	r2, [pc, #212]	@ (8007920 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800784c:	430b      	orrs	r3, r1
 800784e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007850:	e003      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007852:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007856:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800785a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007866:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800786a:	2300      	movs	r3, #0
 800786c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007870:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007874:	460b      	mov	r3, r1
 8007876:	4313      	orrs	r3, r2
 8007878:	d058      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800787a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007882:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007886:	d033      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007888:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800788c:	d82c      	bhi.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800788e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007892:	d02f      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007898:	d826      	bhi.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800789a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800789e:	d02b      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80078a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078a4:	d820      	bhi.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80078a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078aa:	d012      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80078ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078b0:	d81a      	bhi.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d022      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80078b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078ba:	d115      	bne.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c0:	3308      	adds	r3, #8
 80078c2:	2101      	movs	r1, #1
 80078c4:	4618      	mov	r0, r3
 80078c6:	f001 ffb1 	bl	800982c <RCCEx_PLL2_Config>
 80078ca:	4603      	mov	r3, r0
 80078cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80078d0:	e015      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d6:	3328      	adds	r3, #40	@ 0x28
 80078d8:	2101      	movs	r1, #1
 80078da:	4618      	mov	r0, r3
 80078dc:	f002 f858 	bl	8009990 <RCCEx_PLL3_Config>
 80078e0:	4603      	mov	r3, r0
 80078e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80078e6:	e00a      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078ee:	e006      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80078f0:	bf00      	nop
 80078f2:	e004      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80078f4:	bf00      	nop
 80078f6:	e002      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80078f8:	bf00      	nop
 80078fa:	e000      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80078fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10e      	bne.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007906:	4b06      	ldr	r3, [pc, #24]	@ (8007920 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800790a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800790e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007912:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007916:	4a02      	ldr	r2, [pc, #8]	@ (8007920 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007918:	430b      	orrs	r3, r1
 800791a:	6593      	str	r3, [r2, #88]	@ 0x58
 800791c:	e006      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800791e:	bf00      	nop
 8007920:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007928:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800792c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007934:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007938:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800793c:	2300      	movs	r3, #0
 800793e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007942:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007946:	460b      	mov	r3, r1
 8007948:	4313      	orrs	r3, r2
 800794a:	d037      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800794c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007952:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007956:	d00e      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007958:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800795c:	d816      	bhi.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800795e:	2b00      	cmp	r3, #0
 8007960:	d018      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007962:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007966:	d111      	bne.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007968:	4bc4      	ldr	r3, [pc, #784]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800796a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796c:	4ac3      	ldr	r2, [pc, #780]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800796e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007974:	e00f      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797a:	3308      	adds	r3, #8
 800797c:	2101      	movs	r1, #1
 800797e:	4618      	mov	r0, r3
 8007980:	f001 ff54 	bl	800982c <RCCEx_PLL2_Config>
 8007984:	4603      	mov	r3, r0
 8007986:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800798a:	e004      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007992:	e000      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007996:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800799e:	4bb7      	ldr	r3, [pc, #732]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079a2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80079a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079ac:	4ab3      	ldr	r2, [pc, #716]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079ae:	430b      	orrs	r3, r1
 80079b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80079b2:	e003      	b.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80079bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80079c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079cc:	2300      	movs	r3, #0
 80079ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80079d6:	460b      	mov	r3, r1
 80079d8:	4313      	orrs	r3, r2
 80079da:	d039      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80079dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d81c      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80079e6:	a201      	add	r2, pc, #4	@ (adr r2, 80079ec <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	08007a29 	.word	0x08007a29
 80079f0:	080079fd 	.word	0x080079fd
 80079f4:	08007a0b 	.word	0x08007a0b
 80079f8:	08007a29 	.word	0x08007a29
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079fc:	4b9f      	ldr	r3, [pc, #636]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a00:	4a9e      	ldr	r2, [pc, #632]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a08:	e00f      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0e:	3308      	adds	r3, #8
 8007a10:	2102      	movs	r1, #2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f001 ff0a 	bl	800982c <RCCEx_PLL2_Config>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a1e:	e004      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a26:	e000      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10a      	bne.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007a32:	4b92      	ldr	r3, [pc, #584]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a36:	f023 0103 	bic.w	r1, r3, #3
 8007a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a40:	4a8e      	ldr	r2, [pc, #568]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a42:	430b      	orrs	r3, r1
 8007a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a46:	e003      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007a5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a60:	2300      	movs	r3, #0
 8007a62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a66:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	f000 8099 	beq.w	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a72:	4b83      	ldr	r3, [pc, #524]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a82      	ldr	r2, [pc, #520]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a7e:	f7fb f851 	bl	8002b24 <HAL_GetTick>
 8007a82:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a86:	e00b      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a88:	f7fb f84c 	bl	8002b24 <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	2b64      	cmp	r3, #100	@ 0x64
 8007a96:	d903      	bls.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a9e:	e005      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aa0:	4b77      	ldr	r3, [pc, #476]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d0ed      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007aac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d173      	bne.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007ab4:	4b71      	ldr	r3, [pc, #452]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ab6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007abc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ac0:	4053      	eors	r3, r2
 8007ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d015      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007aca:	4b6c      	ldr	r3, [pc, #432]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ace:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ad2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ad6:	4b69      	ldr	r3, [pc, #420]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ada:	4a68      	ldr	r2, [pc, #416]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ae0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ae2:	4b66      	ldr	r3, [pc, #408]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ae6:	4a65      	ldr	r2, [pc, #404]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007aec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007aee:	4a63      	ldr	r2, [pc, #396]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007af4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007afa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b02:	d118      	bne.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b04:	f7fb f80e 	bl	8002b24 <HAL_GetTick>
 8007b08:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b0c:	e00d      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b0e:	f7fb f809 	bl	8002b24 <HAL_GetTick>
 8007b12:	4602      	mov	r2, r0
 8007b14:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007b18:	1ad2      	subs	r2, r2, r3
 8007b1a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d903      	bls.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007b28:	e005      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b2a:	4b54      	ldr	r3, [pc, #336]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d0eb      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007b36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d129      	bne.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b4e:	d10e      	bne.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007b50:	4b4a      	ldr	r3, [pc, #296]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b60:	091a      	lsrs	r2, r3, #4
 8007b62:	4b48      	ldr	r3, [pc, #288]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007b64:	4013      	ands	r3, r2
 8007b66:	4a45      	ldr	r2, [pc, #276]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b68:	430b      	orrs	r3, r1
 8007b6a:	6113      	str	r3, [r2, #16]
 8007b6c:	e005      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007b6e:	4b43      	ldr	r3, [pc, #268]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	4a42      	ldr	r2, [pc, #264]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b74:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007b78:	6113      	str	r3, [r2, #16]
 8007b7a:	4b40      	ldr	r3, [pc, #256]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b7c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b8a:	4a3c      	ldr	r2, [pc, #240]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b8c:	430b      	orrs	r3, r1
 8007b8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b90:	e008      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007b9a:	e003      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ba0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bac:	f002 0301 	and.w	r3, r2, #1
 8007bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007bba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	f000 808f 	beq.w	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bcc:	2b28      	cmp	r3, #40	@ 0x28
 8007bce:	d871      	bhi.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd6:	bf00      	nop
 8007bd8:	08007cbd 	.word	0x08007cbd
 8007bdc:	08007cb5 	.word	0x08007cb5
 8007be0:	08007cb5 	.word	0x08007cb5
 8007be4:	08007cb5 	.word	0x08007cb5
 8007be8:	08007cb5 	.word	0x08007cb5
 8007bec:	08007cb5 	.word	0x08007cb5
 8007bf0:	08007cb5 	.word	0x08007cb5
 8007bf4:	08007cb5 	.word	0x08007cb5
 8007bf8:	08007c89 	.word	0x08007c89
 8007bfc:	08007cb5 	.word	0x08007cb5
 8007c00:	08007cb5 	.word	0x08007cb5
 8007c04:	08007cb5 	.word	0x08007cb5
 8007c08:	08007cb5 	.word	0x08007cb5
 8007c0c:	08007cb5 	.word	0x08007cb5
 8007c10:	08007cb5 	.word	0x08007cb5
 8007c14:	08007cb5 	.word	0x08007cb5
 8007c18:	08007c9f 	.word	0x08007c9f
 8007c1c:	08007cb5 	.word	0x08007cb5
 8007c20:	08007cb5 	.word	0x08007cb5
 8007c24:	08007cb5 	.word	0x08007cb5
 8007c28:	08007cb5 	.word	0x08007cb5
 8007c2c:	08007cb5 	.word	0x08007cb5
 8007c30:	08007cb5 	.word	0x08007cb5
 8007c34:	08007cb5 	.word	0x08007cb5
 8007c38:	08007cbd 	.word	0x08007cbd
 8007c3c:	08007cb5 	.word	0x08007cb5
 8007c40:	08007cb5 	.word	0x08007cb5
 8007c44:	08007cb5 	.word	0x08007cb5
 8007c48:	08007cb5 	.word	0x08007cb5
 8007c4c:	08007cb5 	.word	0x08007cb5
 8007c50:	08007cb5 	.word	0x08007cb5
 8007c54:	08007cb5 	.word	0x08007cb5
 8007c58:	08007cbd 	.word	0x08007cbd
 8007c5c:	08007cb5 	.word	0x08007cb5
 8007c60:	08007cb5 	.word	0x08007cb5
 8007c64:	08007cb5 	.word	0x08007cb5
 8007c68:	08007cb5 	.word	0x08007cb5
 8007c6c:	08007cb5 	.word	0x08007cb5
 8007c70:	08007cb5 	.word	0x08007cb5
 8007c74:	08007cb5 	.word	0x08007cb5
 8007c78:	08007cbd 	.word	0x08007cbd
 8007c7c:	58024400 	.word	0x58024400
 8007c80:	58024800 	.word	0x58024800
 8007c84:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	2101      	movs	r1, #1
 8007c90:	4618      	mov	r0, r3
 8007c92:	f001 fdcb 	bl	800982c <RCCEx_PLL2_Config>
 8007c96:	4603      	mov	r3, r0
 8007c98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c9c:	e00f      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca2:	3328      	adds	r3, #40	@ 0x28
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f001 fe72 	bl	8009990 <RCCEx_PLL3_Config>
 8007cac:	4603      	mov	r3, r0
 8007cae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007cb2:	e004      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007cba:	e000      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10a      	bne.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007cc6:	4bbf      	ldr	r3, [pc, #764]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007cd4:	4abb      	ldr	r2, [pc, #748]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007cd6:	430b      	orrs	r3, r1
 8007cd8:	6553      	str	r3, [r2, #84]	@ 0x54
 8007cda:	e003      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ce0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cec:	f002 0302 	and.w	r3, r2, #2
 8007cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cfa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	4313      	orrs	r3, r2
 8007d02:	d041      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d0a:	2b05      	cmp	r3, #5
 8007d0c:	d824      	bhi.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d14 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d14:	08007d61 	.word	0x08007d61
 8007d18:	08007d2d 	.word	0x08007d2d
 8007d1c:	08007d43 	.word	0x08007d43
 8007d20:	08007d61 	.word	0x08007d61
 8007d24:	08007d61 	.word	0x08007d61
 8007d28:	08007d61 	.word	0x08007d61
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d30:	3308      	adds	r3, #8
 8007d32:	2101      	movs	r1, #1
 8007d34:	4618      	mov	r0, r3
 8007d36:	f001 fd79 	bl	800982c <RCCEx_PLL2_Config>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d40:	e00f      	b.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d46:	3328      	adds	r3, #40	@ 0x28
 8007d48:	2101      	movs	r1, #1
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f001 fe20 	bl	8009990 <RCCEx_PLL3_Config>
 8007d50:	4603      	mov	r3, r0
 8007d52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d56:	e004      	b.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d5e:	e000      	b.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10a      	bne.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d6a:	4b96      	ldr	r3, [pc, #600]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d6e:	f023 0107 	bic.w	r1, r3, #7
 8007d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d78:	4a92      	ldr	r2, [pc, #584]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d7a:	430b      	orrs	r3, r1
 8007d7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d7e:	e003      	b.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	f002 0304 	and.w	r3, r2, #4
 8007d94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d9e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007da2:	460b      	mov	r3, r1
 8007da4:	4313      	orrs	r3, r2
 8007da6:	d044      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007db0:	2b05      	cmp	r3, #5
 8007db2:	d825      	bhi.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007db4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dbc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dba:	bf00      	nop
 8007dbc:	08007e09 	.word	0x08007e09
 8007dc0:	08007dd5 	.word	0x08007dd5
 8007dc4:	08007deb 	.word	0x08007deb
 8007dc8:	08007e09 	.word	0x08007e09
 8007dcc:	08007e09 	.word	0x08007e09
 8007dd0:	08007e09 	.word	0x08007e09
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd8:	3308      	adds	r3, #8
 8007dda:	2101      	movs	r1, #1
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f001 fd25 	bl	800982c <RCCEx_PLL2_Config>
 8007de2:	4603      	mov	r3, r0
 8007de4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007de8:	e00f      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dee:	3328      	adds	r3, #40	@ 0x28
 8007df0:	2101      	movs	r1, #1
 8007df2:	4618      	mov	r0, r3
 8007df4:	f001 fdcc 	bl	8009990 <RCCEx_PLL3_Config>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007dfe:	e004      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e06:	e000      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10b      	bne.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e12:	4b6c      	ldr	r3, [pc, #432]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e16:	f023 0107 	bic.w	r1, r3, #7
 8007e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e22:	4a68      	ldr	r2, [pc, #416]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e24:	430b      	orrs	r3, r1
 8007e26:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e28:	e003      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3a:	f002 0320 	and.w	r3, r2, #32
 8007e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e42:	2300      	movs	r3, #0
 8007e44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e48:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	d055      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e5e:	d033      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e64:	d82c      	bhi.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e6a:	d02f      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e70:	d826      	bhi.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007e72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e76:	d02b      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007e78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e7c:	d820      	bhi.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007e7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e82:	d012      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e88:	d81a      	bhi.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d022      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007e8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e92:	d115      	bne.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e98:	3308      	adds	r3, #8
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f001 fcc5 	bl	800982c <RCCEx_PLL2_Config>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ea8:	e015      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eae:	3328      	adds	r3, #40	@ 0x28
 8007eb0:	2102      	movs	r1, #2
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f001 fd6c 	bl	8009990 <RCCEx_PLL3_Config>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ebe:	e00a      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ec6:	e006      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007ec8:	bf00      	nop
 8007eca:	e004      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007ecc:	bf00      	nop
 8007ece:	e002      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007ed0:	bf00      	nop
 8007ed2:	e000      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ed6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10b      	bne.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ede:	4b39      	ldr	r3, [pc, #228]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ee2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007eee:	4a35      	ldr	r2, [pc, #212]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ef4:	e003      	b.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007efa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f06:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007f0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f14:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007f18:	460b      	mov	r3, r1
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	d058      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f26:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f2a:	d033      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007f2c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f30:	d82c      	bhi.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f36:	d02f      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f3c:	d826      	bhi.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007f3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f42:	d02b      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007f44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f48:	d820      	bhi.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007f4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f4e:	d012      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007f50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f54:	d81a      	bhi.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d022      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f5e:	d115      	bne.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f64:	3308      	adds	r3, #8
 8007f66:	2100      	movs	r1, #0
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f001 fc5f 	bl	800982c <RCCEx_PLL2_Config>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f74:	e015      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f7a:	3328      	adds	r3, #40	@ 0x28
 8007f7c:	2102      	movs	r1, #2
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f001 fd06 	bl	8009990 <RCCEx_PLL3_Config>
 8007f84:	4603      	mov	r3, r0
 8007f86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f8a:	e00a      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f92:	e006      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f94:	bf00      	nop
 8007f96:	e004      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f98:	bf00      	nop
 8007f9a:	e002      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f9c:	bf00      	nop
 8007f9e:	e000      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10e      	bne.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007faa:	4b06      	ldr	r3, [pc, #24]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fba:	4a02      	ldr	r2, [pc, #8]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007fbc:	430b      	orrs	r3, r1
 8007fbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fc0:	e006      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007fc2:	bf00      	nop
 8007fc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007fdc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007fe6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007fea:	460b      	mov	r3, r1
 8007fec:	4313      	orrs	r3, r2
 8007fee:	d055      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ff8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007ffc:	d033      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007ffe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008002:	d82c      	bhi.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008004:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008008:	d02f      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800800a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800800e:	d826      	bhi.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008010:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008014:	d02b      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008016:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800801a:	d820      	bhi.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800801c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008020:	d012      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008022:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008026:	d81a      	bhi.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008028:	2b00      	cmp	r3, #0
 800802a:	d022      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800802c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008030:	d115      	bne.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008036:	3308      	adds	r3, #8
 8008038:	2100      	movs	r1, #0
 800803a:	4618      	mov	r0, r3
 800803c:	f001 fbf6 	bl	800982c <RCCEx_PLL2_Config>
 8008040:	4603      	mov	r3, r0
 8008042:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008046:	e015      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800804c:	3328      	adds	r3, #40	@ 0x28
 800804e:	2102      	movs	r1, #2
 8008050:	4618      	mov	r0, r3
 8008052:	f001 fc9d 	bl	8009990 <RCCEx_PLL3_Config>
 8008056:	4603      	mov	r3, r0
 8008058:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800805c:	e00a      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008064:	e006      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008066:	bf00      	nop
 8008068:	e004      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800806a:	bf00      	nop
 800806c:	e002      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800806e:	bf00      	nop
 8008070:	e000      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10b      	bne.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800807c:	4ba0      	ldr	r3, [pc, #640]	@ (8008300 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800807e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008080:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008088:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800808c:	4a9c      	ldr	r2, [pc, #624]	@ (8008300 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800808e:	430b      	orrs	r3, r1
 8008090:	6593      	str	r3, [r2, #88]	@ 0x58
 8008092:	e003      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008094:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008098:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800809c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	f002 0308 	and.w	r3, r2, #8
 80080a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80080ac:	2300      	movs	r3, #0
 80080ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80080b2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80080b6:	460b      	mov	r3, r1
 80080b8:	4313      	orrs	r3, r2
 80080ba:	d01e      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80080bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080c8:	d10c      	bne.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80080ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ce:	3328      	adds	r3, #40	@ 0x28
 80080d0:	2102      	movs	r1, #2
 80080d2:	4618      	mov	r0, r3
 80080d4:	f001 fc5c 	bl	8009990 <RCCEx_PLL3_Config>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d002      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80080e4:	4b86      	ldr	r3, [pc, #536]	@ (8008300 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080e8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80080ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080f4:	4a82      	ldr	r2, [pc, #520]	@ (8008300 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080f6:	430b      	orrs	r3, r1
 80080f8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008102:	f002 0310 	and.w	r3, r2, #16
 8008106:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800810a:	2300      	movs	r3, #0
 800810c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008110:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008114:	460b      	mov	r3, r1
 8008116:	4313      	orrs	r3, r2
 8008118:	d01e      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800811a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800811e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008126:	d10c      	bne.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800812c:	3328      	adds	r3, #40	@ 0x28
 800812e:	2102      	movs	r1, #2
 8008130:	4618      	mov	r0, r3
 8008132:	f001 fc2d 	bl	8009990 <RCCEx_PLL3_Config>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008142:	4b6f      	ldr	r3, [pc, #444]	@ (8008300 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008146:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800814a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008152:	4a6b      	ldr	r2, [pc, #428]	@ (8008300 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008154:	430b      	orrs	r3, r1
 8008156:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008164:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008166:	2300      	movs	r3, #0
 8008168:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800816a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800816e:	460b      	mov	r3, r1
 8008170:	4313      	orrs	r3, r2
 8008172:	d03e      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008178:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800817c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008180:	d022      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008182:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008186:	d81b      	bhi.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008188:	2b00      	cmp	r3, #0
 800818a:	d003      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800818c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008190:	d00b      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008192:	e015      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008198:	3308      	adds	r3, #8
 800819a:	2100      	movs	r1, #0
 800819c:	4618      	mov	r0, r3
 800819e:	f001 fb45 	bl	800982c <RCCEx_PLL2_Config>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80081a8:	e00f      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ae:	3328      	adds	r3, #40	@ 0x28
 80081b0:	2102      	movs	r1, #2
 80081b2:	4618      	mov	r0, r3
 80081b4:	f001 fbec 	bl	8009990 <RCCEx_PLL3_Config>
 80081b8:	4603      	mov	r3, r0
 80081ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80081be:	e004      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80081c6:	e000      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80081c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10b      	bne.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80081d2:	4b4b      	ldr	r3, [pc, #300]	@ (8008300 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081d6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80081da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081e2:	4a47      	ldr	r2, [pc, #284]	@ (8008300 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081e4:	430b      	orrs	r3, r1
 80081e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80081e8:	e003      	b.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80081f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80081fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8008200:	2300      	movs	r3, #0
 8008202:	677b      	str	r3, [r7, #116]	@ 0x74
 8008204:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008208:	460b      	mov	r3, r1
 800820a:	4313      	orrs	r3, r2
 800820c:	d03b      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800820e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008216:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800821a:	d01f      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800821c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008220:	d818      	bhi.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008222:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008226:	d003      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008228:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800822c:	d007      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800822e:	e011      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008230:	4b33      	ldr	r3, [pc, #204]	@ (8008300 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008234:	4a32      	ldr	r2, [pc, #200]	@ (8008300 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800823a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800823c:	e00f      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800823e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008242:	3328      	adds	r3, #40	@ 0x28
 8008244:	2101      	movs	r1, #1
 8008246:	4618      	mov	r0, r3
 8008248:	f001 fba2 	bl	8009990 <RCCEx_PLL3_Config>
 800824c:	4603      	mov	r3, r0
 800824e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008252:	e004      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800825a:	e000      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800825c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800825e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10b      	bne.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008266:	4b26      	ldr	r3, [pc, #152]	@ (8008300 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800826a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800826e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008276:	4a22      	ldr	r2, [pc, #136]	@ (8008300 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008278:	430b      	orrs	r3, r1
 800827a:	6553      	str	r3, [r2, #84]	@ 0x54
 800827c:	e003      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800827e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008282:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008292:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008294:	2300      	movs	r3, #0
 8008296:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008298:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800829c:	460b      	mov	r3, r1
 800829e:	4313      	orrs	r3, r2
 80082a0:	d034      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80082a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80082ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082b0:	d007      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80082b2:	e011      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082b4:	4b12      	ldr	r3, [pc, #72]	@ (8008300 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b8:	4a11      	ldr	r2, [pc, #68]	@ (8008300 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80082c0:	e00e      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082c6:	3308      	adds	r3, #8
 80082c8:	2102      	movs	r1, #2
 80082ca:	4618      	mov	r0, r3
 80082cc:	f001 faae 	bl	800982c <RCCEx_PLL2_Config>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80082d6:	e003      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80082de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10d      	bne.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80082e8:	4b05      	ldr	r3, [pc, #20]	@ (8008300 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80082f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082f6:	4a02      	ldr	r2, [pc, #8]	@ (8008300 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082f8:	430b      	orrs	r3, r1
 80082fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80082fc:	e006      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80082fe:	bf00      	nop
 8008300:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008304:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008308:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800830c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008314:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008318:	663b      	str	r3, [r7, #96]	@ 0x60
 800831a:	2300      	movs	r3, #0
 800831c:	667b      	str	r3, [r7, #100]	@ 0x64
 800831e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008322:	460b      	mov	r3, r1
 8008324:	4313      	orrs	r3, r2
 8008326:	d00c      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800832c:	3328      	adds	r3, #40	@ 0x28
 800832e:	2102      	movs	r1, #2
 8008330:	4618      	mov	r0, r3
 8008332:	f001 fb2d 	bl	8009990 <RCCEx_PLL3_Config>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800834e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008350:	2300      	movs	r3, #0
 8008352:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008354:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008358:	460b      	mov	r3, r1
 800835a:	4313      	orrs	r3, r2
 800835c:	d036      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800835e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008362:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008364:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008368:	d018      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800836a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800836e:	d811      	bhi.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008374:	d014      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008376:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800837a:	d80b      	bhi.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800837c:	2b00      	cmp	r3, #0
 800837e:	d011      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008384:	d106      	bne.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008386:	4bb7      	ldr	r3, [pc, #732]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838a:	4ab6      	ldr	r2, [pc, #728]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800838c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008390:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008392:	e008      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800839a:	e004      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800839c:	bf00      	nop
 800839e:	e002      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80083a0:	bf00      	nop
 80083a2:	e000      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80083a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10a      	bne.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80083ae:	4bad      	ldr	r3, [pc, #692]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083bc:	4aa9      	ldr	r2, [pc, #676]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083be:	430b      	orrs	r3, r1
 80083c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80083c2:	e003      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80083cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80083d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80083da:	2300      	movs	r3, #0
 80083dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80083de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80083e2:	460b      	mov	r3, r1
 80083e4:	4313      	orrs	r3, r2
 80083e6:	d009      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80083e8:	4b9e      	ldr	r3, [pc, #632]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80083f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083f6:	4a9b      	ldr	r2, [pc, #620]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083f8:	430b      	orrs	r3, r1
 80083fa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80083fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008404:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008408:	64bb      	str	r3, [r7, #72]	@ 0x48
 800840a:	2300      	movs	r3, #0
 800840c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800840e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008412:	460b      	mov	r3, r1
 8008414:	4313      	orrs	r3, r2
 8008416:	d009      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008418:	4b92      	ldr	r3, [pc, #584]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800841a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800841c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008424:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008426:	4a8f      	ldr	r2, [pc, #572]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008428:	430b      	orrs	r3, r1
 800842a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800842c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008434:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008438:	643b      	str	r3, [r7, #64]	@ 0x40
 800843a:	2300      	movs	r3, #0
 800843c:	647b      	str	r3, [r7, #68]	@ 0x44
 800843e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008442:	460b      	mov	r3, r1
 8008444:	4313      	orrs	r3, r2
 8008446:	d00e      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008448:	4b86      	ldr	r3, [pc, #536]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	4a85      	ldr	r2, [pc, #532]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800844e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008452:	6113      	str	r3, [r2, #16]
 8008454:	4b83      	ldr	r3, [pc, #524]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008456:	6919      	ldr	r1, [r3, #16]
 8008458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800845c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008460:	4a80      	ldr	r2, [pc, #512]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008462:	430b      	orrs	r3, r1
 8008464:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008472:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008474:	2300      	movs	r3, #0
 8008476:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008478:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800847c:	460b      	mov	r3, r1
 800847e:	4313      	orrs	r3, r2
 8008480:	d009      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008482:	4b78      	ldr	r3, [pc, #480]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008486:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800848a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800848e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008490:	4a74      	ldr	r2, [pc, #464]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008492:	430b      	orrs	r3, r1
 8008494:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80084a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80084a4:	2300      	movs	r3, #0
 80084a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80084a8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80084ac:	460b      	mov	r3, r1
 80084ae:	4313      	orrs	r3, r2
 80084b0:	d00a      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80084b2:	4b6c      	ldr	r3, [pc, #432]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084b6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80084ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084c2:	4a68      	ldr	r2, [pc, #416]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084c4:	430b      	orrs	r3, r1
 80084c6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80084c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d0:	2100      	movs	r1, #0
 80084d2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084da:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80084de:	460b      	mov	r3, r1
 80084e0:	4313      	orrs	r3, r2
 80084e2:	d011      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e8:	3308      	adds	r3, #8
 80084ea:	2100      	movs	r1, #0
 80084ec:	4618      	mov	r0, r3
 80084ee:	f001 f99d 	bl	800982c <RCCEx_PLL2_Config>
 80084f2:	4603      	mov	r3, r0
 80084f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80084f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d003      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008504:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800850c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008510:	2100      	movs	r1, #0
 8008512:	6239      	str	r1, [r7, #32]
 8008514:	f003 0302 	and.w	r3, r3, #2
 8008518:	627b      	str	r3, [r7, #36]	@ 0x24
 800851a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800851e:	460b      	mov	r3, r1
 8008520:	4313      	orrs	r3, r2
 8008522:	d011      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008528:	3308      	adds	r3, #8
 800852a:	2101      	movs	r1, #1
 800852c:	4618      	mov	r0, r3
 800852e:	f001 f97d 	bl	800982c <RCCEx_PLL2_Config>
 8008532:	4603      	mov	r3, r0
 8008534:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800853c:	2b00      	cmp	r3, #0
 800853e:	d003      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008544:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008550:	2100      	movs	r1, #0
 8008552:	61b9      	str	r1, [r7, #24]
 8008554:	f003 0304 	and.w	r3, r3, #4
 8008558:	61fb      	str	r3, [r7, #28]
 800855a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800855e:	460b      	mov	r3, r1
 8008560:	4313      	orrs	r3, r2
 8008562:	d011      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008568:	3308      	adds	r3, #8
 800856a:	2102      	movs	r1, #2
 800856c:	4618      	mov	r0, r3
 800856e:	f001 f95d 	bl	800982c <RCCEx_PLL2_Config>
 8008572:	4603      	mov	r3, r0
 8008574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008578:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800857c:	2b00      	cmp	r3, #0
 800857e:	d003      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008584:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	2100      	movs	r1, #0
 8008592:	6139      	str	r1, [r7, #16]
 8008594:	f003 0308 	and.w	r3, r3, #8
 8008598:	617b      	str	r3, [r7, #20]
 800859a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800859e:	460b      	mov	r3, r1
 80085a0:	4313      	orrs	r3, r2
 80085a2:	d011      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a8:	3328      	adds	r3, #40	@ 0x28
 80085aa:	2100      	movs	r1, #0
 80085ac:	4618      	mov	r0, r3
 80085ae:	f001 f9ef 	bl	8009990 <RCCEx_PLL3_Config>
 80085b2:	4603      	mov	r3, r0
 80085b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80085b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80085c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d0:	2100      	movs	r1, #0
 80085d2:	60b9      	str	r1, [r7, #8]
 80085d4:	f003 0310 	and.w	r3, r3, #16
 80085d8:	60fb      	str	r3, [r7, #12]
 80085da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80085de:	460b      	mov	r3, r1
 80085e0:	4313      	orrs	r3, r2
 80085e2:	d011      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085e8:	3328      	adds	r3, #40	@ 0x28
 80085ea:	2101      	movs	r1, #1
 80085ec:	4618      	mov	r0, r3
 80085ee:	f001 f9cf 	bl	8009990 <RCCEx_PLL3_Config>
 80085f2:	4603      	mov	r3, r0
 80085f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80085f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d003      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008600:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008604:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800860c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008610:	2100      	movs	r1, #0
 8008612:	6039      	str	r1, [r7, #0]
 8008614:	f003 0320 	and.w	r3, r3, #32
 8008618:	607b      	str	r3, [r7, #4]
 800861a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800861e:	460b      	mov	r3, r1
 8008620:	4313      	orrs	r3, r2
 8008622:	d011      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008628:	3328      	adds	r3, #40	@ 0x28
 800862a:	2102      	movs	r1, #2
 800862c:	4618      	mov	r0, r3
 800862e:	f001 f9af 	bl	8009990 <RCCEx_PLL3_Config>
 8008632:	4603      	mov	r3, r0
 8008634:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008638:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800863c:	2b00      	cmp	r3, #0
 800863e:	d003      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008640:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008644:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008648:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008650:	2300      	movs	r3, #0
 8008652:	e000      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
}
 8008656:	4618      	mov	r0, r3
 8008658:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800865c:	46bd      	mov	sp, r7
 800865e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008662:	bf00      	nop
 8008664:	58024400 	.word	0x58024400

08008668 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b090      	sub	sp, #64	@ 0x40
 800866c:	af00      	add	r7, sp, #0
 800866e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008676:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800867a:	430b      	orrs	r3, r1
 800867c:	f040 8094 	bne.w	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008680:	4b9b      	ldr	r3, [pc, #620]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008684:	f003 0307 	and.w	r3, r3, #7
 8008688:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800868a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868c:	2b04      	cmp	r3, #4
 800868e:	f200 8087 	bhi.w	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008692:	a201      	add	r2, pc, #4	@ (adr r2, 8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008698:	080086ad 	.word	0x080086ad
 800869c:	080086d5 	.word	0x080086d5
 80086a0:	080086fd 	.word	0x080086fd
 80086a4:	08008799 	.word	0x08008799
 80086a8:	08008725 	.word	0x08008725
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086ac:	4b90      	ldr	r3, [pc, #576]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086b8:	d108      	bne.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 ff62 	bl	8009588 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086c8:	f000 bc93 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086cc:	2300      	movs	r3, #0
 80086ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d0:	f000 bc8f 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086d4:	4b86      	ldr	r3, [pc, #536]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086e0:	d108      	bne.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086e2:	f107 0318 	add.w	r3, r7, #24
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 fca6 	bl	8009038 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086f0:	f000 bc7f 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086f4:	2300      	movs	r3, #0
 80086f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f8:	f000 bc7b 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086fc:	4b7c      	ldr	r3, [pc, #496]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008704:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008708:	d108      	bne.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800870a:	f107 030c 	add.w	r3, r7, #12
 800870e:	4618      	mov	r0, r3
 8008710:	f000 fde6 	bl	80092e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008718:	f000 bc6b 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800871c:	2300      	movs	r3, #0
 800871e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008720:	f000 bc67 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008724:	4b72      	ldr	r3, [pc, #456]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008728:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800872c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800872e:	4b70      	ldr	r3, [pc, #448]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0304 	and.w	r3, r3, #4
 8008736:	2b04      	cmp	r3, #4
 8008738:	d10c      	bne.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800873a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800873c:	2b00      	cmp	r3, #0
 800873e:	d109      	bne.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008740:	4b6b      	ldr	r3, [pc, #428]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	08db      	lsrs	r3, r3, #3
 8008746:	f003 0303 	and.w	r3, r3, #3
 800874a:	4a6a      	ldr	r2, [pc, #424]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800874c:	fa22 f303 	lsr.w	r3, r2, r3
 8008750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008752:	e01f      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008754:	4b66      	ldr	r3, [pc, #408]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800875c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008760:	d106      	bne.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008764:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008768:	d102      	bne.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800876a:	4b63      	ldr	r3, [pc, #396]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800876c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800876e:	e011      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008770:	4b5f      	ldr	r3, [pc, #380]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008778:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800877c:	d106      	bne.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800877e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008780:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008784:	d102      	bne.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008786:	4b5d      	ldr	r3, [pc, #372]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800878a:	e003      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800878c:	2300      	movs	r3, #0
 800878e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008790:	f000 bc2f 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008794:	f000 bc2d 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008798:	4b59      	ldr	r3, [pc, #356]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800879a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800879c:	f000 bc29 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087a4:	f000 bc25 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80087a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087ac:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80087b0:	430b      	orrs	r3, r1
 80087b2:	f040 80a7 	bne.w	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80087b6:	4b4e      	ldr	r3, [pc, #312]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087ba:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80087be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80087c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80087c6:	d054      	beq.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80087c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80087ce:	f200 808b 	bhi.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80087d8:	f000 8083 	beq.w	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80087dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087de:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80087e2:	f200 8081 	bhi.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80087e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087ec:	d02f      	beq.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80087ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087f4:	d878      	bhi.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80087f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d004      	beq.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80087fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008802:	d012      	beq.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008804:	e070      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008806:	4b3a      	ldr	r3, [pc, #232]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800880e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008812:	d107      	bne.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008818:	4618      	mov	r0, r3
 800881a:	f000 feb5 	bl	8009588 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800881e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008822:	e3e6      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008824:	2300      	movs	r3, #0
 8008826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008828:	e3e3      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800882a:	4b31      	ldr	r3, [pc, #196]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008832:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008836:	d107      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008838:	f107 0318 	add.w	r3, r7, #24
 800883c:	4618      	mov	r0, r3
 800883e:	f000 fbfb 	bl	8009038 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008846:	e3d4      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008848:	2300      	movs	r3, #0
 800884a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800884c:	e3d1      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800884e:	4b28      	ldr	r3, [pc, #160]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008856:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800885a:	d107      	bne.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800885c:	f107 030c 	add.w	r3, r7, #12
 8008860:	4618      	mov	r0, r3
 8008862:	f000 fd3d 	bl	80092e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800886a:	e3c2      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800886c:	2300      	movs	r3, #0
 800886e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008870:	e3bf      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008872:	4b1f      	ldr	r3, [pc, #124]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008876:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800887a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800887c:	4b1c      	ldr	r3, [pc, #112]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0304 	and.w	r3, r3, #4
 8008884:	2b04      	cmp	r3, #4
 8008886:	d10c      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800888a:	2b00      	cmp	r3, #0
 800888c:	d109      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800888e:	4b18      	ldr	r3, [pc, #96]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	08db      	lsrs	r3, r3, #3
 8008894:	f003 0303 	and.w	r3, r3, #3
 8008898:	4a16      	ldr	r2, [pc, #88]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800889a:	fa22 f303 	lsr.w	r3, r2, r3
 800889e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088a0:	e01e      	b.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088a2:	4b13      	ldr	r3, [pc, #76]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088ae:	d106      	bne.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80088b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088b6:	d102      	bne.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088b8:	4b0f      	ldr	r3, [pc, #60]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80088ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088bc:	e010      	b.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088be:	4b0c      	ldr	r3, [pc, #48]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088ca:	d106      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80088cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088d2:	d102      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80088d4:	4b09      	ldr	r3, [pc, #36]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088d8:	e002      	b.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80088da:	2300      	movs	r3, #0
 80088dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80088de:	e388      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80088e0:	e387      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80088e2:	4b07      	ldr	r3, [pc, #28]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80088e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088e6:	e384      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80088e8:	2300      	movs	r3, #0
 80088ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088ec:	e381      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80088ee:	bf00      	nop
 80088f0:	58024400 	.word	0x58024400
 80088f4:	03d09000 	.word	0x03d09000
 80088f8:	003d0900 	.word	0x003d0900
 80088fc:	016e3600 	.word	0x016e3600
 8008900:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008904:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008908:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800890c:	430b      	orrs	r3, r1
 800890e:	f040 809c 	bne.w	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008912:	4b9e      	ldr	r3, [pc, #632]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008916:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800891a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800891c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008922:	d054      	beq.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008926:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800892a:	f200 808b 	bhi.w	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800892e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008930:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008934:	f000 8083 	beq.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800893e:	f200 8081 	bhi.w	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008944:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008948:	d02f      	beq.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800894a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008950:	d878      	bhi.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008954:	2b00      	cmp	r3, #0
 8008956:	d004      	beq.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800895e:	d012      	beq.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008960:	e070      	b.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008962:	4b8a      	ldr	r3, [pc, #552]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800896a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800896e:	d107      	bne.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008974:	4618      	mov	r0, r3
 8008976:	f000 fe07 	bl	8009588 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800897a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800897e:	e338      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008980:	2300      	movs	r3, #0
 8008982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008984:	e335      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008986:	4b81      	ldr	r3, [pc, #516]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800898e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008992:	d107      	bne.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008994:	f107 0318 	add.w	r3, r7, #24
 8008998:	4618      	mov	r0, r3
 800899a:	f000 fb4d 	bl	8009038 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089a2:	e326      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089a4:	2300      	movs	r3, #0
 80089a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089a8:	e323      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089aa:	4b78      	ldr	r3, [pc, #480]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089b6:	d107      	bne.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089b8:	f107 030c 	add.w	r3, r7, #12
 80089bc:	4618      	mov	r0, r3
 80089be:	f000 fc8f 	bl	80092e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089c6:	e314      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089c8:	2300      	movs	r3, #0
 80089ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089cc:	e311      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089ce:	4b6f      	ldr	r3, [pc, #444]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80089d6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089d8:	4b6c      	ldr	r3, [pc, #432]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0304 	and.w	r3, r3, #4
 80089e0:	2b04      	cmp	r3, #4
 80089e2:	d10c      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80089e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d109      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089ea:	4b68      	ldr	r3, [pc, #416]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	08db      	lsrs	r3, r3, #3
 80089f0:	f003 0303 	and.w	r3, r3, #3
 80089f4:	4a66      	ldr	r2, [pc, #408]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80089f6:	fa22 f303 	lsr.w	r3, r2, r3
 80089fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089fc:	e01e      	b.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089fe:	4b63      	ldr	r3, [pc, #396]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a0a:	d106      	bne.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a12:	d102      	bne.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a14:	4b5f      	ldr	r3, [pc, #380]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a18:	e010      	b.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a1a:	4b5c      	ldr	r3, [pc, #368]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a26:	d106      	bne.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a2e:	d102      	bne.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a30:	4b59      	ldr	r3, [pc, #356]	@ (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a34:	e002      	b.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a36:	2300      	movs	r3, #0
 8008a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008a3a:	e2da      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008a3c:	e2d9      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a3e:	4b57      	ldr	r3, [pc, #348]	@ (8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a42:	e2d6      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a48:	e2d3      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008a4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a4e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008a52:	430b      	orrs	r3, r1
 8008a54:	f040 80a7 	bne.w	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008a58:	4b4c      	ldr	r3, [pc, #304]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a5c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008a60:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a68:	d055      	beq.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a70:	f200 8096 	bhi.w	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a7a:	f000 8084 	beq.w	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a84:	f200 808c 	bhi.w	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a8e:	d030      	beq.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a96:	f200 8083 	bhi.w	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d004      	beq.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008aa6:	d012      	beq.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008aa8:	e07a      	b.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008aaa:	4b38      	ldr	r3, [pc, #224]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ab2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ab6:	d107      	bne.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008abc:	4618      	mov	r0, r3
 8008abe:	f000 fd63 	bl	8009588 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ac6:	e294      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008acc:	e291      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ace:	4b2f      	ldr	r3, [pc, #188]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ad6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ada:	d107      	bne.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008adc:	f107 0318 	add.w	r3, r7, #24
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f000 faa9 	bl	8009038 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aea:	e282      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008aec:	2300      	movs	r3, #0
 8008aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af0:	e27f      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008af2:	4b26      	ldr	r3, [pc, #152]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008afa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008afe:	d107      	bne.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b00:	f107 030c 	add.w	r3, r7, #12
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 fbeb 	bl	80092e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b0e:	e270      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b10:	2300      	movs	r3, #0
 8008b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b14:	e26d      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b16:	4b1d      	ldr	r3, [pc, #116]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008b1e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b20:	4b1a      	ldr	r3, [pc, #104]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0304 	and.w	r3, r3, #4
 8008b28:	2b04      	cmp	r3, #4
 8008b2a:	d10c      	bne.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d109      	bne.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b32:	4b16      	ldr	r3, [pc, #88]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	08db      	lsrs	r3, r3, #3
 8008b38:	f003 0303 	and.w	r3, r3, #3
 8008b3c:	4a14      	ldr	r2, [pc, #80]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b44:	e01e      	b.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b46:	4b11      	ldr	r3, [pc, #68]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b52:	d106      	bne.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b5a:	d102      	bne.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b60:	e010      	b.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b62:	4b0a      	ldr	r3, [pc, #40]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b6e:	d106      	bne.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b76:	d102      	bne.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b78:	4b07      	ldr	r3, [pc, #28]	@ (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b7c:	e002      	b.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b82:	e236      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b84:	e235      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b86:	4b05      	ldr	r3, [pc, #20]	@ (8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b8a:	e232      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b8c:	58024400 	.word	0x58024400
 8008b90:	03d09000 	.word	0x03d09000
 8008b94:	003d0900 	.word	0x003d0900
 8008b98:	016e3600 	.word	0x016e3600
 8008b9c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ba4:	e225      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008ba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008baa:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008bae:	430b      	orrs	r3, r1
 8008bb0:	f040 8085 	bne.w	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008bb4:	4b9c      	ldr	r3, [pc, #624]	@ (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bb8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bc4:	d06b      	beq.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bcc:	d874      	bhi.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008bd4:	d056      	beq.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008bdc:	d86c      	bhi.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008be4:	d03b      	beq.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bec:	d864      	bhi.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bf4:	d021      	beq.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bfc:	d85c      	bhi.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d004      	beq.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c0a:	d004      	beq.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008c0c:	e054      	b.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008c0e:	f7fe fb5f 	bl	80072d0 <HAL_RCC_GetPCLK1Freq>
 8008c12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c14:	e1ed      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c16:	4b84      	ldr	r3, [pc, #528]	@ (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c22:	d107      	bne.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c24:	f107 0318 	add.w	r3, r7, #24
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 fa05 	bl	8009038 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c32:	e1de      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c38:	e1db      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c46:	d107      	bne.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c48:	f107 030c 	add.w	r3, r7, #12
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fb47 	bl	80092e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c56:	e1cc      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c5c:	e1c9      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c5e:	4b72      	ldr	r3, [pc, #456]	@ (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0304 	and.w	r3, r3, #4
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	d109      	bne.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c6a:	4b6f      	ldr	r3, [pc, #444]	@ (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	08db      	lsrs	r3, r3, #3
 8008c70:	f003 0303 	and.w	r3, r3, #3
 8008c74:	4a6d      	ldr	r2, [pc, #436]	@ (8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008c76:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c7c:	e1b9      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c82:	e1b6      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c84:	4b68      	ldr	r3, [pc, #416]	@ (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c90:	d102      	bne.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008c92:	4b67      	ldr	r3, [pc, #412]	@ (8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c96:	e1ac      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c9c:	e1a9      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c9e:	4b62      	ldr	r3, [pc, #392]	@ (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ca6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008caa:	d102      	bne.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008cac:	4b61      	ldr	r3, [pc, #388]	@ (8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cb0:	e19f      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb6:	e19c      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cbc:	e199      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cc2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008cc6:	430b      	orrs	r3, r1
 8008cc8:	d173      	bne.n	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008cca:	4b57      	ldr	r3, [pc, #348]	@ (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008cd2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cda:	d02f      	beq.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ce2:	d863      	bhi.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d004      	beq.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cf0:	d012      	beq.n	8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008cf2:	e05b      	b.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cf4:	4b4c      	ldr	r3, [pc, #304]	@ (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d00:	d107      	bne.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d02:	f107 0318 	add.w	r3, r7, #24
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 f996 	bl	8009038 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d10:	e16f      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d12:	2300      	movs	r3, #0
 8008d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d16:	e16c      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d18:	4b43      	ldr	r3, [pc, #268]	@ (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d24:	d107      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d26:	f107 030c 	add.w	r3, r7, #12
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 fad8 	bl	80092e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d34:	e15d      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d3a:	e15a      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d3c:	4b3a      	ldr	r3, [pc, #232]	@ (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d44:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d46:	4b38      	ldr	r3, [pc, #224]	@ (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0304 	and.w	r3, r3, #4
 8008d4e:	2b04      	cmp	r3, #4
 8008d50:	d10c      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d109      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d58:	4b33      	ldr	r3, [pc, #204]	@ (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	08db      	lsrs	r3, r3, #3
 8008d5e:	f003 0303 	and.w	r3, r3, #3
 8008d62:	4a32      	ldr	r2, [pc, #200]	@ (8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008d64:	fa22 f303 	lsr.w	r3, r2, r3
 8008d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d6a:	e01e      	b.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d78:	d106      	bne.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d80:	d102      	bne.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d82:	4b2b      	ldr	r3, [pc, #172]	@ (8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d86:	e010      	b.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d88:	4b27      	ldr	r3, [pc, #156]	@ (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d94:	d106      	bne.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d9c:	d102      	bne.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d9e:	4b25      	ldr	r3, [pc, #148]	@ (8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008da2:	e002      	b.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008da4:	2300      	movs	r3, #0
 8008da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008da8:	e123      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008daa:	e122      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008db0:	e11f      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008db6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008dba:	430b      	orrs	r3, r1
 8008dbc:	d13c      	bne.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008dc6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d004      	beq.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dd4:	d012      	beq.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008dd6:	e023      	b.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008dd8:	4b13      	ldr	r3, [pc, #76]	@ (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008de0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008de4:	d107      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 fbcc 	bl	8009588 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008df4:	e0fd      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dfa:	e0fa      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e08:	d107      	bne.n	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e0a:	f107 0318 	add.w	r3, r7, #24
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 f912 	bl	8009038 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e18:	e0eb      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e1e:	e0e8      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008e20:	2300      	movs	r3, #0
 8008e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e24:	e0e5      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e26:	bf00      	nop
 8008e28:	58024400 	.word	0x58024400
 8008e2c:	03d09000 	.word	0x03d09000
 8008e30:	003d0900 	.word	0x003d0900
 8008e34:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e3c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008e40:	430b      	orrs	r3, r1
 8008e42:	f040 8085 	bne.w	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008e46:	4b6d      	ldr	r3, [pc, #436]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e4a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008e4e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e56:	d06b      	beq.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e5e:	d874      	bhi.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e66:	d056      	beq.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e6e:	d86c      	bhi.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e76:	d03b      	beq.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e7e:	d864      	bhi.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e86:	d021      	beq.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e8e:	d85c      	bhi.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d004      	beq.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e9c:	d004      	beq.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008e9e:	e054      	b.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008ea0:	f000 f8b4 	bl	800900c <HAL_RCCEx_GetD3PCLK1Freq>
 8008ea4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ea6:	e0a4      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ea8:	4b54      	ldr	r3, [pc, #336]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008eb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008eb4:	d107      	bne.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eb6:	f107 0318 	add.w	r3, r7, #24
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f000 f8bc 	bl	8009038 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ec4:	e095      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eca:	e092      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ecc:	4b4b      	ldr	r3, [pc, #300]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ed8:	d107      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eda:	f107 030c 	add.w	r3, r7, #12
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 f9fe 	bl	80092e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ee8:	e083      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008eea:	2300      	movs	r3, #0
 8008eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eee:	e080      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ef0:	4b42      	ldr	r3, [pc, #264]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0304 	and.w	r3, r3, #4
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	d109      	bne.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008efc:	4b3f      	ldr	r3, [pc, #252]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	08db      	lsrs	r3, r3, #3
 8008f02:	f003 0303 	and.w	r3, r3, #3
 8008f06:	4a3e      	ldr	r2, [pc, #248]	@ (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008f08:	fa22 f303 	lsr.w	r3, r2, r3
 8008f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f0e:	e070      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f10:	2300      	movs	r3, #0
 8008f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f14:	e06d      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008f16:	4b39      	ldr	r3, [pc, #228]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f22:	d102      	bne.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008f24:	4b37      	ldr	r3, [pc, #220]	@ (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f28:	e063      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f2e:	e060      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f30:	4b32      	ldr	r3, [pc, #200]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f3c:	d102      	bne.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008f3e:	4b32      	ldr	r3, [pc, #200]	@ (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f42:	e056      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f48:	e053      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f4e:	e050      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f54:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	d148      	bne.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008f5c:	4b27      	ldr	r3, [pc, #156]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f64:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f6c:	d02a      	beq.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f74:	d838      	bhi.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d004      	beq.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f82:	d00d      	beq.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008f84:	e030      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f86:	4b1d      	ldr	r3, [pc, #116]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f92:	d102      	bne.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008f94:	4b1c      	ldr	r3, [pc, #112]	@ (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f98:	e02b      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f9e:	e028      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fa0:	4b16      	ldr	r3, [pc, #88]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fa8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fac:	d107      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 fae8 	bl	8009588 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fbc:	e019      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fc2:	e016      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fd0:	d107      	bne.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fd2:	f107 0318 	add.w	r3, r7, #24
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 f82e 	bl	8009038 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fe0:	e007      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fe6:	e004      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fec:	e001      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3740      	adds	r7, #64	@ 0x40
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	58024400 	.word	0x58024400
 8009000:	03d09000 	.word	0x03d09000
 8009004:	003d0900 	.word	0x003d0900
 8009008:	016e3600 	.word	0x016e3600

0800900c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009010:	f7fe f92e 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 8009014:	4602      	mov	r2, r0
 8009016:	4b06      	ldr	r3, [pc, #24]	@ (8009030 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009018:	6a1b      	ldr	r3, [r3, #32]
 800901a:	091b      	lsrs	r3, r3, #4
 800901c:	f003 0307 	and.w	r3, r3, #7
 8009020:	4904      	ldr	r1, [pc, #16]	@ (8009034 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009022:	5ccb      	ldrb	r3, [r1, r3]
 8009024:	f003 031f 	and.w	r3, r3, #31
 8009028:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800902c:	4618      	mov	r0, r3
 800902e:	bd80      	pop	{r7, pc}
 8009030:	58024400 	.word	0x58024400
 8009034:	0800c930 	.word	0x0800c930

08009038 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009038:	b480      	push	{r7}
 800903a:	b089      	sub	sp, #36	@ 0x24
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009040:	4ba1      	ldr	r3, [pc, #644]	@ (80092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009044:	f003 0303 	and.w	r3, r3, #3
 8009048:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800904a:	4b9f      	ldr	r3, [pc, #636]	@ (80092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800904c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800904e:	0b1b      	lsrs	r3, r3, #12
 8009050:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009054:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009056:	4b9c      	ldr	r3, [pc, #624]	@ (80092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905a:	091b      	lsrs	r3, r3, #4
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009062:	4b99      	ldr	r3, [pc, #612]	@ (80092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009066:	08db      	lsrs	r3, r3, #3
 8009068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	fb02 f303 	mul.w	r3, r2, r3
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2b00      	cmp	r3, #0
 8009082:	f000 8111 	beq.w	80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	2b02      	cmp	r3, #2
 800908a:	f000 8083 	beq.w	8009194 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	2b02      	cmp	r3, #2
 8009092:	f200 80a1 	bhi.w	80091d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d056      	beq.n	8009150 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80090a2:	e099      	b.n	80091d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090a4:	4b88      	ldr	r3, [pc, #544]	@ (80092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0320 	and.w	r3, r3, #32
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d02d      	beq.n	800910c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090b0:	4b85      	ldr	r3, [pc, #532]	@ (80092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	08db      	lsrs	r3, r3, #3
 80090b6:	f003 0303 	and.w	r3, r3, #3
 80090ba:	4a84      	ldr	r2, [pc, #528]	@ (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80090bc:	fa22 f303 	lsr.w	r3, r2, r3
 80090c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	ee07 3a90 	vmov	s15, r3
 80090c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	ee07 3a90 	vmov	s15, r3
 80090d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090da:	4b7b      	ldr	r3, [pc, #492]	@ (80092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e2:	ee07 3a90 	vmov	s15, r3
 80090e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80090ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009106:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800910a:	e087      	b.n	800921c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009116:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800911a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800911e:	4b6a      	ldr	r3, [pc, #424]	@ (80092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800912e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009132:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800913a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800913e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800914a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800914e:	e065      	b.n	800921c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	ee07 3a90 	vmov	s15, r3
 8009156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800915a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80092d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800915e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009162:	4b59      	ldr	r3, [pc, #356]	@ (80092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800916a:	ee07 3a90 	vmov	s15, r3
 800916e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009172:	ed97 6a03 	vldr	s12, [r7, #12]
 8009176:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800917a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800917e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800918a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800918e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009192:	e043      	b.n	800921c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	ee07 3a90 	vmov	s15, r3
 800919a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800919e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80092dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80091a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091a6:	4b48      	ldr	r3, [pc, #288]	@ (80092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ae:	ee07 3a90 	vmov	s15, r3
 80091b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091d6:	e021      	b.n	800921c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	ee07 3a90 	vmov	s15, r3
 80091de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80092d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ea:	4b37      	ldr	r3, [pc, #220]	@ (80092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f2:	ee07 3a90 	vmov	s15, r3
 80091f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80091fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800920a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800920e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800921a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800921c:	4b2a      	ldr	r3, [pc, #168]	@ (80092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800921e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009220:	0a5b      	lsrs	r3, r3, #9
 8009222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009236:	edd7 6a07 	vldr	s13, [r7, #28]
 800923a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800923e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009242:	ee17 2a90 	vmov	r2, s15
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800924a:	4b1f      	ldr	r3, [pc, #124]	@ (80092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800924c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800924e:	0c1b      	lsrs	r3, r3, #16
 8009250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009254:	ee07 3a90 	vmov	s15, r3
 8009258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800925c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009260:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009264:	edd7 6a07 	vldr	s13, [r7, #28]
 8009268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800926c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009270:	ee17 2a90 	vmov	r2, s15
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009278:	4b13      	ldr	r3, [pc, #76]	@ (80092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800927a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800927c:	0e1b      	lsrs	r3, r3, #24
 800927e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009282:	ee07 3a90 	vmov	s15, r3
 8009286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800928e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009292:	edd7 6a07 	vldr	s13, [r7, #28]
 8009296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800929a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800929e:	ee17 2a90 	vmov	r2, s15
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80092a6:	e008      	b.n	80092ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	609a      	str	r2, [r3, #8]
}
 80092ba:	bf00      	nop
 80092bc:	3724      	adds	r7, #36	@ 0x24
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	58024400 	.word	0x58024400
 80092cc:	03d09000 	.word	0x03d09000
 80092d0:	46000000 	.word	0x46000000
 80092d4:	4c742400 	.word	0x4c742400
 80092d8:	4a742400 	.word	0x4a742400
 80092dc:	4bb71b00 	.word	0x4bb71b00

080092e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b089      	sub	sp, #36	@ 0x24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092e8:	4ba1      	ldr	r3, [pc, #644]	@ (8009570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ec:	f003 0303 	and.w	r3, r3, #3
 80092f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80092f2:	4b9f      	ldr	r3, [pc, #636]	@ (8009570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f6:	0d1b      	lsrs	r3, r3, #20
 80092f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80092fe:	4b9c      	ldr	r3, [pc, #624]	@ (8009570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009302:	0a1b      	lsrs	r3, r3, #8
 8009304:	f003 0301 	and.w	r3, r3, #1
 8009308:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800930a:	4b99      	ldr	r3, [pc, #612]	@ (8009570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800930c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800930e:	08db      	lsrs	r3, r3, #3
 8009310:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	fb02 f303 	mul.w	r3, r2, r3
 800931a:	ee07 3a90 	vmov	s15, r3
 800931e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009322:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 8111 	beq.w	8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	2b02      	cmp	r3, #2
 8009332:	f000 8083 	beq.w	800943c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	2b02      	cmp	r3, #2
 800933a:	f200 80a1 	bhi.w	8009480 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d003      	beq.n	800934c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d056      	beq.n	80093f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800934a:	e099      	b.n	8009480 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800934c:	4b88      	ldr	r3, [pc, #544]	@ (8009570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 0320 	and.w	r3, r3, #32
 8009354:	2b00      	cmp	r3, #0
 8009356:	d02d      	beq.n	80093b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009358:	4b85      	ldr	r3, [pc, #532]	@ (8009570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	08db      	lsrs	r3, r3, #3
 800935e:	f003 0303 	and.w	r3, r3, #3
 8009362:	4a84      	ldr	r2, [pc, #528]	@ (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009364:	fa22 f303 	lsr.w	r3, r2, r3
 8009368:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	ee07 3a90 	vmov	s15, r3
 8009370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	ee07 3a90 	vmov	s15, r3
 800937a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009382:	4b7b      	ldr	r3, [pc, #492]	@ (8009570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938a:	ee07 3a90 	vmov	s15, r3
 800938e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009392:	ed97 6a03 	vldr	s12, [r7, #12]
 8009396:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800939a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800939e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80093b2:	e087      	b.n	80094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	ee07 3a90 	vmov	s15, r3
 80093ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800957c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80093c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c6:	4b6a      	ldr	r3, [pc, #424]	@ (8009570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093f6:	e065      	b.n	80094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	ee07 3a90 	vmov	s15, r3
 80093fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009402:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009580 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940a:	4b59      	ldr	r3, [pc, #356]	@ (8009570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800940c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800940e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941a:	ed97 6a03 	vldr	s12, [r7, #12]
 800941e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800942e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800943a:	e043      	b.n	80094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	ee07 3a90 	vmov	s15, r3
 8009442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009446:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800944a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800944e:	4b48      	ldr	r3, [pc, #288]	@ (8009570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009456:	ee07 3a90 	vmov	s15, r3
 800945a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800945e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009462:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800946a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800946e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800947e:	e021      	b.n	80094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009580 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800948e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009492:	4b37      	ldr	r3, [pc, #220]	@ (8009570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800949a:	ee07 3a90 	vmov	s15, r3
 800949e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80094a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80094c4:	4b2a      	ldr	r3, [pc, #168]	@ (8009570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c8:	0a5b      	lsrs	r3, r3, #9
 80094ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094de:	edd7 6a07 	vldr	s13, [r7, #28]
 80094e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ea:	ee17 2a90 	vmov	r2, s15
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80094f2:	4b1f      	ldr	r3, [pc, #124]	@ (8009570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f6:	0c1b      	lsrs	r3, r3, #16
 80094f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094fc:	ee07 3a90 	vmov	s15, r3
 8009500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009504:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009508:	ee37 7a87 	vadd.f32	s14, s15, s14
 800950c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009518:	ee17 2a90 	vmov	r2, s15
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009520:	4b13      	ldr	r3, [pc, #76]	@ (8009570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009524:	0e1b      	lsrs	r3, r3, #24
 8009526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800952a:	ee07 3a90 	vmov	s15, r3
 800952e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009532:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009536:	ee37 7a87 	vadd.f32	s14, s15, s14
 800953a:	edd7 6a07 	vldr	s13, [r7, #28]
 800953e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009546:	ee17 2a90 	vmov	r2, s15
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800954e:	e008      	b.n	8009562 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	609a      	str	r2, [r3, #8]
}
 8009562:	bf00      	nop
 8009564:	3724      	adds	r7, #36	@ 0x24
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	58024400 	.word	0x58024400
 8009574:	03d09000 	.word	0x03d09000
 8009578:	46000000 	.word	0x46000000
 800957c:	4c742400 	.word	0x4c742400
 8009580:	4a742400 	.word	0x4a742400
 8009584:	4bb71b00 	.word	0x4bb71b00

08009588 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009588:	b480      	push	{r7}
 800958a:	b089      	sub	sp, #36	@ 0x24
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009590:	4ba0      	ldr	r3, [pc, #640]	@ (8009814 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009594:	f003 0303 	and.w	r3, r3, #3
 8009598:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800959a:	4b9e      	ldr	r3, [pc, #632]	@ (8009814 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800959c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800959e:	091b      	lsrs	r3, r3, #4
 80095a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095a4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80095a6:	4b9b      	ldr	r3, [pc, #620]	@ (8009814 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80095b0:	4b98      	ldr	r3, [pc, #608]	@ (8009814 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095b4:	08db      	lsrs	r3, r3, #3
 80095b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	fb02 f303 	mul.w	r3, r2, r3
 80095c0:	ee07 3a90 	vmov	s15, r3
 80095c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f000 8111 	beq.w	80097f6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	f000 8083 	beq.w	80096e2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	2b02      	cmp	r3, #2
 80095e0:	f200 80a1 	bhi.w	8009726 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d003      	beq.n	80095f2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d056      	beq.n	800969e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80095f0:	e099      	b.n	8009726 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095f2:	4b88      	ldr	r3, [pc, #544]	@ (8009814 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 0320 	and.w	r3, r3, #32
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d02d      	beq.n	800965a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095fe:	4b85      	ldr	r3, [pc, #532]	@ (8009814 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	08db      	lsrs	r3, r3, #3
 8009604:	f003 0303 	and.w	r3, r3, #3
 8009608:	4a83      	ldr	r2, [pc, #524]	@ (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800960a:	fa22 f303 	lsr.w	r3, r2, r3
 800960e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	ee07 3a90 	vmov	s15, r3
 8009616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	ee07 3a90 	vmov	s15, r3
 8009620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009628:	4b7a      	ldr	r3, [pc, #488]	@ (8009814 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800962a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800962c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009630:	ee07 3a90 	vmov	s15, r3
 8009634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009638:	ed97 6a03 	vldr	s12, [r7, #12]
 800963c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800981c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009648:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800964c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009654:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009658:	e087      	b.n	800976a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	ee07 3a90 	vmov	s15, r3
 8009660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009664:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009820 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800966c:	4b69      	ldr	r3, [pc, #420]	@ (8009814 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800966e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009674:	ee07 3a90 	vmov	s15, r3
 8009678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800967c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009680:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800981c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009684:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800968c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009698:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800969c:	e065      	b.n	800976a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	ee07 3a90 	vmov	s15, r3
 80096a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80096ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096b0:	4b58      	ldr	r3, [pc, #352]	@ (8009814 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b8:	ee07 3a90 	vmov	s15, r3
 80096bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80096c4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800981c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096e0:	e043      	b.n	800976a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	ee07 3a90 	vmov	s15, r3
 80096e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ec:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80096f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096f4:	4b47      	ldr	r3, [pc, #284]	@ (8009814 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096fc:	ee07 3a90 	vmov	s15, r3
 8009700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009704:	ed97 6a03 	vldr	s12, [r7, #12]
 8009708:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800981c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800970c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009714:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800971c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009720:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009724:	e021      	b.n	800976a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	ee07 3a90 	vmov	s15, r3
 800972c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009730:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009820 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009738:	4b36      	ldr	r3, [pc, #216]	@ (8009814 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800973a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800973c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009740:	ee07 3a90 	vmov	s15, r3
 8009744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009748:	ed97 6a03 	vldr	s12, [r7, #12]
 800974c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800981c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009750:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009754:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009758:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800975c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009764:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009768:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800976a:	4b2a      	ldr	r3, [pc, #168]	@ (8009814 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800976c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800976e:	0a5b      	lsrs	r3, r3, #9
 8009770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009774:	ee07 3a90 	vmov	s15, r3
 8009778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009780:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009784:	edd7 6a07 	vldr	s13, [r7, #28]
 8009788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800978c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009790:	ee17 2a90 	vmov	r2, s15
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009798:	4b1e      	ldr	r3, [pc, #120]	@ (8009814 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800979a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800979c:	0c1b      	lsrs	r3, r3, #16
 800979e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097a2:	ee07 3a90 	vmov	s15, r3
 80097a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80097b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097be:	ee17 2a90 	vmov	r2, s15
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80097c6:	4b13      	ldr	r3, [pc, #76]	@ (8009814 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ca:	0e1b      	lsrs	r3, r3, #24
 80097cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097d0:	ee07 3a90 	vmov	s15, r3
 80097d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80097e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ec:	ee17 2a90 	vmov	r2, s15
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80097f4:	e008      	b.n	8009808 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	609a      	str	r2, [r3, #8]
}
 8009808:	bf00      	nop
 800980a:	3724      	adds	r7, #36	@ 0x24
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	58024400 	.word	0x58024400
 8009818:	03d09000 	.word	0x03d09000
 800981c:	46000000 	.word	0x46000000
 8009820:	4c742400 	.word	0x4c742400
 8009824:	4a742400 	.word	0x4a742400
 8009828:	4bb71b00 	.word	0x4bb71b00

0800982c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800983a:	4b53      	ldr	r3, [pc, #332]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800983c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800983e:	f003 0303 	and.w	r3, r3, #3
 8009842:	2b03      	cmp	r3, #3
 8009844:	d101      	bne.n	800984a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e099      	b.n	800997e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800984a:	4b4f      	ldr	r3, [pc, #316]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a4e      	ldr	r2, [pc, #312]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009850:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009856:	f7f9 f965 	bl	8002b24 <HAL_GetTick>
 800985a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800985c:	e008      	b.n	8009870 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800985e:	f7f9 f961 	bl	8002b24 <HAL_GetTick>
 8009862:	4602      	mov	r2, r0
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	2b02      	cmp	r3, #2
 800986a:	d901      	bls.n	8009870 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800986c:	2303      	movs	r3, #3
 800986e:	e086      	b.n	800997e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009870:	4b45      	ldr	r3, [pc, #276]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1f0      	bne.n	800985e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800987c:	4b42      	ldr	r3, [pc, #264]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800987e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009880:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	031b      	lsls	r3, r3, #12
 800988a:	493f      	ldr	r1, [pc, #252]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800988c:	4313      	orrs	r3, r2
 800988e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	3b01      	subs	r3, #1
 8009896:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	3b01      	subs	r3, #1
 80098a0:	025b      	lsls	r3, r3, #9
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	431a      	orrs	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	041b      	lsls	r3, r3, #16
 80098ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80098b2:	431a      	orrs	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	3b01      	subs	r3, #1
 80098ba:	061b      	lsls	r3, r3, #24
 80098bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80098c0:	4931      	ldr	r1, [pc, #196]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80098c6:	4b30      	ldr	r3, [pc, #192]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	492d      	ldr	r1, [pc, #180]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098d4:	4313      	orrs	r3, r2
 80098d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80098d8:	4b2b      	ldr	r3, [pc, #172]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098dc:	f023 0220 	bic.w	r2, r3, #32
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	4928      	ldr	r1, [pc, #160]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80098ea:	4b27      	ldr	r3, [pc, #156]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ee:	4a26      	ldr	r2, [pc, #152]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098f0:	f023 0310 	bic.w	r3, r3, #16
 80098f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098f6:	4b24      	ldr	r3, [pc, #144]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098fa:	4b24      	ldr	r3, [pc, #144]	@ (800998c <RCCEx_PLL2_Config+0x160>)
 80098fc:	4013      	ands	r3, r2
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	69d2      	ldr	r2, [r2, #28]
 8009902:	00d2      	lsls	r2, r2, #3
 8009904:	4920      	ldr	r1, [pc, #128]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009906:	4313      	orrs	r3, r2
 8009908:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800990a:	4b1f      	ldr	r3, [pc, #124]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800990c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990e:	4a1e      	ldr	r2, [pc, #120]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009910:	f043 0310 	orr.w	r3, r3, #16
 8009914:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d106      	bne.n	800992a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800991c:	4b1a      	ldr	r3, [pc, #104]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800991e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009920:	4a19      	ldr	r2, [pc, #100]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009922:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009926:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009928:	e00f      	b.n	800994a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d106      	bne.n	800993e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009930:	4b15      	ldr	r3, [pc, #84]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009934:	4a14      	ldr	r2, [pc, #80]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800993a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800993c:	e005      	b.n	800994a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800993e:	4b12      	ldr	r3, [pc, #72]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009942:	4a11      	ldr	r2, [pc, #68]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009944:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009948:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800994a:	4b0f      	ldr	r3, [pc, #60]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a0e      	ldr	r2, [pc, #56]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009950:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009956:	f7f9 f8e5 	bl	8002b24 <HAL_GetTick>
 800995a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800995c:	e008      	b.n	8009970 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800995e:	f7f9 f8e1 	bl	8002b24 <HAL_GetTick>
 8009962:	4602      	mov	r2, r0
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	2b02      	cmp	r3, #2
 800996a:	d901      	bls.n	8009970 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800996c:	2303      	movs	r3, #3
 800996e:	e006      	b.n	800997e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009970:	4b05      	ldr	r3, [pc, #20]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009978:	2b00      	cmp	r3, #0
 800997a:	d0f0      	beq.n	800995e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800997c:	7bfb      	ldrb	r3, [r7, #15]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	58024400 	.word	0x58024400
 800998c:	ffff0007 	.word	0xffff0007

08009990 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800999e:	4b53      	ldr	r3, [pc, #332]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 80099a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a2:	f003 0303 	and.w	r3, r3, #3
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d101      	bne.n	80099ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e099      	b.n	8009ae2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80099ae:	4b4f      	ldr	r3, [pc, #316]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a4e      	ldr	r2, [pc, #312]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 80099b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099ba:	f7f9 f8b3 	bl	8002b24 <HAL_GetTick>
 80099be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099c0:	e008      	b.n	80099d4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80099c2:	f7f9 f8af 	bl	8002b24 <HAL_GetTick>
 80099c6:	4602      	mov	r2, r0
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d901      	bls.n	80099d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e086      	b.n	8009ae2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099d4:	4b45      	ldr	r3, [pc, #276]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1f0      	bne.n	80099c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80099e0:	4b42      	ldr	r3, [pc, #264]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 80099e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	051b      	lsls	r3, r3, #20
 80099ee:	493f      	ldr	r1, [pc, #252]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	3b01      	subs	r3, #1
 80099fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	025b      	lsls	r3, r3, #9
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	431a      	orrs	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	041b      	lsls	r3, r3, #16
 8009a12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009a16:	431a      	orrs	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	061b      	lsls	r3, r3, #24
 8009a20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009a24:	4931      	ldr	r1, [pc, #196]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a26:	4313      	orrs	r3, r2
 8009a28:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a2a:	4b30      	ldr	r3, [pc, #192]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	492d      	ldr	r1, [pc, #180]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a40:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	4928      	ldr	r1, [pc, #160]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a4e:	4b27      	ldr	r3, [pc, #156]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a52:	4a26      	ldr	r2, [pc, #152]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a5a:	4b24      	ldr	r3, [pc, #144]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a5e:	4b24      	ldr	r3, [pc, #144]	@ (8009af0 <RCCEx_PLL3_Config+0x160>)
 8009a60:	4013      	ands	r3, r2
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	69d2      	ldr	r2, [r2, #28]
 8009a66:	00d2      	lsls	r2, r2, #3
 8009a68:	4920      	ldr	r1, [pc, #128]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a72:	4a1e      	ldr	r2, [pc, #120]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d106      	bne.n	8009a8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a80:	4b1a      	ldr	r3, [pc, #104]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a84:	4a19      	ldr	r2, [pc, #100]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009a8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a8c:	e00f      	b.n	8009aae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d106      	bne.n	8009aa2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a94:	4b15      	ldr	r3, [pc, #84]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a98:	4a14      	ldr	r2, [pc, #80]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009aa0:	e005      	b.n	8009aae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009aa2:	4b12      	ldr	r3, [pc, #72]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa6:	4a11      	ldr	r2, [pc, #68]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009aa8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009aac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009aae:	4b0f      	ldr	r3, [pc, #60]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aba:	f7f9 f833 	bl	8002b24 <HAL_GetTick>
 8009abe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ac0:	e008      	b.n	8009ad4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ac2:	f7f9 f82f 	bl	8002b24 <HAL_GetTick>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d901      	bls.n	8009ad4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e006      	b.n	8009ae2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ad4:	4b05      	ldr	r3, [pc, #20]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d0f0      	beq.n	8009ac2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	58024400 	.word	0x58024400
 8009af0:	ffff0007 	.word	0xffff0007

08009af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d101      	bne.n	8009b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e049      	b.n	8009b9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d106      	bne.n	8009b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7f8 fda4 	bl	8002668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2202      	movs	r2, #2
 8009b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	3304      	adds	r3, #4
 8009b30:	4619      	mov	r1, r3
 8009b32:	4610      	mov	r0, r2
 8009b34:	f000 fac6 	bl	800a0c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b082      	sub	sp, #8
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d101      	bne.n	8009bb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e049      	b.n	8009c48 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d106      	bne.n	8009bce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f841 	bl	8009c50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2202      	movs	r2, #2
 8009bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	3304      	adds	r3, #4
 8009bde:	4619      	mov	r1, r3
 8009be0:	4610      	mov	r0, r2
 8009be2:	f000 fa6f 	bl	800a0c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2201      	movs	r2, #1
 8009bea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d109      	bne.n	8009c88 <HAL_TIM_PWM_Start+0x24>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	bf14      	ite	ne
 8009c80:	2301      	movne	r3, #1
 8009c82:	2300      	moveq	r3, #0
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	e03c      	b.n	8009d02 <HAL_TIM_PWM_Start+0x9e>
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	2b04      	cmp	r3, #4
 8009c8c:	d109      	bne.n	8009ca2 <HAL_TIM_PWM_Start+0x3e>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	bf14      	ite	ne
 8009c9a:	2301      	movne	r3, #1
 8009c9c:	2300      	moveq	r3, #0
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	e02f      	b.n	8009d02 <HAL_TIM_PWM_Start+0x9e>
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b08      	cmp	r3, #8
 8009ca6:	d109      	bne.n	8009cbc <HAL_TIM_PWM_Start+0x58>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	bf14      	ite	ne
 8009cb4:	2301      	movne	r3, #1
 8009cb6:	2300      	moveq	r3, #0
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	e022      	b.n	8009d02 <HAL_TIM_PWM_Start+0x9e>
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	2b0c      	cmp	r3, #12
 8009cc0:	d109      	bne.n	8009cd6 <HAL_TIM_PWM_Start+0x72>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	bf14      	ite	ne
 8009cce:	2301      	movne	r3, #1
 8009cd0:	2300      	moveq	r3, #0
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	e015      	b.n	8009d02 <HAL_TIM_PWM_Start+0x9e>
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	2b10      	cmp	r3, #16
 8009cda:	d109      	bne.n	8009cf0 <HAL_TIM_PWM_Start+0x8c>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	bf14      	ite	ne
 8009ce8:	2301      	movne	r3, #1
 8009cea:	2300      	moveq	r3, #0
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	e008      	b.n	8009d02 <HAL_TIM_PWM_Start+0x9e>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	bf14      	ite	ne
 8009cfc:	2301      	movne	r3, #1
 8009cfe:	2300      	moveq	r3, #0
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d001      	beq.n	8009d0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e0ab      	b.n	8009e62 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d104      	bne.n	8009d1a <HAL_TIM_PWM_Start+0xb6>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2202      	movs	r2, #2
 8009d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d18:	e023      	b.n	8009d62 <HAL_TIM_PWM_Start+0xfe>
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b04      	cmp	r3, #4
 8009d1e:	d104      	bne.n	8009d2a <HAL_TIM_PWM_Start+0xc6>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2202      	movs	r2, #2
 8009d24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d28:	e01b      	b.n	8009d62 <HAL_TIM_PWM_Start+0xfe>
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	2b08      	cmp	r3, #8
 8009d2e:	d104      	bne.n	8009d3a <HAL_TIM_PWM_Start+0xd6>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2202      	movs	r2, #2
 8009d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d38:	e013      	b.n	8009d62 <HAL_TIM_PWM_Start+0xfe>
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2b0c      	cmp	r3, #12
 8009d3e:	d104      	bne.n	8009d4a <HAL_TIM_PWM_Start+0xe6>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2202      	movs	r2, #2
 8009d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d48:	e00b      	b.n	8009d62 <HAL_TIM_PWM_Start+0xfe>
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	2b10      	cmp	r3, #16
 8009d4e:	d104      	bne.n	8009d5a <HAL_TIM_PWM_Start+0xf6>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2202      	movs	r2, #2
 8009d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d58:	e003      	b.n	8009d62 <HAL_TIM_PWM_Start+0xfe>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2201      	movs	r2, #1
 8009d68:	6839      	ldr	r1, [r7, #0]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f000 fd2c 	bl	800a7c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a3d      	ldr	r2, [pc, #244]	@ (8009e6c <HAL_TIM_PWM_Start+0x208>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d013      	beq.n	8009da2 <HAL_TIM_PWM_Start+0x13e>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a3c      	ldr	r2, [pc, #240]	@ (8009e70 <HAL_TIM_PWM_Start+0x20c>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d00e      	beq.n	8009da2 <HAL_TIM_PWM_Start+0x13e>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a3a      	ldr	r2, [pc, #232]	@ (8009e74 <HAL_TIM_PWM_Start+0x210>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d009      	beq.n	8009da2 <HAL_TIM_PWM_Start+0x13e>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a39      	ldr	r2, [pc, #228]	@ (8009e78 <HAL_TIM_PWM_Start+0x214>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d004      	beq.n	8009da2 <HAL_TIM_PWM_Start+0x13e>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a37      	ldr	r2, [pc, #220]	@ (8009e7c <HAL_TIM_PWM_Start+0x218>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d101      	bne.n	8009da6 <HAL_TIM_PWM_Start+0x142>
 8009da2:	2301      	movs	r3, #1
 8009da4:	e000      	b.n	8009da8 <HAL_TIM_PWM_Start+0x144>
 8009da6:	2300      	movs	r3, #0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d007      	beq.n	8009dbc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009dba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8009e6c <HAL_TIM_PWM_Start+0x208>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d02c      	beq.n	8009e20 <HAL_TIM_PWM_Start+0x1bc>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dce:	d027      	beq.n	8009e20 <HAL_TIM_PWM_Start+0x1bc>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a2a      	ldr	r2, [pc, #168]	@ (8009e80 <HAL_TIM_PWM_Start+0x21c>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d022      	beq.n	8009e20 <HAL_TIM_PWM_Start+0x1bc>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a29      	ldr	r2, [pc, #164]	@ (8009e84 <HAL_TIM_PWM_Start+0x220>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d01d      	beq.n	8009e20 <HAL_TIM_PWM_Start+0x1bc>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a27      	ldr	r2, [pc, #156]	@ (8009e88 <HAL_TIM_PWM_Start+0x224>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d018      	beq.n	8009e20 <HAL_TIM_PWM_Start+0x1bc>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a1f      	ldr	r2, [pc, #124]	@ (8009e70 <HAL_TIM_PWM_Start+0x20c>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d013      	beq.n	8009e20 <HAL_TIM_PWM_Start+0x1bc>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a23      	ldr	r2, [pc, #140]	@ (8009e8c <HAL_TIM_PWM_Start+0x228>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d00e      	beq.n	8009e20 <HAL_TIM_PWM_Start+0x1bc>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a1b      	ldr	r2, [pc, #108]	@ (8009e74 <HAL_TIM_PWM_Start+0x210>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d009      	beq.n	8009e20 <HAL_TIM_PWM_Start+0x1bc>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a1f      	ldr	r2, [pc, #124]	@ (8009e90 <HAL_TIM_PWM_Start+0x22c>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d004      	beq.n	8009e20 <HAL_TIM_PWM_Start+0x1bc>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8009e94 <HAL_TIM_PWM_Start+0x230>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d115      	bne.n	8009e4c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	689a      	ldr	r2, [r3, #8]
 8009e26:	4b1c      	ldr	r3, [pc, #112]	@ (8009e98 <HAL_TIM_PWM_Start+0x234>)
 8009e28:	4013      	ands	r3, r2
 8009e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2b06      	cmp	r3, #6
 8009e30:	d015      	beq.n	8009e5e <HAL_TIM_PWM_Start+0x1fa>
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e38:	d011      	beq.n	8009e5e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f042 0201 	orr.w	r2, r2, #1
 8009e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e4a:	e008      	b.n	8009e5e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f042 0201 	orr.w	r2, r2, #1
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	e000      	b.n	8009e60 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	40010000 	.word	0x40010000
 8009e70:	40010400 	.word	0x40010400
 8009e74:	40014000 	.word	0x40014000
 8009e78:	40014400 	.word	0x40014400
 8009e7c:	40014800 	.word	0x40014800
 8009e80:	40000400 	.word	0x40000400
 8009e84:	40000800 	.word	0x40000800
 8009e88:	40000c00 	.word	0x40000c00
 8009e8c:	40001800 	.word	0x40001800
 8009e90:	4000e000 	.word	0x4000e000
 8009e94:	4000e400 	.word	0x4000e400
 8009e98:	00010007 	.word	0x00010007

08009e9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b086      	sub	sp, #24
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d101      	bne.n	8009eba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	e0ff      	b.n	800a0ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2b14      	cmp	r3, #20
 8009ec6:	f200 80f0 	bhi.w	800a0aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009eca:	a201      	add	r2, pc, #4	@ (adr r2, 8009ed0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed0:	08009f25 	.word	0x08009f25
 8009ed4:	0800a0ab 	.word	0x0800a0ab
 8009ed8:	0800a0ab 	.word	0x0800a0ab
 8009edc:	0800a0ab 	.word	0x0800a0ab
 8009ee0:	08009f65 	.word	0x08009f65
 8009ee4:	0800a0ab 	.word	0x0800a0ab
 8009ee8:	0800a0ab 	.word	0x0800a0ab
 8009eec:	0800a0ab 	.word	0x0800a0ab
 8009ef0:	08009fa7 	.word	0x08009fa7
 8009ef4:	0800a0ab 	.word	0x0800a0ab
 8009ef8:	0800a0ab 	.word	0x0800a0ab
 8009efc:	0800a0ab 	.word	0x0800a0ab
 8009f00:	08009fe7 	.word	0x08009fe7
 8009f04:	0800a0ab 	.word	0x0800a0ab
 8009f08:	0800a0ab 	.word	0x0800a0ab
 8009f0c:	0800a0ab 	.word	0x0800a0ab
 8009f10:	0800a029 	.word	0x0800a029
 8009f14:	0800a0ab 	.word	0x0800a0ab
 8009f18:	0800a0ab 	.word	0x0800a0ab
 8009f1c:	0800a0ab 	.word	0x0800a0ab
 8009f20:	0800a069 	.word	0x0800a069
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68b9      	ldr	r1, [r7, #8]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 f976 	bl	800a21c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	699a      	ldr	r2, [r3, #24]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f042 0208 	orr.w	r2, r2, #8
 8009f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	699a      	ldr	r2, [r3, #24]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f022 0204 	bic.w	r2, r2, #4
 8009f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6999      	ldr	r1, [r3, #24]
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	691a      	ldr	r2, [r3, #16]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	430a      	orrs	r2, r1
 8009f60:	619a      	str	r2, [r3, #24]
      break;
 8009f62:	e0a5      	b.n	800a0b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68b9      	ldr	r1, [r7, #8]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f000 f9e6 	bl	800a33c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	699a      	ldr	r2, [r3, #24]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	699a      	ldr	r2, [r3, #24]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6999      	ldr	r1, [r3, #24]
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	021a      	lsls	r2, r3, #8
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	430a      	orrs	r2, r1
 8009fa2:	619a      	str	r2, [r3, #24]
      break;
 8009fa4:	e084      	b.n	800a0b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68b9      	ldr	r1, [r7, #8]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 fa4f 	bl	800a450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	69da      	ldr	r2, [r3, #28]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f042 0208 	orr.w	r2, r2, #8
 8009fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	69da      	ldr	r2, [r3, #28]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f022 0204 	bic.w	r2, r2, #4
 8009fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	69d9      	ldr	r1, [r3, #28]
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	691a      	ldr	r2, [r3, #16]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	430a      	orrs	r2, r1
 8009fe2:	61da      	str	r2, [r3, #28]
      break;
 8009fe4:	e064      	b.n	800a0b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	68b9      	ldr	r1, [r7, #8]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 fab7 	bl	800a560 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	69da      	ldr	r2, [r3, #28]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	69da      	ldr	r2, [r3, #28]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	69d9      	ldr	r1, [r3, #28]
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	021a      	lsls	r2, r3, #8
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	430a      	orrs	r2, r1
 800a024:	61da      	str	r2, [r3, #28]
      break;
 800a026:	e043      	b.n	800a0b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68b9      	ldr	r1, [r7, #8]
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 fb00 	bl	800a634 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f042 0208 	orr.w	r2, r2, #8
 800a042:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f022 0204 	bic.w	r2, r2, #4
 800a052:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	691a      	ldr	r2, [r3, #16]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	430a      	orrs	r2, r1
 800a064:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a066:	e023      	b.n	800a0b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68b9      	ldr	r1, [r7, #8]
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 fb44 	bl	800a6fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a082:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a092:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	021a      	lsls	r2, r3, #8
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	430a      	orrs	r2, r1
 800a0a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a0a8:	e002      	b.n	800a0b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a0ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop

0800a0c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a47      	ldr	r2, [pc, #284]	@ (800a1f4 <TIM_Base_SetConfig+0x130>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d013      	beq.n	800a104 <TIM_Base_SetConfig+0x40>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0e2:	d00f      	beq.n	800a104 <TIM_Base_SetConfig+0x40>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a44      	ldr	r2, [pc, #272]	@ (800a1f8 <TIM_Base_SetConfig+0x134>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d00b      	beq.n	800a104 <TIM_Base_SetConfig+0x40>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a43      	ldr	r2, [pc, #268]	@ (800a1fc <TIM_Base_SetConfig+0x138>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d007      	beq.n	800a104 <TIM_Base_SetConfig+0x40>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a42      	ldr	r2, [pc, #264]	@ (800a200 <TIM_Base_SetConfig+0x13c>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d003      	beq.n	800a104 <TIM_Base_SetConfig+0x40>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a41      	ldr	r2, [pc, #260]	@ (800a204 <TIM_Base_SetConfig+0x140>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d108      	bne.n	800a116 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a10a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	4313      	orrs	r3, r2
 800a114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a36      	ldr	r2, [pc, #216]	@ (800a1f4 <TIM_Base_SetConfig+0x130>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d027      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a124:	d023      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a33      	ldr	r2, [pc, #204]	@ (800a1f8 <TIM_Base_SetConfig+0x134>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d01f      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a32      	ldr	r2, [pc, #200]	@ (800a1fc <TIM_Base_SetConfig+0x138>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d01b      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a31      	ldr	r2, [pc, #196]	@ (800a200 <TIM_Base_SetConfig+0x13c>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d017      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a30      	ldr	r2, [pc, #192]	@ (800a204 <TIM_Base_SetConfig+0x140>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d013      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a2f      	ldr	r2, [pc, #188]	@ (800a208 <TIM_Base_SetConfig+0x144>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d00f      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a2e      	ldr	r2, [pc, #184]	@ (800a20c <TIM_Base_SetConfig+0x148>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d00b      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a2d      	ldr	r2, [pc, #180]	@ (800a210 <TIM_Base_SetConfig+0x14c>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d007      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a2c      	ldr	r2, [pc, #176]	@ (800a214 <TIM_Base_SetConfig+0x150>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d003      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a2b      	ldr	r2, [pc, #172]	@ (800a218 <TIM_Base_SetConfig+0x154>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d108      	bne.n	800a180 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	689a      	ldr	r2, [r3, #8]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a14      	ldr	r2, [pc, #80]	@ (800a1f4 <TIM_Base_SetConfig+0x130>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d00f      	beq.n	800a1c6 <TIM_Base_SetConfig+0x102>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a16      	ldr	r2, [pc, #88]	@ (800a204 <TIM_Base_SetConfig+0x140>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d00b      	beq.n	800a1c6 <TIM_Base_SetConfig+0x102>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a15      	ldr	r2, [pc, #84]	@ (800a208 <TIM_Base_SetConfig+0x144>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d007      	beq.n	800a1c6 <TIM_Base_SetConfig+0x102>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a14      	ldr	r2, [pc, #80]	@ (800a20c <TIM_Base_SetConfig+0x148>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d003      	beq.n	800a1c6 <TIM_Base_SetConfig+0x102>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a13      	ldr	r2, [pc, #76]	@ (800a210 <TIM_Base_SetConfig+0x14c>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d103      	bne.n	800a1ce <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	691a      	ldr	r2, [r3, #16]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f043 0204 	orr.w	r2, r3, #4
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	68fa      	ldr	r2, [r7, #12]
 800a1e4:	601a      	str	r2, [r3, #0]
}
 800a1e6:	bf00      	nop
 800a1e8:	3714      	adds	r7, #20
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	40010000 	.word	0x40010000
 800a1f8:	40000400 	.word	0x40000400
 800a1fc:	40000800 	.word	0x40000800
 800a200:	40000c00 	.word	0x40000c00
 800a204:	40010400 	.word	0x40010400
 800a208:	40014000 	.word	0x40014000
 800a20c:	40014400 	.word	0x40014400
 800a210:	40014800 	.word	0x40014800
 800a214:	4000e000 	.word	0x4000e000
 800a218:	4000e400 	.word	0x4000e400

0800a21c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b087      	sub	sp, #28
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a1b      	ldr	r3, [r3, #32]
 800a22a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a1b      	ldr	r3, [r3, #32]
 800a230:	f023 0201 	bic.w	r2, r3, #1
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	699b      	ldr	r3, [r3, #24]
 800a242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	4b37      	ldr	r3, [pc, #220]	@ (800a324 <TIM_OC1_SetConfig+0x108>)
 800a248:	4013      	ands	r3, r2
 800a24a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f023 0303 	bic.w	r3, r3, #3
 800a252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	f023 0302 	bic.w	r3, r3, #2
 800a264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4a2d      	ldr	r2, [pc, #180]	@ (800a328 <TIM_OC1_SetConfig+0x10c>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d00f      	beq.n	800a298 <TIM_OC1_SetConfig+0x7c>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a2c      	ldr	r2, [pc, #176]	@ (800a32c <TIM_OC1_SetConfig+0x110>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d00b      	beq.n	800a298 <TIM_OC1_SetConfig+0x7c>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4a2b      	ldr	r2, [pc, #172]	@ (800a330 <TIM_OC1_SetConfig+0x114>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d007      	beq.n	800a298 <TIM_OC1_SetConfig+0x7c>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4a2a      	ldr	r2, [pc, #168]	@ (800a334 <TIM_OC1_SetConfig+0x118>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d003      	beq.n	800a298 <TIM_OC1_SetConfig+0x7c>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a29      	ldr	r2, [pc, #164]	@ (800a338 <TIM_OC1_SetConfig+0x11c>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d10c      	bne.n	800a2b2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	f023 0308 	bic.w	r3, r3, #8
 800a29e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	697a      	ldr	r2, [r7, #20]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f023 0304 	bic.w	r3, r3, #4
 800a2b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a1c      	ldr	r2, [pc, #112]	@ (800a328 <TIM_OC1_SetConfig+0x10c>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d00f      	beq.n	800a2da <TIM_OC1_SetConfig+0xbe>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4a1b      	ldr	r2, [pc, #108]	@ (800a32c <TIM_OC1_SetConfig+0x110>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d00b      	beq.n	800a2da <TIM_OC1_SetConfig+0xbe>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4a1a      	ldr	r2, [pc, #104]	@ (800a330 <TIM_OC1_SetConfig+0x114>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d007      	beq.n	800a2da <TIM_OC1_SetConfig+0xbe>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a19      	ldr	r2, [pc, #100]	@ (800a334 <TIM_OC1_SetConfig+0x118>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d003      	beq.n	800a2da <TIM_OC1_SetConfig+0xbe>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a18      	ldr	r2, [pc, #96]	@ (800a338 <TIM_OC1_SetConfig+0x11c>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d111      	bne.n	800a2fe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a2e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	695b      	ldr	r3, [r3, #20]
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	697a      	ldr	r2, [r7, #20]
 800a316:	621a      	str	r2, [r3, #32]
}
 800a318:	bf00      	nop
 800a31a:	371c      	adds	r7, #28
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr
 800a324:	fffeff8f 	.word	0xfffeff8f
 800a328:	40010000 	.word	0x40010000
 800a32c:	40010400 	.word	0x40010400
 800a330:	40014000 	.word	0x40014000
 800a334:	40014400 	.word	0x40014400
 800a338:	40014800 	.word	0x40014800

0800a33c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b087      	sub	sp, #28
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a1b      	ldr	r3, [r3, #32]
 800a34a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a1b      	ldr	r3, [r3, #32]
 800a350:	f023 0210 	bic.w	r2, r3, #16
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	699b      	ldr	r3, [r3, #24]
 800a362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	4b34      	ldr	r3, [pc, #208]	@ (800a438 <TIM_OC2_SetConfig+0xfc>)
 800a368:	4013      	ands	r3, r2
 800a36a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	021b      	lsls	r3, r3, #8
 800a37a:	68fa      	ldr	r2, [r7, #12]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	f023 0320 	bic.w	r3, r3, #32
 800a386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	011b      	lsls	r3, r3, #4
 800a38e:	697a      	ldr	r2, [r7, #20]
 800a390:	4313      	orrs	r3, r2
 800a392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a29      	ldr	r2, [pc, #164]	@ (800a43c <TIM_OC2_SetConfig+0x100>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d003      	beq.n	800a3a4 <TIM_OC2_SetConfig+0x68>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a28      	ldr	r2, [pc, #160]	@ (800a440 <TIM_OC2_SetConfig+0x104>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d10d      	bne.n	800a3c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	011b      	lsls	r3, r3, #4
 800a3b2:	697a      	ldr	r2, [r7, #20]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a1e      	ldr	r2, [pc, #120]	@ (800a43c <TIM_OC2_SetConfig+0x100>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d00f      	beq.n	800a3e8 <TIM_OC2_SetConfig+0xac>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a1d      	ldr	r2, [pc, #116]	@ (800a440 <TIM_OC2_SetConfig+0x104>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d00b      	beq.n	800a3e8 <TIM_OC2_SetConfig+0xac>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a1c      	ldr	r2, [pc, #112]	@ (800a444 <TIM_OC2_SetConfig+0x108>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d007      	beq.n	800a3e8 <TIM_OC2_SetConfig+0xac>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a1b      	ldr	r2, [pc, #108]	@ (800a448 <TIM_OC2_SetConfig+0x10c>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d003      	beq.n	800a3e8 <TIM_OC2_SetConfig+0xac>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a1a      	ldr	r2, [pc, #104]	@ (800a44c <TIM_OC2_SetConfig+0x110>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d113      	bne.n	800a410 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a3ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a3f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	695b      	ldr	r3, [r3, #20]
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	693a      	ldr	r2, [r7, #16]
 800a400:	4313      	orrs	r3, r2
 800a402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	685a      	ldr	r2, [r3, #4]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	697a      	ldr	r2, [r7, #20]
 800a428:	621a      	str	r2, [r3, #32]
}
 800a42a:	bf00      	nop
 800a42c:	371c      	adds	r7, #28
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	feff8fff 	.word	0xfeff8fff
 800a43c:	40010000 	.word	0x40010000
 800a440:	40010400 	.word	0x40010400
 800a444:	40014000 	.word	0x40014000
 800a448:	40014400 	.word	0x40014400
 800a44c:	40014800 	.word	0x40014800

0800a450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a450:	b480      	push	{r7}
 800a452:	b087      	sub	sp, #28
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a1b      	ldr	r3, [r3, #32]
 800a45e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a1b      	ldr	r3, [r3, #32]
 800a464:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	4b33      	ldr	r3, [pc, #204]	@ (800a548 <TIM_OC3_SetConfig+0xf8>)
 800a47c:	4013      	ands	r3, r2
 800a47e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f023 0303 	bic.w	r3, r3, #3
 800a486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	4313      	orrs	r3, r2
 800a490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	021b      	lsls	r3, r3, #8
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a28      	ldr	r2, [pc, #160]	@ (800a54c <TIM_OC3_SetConfig+0xfc>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d003      	beq.n	800a4b6 <TIM_OC3_SetConfig+0x66>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a27      	ldr	r2, [pc, #156]	@ (800a550 <TIM_OC3_SetConfig+0x100>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d10d      	bne.n	800a4d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a4bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	021b      	lsls	r3, r3, #8
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a4d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4a1d      	ldr	r2, [pc, #116]	@ (800a54c <TIM_OC3_SetConfig+0xfc>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d00f      	beq.n	800a4fa <TIM_OC3_SetConfig+0xaa>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a1c      	ldr	r2, [pc, #112]	@ (800a550 <TIM_OC3_SetConfig+0x100>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d00b      	beq.n	800a4fa <TIM_OC3_SetConfig+0xaa>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a1b      	ldr	r2, [pc, #108]	@ (800a554 <TIM_OC3_SetConfig+0x104>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d007      	beq.n	800a4fa <TIM_OC3_SetConfig+0xaa>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a1a      	ldr	r2, [pc, #104]	@ (800a558 <TIM_OC3_SetConfig+0x108>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d003      	beq.n	800a4fa <TIM_OC3_SetConfig+0xaa>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a19      	ldr	r2, [pc, #100]	@ (800a55c <TIM_OC3_SetConfig+0x10c>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d113      	bne.n	800a522 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	695b      	ldr	r3, [r3, #20]
 800a50e:	011b      	lsls	r3, r3, #4
 800a510:	693a      	ldr	r2, [r7, #16]
 800a512:	4313      	orrs	r3, r2
 800a514:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	011b      	lsls	r3, r3, #4
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	4313      	orrs	r3, r2
 800a520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	685a      	ldr	r2, [r3, #4]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	697a      	ldr	r2, [r7, #20]
 800a53a:	621a      	str	r2, [r3, #32]
}
 800a53c:	bf00      	nop
 800a53e:	371c      	adds	r7, #28
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr
 800a548:	fffeff8f 	.word	0xfffeff8f
 800a54c:	40010000 	.word	0x40010000
 800a550:	40010400 	.word	0x40010400
 800a554:	40014000 	.word	0x40014000
 800a558:	40014400 	.word	0x40014400
 800a55c:	40014800 	.word	0x40014800

0800a560 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a560:	b480      	push	{r7}
 800a562:	b087      	sub	sp, #28
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a1b      	ldr	r3, [r3, #32]
 800a56e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a1b      	ldr	r3, [r3, #32]
 800a574:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	4b24      	ldr	r3, [pc, #144]	@ (800a61c <TIM_OC4_SetConfig+0xbc>)
 800a58c:	4013      	ands	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	021b      	lsls	r3, r3, #8
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a5aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	031b      	lsls	r3, r3, #12
 800a5b2:	693a      	ldr	r2, [r7, #16]
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4a19      	ldr	r2, [pc, #100]	@ (800a620 <TIM_OC4_SetConfig+0xc0>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d00f      	beq.n	800a5e0 <TIM_OC4_SetConfig+0x80>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a18      	ldr	r2, [pc, #96]	@ (800a624 <TIM_OC4_SetConfig+0xc4>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d00b      	beq.n	800a5e0 <TIM_OC4_SetConfig+0x80>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4a17      	ldr	r2, [pc, #92]	@ (800a628 <TIM_OC4_SetConfig+0xc8>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d007      	beq.n	800a5e0 <TIM_OC4_SetConfig+0x80>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	4a16      	ldr	r2, [pc, #88]	@ (800a62c <TIM_OC4_SetConfig+0xcc>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d003      	beq.n	800a5e0 <TIM_OC4_SetConfig+0x80>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4a15      	ldr	r2, [pc, #84]	@ (800a630 <TIM_OC4_SetConfig+0xd0>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d109      	bne.n	800a5f4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a5e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	695b      	ldr	r3, [r3, #20]
 800a5ec:	019b      	lsls	r3, r3, #6
 800a5ee:	697a      	ldr	r2, [r7, #20]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	685a      	ldr	r2, [r3, #4]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	621a      	str	r2, [r3, #32]
}
 800a60e:	bf00      	nop
 800a610:	371c      	adds	r7, #28
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	feff8fff 	.word	0xfeff8fff
 800a620:	40010000 	.word	0x40010000
 800a624:	40010400 	.word	0x40010400
 800a628:	40014000 	.word	0x40014000
 800a62c:	40014400 	.word	0x40014400
 800a630:	40014800 	.word	0x40014800

0800a634 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a634:	b480      	push	{r7}
 800a636:	b087      	sub	sp, #28
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a1b      	ldr	r3, [r3, #32]
 800a642:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a1b      	ldr	r3, [r3, #32]
 800a648:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	4b21      	ldr	r3, [pc, #132]	@ (800a6e4 <TIM_OC5_SetConfig+0xb0>)
 800a660:	4013      	ands	r3, r2
 800a662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a674:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	041b      	lsls	r3, r3, #16
 800a67c:	693a      	ldr	r2, [r7, #16]
 800a67e:	4313      	orrs	r3, r2
 800a680:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a18      	ldr	r2, [pc, #96]	@ (800a6e8 <TIM_OC5_SetConfig+0xb4>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d00f      	beq.n	800a6aa <TIM_OC5_SetConfig+0x76>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a17      	ldr	r2, [pc, #92]	@ (800a6ec <TIM_OC5_SetConfig+0xb8>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d00b      	beq.n	800a6aa <TIM_OC5_SetConfig+0x76>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a16      	ldr	r2, [pc, #88]	@ (800a6f0 <TIM_OC5_SetConfig+0xbc>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d007      	beq.n	800a6aa <TIM_OC5_SetConfig+0x76>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a15      	ldr	r2, [pc, #84]	@ (800a6f4 <TIM_OC5_SetConfig+0xc0>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d003      	beq.n	800a6aa <TIM_OC5_SetConfig+0x76>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a14      	ldr	r2, [pc, #80]	@ (800a6f8 <TIM_OC5_SetConfig+0xc4>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d109      	bne.n	800a6be <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	695b      	ldr	r3, [r3, #20]
 800a6b6:	021b      	lsls	r3, r3, #8
 800a6b8:	697a      	ldr	r2, [r7, #20]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	685a      	ldr	r2, [r3, #4]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	693a      	ldr	r2, [r7, #16]
 800a6d6:	621a      	str	r2, [r3, #32]
}
 800a6d8:	bf00      	nop
 800a6da:	371c      	adds	r7, #28
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr
 800a6e4:	fffeff8f 	.word	0xfffeff8f
 800a6e8:	40010000 	.word	0x40010000
 800a6ec:	40010400 	.word	0x40010400
 800a6f0:	40014000 	.word	0x40014000
 800a6f4:	40014400 	.word	0x40014400
 800a6f8:	40014800 	.word	0x40014800

0800a6fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b087      	sub	sp, #28
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a1b      	ldr	r3, [r3, #32]
 800a70a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a1b      	ldr	r3, [r3, #32]
 800a710:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a724:	68fa      	ldr	r2, [r7, #12]
 800a726:	4b22      	ldr	r3, [pc, #136]	@ (800a7b0 <TIM_OC6_SetConfig+0xb4>)
 800a728:	4013      	ands	r3, r2
 800a72a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	021b      	lsls	r3, r3, #8
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	4313      	orrs	r3, r2
 800a736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a73e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	051b      	lsls	r3, r3, #20
 800a746:	693a      	ldr	r2, [r7, #16]
 800a748:	4313      	orrs	r3, r2
 800a74a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a19      	ldr	r2, [pc, #100]	@ (800a7b4 <TIM_OC6_SetConfig+0xb8>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d00f      	beq.n	800a774 <TIM_OC6_SetConfig+0x78>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a18      	ldr	r2, [pc, #96]	@ (800a7b8 <TIM_OC6_SetConfig+0xbc>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d00b      	beq.n	800a774 <TIM_OC6_SetConfig+0x78>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a17      	ldr	r2, [pc, #92]	@ (800a7bc <TIM_OC6_SetConfig+0xc0>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d007      	beq.n	800a774 <TIM_OC6_SetConfig+0x78>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a16      	ldr	r2, [pc, #88]	@ (800a7c0 <TIM_OC6_SetConfig+0xc4>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d003      	beq.n	800a774 <TIM_OC6_SetConfig+0x78>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a15      	ldr	r2, [pc, #84]	@ (800a7c4 <TIM_OC6_SetConfig+0xc8>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d109      	bne.n	800a788 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a77a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	695b      	ldr	r3, [r3, #20]
 800a780:	029b      	lsls	r3, r3, #10
 800a782:	697a      	ldr	r2, [r7, #20]
 800a784:	4313      	orrs	r3, r2
 800a786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	685a      	ldr	r2, [r3, #4]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	621a      	str	r2, [r3, #32]
}
 800a7a2:	bf00      	nop
 800a7a4:	371c      	adds	r7, #28
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	feff8fff 	.word	0xfeff8fff
 800a7b4:	40010000 	.word	0x40010000
 800a7b8:	40010400 	.word	0x40010400
 800a7bc:	40014000 	.word	0x40014000
 800a7c0:	40014400 	.word	0x40014400
 800a7c4:	40014800 	.word	0x40014800

0800a7c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b087      	sub	sp, #28
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	f003 031f 	and.w	r3, r3, #31
 800a7da:	2201      	movs	r2, #1
 800a7dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6a1a      	ldr	r2, [r3, #32]
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	43db      	mvns	r3, r3
 800a7ea:	401a      	ands	r2, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6a1a      	ldr	r2, [r3, #32]
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	f003 031f 	and.w	r3, r3, #31
 800a7fa:	6879      	ldr	r1, [r7, #4]
 800a7fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a800:	431a      	orrs	r2, r3
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	621a      	str	r2, [r3, #32]
}
 800a806:	bf00      	nop
 800a808:	371c      	adds	r7, #28
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
	...

0800a814 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a81e:	2300      	movs	r3, #0
 800a820:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d101      	bne.n	800a830 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a82c:	2302      	movs	r3, #2
 800a82e:	e073      	b.n	800a918 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	4313      	orrs	r3, r2
 800a844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	4313      	orrs	r3, r2
 800a852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	4313      	orrs	r3, r2
 800a860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	695b      	ldr	r3, [r3, #20]
 800a888:	4313      	orrs	r3, r2
 800a88a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a896:	4313      	orrs	r3, r2
 800a898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	041b      	lsls	r3, r3, #16
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	69db      	ldr	r3, [r3, #28]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a19      	ldr	r2, [pc, #100]	@ (800a924 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d004      	beq.n	800a8cc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a18      	ldr	r2, [pc, #96]	@ (800a928 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d11c      	bne.n	800a906 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d6:	051b      	lsls	r3, r3, #20
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a902:	4313      	orrs	r3, r2
 800a904:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr
 800a924:	40010000 	.word	0x40010000
 800a928:	40010400 	.word	0x40010400

0800a92c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	e042      	b.n	800a9c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a944:	2b00      	cmp	r3, #0
 800a946:	d106      	bne.n	800a956 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f7f7 fee7 	bl	8002724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2224      	movs	r2, #36	@ 0x24
 800a95a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f022 0201 	bic.w	r2, r2, #1
 800a96c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a972:	2b00      	cmp	r3, #0
 800a974:	d002      	beq.n	800a97c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 ff22 	bl	800b7c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 f8b3 	bl	800aae8 <UART_SetConfig>
 800a982:	4603      	mov	r3, r0
 800a984:	2b01      	cmp	r3, #1
 800a986:	d101      	bne.n	800a98c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	e01b      	b.n	800a9c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	685a      	ldr	r2, [r3, #4]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a99a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	689a      	ldr	r2, [r3, #8]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a9aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f042 0201 	orr.w	r2, r2, #1
 800a9ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 ffa1 	bl	800b904 <UART_CheckIdleState>
 800a9c2:	4603      	mov	r3, r0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b08a      	sub	sp, #40	@ 0x28
 800a9d0:	af02      	add	r7, sp, #8
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	603b      	str	r3, [r7, #0]
 800a9d8:	4613      	mov	r3, r2
 800a9da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9e2:	2b20      	cmp	r3, #32
 800a9e4:	d17b      	bne.n	800aade <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d002      	beq.n	800a9f2 <HAL_UART_Transmit+0x26>
 800a9ec:	88fb      	ldrh	r3, [r7, #6]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d101      	bne.n	800a9f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e074      	b.n	800aae0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2221      	movs	r2, #33	@ 0x21
 800aa02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aa06:	f7f8 f88d 	bl	8002b24 <HAL_GetTick>
 800aa0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	88fa      	ldrh	r2, [r7, #6]
 800aa10:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	88fa      	ldrh	r2, [r7, #6]
 800aa18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa24:	d108      	bne.n	800aa38 <HAL_UART_Transmit+0x6c>
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d104      	bne.n	800aa38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	61bb      	str	r3, [r7, #24]
 800aa36:	e003      	b.n	800aa40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aa40:	e030      	b.n	800aaa4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	9300      	str	r3, [sp, #0]
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	2180      	movs	r1, #128	@ 0x80
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f001 f803 	bl	800ba58 <UART_WaitOnFlagUntilTimeout>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d005      	beq.n	800aa64 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2220      	movs	r2, #32
 800aa5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800aa60:	2303      	movs	r3, #3
 800aa62:	e03d      	b.n	800aae0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d10b      	bne.n	800aa82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	461a      	mov	r2, r3
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	3302      	adds	r3, #2
 800aa7e:	61bb      	str	r3, [r7, #24]
 800aa80:	e007      	b.n	800aa92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	781a      	ldrb	r2, [r3, #0]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	b29a      	uxth	r2, r3
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d1c8      	bne.n	800aa42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	9300      	str	r3, [sp, #0]
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	2200      	movs	r2, #0
 800aab8:	2140      	movs	r1, #64	@ 0x40
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f000 ffcc 	bl	800ba58 <UART_WaitOnFlagUntilTimeout>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d005      	beq.n	800aad2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2220      	movs	r2, #32
 800aaca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800aace:	2303      	movs	r3, #3
 800aad0:	e006      	b.n	800aae0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2220      	movs	r2, #32
 800aad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800aada:	2300      	movs	r3, #0
 800aadc:	e000      	b.n	800aae0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800aade:	2302      	movs	r3, #2
  }
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3720      	adds	r7, #32
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aaec:	b092      	sub	sp, #72	@ 0x48
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	689a      	ldr	r2, [r3, #8]
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	431a      	orrs	r2, r3
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	695b      	ldr	r3, [r3, #20]
 800ab06:	431a      	orrs	r2, r3
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	69db      	ldr	r3, [r3, #28]
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	4bbe      	ldr	r3, [pc, #760]	@ (800ae10 <UART_SetConfig+0x328>)
 800ab18:	4013      	ands	r3, r2
 800ab1a:	697a      	ldr	r2, [r7, #20]
 800ab1c:	6812      	ldr	r2, [r2, #0]
 800ab1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ab20:	430b      	orrs	r3, r1
 800ab22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	68da      	ldr	r2, [r3, #12]
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	430a      	orrs	r2, r1
 800ab38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	699b      	ldr	r3, [r3, #24]
 800ab3e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4ab3      	ldr	r2, [pc, #716]	@ (800ae14 <UART_SetConfig+0x32c>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d004      	beq.n	800ab54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	6a1b      	ldr	r3, [r3, #32]
 800ab4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab50:	4313      	orrs	r3, r2
 800ab52:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	689a      	ldr	r2, [r3, #8]
 800ab5a:	4baf      	ldr	r3, [pc, #700]	@ (800ae18 <UART_SetConfig+0x330>)
 800ab5c:	4013      	ands	r3, r2
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	6812      	ldr	r2, [r2, #0]
 800ab62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ab64:	430b      	orrs	r3, r1
 800ab66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab6e:	f023 010f 	bic.w	r1, r3, #15
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	430a      	orrs	r2, r1
 800ab7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4aa6      	ldr	r2, [pc, #664]	@ (800ae1c <UART_SetConfig+0x334>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d177      	bne.n	800ac78 <UART_SetConfig+0x190>
 800ab88:	4ba5      	ldr	r3, [pc, #660]	@ (800ae20 <UART_SetConfig+0x338>)
 800ab8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab90:	2b28      	cmp	r3, #40	@ 0x28
 800ab92:	d86d      	bhi.n	800ac70 <UART_SetConfig+0x188>
 800ab94:	a201      	add	r2, pc, #4	@ (adr r2, 800ab9c <UART_SetConfig+0xb4>)
 800ab96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab9a:	bf00      	nop
 800ab9c:	0800ac41 	.word	0x0800ac41
 800aba0:	0800ac71 	.word	0x0800ac71
 800aba4:	0800ac71 	.word	0x0800ac71
 800aba8:	0800ac71 	.word	0x0800ac71
 800abac:	0800ac71 	.word	0x0800ac71
 800abb0:	0800ac71 	.word	0x0800ac71
 800abb4:	0800ac71 	.word	0x0800ac71
 800abb8:	0800ac71 	.word	0x0800ac71
 800abbc:	0800ac49 	.word	0x0800ac49
 800abc0:	0800ac71 	.word	0x0800ac71
 800abc4:	0800ac71 	.word	0x0800ac71
 800abc8:	0800ac71 	.word	0x0800ac71
 800abcc:	0800ac71 	.word	0x0800ac71
 800abd0:	0800ac71 	.word	0x0800ac71
 800abd4:	0800ac71 	.word	0x0800ac71
 800abd8:	0800ac71 	.word	0x0800ac71
 800abdc:	0800ac51 	.word	0x0800ac51
 800abe0:	0800ac71 	.word	0x0800ac71
 800abe4:	0800ac71 	.word	0x0800ac71
 800abe8:	0800ac71 	.word	0x0800ac71
 800abec:	0800ac71 	.word	0x0800ac71
 800abf0:	0800ac71 	.word	0x0800ac71
 800abf4:	0800ac71 	.word	0x0800ac71
 800abf8:	0800ac71 	.word	0x0800ac71
 800abfc:	0800ac59 	.word	0x0800ac59
 800ac00:	0800ac71 	.word	0x0800ac71
 800ac04:	0800ac71 	.word	0x0800ac71
 800ac08:	0800ac71 	.word	0x0800ac71
 800ac0c:	0800ac71 	.word	0x0800ac71
 800ac10:	0800ac71 	.word	0x0800ac71
 800ac14:	0800ac71 	.word	0x0800ac71
 800ac18:	0800ac71 	.word	0x0800ac71
 800ac1c:	0800ac61 	.word	0x0800ac61
 800ac20:	0800ac71 	.word	0x0800ac71
 800ac24:	0800ac71 	.word	0x0800ac71
 800ac28:	0800ac71 	.word	0x0800ac71
 800ac2c:	0800ac71 	.word	0x0800ac71
 800ac30:	0800ac71 	.word	0x0800ac71
 800ac34:	0800ac71 	.word	0x0800ac71
 800ac38:	0800ac71 	.word	0x0800ac71
 800ac3c:	0800ac69 	.word	0x0800ac69
 800ac40:	2301      	movs	r3, #1
 800ac42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac46:	e326      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ac48:	2304      	movs	r3, #4
 800ac4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac4e:	e322      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ac50:	2308      	movs	r3, #8
 800ac52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac56:	e31e      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ac58:	2310      	movs	r3, #16
 800ac5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac5e:	e31a      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ac60:	2320      	movs	r3, #32
 800ac62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac66:	e316      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ac68:	2340      	movs	r3, #64	@ 0x40
 800ac6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac6e:	e312      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ac70:	2380      	movs	r3, #128	@ 0x80
 800ac72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac76:	e30e      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a69      	ldr	r2, [pc, #420]	@ (800ae24 <UART_SetConfig+0x33c>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d130      	bne.n	800ace4 <UART_SetConfig+0x1fc>
 800ac82:	4b67      	ldr	r3, [pc, #412]	@ (800ae20 <UART_SetConfig+0x338>)
 800ac84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac86:	f003 0307 	and.w	r3, r3, #7
 800ac8a:	2b05      	cmp	r3, #5
 800ac8c:	d826      	bhi.n	800acdc <UART_SetConfig+0x1f4>
 800ac8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac94 <UART_SetConfig+0x1ac>)
 800ac90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac94:	0800acad 	.word	0x0800acad
 800ac98:	0800acb5 	.word	0x0800acb5
 800ac9c:	0800acbd 	.word	0x0800acbd
 800aca0:	0800acc5 	.word	0x0800acc5
 800aca4:	0800accd 	.word	0x0800accd
 800aca8:	0800acd5 	.word	0x0800acd5
 800acac:	2300      	movs	r3, #0
 800acae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb2:	e2f0      	b.n	800b296 <UART_SetConfig+0x7ae>
 800acb4:	2304      	movs	r3, #4
 800acb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acba:	e2ec      	b.n	800b296 <UART_SetConfig+0x7ae>
 800acbc:	2308      	movs	r3, #8
 800acbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acc2:	e2e8      	b.n	800b296 <UART_SetConfig+0x7ae>
 800acc4:	2310      	movs	r3, #16
 800acc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acca:	e2e4      	b.n	800b296 <UART_SetConfig+0x7ae>
 800accc:	2320      	movs	r3, #32
 800acce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acd2:	e2e0      	b.n	800b296 <UART_SetConfig+0x7ae>
 800acd4:	2340      	movs	r3, #64	@ 0x40
 800acd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acda:	e2dc      	b.n	800b296 <UART_SetConfig+0x7ae>
 800acdc:	2380      	movs	r3, #128	@ 0x80
 800acde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ace2:	e2d8      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a4f      	ldr	r2, [pc, #316]	@ (800ae28 <UART_SetConfig+0x340>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d130      	bne.n	800ad50 <UART_SetConfig+0x268>
 800acee:	4b4c      	ldr	r3, [pc, #304]	@ (800ae20 <UART_SetConfig+0x338>)
 800acf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acf2:	f003 0307 	and.w	r3, r3, #7
 800acf6:	2b05      	cmp	r3, #5
 800acf8:	d826      	bhi.n	800ad48 <UART_SetConfig+0x260>
 800acfa:	a201      	add	r2, pc, #4	@ (adr r2, 800ad00 <UART_SetConfig+0x218>)
 800acfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad00:	0800ad19 	.word	0x0800ad19
 800ad04:	0800ad21 	.word	0x0800ad21
 800ad08:	0800ad29 	.word	0x0800ad29
 800ad0c:	0800ad31 	.word	0x0800ad31
 800ad10:	0800ad39 	.word	0x0800ad39
 800ad14:	0800ad41 	.word	0x0800ad41
 800ad18:	2300      	movs	r3, #0
 800ad1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1e:	e2ba      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ad20:	2304      	movs	r3, #4
 800ad22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad26:	e2b6      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ad28:	2308      	movs	r3, #8
 800ad2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2e:	e2b2      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ad30:	2310      	movs	r3, #16
 800ad32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad36:	e2ae      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ad38:	2320      	movs	r3, #32
 800ad3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3e:	e2aa      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ad40:	2340      	movs	r3, #64	@ 0x40
 800ad42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad46:	e2a6      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ad48:	2380      	movs	r3, #128	@ 0x80
 800ad4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad4e:	e2a2      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a35      	ldr	r2, [pc, #212]	@ (800ae2c <UART_SetConfig+0x344>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d130      	bne.n	800adbc <UART_SetConfig+0x2d4>
 800ad5a:	4b31      	ldr	r3, [pc, #196]	@ (800ae20 <UART_SetConfig+0x338>)
 800ad5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad5e:	f003 0307 	and.w	r3, r3, #7
 800ad62:	2b05      	cmp	r3, #5
 800ad64:	d826      	bhi.n	800adb4 <UART_SetConfig+0x2cc>
 800ad66:	a201      	add	r2, pc, #4	@ (adr r2, 800ad6c <UART_SetConfig+0x284>)
 800ad68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad6c:	0800ad85 	.word	0x0800ad85
 800ad70:	0800ad8d 	.word	0x0800ad8d
 800ad74:	0800ad95 	.word	0x0800ad95
 800ad78:	0800ad9d 	.word	0x0800ad9d
 800ad7c:	0800ada5 	.word	0x0800ada5
 800ad80:	0800adad 	.word	0x0800adad
 800ad84:	2300      	movs	r3, #0
 800ad86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8a:	e284      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ad8c:	2304      	movs	r3, #4
 800ad8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad92:	e280      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ad94:	2308      	movs	r3, #8
 800ad96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad9a:	e27c      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ad9c:	2310      	movs	r3, #16
 800ad9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ada2:	e278      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ada4:	2320      	movs	r3, #32
 800ada6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adaa:	e274      	b.n	800b296 <UART_SetConfig+0x7ae>
 800adac:	2340      	movs	r3, #64	@ 0x40
 800adae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adb2:	e270      	b.n	800b296 <UART_SetConfig+0x7ae>
 800adb4:	2380      	movs	r3, #128	@ 0x80
 800adb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adba:	e26c      	b.n	800b296 <UART_SetConfig+0x7ae>
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a1b      	ldr	r2, [pc, #108]	@ (800ae30 <UART_SetConfig+0x348>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d142      	bne.n	800ae4c <UART_SetConfig+0x364>
 800adc6:	4b16      	ldr	r3, [pc, #88]	@ (800ae20 <UART_SetConfig+0x338>)
 800adc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adca:	f003 0307 	and.w	r3, r3, #7
 800adce:	2b05      	cmp	r3, #5
 800add0:	d838      	bhi.n	800ae44 <UART_SetConfig+0x35c>
 800add2:	a201      	add	r2, pc, #4	@ (adr r2, 800add8 <UART_SetConfig+0x2f0>)
 800add4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add8:	0800adf1 	.word	0x0800adf1
 800addc:	0800adf9 	.word	0x0800adf9
 800ade0:	0800ae01 	.word	0x0800ae01
 800ade4:	0800ae09 	.word	0x0800ae09
 800ade8:	0800ae35 	.word	0x0800ae35
 800adec:	0800ae3d 	.word	0x0800ae3d
 800adf0:	2300      	movs	r3, #0
 800adf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf6:	e24e      	b.n	800b296 <UART_SetConfig+0x7ae>
 800adf8:	2304      	movs	r3, #4
 800adfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfe:	e24a      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ae00:	2308      	movs	r3, #8
 800ae02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae06:	e246      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ae08:	2310      	movs	r3, #16
 800ae0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae0e:	e242      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ae10:	cfff69f3 	.word	0xcfff69f3
 800ae14:	58000c00 	.word	0x58000c00
 800ae18:	11fff4ff 	.word	0x11fff4ff
 800ae1c:	40011000 	.word	0x40011000
 800ae20:	58024400 	.word	0x58024400
 800ae24:	40004400 	.word	0x40004400
 800ae28:	40004800 	.word	0x40004800
 800ae2c:	40004c00 	.word	0x40004c00
 800ae30:	40005000 	.word	0x40005000
 800ae34:	2320      	movs	r3, #32
 800ae36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae3a:	e22c      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ae3c:	2340      	movs	r3, #64	@ 0x40
 800ae3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae42:	e228      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ae44:	2380      	movs	r3, #128	@ 0x80
 800ae46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae4a:	e224      	b.n	800b296 <UART_SetConfig+0x7ae>
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4ab1      	ldr	r2, [pc, #708]	@ (800b118 <UART_SetConfig+0x630>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d176      	bne.n	800af44 <UART_SetConfig+0x45c>
 800ae56:	4bb1      	ldr	r3, [pc, #708]	@ (800b11c <UART_SetConfig+0x634>)
 800ae58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae5e:	2b28      	cmp	r3, #40	@ 0x28
 800ae60:	d86c      	bhi.n	800af3c <UART_SetConfig+0x454>
 800ae62:	a201      	add	r2, pc, #4	@ (adr r2, 800ae68 <UART_SetConfig+0x380>)
 800ae64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae68:	0800af0d 	.word	0x0800af0d
 800ae6c:	0800af3d 	.word	0x0800af3d
 800ae70:	0800af3d 	.word	0x0800af3d
 800ae74:	0800af3d 	.word	0x0800af3d
 800ae78:	0800af3d 	.word	0x0800af3d
 800ae7c:	0800af3d 	.word	0x0800af3d
 800ae80:	0800af3d 	.word	0x0800af3d
 800ae84:	0800af3d 	.word	0x0800af3d
 800ae88:	0800af15 	.word	0x0800af15
 800ae8c:	0800af3d 	.word	0x0800af3d
 800ae90:	0800af3d 	.word	0x0800af3d
 800ae94:	0800af3d 	.word	0x0800af3d
 800ae98:	0800af3d 	.word	0x0800af3d
 800ae9c:	0800af3d 	.word	0x0800af3d
 800aea0:	0800af3d 	.word	0x0800af3d
 800aea4:	0800af3d 	.word	0x0800af3d
 800aea8:	0800af1d 	.word	0x0800af1d
 800aeac:	0800af3d 	.word	0x0800af3d
 800aeb0:	0800af3d 	.word	0x0800af3d
 800aeb4:	0800af3d 	.word	0x0800af3d
 800aeb8:	0800af3d 	.word	0x0800af3d
 800aebc:	0800af3d 	.word	0x0800af3d
 800aec0:	0800af3d 	.word	0x0800af3d
 800aec4:	0800af3d 	.word	0x0800af3d
 800aec8:	0800af25 	.word	0x0800af25
 800aecc:	0800af3d 	.word	0x0800af3d
 800aed0:	0800af3d 	.word	0x0800af3d
 800aed4:	0800af3d 	.word	0x0800af3d
 800aed8:	0800af3d 	.word	0x0800af3d
 800aedc:	0800af3d 	.word	0x0800af3d
 800aee0:	0800af3d 	.word	0x0800af3d
 800aee4:	0800af3d 	.word	0x0800af3d
 800aee8:	0800af2d 	.word	0x0800af2d
 800aeec:	0800af3d 	.word	0x0800af3d
 800aef0:	0800af3d 	.word	0x0800af3d
 800aef4:	0800af3d 	.word	0x0800af3d
 800aef8:	0800af3d 	.word	0x0800af3d
 800aefc:	0800af3d 	.word	0x0800af3d
 800af00:	0800af3d 	.word	0x0800af3d
 800af04:	0800af3d 	.word	0x0800af3d
 800af08:	0800af35 	.word	0x0800af35
 800af0c:	2301      	movs	r3, #1
 800af0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af12:	e1c0      	b.n	800b296 <UART_SetConfig+0x7ae>
 800af14:	2304      	movs	r3, #4
 800af16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af1a:	e1bc      	b.n	800b296 <UART_SetConfig+0x7ae>
 800af1c:	2308      	movs	r3, #8
 800af1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af22:	e1b8      	b.n	800b296 <UART_SetConfig+0x7ae>
 800af24:	2310      	movs	r3, #16
 800af26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af2a:	e1b4      	b.n	800b296 <UART_SetConfig+0x7ae>
 800af2c:	2320      	movs	r3, #32
 800af2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af32:	e1b0      	b.n	800b296 <UART_SetConfig+0x7ae>
 800af34:	2340      	movs	r3, #64	@ 0x40
 800af36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af3a:	e1ac      	b.n	800b296 <UART_SetConfig+0x7ae>
 800af3c:	2380      	movs	r3, #128	@ 0x80
 800af3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af42:	e1a8      	b.n	800b296 <UART_SetConfig+0x7ae>
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a75      	ldr	r2, [pc, #468]	@ (800b120 <UART_SetConfig+0x638>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d130      	bne.n	800afb0 <UART_SetConfig+0x4c8>
 800af4e:	4b73      	ldr	r3, [pc, #460]	@ (800b11c <UART_SetConfig+0x634>)
 800af50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af52:	f003 0307 	and.w	r3, r3, #7
 800af56:	2b05      	cmp	r3, #5
 800af58:	d826      	bhi.n	800afa8 <UART_SetConfig+0x4c0>
 800af5a:	a201      	add	r2, pc, #4	@ (adr r2, 800af60 <UART_SetConfig+0x478>)
 800af5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af60:	0800af79 	.word	0x0800af79
 800af64:	0800af81 	.word	0x0800af81
 800af68:	0800af89 	.word	0x0800af89
 800af6c:	0800af91 	.word	0x0800af91
 800af70:	0800af99 	.word	0x0800af99
 800af74:	0800afa1 	.word	0x0800afa1
 800af78:	2300      	movs	r3, #0
 800af7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af7e:	e18a      	b.n	800b296 <UART_SetConfig+0x7ae>
 800af80:	2304      	movs	r3, #4
 800af82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af86:	e186      	b.n	800b296 <UART_SetConfig+0x7ae>
 800af88:	2308      	movs	r3, #8
 800af8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af8e:	e182      	b.n	800b296 <UART_SetConfig+0x7ae>
 800af90:	2310      	movs	r3, #16
 800af92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af96:	e17e      	b.n	800b296 <UART_SetConfig+0x7ae>
 800af98:	2320      	movs	r3, #32
 800af9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af9e:	e17a      	b.n	800b296 <UART_SetConfig+0x7ae>
 800afa0:	2340      	movs	r3, #64	@ 0x40
 800afa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afa6:	e176      	b.n	800b296 <UART_SetConfig+0x7ae>
 800afa8:	2380      	movs	r3, #128	@ 0x80
 800afaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afae:	e172      	b.n	800b296 <UART_SetConfig+0x7ae>
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a5b      	ldr	r2, [pc, #364]	@ (800b124 <UART_SetConfig+0x63c>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d130      	bne.n	800b01c <UART_SetConfig+0x534>
 800afba:	4b58      	ldr	r3, [pc, #352]	@ (800b11c <UART_SetConfig+0x634>)
 800afbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afbe:	f003 0307 	and.w	r3, r3, #7
 800afc2:	2b05      	cmp	r3, #5
 800afc4:	d826      	bhi.n	800b014 <UART_SetConfig+0x52c>
 800afc6:	a201      	add	r2, pc, #4	@ (adr r2, 800afcc <UART_SetConfig+0x4e4>)
 800afc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afcc:	0800afe5 	.word	0x0800afe5
 800afd0:	0800afed 	.word	0x0800afed
 800afd4:	0800aff5 	.word	0x0800aff5
 800afd8:	0800affd 	.word	0x0800affd
 800afdc:	0800b005 	.word	0x0800b005
 800afe0:	0800b00d 	.word	0x0800b00d
 800afe4:	2300      	movs	r3, #0
 800afe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afea:	e154      	b.n	800b296 <UART_SetConfig+0x7ae>
 800afec:	2304      	movs	r3, #4
 800afee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aff2:	e150      	b.n	800b296 <UART_SetConfig+0x7ae>
 800aff4:	2308      	movs	r3, #8
 800aff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800affa:	e14c      	b.n	800b296 <UART_SetConfig+0x7ae>
 800affc:	2310      	movs	r3, #16
 800affe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b002:	e148      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b004:	2320      	movs	r3, #32
 800b006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b00a:	e144      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b00c:	2340      	movs	r3, #64	@ 0x40
 800b00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b012:	e140      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b014:	2380      	movs	r3, #128	@ 0x80
 800b016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b01a:	e13c      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a41      	ldr	r2, [pc, #260]	@ (800b128 <UART_SetConfig+0x640>)
 800b022:	4293      	cmp	r3, r2
 800b024:	f040 8082 	bne.w	800b12c <UART_SetConfig+0x644>
 800b028:	4b3c      	ldr	r3, [pc, #240]	@ (800b11c <UART_SetConfig+0x634>)
 800b02a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b02c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b030:	2b28      	cmp	r3, #40	@ 0x28
 800b032:	d86d      	bhi.n	800b110 <UART_SetConfig+0x628>
 800b034:	a201      	add	r2, pc, #4	@ (adr r2, 800b03c <UART_SetConfig+0x554>)
 800b036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03a:	bf00      	nop
 800b03c:	0800b0e1 	.word	0x0800b0e1
 800b040:	0800b111 	.word	0x0800b111
 800b044:	0800b111 	.word	0x0800b111
 800b048:	0800b111 	.word	0x0800b111
 800b04c:	0800b111 	.word	0x0800b111
 800b050:	0800b111 	.word	0x0800b111
 800b054:	0800b111 	.word	0x0800b111
 800b058:	0800b111 	.word	0x0800b111
 800b05c:	0800b0e9 	.word	0x0800b0e9
 800b060:	0800b111 	.word	0x0800b111
 800b064:	0800b111 	.word	0x0800b111
 800b068:	0800b111 	.word	0x0800b111
 800b06c:	0800b111 	.word	0x0800b111
 800b070:	0800b111 	.word	0x0800b111
 800b074:	0800b111 	.word	0x0800b111
 800b078:	0800b111 	.word	0x0800b111
 800b07c:	0800b0f1 	.word	0x0800b0f1
 800b080:	0800b111 	.word	0x0800b111
 800b084:	0800b111 	.word	0x0800b111
 800b088:	0800b111 	.word	0x0800b111
 800b08c:	0800b111 	.word	0x0800b111
 800b090:	0800b111 	.word	0x0800b111
 800b094:	0800b111 	.word	0x0800b111
 800b098:	0800b111 	.word	0x0800b111
 800b09c:	0800b0f9 	.word	0x0800b0f9
 800b0a0:	0800b111 	.word	0x0800b111
 800b0a4:	0800b111 	.word	0x0800b111
 800b0a8:	0800b111 	.word	0x0800b111
 800b0ac:	0800b111 	.word	0x0800b111
 800b0b0:	0800b111 	.word	0x0800b111
 800b0b4:	0800b111 	.word	0x0800b111
 800b0b8:	0800b111 	.word	0x0800b111
 800b0bc:	0800b101 	.word	0x0800b101
 800b0c0:	0800b111 	.word	0x0800b111
 800b0c4:	0800b111 	.word	0x0800b111
 800b0c8:	0800b111 	.word	0x0800b111
 800b0cc:	0800b111 	.word	0x0800b111
 800b0d0:	0800b111 	.word	0x0800b111
 800b0d4:	0800b111 	.word	0x0800b111
 800b0d8:	0800b111 	.word	0x0800b111
 800b0dc:	0800b109 	.word	0x0800b109
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0e6:	e0d6      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b0e8:	2304      	movs	r3, #4
 800b0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ee:	e0d2      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b0f0:	2308      	movs	r3, #8
 800b0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0f6:	e0ce      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b0f8:	2310      	movs	r3, #16
 800b0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0fe:	e0ca      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b100:	2320      	movs	r3, #32
 800b102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b106:	e0c6      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b108:	2340      	movs	r3, #64	@ 0x40
 800b10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b10e:	e0c2      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b110:	2380      	movs	r3, #128	@ 0x80
 800b112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b116:	e0be      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b118:	40011400 	.word	0x40011400
 800b11c:	58024400 	.word	0x58024400
 800b120:	40007800 	.word	0x40007800
 800b124:	40007c00 	.word	0x40007c00
 800b128:	40011800 	.word	0x40011800
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4aad      	ldr	r2, [pc, #692]	@ (800b3e8 <UART_SetConfig+0x900>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d176      	bne.n	800b224 <UART_SetConfig+0x73c>
 800b136:	4bad      	ldr	r3, [pc, #692]	@ (800b3ec <UART_SetConfig+0x904>)
 800b138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b13a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b13e:	2b28      	cmp	r3, #40	@ 0x28
 800b140:	d86c      	bhi.n	800b21c <UART_SetConfig+0x734>
 800b142:	a201      	add	r2, pc, #4	@ (adr r2, 800b148 <UART_SetConfig+0x660>)
 800b144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b148:	0800b1ed 	.word	0x0800b1ed
 800b14c:	0800b21d 	.word	0x0800b21d
 800b150:	0800b21d 	.word	0x0800b21d
 800b154:	0800b21d 	.word	0x0800b21d
 800b158:	0800b21d 	.word	0x0800b21d
 800b15c:	0800b21d 	.word	0x0800b21d
 800b160:	0800b21d 	.word	0x0800b21d
 800b164:	0800b21d 	.word	0x0800b21d
 800b168:	0800b1f5 	.word	0x0800b1f5
 800b16c:	0800b21d 	.word	0x0800b21d
 800b170:	0800b21d 	.word	0x0800b21d
 800b174:	0800b21d 	.word	0x0800b21d
 800b178:	0800b21d 	.word	0x0800b21d
 800b17c:	0800b21d 	.word	0x0800b21d
 800b180:	0800b21d 	.word	0x0800b21d
 800b184:	0800b21d 	.word	0x0800b21d
 800b188:	0800b1fd 	.word	0x0800b1fd
 800b18c:	0800b21d 	.word	0x0800b21d
 800b190:	0800b21d 	.word	0x0800b21d
 800b194:	0800b21d 	.word	0x0800b21d
 800b198:	0800b21d 	.word	0x0800b21d
 800b19c:	0800b21d 	.word	0x0800b21d
 800b1a0:	0800b21d 	.word	0x0800b21d
 800b1a4:	0800b21d 	.word	0x0800b21d
 800b1a8:	0800b205 	.word	0x0800b205
 800b1ac:	0800b21d 	.word	0x0800b21d
 800b1b0:	0800b21d 	.word	0x0800b21d
 800b1b4:	0800b21d 	.word	0x0800b21d
 800b1b8:	0800b21d 	.word	0x0800b21d
 800b1bc:	0800b21d 	.word	0x0800b21d
 800b1c0:	0800b21d 	.word	0x0800b21d
 800b1c4:	0800b21d 	.word	0x0800b21d
 800b1c8:	0800b20d 	.word	0x0800b20d
 800b1cc:	0800b21d 	.word	0x0800b21d
 800b1d0:	0800b21d 	.word	0x0800b21d
 800b1d4:	0800b21d 	.word	0x0800b21d
 800b1d8:	0800b21d 	.word	0x0800b21d
 800b1dc:	0800b21d 	.word	0x0800b21d
 800b1e0:	0800b21d 	.word	0x0800b21d
 800b1e4:	0800b21d 	.word	0x0800b21d
 800b1e8:	0800b215 	.word	0x0800b215
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1f2:	e050      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b1f4:	2304      	movs	r3, #4
 800b1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1fa:	e04c      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b1fc:	2308      	movs	r3, #8
 800b1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b202:	e048      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b204:	2310      	movs	r3, #16
 800b206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b20a:	e044      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b20c:	2320      	movs	r3, #32
 800b20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b212:	e040      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b214:	2340      	movs	r3, #64	@ 0x40
 800b216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b21a:	e03c      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b21c:	2380      	movs	r3, #128	@ 0x80
 800b21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b222:	e038      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a71      	ldr	r2, [pc, #452]	@ (800b3f0 <UART_SetConfig+0x908>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d130      	bne.n	800b290 <UART_SetConfig+0x7a8>
 800b22e:	4b6f      	ldr	r3, [pc, #444]	@ (800b3ec <UART_SetConfig+0x904>)
 800b230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b232:	f003 0307 	and.w	r3, r3, #7
 800b236:	2b05      	cmp	r3, #5
 800b238:	d826      	bhi.n	800b288 <UART_SetConfig+0x7a0>
 800b23a:	a201      	add	r2, pc, #4	@ (adr r2, 800b240 <UART_SetConfig+0x758>)
 800b23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b240:	0800b259 	.word	0x0800b259
 800b244:	0800b261 	.word	0x0800b261
 800b248:	0800b269 	.word	0x0800b269
 800b24c:	0800b271 	.word	0x0800b271
 800b250:	0800b279 	.word	0x0800b279
 800b254:	0800b281 	.word	0x0800b281
 800b258:	2302      	movs	r3, #2
 800b25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b25e:	e01a      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b260:	2304      	movs	r3, #4
 800b262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b266:	e016      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b268:	2308      	movs	r3, #8
 800b26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b26e:	e012      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b270:	2310      	movs	r3, #16
 800b272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b276:	e00e      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b278:	2320      	movs	r3, #32
 800b27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b27e:	e00a      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b280:	2340      	movs	r3, #64	@ 0x40
 800b282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b286:	e006      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b288:	2380      	movs	r3, #128	@ 0x80
 800b28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b28e:	e002      	b.n	800b296 <UART_SetConfig+0x7ae>
 800b290:	2380      	movs	r3, #128	@ 0x80
 800b292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a55      	ldr	r2, [pc, #340]	@ (800b3f0 <UART_SetConfig+0x908>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	f040 80f8 	bne.w	800b492 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b2a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b2a6:	2b20      	cmp	r3, #32
 800b2a8:	dc46      	bgt.n	800b338 <UART_SetConfig+0x850>
 800b2aa:	2b02      	cmp	r3, #2
 800b2ac:	db75      	blt.n	800b39a <UART_SetConfig+0x8b2>
 800b2ae:	3b02      	subs	r3, #2
 800b2b0:	2b1e      	cmp	r3, #30
 800b2b2:	d872      	bhi.n	800b39a <UART_SetConfig+0x8b2>
 800b2b4:	a201      	add	r2, pc, #4	@ (adr r2, 800b2bc <UART_SetConfig+0x7d4>)
 800b2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ba:	bf00      	nop
 800b2bc:	0800b33f 	.word	0x0800b33f
 800b2c0:	0800b39b 	.word	0x0800b39b
 800b2c4:	0800b347 	.word	0x0800b347
 800b2c8:	0800b39b 	.word	0x0800b39b
 800b2cc:	0800b39b 	.word	0x0800b39b
 800b2d0:	0800b39b 	.word	0x0800b39b
 800b2d4:	0800b357 	.word	0x0800b357
 800b2d8:	0800b39b 	.word	0x0800b39b
 800b2dc:	0800b39b 	.word	0x0800b39b
 800b2e0:	0800b39b 	.word	0x0800b39b
 800b2e4:	0800b39b 	.word	0x0800b39b
 800b2e8:	0800b39b 	.word	0x0800b39b
 800b2ec:	0800b39b 	.word	0x0800b39b
 800b2f0:	0800b39b 	.word	0x0800b39b
 800b2f4:	0800b367 	.word	0x0800b367
 800b2f8:	0800b39b 	.word	0x0800b39b
 800b2fc:	0800b39b 	.word	0x0800b39b
 800b300:	0800b39b 	.word	0x0800b39b
 800b304:	0800b39b 	.word	0x0800b39b
 800b308:	0800b39b 	.word	0x0800b39b
 800b30c:	0800b39b 	.word	0x0800b39b
 800b310:	0800b39b 	.word	0x0800b39b
 800b314:	0800b39b 	.word	0x0800b39b
 800b318:	0800b39b 	.word	0x0800b39b
 800b31c:	0800b39b 	.word	0x0800b39b
 800b320:	0800b39b 	.word	0x0800b39b
 800b324:	0800b39b 	.word	0x0800b39b
 800b328:	0800b39b 	.word	0x0800b39b
 800b32c:	0800b39b 	.word	0x0800b39b
 800b330:	0800b39b 	.word	0x0800b39b
 800b334:	0800b38d 	.word	0x0800b38d
 800b338:	2b40      	cmp	r3, #64	@ 0x40
 800b33a:	d02a      	beq.n	800b392 <UART_SetConfig+0x8aa>
 800b33c:	e02d      	b.n	800b39a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b33e:	f7fd fe65 	bl	800900c <HAL_RCCEx_GetD3PCLK1Freq>
 800b342:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b344:	e02f      	b.n	800b3a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b346:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fd fe74 	bl	8009038 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b354:	e027      	b.n	800b3a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b356:	f107 0318 	add.w	r3, r7, #24
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fd ffc0 	bl	80092e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b364:	e01f      	b.n	800b3a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b366:	4b21      	ldr	r3, [pc, #132]	@ (800b3ec <UART_SetConfig+0x904>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f003 0320 	and.w	r3, r3, #32
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d009      	beq.n	800b386 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b372:	4b1e      	ldr	r3, [pc, #120]	@ (800b3ec <UART_SetConfig+0x904>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	08db      	lsrs	r3, r3, #3
 800b378:	f003 0303 	and.w	r3, r3, #3
 800b37c:	4a1d      	ldr	r2, [pc, #116]	@ (800b3f4 <UART_SetConfig+0x90c>)
 800b37e:	fa22 f303 	lsr.w	r3, r2, r3
 800b382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b384:	e00f      	b.n	800b3a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b386:	4b1b      	ldr	r3, [pc, #108]	@ (800b3f4 <UART_SetConfig+0x90c>)
 800b388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b38a:	e00c      	b.n	800b3a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b38c:	4b1a      	ldr	r3, [pc, #104]	@ (800b3f8 <UART_SetConfig+0x910>)
 800b38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b390:	e009      	b.n	800b3a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b398:	e005      	b.n	800b3a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b39a:	2300      	movs	r3, #0
 800b39c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b3a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b3a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	f000 81ee 	beq.w	800b78a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b2:	4a12      	ldr	r2, [pc, #72]	@ (800b3fc <UART_SetConfig+0x914>)
 800b3b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3c0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	685a      	ldr	r2, [r3, #4]
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	005b      	lsls	r3, r3, #1
 800b3ca:	4413      	add	r3, r2
 800b3cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d305      	bcc.n	800b3de <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d910      	bls.n	800b400 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b3e4:	e1d1      	b.n	800b78a <UART_SetConfig+0xca2>
 800b3e6:	bf00      	nop
 800b3e8:	40011c00 	.word	0x40011c00
 800b3ec:	58024400 	.word	0x58024400
 800b3f0:	58000c00 	.word	0x58000c00
 800b3f4:	03d09000 	.word	0x03d09000
 800b3f8:	003d0900 	.word	0x003d0900
 800b3fc:	0800c950 	.word	0x0800c950
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b402:	2200      	movs	r2, #0
 800b404:	60bb      	str	r3, [r7, #8]
 800b406:	60fa      	str	r2, [r7, #12]
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b40c:	4ac0      	ldr	r2, [pc, #768]	@ (800b710 <UART_SetConfig+0xc28>)
 800b40e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b412:	b29b      	uxth	r3, r3
 800b414:	2200      	movs	r2, #0
 800b416:	603b      	str	r3, [r7, #0]
 800b418:	607a      	str	r2, [r7, #4]
 800b41a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b41e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b422:	f7f4 ffcd 	bl	80003c0 <__aeabi_uldivmod>
 800b426:	4602      	mov	r2, r0
 800b428:	460b      	mov	r3, r1
 800b42a:	4610      	mov	r0, r2
 800b42c:	4619      	mov	r1, r3
 800b42e:	f04f 0200 	mov.w	r2, #0
 800b432:	f04f 0300 	mov.w	r3, #0
 800b436:	020b      	lsls	r3, r1, #8
 800b438:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b43c:	0202      	lsls	r2, r0, #8
 800b43e:	6979      	ldr	r1, [r7, #20]
 800b440:	6849      	ldr	r1, [r1, #4]
 800b442:	0849      	lsrs	r1, r1, #1
 800b444:	2000      	movs	r0, #0
 800b446:	460c      	mov	r4, r1
 800b448:	4605      	mov	r5, r0
 800b44a:	eb12 0804 	adds.w	r8, r2, r4
 800b44e:	eb43 0905 	adc.w	r9, r3, r5
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	469a      	mov	sl, r3
 800b45a:	4693      	mov	fp, r2
 800b45c:	4652      	mov	r2, sl
 800b45e:	465b      	mov	r3, fp
 800b460:	4640      	mov	r0, r8
 800b462:	4649      	mov	r1, r9
 800b464:	f7f4 ffac 	bl	80003c0 <__aeabi_uldivmod>
 800b468:	4602      	mov	r2, r0
 800b46a:	460b      	mov	r3, r1
 800b46c:	4613      	mov	r3, r2
 800b46e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b472:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b476:	d308      	bcc.n	800b48a <UART_SetConfig+0x9a2>
 800b478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b47a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b47e:	d204      	bcs.n	800b48a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b486:	60da      	str	r2, [r3, #12]
 800b488:	e17f      	b.n	800b78a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b490:	e17b      	b.n	800b78a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	69db      	ldr	r3, [r3, #28]
 800b496:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b49a:	f040 80bd 	bne.w	800b618 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b49e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b4a2:	2b20      	cmp	r3, #32
 800b4a4:	dc48      	bgt.n	800b538 <UART_SetConfig+0xa50>
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	db7b      	blt.n	800b5a2 <UART_SetConfig+0xaba>
 800b4aa:	2b20      	cmp	r3, #32
 800b4ac:	d879      	bhi.n	800b5a2 <UART_SetConfig+0xaba>
 800b4ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b4b4 <UART_SetConfig+0x9cc>)
 800b4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b4:	0800b53f 	.word	0x0800b53f
 800b4b8:	0800b547 	.word	0x0800b547
 800b4bc:	0800b5a3 	.word	0x0800b5a3
 800b4c0:	0800b5a3 	.word	0x0800b5a3
 800b4c4:	0800b54f 	.word	0x0800b54f
 800b4c8:	0800b5a3 	.word	0x0800b5a3
 800b4cc:	0800b5a3 	.word	0x0800b5a3
 800b4d0:	0800b5a3 	.word	0x0800b5a3
 800b4d4:	0800b55f 	.word	0x0800b55f
 800b4d8:	0800b5a3 	.word	0x0800b5a3
 800b4dc:	0800b5a3 	.word	0x0800b5a3
 800b4e0:	0800b5a3 	.word	0x0800b5a3
 800b4e4:	0800b5a3 	.word	0x0800b5a3
 800b4e8:	0800b5a3 	.word	0x0800b5a3
 800b4ec:	0800b5a3 	.word	0x0800b5a3
 800b4f0:	0800b5a3 	.word	0x0800b5a3
 800b4f4:	0800b56f 	.word	0x0800b56f
 800b4f8:	0800b5a3 	.word	0x0800b5a3
 800b4fc:	0800b5a3 	.word	0x0800b5a3
 800b500:	0800b5a3 	.word	0x0800b5a3
 800b504:	0800b5a3 	.word	0x0800b5a3
 800b508:	0800b5a3 	.word	0x0800b5a3
 800b50c:	0800b5a3 	.word	0x0800b5a3
 800b510:	0800b5a3 	.word	0x0800b5a3
 800b514:	0800b5a3 	.word	0x0800b5a3
 800b518:	0800b5a3 	.word	0x0800b5a3
 800b51c:	0800b5a3 	.word	0x0800b5a3
 800b520:	0800b5a3 	.word	0x0800b5a3
 800b524:	0800b5a3 	.word	0x0800b5a3
 800b528:	0800b5a3 	.word	0x0800b5a3
 800b52c:	0800b5a3 	.word	0x0800b5a3
 800b530:	0800b5a3 	.word	0x0800b5a3
 800b534:	0800b595 	.word	0x0800b595
 800b538:	2b40      	cmp	r3, #64	@ 0x40
 800b53a:	d02e      	beq.n	800b59a <UART_SetConfig+0xab2>
 800b53c:	e031      	b.n	800b5a2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b53e:	f7fb fec7 	bl	80072d0 <HAL_RCC_GetPCLK1Freq>
 800b542:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b544:	e033      	b.n	800b5ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b546:	f7fb fed9 	bl	80072fc <HAL_RCC_GetPCLK2Freq>
 800b54a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b54c:	e02f      	b.n	800b5ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b54e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b552:	4618      	mov	r0, r3
 800b554:	f7fd fd70 	bl	8009038 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b55c:	e027      	b.n	800b5ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b55e:	f107 0318 	add.w	r3, r7, #24
 800b562:	4618      	mov	r0, r3
 800b564:	f7fd febc 	bl	80092e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b568:	69fb      	ldr	r3, [r7, #28]
 800b56a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b56c:	e01f      	b.n	800b5ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b56e:	4b69      	ldr	r3, [pc, #420]	@ (800b714 <UART_SetConfig+0xc2c>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f003 0320 	and.w	r3, r3, #32
 800b576:	2b00      	cmp	r3, #0
 800b578:	d009      	beq.n	800b58e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b57a:	4b66      	ldr	r3, [pc, #408]	@ (800b714 <UART_SetConfig+0xc2c>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	08db      	lsrs	r3, r3, #3
 800b580:	f003 0303 	and.w	r3, r3, #3
 800b584:	4a64      	ldr	r2, [pc, #400]	@ (800b718 <UART_SetConfig+0xc30>)
 800b586:	fa22 f303 	lsr.w	r3, r2, r3
 800b58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b58c:	e00f      	b.n	800b5ae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b58e:	4b62      	ldr	r3, [pc, #392]	@ (800b718 <UART_SetConfig+0xc30>)
 800b590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b592:	e00c      	b.n	800b5ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b594:	4b61      	ldr	r3, [pc, #388]	@ (800b71c <UART_SetConfig+0xc34>)
 800b596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b598:	e009      	b.n	800b5ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b59a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b59e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5a0:	e005      	b.n	800b5ae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b5ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b5ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f000 80ea 	beq.w	800b78a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ba:	4a55      	ldr	r2, [pc, #340]	@ (800b710 <UART_SetConfig+0xc28>)
 800b5bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5c8:	005a      	lsls	r2, r3, #1
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	085b      	lsrs	r3, r3, #1
 800b5d0:	441a      	add	r2, r3
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5da:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5de:	2b0f      	cmp	r3, #15
 800b5e0:	d916      	bls.n	800b610 <UART_SetConfig+0xb28>
 800b5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5e8:	d212      	bcs.n	800b610 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	f023 030f 	bic.w	r3, r3, #15
 800b5f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f6:	085b      	lsrs	r3, r3, #1
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	f003 0307 	and.w	r3, r3, #7
 800b5fe:	b29a      	uxth	r2, r3
 800b600:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b602:	4313      	orrs	r3, r2
 800b604:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b60c:	60da      	str	r2, [r3, #12]
 800b60e:	e0bc      	b.n	800b78a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b610:	2301      	movs	r3, #1
 800b612:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b616:	e0b8      	b.n	800b78a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b618:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b61c:	2b20      	cmp	r3, #32
 800b61e:	dc4b      	bgt.n	800b6b8 <UART_SetConfig+0xbd0>
 800b620:	2b00      	cmp	r3, #0
 800b622:	f2c0 8087 	blt.w	800b734 <UART_SetConfig+0xc4c>
 800b626:	2b20      	cmp	r3, #32
 800b628:	f200 8084 	bhi.w	800b734 <UART_SetConfig+0xc4c>
 800b62c:	a201      	add	r2, pc, #4	@ (adr r2, 800b634 <UART_SetConfig+0xb4c>)
 800b62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b632:	bf00      	nop
 800b634:	0800b6bf 	.word	0x0800b6bf
 800b638:	0800b6c7 	.word	0x0800b6c7
 800b63c:	0800b735 	.word	0x0800b735
 800b640:	0800b735 	.word	0x0800b735
 800b644:	0800b6cf 	.word	0x0800b6cf
 800b648:	0800b735 	.word	0x0800b735
 800b64c:	0800b735 	.word	0x0800b735
 800b650:	0800b735 	.word	0x0800b735
 800b654:	0800b6df 	.word	0x0800b6df
 800b658:	0800b735 	.word	0x0800b735
 800b65c:	0800b735 	.word	0x0800b735
 800b660:	0800b735 	.word	0x0800b735
 800b664:	0800b735 	.word	0x0800b735
 800b668:	0800b735 	.word	0x0800b735
 800b66c:	0800b735 	.word	0x0800b735
 800b670:	0800b735 	.word	0x0800b735
 800b674:	0800b6ef 	.word	0x0800b6ef
 800b678:	0800b735 	.word	0x0800b735
 800b67c:	0800b735 	.word	0x0800b735
 800b680:	0800b735 	.word	0x0800b735
 800b684:	0800b735 	.word	0x0800b735
 800b688:	0800b735 	.word	0x0800b735
 800b68c:	0800b735 	.word	0x0800b735
 800b690:	0800b735 	.word	0x0800b735
 800b694:	0800b735 	.word	0x0800b735
 800b698:	0800b735 	.word	0x0800b735
 800b69c:	0800b735 	.word	0x0800b735
 800b6a0:	0800b735 	.word	0x0800b735
 800b6a4:	0800b735 	.word	0x0800b735
 800b6a8:	0800b735 	.word	0x0800b735
 800b6ac:	0800b735 	.word	0x0800b735
 800b6b0:	0800b735 	.word	0x0800b735
 800b6b4:	0800b727 	.word	0x0800b727
 800b6b8:	2b40      	cmp	r3, #64	@ 0x40
 800b6ba:	d037      	beq.n	800b72c <UART_SetConfig+0xc44>
 800b6bc:	e03a      	b.n	800b734 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6be:	f7fb fe07 	bl	80072d0 <HAL_RCC_GetPCLK1Freq>
 800b6c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b6c4:	e03c      	b.n	800b740 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6c6:	f7fb fe19 	bl	80072fc <HAL_RCC_GetPCLK2Freq>
 800b6ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b6cc:	e038      	b.n	800b740 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7fd fcb0 	bl	8009038 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6dc:	e030      	b.n	800b740 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6de:	f107 0318 	add.w	r3, r7, #24
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7fd fdfc 	bl	80092e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6ec:	e028      	b.n	800b740 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6ee:	4b09      	ldr	r3, [pc, #36]	@ (800b714 <UART_SetConfig+0xc2c>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f003 0320 	and.w	r3, r3, #32
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d012      	beq.n	800b720 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b6fa:	4b06      	ldr	r3, [pc, #24]	@ (800b714 <UART_SetConfig+0xc2c>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	08db      	lsrs	r3, r3, #3
 800b700:	f003 0303 	and.w	r3, r3, #3
 800b704:	4a04      	ldr	r2, [pc, #16]	@ (800b718 <UART_SetConfig+0xc30>)
 800b706:	fa22 f303 	lsr.w	r3, r2, r3
 800b70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b70c:	e018      	b.n	800b740 <UART_SetConfig+0xc58>
 800b70e:	bf00      	nop
 800b710:	0800c950 	.word	0x0800c950
 800b714:	58024400 	.word	0x58024400
 800b718:	03d09000 	.word	0x03d09000
 800b71c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b720:	4b24      	ldr	r3, [pc, #144]	@ (800b7b4 <UART_SetConfig+0xccc>)
 800b722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b724:	e00c      	b.n	800b740 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b726:	4b24      	ldr	r3, [pc, #144]	@ (800b7b8 <UART_SetConfig+0xcd0>)
 800b728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b72a:	e009      	b.n	800b740 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b72c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b732:	e005      	b.n	800b740 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b734:	2300      	movs	r3, #0
 800b736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b738:	2301      	movs	r3, #1
 800b73a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b73e:	bf00      	nop
    }

    if (pclk != 0U)
 800b740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b742:	2b00      	cmp	r3, #0
 800b744:	d021      	beq.n	800b78a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b74a:	4a1c      	ldr	r2, [pc, #112]	@ (800b7bc <UART_SetConfig+0xcd4>)
 800b74c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b750:	461a      	mov	r2, r3
 800b752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b754:	fbb3 f2f2 	udiv	r2, r3, r2
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	085b      	lsrs	r3, r3, #1
 800b75e:	441a      	add	r2, r3
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	fbb2 f3f3 	udiv	r3, r2, r3
 800b768:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b76c:	2b0f      	cmp	r3, #15
 800b76e:	d909      	bls.n	800b784 <UART_SetConfig+0xc9c>
 800b770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b776:	d205      	bcs.n	800b784 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b77a:	b29a      	uxth	r2, r3
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	60da      	str	r2, [r3, #12]
 800b782:	e002      	b.n	800b78a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	2201      	movs	r2, #1
 800b78e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	2201      	movs	r2, #1
 800b796:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	2200      	movs	r2, #0
 800b79e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b7a6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3748      	adds	r7, #72	@ 0x48
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b7b4:	03d09000 	.word	0x03d09000
 800b7b8:	003d0900 	.word	0x003d0900
 800b7bc:	0800c950 	.word	0x0800c950

0800b7c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7cc:	f003 0308 	and.w	r3, r3, #8
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00a      	beq.n	800b7ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	430a      	orrs	r2, r1
 800b7e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ee:	f003 0301 	and.w	r3, r3, #1
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00a      	beq.n	800b80c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	430a      	orrs	r2, r1
 800b80a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b810:	f003 0302 	and.w	r3, r3, #2
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00a      	beq.n	800b82e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	430a      	orrs	r2, r1
 800b82c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b832:	f003 0304 	and.w	r3, r3, #4
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00a      	beq.n	800b850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	430a      	orrs	r2, r1
 800b84e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b854:	f003 0310 	and.w	r3, r3, #16
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00a      	beq.n	800b872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	430a      	orrs	r2, r1
 800b870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b876:	f003 0320 	and.w	r3, r3, #32
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00a      	beq.n	800b894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	430a      	orrs	r2, r1
 800b892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d01a      	beq.n	800b8d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	430a      	orrs	r2, r1
 800b8b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b8be:	d10a      	bne.n	800b8d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	430a      	orrs	r2, r1
 800b8d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d00a      	beq.n	800b8f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	430a      	orrs	r2, r1
 800b8f6:	605a      	str	r2, [r3, #4]
  }
}
 800b8f8:	bf00      	nop
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b098      	sub	sp, #96	@ 0x60
 800b908:	af02      	add	r7, sp, #8
 800b90a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b914:	f7f7 f906 	bl	8002b24 <HAL_GetTick>
 800b918:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f003 0308 	and.w	r3, r3, #8
 800b924:	2b08      	cmp	r3, #8
 800b926:	d12f      	bne.n	800b988 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b928:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b930:	2200      	movs	r2, #0
 800b932:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 f88e 	bl	800ba58 <UART_WaitOnFlagUntilTimeout>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d022      	beq.n	800b988 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b94a:	e853 3f00 	ldrex	r3, [r3]
 800b94e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b952:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b956:	653b      	str	r3, [r7, #80]	@ 0x50
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	461a      	mov	r2, r3
 800b95e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b960:	647b      	str	r3, [r7, #68]	@ 0x44
 800b962:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b964:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b966:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b968:	e841 2300 	strex	r3, r2, [r1]
 800b96c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b96e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1e6      	bne.n	800b942 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2220      	movs	r2, #32
 800b978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b984:	2303      	movs	r3, #3
 800b986:	e063      	b.n	800ba50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f003 0304 	and.w	r3, r3, #4
 800b992:	2b04      	cmp	r3, #4
 800b994:	d149      	bne.n	800ba2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b996:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b99a:	9300      	str	r3, [sp, #0]
 800b99c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 f857 	bl	800ba58 <UART_WaitOnFlagUntilTimeout>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d03c      	beq.n	800ba2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b8:	e853 3f00 	ldrex	r3, [r3]
 800b9bc:	623b      	str	r3, [r7, #32]
   return(result);
 800b9be:	6a3b      	ldr	r3, [r7, #32]
 800b9c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9d6:	e841 2300 	strex	r3, r2, [r1]
 800b9da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1e6      	bne.n	800b9b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	3308      	adds	r3, #8
 800b9e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	e853 3f00 	ldrex	r3, [r3]
 800b9f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f023 0301 	bic.w	r3, r3, #1
 800b9f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	3308      	adds	r3, #8
 800ba00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba02:	61fa      	str	r2, [r7, #28]
 800ba04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba06:	69b9      	ldr	r1, [r7, #24]
 800ba08:	69fa      	ldr	r2, [r7, #28]
 800ba0a:	e841 2300 	strex	r3, r2, [r1]
 800ba0e:	617b      	str	r3, [r7, #20]
   return(result);
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d1e5      	bne.n	800b9e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2220      	movs	r2, #32
 800ba1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2200      	movs	r2, #0
 800ba22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba26:	2303      	movs	r3, #3
 800ba28:	e012      	b.n	800ba50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2220      	movs	r2, #32
 800ba2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2220      	movs	r2, #32
 800ba36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2200      	movs	r2, #0
 800ba44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3758      	adds	r7, #88	@ 0x58
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	60b9      	str	r1, [r7, #8]
 800ba62:	603b      	str	r3, [r7, #0]
 800ba64:	4613      	mov	r3, r2
 800ba66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba68:	e04f      	b.n	800bb0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba70:	d04b      	beq.n	800bb0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba72:	f7f7 f857 	bl	8002b24 <HAL_GetTick>
 800ba76:	4602      	mov	r2, r0
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	1ad3      	subs	r3, r2, r3
 800ba7c:	69ba      	ldr	r2, [r7, #24]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d302      	bcc.n	800ba88 <UART_WaitOnFlagUntilTimeout+0x30>
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d101      	bne.n	800ba8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ba88:	2303      	movs	r3, #3
 800ba8a:	e04e      	b.n	800bb2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f003 0304 	and.w	r3, r3, #4
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d037      	beq.n	800bb0a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	2b80      	cmp	r3, #128	@ 0x80
 800ba9e:	d034      	beq.n	800bb0a <UART_WaitOnFlagUntilTimeout+0xb2>
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	2b40      	cmp	r3, #64	@ 0x40
 800baa4:	d031      	beq.n	800bb0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	69db      	ldr	r3, [r3, #28]
 800baac:	f003 0308 	and.w	r3, r3, #8
 800bab0:	2b08      	cmp	r3, #8
 800bab2:	d110      	bne.n	800bad6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2208      	movs	r2, #8
 800baba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	f000 f839 	bl	800bb34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2208      	movs	r2, #8
 800bac6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2200      	movs	r2, #0
 800bace:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bad2:	2301      	movs	r3, #1
 800bad4:	e029      	b.n	800bb2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	69db      	ldr	r3, [r3, #28]
 800badc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bae0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bae4:	d111      	bne.n	800bb0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800baee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	f000 f81f 	bl	800bb34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2220      	movs	r2, #32
 800bafa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bb06:	2303      	movs	r3, #3
 800bb08:	e00f      	b.n	800bb2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	69da      	ldr	r2, [r3, #28]
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	4013      	ands	r3, r2
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	bf0c      	ite	eq
 800bb1a:	2301      	moveq	r3, #1
 800bb1c:	2300      	movne	r3, #0
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	461a      	mov	r2, r3
 800bb22:	79fb      	ldrb	r3, [r7, #7]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d0a0      	beq.n	800ba6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3710      	adds	r7, #16
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
	...

0800bb34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b095      	sub	sp, #84	@ 0x54
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb44:	e853 3f00 	ldrex	r3, [r3]
 800bb48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bb50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	461a      	mov	r2, r3
 800bb58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bb60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bb62:	e841 2300 	strex	r3, r2, [r1]
 800bb66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bb68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1e6      	bne.n	800bb3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	3308      	adds	r3, #8
 800bb74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb76:	6a3b      	ldr	r3, [r7, #32]
 800bb78:	e853 3f00 	ldrex	r3, [r3]
 800bb7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb7e:	69fa      	ldr	r2, [r7, #28]
 800bb80:	4b1e      	ldr	r3, [pc, #120]	@ (800bbfc <UART_EndRxTransfer+0xc8>)
 800bb82:	4013      	ands	r3, r2
 800bb84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	3308      	adds	r3, #8
 800bb8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bb90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb96:	e841 2300 	strex	r3, r2, [r1]
 800bb9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d1e5      	bne.n	800bb6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d118      	bne.n	800bbdc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	e853 3f00 	ldrex	r3, [r3]
 800bbb6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	f023 0310 	bic.w	r3, r3, #16
 800bbbe:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbc8:	61bb      	str	r3, [r7, #24]
 800bbca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbcc:	6979      	ldr	r1, [r7, #20]
 800bbce:	69ba      	ldr	r2, [r7, #24]
 800bbd0:	e841 2300 	strex	r3, r2, [r1]
 800bbd4:	613b      	str	r3, [r7, #16]
   return(result);
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1e6      	bne.n	800bbaa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2220      	movs	r2, #32
 800bbe0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bbf0:	bf00      	nop
 800bbf2:	3754      	adds	r7, #84	@ 0x54
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr
 800bbfc:	effffffe 	.word	0xeffffffe

0800bc00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b085      	sub	sp, #20
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d101      	bne.n	800bc16 <HAL_UARTEx_DisableFifoMode+0x16>
 800bc12:	2302      	movs	r3, #2
 800bc14:	e027      	b.n	800bc66 <HAL_UARTEx_DisableFifoMode+0x66>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2224      	movs	r2, #36	@ 0x24
 800bc22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f022 0201 	bic.w	r2, r2, #1
 800bc3c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bc44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2220      	movs	r2, #32
 800bc58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc64:	2300      	movs	r3, #0
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3714      	adds	r7, #20
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr

0800bc72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b084      	sub	sp, #16
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
 800bc7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d101      	bne.n	800bc8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bc86:	2302      	movs	r3, #2
 800bc88:	e02d      	b.n	800bce6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2224      	movs	r2, #36	@ 0x24
 800bc96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f022 0201 	bic.w	r2, r2, #1
 800bcb0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	683a      	ldr	r2, [r7, #0]
 800bcc2:	430a      	orrs	r2, r1
 800bcc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 f850 	bl	800bd6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2220      	movs	r2, #32
 800bcd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3710      	adds	r7, #16
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b084      	sub	sp, #16
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d101      	bne.n	800bd06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd02:	2302      	movs	r3, #2
 800bd04:	e02d      	b.n	800bd62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2224      	movs	r2, #36	@ 0x24
 800bd12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f022 0201 	bic.w	r2, r2, #1
 800bd2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	683a      	ldr	r2, [r7, #0]
 800bd3e:	430a      	orrs	r2, r1
 800bd40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 f812 	bl	800bd6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2220      	movs	r2, #32
 800bd54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3710      	adds	r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
	...

0800bd6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b085      	sub	sp, #20
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d108      	bne.n	800bd8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bd8c:	e031      	b.n	800bdf2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bd8e:	2310      	movs	r3, #16
 800bd90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bd92:	2310      	movs	r3, #16
 800bd94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	0e5b      	lsrs	r3, r3, #25
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	f003 0307 	and.w	r3, r3, #7
 800bda4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	0f5b      	lsrs	r3, r3, #29
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	f003 0307 	and.w	r3, r3, #7
 800bdb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bdb6:	7bbb      	ldrb	r3, [r7, #14]
 800bdb8:	7b3a      	ldrb	r2, [r7, #12]
 800bdba:	4911      	ldr	r1, [pc, #68]	@ (800be00 <UARTEx_SetNbDataToProcess+0x94>)
 800bdbc:	5c8a      	ldrb	r2, [r1, r2]
 800bdbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bdc2:	7b3a      	ldrb	r2, [r7, #12]
 800bdc4:	490f      	ldr	r1, [pc, #60]	@ (800be04 <UARTEx_SetNbDataToProcess+0x98>)
 800bdc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bdc8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bdd4:	7bfb      	ldrb	r3, [r7, #15]
 800bdd6:	7b7a      	ldrb	r2, [r7, #13]
 800bdd8:	4909      	ldr	r1, [pc, #36]	@ (800be00 <UARTEx_SetNbDataToProcess+0x94>)
 800bdda:	5c8a      	ldrb	r2, [r1, r2]
 800bddc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bde0:	7b7a      	ldrb	r2, [r7, #13]
 800bde2:	4908      	ldr	r1, [pc, #32]	@ (800be04 <UARTEx_SetNbDataToProcess+0x98>)
 800bde4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bde6:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdea:	b29a      	uxth	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bdf2:	bf00      	nop
 800bdf4:	3714      	adds	r7, #20
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	0800c968 	.word	0x0800c968
 800be04:	0800c970 	.word	0x0800c970

0800be08 <siprintf>:
 800be08:	b40e      	push	{r1, r2, r3}
 800be0a:	b510      	push	{r4, lr}
 800be0c:	b09d      	sub	sp, #116	@ 0x74
 800be0e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800be10:	9002      	str	r0, [sp, #8]
 800be12:	9006      	str	r0, [sp, #24]
 800be14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800be18:	480a      	ldr	r0, [pc, #40]	@ (800be44 <siprintf+0x3c>)
 800be1a:	9107      	str	r1, [sp, #28]
 800be1c:	9104      	str	r1, [sp, #16]
 800be1e:	490a      	ldr	r1, [pc, #40]	@ (800be48 <siprintf+0x40>)
 800be20:	f853 2b04 	ldr.w	r2, [r3], #4
 800be24:	9105      	str	r1, [sp, #20]
 800be26:	2400      	movs	r4, #0
 800be28:	a902      	add	r1, sp, #8
 800be2a:	6800      	ldr	r0, [r0, #0]
 800be2c:	9301      	str	r3, [sp, #4]
 800be2e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800be30:	f000 f9a2 	bl	800c178 <_svfiprintf_r>
 800be34:	9b02      	ldr	r3, [sp, #8]
 800be36:	701c      	strb	r4, [r3, #0]
 800be38:	b01d      	add	sp, #116	@ 0x74
 800be3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be3e:	b003      	add	sp, #12
 800be40:	4770      	bx	lr
 800be42:	bf00      	nop
 800be44:	2400001c 	.word	0x2400001c
 800be48:	ffff0208 	.word	0xffff0208

0800be4c <memset>:
 800be4c:	4402      	add	r2, r0
 800be4e:	4603      	mov	r3, r0
 800be50:	4293      	cmp	r3, r2
 800be52:	d100      	bne.n	800be56 <memset+0xa>
 800be54:	4770      	bx	lr
 800be56:	f803 1b01 	strb.w	r1, [r3], #1
 800be5a:	e7f9      	b.n	800be50 <memset+0x4>

0800be5c <__errno>:
 800be5c:	4b01      	ldr	r3, [pc, #4]	@ (800be64 <__errno+0x8>)
 800be5e:	6818      	ldr	r0, [r3, #0]
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	2400001c 	.word	0x2400001c

0800be68 <__libc_init_array>:
 800be68:	b570      	push	{r4, r5, r6, lr}
 800be6a:	4d0d      	ldr	r5, [pc, #52]	@ (800bea0 <__libc_init_array+0x38>)
 800be6c:	4c0d      	ldr	r4, [pc, #52]	@ (800bea4 <__libc_init_array+0x3c>)
 800be6e:	1b64      	subs	r4, r4, r5
 800be70:	10a4      	asrs	r4, r4, #2
 800be72:	2600      	movs	r6, #0
 800be74:	42a6      	cmp	r6, r4
 800be76:	d109      	bne.n	800be8c <__libc_init_array+0x24>
 800be78:	4d0b      	ldr	r5, [pc, #44]	@ (800bea8 <__libc_init_array+0x40>)
 800be7a:	4c0c      	ldr	r4, [pc, #48]	@ (800beac <__libc_init_array+0x44>)
 800be7c:	f000 fc64 	bl	800c748 <_init>
 800be80:	1b64      	subs	r4, r4, r5
 800be82:	10a4      	asrs	r4, r4, #2
 800be84:	2600      	movs	r6, #0
 800be86:	42a6      	cmp	r6, r4
 800be88:	d105      	bne.n	800be96 <__libc_init_array+0x2e>
 800be8a:	bd70      	pop	{r4, r5, r6, pc}
 800be8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800be90:	4798      	blx	r3
 800be92:	3601      	adds	r6, #1
 800be94:	e7ee      	b.n	800be74 <__libc_init_array+0xc>
 800be96:	f855 3b04 	ldr.w	r3, [r5], #4
 800be9a:	4798      	blx	r3
 800be9c:	3601      	adds	r6, #1
 800be9e:	e7f2      	b.n	800be86 <__libc_init_array+0x1e>
 800bea0:	0800c9b4 	.word	0x0800c9b4
 800bea4:	0800c9b4 	.word	0x0800c9b4
 800bea8:	0800c9b4 	.word	0x0800c9b4
 800beac:	0800c9bc 	.word	0x0800c9bc

0800beb0 <__retarget_lock_acquire_recursive>:
 800beb0:	4770      	bx	lr

0800beb2 <__retarget_lock_release_recursive>:
 800beb2:	4770      	bx	lr

0800beb4 <memcpy>:
 800beb4:	440a      	add	r2, r1
 800beb6:	4291      	cmp	r1, r2
 800beb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bebc:	d100      	bne.n	800bec0 <memcpy+0xc>
 800bebe:	4770      	bx	lr
 800bec0:	b510      	push	{r4, lr}
 800bec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800beca:	4291      	cmp	r1, r2
 800becc:	d1f9      	bne.n	800bec2 <memcpy+0xe>
 800bece:	bd10      	pop	{r4, pc}

0800bed0 <_free_r>:
 800bed0:	b538      	push	{r3, r4, r5, lr}
 800bed2:	4605      	mov	r5, r0
 800bed4:	2900      	cmp	r1, #0
 800bed6:	d041      	beq.n	800bf5c <_free_r+0x8c>
 800bed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bedc:	1f0c      	subs	r4, r1, #4
 800bede:	2b00      	cmp	r3, #0
 800bee0:	bfb8      	it	lt
 800bee2:	18e4      	addlt	r4, r4, r3
 800bee4:	f000 f8e0 	bl	800c0a8 <__malloc_lock>
 800bee8:	4a1d      	ldr	r2, [pc, #116]	@ (800bf60 <_free_r+0x90>)
 800beea:	6813      	ldr	r3, [r2, #0]
 800beec:	b933      	cbnz	r3, 800befc <_free_r+0x2c>
 800beee:	6063      	str	r3, [r4, #4]
 800bef0:	6014      	str	r4, [r2, #0]
 800bef2:	4628      	mov	r0, r5
 800bef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bef8:	f000 b8dc 	b.w	800c0b4 <__malloc_unlock>
 800befc:	42a3      	cmp	r3, r4
 800befe:	d908      	bls.n	800bf12 <_free_r+0x42>
 800bf00:	6820      	ldr	r0, [r4, #0]
 800bf02:	1821      	adds	r1, r4, r0
 800bf04:	428b      	cmp	r3, r1
 800bf06:	bf01      	itttt	eq
 800bf08:	6819      	ldreq	r1, [r3, #0]
 800bf0a:	685b      	ldreq	r3, [r3, #4]
 800bf0c:	1809      	addeq	r1, r1, r0
 800bf0e:	6021      	streq	r1, [r4, #0]
 800bf10:	e7ed      	b.n	800beee <_free_r+0x1e>
 800bf12:	461a      	mov	r2, r3
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	b10b      	cbz	r3, 800bf1c <_free_r+0x4c>
 800bf18:	42a3      	cmp	r3, r4
 800bf1a:	d9fa      	bls.n	800bf12 <_free_r+0x42>
 800bf1c:	6811      	ldr	r1, [r2, #0]
 800bf1e:	1850      	adds	r0, r2, r1
 800bf20:	42a0      	cmp	r0, r4
 800bf22:	d10b      	bne.n	800bf3c <_free_r+0x6c>
 800bf24:	6820      	ldr	r0, [r4, #0]
 800bf26:	4401      	add	r1, r0
 800bf28:	1850      	adds	r0, r2, r1
 800bf2a:	4283      	cmp	r3, r0
 800bf2c:	6011      	str	r1, [r2, #0]
 800bf2e:	d1e0      	bne.n	800bef2 <_free_r+0x22>
 800bf30:	6818      	ldr	r0, [r3, #0]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	6053      	str	r3, [r2, #4]
 800bf36:	4408      	add	r0, r1
 800bf38:	6010      	str	r0, [r2, #0]
 800bf3a:	e7da      	b.n	800bef2 <_free_r+0x22>
 800bf3c:	d902      	bls.n	800bf44 <_free_r+0x74>
 800bf3e:	230c      	movs	r3, #12
 800bf40:	602b      	str	r3, [r5, #0]
 800bf42:	e7d6      	b.n	800bef2 <_free_r+0x22>
 800bf44:	6820      	ldr	r0, [r4, #0]
 800bf46:	1821      	adds	r1, r4, r0
 800bf48:	428b      	cmp	r3, r1
 800bf4a:	bf04      	itt	eq
 800bf4c:	6819      	ldreq	r1, [r3, #0]
 800bf4e:	685b      	ldreq	r3, [r3, #4]
 800bf50:	6063      	str	r3, [r4, #4]
 800bf52:	bf04      	itt	eq
 800bf54:	1809      	addeq	r1, r1, r0
 800bf56:	6021      	streq	r1, [r4, #0]
 800bf58:	6054      	str	r4, [r2, #4]
 800bf5a:	e7ca      	b.n	800bef2 <_free_r+0x22>
 800bf5c:	bd38      	pop	{r3, r4, r5, pc}
 800bf5e:	bf00      	nop
 800bf60:	24000e98 	.word	0x24000e98

0800bf64 <sbrk_aligned>:
 800bf64:	b570      	push	{r4, r5, r6, lr}
 800bf66:	4e0f      	ldr	r6, [pc, #60]	@ (800bfa4 <sbrk_aligned+0x40>)
 800bf68:	460c      	mov	r4, r1
 800bf6a:	6831      	ldr	r1, [r6, #0]
 800bf6c:	4605      	mov	r5, r0
 800bf6e:	b911      	cbnz	r1, 800bf76 <sbrk_aligned+0x12>
 800bf70:	f000 fba4 	bl	800c6bc <_sbrk_r>
 800bf74:	6030      	str	r0, [r6, #0]
 800bf76:	4621      	mov	r1, r4
 800bf78:	4628      	mov	r0, r5
 800bf7a:	f000 fb9f 	bl	800c6bc <_sbrk_r>
 800bf7e:	1c43      	adds	r3, r0, #1
 800bf80:	d103      	bne.n	800bf8a <sbrk_aligned+0x26>
 800bf82:	f04f 34ff 	mov.w	r4, #4294967295
 800bf86:	4620      	mov	r0, r4
 800bf88:	bd70      	pop	{r4, r5, r6, pc}
 800bf8a:	1cc4      	adds	r4, r0, #3
 800bf8c:	f024 0403 	bic.w	r4, r4, #3
 800bf90:	42a0      	cmp	r0, r4
 800bf92:	d0f8      	beq.n	800bf86 <sbrk_aligned+0x22>
 800bf94:	1a21      	subs	r1, r4, r0
 800bf96:	4628      	mov	r0, r5
 800bf98:	f000 fb90 	bl	800c6bc <_sbrk_r>
 800bf9c:	3001      	adds	r0, #1
 800bf9e:	d1f2      	bne.n	800bf86 <sbrk_aligned+0x22>
 800bfa0:	e7ef      	b.n	800bf82 <sbrk_aligned+0x1e>
 800bfa2:	bf00      	nop
 800bfa4:	24000e94 	.word	0x24000e94

0800bfa8 <_malloc_r>:
 800bfa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfac:	1ccd      	adds	r5, r1, #3
 800bfae:	f025 0503 	bic.w	r5, r5, #3
 800bfb2:	3508      	adds	r5, #8
 800bfb4:	2d0c      	cmp	r5, #12
 800bfb6:	bf38      	it	cc
 800bfb8:	250c      	movcc	r5, #12
 800bfba:	2d00      	cmp	r5, #0
 800bfbc:	4606      	mov	r6, r0
 800bfbe:	db01      	blt.n	800bfc4 <_malloc_r+0x1c>
 800bfc0:	42a9      	cmp	r1, r5
 800bfc2:	d904      	bls.n	800bfce <_malloc_r+0x26>
 800bfc4:	230c      	movs	r3, #12
 800bfc6:	6033      	str	r3, [r6, #0]
 800bfc8:	2000      	movs	r0, #0
 800bfca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c0a4 <_malloc_r+0xfc>
 800bfd2:	f000 f869 	bl	800c0a8 <__malloc_lock>
 800bfd6:	f8d8 3000 	ldr.w	r3, [r8]
 800bfda:	461c      	mov	r4, r3
 800bfdc:	bb44      	cbnz	r4, 800c030 <_malloc_r+0x88>
 800bfde:	4629      	mov	r1, r5
 800bfe0:	4630      	mov	r0, r6
 800bfe2:	f7ff ffbf 	bl	800bf64 <sbrk_aligned>
 800bfe6:	1c43      	adds	r3, r0, #1
 800bfe8:	4604      	mov	r4, r0
 800bfea:	d158      	bne.n	800c09e <_malloc_r+0xf6>
 800bfec:	f8d8 4000 	ldr.w	r4, [r8]
 800bff0:	4627      	mov	r7, r4
 800bff2:	2f00      	cmp	r7, #0
 800bff4:	d143      	bne.n	800c07e <_malloc_r+0xd6>
 800bff6:	2c00      	cmp	r4, #0
 800bff8:	d04b      	beq.n	800c092 <_malloc_r+0xea>
 800bffa:	6823      	ldr	r3, [r4, #0]
 800bffc:	4639      	mov	r1, r7
 800bffe:	4630      	mov	r0, r6
 800c000:	eb04 0903 	add.w	r9, r4, r3
 800c004:	f000 fb5a 	bl	800c6bc <_sbrk_r>
 800c008:	4581      	cmp	r9, r0
 800c00a:	d142      	bne.n	800c092 <_malloc_r+0xea>
 800c00c:	6821      	ldr	r1, [r4, #0]
 800c00e:	1a6d      	subs	r5, r5, r1
 800c010:	4629      	mov	r1, r5
 800c012:	4630      	mov	r0, r6
 800c014:	f7ff ffa6 	bl	800bf64 <sbrk_aligned>
 800c018:	3001      	adds	r0, #1
 800c01a:	d03a      	beq.n	800c092 <_malloc_r+0xea>
 800c01c:	6823      	ldr	r3, [r4, #0]
 800c01e:	442b      	add	r3, r5
 800c020:	6023      	str	r3, [r4, #0]
 800c022:	f8d8 3000 	ldr.w	r3, [r8]
 800c026:	685a      	ldr	r2, [r3, #4]
 800c028:	bb62      	cbnz	r2, 800c084 <_malloc_r+0xdc>
 800c02a:	f8c8 7000 	str.w	r7, [r8]
 800c02e:	e00f      	b.n	800c050 <_malloc_r+0xa8>
 800c030:	6822      	ldr	r2, [r4, #0]
 800c032:	1b52      	subs	r2, r2, r5
 800c034:	d420      	bmi.n	800c078 <_malloc_r+0xd0>
 800c036:	2a0b      	cmp	r2, #11
 800c038:	d917      	bls.n	800c06a <_malloc_r+0xc2>
 800c03a:	1961      	adds	r1, r4, r5
 800c03c:	42a3      	cmp	r3, r4
 800c03e:	6025      	str	r5, [r4, #0]
 800c040:	bf18      	it	ne
 800c042:	6059      	strne	r1, [r3, #4]
 800c044:	6863      	ldr	r3, [r4, #4]
 800c046:	bf08      	it	eq
 800c048:	f8c8 1000 	streq.w	r1, [r8]
 800c04c:	5162      	str	r2, [r4, r5]
 800c04e:	604b      	str	r3, [r1, #4]
 800c050:	4630      	mov	r0, r6
 800c052:	f000 f82f 	bl	800c0b4 <__malloc_unlock>
 800c056:	f104 000b 	add.w	r0, r4, #11
 800c05a:	1d23      	adds	r3, r4, #4
 800c05c:	f020 0007 	bic.w	r0, r0, #7
 800c060:	1ac2      	subs	r2, r0, r3
 800c062:	bf1c      	itt	ne
 800c064:	1a1b      	subne	r3, r3, r0
 800c066:	50a3      	strne	r3, [r4, r2]
 800c068:	e7af      	b.n	800bfca <_malloc_r+0x22>
 800c06a:	6862      	ldr	r2, [r4, #4]
 800c06c:	42a3      	cmp	r3, r4
 800c06e:	bf0c      	ite	eq
 800c070:	f8c8 2000 	streq.w	r2, [r8]
 800c074:	605a      	strne	r2, [r3, #4]
 800c076:	e7eb      	b.n	800c050 <_malloc_r+0xa8>
 800c078:	4623      	mov	r3, r4
 800c07a:	6864      	ldr	r4, [r4, #4]
 800c07c:	e7ae      	b.n	800bfdc <_malloc_r+0x34>
 800c07e:	463c      	mov	r4, r7
 800c080:	687f      	ldr	r7, [r7, #4]
 800c082:	e7b6      	b.n	800bff2 <_malloc_r+0x4a>
 800c084:	461a      	mov	r2, r3
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	42a3      	cmp	r3, r4
 800c08a:	d1fb      	bne.n	800c084 <_malloc_r+0xdc>
 800c08c:	2300      	movs	r3, #0
 800c08e:	6053      	str	r3, [r2, #4]
 800c090:	e7de      	b.n	800c050 <_malloc_r+0xa8>
 800c092:	230c      	movs	r3, #12
 800c094:	6033      	str	r3, [r6, #0]
 800c096:	4630      	mov	r0, r6
 800c098:	f000 f80c 	bl	800c0b4 <__malloc_unlock>
 800c09c:	e794      	b.n	800bfc8 <_malloc_r+0x20>
 800c09e:	6005      	str	r5, [r0, #0]
 800c0a0:	e7d6      	b.n	800c050 <_malloc_r+0xa8>
 800c0a2:	bf00      	nop
 800c0a4:	24000e98 	.word	0x24000e98

0800c0a8 <__malloc_lock>:
 800c0a8:	4801      	ldr	r0, [pc, #4]	@ (800c0b0 <__malloc_lock+0x8>)
 800c0aa:	f7ff bf01 	b.w	800beb0 <__retarget_lock_acquire_recursive>
 800c0ae:	bf00      	nop
 800c0b0:	24000e90 	.word	0x24000e90

0800c0b4 <__malloc_unlock>:
 800c0b4:	4801      	ldr	r0, [pc, #4]	@ (800c0bc <__malloc_unlock+0x8>)
 800c0b6:	f7ff befc 	b.w	800beb2 <__retarget_lock_release_recursive>
 800c0ba:	bf00      	nop
 800c0bc:	24000e90 	.word	0x24000e90

0800c0c0 <__ssputs_r>:
 800c0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0c4:	688e      	ldr	r6, [r1, #8]
 800c0c6:	461f      	mov	r7, r3
 800c0c8:	42be      	cmp	r6, r7
 800c0ca:	680b      	ldr	r3, [r1, #0]
 800c0cc:	4682      	mov	sl, r0
 800c0ce:	460c      	mov	r4, r1
 800c0d0:	4690      	mov	r8, r2
 800c0d2:	d82d      	bhi.n	800c130 <__ssputs_r+0x70>
 800c0d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c0dc:	d026      	beq.n	800c12c <__ssputs_r+0x6c>
 800c0de:	6965      	ldr	r5, [r4, #20]
 800c0e0:	6909      	ldr	r1, [r1, #16]
 800c0e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0e6:	eba3 0901 	sub.w	r9, r3, r1
 800c0ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0ee:	1c7b      	adds	r3, r7, #1
 800c0f0:	444b      	add	r3, r9
 800c0f2:	106d      	asrs	r5, r5, #1
 800c0f4:	429d      	cmp	r5, r3
 800c0f6:	bf38      	it	cc
 800c0f8:	461d      	movcc	r5, r3
 800c0fa:	0553      	lsls	r3, r2, #21
 800c0fc:	d527      	bpl.n	800c14e <__ssputs_r+0x8e>
 800c0fe:	4629      	mov	r1, r5
 800c100:	f7ff ff52 	bl	800bfa8 <_malloc_r>
 800c104:	4606      	mov	r6, r0
 800c106:	b360      	cbz	r0, 800c162 <__ssputs_r+0xa2>
 800c108:	6921      	ldr	r1, [r4, #16]
 800c10a:	464a      	mov	r2, r9
 800c10c:	f7ff fed2 	bl	800beb4 <memcpy>
 800c110:	89a3      	ldrh	r3, [r4, #12]
 800c112:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c11a:	81a3      	strh	r3, [r4, #12]
 800c11c:	6126      	str	r6, [r4, #16]
 800c11e:	6165      	str	r5, [r4, #20]
 800c120:	444e      	add	r6, r9
 800c122:	eba5 0509 	sub.w	r5, r5, r9
 800c126:	6026      	str	r6, [r4, #0]
 800c128:	60a5      	str	r5, [r4, #8]
 800c12a:	463e      	mov	r6, r7
 800c12c:	42be      	cmp	r6, r7
 800c12e:	d900      	bls.n	800c132 <__ssputs_r+0x72>
 800c130:	463e      	mov	r6, r7
 800c132:	6820      	ldr	r0, [r4, #0]
 800c134:	4632      	mov	r2, r6
 800c136:	4641      	mov	r1, r8
 800c138:	f000 faa6 	bl	800c688 <memmove>
 800c13c:	68a3      	ldr	r3, [r4, #8]
 800c13e:	1b9b      	subs	r3, r3, r6
 800c140:	60a3      	str	r3, [r4, #8]
 800c142:	6823      	ldr	r3, [r4, #0]
 800c144:	4433      	add	r3, r6
 800c146:	6023      	str	r3, [r4, #0]
 800c148:	2000      	movs	r0, #0
 800c14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c14e:	462a      	mov	r2, r5
 800c150:	f000 fac4 	bl	800c6dc <_realloc_r>
 800c154:	4606      	mov	r6, r0
 800c156:	2800      	cmp	r0, #0
 800c158:	d1e0      	bne.n	800c11c <__ssputs_r+0x5c>
 800c15a:	6921      	ldr	r1, [r4, #16]
 800c15c:	4650      	mov	r0, sl
 800c15e:	f7ff feb7 	bl	800bed0 <_free_r>
 800c162:	230c      	movs	r3, #12
 800c164:	f8ca 3000 	str.w	r3, [sl]
 800c168:	89a3      	ldrh	r3, [r4, #12]
 800c16a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c16e:	81a3      	strh	r3, [r4, #12]
 800c170:	f04f 30ff 	mov.w	r0, #4294967295
 800c174:	e7e9      	b.n	800c14a <__ssputs_r+0x8a>
	...

0800c178 <_svfiprintf_r>:
 800c178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c17c:	4698      	mov	r8, r3
 800c17e:	898b      	ldrh	r3, [r1, #12]
 800c180:	061b      	lsls	r3, r3, #24
 800c182:	b09d      	sub	sp, #116	@ 0x74
 800c184:	4607      	mov	r7, r0
 800c186:	460d      	mov	r5, r1
 800c188:	4614      	mov	r4, r2
 800c18a:	d510      	bpl.n	800c1ae <_svfiprintf_r+0x36>
 800c18c:	690b      	ldr	r3, [r1, #16]
 800c18e:	b973      	cbnz	r3, 800c1ae <_svfiprintf_r+0x36>
 800c190:	2140      	movs	r1, #64	@ 0x40
 800c192:	f7ff ff09 	bl	800bfa8 <_malloc_r>
 800c196:	6028      	str	r0, [r5, #0]
 800c198:	6128      	str	r0, [r5, #16]
 800c19a:	b930      	cbnz	r0, 800c1aa <_svfiprintf_r+0x32>
 800c19c:	230c      	movs	r3, #12
 800c19e:	603b      	str	r3, [r7, #0]
 800c1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a4:	b01d      	add	sp, #116	@ 0x74
 800c1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1aa:	2340      	movs	r3, #64	@ 0x40
 800c1ac:	616b      	str	r3, [r5, #20]
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1b2:	2320      	movs	r3, #32
 800c1b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c1b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1bc:	2330      	movs	r3, #48	@ 0x30
 800c1be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c35c <_svfiprintf_r+0x1e4>
 800c1c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c1c6:	f04f 0901 	mov.w	r9, #1
 800c1ca:	4623      	mov	r3, r4
 800c1cc:	469a      	mov	sl, r3
 800c1ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1d2:	b10a      	cbz	r2, 800c1d8 <_svfiprintf_r+0x60>
 800c1d4:	2a25      	cmp	r2, #37	@ 0x25
 800c1d6:	d1f9      	bne.n	800c1cc <_svfiprintf_r+0x54>
 800c1d8:	ebba 0b04 	subs.w	fp, sl, r4
 800c1dc:	d00b      	beq.n	800c1f6 <_svfiprintf_r+0x7e>
 800c1de:	465b      	mov	r3, fp
 800c1e0:	4622      	mov	r2, r4
 800c1e2:	4629      	mov	r1, r5
 800c1e4:	4638      	mov	r0, r7
 800c1e6:	f7ff ff6b 	bl	800c0c0 <__ssputs_r>
 800c1ea:	3001      	adds	r0, #1
 800c1ec:	f000 80a7 	beq.w	800c33e <_svfiprintf_r+0x1c6>
 800c1f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1f2:	445a      	add	r2, fp
 800c1f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	f000 809f 	beq.w	800c33e <_svfiprintf_r+0x1c6>
 800c200:	2300      	movs	r3, #0
 800c202:	f04f 32ff 	mov.w	r2, #4294967295
 800c206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c20a:	f10a 0a01 	add.w	sl, sl, #1
 800c20e:	9304      	str	r3, [sp, #16]
 800c210:	9307      	str	r3, [sp, #28]
 800c212:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c216:	931a      	str	r3, [sp, #104]	@ 0x68
 800c218:	4654      	mov	r4, sl
 800c21a:	2205      	movs	r2, #5
 800c21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c220:	484e      	ldr	r0, [pc, #312]	@ (800c35c <_svfiprintf_r+0x1e4>)
 800c222:	f7f4 f87d 	bl	8000320 <memchr>
 800c226:	9a04      	ldr	r2, [sp, #16]
 800c228:	b9d8      	cbnz	r0, 800c262 <_svfiprintf_r+0xea>
 800c22a:	06d0      	lsls	r0, r2, #27
 800c22c:	bf44      	itt	mi
 800c22e:	2320      	movmi	r3, #32
 800c230:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c234:	0711      	lsls	r1, r2, #28
 800c236:	bf44      	itt	mi
 800c238:	232b      	movmi	r3, #43	@ 0x2b
 800c23a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c23e:	f89a 3000 	ldrb.w	r3, [sl]
 800c242:	2b2a      	cmp	r3, #42	@ 0x2a
 800c244:	d015      	beq.n	800c272 <_svfiprintf_r+0xfa>
 800c246:	9a07      	ldr	r2, [sp, #28]
 800c248:	4654      	mov	r4, sl
 800c24a:	2000      	movs	r0, #0
 800c24c:	f04f 0c0a 	mov.w	ip, #10
 800c250:	4621      	mov	r1, r4
 800c252:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c256:	3b30      	subs	r3, #48	@ 0x30
 800c258:	2b09      	cmp	r3, #9
 800c25a:	d94b      	bls.n	800c2f4 <_svfiprintf_r+0x17c>
 800c25c:	b1b0      	cbz	r0, 800c28c <_svfiprintf_r+0x114>
 800c25e:	9207      	str	r2, [sp, #28]
 800c260:	e014      	b.n	800c28c <_svfiprintf_r+0x114>
 800c262:	eba0 0308 	sub.w	r3, r0, r8
 800c266:	fa09 f303 	lsl.w	r3, r9, r3
 800c26a:	4313      	orrs	r3, r2
 800c26c:	9304      	str	r3, [sp, #16]
 800c26e:	46a2      	mov	sl, r4
 800c270:	e7d2      	b.n	800c218 <_svfiprintf_r+0xa0>
 800c272:	9b03      	ldr	r3, [sp, #12]
 800c274:	1d19      	adds	r1, r3, #4
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	9103      	str	r1, [sp, #12]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	bfbb      	ittet	lt
 800c27e:	425b      	neglt	r3, r3
 800c280:	f042 0202 	orrlt.w	r2, r2, #2
 800c284:	9307      	strge	r3, [sp, #28]
 800c286:	9307      	strlt	r3, [sp, #28]
 800c288:	bfb8      	it	lt
 800c28a:	9204      	strlt	r2, [sp, #16]
 800c28c:	7823      	ldrb	r3, [r4, #0]
 800c28e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c290:	d10a      	bne.n	800c2a8 <_svfiprintf_r+0x130>
 800c292:	7863      	ldrb	r3, [r4, #1]
 800c294:	2b2a      	cmp	r3, #42	@ 0x2a
 800c296:	d132      	bne.n	800c2fe <_svfiprintf_r+0x186>
 800c298:	9b03      	ldr	r3, [sp, #12]
 800c29a:	1d1a      	adds	r2, r3, #4
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	9203      	str	r2, [sp, #12]
 800c2a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c2a4:	3402      	adds	r4, #2
 800c2a6:	9305      	str	r3, [sp, #20]
 800c2a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c36c <_svfiprintf_r+0x1f4>
 800c2ac:	7821      	ldrb	r1, [r4, #0]
 800c2ae:	2203      	movs	r2, #3
 800c2b0:	4650      	mov	r0, sl
 800c2b2:	f7f4 f835 	bl	8000320 <memchr>
 800c2b6:	b138      	cbz	r0, 800c2c8 <_svfiprintf_r+0x150>
 800c2b8:	9b04      	ldr	r3, [sp, #16]
 800c2ba:	eba0 000a 	sub.w	r0, r0, sl
 800c2be:	2240      	movs	r2, #64	@ 0x40
 800c2c0:	4082      	lsls	r2, r0
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	3401      	adds	r4, #1
 800c2c6:	9304      	str	r3, [sp, #16]
 800c2c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2cc:	4824      	ldr	r0, [pc, #144]	@ (800c360 <_svfiprintf_r+0x1e8>)
 800c2ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c2d2:	2206      	movs	r2, #6
 800c2d4:	f7f4 f824 	bl	8000320 <memchr>
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	d036      	beq.n	800c34a <_svfiprintf_r+0x1d2>
 800c2dc:	4b21      	ldr	r3, [pc, #132]	@ (800c364 <_svfiprintf_r+0x1ec>)
 800c2de:	bb1b      	cbnz	r3, 800c328 <_svfiprintf_r+0x1b0>
 800c2e0:	9b03      	ldr	r3, [sp, #12]
 800c2e2:	3307      	adds	r3, #7
 800c2e4:	f023 0307 	bic.w	r3, r3, #7
 800c2e8:	3308      	adds	r3, #8
 800c2ea:	9303      	str	r3, [sp, #12]
 800c2ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2ee:	4433      	add	r3, r6
 800c2f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2f2:	e76a      	b.n	800c1ca <_svfiprintf_r+0x52>
 800c2f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2f8:	460c      	mov	r4, r1
 800c2fa:	2001      	movs	r0, #1
 800c2fc:	e7a8      	b.n	800c250 <_svfiprintf_r+0xd8>
 800c2fe:	2300      	movs	r3, #0
 800c300:	3401      	adds	r4, #1
 800c302:	9305      	str	r3, [sp, #20]
 800c304:	4619      	mov	r1, r3
 800c306:	f04f 0c0a 	mov.w	ip, #10
 800c30a:	4620      	mov	r0, r4
 800c30c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c310:	3a30      	subs	r2, #48	@ 0x30
 800c312:	2a09      	cmp	r2, #9
 800c314:	d903      	bls.n	800c31e <_svfiprintf_r+0x1a6>
 800c316:	2b00      	cmp	r3, #0
 800c318:	d0c6      	beq.n	800c2a8 <_svfiprintf_r+0x130>
 800c31a:	9105      	str	r1, [sp, #20]
 800c31c:	e7c4      	b.n	800c2a8 <_svfiprintf_r+0x130>
 800c31e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c322:	4604      	mov	r4, r0
 800c324:	2301      	movs	r3, #1
 800c326:	e7f0      	b.n	800c30a <_svfiprintf_r+0x192>
 800c328:	ab03      	add	r3, sp, #12
 800c32a:	9300      	str	r3, [sp, #0]
 800c32c:	462a      	mov	r2, r5
 800c32e:	4b0e      	ldr	r3, [pc, #56]	@ (800c368 <_svfiprintf_r+0x1f0>)
 800c330:	a904      	add	r1, sp, #16
 800c332:	4638      	mov	r0, r7
 800c334:	f3af 8000 	nop.w
 800c338:	1c42      	adds	r2, r0, #1
 800c33a:	4606      	mov	r6, r0
 800c33c:	d1d6      	bne.n	800c2ec <_svfiprintf_r+0x174>
 800c33e:	89ab      	ldrh	r3, [r5, #12]
 800c340:	065b      	lsls	r3, r3, #25
 800c342:	f53f af2d 	bmi.w	800c1a0 <_svfiprintf_r+0x28>
 800c346:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c348:	e72c      	b.n	800c1a4 <_svfiprintf_r+0x2c>
 800c34a:	ab03      	add	r3, sp, #12
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	462a      	mov	r2, r5
 800c350:	4b05      	ldr	r3, [pc, #20]	@ (800c368 <_svfiprintf_r+0x1f0>)
 800c352:	a904      	add	r1, sp, #16
 800c354:	4638      	mov	r0, r7
 800c356:	f000 f879 	bl	800c44c <_printf_i>
 800c35a:	e7ed      	b.n	800c338 <_svfiprintf_r+0x1c0>
 800c35c:	0800c978 	.word	0x0800c978
 800c360:	0800c982 	.word	0x0800c982
 800c364:	00000000 	.word	0x00000000
 800c368:	0800c0c1 	.word	0x0800c0c1
 800c36c:	0800c97e 	.word	0x0800c97e

0800c370 <_printf_common>:
 800c370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c374:	4616      	mov	r6, r2
 800c376:	4698      	mov	r8, r3
 800c378:	688a      	ldr	r2, [r1, #8]
 800c37a:	690b      	ldr	r3, [r1, #16]
 800c37c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c380:	4293      	cmp	r3, r2
 800c382:	bfb8      	it	lt
 800c384:	4613      	movlt	r3, r2
 800c386:	6033      	str	r3, [r6, #0]
 800c388:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c38c:	4607      	mov	r7, r0
 800c38e:	460c      	mov	r4, r1
 800c390:	b10a      	cbz	r2, 800c396 <_printf_common+0x26>
 800c392:	3301      	adds	r3, #1
 800c394:	6033      	str	r3, [r6, #0]
 800c396:	6823      	ldr	r3, [r4, #0]
 800c398:	0699      	lsls	r1, r3, #26
 800c39a:	bf42      	ittt	mi
 800c39c:	6833      	ldrmi	r3, [r6, #0]
 800c39e:	3302      	addmi	r3, #2
 800c3a0:	6033      	strmi	r3, [r6, #0]
 800c3a2:	6825      	ldr	r5, [r4, #0]
 800c3a4:	f015 0506 	ands.w	r5, r5, #6
 800c3a8:	d106      	bne.n	800c3b8 <_printf_common+0x48>
 800c3aa:	f104 0a19 	add.w	sl, r4, #25
 800c3ae:	68e3      	ldr	r3, [r4, #12]
 800c3b0:	6832      	ldr	r2, [r6, #0]
 800c3b2:	1a9b      	subs	r3, r3, r2
 800c3b4:	42ab      	cmp	r3, r5
 800c3b6:	dc26      	bgt.n	800c406 <_printf_common+0x96>
 800c3b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c3bc:	6822      	ldr	r2, [r4, #0]
 800c3be:	3b00      	subs	r3, #0
 800c3c0:	bf18      	it	ne
 800c3c2:	2301      	movne	r3, #1
 800c3c4:	0692      	lsls	r2, r2, #26
 800c3c6:	d42b      	bmi.n	800c420 <_printf_common+0xb0>
 800c3c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c3cc:	4641      	mov	r1, r8
 800c3ce:	4638      	mov	r0, r7
 800c3d0:	47c8      	blx	r9
 800c3d2:	3001      	adds	r0, #1
 800c3d4:	d01e      	beq.n	800c414 <_printf_common+0xa4>
 800c3d6:	6823      	ldr	r3, [r4, #0]
 800c3d8:	6922      	ldr	r2, [r4, #16]
 800c3da:	f003 0306 	and.w	r3, r3, #6
 800c3de:	2b04      	cmp	r3, #4
 800c3e0:	bf02      	ittt	eq
 800c3e2:	68e5      	ldreq	r5, [r4, #12]
 800c3e4:	6833      	ldreq	r3, [r6, #0]
 800c3e6:	1aed      	subeq	r5, r5, r3
 800c3e8:	68a3      	ldr	r3, [r4, #8]
 800c3ea:	bf0c      	ite	eq
 800c3ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3f0:	2500      	movne	r5, #0
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	bfc4      	itt	gt
 800c3f6:	1a9b      	subgt	r3, r3, r2
 800c3f8:	18ed      	addgt	r5, r5, r3
 800c3fa:	2600      	movs	r6, #0
 800c3fc:	341a      	adds	r4, #26
 800c3fe:	42b5      	cmp	r5, r6
 800c400:	d11a      	bne.n	800c438 <_printf_common+0xc8>
 800c402:	2000      	movs	r0, #0
 800c404:	e008      	b.n	800c418 <_printf_common+0xa8>
 800c406:	2301      	movs	r3, #1
 800c408:	4652      	mov	r2, sl
 800c40a:	4641      	mov	r1, r8
 800c40c:	4638      	mov	r0, r7
 800c40e:	47c8      	blx	r9
 800c410:	3001      	adds	r0, #1
 800c412:	d103      	bne.n	800c41c <_printf_common+0xac>
 800c414:	f04f 30ff 	mov.w	r0, #4294967295
 800c418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c41c:	3501      	adds	r5, #1
 800c41e:	e7c6      	b.n	800c3ae <_printf_common+0x3e>
 800c420:	18e1      	adds	r1, r4, r3
 800c422:	1c5a      	adds	r2, r3, #1
 800c424:	2030      	movs	r0, #48	@ 0x30
 800c426:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c42a:	4422      	add	r2, r4
 800c42c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c430:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c434:	3302      	adds	r3, #2
 800c436:	e7c7      	b.n	800c3c8 <_printf_common+0x58>
 800c438:	2301      	movs	r3, #1
 800c43a:	4622      	mov	r2, r4
 800c43c:	4641      	mov	r1, r8
 800c43e:	4638      	mov	r0, r7
 800c440:	47c8      	blx	r9
 800c442:	3001      	adds	r0, #1
 800c444:	d0e6      	beq.n	800c414 <_printf_common+0xa4>
 800c446:	3601      	adds	r6, #1
 800c448:	e7d9      	b.n	800c3fe <_printf_common+0x8e>
	...

0800c44c <_printf_i>:
 800c44c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c450:	7e0f      	ldrb	r7, [r1, #24]
 800c452:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c454:	2f78      	cmp	r7, #120	@ 0x78
 800c456:	4691      	mov	r9, r2
 800c458:	4680      	mov	r8, r0
 800c45a:	460c      	mov	r4, r1
 800c45c:	469a      	mov	sl, r3
 800c45e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c462:	d807      	bhi.n	800c474 <_printf_i+0x28>
 800c464:	2f62      	cmp	r7, #98	@ 0x62
 800c466:	d80a      	bhi.n	800c47e <_printf_i+0x32>
 800c468:	2f00      	cmp	r7, #0
 800c46a:	f000 80d1 	beq.w	800c610 <_printf_i+0x1c4>
 800c46e:	2f58      	cmp	r7, #88	@ 0x58
 800c470:	f000 80b8 	beq.w	800c5e4 <_printf_i+0x198>
 800c474:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c478:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c47c:	e03a      	b.n	800c4f4 <_printf_i+0xa8>
 800c47e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c482:	2b15      	cmp	r3, #21
 800c484:	d8f6      	bhi.n	800c474 <_printf_i+0x28>
 800c486:	a101      	add	r1, pc, #4	@ (adr r1, 800c48c <_printf_i+0x40>)
 800c488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c48c:	0800c4e5 	.word	0x0800c4e5
 800c490:	0800c4f9 	.word	0x0800c4f9
 800c494:	0800c475 	.word	0x0800c475
 800c498:	0800c475 	.word	0x0800c475
 800c49c:	0800c475 	.word	0x0800c475
 800c4a0:	0800c475 	.word	0x0800c475
 800c4a4:	0800c4f9 	.word	0x0800c4f9
 800c4a8:	0800c475 	.word	0x0800c475
 800c4ac:	0800c475 	.word	0x0800c475
 800c4b0:	0800c475 	.word	0x0800c475
 800c4b4:	0800c475 	.word	0x0800c475
 800c4b8:	0800c5f7 	.word	0x0800c5f7
 800c4bc:	0800c523 	.word	0x0800c523
 800c4c0:	0800c5b1 	.word	0x0800c5b1
 800c4c4:	0800c475 	.word	0x0800c475
 800c4c8:	0800c475 	.word	0x0800c475
 800c4cc:	0800c619 	.word	0x0800c619
 800c4d0:	0800c475 	.word	0x0800c475
 800c4d4:	0800c523 	.word	0x0800c523
 800c4d8:	0800c475 	.word	0x0800c475
 800c4dc:	0800c475 	.word	0x0800c475
 800c4e0:	0800c5b9 	.word	0x0800c5b9
 800c4e4:	6833      	ldr	r3, [r6, #0]
 800c4e6:	1d1a      	adds	r2, r3, #4
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	6032      	str	r2, [r6, #0]
 800c4ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c4f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	e09c      	b.n	800c632 <_printf_i+0x1e6>
 800c4f8:	6833      	ldr	r3, [r6, #0]
 800c4fa:	6820      	ldr	r0, [r4, #0]
 800c4fc:	1d19      	adds	r1, r3, #4
 800c4fe:	6031      	str	r1, [r6, #0]
 800c500:	0606      	lsls	r6, r0, #24
 800c502:	d501      	bpl.n	800c508 <_printf_i+0xbc>
 800c504:	681d      	ldr	r5, [r3, #0]
 800c506:	e003      	b.n	800c510 <_printf_i+0xc4>
 800c508:	0645      	lsls	r5, r0, #25
 800c50a:	d5fb      	bpl.n	800c504 <_printf_i+0xb8>
 800c50c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c510:	2d00      	cmp	r5, #0
 800c512:	da03      	bge.n	800c51c <_printf_i+0xd0>
 800c514:	232d      	movs	r3, #45	@ 0x2d
 800c516:	426d      	negs	r5, r5
 800c518:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c51c:	4858      	ldr	r0, [pc, #352]	@ (800c680 <_printf_i+0x234>)
 800c51e:	230a      	movs	r3, #10
 800c520:	e011      	b.n	800c546 <_printf_i+0xfa>
 800c522:	6821      	ldr	r1, [r4, #0]
 800c524:	6833      	ldr	r3, [r6, #0]
 800c526:	0608      	lsls	r0, r1, #24
 800c528:	f853 5b04 	ldr.w	r5, [r3], #4
 800c52c:	d402      	bmi.n	800c534 <_printf_i+0xe8>
 800c52e:	0649      	lsls	r1, r1, #25
 800c530:	bf48      	it	mi
 800c532:	b2ad      	uxthmi	r5, r5
 800c534:	2f6f      	cmp	r7, #111	@ 0x6f
 800c536:	4852      	ldr	r0, [pc, #328]	@ (800c680 <_printf_i+0x234>)
 800c538:	6033      	str	r3, [r6, #0]
 800c53a:	bf14      	ite	ne
 800c53c:	230a      	movne	r3, #10
 800c53e:	2308      	moveq	r3, #8
 800c540:	2100      	movs	r1, #0
 800c542:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c546:	6866      	ldr	r6, [r4, #4]
 800c548:	60a6      	str	r6, [r4, #8]
 800c54a:	2e00      	cmp	r6, #0
 800c54c:	db05      	blt.n	800c55a <_printf_i+0x10e>
 800c54e:	6821      	ldr	r1, [r4, #0]
 800c550:	432e      	orrs	r6, r5
 800c552:	f021 0104 	bic.w	r1, r1, #4
 800c556:	6021      	str	r1, [r4, #0]
 800c558:	d04b      	beq.n	800c5f2 <_printf_i+0x1a6>
 800c55a:	4616      	mov	r6, r2
 800c55c:	fbb5 f1f3 	udiv	r1, r5, r3
 800c560:	fb03 5711 	mls	r7, r3, r1, r5
 800c564:	5dc7      	ldrb	r7, [r0, r7]
 800c566:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c56a:	462f      	mov	r7, r5
 800c56c:	42bb      	cmp	r3, r7
 800c56e:	460d      	mov	r5, r1
 800c570:	d9f4      	bls.n	800c55c <_printf_i+0x110>
 800c572:	2b08      	cmp	r3, #8
 800c574:	d10b      	bne.n	800c58e <_printf_i+0x142>
 800c576:	6823      	ldr	r3, [r4, #0]
 800c578:	07df      	lsls	r7, r3, #31
 800c57a:	d508      	bpl.n	800c58e <_printf_i+0x142>
 800c57c:	6923      	ldr	r3, [r4, #16]
 800c57e:	6861      	ldr	r1, [r4, #4]
 800c580:	4299      	cmp	r1, r3
 800c582:	bfde      	ittt	le
 800c584:	2330      	movle	r3, #48	@ 0x30
 800c586:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c58a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c58e:	1b92      	subs	r2, r2, r6
 800c590:	6122      	str	r2, [r4, #16]
 800c592:	f8cd a000 	str.w	sl, [sp]
 800c596:	464b      	mov	r3, r9
 800c598:	aa03      	add	r2, sp, #12
 800c59a:	4621      	mov	r1, r4
 800c59c:	4640      	mov	r0, r8
 800c59e:	f7ff fee7 	bl	800c370 <_printf_common>
 800c5a2:	3001      	adds	r0, #1
 800c5a4:	d14a      	bne.n	800c63c <_printf_i+0x1f0>
 800c5a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5aa:	b004      	add	sp, #16
 800c5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5b0:	6823      	ldr	r3, [r4, #0]
 800c5b2:	f043 0320 	orr.w	r3, r3, #32
 800c5b6:	6023      	str	r3, [r4, #0]
 800c5b8:	4832      	ldr	r0, [pc, #200]	@ (800c684 <_printf_i+0x238>)
 800c5ba:	2778      	movs	r7, #120	@ 0x78
 800c5bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c5c0:	6823      	ldr	r3, [r4, #0]
 800c5c2:	6831      	ldr	r1, [r6, #0]
 800c5c4:	061f      	lsls	r7, r3, #24
 800c5c6:	f851 5b04 	ldr.w	r5, [r1], #4
 800c5ca:	d402      	bmi.n	800c5d2 <_printf_i+0x186>
 800c5cc:	065f      	lsls	r7, r3, #25
 800c5ce:	bf48      	it	mi
 800c5d0:	b2ad      	uxthmi	r5, r5
 800c5d2:	6031      	str	r1, [r6, #0]
 800c5d4:	07d9      	lsls	r1, r3, #31
 800c5d6:	bf44      	itt	mi
 800c5d8:	f043 0320 	orrmi.w	r3, r3, #32
 800c5dc:	6023      	strmi	r3, [r4, #0]
 800c5de:	b11d      	cbz	r5, 800c5e8 <_printf_i+0x19c>
 800c5e0:	2310      	movs	r3, #16
 800c5e2:	e7ad      	b.n	800c540 <_printf_i+0xf4>
 800c5e4:	4826      	ldr	r0, [pc, #152]	@ (800c680 <_printf_i+0x234>)
 800c5e6:	e7e9      	b.n	800c5bc <_printf_i+0x170>
 800c5e8:	6823      	ldr	r3, [r4, #0]
 800c5ea:	f023 0320 	bic.w	r3, r3, #32
 800c5ee:	6023      	str	r3, [r4, #0]
 800c5f0:	e7f6      	b.n	800c5e0 <_printf_i+0x194>
 800c5f2:	4616      	mov	r6, r2
 800c5f4:	e7bd      	b.n	800c572 <_printf_i+0x126>
 800c5f6:	6833      	ldr	r3, [r6, #0]
 800c5f8:	6825      	ldr	r5, [r4, #0]
 800c5fa:	6961      	ldr	r1, [r4, #20]
 800c5fc:	1d18      	adds	r0, r3, #4
 800c5fe:	6030      	str	r0, [r6, #0]
 800c600:	062e      	lsls	r6, r5, #24
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	d501      	bpl.n	800c60a <_printf_i+0x1be>
 800c606:	6019      	str	r1, [r3, #0]
 800c608:	e002      	b.n	800c610 <_printf_i+0x1c4>
 800c60a:	0668      	lsls	r0, r5, #25
 800c60c:	d5fb      	bpl.n	800c606 <_printf_i+0x1ba>
 800c60e:	8019      	strh	r1, [r3, #0]
 800c610:	2300      	movs	r3, #0
 800c612:	6123      	str	r3, [r4, #16]
 800c614:	4616      	mov	r6, r2
 800c616:	e7bc      	b.n	800c592 <_printf_i+0x146>
 800c618:	6833      	ldr	r3, [r6, #0]
 800c61a:	1d1a      	adds	r2, r3, #4
 800c61c:	6032      	str	r2, [r6, #0]
 800c61e:	681e      	ldr	r6, [r3, #0]
 800c620:	6862      	ldr	r2, [r4, #4]
 800c622:	2100      	movs	r1, #0
 800c624:	4630      	mov	r0, r6
 800c626:	f7f3 fe7b 	bl	8000320 <memchr>
 800c62a:	b108      	cbz	r0, 800c630 <_printf_i+0x1e4>
 800c62c:	1b80      	subs	r0, r0, r6
 800c62e:	6060      	str	r0, [r4, #4]
 800c630:	6863      	ldr	r3, [r4, #4]
 800c632:	6123      	str	r3, [r4, #16]
 800c634:	2300      	movs	r3, #0
 800c636:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c63a:	e7aa      	b.n	800c592 <_printf_i+0x146>
 800c63c:	6923      	ldr	r3, [r4, #16]
 800c63e:	4632      	mov	r2, r6
 800c640:	4649      	mov	r1, r9
 800c642:	4640      	mov	r0, r8
 800c644:	47d0      	blx	sl
 800c646:	3001      	adds	r0, #1
 800c648:	d0ad      	beq.n	800c5a6 <_printf_i+0x15a>
 800c64a:	6823      	ldr	r3, [r4, #0]
 800c64c:	079b      	lsls	r3, r3, #30
 800c64e:	d413      	bmi.n	800c678 <_printf_i+0x22c>
 800c650:	68e0      	ldr	r0, [r4, #12]
 800c652:	9b03      	ldr	r3, [sp, #12]
 800c654:	4298      	cmp	r0, r3
 800c656:	bfb8      	it	lt
 800c658:	4618      	movlt	r0, r3
 800c65a:	e7a6      	b.n	800c5aa <_printf_i+0x15e>
 800c65c:	2301      	movs	r3, #1
 800c65e:	4632      	mov	r2, r6
 800c660:	4649      	mov	r1, r9
 800c662:	4640      	mov	r0, r8
 800c664:	47d0      	blx	sl
 800c666:	3001      	adds	r0, #1
 800c668:	d09d      	beq.n	800c5a6 <_printf_i+0x15a>
 800c66a:	3501      	adds	r5, #1
 800c66c:	68e3      	ldr	r3, [r4, #12]
 800c66e:	9903      	ldr	r1, [sp, #12]
 800c670:	1a5b      	subs	r3, r3, r1
 800c672:	42ab      	cmp	r3, r5
 800c674:	dcf2      	bgt.n	800c65c <_printf_i+0x210>
 800c676:	e7eb      	b.n	800c650 <_printf_i+0x204>
 800c678:	2500      	movs	r5, #0
 800c67a:	f104 0619 	add.w	r6, r4, #25
 800c67e:	e7f5      	b.n	800c66c <_printf_i+0x220>
 800c680:	0800c989 	.word	0x0800c989
 800c684:	0800c99a 	.word	0x0800c99a

0800c688 <memmove>:
 800c688:	4288      	cmp	r0, r1
 800c68a:	b510      	push	{r4, lr}
 800c68c:	eb01 0402 	add.w	r4, r1, r2
 800c690:	d902      	bls.n	800c698 <memmove+0x10>
 800c692:	4284      	cmp	r4, r0
 800c694:	4623      	mov	r3, r4
 800c696:	d807      	bhi.n	800c6a8 <memmove+0x20>
 800c698:	1e43      	subs	r3, r0, #1
 800c69a:	42a1      	cmp	r1, r4
 800c69c:	d008      	beq.n	800c6b0 <memmove+0x28>
 800c69e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6a6:	e7f8      	b.n	800c69a <memmove+0x12>
 800c6a8:	4402      	add	r2, r0
 800c6aa:	4601      	mov	r1, r0
 800c6ac:	428a      	cmp	r2, r1
 800c6ae:	d100      	bne.n	800c6b2 <memmove+0x2a>
 800c6b0:	bd10      	pop	{r4, pc}
 800c6b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6ba:	e7f7      	b.n	800c6ac <memmove+0x24>

0800c6bc <_sbrk_r>:
 800c6bc:	b538      	push	{r3, r4, r5, lr}
 800c6be:	4d06      	ldr	r5, [pc, #24]	@ (800c6d8 <_sbrk_r+0x1c>)
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	4608      	mov	r0, r1
 800c6c6:	602b      	str	r3, [r5, #0]
 800c6c8:	f7f6 f8ce 	bl	8002868 <_sbrk>
 800c6cc:	1c43      	adds	r3, r0, #1
 800c6ce:	d102      	bne.n	800c6d6 <_sbrk_r+0x1a>
 800c6d0:	682b      	ldr	r3, [r5, #0]
 800c6d2:	b103      	cbz	r3, 800c6d6 <_sbrk_r+0x1a>
 800c6d4:	6023      	str	r3, [r4, #0]
 800c6d6:	bd38      	pop	{r3, r4, r5, pc}
 800c6d8:	24000e8c 	.word	0x24000e8c

0800c6dc <_realloc_r>:
 800c6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e0:	4607      	mov	r7, r0
 800c6e2:	4614      	mov	r4, r2
 800c6e4:	460d      	mov	r5, r1
 800c6e6:	b921      	cbnz	r1, 800c6f2 <_realloc_r+0x16>
 800c6e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ec:	4611      	mov	r1, r2
 800c6ee:	f7ff bc5b 	b.w	800bfa8 <_malloc_r>
 800c6f2:	b92a      	cbnz	r2, 800c700 <_realloc_r+0x24>
 800c6f4:	f7ff fbec 	bl	800bed0 <_free_r>
 800c6f8:	4625      	mov	r5, r4
 800c6fa:	4628      	mov	r0, r5
 800c6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c700:	f000 f81a 	bl	800c738 <_malloc_usable_size_r>
 800c704:	4284      	cmp	r4, r0
 800c706:	4606      	mov	r6, r0
 800c708:	d802      	bhi.n	800c710 <_realloc_r+0x34>
 800c70a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c70e:	d8f4      	bhi.n	800c6fa <_realloc_r+0x1e>
 800c710:	4621      	mov	r1, r4
 800c712:	4638      	mov	r0, r7
 800c714:	f7ff fc48 	bl	800bfa8 <_malloc_r>
 800c718:	4680      	mov	r8, r0
 800c71a:	b908      	cbnz	r0, 800c720 <_realloc_r+0x44>
 800c71c:	4645      	mov	r5, r8
 800c71e:	e7ec      	b.n	800c6fa <_realloc_r+0x1e>
 800c720:	42b4      	cmp	r4, r6
 800c722:	4622      	mov	r2, r4
 800c724:	4629      	mov	r1, r5
 800c726:	bf28      	it	cs
 800c728:	4632      	movcs	r2, r6
 800c72a:	f7ff fbc3 	bl	800beb4 <memcpy>
 800c72e:	4629      	mov	r1, r5
 800c730:	4638      	mov	r0, r7
 800c732:	f7ff fbcd 	bl	800bed0 <_free_r>
 800c736:	e7f1      	b.n	800c71c <_realloc_r+0x40>

0800c738 <_malloc_usable_size_r>:
 800c738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c73c:	1f18      	subs	r0, r3, #4
 800c73e:	2b00      	cmp	r3, #0
 800c740:	bfbc      	itt	lt
 800c742:	580b      	ldrlt	r3, [r1, r0]
 800c744:	18c0      	addlt	r0, r0, r3
 800c746:	4770      	bx	lr

0800c748 <_init>:
 800c748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74a:	bf00      	nop
 800c74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c74e:	bc08      	pop	{r3}
 800c750:	469e      	mov	lr, r3
 800c752:	4770      	bx	lr

0800c754 <_fini>:
 800c754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c756:	bf00      	nop
 800c758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c75a:	bc08      	pop	{r3}
 800c75c:	469e      	mov	lr, r3
 800c75e:	4770      	bx	lr
