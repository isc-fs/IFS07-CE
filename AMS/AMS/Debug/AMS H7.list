
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b664  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800b934  0800b934  0000c934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bd0c  0800bd0c  0000cd0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800bd14  0800bd14  0000cd14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bd1c  0800bd1c  0000cd1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  24000000  0800bd20  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000de0  24000068  0800bd88  0000d068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000e48  0800bd88  0000de48  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 10 .debug_info   000218e5  00000000  00000000  0000d096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003580  00000000  00000000  0002e97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001388  00000000  00000000  00031f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f21  00000000  00000000  00033288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a2a3  00000000  00000000  000341a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a85a  00000000  00000000  0006e44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169d27  00000000  00000000  00088ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f29cd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005950  00000000  00000000  001f2a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  001f8360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000068 	.word	0x24000068
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b91c 	.word	0x0800b91c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400006c 	.word	0x2400006c
 800030c:	0800b91c 	.word	0x0800b91c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <_ZN7BMS_MODC1Emiiihjii>:
/*********************************************************************************************************
 ** Function name:           BMS_MOD
 ** Descriptions:            Initialization function of teh class
 *********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT,
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
		uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG_V, int _LAG_T) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800072c:	61da      	str	r2, [r3, #28]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2232      	movs	r2, #50	@ 0x32
 8000732:	621a      	str	r2, [r3, #32]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800073a:	625a      	str	r2, [r3, #36]	@ 0x24
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800074a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000752:	631a      	str	r2, [r3, #48]	@ 0x30
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	69da      	ldr	r2, [r3, #28]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2200      	movs	r2, #0
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	63da      	str	r2, [r3, #60]	@ 0x3c
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	641a      	str	r2, [r3, #64]	@ 0x40
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2200      	movs	r2, #0
 8000776:	645a      	str	r2, [r3, #68]	@ 0x44
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	649a      	str	r2, [r3, #72]	@ 0x48
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2200      	movs	r2, #0
 8000784:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2200      	movs	r2, #0
 800078c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2200      	movs	r2, #0
 8000794:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2200      	movs	r2, #0
 800079c:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2213      	movs	r2, #19
 80007a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	2203      	movs	r2, #3
 80007ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3358      	adds	r3, #88	@ 0x58
 80007b2:	2230      	movs	r2, #48	@ 0x30
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00a fc32 	bl	800b020 <memset>
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2200      	movs	r2, #0
 80007c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2200      	movs	r2, #0
 80007c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2200      	movs	r2, #0
 80007d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f241 0268 	movw	r2, #4200	@ 0x1068
 80007da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2200      	movs	r2, #0
 80007e2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2200      	movs	r2, #0
 80007ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2200      	movs	r2, #0
 80007f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	33a4      	adds	r3, #164	@ 0xa4
 80007fa:	224c      	movs	r2, #76	@ 0x4c
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00a fc0e 	bl	800b020 <memset>
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	33f0      	adds	r3, #240	@ 0xf0
 8000808:	2298      	movs	r2, #152	@ 0x98
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f00a fc07 	bl	800b020 <memset>
	CANID = _ID;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	601a      	str	r2, [r3, #0]
	LIMIT_MAX_V = _MAXV;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	60da      	str	r2, [r3, #12]
	LIMIT_MIN_V = _MINV;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	611a      	str	r2, [r3, #16]
	LIMIT_MAX_T = _MAXT;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	615a      	str	r2, [r3, #20]
	NUM_CELLS = _NUMCELLS;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	7f3a      	ldrb	r2, [r7, #28]
 800082e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	time_lim_plotted_volts += _LAG_V;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000838:	441a      	add	r2, r3
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	635a      	str	r2, [r3, #52]	@ 0x34
	time_lim_plotted_temps += _LAG_T;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000844:	441a      	add	r2, r3
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	641a      	str	r2, [r3, #64]	@ 0x40

	time_lim_sent_volts += _LAG_V;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800084e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000850:	441a      	add	r2, r3
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	639a      	str	r2, [r3, #56]	@ 0x38
	time_lim_sent_temps += _LAG_T;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800085a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800085c:	441a      	add	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	645a      	str	r2, [r3, #68]	@ 0x44

	time_lim_received_volts += _LAG_V;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000868:	441a      	add	r2, r3
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	63da      	str	r2, [r3, #60]	@ 0x3c
	time_lim_received_temps += _LAG_T;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000874:	441a      	add	r2, r3
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	649a      	str	r2, [r3, #72]	@ 0x48

}
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	4618      	mov	r0, r3
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <_ZN7BMS_MOD12voltage_infoEPc>:

/*********************************************************************************************************
 ** Function name:           info
 ** Descriptions:            Function for printing the class data
 *********************************************************************************************************/
void BMS_MOD::voltage_info(char *buffer) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]

	if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 800088e:	f001 fa73 	bl	8001d78 <getUARTState>
 8000892:	4603      	mov	r3, r0
 8000894:	2b20      	cmp	r3, #32
 8000896:	bf0c      	ite	eq
 8000898:	2301      	moveq	r3, #1
 800089a:	2300      	movne	r3, #0
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	f000 8084 	beq.w	80009ac <_ZN7BMS_MOD12voltage_infoEPc+0x128>
		print((char*) "\n***********************");
 80008a4:	4851      	ldr	r0, [pc, #324]	@ (80009ec <_ZN7BMS_MOD12voltage_infoEPc+0x168>)
 80008a6:	f001 fa2b 	bl	8001d00 <print>
		print((char*) "         BMS");
 80008aa:	4851      	ldr	r0, [pc, #324]	@ (80009f0 <_ZN7BMS_MOD12voltage_infoEPc+0x16c>)
 80008ac:	f001 fa28 	bl	8001d00 <print>
		print((char*) "***********************");
 80008b0:	4850      	ldr	r0, [pc, #320]	@ (80009f4 <_ZN7BMS_MOD12voltage_infoEPc+0x170>)
 80008b2:	f001 fa25 	bl	8001d00 <print>
		sprintf(buffer, " - ERROR:     %i", error_volt);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	461a      	mov	r2, r3
 80008bc:	494e      	ldr	r1, [pc, #312]	@ (80009f8 <_ZN7BMS_MOD12voltage_infoEPc+0x174>)
 80008be:	6838      	ldr	r0, [r7, #0]
 80008c0:	f00a fb8c 	bl	800afdc <siprintf>
		print(buffer);
 80008c4:	6838      	ldr	r0, [r7, #0]
 80008c6:	f001 fa1b 	bl	8001d00 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	494a      	ldr	r1, [pc, #296]	@ (80009fc <_ZN7BMS_MOD12voltage_infoEPc+0x178>)
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f00a fb82 	bl	800afdc <siprintf>
		print(buffer);
 80008d8:	6838      	ldr	r0, [r7, #0]
 80008da:	f001 fa11 	bl	8001d00 <print>
		sprintf(buffer, " - MAX V =    %i mV", MAX_V);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	461a      	mov	r2, r3
 80008e4:	4946      	ldr	r1, [pc, #280]	@ (8000a00 <_ZN7BMS_MOD12voltage_infoEPc+0x17c>)
 80008e6:	6838      	ldr	r0, [r7, #0]
 80008e8:	f00a fb78 	bl	800afdc <siprintf>
		print(buffer);
 80008ec:	6838      	ldr	r0, [r7, #0]
 80008ee:	f001 fa07 	bl	8001d00 <print>
		sprintf(buffer, " - MIN V =    %i mV", MIN_V);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80008f8:	461a      	mov	r2, r3
 80008fa:	4942      	ldr	r1, [pc, #264]	@ (8000a04 <_ZN7BMS_MOD12voltage_infoEPc+0x180>)
 80008fc:	6838      	ldr	r0, [r7, #0]
 80008fe:	f00a fb6d 	bl	800afdc <siprintf>
		print(buffer);
 8000902:	6838      	ldr	r0, [r7, #0]
 8000904:	f001 f9fc 	bl	8001d00 <print>
		print((char*) "-----------------------");
 8000908:	483f      	ldr	r0, [pc, #252]	@ (8000a08 <_ZN7BMS_MOD12voltage_infoEPc+0x184>)
 800090a:	f001 f9f9 	bl	8001d00 <print>
		sprintf(buffer, "VOLTS (mV): [%i", cellVoltagemV[0]);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000914:	461a      	mov	r2, r3
 8000916:	493d      	ldr	r1, [pc, #244]	@ (8000a0c <_ZN7BMS_MOD12voltage_infoEPc+0x188>)
 8000918:	6838      	ldr	r0, [r7, #0]
 800091a:	f00a fb5f 	bl	800afdc <siprintf>
		printnl(buffer);
 800091e:	6838      	ldr	r0, [r7, #0]
 8000920:	f001 fa0c 	bl	8001d3c <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	e010      	b.n	800094c <_ZN7BMS_MOD12voltage_infoEPc+0xc8>
			sprintf(buffer, ", %i", cellVoltagemV[i]);
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3328      	adds	r3, #40	@ 0x28
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4413      	add	r3, r2
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	461a      	mov	r2, r3
 8000938:	4935      	ldr	r1, [pc, #212]	@ (8000a10 <_ZN7BMS_MOD12voltage_infoEPc+0x18c>)
 800093a:	6838      	ldr	r0, [r7, #0]
 800093c:	f00a fb4e 	bl	800afdc <siprintf>
			printnl(buffer);
 8000940:	6838      	ldr	r0, [r7, #0]
 8000942:	f001 f9fb 	bl	8001d3c <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	3301      	adds	r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000952:	461a      	mov	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4293      	cmp	r3, r2
 8000958:	dbe7      	blt.n	800092a <_ZN7BMS_MOD12voltage_infoEPc+0xa6>
		}

		for (int i = 0; i < NUM_CELLS; i++) {
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	e00f      	b.n	8000980 <_ZN7BMS_MOD12voltage_infoEPc+0xfc>
			voltage_acum += cellVoltagemV[i];
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	3328      	adds	r3, #40	@ 0x28
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	440b      	add	r3, r1
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	441a      	add	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		for (int i = 0; i < NUM_CELLS; i++) {
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	3301      	adds	r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000986:	461a      	mov	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4293      	cmp	r3, r2
 800098c:	dbe8      	blt.n	8000960 <_ZN7BMS_MOD12voltage_infoEPc+0xdc>
		}

		print((char*) "]");
 800098e:	4821      	ldr	r0, [pc, #132]	@ (8000a14 <_ZN7BMS_MOD12voltage_infoEPc+0x190>)
 8000990:	f001 f9b6 	bl	8001d00 <print>
		sprintf(buffer, " - V(max) = %i mV || V(min) = %i", MAX_V, MIN_V);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	699a      	ldr	r2, [r3, #24]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800099e:	491e      	ldr	r1, [pc, #120]	@ (8000a18 <_ZN7BMS_MOD12voltage_infoEPc+0x194>)
 80009a0:	6838      	ldr	r0, [r7, #0]
 80009a2:	f00a fb1b 	bl	800afdc <siprintf>
		print(buffer);
 80009a6:	6838      	ldr	r0, [r7, #0]
 80009a8:	f001 f9aa 	bl	8001d00 <print>
	}
	sprintf(buffer, "- BALANCING V = %i mV", BALANCING_V);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80009b2:	461a      	mov	r2, r3
 80009b4:	4919      	ldr	r1, [pc, #100]	@ (8000a1c <_ZN7BMS_MOD12voltage_infoEPc+0x198>)
 80009b6:	6838      	ldr	r0, [r7, #0]
 80009b8:	f00a fb10 	bl	800afdc <siprintf>
	print(buffer);
 80009bc:	6838      	ldr	r0, [r7, #0]
 80009be:	f001 f99f 	bl	8001d00 <print>

	sprintf(buffer, "- STACK VOLTAGE = %i V", voltage_acum / 1000);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009c8:	4a15      	ldr	r2, [pc, #84]	@ (8000a20 <_ZN7BMS_MOD12voltage_infoEPc+0x19c>)
 80009ca:	fb82 1203 	smull	r1, r2, r2, r3
 80009ce:	1192      	asrs	r2, r2, #6
 80009d0:	17db      	asrs	r3, r3, #31
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	461a      	mov	r2, r3
 80009d6:	4913      	ldr	r1, [pc, #76]	@ (8000a24 <_ZN7BMS_MOD12voltage_infoEPc+0x1a0>)
 80009d8:	6838      	ldr	r0, [r7, #0]
 80009da:	f00a faff 	bl	800afdc <siprintf>
	print(buffer);
 80009de:	6838      	ldr	r0, [r7, #0]
 80009e0:	f001 f98e 	bl	8001d00 <print>
}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	0800b934 	.word	0x0800b934
 80009f0:	0800b950 	.word	0x0800b950
 80009f4:	0800b960 	.word	0x0800b960
 80009f8:	0800b978 	.word	0x0800b978
 80009fc:	0800b98c 	.word	0x0800b98c
 8000a00:	0800b9a0 	.word	0x0800b9a0
 8000a04:	0800b9b4 	.word	0x0800b9b4
 8000a08:	0800b9c8 	.word	0x0800b9c8
 8000a0c:	0800b9e0 	.word	0x0800b9e0
 8000a10:	0800b9f0 	.word	0x0800b9f0
 8000a14:	0800b9f8 	.word	0x0800b9f8
 8000a18:	0800b9fc 	.word	0x0800b9fc
 8000a1c:	0800ba20 	.word	0x0800ba20
 8000a20:	10624dd3 	.word	0x10624dd3
 8000a24:	0800ba38 	.word	0x0800ba38

08000a28 <_ZN7BMS_MOD5parseEmPhm>:

/*********************************************************************************************************
 ** Function name:           parse
 ** Descriptions:            Function for parsing the received data via CAN protocol
 *********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	@ 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
 8000a34:	603b      	str	r3, [r7, #0]
	if (id > CANID && id < CANID + 30) {
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	f240 813a 	bls.w	8000cb6 <_ZN7BMS_MOD5parseEmPhm+0x28e>
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	331e      	adds	r3, #30
 8000a48:	68ba      	ldr	r2, [r7, #8]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	f080 8133 	bcs.w	8000cb6 <_ZN7BMS_MOD5parseEmPhm+0x28e>
		int m = id % CANID;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a5a:	fb01 f202 	mul.w	r2, r1, r2
 8000a5e:	1a9b      	subs	r3, r3, r2
 8000a60:	617b      	str	r3, [r7, #20]
		int pos = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
		if (m >= 1 && m <= 5) {
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	f340 80a8 	ble.w	8000bbe <_ZN7BMS_MOD5parseEmPhm+0x196>
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	2b05      	cmp	r3, #5
 8000a72:	f300 80a4 	bgt.w	8000bbe <_ZN7BMS_MOD5parseEmPhm+0x196>
			time_lim_received_volts = t + TIME_LIM_RECV_VOLTS;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	441a      	add	r2, r3
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	63da      	str	r2, [r3, #60]	@ 0x3c


			for (int i = 0; i < 4; i++) {
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a86:	e058      	b.n	8000b3a <_ZN7BMS_MOD5parseEmPhm+0x112>
				pos = (m - 1) * 4 + i;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a90:	4413      	add	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
				if (pos >= 19)
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	2b12      	cmp	r3, #18
 8000a98:	dc53      	bgt.n	8000b42 <_ZN7BMS_MOD5parseEmPhm+0x11a>
					break;

				cellVoltagemV[pos] = (buf[2 * i] << 8) | buf[2 * i + 1];
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	021b      	lsls	r3, r3, #8
 8000aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aaa:	0052      	lsls	r2, r2, #1
 8000aac:	3201      	adds	r2, #1
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	440a      	add	r2, r1
 8000ab2:	7812      	ldrb	r2, [r2, #0]
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	68f9      	ldr	r1, [r7, #12]
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	3328      	adds	r3, #40	@ 0x28
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	440b      	add	r3, r1
 8000ac0:	605a      	str	r2, [r3, #4]

				if ((cellVoltagemV[pos] > LIMIT_MAX_V
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	3328      	adds	r3, #40	@ 0x28
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	4413      	add	r3, r2
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	dc09      	bgt.n	8000aea <_ZN7BMS_MOD5parseEmPhm+0xc2>
						|| cellVoltagemV[pos] < LIMIT_MIN_V)
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	3328      	adds	r3, #40	@ 0x28
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	691b      	ldr	r3, [r3, #16]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	da1e      	bge.n	8000b28 <_ZN7BMS_MOD5parseEmPhm+0x100>
						&& pos < NUM_CELLS) {
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000af0:	461a      	mov	r2, r3
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	4293      	cmp	r3, r2
 8000af6:	da17      	bge.n	8000b28 <_ZN7BMS_MOD5parseEmPhm+0x100>
					flag_error_volt[pos]++;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	3216      	adds	r2, #22
 8000afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b02:	1c59      	adds	r1, r3, #1
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	3216      	adds	r2, #22
 8000b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					if (flag_error_volt[pos] >= max_flag)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	3216      	adds	r2, #22
 8000b14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	db09      	blt.n	8000b34 <_ZN7BMS_MOD5parseEmPhm+0x10c>
						error_volt = BMS_ERROR_VOLTS;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2202      	movs	r2, #2
 8000b24:	605a      	str	r2, [r3, #4]
					if (flag_error_volt[pos] >= max_flag)
 8000b26:	e005      	b.n	8000b34 <_ZN7BMS_MOD5parseEmPhm+0x10c>
				} else {
					flag_error_volt[pos] = 0;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	3216      	adds	r2, #22
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int i = 0; i < 4; i++) {
 8000b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b36:	3301      	adds	r3, #1
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3c:	2b03      	cmp	r3, #3
 8000b3e:	dda3      	ble.n	8000a88 <_ZN7BMS_MOD5parseEmPhm+0x60>
 8000b40:	e000      	b.n	8000b44 <_ZN7BMS_MOD5parseEmPhm+0x11c>
					break;
 8000b42:	bf00      	nop
				}
			}

			MAX_V = cellVoltagemV[0];
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	619a      	str	r2, [r3, #24]
			MIN_V = cellVoltagemV[0];
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			for (int i = 1; i < 19; i++) {
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	623b      	str	r3, [r7, #32]
 8000b5e:	e029      	b.n	8000bb4 <_ZN7BMS_MOD5parseEmPhm+0x18c>
				if (cellVoltagemV[i] > MAX_V)
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	3328      	adds	r3, #40	@ 0x28
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4413      	add	r3, r2
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	dd08      	ble.n	8000b86 <_ZN7BMS_MOD5parseEmPhm+0x15e>
					MAX_V = cellVoltagemV[i];
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	6a3b      	ldr	r3, [r7, #32]
 8000b78:	3328      	adds	r3, #40	@ 0x28
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	4413      	add	r3, r2
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	619a      	str	r2, [r3, #24]
 8000b84:	e013      	b.n	8000bae <_ZN7BMS_MOD5parseEmPhm+0x186>
				else if (cellVoltagemV[i] < MIN_V)
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	6a3b      	ldr	r3, [r7, #32]
 8000b8a:	3328      	adds	r3, #40	@ 0x28
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	4413      	add	r3, r2
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	da08      	bge.n	8000bae <_ZN7BMS_MOD5parseEmPhm+0x186>
					MIN_V = cellVoltagemV[i];
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	6a3b      	ldr	r3, [r7, #32]
 8000ba0:	3328      	adds	r3, #40	@ 0x28
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	685a      	ldr	r2, [r3, #4]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			for (int i = 1; i < 19; i++) {
 8000bae:	6a3b      	ldr	r3, [r7, #32]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	623b      	str	r3, [r7, #32]
 8000bb4:	6a3b      	ldr	r3, [r7, #32]
 8000bb6:	2b12      	cmp	r3, #18
 8000bb8:	ddd2      	ble.n	8000b60 <_ZN7BMS_MOD5parseEmPhm+0x138>
			}

			return true;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e07c      	b.n	8000cb8 <_ZN7BMS_MOD5parseEmPhm+0x290>

		} else if (m >= 21 && m <= 25) {
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	2b14      	cmp	r3, #20
 8000bc2:	dd78      	ble.n	8000cb6 <_ZN7BMS_MOD5parseEmPhm+0x28e>
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	2b19      	cmp	r3, #25
 8000bc8:	dc75      	bgt.n	8000cb6 <_ZN7BMS_MOD5parseEmPhm+0x28e>
			// m = 21 → packet 0, m = 25 → packet 4
			time_lim_received_temps = t + TIME_LIM_RECV_TEMPS;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	441a      	add	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	649a      	str	r2, [r3, #72]	@ 0x48
			if (flag_charger == 1)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d104      	bne.n	8000bea <_ZN7BMS_MOD5parseEmPhm+0x1c2>
				module_send_message_CAN1(id, buf, 8);
 8000be0:	2208      	movs	r2, #8
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	68b8      	ldr	r0, [r7, #8]
 8000be6:	f001 f829 	bl	8001c3c <module_send_message_CAN1>

			for (int i = 0; i < 8; i++) {
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
 8000bee:	e021      	b.n	8000c34 <_ZN7BMS_MOD5parseEmPhm+0x20c>
				pos = (m - 21) * 8 + i;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	3b15      	subs	r3, #21
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	69fa      	ldr	r2, [r7, #28]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
				if (pos >= 38)
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	2b25      	cmp	r3, #37	@ 0x25
 8000c00:	dc1c      	bgt.n	8000c3c <_ZN7BMS_MOD5parseEmPhm+0x214>
					break;

				cellTemperature[pos] = buf[i];
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	4413      	add	r3, r2
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	323c      	adds	r2, #60	@ 0x3c
 8000c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				if (cellTemperature[pos] > LIMIT_MAX_T)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	323c      	adds	r2, #60	@ 0x3c
 8000c1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dd02      	ble.n	8000c2e <_ZN7BMS_MOD5parseEmPhm+0x206>
					error_temp = BMS_ERROR_TEMP;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	609a      	str	r2, [r3, #8]
			for (int i = 0; i < 8; i++) {
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3301      	adds	r3, #1
 8000c32:	61fb      	str	r3, [r7, #28]
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	2b07      	cmp	r3, #7
 8000c38:	ddda      	ble.n	8000bf0 <_ZN7BMS_MOD5parseEmPhm+0x1c8>
 8000c3a:	e000      	b.n	8000c3e <_ZN7BMS_MOD5parseEmPhm+0x216>
					break;
 8000c3c:	bf00      	nop
			}

		      MAX_T = cellTemperature[0];
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		      MIN_T = cellTemperature[0];
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		      for (int i = 0; i < 38; i++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	e027      	b.n	8000cac <_ZN7BMS_MOD5parseEmPhm+0x284>
		      {
		        if (cellTemperature[i] > MAX_T)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	323c      	adds	r2, #60	@ 0x3c
 8000c62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	dd08      	ble.n	8000c82 <_ZN7BMS_MOD5parseEmPhm+0x25a>
		          MAX_T = cellTemperature[i];
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	323c      	adds	r2, #60	@ 0x3c
 8000c76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8000c80:	e011      	b.n	8000ca6 <_ZN7BMS_MOD5parseEmPhm+0x27e>
		        else if (cellTemperature[i] < MIN_T)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	323c      	adds	r2, #60	@ 0x3c
 8000c88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c92:	429a      	cmp	r2, r3
 8000c94:	da07      	bge.n	8000ca6 <_ZN7BMS_MOD5parseEmPhm+0x27e>
		          MIN_T = cellTemperature[i];
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	323c      	adds	r2, #60	@ 0x3c
 8000c9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		      for (int i = 0; i < 38; i++)
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	61bb      	str	r3, [r7, #24]
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	2b25      	cmp	r3, #37	@ 0x25
 8000cb0:	ddd4      	ble.n	8000c5c <_ZN7BMS_MOD5parseEmPhm+0x234>
		      }


			return true;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e000      	b.n	8000cb8 <_ZN7BMS_MOD5parseEmPhm+0x290>
		}

	}

	return false;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3728      	adds	r7, #40	@ 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <_ZN7BMS_MOD13query_voltageEmPc>:

/*********************************************************************************************************
 ** Function name:           query_voltage
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/
int BMS_MOD::query_voltage(uint32_t time, char *buffer) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
	// Shunt voltage in milivolts

	message_balancing[1] = BALANCING_V & 0xFF; // Coment this two lines for disabling the balancing
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	message_balancing[0] = (BALANCING_V >> 8) & 0xFF; // Coment this two lines for disabling the balancing
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ce0:	121b      	asrs	r3, r3, #8
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

	if (time > time_lim_sent_volts) {
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d91d      	bls.n	8000d30 <_ZN7BMS_MOD13query_voltageEmPc+0x70>
		time_lim_sent_volts += TIME_LIM_SEND_VOLTS;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	6a1b      	ldr	r3, [r3, #32]
 8000cfc:	441a      	add	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	639a      	str	r2, [r3, #56]	@ 0x38
		if (CANID != 0x00) { //It keeps sending 0x00 and dont know where
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d012      	beq.n	8000d30 <_ZN7BMS_MOD13query_voltageEmPc+0x70>
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	6818      	ldr	r0, [r3, #0]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	334c      	adds	r3, #76	@ 0x4c
 8000d12:	2202      	movs	r2, #2
 8000d14:	4619      	mov	r1, r3
 8000d16:	f000 ffd3 	bl	8001cc0 <module_send_message_CAN2>
 8000d1a:	4603      	mov	r3, r0
					!= HAL_OK) {
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	bf14      	ite	ne
 8000d20:	2301      	movne	r3, #1
 8000d22:	2300      	moveq	r3, #0
 8000d24:	b2db      	uxtb	r3, r3
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d002      	beq.n	8000d30 <_ZN7BMS_MOD13query_voltageEmPc+0x70>
				error_volt = BMS_ERROR_COMMUNICATION;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	605a      	str	r2, [r3, #4]
		}

	}


	if (time_lim_sent_volts > 0 &&
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d00f      	beq.n	8000d58 <_ZN7BMS_MOD13query_voltageEmPc+0x98>
	    time > time_lim_received_volts &&
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
	if (time_lim_sent_volts > 0 &&
 8000d3c:	68ba      	ldr	r2, [r7, #8]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d90a      	bls.n	8000d58 <_ZN7BMS_MOD13query_voltageEmPc+0x98>
	    time - time_lim_received_volts > TIME_LIM_RECV_VOLTS) {
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	    time > time_lim_received_volts &&
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d902      	bls.n	8000d58 <_ZN7BMS_MOD13query_voltageEmPc+0x98>
	    error_volt = BMS_ERROR_COMMUNICATION;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2201      	movs	r2, #1
 8000d56:	605a      	str	r2, [r3, #4]
	}

	if (TIME_LIM_PLOT_VOLTS > 0 && time > time_lim_plotted_volts) {
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	69db      	ldr	r3, [r3, #28]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d00f      	beq.n	8000d80 <_ZN7BMS_MOD13query_voltageEmPc+0xc0>
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d90a      	bls.n	8000d80 <_ZN7BMS_MOD13query_voltageEmPc+0xc0>
		time_lim_plotted_volts += TIME_LIM_PLOT_VOLTS;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	441a      	add	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	635a      	str	r2, [r3, #52]	@ 0x34
		voltage_info(buffer);
 8000d78:	6879      	ldr	r1, [r7, #4]
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f7ff fd82 	bl	8000884 <_ZN7BMS_MOD12voltage_infoEPc>
	}

	for (int i = 0; i < NUM_CELLS; i++) {
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e00f      	b.n	8000da6 <_ZN7BMS_MOD13query_voltageEmPc+0xe6>
		voltage_acum += cellVoltagemV[i];
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000d8c:	68f9      	ldr	r1, [r7, #12]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3328      	adds	r3, #40	@ 0x28
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	440b      	add	r3, r1
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	441a      	add	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	for (int i = 0; i < NUM_CELLS; i++) {
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	3301      	adds	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000dac:	461a      	mov	r2, r3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	4293      	cmp	r3, r2
 8000db2:	dbe8      	blt.n	8000d86 <_ZN7BMS_MOD13query_voltageEmPc+0xc6>
	}
	return error_volt;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	685b      	ldr	r3, [r3, #4]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_ZN7BMS_MOD17query_temperatureEmPc>:
/*********************************************************************************************************
 ** Function name:           query_temperature
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/

int BMS_MOD::query_temperature(uint32_t time, char *buffer) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
// Function for performing a correct behavior
	if (time > time_lim_sent_temps) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE TEMPERATURES
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd0:	68ba      	ldr	r2, [r7, #8]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d91b      	bls.n	8000e0e <_ZN7BMS_MOD17query_temperatureEmPc+0x4e>
		time_lim_sent_temps += TIME_LIM_SEND_TEMPS;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dde:	441a      	add	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	645a      	str	r2, [r3, #68]	@ 0x44

		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f103 0014 	add.w	r0, r3, #20
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	334e      	adds	r3, #78	@ 0x4e
 8000df0:	2202      	movs	r2, #2
 8000df2:	4619      	mov	r1, r3
 8000df4:	f000 ff64 	bl	8001cc0 <module_send_message_CAN2>
 8000df8:	4603      	mov	r3, r0
				!= HAL_OK) {
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	bf14      	ite	ne
 8000dfe:	2301      	movne	r3, #1
 8000e00:	2300      	moveq	r3, #0
 8000e02:	b2db      	uxtb	r3, r3
		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <_ZN7BMS_MOD17query_temperatureEmPc+0x4e>
			error_temp = BMS_ERROR_TEMP; // If the message is not sended then, error
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	609a      	str	r2, [r3, #8]
		}
	}

	if (time_lim_sent_temps > 0 &&
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00f      	beq.n	8000e36 <_ZN7BMS_MOD17query_temperatureEmPc+0x76>
	    time > time_lim_received_temps &&
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
	if (time_lim_sent_temps > 0 &&
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d90a      	bls.n	8000e36 <_ZN7BMS_MOD17query_temperatureEmPc+0x76>
	    time - time_lim_received_temps > TIME_LIM_RECV_TEMPS) {
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	1ad2      	subs	r2, r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
	    time > time_lim_received_temps &&
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d902      	bls.n	8000e36 <_ZN7BMS_MOD17query_temperatureEmPc+0x76>
	    error_temp = BMS_ERROR_COMMUNICATION;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2201      	movs	r2, #1
 8000e34:	609a      	str	r2, [r3, #8]
	}

	if (TIME_LIM_PLOT_TEMPS > 0 && time > time_lim_plotted_temps) {
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d00b      	beq.n	8000e56 <_ZN7BMS_MOD17query_temperatureEmPc+0x96>
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d906      	bls.n	8000e56 <_ZN7BMS_MOD17query_temperatureEmPc+0x96>
		time_lim_plotted_temps += TIME_LIM_PLOT_TEMPS;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e50:	441a      	add	r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	641a      	str	r2, [r3, #64]	@ 0x40
		//temperature_info(buffer);
	}



	return error_temp;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	689b      	ldr	r3, [r3, #8]

}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2201      	movs	r2, #1
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2202      	movs	r2, #2
 8000e88:	731a      	strb	r2, [r3, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	611a      	str	r2, [r3, #16]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e96:	615a      	str	r2, [r3, #20]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2264      	movs	r2, #100	@ 0x64
 8000e9c:	619a      	str	r2, [r3, #24]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4a18      	ldr	r2, [pc, #96]	@ (8000f04 <_ZN7CPU_MODC1Emmi+0xa0>)
 8000ea2:	61da      	str	r2, [r3, #28]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	695a      	ldr	r2, [r3, #20]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	621a      	str	r2, [r3, #32]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	@ 0x24
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	69da      	ldr	r2, [r3, #28]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	68ba      	ldr	r2, [r7, #8]
 8000eca:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	6a1a      	ldr	r2, [r3, #32]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	441a      	add	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	441a      	add	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	441a      	add	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	000f4240 	.word	0x000f4240

08000f08 <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f1c:	d131      	bne.n	8000f82 <_ZN7CPU_MOD5parseEmPhm+0x7a>
        error = CPU_OK;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	69da      	ldr	r2, [r3, #28]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	441a      	add	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3301      	adds	r3, #1
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	7812      	ldrb	r2, [r2, #0]
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8000f4a:	dd18      	ble.n	8000f7e <_ZN7CPU_MOD5parseEmPhm+0x76>
            error = CPU_BUS_LINE_OK;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2202      	movs	r2, #2
 8000f50:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	330c      	adds	r3, #12
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f000 fe6d 	bl	8001c3c <module_send_message_CAN1>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	bf14      	ite	ne
 8000f68:	2301      	movne	r3, #1
 8000f6a:	2300      	moveq	r3, #0
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d005      	beq.n	8000f7e <_ZN7CPU_MOD5parseEmPhm+0x76>
                error = CPU_ERROR_COMMUNICATION;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2201      	movs	r2, #1
 8000f76:	609a      	str	r2, [r3, #8]
                print((char*)"error message");
 8000f78:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <_ZN7CPU_MOD5parseEmPhm+0x84>)
 8000f7a:	f000 fec1 	bl	8001d00 <print>
            }

        }
        return true;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <_ZN7CPU_MOD5parseEmPhm+0x7c>
    }
    return false;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	0800bbac 	.word	0x0800bbac

08000f90 <_ZN7CPU_MOD11updateStateEi>:
        info(buffer);
    }
    return error;
}

void CPU_MOD::updateState(int s) {
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	731a      	strb	r2, [r3, #12]
    current_state = s;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	611a      	str	r2, [r3, #16]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX)
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	721a      	strb	r2, [r3, #8]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	725a      	strb	r2, [r3, #9]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000ffc:	621a      	str	r2, [r3, #32]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	22fa      	movs	r2, #250	@ 0xfa
 8001002:	625a      	str	r2, [r3, #36]	@ 0x24
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2232      	movs	r2, #50	@ 0x32
 8001008:	629a      	str	r2, [r3, #40]	@ 0x28
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2232      	movs	r2, #50	@ 0x32
 800100e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2200      	movs	r2, #0
 8001014:	631a      	str	r2, [r3, #48]	@ 0x30
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	635a      	str	r2, [r3, #52]	@ 0x34
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2200      	movs	r2, #0
 8001020:	639a      	str	r2, [r3, #56]	@ 0x38
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2200      	movs	r2, #0
 8001026:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2200      	movs	r2, #0
 800102c:	641a      	str	r2, [r3, #64]	@ 0x40
{
    CANID = ID;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	605a      	str	r2, [r3, #4]
    C_MAX = _C_MAX;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	601a      	str	r2, [r3, #0]
    flag_error_current = 1;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2201      	movs	r2, #1
 800103e:	61da      	str	r2, [r3, #28]
}
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <_ZN11Current_MOD5queryEiPc>:
// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char* buffer)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
    error = Current_OK;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2200      	movs	r2, #0
 8001060:	631a      	str	r2, [r3, #48]	@ 0x30

    VoltageADC = readAnalogValue();
 8001062:	f000 fe93 	bl	8001d8c <readAnalogValue>
 8001066:	eef0 7a40 	vmov.f32	s15, s0
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	edc3 7a04 	vstr	s15, [r3, #16]

    //printValue(VoltagemV);

    if(VoltageADC < 400){
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	edd3 7a04 	vldr	s15, [r3, #16]
 8001076:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001258 <_ZN11Current_MOD5queryEiPc+0x208>
 800107a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001082:	d509      	bpl.n	8001098 <_ZN11Current_MOD5queryEiPc+0x48>
    	flag_error_current = 1;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2201      	movs	r2, #1
 8001088:	61da      	str	r2, [r3, #28]
    	flag_current = 1;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2201      	movs	r2, #1
 800108e:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = 1;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2201      	movs	r2, #1
 8001094:	631a      	str	r2, [r3, #48]	@ 0x30
 8001096:	e008      	b.n	80010aa <_ZN11Current_MOD5queryEiPc+0x5a>
    }
    else{
    	flag_error_current = 0;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
    	flag_current = 0;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2200      	movs	r2, #0
 80010a2:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = Current_OK;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2200      	movs	r2, #0
 80010a8:	631a      	str	r2, [r3, #48]	@ 0x30
    if(VoltageADC <=  400)
    {
     //error=Current_ERROR_Comunication;
    }

    VoltageV=VoltageADC*3.3/1023; //AnalogRead function reads a value between 0-1023 (1024, 10 bits) here I get the real voltage value based on the value the function gets
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80010b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010b4:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8001230 <_ZN11Current_MOD5queryEiPc+0x1e0>
 80010b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010bc:	ed9f 5b5e 	vldr	d5, [pc, #376]	@ 8001238 <_ZN11Current_MOD5queryEiPc+0x1e8>
 80010c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	edc3 7a03 	vstr	s15, [r3, #12]

    if(VoltageV >= 2.8){
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80010d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010d8:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8001240 <_ZN11Current_MOD5queryEiPc+0x1f0>
 80010dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	db02      	blt.n	80010ec <_ZN11Current_MOD5queryEiPc+0x9c>
    	flag_current = 1;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2201      	movs	r2, #1
 80010ea:	641a      	str	r2, [r3, #64]	@ 0x40
    printnl("V");
    printValue(VoltageV); */
    

    //printValue(Current);
    Current=(2.5-VoltageV)/0.0057; //Sensitivity is 5,7 mv/A
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80010f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010f6:	eeb0 6b04 	vmov.f64	d6, #4	@ 0x40200000  2.5
 80010fa:	ee36 6b47 	vsub.f64	d6, d6, d7
 80010fe:	ed9f 5b52 	vldr	d5, [pc, #328]	@ 8001248 <_ZN11Current_MOD5queryEiPc+0x1f8>
 8001102:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001106:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800110a:	ee17 2a90 	vmov	r2, s15
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	63da      	str	r2, [r3, #60]	@ 0x3c
    if(Current > C_MAX*0.8 && Current < C_MAX)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800112a:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8001250 <_ZN11Current_MOD5queryEiPc+0x200>
 800112e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001132:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113a:	dd11      	ble.n	8001160 <_ZN11Current_MOD5queryEiPc+0x110>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	da0b      	bge.n	8001160 <_ZN11Current_MOD5queryEiPc+0x110>
    {
        if(flag_error_current == 0) module_send_message_NoExtId_CAN1(0x500,message,1); //If current between 80 and 100% of maximun, sends alert
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d107      	bne.n	8001160 <_ZN11Current_MOD5queryEiPc+0x110>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3308      	adds	r3, #8
 8001154:	2201      	movs	r2, #1
 8001156:	4619      	mov	r1, r3
 8001158:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800115c:	f000 fd90 	bl	8001c80 <module_send_message_NoExtId_CAN1>
    }

    if (Current > C_MAX)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	dd18      	ble.n	800119e <_ZN11Current_MOD5queryEiPc+0x14e>
    {
        if (flag_error_current == 1) {
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d107      	bne.n	8001184 <_ZN11Current_MOD5queryEiPc+0x134>
        	module_send_message_NoExtId_CAN1(0x501, message, 2); //If current over maximun, sends alert
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3308      	adds	r3, #8
 8001178:	2202      	movs	r2, #2
 800117a:	4619      	mov	r1, r3
 800117c:	f240 5001 	movw	r0, #1281	@ 0x501
 8001180:	f000 fd7e 	bl	8001c80 <module_send_message_NoExtId_CAN1>
        }

        flag_error_current++;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	61da      	str	r2, [r3, #28]

        if (flag_charger != 1 || flag_charger == 1) //Only cut the AMS if accu not connected to charger, during charging the current control is on charger
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001192:	2b01      	cmp	r3, #1
 8001194:	d119      	bne.n	80011ca <_ZN11Current_MOD5queryEiPc+0x17a>
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800119a:	2b01      	cmp	r3, #1
 800119c:	e015      	b.n	80011ca <_ZN11Current_MOD5queryEiPc+0x17a>
            }
        }
    }
    else
    {
        if (flag_error_current != 0)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00e      	beq.n	80011c4 <_ZN11Current_MOD5queryEiPc+0x174>
		for (int i = 0; i < 5; i++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e008      	b.n	80011be <_ZN11Current_MOD5queryEiPc+0x16e>
		{
			module_send_message_NoExtId_CAN1(0x502, 0, 2); //If current normal, sends green flag
 80011ac:	2202      	movs	r2, #2
 80011ae:	2100      	movs	r1, #0
 80011b0:	f240 5002 	movw	r0, #1282	@ 0x502
 80011b4:	f000 fd64 	bl	8001c80 <module_send_message_NoExtId_CAN1>
		for (int i = 0; i < 5; i++)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3301      	adds	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	ddf3      	ble.n	80011ac <_ZN11Current_MOD5queryEiPc+0x15c>
		}
        flag_error_current = 0;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
    }


    if (time > time_lim_sended)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	dd16      	ble.n	8001202 <_ZN11Current_MOD5queryEiPc+0x1b2>
    {
        time_lim_sended += TIME_LIM_SEND;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011dc:	441a      	add	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	62da      	str	r2, [r3, #44]	@ 0x2c
        message[0] = 0;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2200      	movs	r2, #0
 80011e6:	721a      	strb	r2, [r3, #8]
        message[1] = Current & 0xFF;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	725a      	strb	r2, [r3, #9]
        module_send_message_NoExtId_CAN1(CANID, message, 2); //Sends current through CAN each interval of ms
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6858      	ldr	r0, [r3, #4]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3308      	adds	r3, #8
 80011fa:	2202      	movs	r2, #2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f000 fd3f 	bl	8001c80 <module_send_message_NoExtId_CAN1>
    }


    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	2b00      	cmp	r3, #0
 8001208:	dd0b      	ble.n	8001222 <_ZN11Current_MOD5queryEiPc+0x1d2>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	429a      	cmp	r2, r3
 8001212:	dd06      	ble.n	8001222 <_ZN11Current_MOD5queryEiPc+0x1d2>
    {
        time_lim_plotted += TIME_LIM_PLOT;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	441a      	add	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	629a      	str	r2, [r3, #40]	@ 0x28
        //info(buffer);

    }

    
    return error;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	66666666 	.word	0x66666666
 8001234:	400a6666 	.word	0x400a6666
 8001238:	00000000 	.word	0x00000000
 800123c:	408ff800 	.word	0x408ff800
 8001240:	66666666 	.word	0x66666666
 8001244:	40066666 	.word	0x40066666
 8001248:	19652bd4 	.word	0x19652bd4
 800124c:	3f7758e2 	.word	0x3f7758e2
 8001250:	9999999a 	.word	0x9999999a
 8001254:	3fe99999 	.word	0x3fe99999
 8001258:	43c80000 	.word	0x43c80000

0800125c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b085      	sub	sp, #20
 8001260:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001262:	f001 fbc9 	bl	80029f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001266:	f000 f89d 	bl	80013a4 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800126a:	f000 f917 	bl	800149c <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800126e:	f000 fbc1 	bl	80019f4 <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 8001272:	f000 fad5 	bl	8001820 <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 8001276:	f000 fa49 	bl	800170c <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 800127a:	f000 fb5b 	bl	8001934 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 800127e:	f000 f941 	bl	8001504 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 8001282:	f000 f9c9 	bl	8001618 <_ZL12MX_ADC3_Initv>
  /* USER CODE BEGIN 2 */

  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 8001286:	483d      	ldr	r0, [pc, #244]	@ (800137c <main+0x120>)
 8001288:	f003 ff4a 	bl	8005120 <HAL_FDCAN_Start>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	bf0c      	ite	eq
 8001292:	2301      	moveq	r3, #1
 8001294:	2300      	movne	r3, #0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	d002      	beq.n	80012a2 <main+0x46>
	  print((char*)"CAN_ACU iniciado");
 800129c:	4838      	ldr	r0, [pc, #224]	@ (8001380 <main+0x124>)
 800129e:	f000 fd2f 	bl	8001d00 <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 80012a2:	2200      	movs	r2, #0
 80012a4:	2101      	movs	r1, #1
 80012a6:	4835      	ldr	r0, [pc, #212]	@ (800137c <main+0x120>)
 80012a8:	f004 f92c 	bl	8005504 <HAL_FDCAN_ActivateNotification>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	bf0c      	ite	eq
 80012b2:	2301      	moveq	r3, #1
 80012b4:	2300      	movne	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <main+0x66>
  {
	  print((char*)"CAN_ACU notification");
 80012bc:	4831      	ldr	r0, [pc, #196]	@ (8001384 <main+0x128>)
 80012be:	f000 fd1f 	bl	8001d00 <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 80012c2:	4831      	ldr	r0, [pc, #196]	@ (8001388 <main+0x12c>)
 80012c4:	f003 ff2c 	bl	8005120 <HAL_FDCAN_Start>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bf0c      	ite	eq
 80012ce:	2301      	moveq	r3, #1
 80012d0:	2300      	movne	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d002      	beq.n	80012de <main+0x82>
	  print((char*)"CAN_BMS iniciado");
 80012d8:	482c      	ldr	r0, [pc, #176]	@ (800138c <main+0x130>)
 80012da:	f000 fd11 	bl	8001d00 <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 80012de:	482c      	ldr	r0, [pc, #176]	@ (8001390 <main+0x134>)
 80012e0:	f002 f94a 	bl	8003578 <HAL_ADC_Start>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	bf0c      	ite	eq
 80012ea:	2301      	moveq	r3, #1
 80012ec:	2300      	movne	r3, #0
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <main+0x9e>
	  print((char*)"ADC iniciado");
 80012f4:	4827      	ldr	r0, [pc, #156]	@ (8001394 <main+0x138>)
 80012f6:	f000 fd03 	bl	8001d00 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 80012fa:	f000 fd7d 	bl	8001df8 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 80012fe:	4b26      	ldr	r3, [pc, #152]	@ (8001398 <main+0x13c>)
 8001300:	4a26      	ldr	r2, [pc, #152]	@ (800139c <main+0x140>)
 8001302:	2140      	movs	r1, #64	@ 0x40
 8001304:	4820      	ldr	r0, [pc, #128]	@ (8001388 <main+0x12c>)
 8001306:	f003 ff91 	bl	800522c <HAL_FDCAN_GetRxMessage>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	bf0c      	ite	eq
 8001310:	2301      	moveq	r3, #1
 8001312:	2300      	movne	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0ef      	beq.n	80012fa <main+0x9e>

		  msg_bms.id = RxHeader_bms.Identifier;
 800131a:	4b20      	ldr	r3, [pc, #128]	@ (800139c <main+0x140>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a20      	ldr	r2, [pc, #128]	@ (80013a0 <main+0x144>)
 8001320:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 8001322:	4b1e      	ldr	r3, [pc, #120]	@ (800139c <main+0x140>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <main+0x144>)
 800132a:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	e00c      	b.n	800134c <main+0xf0>
 8001332:	4a19      	ldr	r2, [pc, #100]	@ (8001398 <main+0x13c>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	7819      	ldrb	r1, [r3, #0]
 800133a:	4a19      	ldr	r2, [pc, #100]	@ (80013a0 <main+0x144>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4413      	add	r3, r2
 8001340:	3305      	adds	r3, #5
 8001342:	460a      	mov	r2, r1
 8001344:	701a      	strb	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3301      	adds	r3, #1
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b07      	cmp	r3, #7
 8001350:	ddef      	ble.n	8001332 <main+0xd6>
		  msg_bms.bus = 2;
 8001352:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <main+0x144>)
 8001354:	2202      	movs	r2, #2
 8001356:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 8001358:	f001 fbd4 	bl	8002b04 <HAL_GetTick>
 800135c:	4603      	mov	r3, r0
 800135e:	4a10      	ldr	r2, [pc, #64]	@ (80013a0 <main+0x144>)
 8001360:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 8001362:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <main+0x144>)
 8001364:	466c      	mov	r4, sp
 8001366:	f103 0210 	add.w	r2, r3, #16
 800136a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800136e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001372:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001374:	f000 ff60 	bl	8002238 <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001378:	e7bf      	b.n	80012fa <main+0x9e>
 800137a:	bf00      	nop
 800137c:	24000164 	.word	0x24000164
 8001380:	0800bbbc 	.word	0x0800bbbc
 8001384:	0800bbd0 	.word	0x0800bbd0
 8001388:	24000204 	.word	0x24000204
 800138c:	0800bbe8 	.word	0x0800bbe8
 8001390:	240000f4 	.word	0x240000f4
 8001394:	0800bbfc 	.word	0x0800bbfc
 8001398:	240003d0 	.word	0x240003d0
 800139c:	240003a8 	.word	0x240003a8
 80013a0:	2400043c 	.word	0x2400043c

080013a4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b09c      	sub	sp, #112	@ 0x70
 80013a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ae:	224c      	movs	r2, #76	@ 0x4c
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f009 fe34 	bl	800b020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2220      	movs	r2, #32
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f009 fe2e 	bl	800b020 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013c4:	2002      	movs	r0, #2
 80013c6:	f004 ffff 	bl	80063c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4b32      	ldr	r3, [pc, #200]	@ (8001498 <_Z18SystemClock_Configv+0xf4>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	4a31      	ldr	r2, [pc, #196]	@ (8001498 <_Z18SystemClock_Configv+0xf4>)
 80013d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013d8:	6193      	str	r3, [r2, #24]
 80013da:	4b2f      	ldr	r3, [pc, #188]	@ (8001498 <_Z18SystemClock_Configv+0xf4>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013e6:	bf00      	nop
 80013e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001498 <_Z18SystemClock_Configv+0xf4>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013f4:	bf14      	ite	ne
 80013f6:	2301      	movne	r3, #1
 80013f8:	2300      	moveq	r3, #0
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f3      	bne.n	80013e8 <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001400:	2301      	movs	r3, #1
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001404:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001408:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140a:	2302      	movs	r3, #2
 800140c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800140e:	2302      	movs	r3, #2
 8001410:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001412:	2302      	movs	r3, #2
 8001414:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001416:	232c      	movs	r3, #44	@ 0x2c
 8001418:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800141a:	2301      	movs	r3, #1
 800141c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800141e:	2304      	movs	r3, #4
 8001420:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001422:	2302      	movs	r3, #2
 8001424:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001426:	230c      	movs	r3, #12
 8001428:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800142a:	2300      	movs	r3, #0
 800142c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001436:	4618      	mov	r0, r3
 8001438:	f005 f800 	bl	800643c <HAL_RCC_OscConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	bf14      	ite	ne
 8001442:	2301      	movne	r3, #1
 8001444:	2300      	moveq	r3, #0
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 800144c:	f000 fcc0 	bl	8001dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001450:	233f      	movs	r3, #63	@ 0x3f
 8001452:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001454:	2303      	movs	r3, #3
 8001456:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800145c:	2308      	movs	r3, #8
 800145e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001460:	2340      	movs	r3, #64	@ 0x40
 8001462:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001464:	2340      	movs	r3, #64	@ 0x40
 8001466:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001468:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800146c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800146e:	2340      	movs	r3, #64	@ 0x40
 8001470:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2103      	movs	r1, #3
 8001476:	4618      	mov	r0, r3
 8001478:	f005 fbba 	bl	8006bf0 <HAL_RCC_ClockConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	bf14      	ite	ne
 8001482:	2301      	movne	r3, #1
 8001484:	2300      	moveq	r3, #0
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 800148c:	f000 fca0 	bl	8001dd0 <Error_Handler>
  }
}
 8001490:	bf00      	nop
 8001492:	3770      	adds	r7, #112	@ 0x70
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	58024800 	.word	0x58024800

0800149c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b0ae      	sub	sp, #184	@ 0xb8
 80014a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a2:	463b      	mov	r3, r7
 80014a4:	22b8      	movs	r2, #184	@ 0xb8
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f009 fdb9 	bl	800b020 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014ae:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80014ba:	2302      	movs	r3, #2
 80014bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80014be:	2310      	movs	r3, #16
 80014c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80014ce:	23c0      	movs	r3, #192	@ 0xc0
 80014d0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014da:	2300      	movs	r3, #0
 80014dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	4618      	mov	r0, r3
 80014e4:	f005 ff10 	bl	8007308 <HAL_RCCEx_PeriphCLKConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	bf14      	ite	ne
 80014ee:	2301      	movne	r3, #1
 80014f0:	2300      	moveq	r3, #0
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 80014f8:	f000 fc6a 	bl	8001dd0 <Error_Handler>
  }
}
 80014fc:	bf00      	nop
 80014fe:	37b8      	adds	r7, #184	@ 0xb8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	@ 0x30
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800150a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001516:	463b      	mov	r3, r7
 8001518:	2224      	movs	r2, #36	@ 0x24
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f009 fd7f 	bl	800b020 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001522:	4b3a      	ldr	r3, [pc, #232]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 8001524:	4a3a      	ldr	r2, [pc, #232]	@ (8001610 <_ZL12MX_ADC1_Initv+0x10c>)
 8001526:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001528:	4b38      	ldr	r3, [pc, #224]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 800152a:	2200      	movs	r2, #0
 800152c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800152e:	4b37      	ldr	r3, [pc, #220]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 8001530:	2208      	movs	r2, #8
 8001532:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001534:	4b35      	ldr	r3, [pc, #212]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800153a:	4b34      	ldr	r3, [pc, #208]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 800153c:	2204      	movs	r2, #4
 800153e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001540:	4b32      	ldr	r3, [pc, #200]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 8001542:	2200      	movs	r2, #0
 8001544:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001546:	4b31      	ldr	r3, [pc, #196]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 8001548:	2200      	movs	r2, #0
 800154a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800154c:	4b2f      	ldr	r3, [pc, #188]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 800154e:	2201      	movs	r2, #1
 8001550:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001552:	4b2e      	ldr	r3, [pc, #184]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800155a:	4b2c      	ldr	r3, [pc, #176]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 800155c:	2200      	movs	r2, #0
 800155e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001560:	4b2a      	ldr	r3, [pc, #168]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 8001562:	2200      	movs	r2, #0
 8001564:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001566:	4b29      	ldr	r3, [pc, #164]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 8001568:	2200      	movs	r2, #0
 800156a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800156c:	4b27      	ldr	r3, [pc, #156]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 800156e:	2200      	movs	r2, #0
 8001570:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001572:	4b26      	ldr	r3, [pc, #152]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 8001574:	2200      	movs	r2, #0
 8001576:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001578:	4b24      	ldr	r3, [pc, #144]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001580:	4b22      	ldr	r3, [pc, #136]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 8001582:	2201      	movs	r2, #1
 8001584:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001586:	4821      	ldr	r0, [pc, #132]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 8001588:	f001 fdee 	bl	8003168 <HAL_ADC_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	bf14      	ite	ne
 8001592:	2301      	movne	r3, #1
 8001594:	2300      	moveq	r3, #0
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 800159c:	f000 fc18 	bl	8001dd0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a8:	4619      	mov	r1, r3
 80015aa:	4818      	ldr	r0, [pc, #96]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 80015ac:	f003 f972 	bl	8004894 <HAL_ADCEx_MultiModeConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	bf14      	ite	ne
 80015b6:	2301      	movne	r3, #1
 80015b8:	2300      	moveq	r3, #0
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 80015c0:	f000 fc06 	bl	8001dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <_ZL12MX_ADC1_Initv+0x110>)
 80015c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015c8:	2306      	movs	r3, #6
 80015ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015d0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80015d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015d6:	2304      	movs	r3, #4
 80015d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	4619      	mov	r1, r3
 80015e8:	4808      	ldr	r0, [pc, #32]	@ (800160c <_ZL12MX_ADC1_Initv+0x108>)
 80015ea:	f002 f9c5 	bl	8003978 <HAL_ADC_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	bf14      	ite	ne
 80015f4:	2301      	movne	r3, #1
 80015f6:	2300      	moveq	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <_ZL12MX_ADC1_Initv+0xfe>
  {
    Error_Handler();
 80015fe:	f000 fbe7 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	3730      	adds	r7, #48	@ 0x30
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	24000084 	.word	0x24000084
 8001610:	40022000 	.word	0x40022000
 8001614:	08600004 	.word	0x08600004

08001618 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	@ 0x28
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2224      	movs	r2, #36	@ 0x24
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f009 fcfb 	bl	800b020 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800162a:	4b35      	ldr	r3, [pc, #212]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 800162c:	4a35      	ldr	r2, [pc, #212]	@ (8001704 <_ZL12MX_ADC3_Initv+0xec>)
 800162e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001630:	4b33      	ldr	r3, [pc, #204]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 8001632:	2200      	movs	r2, #0
 8001634:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 8001636:	4b32      	ldr	r3, [pc, #200]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 8001638:	220c      	movs	r2, #12
 800163a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800163c:	4b30      	ldr	r3, [pc, #192]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001642:	4b2f      	ldr	r3, [pc, #188]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001648:	4b2d      	ldr	r3, [pc, #180]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 800164a:	2204      	movs	r2, #4
 800164c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800164e:	4b2c      	ldr	r3, [pc, #176]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 8001650:	2200      	movs	r2, #0
 8001652:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001654:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 8001656:	2200      	movs	r2, #0
 8001658:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800165a:	4b29      	ldr	r3, [pc, #164]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 800165c:	2201      	movs	r2, #1
 800165e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001660:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001668:	4b25      	ldr	r3, [pc, #148]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 800166a:	2200      	movs	r2, #0
 800166c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800166e:	4b24      	ldr	r3, [pc, #144]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 8001670:	2200      	movs	r2, #0
 8001672:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001674:	4b22      	ldr	r3, [pc, #136]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800167c:	4b20      	ldr	r3, [pc, #128]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 800167e:	2200      	movs	r2, #0
 8001680:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001682:	4b1f      	ldr	r3, [pc, #124]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 8001684:	2200      	movs	r2, #0
 8001686:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001688:	4b1d      	ldr	r3, [pc, #116]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 800168a:	2200      	movs	r2, #0
 800168c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800168e:	4b1c      	ldr	r3, [pc, #112]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 8001690:	2200      	movs	r2, #0
 8001692:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001694:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 800169c:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80016a2:	4817      	ldr	r0, [pc, #92]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 80016a4:	f001 fd60 	bl	8003168 <HAL_ADC_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	bf14      	ite	ne
 80016ae:	2301      	movne	r3, #1
 80016b0:	2300      	moveq	r3, #0
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 80016b8:	f000 fb8a 	bl	8001dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016bc:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <_ZL12MX_ADC3_Initv+0xf0>)
 80016be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016c0:	2306      	movs	r3, #6
 80016c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016c8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80016cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016ce:	2304      	movs	r3, #4
 80016d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	4619      	mov	r1, r3
 80016de:	4808      	ldr	r0, [pc, #32]	@ (8001700 <_ZL12MX_ADC3_Initv+0xe8>)
 80016e0:	f002 f94a 	bl	8003978 <HAL_ADC_ConfigChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	bf14      	ite	ne
 80016ea:	2301      	movne	r3, #1
 80016ec:	2300      	moveq	r3, #0
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 80016f4:	f000 fb6c 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	3728      	adds	r7, #40	@ 0x28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	240000f4 	.word	0x240000f4
 8001704:	58026000 	.word	0x58026000
 8001708:	1d500080 	.word	0x1d500080

0800170c <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001712:	4b41      	ldr	r3, [pc, #260]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001714:	4a41      	ldr	r2, [pc, #260]	@ (800181c <_ZL14MX_FDCAN1_Initv+0x110>)
 8001716:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001718:	4b3f      	ldr	r3, [pc, #252]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800171a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800171e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001720:	4b3d      	ldr	r3, [pc, #244]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001726:	4b3c      	ldr	r3, [pc, #240]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001728:	2200      	movs	r2, #0
 800172a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800172c:	4b3a      	ldr	r3, [pc, #232]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800172e:	2200      	movs	r2, #0
 8001730:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001732:	4b39      	ldr	r3, [pc, #228]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001734:	2200      	movs	r2, #0
 8001736:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 8001738:	4b37      	ldr	r3, [pc, #220]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800173a:	2203      	movs	r2, #3
 800173c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800173e:	4b36      	ldr	r3, [pc, #216]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001740:	2201      	movs	r2, #1
 8001742:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 8001744:	4b34      	ldr	r3, [pc, #208]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001746:	220a      	movs	r2, #10
 8001748:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 800174a:	4b33      	ldr	r3, [pc, #204]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800174c:	2205      	movs	r2, #5
 800174e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001750:	4b31      	ldr	r3, [pc, #196]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001752:	2201      	movs	r2, #1
 8001754:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001756:	4b30      	ldr	r3, [pc, #192]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001758:	2201      	movs	r2, #1
 800175a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800175c:	4b2e      	ldr	r3, [pc, #184]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800175e:	2201      	movs	r2, #1
 8001760:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001762:	4b2d      	ldr	r3, [pc, #180]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001764:	2201      	movs	r2, #1
 8001766:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001768:	4b2b      	ldr	r3, [pc, #172]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800176a:	2200      	movs	r2, #0
 800176c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800176e:	4b2a      	ldr	r3, [pc, #168]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001770:	2200      	movs	r2, #0
 8001772:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 8001774:	4b28      	ldr	r3, [pc, #160]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001776:	2205      	movs	r2, #5
 8001778:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 800177a:	4b27      	ldr	r3, [pc, #156]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800177c:	2220      	movs	r2, #32
 800177e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001780:	4b25      	ldr	r3, [pc, #148]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001782:	2204      	movs	r2, #4
 8001784:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8001786:	4b24      	ldr	r3, [pc, #144]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001788:	2220      	movs	r2, #32
 800178a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800178c:	4b22      	ldr	r3, [pc, #136]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800178e:	2204      	movs	r2, #4
 8001790:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8001792:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001794:	2201      	movs	r2, #1
 8001796:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001798:	4b1f      	ldr	r3, [pc, #124]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800179a:	2204      	movs	r2, #4
 800179c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 800179e:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 80017a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017a6:	2220      	movs	r2, #32
 80017a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80017aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017ac:	2220      	movs	r2, #32
 80017ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80017b0:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80017b6:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017b8:	2204      	movs	r2, #4
 80017ba:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80017bc:	4816      	ldr	r0, [pc, #88]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017be:	f003 fa5b 	bl	8004c78 <HAL_FDCAN_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bf14      	ite	ne
 80017c8:	2301      	movne	r3, #1
 80017ca:	2300      	moveq	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 80017d2:	f000 fafd 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80017d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017da:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80017e0:	2302      	movs	r3, #2
 80017e2:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80017e4:	2301      	movs	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80017f0:	463b      	mov	r3, r7
 80017f2:	4619      	mov	r1, r3
 80017f4:	4808      	ldr	r0, [pc, #32]	@ (8001818 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017f6:	f003 fc1d 	bl	8005034 <HAL_FDCAN_ConfigFilter>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf14      	ite	ne
 8001800:	2301      	movne	r3, #1
 8001802:	2300      	moveq	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 800180a:	f000 fae1 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	3720      	adds	r7, #32
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	24000164 	.word	0x24000164
 800181c:	4000a000 	.word	0x4000a000

08001820 <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001826:	4b41      	ldr	r3, [pc, #260]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001828:	4a41      	ldr	r2, [pc, #260]	@ (8001930 <_ZL14MX_FDCAN2_Initv+0x110>)
 800182a:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800182c:	4b3f      	ldr	r3, [pc, #252]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800182e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001832:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001834:	4b3d      	ldr	r3, [pc, #244]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800183a:	4b3c      	ldr	r3, [pc, #240]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800183c:	2200      	movs	r2, #0
 800183e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001840:	4b3a      	ldr	r3, [pc, #232]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001842:	2200      	movs	r2, #0
 8001844:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001846:	4b39      	ldr	r3, [pc, #228]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001848:	2200      	movs	r2, #0
 800184a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 3;
 800184c:	4b37      	ldr	r3, [pc, #220]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800184e:	2203      	movs	r2, #3
 8001850:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001852:	4b36      	ldr	r3, [pc, #216]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001854:	2201      	movs	r2, #1
 8001856:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 8001858:	4b34      	ldr	r3, [pc, #208]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800185a:	220a      	movs	r2, #10
 800185c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 800185e:	4b33      	ldr	r3, [pc, #204]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001860:	2205      	movs	r2, #5
 8001862:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001864:	4b31      	ldr	r3, [pc, #196]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001866:	2201      	movs	r2, #1
 8001868:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800186a:	4b30      	ldr	r3, [pc, #192]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800186c:	2201      	movs	r2, #1
 800186e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001870:	4b2e      	ldr	r3, [pc, #184]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001872:	2201      	movs	r2, #1
 8001874:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001876:	4b2d      	ldr	r3, [pc, #180]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001878:	2201      	movs	r2, #1
 800187a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 800187c:	4b2b      	ldr	r3, [pc, #172]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800187e:	2200      	movs	r2, #0
 8001880:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001882:	4b2a      	ldr	r3, [pc, #168]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001884:	2200      	movs	r2, #0
 8001886:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 8001888:	4b28      	ldr	r3, [pc, #160]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800188a:	2205      	movs	r2, #5
 800188c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 800188e:	4b27      	ldr	r3, [pc, #156]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001890:	2220      	movs	r2, #32
 8001892:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001894:	4b25      	ldr	r3, [pc, #148]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001896:	2204      	movs	r2, #4
 8001898:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 800189a:	4b24      	ldr	r3, [pc, #144]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800189c:	2220      	movs	r2, #32
 800189e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80018a0:	4b22      	ldr	r3, [pc, #136]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018a2:	2204      	movs	r2, #4
 80018a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 80018a6:	4b21      	ldr	r3, [pc, #132]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80018ac:	4b1f      	ldr	r3, [pc, #124]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018ae:	2204      	movs	r2, #4
 80018b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 80018b2:	4b1e      	ldr	r3, [pc, #120]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 80018b8:	4b1c      	ldr	r3, [pc, #112]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018ba:	2220      	movs	r2, #32
 80018bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 80018be:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018c0:	2220      	movs	r2, #32
 80018c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80018c4:	4b19      	ldr	r3, [pc, #100]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80018ca:	4b18      	ldr	r3, [pc, #96]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018cc:	2204      	movs	r2, #4
 80018ce:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80018d0:	4816      	ldr	r0, [pc, #88]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018d2:	f003 f9d1 	bl	8004c78 <HAL_FDCAN_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bf14      	ite	ne
 80018dc:	2301      	movne	r3, #1
 80018de:	2300      	moveq	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 80018e6:	f000 fa73 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80018ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018ee:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80018f4:	2302      	movs	r3, #2
 80018f6:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80018f8:	2301      	movs	r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 80018fc:	2310      	movs	r3, #16
 80018fe:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 8001900:	2310      	movs	r3, #16
 8001902:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001904:	463b      	mov	r3, r7
 8001906:	4619      	mov	r1, r3
 8001908:	4808      	ldr	r0, [pc, #32]	@ (800192c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800190a:	f003 fb93 	bl	8005034 <HAL_FDCAN_ConfigFilter>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf14      	ite	ne
 8001914:	2301      	movne	r3, #1
 8001916:	2300      	moveq	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 800191e:	f000 fa57 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	3720      	adds	r7, #32
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	24000204 	.word	0x24000204
 8001930:	4000a400 	.word	0x4000a400

08001934 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001938:	4b2c      	ldr	r3, [pc, #176]	@ (80019ec <_ZL19MX_USART2_UART_Initv+0xb8>)
 800193a:	4a2d      	ldr	r2, [pc, #180]	@ (80019f0 <_ZL19MX_USART2_UART_Initv+0xbc>)
 800193c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800193e:	4b2b      	ldr	r3, [pc, #172]	@ (80019ec <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001940:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001946:	4b29      	ldr	r3, [pc, #164]	@ (80019ec <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800194c:	4b27      	ldr	r3, [pc, #156]	@ (80019ec <_ZL19MX_USART2_UART_Initv+0xb8>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001952:	4b26      	ldr	r3, [pc, #152]	@ (80019ec <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001958:	4b24      	ldr	r3, [pc, #144]	@ (80019ec <_ZL19MX_USART2_UART_Initv+0xb8>)
 800195a:	220c      	movs	r2, #12
 800195c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195e:	4b23      	ldr	r3, [pc, #140]	@ (80019ec <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001964:	4b21      	ldr	r3, [pc, #132]	@ (80019ec <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800196a:	4b20      	ldr	r3, [pc, #128]	@ (80019ec <_ZL19MX_USART2_UART_Initv+0xb8>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001970:	4b1e      	ldr	r3, [pc, #120]	@ (80019ec <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001972:	2200      	movs	r2, #0
 8001974:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001976:	4b1d      	ldr	r3, [pc, #116]	@ (80019ec <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001978:	2200      	movs	r2, #0
 800197a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800197c:	481b      	ldr	r0, [pc, #108]	@ (80019ec <_ZL19MX_USART2_UART_Initv+0xb8>)
 800197e:	f008 f8a9 	bl	8009ad4 <HAL_UART_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf14      	ite	ne
 8001988:	2301      	movne	r3, #1
 800198a:	2300      	moveq	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001992:	f000 fa1d 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001996:	2100      	movs	r1, #0
 8001998:	4814      	ldr	r0, [pc, #80]	@ (80019ec <_ZL19MX_USART2_UART_Initv+0xb8>)
 800199a:	f009 fa54 	bl	800ae46 <HAL_UARTEx_SetTxFifoThreshold>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bf14      	ite	ne
 80019a4:	2301      	movne	r3, #1
 80019a6:	2300      	moveq	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 80019ae:	f000 fa0f 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b2:	2100      	movs	r1, #0
 80019b4:	480d      	ldr	r0, [pc, #52]	@ (80019ec <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019b6:	f009 fa84 	bl	800aec2 <HAL_UARTEx_SetRxFifoThreshold>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf14      	ite	ne
 80019c0:	2301      	movne	r3, #1
 80019c2:	2300      	moveq	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80019ca:	f000 fa01 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80019ce:	4807      	ldr	r0, [pc, #28]	@ (80019ec <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019d0:	f009 fa00 	bl	800add4 <HAL_UARTEx_DisableFifoMode>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	bf14      	ite	ne
 80019da:	2301      	movne	r3, #1
 80019dc:	2300      	moveq	r3, #0
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80019e4:	f000 f9f4 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	240002a4 	.word	0x240002a4
 80019f0:	40004400 	.word	0x40004400

080019f4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08c      	sub	sp, #48	@ 0x30
 80019f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
 8001a08:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a0a:	4b57      	ldr	r3, [pc, #348]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a10:	4a55      	ldr	r2, [pc, #340]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001a12:	f043 0320 	orr.w	r3, r3, #32
 8001a16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a1a:	4b53      	ldr	r3, [pc, #332]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a20:	f003 0320 	and.w	r3, r3, #32
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a28:	4b4f      	ldr	r3, [pc, #316]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a2e:	4a4e      	ldr	r2, [pc, #312]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a38:	4b4b      	ldr	r3, [pc, #300]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b48      	ldr	r3, [pc, #288]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a4c:	4a46      	ldr	r2, [pc, #280]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a56:	4b44      	ldr	r3, [pc, #272]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a64:	4b40      	ldr	r3, [pc, #256]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a6a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001a6c:	f043 0310 	orr.w	r3, r3, #16
 8001a70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a74:	4b3c      	ldr	r3, [pc, #240]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	4b39      	ldr	r3, [pc, #228]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a88:	4a37      	ldr	r2, [pc, #220]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a92:	4b35      	ldr	r3, [pc, #212]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aa0:	4b31      	ldr	r3, [pc, #196]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa6:	4a30      	ldr	r2, [pc, #192]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001abe:	4b2a      	ldr	r3, [pc, #168]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac4:	4a28      	ldr	r2, [pc, #160]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001ac6:	f043 0308 	orr.w	r3, r3, #8
 8001aca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ace:	4b26      	ldr	r3, [pc, #152]	@ (8001b68 <_ZL12MX_GPIO_Initv+0x174>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ae2:	4822      	ldr	r0, [pc, #136]	@ (8001b6c <_ZL12MX_GPIO_Initv+0x178>)
 8001ae4:	f004 fc56 	bl	8006394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2138      	movs	r1, #56	@ 0x38
 8001aec:	4820      	ldr	r0, [pc, #128]	@ (8001b70 <_ZL12MX_GPIO_Initv+0x17c>)
 8001aee:	f004 fc51 	bl	8006394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 8001af2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4818      	ldr	r0, [pc, #96]	@ (8001b6c <_ZL12MX_GPIO_Initv+0x178>)
 8001b0c:	f004 fa82 	bl	8006014 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 8001b10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	4619      	mov	r1, r3
 8001b24:	4813      	ldr	r0, [pc, #76]	@ (8001b74 <_ZL12MX_GPIO_Initv+0x180>)
 8001b26:	f004 fa75 	bl	8006014 <HAL_GPIO_Init>

  /*Configure GPIO pin : Charge_Button_Pin */
  GPIO_InitStruct.Pin = Charge_Button_Pin;
 8001b2a:	2380      	movs	r3, #128	@ 0x80
 8001b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Charge_Button_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480e      	ldr	r0, [pc, #56]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x184>)
 8001b3e:	f004 fa69 	bl	8006014 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 8001b42:	2338      	movs	r3, #56	@ 0x38
 8001b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b46:	2301      	movs	r3, #1
 8001b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <_ZL12MX_GPIO_Initv+0x17c>)
 8001b5a:	f004 fa5b 	bl	8006014 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b5e:	bf00      	nop
 8001b60:	3730      	adds	r7, #48	@ 0x30
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	58024400 	.word	0x58024400
 8001b6c:	58021400 	.word	0x58021400
 8001b70:	58020c00 	.word	0x58020c00
 8001b74:	58021000 	.word	0x58021000
 8001b78:	58021800 	.word	0x58021800

08001b7c <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d04b      	beq.n	8001c28 <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 8001b90:	4b27      	ldr	r3, [pc, #156]	@ (8001c30 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001b92:	4a28      	ldr	r2, [pc, #160]	@ (8001c34 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001b94:	2140      	movs	r1, #64	@ 0x40
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f003 fb48 	bl	800522c <HAL_FDCAN_GetRxMessage>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	bf0c      	ite	eq
 8001ba2:	2301      	moveq	r3, #1
 8001ba4:	2300      	movne	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d02e      	beq.n	8001c0a <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 8001bac:	4b21      	ldr	r3, [pc, #132]	@ (8001c34 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a21      	ldr	r2, [pc, #132]	@ (8001c38 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bb2:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c34 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b1f      	ldr	r3, [pc, #124]	@ (8001c38 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bbc:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	e00c      	b.n	8001bde <HAL_FDCAN_RxFifo0Callback+0x62>
 8001bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c30 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4413      	add	r3, r2
 8001bca:	7819      	ldrb	r1, [r3, #0]
 8001bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c38 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3305      	adds	r3, #5
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	701a      	strb	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b07      	cmp	r3, #7
 8001be2:	ddef      	ble.n	8001bc4 <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001be4:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 8001bea:	f000 ff8b 	bl	8002b04 <HAL_GetTick>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4a11      	ldr	r2, [pc, #68]	@ (8001c38 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bf2:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 8001bf4:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bf6:	466c      	mov	r4, sp
 8001bf8:	f103 0210 	add.w	r2, r3, #16
 8001bfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c00:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c06:	f000 fb17 	bl	8002238 <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f003 fc78 	bl	8005504 <HAL_FDCAN_ActivateNotification>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	bf14      	ite	ne
 8001c1a:	2301      	movne	r3, #1
 8001c1c:	2300      	moveq	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 8001c24:	f000 f8d4 	bl	8001dd0 <Error_Handler>
    }
  }
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd90      	pop	{r4, r7, pc}
 8001c30:	240003d0 	.word	0x240003d0
 8001c34:	24000380 	.word	0x24000380
 8001c38:	24000454 	.word	0x24000454

08001c3c <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	4613      	mov	r3, r2
 8001c48:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001c4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c78 <module_send_message_CAN1+0x3c>)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 8001c50:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <module_send_message_CAN1+0x3c>)
 8001c52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c56:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	4a07      	ldr	r2, [pc, #28]	@ (8001c78 <module_send_message_CAN1+0x3c>)
 8001c5c:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	4905      	ldr	r1, [pc, #20]	@ (8001c78 <module_send_message_CAN1+0x3c>)
 8001c62:	4806      	ldr	r0, [pc, #24]	@ (8001c7c <module_send_message_CAN1+0x40>)
 8001c64:	f003 fa87 	bl	8005176 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	75fb      	strb	r3, [r7, #23]

	return status;
 8001c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	24000338 	.word	0x24000338
 8001c7c:	24000164 	.word	0x24000164

08001c80 <module_send_message_NoExtId_CAN1>:

//NO extended ID
HAL_StatusTypeDef module_send_message_NoExtId_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <module_send_message_NoExtId_CAN1+0x38>)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_STANDARD_ID;
 8001c94:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <module_send_message_NoExtId_CAN1+0x38>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	4a06      	ldr	r2, [pc, #24]	@ (8001cb8 <module_send_message_NoExtId_CAN1+0x38>)
 8001c9e:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	4905      	ldr	r1, [pc, #20]	@ (8001cb8 <module_send_message_NoExtId_CAN1+0x38>)
 8001ca4:	4805      	ldr	r0, [pc, #20]	@ (8001cbc <module_send_message_NoExtId_CAN1+0x3c>)
 8001ca6:	f003 fa66 	bl	8005176 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001caa:	4603      	mov	r3, r0
 8001cac:	75fb      	strb	r3, [r7, #23]

	return status;
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	24000338 	.word	0x24000338
 8001cbc:	24000164 	.word	0x24000164

08001cc0 <module_send_message_CAN2>:

HAL_StatusTypeDef module_send_message_CAN2(uint32_t id, uint8_t* data, uint8_t length) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	71fb      	strb	r3, [r7, #7]
	TxHeader_bms.Identifier = id;
 8001cce:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf8 <module_send_message_CAN2+0x38>)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6013      	str	r3, [r2, #0]
	TxHeader_bms.IdType = FDCAN_STANDARD_ID;
 8001cd4:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <module_send_message_CAN2+0x38>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	605a      	str	r2, [r3, #4]
	TxHeader_bms.DataLength = length;
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	4a06      	ldr	r2, [pc, #24]	@ (8001cf8 <module_send_message_CAN2+0x38>)
 8001cde:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	4905      	ldr	r1, [pc, #20]	@ (8001cf8 <module_send_message_CAN2+0x38>)
 8001ce4:	4805      	ldr	r0, [pc, #20]	@ (8001cfc <module_send_message_CAN2+0x3c>)
 8001ce6:	f003 fa46 	bl	8005176 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001cea:	4603      	mov	r3, r0
 8001cec:	75fb      	strb	r3, [r7, #23]

	return status;
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	2400035c 	.word	0x2400035c
 8001cfc:	24000204 	.word	0x24000204

08001d00 <print>:

void print(char uart_buffer[]){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4909      	ldr	r1, [pc, #36]	@ (8001d30 <print+0x30>)
 8001d0c:	4809      	ldr	r0, [pc, #36]	@ (8001d34 <print+0x34>)
 8001d0e:	f009 f965 	bl	800afdc <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001d12:	4808      	ldr	r0, [pc, #32]	@ (8001d34 <print+0x34>)
 8001d14:	f7fe fafc 	bl	8000310 <strlen>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d20:	4904      	ldr	r1, [pc, #16]	@ (8001d34 <print+0x34>)
 8001d22:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <print+0x38>)
 8001d24:	f007 ff26 	bl	8009b74 <HAL_UART_Transmit>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	0800bc0c 	.word	0x0800bc0c
 8001d34:	240003d8 	.word	0x240003d8
 8001d38:	240002a4 	.word	0x240002a4

08001d3c <printnl>:

void printnl(char uart_buffer[]){
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s", uart_buffer);
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4909      	ldr	r1, [pc, #36]	@ (8001d6c <printnl+0x30>)
 8001d48:	4809      	ldr	r0, [pc, #36]	@ (8001d70 <printnl+0x34>)
 8001d4a:	f009 f947 	bl	800afdc <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001d4e:	4808      	ldr	r0, [pc, #32]	@ (8001d70 <printnl+0x34>)
 8001d50:	f7fe fade 	bl	8000310 <strlen>
 8001d54:	4603      	mov	r3, r0
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5c:	4904      	ldr	r1, [pc, #16]	@ (8001d70 <printnl+0x34>)
 8001d5e:	4805      	ldr	r0, [pc, #20]	@ (8001d74 <printnl+0x38>)
 8001d60:	f007 ff08 	bl	8009b74 <HAL_UART_Transmit>
}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	0800bc14 	.word	0x0800bc14
 8001d70:	240003d8 	.word	0x240003d8
 8001d74:	240002a4 	.word	0x240002a4

08001d78 <getUARTState>:
void printValue(int value){
	sprintf(uart_msg, "%hu \n\r", value);
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
}

HAL_UART_StateTypeDef getUARTState(){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&huart2);
 8001d7c:	4802      	ldr	r0, [pc, #8]	@ (8001d88 <getUARTState+0x10>)
 8001d7e:	f007 ff87 	bl	8009c90 <HAL_UART_GetState>
 8001d82:	4603      	mov	r3, r0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	240002a4 	.word	0x240002a4

08001d8c <readAnalogValue>:

float readAnalogValue(void){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
	float analogValue;

	HAL_ADC_Start(&hadc3);
 8001d92:	480e      	ldr	r0, [pc, #56]	@ (8001dcc <readAnalogValue+0x40>)
 8001d94:	f001 fbf0 	bl	8003578 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	480b      	ldr	r0, [pc, #44]	@ (8001dcc <readAnalogValue+0x40>)
 8001d9e:	f001 fce9 	bl	8003774 <HAL_ADC_PollForConversion>
	analogValue = HAL_ADC_GetValue(&hadc3);
 8001da2:	480a      	ldr	r0, [pc, #40]	@ (8001dcc <readAnalogValue+0x40>)
 8001da4:	f001 fdda 	bl	800395c <HAL_ADC_GetValue>
 8001da8:	ee07 0a90 	vmov	s15, r0
 8001dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db0:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_ADC_Stop(&hadc3);
 8001db4:	4805      	ldr	r0, [pc, #20]	@ (8001dcc <readAnalogValue+0x40>)
 8001db6:	f001 fca9 	bl	800370c <HAL_ADC_Stop>
	return analogValue;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	ee07 3a90 	vmov	s15, r3
}
 8001dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	240000f4 	.word	0x240000f4

08001dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd4:	b672      	cpsid	i
}
 8001dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <Error_Handler+0x8>

08001ddc <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bfb8      	it	lt
 8001dea:	425b      	neglt	r3, r3
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08c      	sub	sp, #48	@ 0x30
 8001dfc:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 8001e02:	2300      	movs	r3, #0
 8001e04:	62bb      	str	r3, [r7, #40]	@ 0x28
	int state_precharge = 0; // 0 means open, 1 closed
 8001e06:	2300      	movs	r3, #0
 8001e08:	627b      	str	r3, [r7, #36]	@ 0x24
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	61bb      	str	r3, [r7, #24]
	int flag_current = Current_ERROR_Comunication;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	617b      	str	r3, [r7, #20]


	int gpio_charge = HAL_GPIO_ReadPin(Charge_Button_GPIO_Port, Charge_Button_Pin); // pull-up: 1 = charge started
 8001e12:	2180      	movs	r1, #128	@ 0x80
 8001e14:	489e      	ldr	r0, [pc, #632]	@ (8002090 <_Z12select_statev+0x298>)
 8001e16:	f004 faa5 	bl	8006364 <HAL_GPIO_ReadPin>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	613b      	str	r3, [r7, #16]
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 8001e1e:	f000 fe71 	bl	8002b04 <HAL_GetTick>
 8001e22:	60f8      	str	r0, [r7, #12]
	int time_s = HAL_GetTick();
 8001e24:	f000 fe6e 	bl	8002b04 <HAL_GetTick>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	60bb      	str	r3, [r7, #8]

	CPU.voltage_acum = 0; // For precharge
 8001e2c:	4b99      	ldr	r3, [pc, #612]	@ (8002094 <_Z12select_statev+0x29c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	62da      	str	r2, [r3, #44]	@ 0x2c


	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 8001e32:	4b99      	ldr	r3, [pc, #612]	@ (8002098 <_Z12select_statev+0x2a0>)
 8001e34:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001e38:	601a      	str	r2, [r3, #0]
	MAX_T = 0;
 8001e3a:	4b98      	ldr	r3, [pc, #608]	@ (800209c <_Z12select_statev+0x2a4>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
 8001e44:	e066      	b.n	8001f14 <_Z12select_statev+0x11c>
		BMS[i].voltage_acum = 0;// For precharge
 8001e46:	4a96      	ldr	r2, [pc, #600]	@ (80020a0 <_Z12select_statev+0x2a8>)
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	4413      	add	r3, r2
 8001e54:	338c      	adds	r3, #140	@ 0x8c
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]


		if (BMS[i].query_voltage(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	4a8e      	ldr	r2, [pc, #568]	@ (80020a0 <_Z12select_statev+0x2a8>)
 8001e66:	4413      	add	r3, r2
 8001e68:	4a8e      	ldr	r2, [pc, #568]	@ (80020a4 <_Z12select_statev+0x2ac>)
 8001e6a:	68f9      	ldr	r1, [r7, #12]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe ff27 	bl	8000cc0 <_ZN7BMS_MOD13query_voltageEmPc>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
		{
			//state = error;
		}

		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 8001e76:	4b87      	ldr	r3, [pc, #540]	@ (8002094 <_Z12select_statev+0x29c>)
 8001e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e7a:	4989      	ldr	r1, [pc, #548]	@ (80020a0 <_Z12select_statev+0x2a8>)
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8001e82:	fb00 f303 	mul.w	r3, r0, r3
 8001e86:	440b      	add	r3, r1
 8001e88:	338c      	adds	r3, #140	@ 0x8c
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a81      	ldr	r2, [pc, #516]	@ (8002094 <_Z12select_statev+0x29c>)
 8001e90:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 8001e92:	4a83      	ldr	r2, [pc, #524]	@ (80020a0 <_Z12select_statev+0x2a8>)
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001e9a:	fb01 f303 	mul.w	r3, r1, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3390      	adds	r3, #144	@ 0x90
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b7c      	ldr	r3, [pc, #496]	@ (8002098 <_Z12select_statev+0x2a0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	da0a      	bge.n	8001ec2 <_Z12select_statev+0xca>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 8001eac:	4a7c      	ldr	r2, [pc, #496]	@ (80020a0 <_Z12select_statev+0x2a8>)
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001eb4:	fb01 f303 	mul.w	r3, r1, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	3390      	adds	r3, #144	@ 0x90
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a76      	ldr	r2, [pc, #472]	@ (8002098 <_Z12select_statev+0x2a0>)
 8001ec0:	6013      	str	r3, [r2, #0]


		if (BMS[i].query_temperature(time, buffer) != Temperatures_OK){
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001ec8:	fb02 f303 	mul.w	r3, r2, r3
 8001ecc:	4a74      	ldr	r2, [pc, #464]	@ (80020a0 <_Z12select_statev+0x2a8>)
 8001ece:	4413      	add	r3, r2
 8001ed0:	4a74      	ldr	r2, [pc, #464]	@ (80020a4 <_Z12select_statev+0x2ac>)
 8001ed2:	68f9      	ldr	r1, [r7, #12]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe ff73 	bl	8000dc0 <_ZN7BMS_MOD17query_temperatureEmPc>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
			//state = error;
		}

		if (BMS[i].MAX_T > MAX_T)
 8001ede:	4a70      	ldr	r2, [pc, #448]	@ (80020a0 <_Z12select_statev+0x2a8>)
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001ee6:	fb01 f303 	mul.w	r3, r1, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	33a0      	adds	r3, #160	@ 0xa0
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b6a      	ldr	r3, [pc, #424]	@ (800209c <_Z12select_statev+0x2a4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	dd0a      	ble.n	8001f0e <_Z12select_statev+0x116>
			MAX_T = BMS[i].MAX_T;
 8001ef8:	4a69      	ldr	r2, [pc, #420]	@ (80020a0 <_Z12select_statev+0x2a8>)
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	33a0      	adds	r3, #160	@ 0xa0
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a64      	ldr	r2, [pc, #400]	@ (800209c <_Z12select_statev+0x2a4>)
 8001f0c:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	3301      	adds	r3, #1
 8001f12:	623b      	str	r3, [r7, #32]
 8001f14:	4b64      	ldr	r3, [pc, #400]	@ (80020a8 <_Z12select_statev+0x2b0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6a3a      	ldr	r2, [r7, #32]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	db93      	blt.n	8001e46 <_Z12select_statev+0x4e>
	}

	if (time_s > time_sending_minV + 500) {
 8001f1e:	4b63      	ldr	r3, [pc, #396]	@ (80020ac <_Z12select_statev+0x2b4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	dd23      	ble.n	8001f74 <_Z12select_statev+0x17c>
		message_MINV[1] = MIN_V & 0xFF;
 8001f2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002098 <_Z12select_statev+0x2a0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4b5f      	ldr	r3, [pc, #380]	@ (80020b0 <_Z12select_statev+0x2b8>)
 8001f34:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 8001f36:	4b58      	ldr	r3, [pc, #352]	@ (8002098 <_Z12select_statev+0x2a0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	121b      	asrs	r3, r3, #8
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4b5c      	ldr	r3, [pc, #368]	@ (80020b0 <_Z12select_statev+0x2b8>)
 8001f40:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 8001f42:	4b57      	ldr	r3, [pc, #348]	@ (80020a0 <_Z12select_statev+0x2a8>)
 8001f44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d010      	beq.n	8001f6e <_Z12select_statev+0x176>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	4958      	ldr	r1, [pc, #352]	@ (80020b0 <_Z12select_statev+0x2b8>)
 8001f50:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001f54:	f7ff fe72 	bl	8001c3c <module_send_message_CAN1>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	bf14      	ite	ne
 8001f5e:	2301      	movne	r3, #1
 8001f60:	2300      	moveq	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <_Z12select_statev+0x176>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 8001f68:	4852      	ldr	r0, [pc, #328]	@ (80020b4 <_Z12select_statev+0x2bc>)
 8001f6a:	f7ff fec9 	bl	8001d00 <print>
		}
		time_sending_minV = time_s;
 8001f6e:	4a4f      	ldr	r2, [pc, #316]	@ (80020ac <_Z12select_statev+0x2b4>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	e00d      	b.n	8001f96 <_Z12select_statev+0x19e>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 8001f7a:	4b47      	ldr	r3, [pc, #284]	@ (8002098 <_Z12select_statev+0x2a0>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4948      	ldr	r1, [pc, #288]	@ (80020a0 <_Z12select_statev+0x2a8>)
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8001f86:	fb00 f303 	mul.w	r3, r0, r3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3394      	adds	r3, #148	@ 0x94
 8001f8e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	3301      	adds	r3, #1
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	4b44      	ldr	r3, [pc, #272]	@ (80020a8 <_Z12select_statev+0x2b0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	dbec      	blt.n	8001f7a <_Z12select_statev+0x182>

	}


	//flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
	flag_cpu = CPU_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]

	flag_current = current.query(time, buffer); //asking current how is it
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4a3f      	ldr	r2, [pc, #252]	@ (80020a4 <_Z12select_statev+0x2ac>)
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4843      	ldr	r0, [pc, #268]	@ (80020b8 <_Z12select_statev+0x2c0>)
 8001fac:	f7ff f850 	bl	8001050 <_ZN11Current_MOD5queryEiPc>
 8001fb0:	6178      	str	r0, [r7, #20]
	print((char*)"voltage acu");
	printValue(CPU.voltage_acum);
	print((char*)"dc bus");
	printValue(CPU.DC_BUS);
	printValue(state);*/
	switch (state) {
 8001fb2:	4b42      	ldr	r3, [pc, #264]	@ (80020bc <_Z12select_statev+0x2c4>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b05      	cmp	r3, #5
 8001fb8:	f200 80f9 	bhi.w	80021ae <_Z12select_statev+0x3b6>
 8001fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc4 <_Z12select_statev+0x1cc>)
 8001fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc2:	bf00      	nop
 8001fc4:	08001fdd 	.word	0x08001fdd
 8001fc8:	0800200f 	.word	0x0800200f
 8001fcc:	0800202b 	.word	0x0800202b
 8001fd0:	080020c5 	.word	0x080020c5
 8001fd4:	080020fd 	.word	0x080020fd
 8001fd8:	0800218f 	.word	0x0800218f
	case start:
		state_air_n = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_DISCONNECTED);
 8001fe8:	2102      	movs	r1, #2
 8001fea:	482a      	ldr	r0, [pc, #168]	@ (8002094 <_Z12select_statev+0x29c>)
 8001fec:	f7fe ffd0 	bl	8000f90 <_ZN7CPU_MOD11updateStateEi>
		if(gpio_charge == GPIO_PIN_SET){
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d103      	bne.n	8001ffe <_Z12select_statev+0x206>
			state = charge;
 8001ff6:	4b31      	ldr	r3, [pc, #196]	@ (80020bc <_Z12select_statev+0x2c4>)
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	701a      	strb	r2, [r3, #0]
		}

		else if (flag_cpu != CPU_ERROR_COMMUNICATION)
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
		break;
 8001ffc:	e0d2      	b.n	80021a4 <_Z12select_statev+0x3ac>
		else if (flag_cpu != CPU_ERROR_COMMUNICATION)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	2b01      	cmp	r3, #1
 8002002:	f000 80cf 	beq.w	80021a4 <_Z12select_statev+0x3ac>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 8002006:	4b2d      	ldr	r3, [pc, #180]	@ (80020bc <_Z12select_statev+0x2c4>)
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
		break;
 800200c:	e0ca      	b.n	80021a4 <_Z12select_statev+0x3ac>
	case precharge:
		state_air_n = 1;
 800200e:	2301      	movs	r3, #1
 8002010:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002016:	2301      	movs	r3, #1
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_PRECHARGE);
 800201a:	2101      	movs	r1, #1
 800201c:	481d      	ldr	r0, [pc, #116]	@ (8002094 <_Z12select_statev+0x29c>)
 800201e:	f7fe ffb7 	bl	8000f90 <_ZN7CPU_MOD11updateStateEi>
		//if (flag_cpu == CPU_OK) {
			state = transition;
 8002022:	4b26      	ldr	r3, [pc, #152]	@ (80020bc <_Z12select_statev+0x2c4>)
 8002024:	2202      	movs	r2, #2
 8002026:	701a      	strb	r2, [r3, #0]
		//} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
			//state = error;
		 //else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
		break;
 8002028:	e0c1      	b.n	80021ae <_Z12select_statev+0x3b6>
	case transition:
		state_air_n = 1;
 800202a:	2301      	movs	r3, #1
 800202c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002032:	2301      	movs	r3, #1
 8002034:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_PRECHARGE);
 8002036:	2101      	movs	r1, #1
 8002038:	4816      	ldr	r0, [pc, #88]	@ (8002094 <_Z12select_statev+0x29c>)
 800203a:	f7fe ffa9 	bl	8000f90 <_ZN7CPU_MOD11updateStateEi>
		if ((((CPU.voltage_acum)/1000) * 0.9 < CPU.DC_BUS) && (CPU.voltage_acum != 0)){
 800203e:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <_Z12select_statev+0x29c>)
 8002040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002042:	4a1f      	ldr	r2, [pc, #124]	@ (80020c0 <_Z12select_statev+0x2c8>)
 8002044:	fb82 1203 	smull	r1, r2, r2, r3
 8002048:	1192      	asrs	r2, r2, #6
 800204a:	17db      	asrs	r3, r3, #31
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002056:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8002088 <_Z12select_statev+0x290>
 800205a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800205e:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <_Z12select_statev+0x29c>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800206a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800206e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002072:	d400      	bmi.n	8002076 <_Z12select_statev+0x27e>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
		//}else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
		 //else if(flag_current != Current_OK) state = error;
		}
		break;
 8002074:	e098      	b.n	80021a8 <_Z12select_statev+0x3b0>
		if ((((CPU.voltage_acum)/1000) * 0.9 < CPU.DC_BUS) && (CPU.voltage_acum != 0)){
 8002076:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <_Z12select_statev+0x29c>)
 8002078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 8094 	beq.w	80021a8 <_Z12select_statev+0x3b0>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 8002080:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <_Z12select_statev+0x2c4>)
 8002082:	2203      	movs	r2, #3
 8002084:	701a      	strb	r2, [r3, #0]
		break;
 8002086:	e08f      	b.n	80021a8 <_Z12select_statev+0x3b0>
 8002088:	cccccccd 	.word	0xcccccccd
 800208c:	3feccccc 	.word	0x3feccccc
 8002090:	58021800 	.word	0x58021800
 8002094:	24000c20 	.word	0x24000c20
 8002098:	24000004 	.word	0x24000004
 800209c:	24000c14 	.word	0x24000c14
 80020a0:	2400046c 	.word	0x2400046c
 80020a4:	24000ca4 	.word	0x24000ca4
 80020a8:	24000000 	.word	0x24000000
 80020ac:	24000c1c 	.word	0x24000c1c
 80020b0:	24000c18 	.word	0x24000c18
 80020b4:	0800bc20 	.word	0x0800bc20
 80020b8:	24000c5c 	.word	0x24000c5c
 80020bc:	24000ca0 	.word	0x24000ca0
 80020c0:	10624dd3 	.word	0x10624dd3
	case run:
		state_air_n = 1;
 80020c4:	2301      	movs	r3, #1
 80020c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 1;
 80020c8:	2301      	movs	r3, #1
 80020ca:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 80020cc:	2301      	movs	r3, #1
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_POWER);
 80020d0:	2100      	movs	r1, #0
 80020d2:	484f      	ldr	r0, [pc, #316]	@ (8002210 <_Z12select_statev+0x418>)
 80020d4:	f7fe ff5c 	bl	8000f90 <_ZN7CPU_MOD11updateStateEi>
		if ((flag_cpu == CPU_ERROR_COMMUNICATION) && (flag_charger == 1)){
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d106      	bne.n	80020ec <_Z12select_statev+0x2f4>
 80020de:	4b4d      	ldr	r3, [pc, #308]	@ (8002214 <_Z12select_statev+0x41c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d102      	bne.n	80020ec <_Z12select_statev+0x2f4>
			//state = error; //If I disconnect the charger, error
			print((char*)"CPU");
 80020e6:	484c      	ldr	r0, [pc, #304]	@ (8002218 <_Z12select_statev+0x420>)
 80020e8:	f7ff fe0a 	bl	8001d00 <print>
		}
		if (flag_current != Current_OK){
			//state = error; //If current is too high, error
		}
		if(HAL_GPIO_ReadPin(DIGITAL1_GPIO_Port, DIGITAL1_Pin) == GPIO_PIN_RESET){ //SDC IO
 80020ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020f0:	484a      	ldr	r0, [pc, #296]	@ (800221c <_Z12select_statev+0x424>)
 80020f2:	f004 f937 	bl	8006364 <HAL_GPIO_ReadPin>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
			//state = error;
			//print((char*)"DIGITAL");
		}
		break;
 80020fa:	e058      	b.n	80021ae <_Z12select_statev+0x3b6>

	case charge: {
		state_air_n = 1;
 80020fc:	2301      	movs	r3, #1
 80020fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 1;
 8002100:	2301      	movs	r3, #1
 8002102:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002104:	2301      	movs	r3, #1
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_CHARGING);
 8002108:	2104      	movs	r1, #4
 800210a:	4841      	ldr	r0, [pc, #260]	@ (8002210 <_Z12select_statev+0x418>)
 800210c:	f7fe ff40 	bl	8000f90 <_ZN7CPU_MOD11updateStateEi>

		int32_t current_act = current.Current / 1000; //Actual current in mA to check if it's charging
 8002110:	4b43      	ldr	r3, [pc, #268]	@ (8002220 <_Z12select_statev+0x428>)
 8002112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002114:	4a43      	ldr	r2, [pc, #268]	@ (8002224 <_Z12select_statev+0x42c>)
 8002116:	fb82 1203 	smull	r1, r2, r2, r3
 800211a:	1192      	asrs	r2, r2, #6
 800211c:	17db      	asrs	r3, r3, #31
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	607b      	str	r3, [r7, #4]

		if(abs(current_act) < CHARGE_MIN_CURRENT_ABS){
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff fe5a 	bl	8001ddc <_ZSt3absl>
 8002128:	4603      	mov	r3, r0
 800212a:	f240 122b 	movw	r2, #299	@ 0x12b
 800212e:	4293      	cmp	r3, r2
 8002130:	bfd4      	ite	le
 8002132:	2301      	movle	r3, #1
 8002134:	2300      	movgt	r3, #0
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01b      	beq.n	8002174 <_Z12select_statev+0x37c>
			if(charge_current_error_counter == 0)
 800213c:	4b3a      	ldr	r3, [pc, #232]	@ (8002228 <_Z12select_statev+0x430>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d105      	bne.n	8002150 <_Z12select_statev+0x358>
			charge_current_error_counter = HAL_GetTick();
 8002144:	f000 fcde 	bl	8002b04 <HAL_GetTick>
 8002148:	4603      	mov	r3, r0
 800214a:	4a37      	ldr	r2, [pc, #220]	@ (8002228 <_Z12select_statev+0x430>)
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e014      	b.n	800217a <_Z12select_statev+0x382>
			else if(HAL_GetTick() - charge_current_error_counter > CHARGE_FAIL_TIMEOUT_MS)
 8002150:	f000 fcd8 	bl	8002b04 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	4b34      	ldr	r3, [pc, #208]	@ (8002228 <_Z12select_statev+0x430>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002160:	bf8c      	ite	hi
 8002162:	2301      	movhi	r3, #1
 8002164:	2300      	movls	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <_Z12select_statev+0x382>
				state = error; //Charge has been interrupted
 800216c:	4b2f      	ldr	r3, [pc, #188]	@ (800222c <_Z12select_statev+0x434>)
 800216e:	2205      	movs	r2, #5
 8002170:	701a      	strb	r2, [r3, #0]
 8002172:	e002      	b.n	800217a <_Z12select_statev+0x382>
		} else {
			charge_current_error_counter = 0;
 8002174:	4b2c      	ldr	r3, [pc, #176]	@ (8002228 <_Z12select_statev+0x430>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
		}

		if (gpio_charge == GPIO_PIN_RESET){
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d115      	bne.n	80021ac <_Z12select_statev+0x3b4>
			state = start;
 8002180:	4b2a      	ldr	r3, [pc, #168]	@ (800222c <_Z12select_statev+0x434>)
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
			charge_current_error_counter = 0;
 8002186:	4b28      	ldr	r3, [pc, #160]	@ (8002228 <_Z12select_statev+0x430>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
		}

		break;
 800218c:	e00e      	b.n	80021ac <_Z12select_statev+0x3b4>
	}

	case error:
		state_air_n = 0; //All relés closed
 800218e:	2300      	movs	r3, #0
 8002190:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_ERROR);
 800219a:	2103      	movs	r1, #3
 800219c:	481c      	ldr	r0, [pc, #112]	@ (8002210 <_Z12select_statev+0x418>)
 800219e:	f7fe fef7 	bl	8000f90 <_ZN7CPU_MOD11updateStateEi>
		break;
 80021a2:	e004      	b.n	80021ae <_Z12select_statev+0x3b6>
		break;
 80021a4:	bf00      	nop
 80021a6:	e002      	b.n	80021ae <_Z12select_statev+0x3b6>
		break;
 80021a8:	bf00      	nop
 80021aa:	e000      	b.n	80021ae <_Z12select_statev+0x3b6>
		break;
 80021ac:	bf00      	nop
	 print(buffer);
	 sprintf(buffer, " - STATE:     %i\n", state);
	 print(buffer);
	 sprintf(buffer, "***********************\n");
	 print(buffer);*/
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 80021ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <_Z12select_statev+0x3c0>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <_Z12select_statev+0x3c2>
 80021b8:	2300      	movs	r3, #0
 80021ba:	461a      	mov	r2, r3
 80021bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021c0:	481b      	ldr	r0, [pc, #108]	@ (8002230 <_Z12select_statev+0x438>)
 80021c2:	f004 f8e7 	bl	8006394 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 80021c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <_Z12select_statev+0x3d8>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <_Z12select_statev+0x3da>
 80021d0:	2300      	movs	r3, #0
 80021d2:	461a      	mov	r2, r3
 80021d4:	2108      	movs	r1, #8
 80021d6:	4817      	ldr	r0, [pc, #92]	@ (8002234 <_Z12select_statev+0x43c>)
 80021d8:	f004 f8dc 	bl	8006394 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 80021dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <_Z12select_statev+0x3ee>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <_Z12select_statev+0x3f0>
 80021e6:	2300      	movs	r3, #0
 80021e8:	461a      	mov	r2, r3
 80021ea:	2110      	movs	r1, #16
 80021ec:	4811      	ldr	r0, [pc, #68]	@ (8002234 <_Z12select_statev+0x43c>)
 80021ee:	f004 f8d1 	bl	8006394 <HAL_GPIO_WritePin>
			state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 80021f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <_Z12select_statev+0x404>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <_Z12select_statev+0x406>
 80021fc:	2300      	movs	r3, #0
 80021fe:	461a      	mov	r2, r3
 8002200:	2120      	movs	r1, #32
 8002202:	480c      	ldr	r0, [pc, #48]	@ (8002234 <_Z12select_statev+0x43c>)
 8002204:	f004 f8c6 	bl	8006394 <HAL_GPIO_WritePin>
	}




}
 8002208:	bf00      	nop
 800220a:	3730      	adds	r7, #48	@ 0x30
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	24000c20 	.word	0x24000c20
 8002214:	24000c54 	.word	0x24000c54
 8002218:	0800bc40 	.word	0x0800bc40
 800221c:	58021000 	.word	0x58021000
 8002220:	24000c5c 	.word	0x24000c5c
 8002224:	10624dd3 	.word	0x10624dd3
 8002228:	24000c58 	.word	0x24000c58
 800222c:	24000ca0 	.word	0x24000ca0
 8002230:	58021400 	.word	0x58021400
 8002234:	58020c00 	.word	0x58020c00

08002238 <_Z11parse_state6CANMsg>:

/*********************************************************************************************************
 ** Function name:           parse_state
 ** Descriptions:            Function for analysing the data from the CAN
 *********************************************************************************************************/
void parse_state(CANMsg data) {
 8002238:	b084      	sub	sp, #16
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	f107 0c18 	add.w	ip, r7, #24
 8002244:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t time = HAL_GetTick();
 8002248:	f000 fc5c 	bl	8002b04 <HAL_GetTick>
 800224c:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < BMS_N; i++) {
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	e017      	b.n	8002288 <_Z11parse_state6CANMsg+0x50>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], data.time); //Checking if the message received is for  BMS
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	4a25      	ldr	r2, [pc, #148]	@ (80022f8 <_Z11parse_state6CANMsg+0xc0>)
 8002264:	1898      	adds	r0, r3, r2
 8002266:	69b9      	ldr	r1, [r7, #24]
 8002268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800226a:	f107 021d 	add.w	r2, r7, #29
 800226e:	f7fe fbdb 	bl	8000a28 <_ZN7BMS_MOD5parseEmPhm>
 8002272:	4603      	mov	r3, r0
 8002274:	73fb      	strb	r3, [r7, #15]
		if (flag_bms)
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <_Z11parse_state6CANMsg+0x4a>
			i = BMS_N;
 800227c:	4b1f      	ldr	r3, [pc, #124]	@ (80022fc <_Z11parse_state6CANMsg+0xc4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < BMS_N; i++) {
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3301      	adds	r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	4b1c      	ldr	r3, [pc, #112]	@ (80022fc <_Z11parse_state6CANMsg+0xc4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	429a      	cmp	r2, r3
 8002290:	dbe2      	blt.n	8002258 <_Z11parse_state6CANMsg+0x20>
	}

	if (!flag_bms) {
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	f083 0301 	eor.w	r3, r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d025      	beq.n	80022ea <_Z11parse_state6CANMsg+0xb2>
		if (CPU.parse(data.id, &data.buf[0], time))
 800229e:	69b9      	ldr	r1, [r7, #24]
 80022a0:	f107 021d 	add.w	r2, r7, #29
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4816      	ldr	r0, [pc, #88]	@ (8002300 <_Z11parse_state6CANMsg+0xc8>)
 80022a8:	f7fe fe2e 	bl	8000f08 <_ZN7CPU_MOD5parseEmPhm>
			;                       //Cheking if message is for CPU
		if (data.id == 419385575) //If message from this direction received, it is because the charger is connected and the accu is for charging
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	4a15      	ldr	r2, [pc, #84]	@ (8002304 <_Z11parse_state6CANMsg+0xcc>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d11a      	bne.n	80022ea <_Z11parse_state6CANMsg+0xb2>
				{
			for (int i = 0; i < BMS_N; i++) {
 80022b4:	2300      	movs	r3, #0
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	e00c      	b.n	80022d4 <_Z11parse_state6CANMsg+0x9c>
				BMS[i].flag_charger = 1;
 80022ba:	4a0f      	ldr	r2, [pc, #60]	@ (80022f8 <_Z11parse_state6CANMsg+0xc0>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	3398      	adds	r3, #152	@ 0x98
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3301      	adds	r3, #1
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	4b09      	ldr	r3, [pc, #36]	@ (80022fc <_Z11parse_state6CANMsg+0xc4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	429a      	cmp	r2, r3
 80022dc:	dbed      	blt.n	80022ba <_Z11parse_state6CANMsg+0x82>
			}

			current.flag_charger = 1;
 80022de:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <_Z11parse_state6CANMsg+0xd0>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	639a      	str	r2, [r3, #56]	@ 0x38
			flag_charger = 1;
 80022e4:	4b09      	ldr	r3, [pc, #36]	@ (800230c <_Z11parse_state6CANMsg+0xd4>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022f4:	b004      	add	sp, #16
 80022f6:	4770      	bx	lr
 80022f8:	2400046c 	.word	0x2400046c
 80022fc:	24000000 	.word	0x24000000
 8002300:	24000c20 	.word	0x24000c20
 8002304:	18ff50e7 	.word	0x18ff50e7
 8002308:	24000c5c 	.word	0x24000c5c
 800230c:	24000c54 	.word	0x24000c54

08002310 <_Z41__static_initialization_and_destruction_0v>:
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b087      	sub	sp, #28
 8002314:	af06      	add	r7, sp, #24
		};
 8002316:	4c40      	ldr	r4, [pc, #256]	@ (8002418 <_Z41__static_initialization_and_destruction_0v+0x108>)
 8002318:	2337      	movs	r3, #55	@ 0x37
 800231a:	9304      	str	r3, [sp, #16]
 800231c:	2300      	movs	r3, #0
 800231e:	9303      	str	r3, [sp, #12]
 8002320:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002324:	9302      	str	r3, [sp, #8]
 8002326:	2313      	movs	r3, #19
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	233c      	movs	r3, #60	@ 0x3c
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002332:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002336:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800233a:	4620      	mov	r0, r4
 800233c:	f7fe f9d6 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8002340:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 8002344:	239b      	movs	r3, #155	@ 0x9b
 8002346:	9304      	str	r3, [sp, #16]
 8002348:	230a      	movs	r3, #10
 800234a:	9303      	str	r3, [sp, #12]
 800234c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002350:	9302      	str	r3, [sp, #8]
 8002352:	2313      	movs	r3, #19
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	233c      	movs	r3, #60	@ 0x3c
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800235e:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002362:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8002366:	4620      	mov	r0, r4
 8002368:	f7fe f9c0 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 800236c:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 8002370:	23ff      	movs	r3, #255	@ 0xff
 8002372:	9304      	str	r3, [sp, #16]
 8002374:	2314      	movs	r3, #20
 8002376:	9303      	str	r3, [sp, #12]
 8002378:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800237c:	9302      	str	r3, [sp, #8]
 800237e:	2313      	movs	r3, #19
 8002380:	9301      	str	r3, [sp, #4]
 8002382:	233c      	movs	r3, #60	@ 0x3c
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800238a:	f241 0268 	movw	r2, #4200	@ 0x1068
 800238e:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8002392:	4620      	mov	r0, r4
 8002394:	f7fe f9aa 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8002398:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 800239c:	f240 1363 	movw	r3, #355	@ 0x163
 80023a0:	9304      	str	r3, [sp, #16]
 80023a2:	231e      	movs	r3, #30
 80023a4:	9303      	str	r3, [sp, #12]
 80023a6:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80023aa:	9302      	str	r3, [sp, #8]
 80023ac:	2313      	movs	r3, #19
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	233c      	movs	r3, #60	@ 0x3c
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80023b8:	f241 0268 	movw	r2, #4200	@ 0x1068
 80023bc:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 80023c0:	4620      	mov	r0, r4
 80023c2:	f7fe f993 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80023c6:	f504 70c4 	add.w	r0, r4, #392	@ 0x188
 80023ca:	f240 13c7 	movw	r3, #455	@ 0x1c7
 80023ce:	9304      	str	r3, [sp, #16]
 80023d0:	2328      	movs	r3, #40	@ 0x28
 80023d2:	9303      	str	r3, [sp, #12]
 80023d4:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80023d8:	9302      	str	r3, [sp, #8]
 80023da:	2313      	movs	r3, #19
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	233c      	movs	r3, #60	@ 0x3c
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80023e6:	f241 0268 	movw	r2, #4200	@ 0x1068
 80023ea:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 80023ee:	f7fe f97d 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 80023f2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80023f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023fa:	2120      	movs	r1, #32
 80023fc:	4807      	ldr	r0, [pc, #28]	@ (800241c <_Z41__static_initialization_and_destruction_0v+0x10c>)
 80023fe:	f7fe fd31 	bl	8000e64 <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 8002402:	22c8      	movs	r2, #200	@ 0xc8
 8002404:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002408:	4805      	ldr	r0, [pc, #20]	@ (8002420 <_Z41__static_initialization_and_destruction_0v+0x110>)
 800240a:	f7fe fdd3 	bl	8000fb4 <_ZN11Current_MODC1Emi>
}
 800240e:	bf00      	nop
 8002410:	3704      	adds	r7, #4
 8002412:	46bd      	mov	sp, r7
 8002414:	bd90      	pop	{r4, r7, pc}
 8002416:	bf00      	nop
 8002418:	2400046c 	.word	0x2400046c
 800241c:	24000c20 	.word	0x24000c20
 8002420:	24000c5c 	.word	0x24000c5c

08002424 <_GLOBAL__sub_I_BMS>:
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
 8002428:	f7ff ff72 	bl	8002310 <_Z41__static_initialization_and_destruction_0v>
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002436:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <HAL_MspInit+0x30>)
 8002438:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800243c:	4a08      	ldr	r2, [pc, #32]	@ (8002460 <HAL_MspInit+0x30>)
 800243e:	f043 0302 	orr.w	r3, r3, #2
 8002442:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002446:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <HAL_MspInit+0x30>)
 8002448:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	58024400 	.word	0x58024400

08002464 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08c      	sub	sp, #48	@ 0x30
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a31      	ldr	r2, [pc, #196]	@ (8002548 <HAL_ADC_MspInit+0xe4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d12b      	bne.n	80024de <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002486:	4b31      	ldr	r3, [pc, #196]	@ (800254c <HAL_ADC_MspInit+0xe8>)
 8002488:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800248c:	4a2f      	ldr	r2, [pc, #188]	@ (800254c <HAL_ADC_MspInit+0xe8>)
 800248e:	f043 0320 	orr.w	r3, r3, #32
 8002492:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002496:	4b2d      	ldr	r3, [pc, #180]	@ (800254c <HAL_ADC_MspInit+0xe8>)
 8002498:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024a4:	4b29      	ldr	r3, [pc, #164]	@ (800254c <HAL_ADC_MspInit+0xe8>)
 80024a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024aa:	4a28      	ldr	r2, [pc, #160]	@ (800254c <HAL_ADC_MspInit+0xe8>)
 80024ac:	f043 0320 	orr.w	r3, r3, #32
 80024b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024b4:	4b25      	ldr	r3, [pc, #148]	@ (800254c <HAL_ADC_MspInit+0xe8>)
 80024b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80024c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80024c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024c8:	2303      	movs	r3, #3
 80024ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024d0:	f107 031c 	add.w	r3, r7, #28
 80024d4:	4619      	mov	r1, r3
 80024d6:	481e      	ldr	r0, [pc, #120]	@ (8002550 <HAL_ADC_MspInit+0xec>)
 80024d8:	f003 fd9c 	bl	8006014 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 80024dc:	e02f      	b.n	800253e <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002554 <HAL_ADC_MspInit+0xf0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d12a      	bne.n	800253e <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80024e8:	4b18      	ldr	r3, [pc, #96]	@ (800254c <HAL_ADC_MspInit+0xe8>)
 80024ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ee:	4a17      	ldr	r2, [pc, #92]	@ (800254c <HAL_ADC_MspInit+0xe8>)
 80024f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024f8:	4b14      	ldr	r3, [pc, #80]	@ (800254c <HAL_ADC_MspInit+0xe8>)
 80024fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002506:	4b11      	ldr	r3, [pc, #68]	@ (800254c <HAL_ADC_MspInit+0xe8>)
 8002508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800250c:	4a0f      	ldr	r2, [pc, #60]	@ (800254c <HAL_ADC_MspInit+0xe8>)
 800250e:	f043 0320 	orr.w	r3, r3, #32
 8002512:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002516:	4b0d      	ldr	r3, [pc, #52]	@ (800254c <HAL_ADC_MspInit+0xe8>)
 8002518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002524:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800252a:	2303      	movs	r3, #3
 800252c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002532:	f107 031c 	add.w	r3, r7, #28
 8002536:	4619      	mov	r1, r3
 8002538:	4805      	ldr	r0, [pc, #20]	@ (8002550 <HAL_ADC_MspInit+0xec>)
 800253a:	f003 fd6b 	bl	8006014 <HAL_GPIO_Init>
}
 800253e:	bf00      	nop
 8002540:	3730      	adds	r7, #48	@ 0x30
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40022000 	.word	0x40022000
 800254c:	58024400 	.word	0x58024400
 8002550:	58021400 	.word	0x58021400
 8002554:	58026000 	.word	0x58026000

08002558 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b0ba      	sub	sp, #232	@ 0xe8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002570:	f107 0318 	add.w	r3, r7, #24
 8002574:	22b8      	movs	r2, #184	@ 0xb8
 8002576:	2100      	movs	r1, #0
 8002578:	4618      	mov	r0, r3
 800257a:	f008 fd51 	bl	800b020 <memset>
  if(hfdcan->Instance==FDCAN1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a5a      	ldr	r2, [pc, #360]	@ (80026ec <HAL_FDCAN_MspInit+0x194>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d157      	bne.n	8002638 <HAL_FDCAN_MspInit+0xe0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002588:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002594:	2300      	movs	r3, #0
 8002596:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800259a:	f107 0318 	add.w	r3, r7, #24
 800259e:	4618      	mov	r0, r3
 80025a0:	f004 feb2 	bl	8007308 <HAL_RCCEx_PeriphCLKConfig>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80025aa:	f7ff fc11 	bl	8001dd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80025ae:	4b50      	ldr	r3, [pc, #320]	@ (80026f0 <HAL_FDCAN_MspInit+0x198>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	4a4e      	ldr	r2, [pc, #312]	@ (80026f0 <HAL_FDCAN_MspInit+0x198>)
 80025b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80025b8:	4b4d      	ldr	r3, [pc, #308]	@ (80026f0 <HAL_FDCAN_MspInit+0x198>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d10e      	bne.n	80025de <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80025c0:	4b4c      	ldr	r3, [pc, #304]	@ (80026f4 <HAL_FDCAN_MspInit+0x19c>)
 80025c2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80025c6:	4a4b      	ldr	r2, [pc, #300]	@ (80026f4 <HAL_FDCAN_MspInit+0x19c>)
 80025c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025cc:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80025d0:	4b48      	ldr	r3, [pc, #288]	@ (80026f4 <HAL_FDCAN_MspInit+0x19c>)
 80025d2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80025d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025de:	4b45      	ldr	r3, [pc, #276]	@ (80026f4 <HAL_FDCAN_MspInit+0x19c>)
 80025e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025e4:	4a43      	ldr	r2, [pc, #268]	@ (80026f4 <HAL_FDCAN_MspInit+0x19c>)
 80025e6:	f043 0308 	orr.w	r3, r3, #8
 80025ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025ee:	4b41      	ldr	r3, [pc, #260]	@ (80026f4 <HAL_FDCAN_MspInit+0x19c>)
 80025f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025fc:	2303      	movs	r3, #3
 80025fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260e:	2300      	movs	r3, #0
 8002610:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002614:	2309      	movs	r3, #9
 8002616:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800261a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800261e:	4619      	mov	r1, r3
 8002620:	4835      	ldr	r0, [pc, #212]	@ (80026f8 <HAL_FDCAN_MspInit+0x1a0>)
 8002622:	f003 fcf7 	bl	8006014 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002626:	2200      	movs	r2, #0
 8002628:	2100      	movs	r1, #0
 800262a:	2013      	movs	r0, #19
 800262c:	f002 faef 	bl	8004c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002630:	2013      	movs	r0, #19
 8002632:	f002 fb06 	bl	8004c42 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002636:	e054      	b.n	80026e2 <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a2f      	ldr	r2, [pc, #188]	@ (80026fc <HAL_FDCAN_MspInit+0x1a4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d14f      	bne.n	80026e2 <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002642:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002654:	f107 0318 	add.w	r3, r7, #24
 8002658:	4618      	mov	r0, r3
 800265a:	f004 fe55 	bl	8007308 <HAL_RCCEx_PeriphCLKConfig>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002664:	f7ff fbb4 	bl	8001dd0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002668:	4b21      	ldr	r3, [pc, #132]	@ (80026f0 <HAL_FDCAN_MspInit+0x198>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3301      	adds	r3, #1
 800266e:	4a20      	ldr	r2, [pc, #128]	@ (80026f0 <HAL_FDCAN_MspInit+0x198>)
 8002670:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002672:	4b1f      	ldr	r3, [pc, #124]	@ (80026f0 <HAL_FDCAN_MspInit+0x198>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d10e      	bne.n	8002698 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800267a:	4b1e      	ldr	r3, [pc, #120]	@ (80026f4 <HAL_FDCAN_MspInit+0x19c>)
 800267c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002680:	4a1c      	ldr	r2, [pc, #112]	@ (80026f4 <HAL_FDCAN_MspInit+0x19c>)
 8002682:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002686:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800268a:	4b1a      	ldr	r3, [pc, #104]	@ (80026f4 <HAL_FDCAN_MspInit+0x19c>)
 800268c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002698:	4b16      	ldr	r3, [pc, #88]	@ (80026f4 <HAL_FDCAN_MspInit+0x19c>)
 800269a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800269e:	4a15      	ldr	r2, [pc, #84]	@ (80026f4 <HAL_FDCAN_MspInit+0x19c>)
 80026a0:	f043 0302 	orr.w	r3, r3, #2
 80026a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026a8:	4b12      	ldr	r3, [pc, #72]	@ (80026f4 <HAL_FDCAN_MspInit+0x19c>)
 80026aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80026b6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80026ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026be:	2302      	movs	r3, #2
 80026c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80026d0:	2309      	movs	r3, #9
 80026d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80026da:	4619      	mov	r1, r3
 80026dc:	4808      	ldr	r0, [pc, #32]	@ (8002700 <HAL_FDCAN_MspInit+0x1a8>)
 80026de:	f003 fc99 	bl	8006014 <HAL_GPIO_Init>
}
 80026e2:	bf00      	nop
 80026e4:	37e8      	adds	r7, #232	@ 0xe8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	4000a000 	.word	0x4000a000
 80026f0:	24000cf4 	.word	0x24000cf4
 80026f4:	58024400 	.word	0x58024400
 80026f8:	58020c00 	.word	0x58020c00
 80026fc:	4000a400 	.word	0x4000a400
 8002700:	58020400 	.word	0x58020400

08002704 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b0b8      	sub	sp, #224	@ 0xe0
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	22b8      	movs	r2, #184	@ 0xb8
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f008 fc7b 	bl	800b020 <memset>
  if(huart->Instance==USART2)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a26      	ldr	r2, [pc, #152]	@ (80027c8 <HAL_UART_MspInit+0xc4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d145      	bne.n	80027c0 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002734:	f04f 0202 	mov.w	r2, #2
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002746:	f107 0310 	add.w	r3, r7, #16
 800274a:	4618      	mov	r0, r3
 800274c:	f004 fddc 	bl	8007308 <HAL_RCCEx_PeriphCLKConfig>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002756:	f7ff fb3b 	bl	8001dd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800275a:	4b1c      	ldr	r3, [pc, #112]	@ (80027cc <HAL_UART_MspInit+0xc8>)
 800275c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002760:	4a1a      	ldr	r2, [pc, #104]	@ (80027cc <HAL_UART_MspInit+0xc8>)
 8002762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002766:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800276a:	4b18      	ldr	r3, [pc, #96]	@ (80027cc <HAL_UART_MspInit+0xc8>)
 800276c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002778:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <HAL_UART_MspInit+0xc8>)
 800277a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800277e:	4a13      	ldr	r2, [pc, #76]	@ (80027cc <HAL_UART_MspInit+0xc8>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002788:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <HAL_UART_MspInit+0xc8>)
 800278a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002796:	230c      	movs	r3, #12
 8002798:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279c:	2302      	movs	r3, #2
 800279e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027ae:	2307      	movs	r3, #7
 80027b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80027b8:	4619      	mov	r1, r3
 80027ba:	4805      	ldr	r0, [pc, #20]	@ (80027d0 <HAL_UART_MspInit+0xcc>)
 80027bc:	f003 fc2a 	bl	8006014 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80027c0:	bf00      	nop
 80027c2:	37e0      	adds	r7, #224	@ 0xe0
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40004400 	.word	0x40004400
 80027cc:	58024400 	.word	0x58024400
 80027d0:	58020000 	.word	0x58020000

080027d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027d8:	bf00      	nop
 80027da:	e7fd      	b.n	80027d8 <NMI_Handler+0x4>

080027dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <HardFault_Handler+0x4>

080027e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <MemManage_Handler+0x4>

080027ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <BusFault_Handler+0x4>

080027f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <UsageFault_Handler+0x4>

080027fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800282a:	f000 f957 	bl	8002adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002838:	4802      	ldr	r0, [pc, #8]	@ (8002844 <FDCAN1_IT0_IRQHandler+0x10>)
 800283a:	f002 fedd 	bl	80055f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	24000164 	.word	0x24000164

08002848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002850:	4a14      	ldr	r2, [pc, #80]	@ (80028a4 <_sbrk+0x5c>)
 8002852:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <_sbrk+0x60>)
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800285c:	4b13      	ldr	r3, [pc, #76]	@ (80028ac <_sbrk+0x64>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002864:	4b11      	ldr	r3, [pc, #68]	@ (80028ac <_sbrk+0x64>)
 8002866:	4a12      	ldr	r2, [pc, #72]	@ (80028b0 <_sbrk+0x68>)
 8002868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800286a:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <_sbrk+0x64>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	429a      	cmp	r2, r3
 8002876:	d207      	bcs.n	8002888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002878:	f008 fbda 	bl	800b030 <__errno>
 800287c:	4603      	mov	r3, r0
 800287e:	220c      	movs	r2, #12
 8002880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002882:	f04f 33ff 	mov.w	r3, #4294967295
 8002886:	e009      	b.n	800289c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002888:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <_sbrk+0x64>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800288e:	4b07      	ldr	r3, [pc, #28]	@ (80028ac <_sbrk+0x64>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	4a05      	ldr	r2, [pc, #20]	@ (80028ac <_sbrk+0x64>)
 8002898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800289a:	68fb      	ldr	r3, [r7, #12]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	24050000 	.word	0x24050000
 80028a8:	00000400 	.word	0x00000400
 80028ac:	24000cf8 	.word	0x24000cf8
 80028b0:	24000e48 	.word	0x24000e48

080028b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028b8:	4b32      	ldr	r3, [pc, #200]	@ (8002984 <SystemInit+0xd0>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028be:	4a31      	ldr	r2, [pc, #196]	@ (8002984 <SystemInit+0xd0>)
 80028c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002988 <SystemInit+0xd4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 030f 	and.w	r3, r3, #15
 80028d0:	2b06      	cmp	r3, #6
 80028d2:	d807      	bhi.n	80028e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002988 <SystemInit+0xd4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f023 030f 	bic.w	r3, r3, #15
 80028dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002988 <SystemInit+0xd4>)
 80028de:	f043 0307 	orr.w	r3, r3, #7
 80028e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80028e4:	4b29      	ldr	r3, [pc, #164]	@ (800298c <SystemInit+0xd8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a28      	ldr	r2, [pc, #160]	@ (800298c <SystemInit+0xd8>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028f0:	4b26      	ldr	r3, [pc, #152]	@ (800298c <SystemInit+0xd8>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80028f6:	4b25      	ldr	r3, [pc, #148]	@ (800298c <SystemInit+0xd8>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4924      	ldr	r1, [pc, #144]	@ (800298c <SystemInit+0xd8>)
 80028fc:	4b24      	ldr	r3, [pc, #144]	@ (8002990 <SystemInit+0xdc>)
 80028fe:	4013      	ands	r3, r2
 8002900:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002902:	4b21      	ldr	r3, [pc, #132]	@ (8002988 <SystemInit+0xd4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800290e:	4b1e      	ldr	r3, [pc, #120]	@ (8002988 <SystemInit+0xd4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 030f 	bic.w	r3, r3, #15
 8002916:	4a1c      	ldr	r2, [pc, #112]	@ (8002988 <SystemInit+0xd4>)
 8002918:	f043 0307 	orr.w	r3, r3, #7
 800291c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800291e:	4b1b      	ldr	r3, [pc, #108]	@ (800298c <SystemInit+0xd8>)
 8002920:	2200      	movs	r2, #0
 8002922:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002924:	4b19      	ldr	r3, [pc, #100]	@ (800298c <SystemInit+0xd8>)
 8002926:	2200      	movs	r2, #0
 8002928:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800292a:	4b18      	ldr	r3, [pc, #96]	@ (800298c <SystemInit+0xd8>)
 800292c:	2200      	movs	r2, #0
 800292e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002930:	4b16      	ldr	r3, [pc, #88]	@ (800298c <SystemInit+0xd8>)
 8002932:	4a18      	ldr	r2, [pc, #96]	@ (8002994 <SystemInit+0xe0>)
 8002934:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002936:	4b15      	ldr	r3, [pc, #84]	@ (800298c <SystemInit+0xd8>)
 8002938:	4a17      	ldr	r2, [pc, #92]	@ (8002998 <SystemInit+0xe4>)
 800293a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800293c:	4b13      	ldr	r3, [pc, #76]	@ (800298c <SystemInit+0xd8>)
 800293e:	4a17      	ldr	r2, [pc, #92]	@ (800299c <SystemInit+0xe8>)
 8002940:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002942:	4b12      	ldr	r3, [pc, #72]	@ (800298c <SystemInit+0xd8>)
 8002944:	2200      	movs	r2, #0
 8002946:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002948:	4b10      	ldr	r3, [pc, #64]	@ (800298c <SystemInit+0xd8>)
 800294a:	4a14      	ldr	r2, [pc, #80]	@ (800299c <SystemInit+0xe8>)
 800294c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800294e:	4b0f      	ldr	r3, [pc, #60]	@ (800298c <SystemInit+0xd8>)
 8002950:	2200      	movs	r2, #0
 8002952:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002954:	4b0d      	ldr	r3, [pc, #52]	@ (800298c <SystemInit+0xd8>)
 8002956:	4a11      	ldr	r2, [pc, #68]	@ (800299c <SystemInit+0xe8>)
 8002958:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800295a:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <SystemInit+0xd8>)
 800295c:	2200      	movs	r2, #0
 800295e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002960:	4b0a      	ldr	r3, [pc, #40]	@ (800298c <SystemInit+0xd8>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a09      	ldr	r2, [pc, #36]	@ (800298c <SystemInit+0xd8>)
 8002966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800296a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800296c:	4b07      	ldr	r3, [pc, #28]	@ (800298c <SystemInit+0xd8>)
 800296e:	2200      	movs	r2, #0
 8002970:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002972:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <SystemInit+0xec>)
 8002974:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002978:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800297a:	bf00      	nop
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000ed00 	.word	0xe000ed00
 8002988:	52002000 	.word	0x52002000
 800298c:	58024400 	.word	0x58024400
 8002990:	eaf6ed7f 	.word	0xeaf6ed7f
 8002994:	02020200 	.word	0x02020200
 8002998:	01ff0000 	.word	0x01ff0000
 800299c:	01010280 	.word	0x01010280
 80029a0:	52004000 	.word	0x52004000

080029a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80029a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029a8:	f7ff ff84 	bl	80028b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029ac:	480c      	ldr	r0, [pc, #48]	@ (80029e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029ae:	490d      	ldr	r1, [pc, #52]	@ (80029e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029b0:	4a0d      	ldr	r2, [pc, #52]	@ (80029e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029b4:	e002      	b.n	80029bc <LoopCopyDataInit>

080029b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ba:	3304      	adds	r3, #4

080029bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029c0:	d3f9      	bcc.n	80029b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029c2:	4a0a      	ldr	r2, [pc, #40]	@ (80029ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029c4:	4c0a      	ldr	r4, [pc, #40]	@ (80029f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029c8:	e001      	b.n	80029ce <LoopFillZerobss>

080029ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ca:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 80029cc:	3204      	adds	r2, #4

080029ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029d0:	d3fb      	bcc.n	80029ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029d2:	f008 fb33 	bl	800b03c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029d6:	f7fe fc41 	bl	800125c <main>
  bx  lr
 80029da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029dc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80029e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80029e4:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 80029e8:	0800bd20 	.word	0x0800bd20
  ldr r2, =_sbss
 80029ec:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 80029f0:	24000e48 	.word	0x24000e48

080029f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029f4:	e7fe      	b.n	80029f4 <ADC3_IRQHandler>
	...

080029f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029fe:	2003      	movs	r0, #3
 8002a00:	f002 f8fa 	bl	8004bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a04:	f004 faaa 	bl	8006f5c <HAL_RCC_GetSysClockFreq>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	4b15      	ldr	r3, [pc, #84]	@ (8002a60 <HAL_Init+0x68>)
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	0a1b      	lsrs	r3, r3, #8
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	4913      	ldr	r1, [pc, #76]	@ (8002a64 <HAL_Init+0x6c>)
 8002a16:	5ccb      	ldrb	r3, [r1, r3]
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a22:	4b0f      	ldr	r3, [pc, #60]	@ (8002a60 <HAL_Init+0x68>)
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a64 <HAL_Init+0x6c>)
 8002a2c:	5cd3      	ldrb	r3, [r2, r3]
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	fa22 f303 	lsr.w	r3, r2, r3
 8002a38:	4a0b      	ldr	r2, [pc, #44]	@ (8002a68 <HAL_Init+0x70>)
 8002a3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a6c <HAL_Init+0x74>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a42:	200f      	movs	r0, #15
 8002a44:	f000 f814 	bl	8002a70 <HAL_InitTick>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e002      	b.n	8002a58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a52:	f7ff fced 	bl	8002430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	58024400 	.word	0x58024400
 8002a64:	0800bc90 	.word	0x0800bc90
 8002a68:	2400000c 	.word	0x2400000c
 8002a6c:	24000008 	.word	0x24000008

08002a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a78:	4b15      	ldr	r3, [pc, #84]	@ (8002ad0 <HAL_InitTick+0x60>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e021      	b.n	8002ac8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a84:	4b13      	ldr	r3, [pc, #76]	@ (8002ad4 <HAL_InitTick+0x64>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <HAL_InitTick+0x60>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f002 f8df 	bl	8004c5e <HAL_SYSTICK_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e00e      	b.n	8002ac8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b0f      	cmp	r3, #15
 8002aae:	d80a      	bhi.n	8002ac6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab8:	f002 f8a9 	bl	8004c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002abc:	4a06      	ldr	r2, [pc, #24]	@ (8002ad8 <HAL_InitTick+0x68>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	24000014 	.word	0x24000014
 8002ad4:	24000008 	.word	0x24000008
 8002ad8:	24000010 	.word	0x24000010

08002adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ae0:	4b06      	ldr	r3, [pc, #24]	@ (8002afc <HAL_IncTick+0x20>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4b06      	ldr	r3, [pc, #24]	@ (8002b00 <HAL_IncTick+0x24>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	4a04      	ldr	r2, [pc, #16]	@ (8002b00 <HAL_IncTick+0x24>)
 8002aee:	6013      	str	r3, [r2, #0]
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	24000014 	.word	0x24000014
 8002b00:	24000cfc 	.word	0x24000cfc

08002b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return uwTick;
 8002b08:	4b03      	ldr	r3, [pc, #12]	@ (8002b18 <HAL_GetTick+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	24000cfc 	.word	0x24000cfc

08002b1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	609a      	str	r2, [r3, #8]
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a18      	ldr	r2, [pc, #96]	@ (8002bf4 <LL_ADC_SetChannelPreselection+0x70>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d027      	beq.n	8002be6 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d107      	bne.n	8002bb0 <LL_ADC_SetChannelPreselection+0x2c>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	0e9b      	lsrs	r3, r3, #26
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2201      	movs	r2, #1
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	e015      	b.n	8002bdc <LL_ADC_SetChannelPreselection+0x58>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	e003      	b.n	8002bd2 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	69d2      	ldr	r2, [r2, #28]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	58026000 	.word	0x58026000

08002bf8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3360      	adds	r3, #96	@ 0x60
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a10      	ldr	r2, [pc, #64]	@ (8002c58 <LL_ADC_SetOffset+0x60>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d10b      	bne.n	8002c34 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002c32:	e00b      	b.n	8002c4c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	430b      	orrs	r3, r1
 8002c46:	431a      	orrs	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	601a      	str	r2, [r3, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	371c      	adds	r7, #28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	58026000 	.word	0x58026000

08002c5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3360      	adds	r3, #96	@ 0x60
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	611a      	str	r2, [r3, #16]
}
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4a0c      	ldr	r2, [pc, #48]	@ (8002cfc <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00e      	beq.n	8002cee <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3360      	adds	r3, #96	@ 0x60
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	601a      	str	r2, [r3, #0]
  }
}
 8002cee:	bf00      	nop
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	58026000 	.word	0x58026000

08002d00 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d40 <LL_ADC_SetOffsetSaturation+0x40>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d10e      	bne.n	8002d32 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3360      	adds	r3, #96	@ 0x60
 8002d18:	461a      	mov	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002d32:	bf00      	nop
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	58026000 	.word	0x58026000

08002d44 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a0c      	ldr	r2, [pc, #48]	@ (8002d84 <LL_ADC_SetOffsetSign+0x40>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d10e      	bne.n	8002d76 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	3360      	adds	r3, #96	@ 0x60
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002d76:	bf00      	nop
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	58026000 	.word	0x58026000

08002d88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3360      	adds	r3, #96	@ 0x60
 8002d98:	461a      	mov	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4a0c      	ldr	r2, [pc, #48]	@ (8002dd8 <LL_ADC_SetOffsetState+0x50>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d108      	bne.n	8002dbc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002dba:	e007      	b.n	8002dcc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	601a      	str	r2, [r3, #0]
}
 8002dcc:	bf00      	nop
 8002dce:	371c      	adds	r7, #28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	58026000 	.word	0x58026000

08002ddc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b087      	sub	sp, #28
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3330      	adds	r3, #48	@ 0x30
 8002e12:	461a      	mov	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	4413      	add	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	211f      	movs	r1, #31
 8002e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	401a      	ands	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	0e9b      	lsrs	r3, r3, #26
 8002e3a:	f003 011f 	and.w	r1, r3, #31
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	fa01 f303 	lsl.w	r3, r1, r3
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e4e:	bf00      	nop
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b087      	sub	sp, #28
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3314      	adds	r3, #20
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	0e5b      	lsrs	r3, r3, #25
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	4413      	add	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	0d1b      	lsrs	r3, r3, #20
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	2107      	movs	r1, #7
 8002e88:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	401a      	ands	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	0d1b      	lsrs	r3, r3, #20
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ea4:	bf00      	nop
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4a1a      	ldr	r2, [pc, #104]	@ (8002f28 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d115      	bne.n	8002ef0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f003 0318 	and.w	r3, r3, #24
 8002eda:	4914      	ldr	r1, [pc, #80]	@ (8002f2c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002edc:	40d9      	lsrs	r1, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	400b      	ands	r3, r1
 8002ee2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002eee:	e014      	b.n	8002f1a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002efc:	43db      	mvns	r3, r3
 8002efe:	401a      	ands	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f003 0318 	and.w	r3, r3, #24
 8002f06:	4909      	ldr	r1, [pc, #36]	@ (8002f2c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002f08:	40d9      	lsrs	r1, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	400b      	ands	r3, r1
 8002f0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f12:	431a      	orrs	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	58026000 	.word	0x58026000
 8002f2c:	000fffff 	.word	0x000fffff

08002f30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 031f 	and.w	r3, r3, #31
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	4b04      	ldr	r3, [pc, #16]	@ (8002f88 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6093      	str	r3, [r2, #8]
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	5fffffc0 	.word	0x5fffffc0

08002f8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fa0:	d101      	bne.n	8002fa6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	6fffffc0 	.word	0x6fffffc0

08002fdc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ff0:	d101      	bne.n	8002ff6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	4b05      	ldr	r3, [pc, #20]	@ (8003028 <LL_ADC_Enable+0x24>)
 8003012:	4013      	ands	r3, r2
 8003014:	f043 0201 	orr.w	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	7fffffc0 	.word	0x7fffffc0

0800302c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <LL_ADC_Disable+0x24>)
 800303a:	4013      	ands	r3, r2
 800303c:	f043 0202 	orr.w	r2, r3, #2
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	7fffffc0 	.word	0x7fffffc0

08003054 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <LL_ADC_IsEnabled+0x18>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <LL_ADC_IsEnabled+0x1a>
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b02      	cmp	r3, #2
 800308c:	d101      	bne.n	8003092 <LL_ADC_IsDisableOngoing+0x18>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <LL_ADC_IsDisableOngoing+0x1a>
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	4b05      	ldr	r3, [pc, #20]	@ (80030c4 <LL_ADC_REG_StartConversion+0x24>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	f043 0204 	orr.w	r2, r3, #4
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	7fffffc0 	.word	0x7fffffc0

080030c8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	4b05      	ldr	r3, [pc, #20]	@ (80030ec <LL_ADC_REG_StopConversion+0x24>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	f043 0210 	orr.w	r2, r3, #16
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	7fffffc0 	.word	0x7fffffc0

080030f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b04      	cmp	r3, #4
 8003102:	d101      	bne.n	8003108 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	4b05      	ldr	r3, [pc, #20]	@ (800313c <LL_ADC_INJ_StopConversion+0x24>)
 8003126:	4013      	ands	r3, r2
 8003128:	f043 0220 	orr.w	r2, r3, #32
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	7fffffc0 	.word	0x7fffffc0

08003140 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b08      	cmp	r3, #8
 8003152:	d101      	bne.n	8003158 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b089      	sub	sp, #36	@ 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e1ee      	b.n	8003560 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318c:	2b00      	cmp	r3, #0
 800318e:	d109      	bne.n	80031a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff f967 	bl	8002464 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff feef 	bl	8002f8c <LL_ADC_IsDeepPowerDownEnabled>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d004      	beq.n	80031be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fed5 	bl	8002f68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff0a 	bl	8002fdc <LL_ADC_IsInternalRegulatorEnabled>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d114      	bne.n	80031f8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff feee 	bl	8002fb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003414 <HAL_ADC_Init+0x2ac>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	099b      	lsrs	r3, r3, #6
 80031de:	4a8e      	ldr	r2, [pc, #568]	@ (8003418 <HAL_ADC_Init+0x2b0>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	099b      	lsrs	r3, r3, #6
 80031e6:	3301      	adds	r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031ea:	e002      	b.n	80031f2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f9      	bne.n	80031ec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff feed 	bl	8002fdc <LL_ADC_IsInternalRegulatorEnabled>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10d      	bne.n	8003224 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800320c:	f043 0210 	orr.w	r2, r3, #16
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003218:	f043 0201 	orr.w	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff61 	bl	80030f0 <LL_ADC_REG_IsConversionOngoing>
 800322e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b00      	cmp	r3, #0
 800323a:	f040 8188 	bne.w	800354e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	f040 8184 	bne.w	800354e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800324e:	f043 0202 	orr.w	r2, r3, #2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fefa 	bl	8003054 <LL_ADC_IsEnabled>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d136      	bne.n	80032d4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a6c      	ldr	r2, [pc, #432]	@ (800341c <HAL_ADC_Init+0x2b4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <HAL_ADC_Init+0x112>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a6a      	ldr	r2, [pc, #424]	@ (8003420 <HAL_ADC_Init+0x2b8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d10e      	bne.n	8003298 <HAL_ADC_Init+0x130>
 800327a:	4868      	ldr	r0, [pc, #416]	@ (800341c <HAL_ADC_Init+0x2b4>)
 800327c:	f7ff feea 	bl	8003054 <LL_ADC_IsEnabled>
 8003280:	4604      	mov	r4, r0
 8003282:	4867      	ldr	r0, [pc, #412]	@ (8003420 <HAL_ADC_Init+0x2b8>)
 8003284:	f7ff fee6 	bl	8003054 <LL_ADC_IsEnabled>
 8003288:	4603      	mov	r3, r0
 800328a:	4323      	orrs	r3, r4
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	e008      	b.n	80032aa <HAL_ADC_Init+0x142>
 8003298:	4862      	ldr	r0, [pc, #392]	@ (8003424 <HAL_ADC_Init+0x2bc>)
 800329a:	f7ff fedb 	bl	8003054 <LL_ADC_IsEnabled>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d012      	beq.n	80032d4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a5a      	ldr	r2, [pc, #360]	@ (800341c <HAL_ADC_Init+0x2b4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d004      	beq.n	80032c2 <HAL_ADC_Init+0x15a>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a58      	ldr	r2, [pc, #352]	@ (8003420 <HAL_ADC_Init+0x2b8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <HAL_ADC_Init+0x15e>
 80032c2:	4a59      	ldr	r2, [pc, #356]	@ (8003428 <HAL_ADC_Init+0x2c0>)
 80032c4:	e000      	b.n	80032c8 <HAL_ADC_Init+0x160>
 80032c6:	4a59      	ldr	r2, [pc, #356]	@ (800342c <HAL_ADC_Init+0x2c4>)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4619      	mov	r1, r3
 80032ce:	4610      	mov	r0, r2
 80032d0:	f7ff fc24 	bl	8002b1c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a52      	ldr	r2, [pc, #328]	@ (8003424 <HAL_ADC_Init+0x2bc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d129      	bne.n	8003332 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	7e5b      	ldrb	r3, [r3, #25]
 80032e2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80032e8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80032ee:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d013      	beq.n	8003320 <HAL_ADC_Init+0x1b8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b0c      	cmp	r3, #12
 80032fe:	d00d      	beq.n	800331c <HAL_ADC_Init+0x1b4>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b1c      	cmp	r3, #28
 8003306:	d007      	beq.n	8003318 <HAL_ADC_Init+0x1b0>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b18      	cmp	r3, #24
 800330e:	d101      	bne.n	8003314 <HAL_ADC_Init+0x1ac>
 8003310:	2318      	movs	r3, #24
 8003312:	e006      	b.n	8003322 <HAL_ADC_Init+0x1ba>
 8003314:	2300      	movs	r3, #0
 8003316:	e004      	b.n	8003322 <HAL_ADC_Init+0x1ba>
 8003318:	2310      	movs	r3, #16
 800331a:	e002      	b.n	8003322 <HAL_ADC_Init+0x1ba>
 800331c:	2308      	movs	r3, #8
 800331e:	e000      	b.n	8003322 <HAL_ADC_Init+0x1ba>
 8003320:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003322:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3020 	ldrb.w	r3, [r3, #32]
 800332a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	e00e      	b.n	8003350 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	7e5b      	ldrb	r3, [r3, #25]
 8003336:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800333c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003342:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800334a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800334c:	4313      	orrs	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d106      	bne.n	8003368 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	3b01      	subs	r3, #1
 8003360:	045b      	lsls	r3, r3, #17
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4313      	orrs	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d009      	beq.n	8003384 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003374:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a26      	ldr	r2, [pc, #152]	@ (8003424 <HAL_ADC_Init+0x2bc>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d115      	bne.n	80033ba <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	4b26      	ldr	r3, [pc, #152]	@ (8003430 <HAL_ADC_Init+0x2c8>)
 8003396:	4013      	ands	r3, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	69b9      	ldr	r1, [r7, #24]
 800339e:	430b      	orrs	r3, r1
 80033a0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	611a      	str	r2, [r3, #16]
 80033b8:	e009      	b.n	80033ce <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003434 <HAL_ADC_Init+0x2cc>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	69b9      	ldr	r1, [r7, #24]
 80033ca:	430b      	orrs	r3, r1
 80033cc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fe8c 	bl	80030f0 <LL_ADC_REG_IsConversionOngoing>
 80033d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff feae 	bl	8003140 <LL_ADC_INJ_IsConversionOngoing>
 80033e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f040 808e 	bne.w	800350a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f040 808a 	bne.w	800350a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003424 <HAL_ADC_Init+0x2bc>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d11b      	bne.n	8003438 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	7e1b      	ldrb	r3, [r3, #24]
 8003404:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800340c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	e018      	b.n	8003446 <HAL_ADC_Init+0x2de>
 8003414:	24000008 	.word	0x24000008
 8003418:	053e2d63 	.word	0x053e2d63
 800341c:	40022000 	.word	0x40022000
 8003420:	40022100 	.word	0x40022100
 8003424:	58026000 	.word	0x58026000
 8003428:	40022300 	.word	0x40022300
 800342c:	58026300 	.word	0x58026300
 8003430:	fff04007 	.word	0xfff04007
 8003434:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	7e1b      	ldrb	r3, [r3, #24]
 800343c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	4b46      	ldr	r3, [pc, #280]	@ (8003568 <HAL_ADC_Init+0x400>)
 800344e:	4013      	ands	r3, r2
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	69b9      	ldr	r1, [r7, #24]
 8003456:	430b      	orrs	r3, r1
 8003458:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003460:	2b01      	cmp	r3, #1
 8003462:	d137      	bne.n	80034d4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003468:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a3f      	ldr	r2, [pc, #252]	@ (800356c <HAL_ADC_Init+0x404>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d116      	bne.n	80034a2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691a      	ldr	r2, [r3, #16]
 800347a:	4b3d      	ldr	r3, [pc, #244]	@ (8003570 <HAL_ADC_Init+0x408>)
 800347c:	4013      	ands	r3, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003486:	4311      	orrs	r1, r2
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800348c:	4311      	orrs	r1, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003492:	430a      	orrs	r2, r1
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	611a      	str	r2, [r3, #16]
 80034a0:	e020      	b.n	80034e4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	4b32      	ldr	r3, [pc, #200]	@ (8003574 <HAL_ADC_Init+0x40c>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034b0:	3a01      	subs	r2, #1
 80034b2:	0411      	lsls	r1, r2, #16
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034b8:	4311      	orrs	r1, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034be:	4311      	orrs	r1, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80034c4:	430a      	orrs	r2, r1
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f042 0201 	orr.w	r2, r2, #1
 80034d0:	611a      	str	r2, [r3, #16]
 80034d2:	e007      	b.n	80034e4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1b      	ldr	r2, [pc, #108]	@ (800356c <HAL_ADC_Init+0x404>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d002      	beq.n	800350a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f001 f8b1 	bl	800466c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d10c      	bne.n	800352c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003518:	f023 010f 	bic.w	r1, r3, #15
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	1e5a      	subs	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	631a      	str	r2, [r3, #48]	@ 0x30
 800352a:	e007      	b.n	800353c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 020f 	bic.w	r2, r2, #15
 800353a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003540:	f023 0303 	bic.w	r3, r3, #3
 8003544:	f043 0201 	orr.w	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	661a      	str	r2, [r3, #96]	@ 0x60
 800354c:	e007      	b.n	800355e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003552:	f043 0210 	orr.w	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800355e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3724      	adds	r7, #36	@ 0x24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd90      	pop	{r4, r7, pc}
 8003568:	ffffbffc 	.word	0xffffbffc
 800356c:	58026000 	.word	0x58026000
 8003570:	fc00f81f 	.word	0xfc00f81f
 8003574:	fc00f81e 	.word	0xfc00f81e

08003578 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a5c      	ldr	r2, [pc, #368]	@ (80036f8 <HAL_ADC_Start+0x180>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d004      	beq.n	8003594 <HAL_ADC_Start+0x1c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a5b      	ldr	r2, [pc, #364]	@ (80036fc <HAL_ADC_Start+0x184>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d101      	bne.n	8003598 <HAL_ADC_Start+0x20>
 8003594:	4b5a      	ldr	r3, [pc, #360]	@ (8003700 <HAL_ADC_Start+0x188>)
 8003596:	e000      	b.n	800359a <HAL_ADC_Start+0x22>
 8003598:	4b5a      	ldr	r3, [pc, #360]	@ (8003704 <HAL_ADC_Start+0x18c>)
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fcc8 	bl	8002f30 <LL_ADC_GetMultimode>
 80035a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fda2 	bl	80030f0 <LL_ADC_REG_IsConversionOngoing>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 809a 	bne.w	80036e8 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_ADC_Start+0x4a>
 80035be:	2302      	movs	r3, #2
 80035c0:	e095      	b.n	80036ee <HAL_ADC_Start+0x176>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 ff64 	bl	8004498 <ADC_Enable>
 80035d0:	4603      	mov	r3, r0
 80035d2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f040 8081 	bne.w	80036de <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80035e0:	4b49      	ldr	r3, [pc, #292]	@ (8003708 <HAL_ADC_Start+0x190>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a42      	ldr	r2, [pc, #264]	@ (80036fc <HAL_ADC_Start+0x184>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d002      	beq.n	80035fc <HAL_ADC_Start+0x84>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	e000      	b.n	80035fe <HAL_ADC_Start+0x86>
 80035fc:	4b3e      	ldr	r3, [pc, #248]	@ (80036f8 <HAL_ADC_Start+0x180>)
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	4293      	cmp	r3, r2
 8003604:	d002      	beq.n	800360c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d105      	bne.n	8003618 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003610:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003624:	d106      	bne.n	8003634 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800362a:	f023 0206 	bic.w	r2, r3, #6
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	665a      	str	r2, [r3, #100]	@ 0x64
 8003632:	e002      	b.n	800363a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	221c      	movs	r2, #28
 8003640:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a2b      	ldr	r2, [pc, #172]	@ (80036fc <HAL_ADC_Start+0x184>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d002      	beq.n	800365a <HAL_ADC_Start+0xe2>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	e000      	b.n	800365c <HAL_ADC_Start+0xe4>
 800365a:	4b27      	ldr	r3, [pc, #156]	@ (80036f8 <HAL_ADC_Start+0x180>)
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	4293      	cmp	r3, r2
 8003662:	d008      	beq.n	8003676 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	2b05      	cmp	r3, #5
 800366e:	d002      	beq.n	8003676 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2b09      	cmp	r3, #9
 8003674:	d114      	bne.n	80036a0 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d007      	beq.n	8003694 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003688:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800368c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fd01 	bl	80030a0 <LL_ADC_REG_StartConversion>
 800369e:	e025      	b.n	80036ec <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a12      	ldr	r2, [pc, #72]	@ (80036fc <HAL_ADC_Start+0x184>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d002      	beq.n	80036bc <HAL_ADC_Start+0x144>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	e000      	b.n	80036be <HAL_ADC_Start+0x146>
 80036bc:	4b0e      	ldr	r3, [pc, #56]	@ (80036f8 <HAL_ADC_Start+0x180>)
 80036be:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00f      	beq.n	80036ec <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	661a      	str	r2, [r3, #96]	@ 0x60
 80036dc:	e006      	b.n	80036ec <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80036e6:	e001      	b.n	80036ec <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
 80036ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80036ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40022000 	.word	0x40022000
 80036fc:	40022100 	.word	0x40022100
 8003700:	40022300 	.word	0x40022300
 8003704:	58026300 	.word	0x58026300
 8003708:	fffff0fe 	.word	0xfffff0fe

0800370c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_ADC_Stop+0x16>
 800371e:	2302      	movs	r3, #2
 8003720:	e021      	b.n	8003766 <HAL_ADC_Stop+0x5a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800372a:	2103      	movs	r1, #3
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 fdf7 	bl	8004320 <ADC_ConversionStop>
 8003732:	4603      	mov	r3, r0
 8003734:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003736:	7bfb      	ldrb	r3, [r7, #15]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10f      	bne.n	800375c <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 ff35 	bl	80045ac <ADC_Disable>
 8003742:	4603      	mov	r3, r0
 8003744:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d107      	bne.n	800375c <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003750:	4b07      	ldr	r3, [pc, #28]	@ (8003770 <HAL_ADC_Stop+0x64>)
 8003752:	4013      	ands	r3, r2
 8003754:	f043 0201 	orr.w	r2, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003764:	7bfb      	ldrb	r3, [r7, #15]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	ffffeefe 	.word	0xffffeefe

08003774 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a72      	ldr	r2, [pc, #456]	@ (800394c <HAL_ADC_PollForConversion+0x1d8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d004      	beq.n	8003792 <HAL_ADC_PollForConversion+0x1e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a70      	ldr	r2, [pc, #448]	@ (8003950 <HAL_ADC_PollForConversion+0x1dc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d101      	bne.n	8003796 <HAL_ADC_PollForConversion+0x22>
 8003792:	4b70      	ldr	r3, [pc, #448]	@ (8003954 <HAL_ADC_PollForConversion+0x1e0>)
 8003794:	e000      	b.n	8003798 <HAL_ADC_PollForConversion+0x24>
 8003796:	4b70      	ldr	r3, [pc, #448]	@ (8003958 <HAL_ADC_PollForConversion+0x1e4>)
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fbc9 	bl	8002f30 <LL_ADC_GetMultimode>
 800379e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d102      	bne.n	80037ae <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80037a8:	2308      	movs	r3, #8
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	e037      	b.n	800381e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d002      	beq.n	80037c0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b09      	cmp	r3, #9
 80037be:	d111      	bne.n	80037e4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d2:	f043 0220 	orr.w	r2, r3, #32
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e0b1      	b.n	8003942 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80037de:	2304      	movs	r3, #4
 80037e0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80037e2:	e01c      	b.n	800381e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a58      	ldr	r2, [pc, #352]	@ (800394c <HAL_ADC_PollForConversion+0x1d8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d004      	beq.n	80037f8 <HAL_ADC_PollForConversion+0x84>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a57      	ldr	r2, [pc, #348]	@ (8003950 <HAL_ADC_PollForConversion+0x1dc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d101      	bne.n	80037fc <HAL_ADC_PollForConversion+0x88>
 80037f8:	4b56      	ldr	r3, [pc, #344]	@ (8003954 <HAL_ADC_PollForConversion+0x1e0>)
 80037fa:	e000      	b.n	80037fe <HAL_ADC_PollForConversion+0x8a>
 80037fc:	4b56      	ldr	r3, [pc, #344]	@ (8003958 <HAL_ADC_PollForConversion+0x1e4>)
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff fba4 	bl	8002f4c <LL_ADC_GetMultiDMATransfer>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380e:	f043 0220 	orr.w	r2, r3, #32
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e093      	b.n	8003942 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800381a:	2304      	movs	r3, #4
 800381c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800381e:	f7ff f971 	bl	8002b04 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003824:	e021      	b.n	800386a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d01d      	beq.n	800386a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800382e:	f7ff f969 	bl	8002b04 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <HAL_ADC_PollForConversion+0xd0>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d112      	bne.n	800386a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4013      	ands	r3, r2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10b      	bne.n	800386a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003856:	f043 0204 	orr.w	r2, r3, #4
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e06b      	b.n	8003942 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0d6      	beq.n	8003826 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff faa7 	bl	8002ddc <LL_ADC_REG_IsTriggerSourceSWStart>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01c      	beq.n	80038ce <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	7e5b      	ldrb	r3, [r3, #25]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d118      	bne.n	80038ce <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d111      	bne.n	80038ce <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d105      	bne.n	80038ce <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c6:	f043 0201 	orr.w	r2, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003950 <HAL_ADC_PollForConversion+0x1dc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d002      	beq.n	80038de <HAL_ADC_PollForConversion+0x16a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	e000      	b.n	80038e0 <HAL_ADC_PollForConversion+0x16c>
 80038de:	4b1b      	ldr	r3, [pc, #108]	@ (800394c <HAL_ADC_PollForConversion+0x1d8>)
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d008      	beq.n	80038fa <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2b05      	cmp	r3, #5
 80038f2:	d002      	beq.n	80038fa <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b09      	cmp	r3, #9
 80038f8:	d104      	bne.n	8003904 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	e00c      	b.n	800391e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a11      	ldr	r2, [pc, #68]	@ (8003950 <HAL_ADC_PollForConversion+0x1dc>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d002      	beq.n	8003914 <HAL_ADC_PollForConversion+0x1a0>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	e000      	b.n	8003916 <HAL_ADC_PollForConversion+0x1a2>
 8003914:	4b0d      	ldr	r3, [pc, #52]	@ (800394c <HAL_ADC_PollForConversion+0x1d8>)
 8003916:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	2b08      	cmp	r3, #8
 8003922:	d104      	bne.n	800392e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2208      	movs	r2, #8
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e008      	b.n	8003940 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d103      	bne.n	8003940 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	220c      	movs	r2, #12
 800393e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40022000 	.word	0x40022000
 8003950:	40022100 	.word	0x40022100
 8003954:	40022300 	.word	0x40022300
 8003958:	58026300 	.word	0x58026300

0800395c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003978:	b590      	push	{r4, r7, lr}
 800397a:	b0a5      	sub	sp, #148	@ 0x94
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003992:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4aa4      	ldr	r2, [pc, #656]	@ (8003c2c <HAL_ADC_ConfigChannel+0x2b4>)
 800399a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d102      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x34>
 80039a6:	2302      	movs	r3, #2
 80039a8:	f000 bca2 	b.w	80042f0 <HAL_ADC_ConfigChannel+0x978>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff fb99 	bl	80030f0 <LL_ADC_REG_IsConversionOngoing>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f040 8486 	bne.w	80042d2 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	db31      	blt.n	8003a32 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a97      	ldr	r2, [pc, #604]	@ (8003c30 <HAL_ADC_ConfigChannel+0x2b8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d02c      	beq.n	8003a32 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d108      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x7e>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	0e9b      	lsrs	r3, r3, #26
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	2201      	movs	r2, #1
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	e016      	b.n	8003a24 <HAL_ADC_ConfigChannel+0xac>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039fe:	fa93 f3a3 	rbit	r3, r3
 8003a02:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003a04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a06:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003a08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8003a0e:	2320      	movs	r3, #32
 8003a10:	e003      	b.n	8003a1a <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8003a12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a14:	fab3 f383 	clz	r3, r3
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	2201      	movs	r2, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	69d1      	ldr	r1, [r2, #28]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6859      	ldr	r1, [r3, #4]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f7ff f9df 	bl	8002e02 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff fb51 	bl	80030f0 <LL_ADC_REG_IsConversionOngoing>
 8003a4e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fb72 	bl	8003140 <LL_ADC_INJ_IsConversionOngoing>
 8003a5c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f040 824a 	bne.w	8003efe <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f040 8245 	bne.w	8003efe <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	6819      	ldr	r1, [r3, #0]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	461a      	mov	r2, r3
 8003a82:	f7ff f9ea 	bl	8002e5a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a69      	ldr	r2, [pc, #420]	@ (8003c30 <HAL_ADC_ConfigChannel+0x2b8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d10d      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	695a      	ldr	r2, [r3, #20]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	08db      	lsrs	r3, r3, #3
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003aaa:	e032      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003aac:	4b61      	ldr	r3, [pc, #388]	@ (8003c34 <HAL_ADC_ConfigChannel+0x2bc>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003ab4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ab8:	d10b      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x15a>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	089b      	lsrs	r3, r3, #2
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	e01d      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x196>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0310 	and.w	r3, r3, #16
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10b      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x180>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	089b      	lsrs	r3, r3, #2
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	e00a      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x196>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	695a      	ldr	r2, [r3, #20]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	089b      	lsrs	r3, r3, #2
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d048      	beq.n	8003bac <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6919      	ldr	r1, [r3, #16]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b2a:	f7ff f865 	bl	8002bf8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a3f      	ldr	r2, [pc, #252]	@ (8003c30 <HAL_ADC_ConfigChannel+0x2b8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d119      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	6919      	ldr	r1, [r3, #16]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	461a      	mov	r2, r3
 8003b46:	f7ff f8fd 	bl	8002d44 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	6919      	ldr	r1, [r3, #16]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d102      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x1ea>
 8003b5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b60:	e000      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x1ec>
 8003b62:	2300      	movs	r3, #0
 8003b64:	461a      	mov	r2, r3
 8003b66:	f7ff f8cb 	bl	8002d00 <LL_ADC_SetOffsetSaturation>
 8003b6a:	e1c8      	b.n	8003efe <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	6919      	ldr	r1, [r3, #16]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d102      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x20c>
 8003b7e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003b82:	e000      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x20e>
 8003b84:	2300      	movs	r3, #0
 8003b86:	461a      	mov	r2, r3
 8003b88:	f7ff f898 	bl	8002cbc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	6919      	ldr	r1, [r3, #16]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	7e1b      	ldrb	r3, [r3, #24]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d102      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x22a>
 8003b9c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003ba0:	e000      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x22c>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f7ff f86f 	bl	8002c88 <LL_ADC_SetDataRightShift>
 8003baa:	e1a8      	b.n	8003efe <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c30 <HAL_ADC_ConfigChannel+0x2b8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	f040 815b 	bne.w	8003e6e <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff f84c 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10a      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x26c>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff f841 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	0e9b      	lsrs	r3, r3, #26
 8003bde:	f003 021f 	and.w	r2, r3, #31
 8003be2:	e017      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x29c>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2100      	movs	r1, #0
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff f836 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003bfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003c06:	2320      	movs	r3, #32
 8003c08:	e003      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8003c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c0c:	fab3 f383 	clz	r3, r3
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10b      	bne.n	8003c38 <HAL_ADC_ConfigChannel+0x2c0>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	0e9b      	lsrs	r3, r3, #26
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	e017      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x2e4>
 8003c2c:	47ff0000 	.word	0x47ff0000
 8003c30:	58026000 	.word	0x58026000
 8003c34:	5c001000 	.word	0x5c001000
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c40:	fa93 f3a3 	rbit	r3, r3
 8003c44:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003c46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c48:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003c4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8003c50:	2320      	movs	r3, #32
 8003c52:	e003      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003c54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c56:	fab3 f383 	clz	r3, r3
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d106      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2200      	movs	r2, #0
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff f88d 	bl	8002d88 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2101      	movs	r1, #1
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fe fff1 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x322>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2101      	movs	r1, #1
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe ffe6 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 8003c90:	4603      	mov	r3, r0
 8003c92:	0e9b      	lsrs	r3, r3, #26
 8003c94:	f003 021f 	and.w	r2, r3, #31
 8003c98:	e017      	b.n	8003cca <HAL_ADC_ConfigChannel+0x352>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fe ffdb 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cac:	fa93 f3a3 	rbit	r3, r3
 8003cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cb4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8003cbc:	2320      	movs	r3, #32
 8003cbe:	e003      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8003cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc2:	fab3 f383 	clz	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	461a      	mov	r2, r3
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d105      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x36a>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	0e9b      	lsrs	r3, r3, #26
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	e011      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x38e>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003cf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	e003      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003cfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d106      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2101      	movs	r1, #1
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff f838 	bl	8002d88 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2102      	movs	r1, #2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe ff9c 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x3cc>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2102      	movs	r1, #2
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fe ff91 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	0e9b      	lsrs	r3, r3, #26
 8003d3e:	f003 021f 	and.w	r2, r3, #31
 8003d42:	e017      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x3fc>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2102      	movs	r1, #2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fe ff86 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 8003d50:	4603      	mov	r3, r0
 8003d52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d56:	fa93 f3a3 	rbit	r3, r3
 8003d5a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003d66:	2320      	movs	r3, #32
 8003d68:	e003      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d6c:	fab3 f383 	clz	r3, r3
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d105      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x414>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	0e9b      	lsrs	r3, r3, #26
 8003d86:	f003 031f 	and.w	r3, r3, #31
 8003d8a:	e011      	b.n	8003db0 <HAL_ADC_ConfigChannel+0x438>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d94:	fa93 f3a3 	rbit	r3, r3
 8003d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003da4:	2320      	movs	r3, #32
 8003da6:	e003      	b.n	8003db0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003daa:	fab3 f383 	clz	r3, r3
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d106      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2200      	movs	r2, #0
 8003dba:	2102      	movs	r1, #2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fe ffe3 	bl	8002d88 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2103      	movs	r1, #3
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fe ff47 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <HAL_ADC_ConfigChannel+0x476>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2103      	movs	r1, #3
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe ff3c 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 8003de4:	4603      	mov	r3, r0
 8003de6:	0e9b      	lsrs	r3, r3, #26
 8003de8:	f003 021f 	and.w	r2, r3, #31
 8003dec:	e017      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x4a6>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2103      	movs	r1, #3
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fe ff31 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	fa93 f3a3 	rbit	r3, r3
 8003e04:	61fb      	str	r3, [r7, #28]
  return result;
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003e10:	2320      	movs	r3, #32
 8003e12:	e003      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d105      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x4be>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	0e9b      	lsrs	r3, r3, #26
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	e011      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x4e2>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	fa93 f3a3 	rbit	r3, r3
 8003e42:	613b      	str	r3, [r7, #16]
  return result;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8003e4e:	2320      	movs	r3, #32
 8003e50:	e003      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	fab3 f383 	clz	r3, r3
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d14f      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2200      	movs	r2, #0
 8003e64:	2103      	movs	r1, #3
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe ff8e 	bl	8002d88 <LL_ADC_SetOffsetState>
 8003e6c:	e047      	b.n	8003efe <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	069b      	lsls	r3, r3, #26
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d107      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e90:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e98:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	069b      	lsls	r3, r3, #26
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d107      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003eb4:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ebc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	069b      	lsls	r3, r3, #26
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d107      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ed8:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ee0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	069b      	lsls	r3, r3, #26
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d107      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003efc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff f8a6 	bl	8003054 <LL_ADC_IsEnabled>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f040 81ea 	bne.w	80042e4 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	6819      	ldr	r1, [r3, #0]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	f7fe ffc7 	bl	8002eb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	4a7a      	ldr	r2, [pc, #488]	@ (8004110 <HAL_ADC_ConfigChannel+0x798>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	f040 80e0 	bne.w	80040ee <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4977      	ldr	r1, [pc, #476]	@ (8004114 <HAL_ADC_ConfigChannel+0x79c>)
 8003f38:	428b      	cmp	r3, r1
 8003f3a:	d147      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x654>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4975      	ldr	r1, [pc, #468]	@ (8004118 <HAL_ADC_ConfigChannel+0x7a0>)
 8003f42:	428b      	cmp	r3, r1
 8003f44:	d040      	beq.n	8003fc8 <HAL_ADC_ConfigChannel+0x650>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4974      	ldr	r1, [pc, #464]	@ (800411c <HAL_ADC_ConfigChannel+0x7a4>)
 8003f4c:	428b      	cmp	r3, r1
 8003f4e:	d039      	beq.n	8003fc4 <HAL_ADC_ConfigChannel+0x64c>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4972      	ldr	r1, [pc, #456]	@ (8004120 <HAL_ADC_ConfigChannel+0x7a8>)
 8003f56:	428b      	cmp	r3, r1
 8003f58:	d032      	beq.n	8003fc0 <HAL_ADC_ConfigChannel+0x648>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4971      	ldr	r1, [pc, #452]	@ (8004124 <HAL_ADC_ConfigChannel+0x7ac>)
 8003f60:	428b      	cmp	r3, r1
 8003f62:	d02b      	beq.n	8003fbc <HAL_ADC_ConfigChannel+0x644>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	496f      	ldr	r1, [pc, #444]	@ (8004128 <HAL_ADC_ConfigChannel+0x7b0>)
 8003f6a:	428b      	cmp	r3, r1
 8003f6c:	d024      	beq.n	8003fb8 <HAL_ADC_ConfigChannel+0x640>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	496e      	ldr	r1, [pc, #440]	@ (800412c <HAL_ADC_ConfigChannel+0x7b4>)
 8003f74:	428b      	cmp	r3, r1
 8003f76:	d01d      	beq.n	8003fb4 <HAL_ADC_ConfigChannel+0x63c>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	496c      	ldr	r1, [pc, #432]	@ (8004130 <HAL_ADC_ConfigChannel+0x7b8>)
 8003f7e:	428b      	cmp	r3, r1
 8003f80:	d016      	beq.n	8003fb0 <HAL_ADC_ConfigChannel+0x638>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	496b      	ldr	r1, [pc, #428]	@ (8004134 <HAL_ADC_ConfigChannel+0x7bc>)
 8003f88:	428b      	cmp	r3, r1
 8003f8a:	d00f      	beq.n	8003fac <HAL_ADC_ConfigChannel+0x634>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4969      	ldr	r1, [pc, #420]	@ (8004138 <HAL_ADC_ConfigChannel+0x7c0>)
 8003f92:	428b      	cmp	r3, r1
 8003f94:	d008      	beq.n	8003fa8 <HAL_ADC_ConfigChannel+0x630>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4968      	ldr	r1, [pc, #416]	@ (800413c <HAL_ADC_ConfigChannel+0x7c4>)
 8003f9c:	428b      	cmp	r3, r1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x62c>
 8003fa0:	4b67      	ldr	r3, [pc, #412]	@ (8004140 <HAL_ADC_ConfigChannel+0x7c8>)
 8003fa2:	e0a0      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e09e      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8003fa8:	4b66      	ldr	r3, [pc, #408]	@ (8004144 <HAL_ADC_ConfigChannel+0x7cc>)
 8003faa:	e09c      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8003fac:	4b66      	ldr	r3, [pc, #408]	@ (8004148 <HAL_ADC_ConfigChannel+0x7d0>)
 8003fae:	e09a      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8003fb0:	4b60      	ldr	r3, [pc, #384]	@ (8004134 <HAL_ADC_ConfigChannel+0x7bc>)
 8003fb2:	e098      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8003fb4:	4b5e      	ldr	r3, [pc, #376]	@ (8004130 <HAL_ADC_ConfigChannel+0x7b8>)
 8003fb6:	e096      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8003fb8:	4b64      	ldr	r3, [pc, #400]	@ (800414c <HAL_ADC_ConfigChannel+0x7d4>)
 8003fba:	e094      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8003fbc:	4b64      	ldr	r3, [pc, #400]	@ (8004150 <HAL_ADC_ConfigChannel+0x7d8>)
 8003fbe:	e092      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8003fc0:	4b64      	ldr	r3, [pc, #400]	@ (8004154 <HAL_ADC_ConfigChannel+0x7dc>)
 8003fc2:	e090      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8003fc4:	4b64      	ldr	r3, [pc, #400]	@ (8004158 <HAL_ADC_ConfigChannel+0x7e0>)
 8003fc6:	e08e      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e08c      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4962      	ldr	r1, [pc, #392]	@ (800415c <HAL_ADC_ConfigChannel+0x7e4>)
 8003fd2:	428b      	cmp	r3, r1
 8003fd4:	d140      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x6e0>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	494f      	ldr	r1, [pc, #316]	@ (8004118 <HAL_ADC_ConfigChannel+0x7a0>)
 8003fdc:	428b      	cmp	r3, r1
 8003fde:	d039      	beq.n	8004054 <HAL_ADC_ConfigChannel+0x6dc>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	494d      	ldr	r1, [pc, #308]	@ (800411c <HAL_ADC_ConfigChannel+0x7a4>)
 8003fe6:	428b      	cmp	r3, r1
 8003fe8:	d032      	beq.n	8004050 <HAL_ADC_ConfigChannel+0x6d8>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	494c      	ldr	r1, [pc, #304]	@ (8004120 <HAL_ADC_ConfigChannel+0x7a8>)
 8003ff0:	428b      	cmp	r3, r1
 8003ff2:	d02b      	beq.n	800404c <HAL_ADC_ConfigChannel+0x6d4>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	494a      	ldr	r1, [pc, #296]	@ (8004124 <HAL_ADC_ConfigChannel+0x7ac>)
 8003ffa:	428b      	cmp	r3, r1
 8003ffc:	d024      	beq.n	8004048 <HAL_ADC_ConfigChannel+0x6d0>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4949      	ldr	r1, [pc, #292]	@ (8004128 <HAL_ADC_ConfigChannel+0x7b0>)
 8004004:	428b      	cmp	r3, r1
 8004006:	d01d      	beq.n	8004044 <HAL_ADC_ConfigChannel+0x6cc>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4947      	ldr	r1, [pc, #284]	@ (800412c <HAL_ADC_ConfigChannel+0x7b4>)
 800400e:	428b      	cmp	r3, r1
 8004010:	d016      	beq.n	8004040 <HAL_ADC_ConfigChannel+0x6c8>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4946      	ldr	r1, [pc, #280]	@ (8004130 <HAL_ADC_ConfigChannel+0x7b8>)
 8004018:	428b      	cmp	r3, r1
 800401a:	d00f      	beq.n	800403c <HAL_ADC_ConfigChannel+0x6c4>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4944      	ldr	r1, [pc, #272]	@ (8004134 <HAL_ADC_ConfigChannel+0x7bc>)
 8004022:	428b      	cmp	r3, r1
 8004024:	d008      	beq.n	8004038 <HAL_ADC_ConfigChannel+0x6c0>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4944      	ldr	r1, [pc, #272]	@ (800413c <HAL_ADC_ConfigChannel+0x7c4>)
 800402c:	428b      	cmp	r3, r1
 800402e:	d101      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x6bc>
 8004030:	4b43      	ldr	r3, [pc, #268]	@ (8004140 <HAL_ADC_ConfigChannel+0x7c8>)
 8004032:	e058      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8004034:	2300      	movs	r3, #0
 8004036:	e056      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8004038:	4b43      	ldr	r3, [pc, #268]	@ (8004148 <HAL_ADC_ConfigChannel+0x7d0>)
 800403a:	e054      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 800403c:	4b3d      	ldr	r3, [pc, #244]	@ (8004134 <HAL_ADC_ConfigChannel+0x7bc>)
 800403e:	e052      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8004040:	4b3b      	ldr	r3, [pc, #236]	@ (8004130 <HAL_ADC_ConfigChannel+0x7b8>)
 8004042:	e050      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8004044:	4b41      	ldr	r3, [pc, #260]	@ (800414c <HAL_ADC_ConfigChannel+0x7d4>)
 8004046:	e04e      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8004048:	4b41      	ldr	r3, [pc, #260]	@ (8004150 <HAL_ADC_ConfigChannel+0x7d8>)
 800404a:	e04c      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 800404c:	4b41      	ldr	r3, [pc, #260]	@ (8004154 <HAL_ADC_ConfigChannel+0x7dc>)
 800404e:	e04a      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8004050:	4b41      	ldr	r3, [pc, #260]	@ (8004158 <HAL_ADC_ConfigChannel+0x7e0>)
 8004052:	e048      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8004054:	2301      	movs	r3, #1
 8004056:	e046      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4940      	ldr	r1, [pc, #256]	@ (8004160 <HAL_ADC_ConfigChannel+0x7e8>)
 800405e:	428b      	cmp	r3, r1
 8004060:	d140      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x76c>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	492c      	ldr	r1, [pc, #176]	@ (8004118 <HAL_ADC_ConfigChannel+0x7a0>)
 8004068:	428b      	cmp	r3, r1
 800406a:	d039      	beq.n	80040e0 <HAL_ADC_ConfigChannel+0x768>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	492a      	ldr	r1, [pc, #168]	@ (800411c <HAL_ADC_ConfigChannel+0x7a4>)
 8004072:	428b      	cmp	r3, r1
 8004074:	d032      	beq.n	80040dc <HAL_ADC_ConfigChannel+0x764>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4929      	ldr	r1, [pc, #164]	@ (8004120 <HAL_ADC_ConfigChannel+0x7a8>)
 800407c:	428b      	cmp	r3, r1
 800407e:	d02b      	beq.n	80040d8 <HAL_ADC_ConfigChannel+0x760>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4927      	ldr	r1, [pc, #156]	@ (8004124 <HAL_ADC_ConfigChannel+0x7ac>)
 8004086:	428b      	cmp	r3, r1
 8004088:	d024      	beq.n	80040d4 <HAL_ADC_ConfigChannel+0x75c>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4926      	ldr	r1, [pc, #152]	@ (8004128 <HAL_ADC_ConfigChannel+0x7b0>)
 8004090:	428b      	cmp	r3, r1
 8004092:	d01d      	beq.n	80040d0 <HAL_ADC_ConfigChannel+0x758>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4924      	ldr	r1, [pc, #144]	@ (800412c <HAL_ADC_ConfigChannel+0x7b4>)
 800409a:	428b      	cmp	r3, r1
 800409c:	d016      	beq.n	80040cc <HAL_ADC_ConfigChannel+0x754>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4923      	ldr	r1, [pc, #140]	@ (8004130 <HAL_ADC_ConfigChannel+0x7b8>)
 80040a4:	428b      	cmp	r3, r1
 80040a6:	d00f      	beq.n	80040c8 <HAL_ADC_ConfigChannel+0x750>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4926      	ldr	r1, [pc, #152]	@ (8004148 <HAL_ADC_ConfigChannel+0x7d0>)
 80040ae:	428b      	cmp	r3, r1
 80040b0:	d008      	beq.n	80040c4 <HAL_ADC_ConfigChannel+0x74c>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	492b      	ldr	r1, [pc, #172]	@ (8004164 <HAL_ADC_ConfigChannel+0x7ec>)
 80040b8:	428b      	cmp	r3, r1
 80040ba:	d101      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x748>
 80040bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004168 <HAL_ADC_ConfigChannel+0x7f0>)
 80040be:	e012      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 80040c0:	2300      	movs	r3, #0
 80040c2:	e010      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 80040c4:	4b27      	ldr	r3, [pc, #156]	@ (8004164 <HAL_ADC_ConfigChannel+0x7ec>)
 80040c6:	e00e      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 80040c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004134 <HAL_ADC_ConfigChannel+0x7bc>)
 80040ca:	e00c      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 80040cc:	4b18      	ldr	r3, [pc, #96]	@ (8004130 <HAL_ADC_ConfigChannel+0x7b8>)
 80040ce:	e00a      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 80040d0:	4b1e      	ldr	r3, [pc, #120]	@ (800414c <HAL_ADC_ConfigChannel+0x7d4>)
 80040d2:	e008      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 80040d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004150 <HAL_ADC_ConfigChannel+0x7d8>)
 80040d6:	e006      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 80040d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004154 <HAL_ADC_ConfigChannel+0x7dc>)
 80040da:	e004      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 80040dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004158 <HAL_ADC_ConfigChannel+0x7e0>)
 80040de:	e002      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x76e>
 80040e4:	2300      	movs	r3, #0
 80040e6:	4619      	mov	r1, r3
 80040e8:	4610      	mov	r0, r2
 80040ea:	f7fe fd4b 	bl	8002b84 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f280 80f6 	bge.w	80042e4 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a05      	ldr	r2, [pc, #20]	@ (8004114 <HAL_ADC_ConfigChannel+0x79c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d004      	beq.n	800410c <HAL_ADC_ConfigChannel+0x794>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a15      	ldr	r2, [pc, #84]	@ (800415c <HAL_ADC_ConfigChannel+0x7e4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d131      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x7f8>
 800410c:	4b17      	ldr	r3, [pc, #92]	@ (800416c <HAL_ADC_ConfigChannel+0x7f4>)
 800410e:	e030      	b.n	8004172 <HAL_ADC_ConfigChannel+0x7fa>
 8004110:	47ff0000 	.word	0x47ff0000
 8004114:	40022000 	.word	0x40022000
 8004118:	04300002 	.word	0x04300002
 800411c:	08600004 	.word	0x08600004
 8004120:	0c900008 	.word	0x0c900008
 8004124:	10c00010 	.word	0x10c00010
 8004128:	14f00020 	.word	0x14f00020
 800412c:	2a000400 	.word	0x2a000400
 8004130:	2e300800 	.word	0x2e300800
 8004134:	32601000 	.word	0x32601000
 8004138:	43210000 	.word	0x43210000
 800413c:	4b840000 	.word	0x4b840000
 8004140:	4fb80000 	.word	0x4fb80000
 8004144:	47520000 	.word	0x47520000
 8004148:	36902000 	.word	0x36902000
 800414c:	25b00200 	.word	0x25b00200
 8004150:	21800100 	.word	0x21800100
 8004154:	1d500080 	.word	0x1d500080
 8004158:	19200040 	.word	0x19200040
 800415c:	40022100 	.word	0x40022100
 8004160:	58026000 	.word	0x58026000
 8004164:	3ac04000 	.word	0x3ac04000
 8004168:	3ef08000 	.word	0x3ef08000
 800416c:	40022300 	.word	0x40022300
 8004170:	4b61      	ldr	r3, [pc, #388]	@ (80042f8 <HAL_ADC_ConfigChannel+0x980>)
 8004172:	4618      	mov	r0, r3
 8004174:	f7fe fcf8 	bl	8002b68 <LL_ADC_GetCommonPathInternalCh>
 8004178:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a5f      	ldr	r2, [pc, #380]	@ (80042fc <HAL_ADC_ConfigChannel+0x984>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d004      	beq.n	800418e <HAL_ADC_ConfigChannel+0x816>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a5d      	ldr	r2, [pc, #372]	@ (8004300 <HAL_ADC_ConfigChannel+0x988>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d10e      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x834>
 800418e:	485b      	ldr	r0, [pc, #364]	@ (80042fc <HAL_ADC_ConfigChannel+0x984>)
 8004190:	f7fe ff60 	bl	8003054 <LL_ADC_IsEnabled>
 8004194:	4604      	mov	r4, r0
 8004196:	485a      	ldr	r0, [pc, #360]	@ (8004300 <HAL_ADC_ConfigChannel+0x988>)
 8004198:	f7fe ff5c 	bl	8003054 <LL_ADC_IsEnabled>
 800419c:	4603      	mov	r3, r0
 800419e:	4323      	orrs	r3, r4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bf0c      	ite	eq
 80041a4:	2301      	moveq	r3, #1
 80041a6:	2300      	movne	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	e008      	b.n	80041be <HAL_ADC_ConfigChannel+0x846>
 80041ac:	4855      	ldr	r0, [pc, #340]	@ (8004304 <HAL_ADC_ConfigChannel+0x98c>)
 80041ae:	f7fe ff51 	bl	8003054 <LL_ADC_IsEnabled>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d07d      	beq.n	80042be <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a50      	ldr	r2, [pc, #320]	@ (8004308 <HAL_ADC_ConfigChannel+0x990>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d130      	bne.n	800422e <HAL_ADC_ConfigChannel+0x8b6>
 80041cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d12b      	bne.n	800422e <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a4a      	ldr	r2, [pc, #296]	@ (8004304 <HAL_ADC_ConfigChannel+0x98c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	f040 8081 	bne.w	80042e4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a45      	ldr	r2, [pc, #276]	@ (80042fc <HAL_ADC_ConfigChannel+0x984>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d004      	beq.n	80041f6 <HAL_ADC_ConfigChannel+0x87e>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a43      	ldr	r2, [pc, #268]	@ (8004300 <HAL_ADC_ConfigChannel+0x988>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d101      	bne.n	80041fa <HAL_ADC_ConfigChannel+0x882>
 80041f6:	4a45      	ldr	r2, [pc, #276]	@ (800430c <HAL_ADC_ConfigChannel+0x994>)
 80041f8:	e000      	b.n	80041fc <HAL_ADC_ConfigChannel+0x884>
 80041fa:	4a3f      	ldr	r2, [pc, #252]	@ (80042f8 <HAL_ADC_ConfigChannel+0x980>)
 80041fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004202:	4619      	mov	r1, r3
 8004204:	4610      	mov	r0, r2
 8004206:	f7fe fc9c 	bl	8002b42 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800420a:	4b41      	ldr	r3, [pc, #260]	@ (8004310 <HAL_ADC_ConfigChannel+0x998>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	099b      	lsrs	r3, r3, #6
 8004210:	4a40      	ldr	r2, [pc, #256]	@ (8004314 <HAL_ADC_ConfigChannel+0x99c>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	099b      	lsrs	r3, r3, #6
 8004218:	3301      	adds	r3, #1
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800421e:	e002      	b.n	8004226 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	3b01      	subs	r3, #1
 8004224:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f9      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800422c:	e05a      	b.n	80042e4 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a39      	ldr	r2, [pc, #228]	@ (8004318 <HAL_ADC_ConfigChannel+0x9a0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d11e      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x8fe>
 8004238:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800423a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d119      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a2f      	ldr	r2, [pc, #188]	@ (8004304 <HAL_ADC_ConfigChannel+0x98c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d14b      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a2a      	ldr	r2, [pc, #168]	@ (80042fc <HAL_ADC_ConfigChannel+0x984>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d004      	beq.n	8004260 <HAL_ADC_ConfigChannel+0x8e8>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a29      	ldr	r2, [pc, #164]	@ (8004300 <HAL_ADC_ConfigChannel+0x988>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d101      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x8ec>
 8004260:	4a2a      	ldr	r2, [pc, #168]	@ (800430c <HAL_ADC_ConfigChannel+0x994>)
 8004262:	e000      	b.n	8004266 <HAL_ADC_ConfigChannel+0x8ee>
 8004264:	4a24      	ldr	r2, [pc, #144]	@ (80042f8 <HAL_ADC_ConfigChannel+0x980>)
 8004266:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004268:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800426c:	4619      	mov	r1, r3
 800426e:	4610      	mov	r0, r2
 8004270:	f7fe fc67 	bl	8002b42 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004274:	e036      	b.n	80042e4 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a28      	ldr	r2, [pc, #160]	@ (800431c <HAL_ADC_ConfigChannel+0x9a4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d131      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x96c>
 8004280:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d12c      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1d      	ldr	r2, [pc, #116]	@ (8004304 <HAL_ADC_ConfigChannel+0x98c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d127      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a18      	ldr	r2, [pc, #96]	@ (80042fc <HAL_ADC_ConfigChannel+0x984>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d004      	beq.n	80042a8 <HAL_ADC_ConfigChannel+0x930>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a17      	ldr	r2, [pc, #92]	@ (8004300 <HAL_ADC_ConfigChannel+0x988>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d101      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x934>
 80042a8:	4a18      	ldr	r2, [pc, #96]	@ (800430c <HAL_ADC_ConfigChannel+0x994>)
 80042aa:	e000      	b.n	80042ae <HAL_ADC_ConfigChannel+0x936>
 80042ac:	4a12      	ldr	r2, [pc, #72]	@ (80042f8 <HAL_ADC_ConfigChannel+0x980>)
 80042ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042b4:	4619      	mov	r1, r3
 80042b6:	4610      	mov	r0, r2
 80042b8:	f7fe fc43 	bl	8002b42 <LL_ADC_SetCommonPathInternalCh>
 80042bc:	e012      	b.n	80042e4 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c2:	f043 0220 	orr.w	r2, r3, #32
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80042d0:	e008      	b.n	80042e4 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042d6:	f043 0220 	orr.w	r2, r3, #32
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80042ec:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3794      	adds	r7, #148	@ 0x94
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd90      	pop	{r4, r7, pc}
 80042f8:	58026300 	.word	0x58026300
 80042fc:	40022000 	.word	0x40022000
 8004300:	40022100 	.word	0x40022100
 8004304:	58026000 	.word	0x58026000
 8004308:	c7520000 	.word	0xc7520000
 800430c:	40022300 	.word	0x40022300
 8004310:	24000008 	.word	0x24000008
 8004314:	053e2d63 	.word	0x053e2d63
 8004318:	c3210000 	.word	0xc3210000
 800431c:	cb840000 	.word	0xcb840000

08004320 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe feda 	bl	80030f0 <LL_ADC_REG_IsConversionOngoing>
 800433c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe fefc 	bl	8003140 <LL_ADC_INJ_IsConversionOngoing>
 8004348:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d103      	bne.n	8004358 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 8098 	beq.w	8004488 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d02a      	beq.n	80043bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	7e5b      	ldrb	r3, [r3, #25]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d126      	bne.n	80043bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	7e1b      	ldrb	r3, [r3, #24]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d122      	bne.n	80043bc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004376:	2301      	movs	r3, #1
 8004378:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800437a:	e014      	b.n	80043a6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	4a45      	ldr	r2, [pc, #276]	@ (8004494 <ADC_ConversionStop+0x174>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d90d      	bls.n	80043a0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004388:	f043 0210 	orr.w	r2, r3, #16
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004394:	f043 0201 	orr.w	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e074      	b.n	800448a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	3301      	adds	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b0:	2b40      	cmp	r3, #64	@ 0x40
 80043b2:	d1e3      	bne.n	800437c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2240      	movs	r2, #64	@ 0x40
 80043ba:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d014      	beq.n	80043ec <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe fe92 	bl	80030f0 <LL_ADC_REG_IsConversionOngoing>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00c      	beq.n	80043ec <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fe fe4f 	bl	800307a <LL_ADC_IsDisableOngoing>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d104      	bne.n	80043ec <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe fe6e 	bl	80030c8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d014      	beq.n	800441c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe fea2 	bl	8003140 <LL_ADC_INJ_IsConversionOngoing>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00c      	beq.n	800441c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe fe37 	bl	800307a <LL_ADC_IsDisableOngoing>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d104      	bne.n	800441c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe fe7e 	bl	8003118 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d005      	beq.n	800442e <ADC_ConversionStop+0x10e>
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b03      	cmp	r3, #3
 8004426:	d105      	bne.n	8004434 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004428:	230c      	movs	r3, #12
 800442a:	617b      	str	r3, [r7, #20]
        break;
 800442c:	e005      	b.n	800443a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800442e:	2308      	movs	r3, #8
 8004430:	617b      	str	r3, [r7, #20]
        break;
 8004432:	e002      	b.n	800443a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004434:	2304      	movs	r3, #4
 8004436:	617b      	str	r3, [r7, #20]
        break;
 8004438:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800443a:	f7fe fb63 	bl	8002b04 <HAL_GetTick>
 800443e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004440:	e01b      	b.n	800447a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004442:	f7fe fb5f 	bl	8002b04 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b05      	cmp	r3, #5
 800444e:	d914      	bls.n	800447a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	4013      	ands	r3, r2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00d      	beq.n	800447a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004462:	f043 0210 	orr.w	r2, r3, #16
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800446e:	f043 0201 	orr.w	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e007      	b.n	800448a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	4013      	ands	r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1dc      	bne.n	8004442 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3720      	adds	r7, #32
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	000cdbff 	.word	0x000cdbff

08004498 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe fdd5 	bl	8003054 <LL_ADC_IsEnabled>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d16e      	bne.n	800458e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	4b38      	ldr	r3, [pc, #224]	@ (8004598 <ADC_Enable+0x100>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00d      	beq.n	80044da <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c2:	f043 0210 	orr.w	r2, r3, #16
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044ce:	f043 0201 	orr.w	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e05a      	b.n	8004590 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe fd90 	bl	8003004 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044e4:	f7fe fb0e 	bl	8002b04 <HAL_GetTick>
 80044e8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a2b      	ldr	r2, [pc, #172]	@ (800459c <ADC_Enable+0x104>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d004      	beq.n	80044fe <ADC_Enable+0x66>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a29      	ldr	r2, [pc, #164]	@ (80045a0 <ADC_Enable+0x108>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d101      	bne.n	8004502 <ADC_Enable+0x6a>
 80044fe:	4b29      	ldr	r3, [pc, #164]	@ (80045a4 <ADC_Enable+0x10c>)
 8004500:	e000      	b.n	8004504 <ADC_Enable+0x6c>
 8004502:	4b29      	ldr	r3, [pc, #164]	@ (80045a8 <ADC_Enable+0x110>)
 8004504:	4618      	mov	r0, r3
 8004506:	f7fe fd13 	bl	8002f30 <LL_ADC_GetMultimode>
 800450a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a23      	ldr	r2, [pc, #140]	@ (80045a0 <ADC_Enable+0x108>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d002      	beq.n	800451c <ADC_Enable+0x84>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	e000      	b.n	800451e <ADC_Enable+0x86>
 800451c:	4b1f      	ldr	r3, [pc, #124]	@ (800459c <ADC_Enable+0x104>)
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6812      	ldr	r2, [r2, #0]
 8004522:	4293      	cmp	r3, r2
 8004524:	d02c      	beq.n	8004580 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d130      	bne.n	800458e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800452c:	e028      	b.n	8004580 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe fd8e 	bl	8003054 <LL_ADC_IsEnabled>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f7fe fd5e 	bl	8003004 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004548:	f7fe fadc 	bl	8002b04 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d914      	bls.n	8004580 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b01      	cmp	r3, #1
 8004562:	d00d      	beq.n	8004580 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004568:	f043 0210 	orr.w	r2, r3, #16
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004574:	f043 0201 	orr.w	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e007      	b.n	8004590 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b01      	cmp	r3, #1
 800458c:	d1cf      	bne.n	800452e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	8000003f 	.word	0x8000003f
 800459c:	40022000 	.word	0x40022000
 80045a0:	40022100 	.word	0x40022100
 80045a4:	40022300 	.word	0x40022300
 80045a8:	58026300 	.word	0x58026300

080045ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe fd5e 	bl	800307a <LL_ADC_IsDisableOngoing>
 80045be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fe fd45 	bl	8003054 <LL_ADC_IsEnabled>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d047      	beq.n	8004660 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d144      	bne.n	8004660 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 030d 	and.w	r3, r3, #13
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d10c      	bne.n	80045fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fe fd1f 	bl	800302c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2203      	movs	r2, #3
 80045f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045f6:	f7fe fa85 	bl	8002b04 <HAL_GetTick>
 80045fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045fc:	e029      	b.n	8004652 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004602:	f043 0210 	orr.w	r2, r3, #16
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800460e:	f043 0201 	orr.w	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e023      	b.n	8004662 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800461a:	f7fe fa73 	bl	8002b04 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d914      	bls.n	8004652 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00d      	beq.n	8004652 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800463a:	f043 0210 	orr.w	r2, r3, #16
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004646:	f043 0201 	orr.w	r2, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e007      	b.n	8004662 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1dc      	bne.n	800461a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a6c      	ldr	r2, [pc, #432]	@ (800482c <ADC_ConfigureBoostMode+0x1c0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <ADC_ConfigureBoostMode+0x1c>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a6b      	ldr	r2, [pc, #428]	@ (8004830 <ADC_ConfigureBoostMode+0x1c4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d109      	bne.n	800469c <ADC_ConfigureBoostMode+0x30>
 8004688:	4b6a      	ldr	r3, [pc, #424]	@ (8004834 <ADC_ConfigureBoostMode+0x1c8>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004690:	2b00      	cmp	r3, #0
 8004692:	bf14      	ite	ne
 8004694:	2301      	movne	r3, #1
 8004696:	2300      	moveq	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	e008      	b.n	80046ae <ADC_ConfigureBoostMode+0x42>
 800469c:	4b66      	ldr	r3, [pc, #408]	@ (8004838 <ADC_ConfigureBoostMode+0x1cc>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bf14      	ite	ne
 80046a8:	2301      	movne	r3, #1
 80046aa:	2300      	moveq	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d01c      	beq.n	80046ec <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80046b2:	f002 fdcd 	bl	8007250 <HAL_RCC_GetHCLKFreq>
 80046b6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046c0:	d010      	beq.n	80046e4 <ADC_ConfigureBoostMode+0x78>
 80046c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046c6:	d873      	bhi.n	80047b0 <ADC_ConfigureBoostMode+0x144>
 80046c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046cc:	d002      	beq.n	80046d4 <ADC_ConfigureBoostMode+0x68>
 80046ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046d2:	d16d      	bne.n	80047b0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	0c1b      	lsrs	r3, r3, #16
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e0:	60fb      	str	r3, [r7, #12]
        break;
 80046e2:	e068      	b.n	80047b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	089b      	lsrs	r3, r3, #2
 80046e8:	60fb      	str	r3, [r7, #12]
        break;
 80046ea:	e064      	b.n	80047b6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80046ec:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80046f0:	f04f 0100 	mov.w	r1, #0
 80046f4:	f003 ffa8 	bl	8008648 <HAL_RCCEx_GetPeriphCLKFreq>
 80046f8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004702:	d051      	beq.n	80047a8 <ADC_ConfigureBoostMode+0x13c>
 8004704:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004708:	d854      	bhi.n	80047b4 <ADC_ConfigureBoostMode+0x148>
 800470a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800470e:	d047      	beq.n	80047a0 <ADC_ConfigureBoostMode+0x134>
 8004710:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004714:	d84e      	bhi.n	80047b4 <ADC_ConfigureBoostMode+0x148>
 8004716:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800471a:	d03d      	beq.n	8004798 <ADC_ConfigureBoostMode+0x12c>
 800471c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004720:	d848      	bhi.n	80047b4 <ADC_ConfigureBoostMode+0x148>
 8004722:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004726:	d033      	beq.n	8004790 <ADC_ConfigureBoostMode+0x124>
 8004728:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800472c:	d842      	bhi.n	80047b4 <ADC_ConfigureBoostMode+0x148>
 800472e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004732:	d029      	beq.n	8004788 <ADC_ConfigureBoostMode+0x11c>
 8004734:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004738:	d83c      	bhi.n	80047b4 <ADC_ConfigureBoostMode+0x148>
 800473a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800473e:	d01a      	beq.n	8004776 <ADC_ConfigureBoostMode+0x10a>
 8004740:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004744:	d836      	bhi.n	80047b4 <ADC_ConfigureBoostMode+0x148>
 8004746:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800474a:	d014      	beq.n	8004776 <ADC_ConfigureBoostMode+0x10a>
 800474c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004750:	d830      	bhi.n	80047b4 <ADC_ConfigureBoostMode+0x148>
 8004752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004756:	d00e      	beq.n	8004776 <ADC_ConfigureBoostMode+0x10a>
 8004758:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800475c:	d82a      	bhi.n	80047b4 <ADC_ConfigureBoostMode+0x148>
 800475e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004762:	d008      	beq.n	8004776 <ADC_ConfigureBoostMode+0x10a>
 8004764:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004768:	d824      	bhi.n	80047b4 <ADC_ConfigureBoostMode+0x148>
 800476a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800476e:	d002      	beq.n	8004776 <ADC_ConfigureBoostMode+0x10a>
 8004770:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004774:	d11e      	bne.n	80047b4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	0c9b      	lsrs	r3, r3, #18
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	fbb2 f3f3 	udiv	r3, r2, r3
 8004784:	60fb      	str	r3, [r7, #12]
        break;
 8004786:	e016      	b.n	80047b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	60fb      	str	r3, [r7, #12]
        break;
 800478e:	e012      	b.n	80047b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	60fb      	str	r3, [r7, #12]
        break;
 8004796:	e00e      	b.n	80047b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	099b      	lsrs	r3, r3, #6
 800479c:	60fb      	str	r3, [r7, #12]
        break;
 800479e:	e00a      	b.n	80047b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	09db      	lsrs	r3, r3, #7
 80047a4:	60fb      	str	r3, [r7, #12]
        break;
 80047a6:	e006      	b.n	80047b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	60fb      	str	r3, [r7, #12]
        break;
 80047ae:	e002      	b.n	80047b6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80047b0:	bf00      	nop
 80047b2:	e000      	b.n	80047b6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80047b4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	085b      	lsrs	r3, r3, #1
 80047ba:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4a1f      	ldr	r2, [pc, #124]	@ (800483c <ADC_ConfigureBoostMode+0x1d0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d808      	bhi.n	80047d6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80047d2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80047d4:	e025      	b.n	8004822 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4a19      	ldr	r2, [pc, #100]	@ (8004840 <ADC_ConfigureBoostMode+0x1d4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d80a      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047f0:	609a      	str	r2, [r3, #8]
}
 80047f2:	e016      	b.n	8004822 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4a13      	ldr	r2, [pc, #76]	@ (8004844 <ADC_ConfigureBoostMode+0x1d8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d80a      	bhi.n	8004812 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800480e:	609a      	str	r2, [r3, #8]
}
 8004810:	e007      	b.n	8004822 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004820:	609a      	str	r2, [r3, #8]
}
 8004822:	bf00      	nop
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40022000 	.word	0x40022000
 8004830:	40022100 	.word	0x40022100
 8004834:	40022300 	.word	0x40022300
 8004838:	58026300 	.word	0x58026300
 800483c:	005f5e10 	.word	0x005f5e10
 8004840:	00bebc20 	.word	0x00bebc20
 8004844:	017d7840 	.word	0x017d7840

08004848 <LL_ADC_IsEnabled>:
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <LL_ADC_IsEnabled+0x18>
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <LL_ADC_IsEnabled+0x1a>
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <LL_ADC_REG_IsConversionOngoing>:
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b04      	cmp	r3, #4
 8004880:	d101      	bne.n	8004886 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004894:	b590      	push	{r4, r7, lr}
 8004896:	b0a3      	sub	sp, #140	@ 0x8c
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e0c1      	b.n	8004a36 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80048ba:	2300      	movs	r3, #0
 80048bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80048be:	2300      	movs	r3, #0
 80048c0:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d102      	bne.n	80048d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80048cc:	4b5d      	ldr	r3, [pc, #372]	@ (8004a44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	e001      	b.n	80048d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10b      	bne.n	80048f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e0:	f043 0220 	orr.w	r2, r3, #32
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e0a0      	b.n	8004a36 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff ffb9 	bl	800486e <LL_ADC_REG_IsConversionOngoing>
 80048fc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff ffb2 	bl	800486e <LL_ADC_REG_IsConversionOngoing>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	f040 8081 	bne.w	8004a14 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004912:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004916:	2b00      	cmp	r3, #0
 8004918:	d17c      	bne.n	8004a14 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a48      	ldr	r2, [pc, #288]	@ (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a46      	ldr	r2, [pc, #280]	@ (8004a44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d101      	bne.n	8004932 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800492e:	4b46      	ldr	r3, [pc, #280]	@ (8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004930:	e000      	b.n	8004934 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004932:	4b46      	ldr	r3, [pc, #280]	@ (8004a4c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004934:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d039      	beq.n	80049b2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800493e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	431a      	orrs	r2, r3
 800494c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800494e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a3a      	ldr	r2, [pc, #232]	@ (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a39      	ldr	r2, [pc, #228]	@ (8004a44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d10e      	bne.n	8004982 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004964:	4836      	ldr	r0, [pc, #216]	@ (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004966:	f7ff ff6f 	bl	8004848 <LL_ADC_IsEnabled>
 800496a:	4604      	mov	r4, r0
 800496c:	4835      	ldr	r0, [pc, #212]	@ (8004a44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800496e:	f7ff ff6b 	bl	8004848 <LL_ADC_IsEnabled>
 8004972:	4603      	mov	r3, r0
 8004974:	4323      	orrs	r3, r4
 8004976:	2b00      	cmp	r3, #0
 8004978:	bf0c      	ite	eq
 800497a:	2301      	moveq	r3, #1
 800497c:	2300      	movne	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	e008      	b.n	8004994 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004982:	4833      	ldr	r0, [pc, #204]	@ (8004a50 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004984:	f7ff ff60 	bl	8004848 <LL_ADC_IsEnabled>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	bf0c      	ite	eq
 800498e:	2301      	moveq	r3, #1
 8004990:	2300      	movne	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d047      	beq.n	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004998:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800499e:	4013      	ands	r3, r2
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	6811      	ldr	r1, [r2, #0]
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	6892      	ldr	r2, [r2, #8]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	431a      	orrs	r2, r3
 80049ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049ae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049b0:	e03a      	b.n	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80049b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049bc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d004      	beq.n	80049d2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d10e      	bne.n	80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80049d2:	481b      	ldr	r0, [pc, #108]	@ (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049d4:	f7ff ff38 	bl	8004848 <LL_ADC_IsEnabled>
 80049d8:	4604      	mov	r4, r0
 80049da:	481a      	ldr	r0, [pc, #104]	@ (8004a44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049dc:	f7ff ff34 	bl	8004848 <LL_ADC_IsEnabled>
 80049e0:	4603      	mov	r3, r0
 80049e2:	4323      	orrs	r3, r4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	bf0c      	ite	eq
 80049e8:	2301      	moveq	r3, #1
 80049ea:	2300      	movne	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	e008      	b.n	8004a02 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80049f0:	4817      	ldr	r0, [pc, #92]	@ (8004a50 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80049f2:	f7ff ff29 	bl	8004848 <LL_ADC_IsEnabled>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bf0c      	ite	eq
 80049fc:	2301      	moveq	r3, #1
 80049fe:	2300      	movne	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d010      	beq.n	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	4b12      	ldr	r3, [pc, #72]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004a10:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a12:	e009      	b.n	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a18:	f043 0220 	orr.w	r2, r3, #32
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004a26:	e000      	b.n	8004a2a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004a32:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	378c      	adds	r7, #140	@ 0x8c
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd90      	pop	{r4, r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40022000 	.word	0x40022000
 8004a44:	40022100 	.word	0x40022100
 8004a48:	40022300 	.word	0x40022300
 8004a4c:	58026300 	.word	0x58026300
 8004a50:	58026000 	.word	0x58026000
 8004a54:	fffff0e0 	.word	0xfffff0e0

08004a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a68:	4b0b      	ldr	r3, [pc, #44]	@ (8004a98 <__NVIC_SetPriorityGrouping+0x40>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a74:	4013      	ands	r3, r2
 8004a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a80:	4b06      	ldr	r3, [pc, #24]	@ (8004a9c <__NVIC_SetPriorityGrouping+0x44>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a86:	4a04      	ldr	r2, [pc, #16]	@ (8004a98 <__NVIC_SetPriorityGrouping+0x40>)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	60d3      	str	r3, [r2, #12]
}
 8004a8c:	bf00      	nop
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	e000ed00 	.word	0xe000ed00
 8004a9c:	05fa0000 	.word	0x05fa0000

08004aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004aa4:	4b04      	ldr	r3, [pc, #16]	@ (8004ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	0a1b      	lsrs	r3, r3, #8
 8004aaa:	f003 0307 	and.w	r3, r3, #7
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	e000ed00 	.word	0xe000ed00

08004abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	db0b      	blt.n	8004ae6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	f003 021f 	and.w	r2, r3, #31
 8004ad4:	4907      	ldr	r1, [pc, #28]	@ (8004af4 <__NVIC_EnableIRQ+0x38>)
 8004ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	2001      	movs	r0, #1
 8004ade:	fa00 f202 	lsl.w	r2, r0, r2
 8004ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	e000e100 	.word	0xe000e100

08004af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	6039      	str	r1, [r7, #0]
 8004b02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	db0a      	blt.n	8004b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	490c      	ldr	r1, [pc, #48]	@ (8004b44 <__NVIC_SetPriority+0x4c>)
 8004b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b16:	0112      	lsls	r2, r2, #4
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	440b      	add	r3, r1
 8004b1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b20:	e00a      	b.n	8004b38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	4908      	ldr	r1, [pc, #32]	@ (8004b48 <__NVIC_SetPriority+0x50>)
 8004b28:	88fb      	ldrh	r3, [r7, #6]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	3b04      	subs	r3, #4
 8004b30:	0112      	lsls	r2, r2, #4
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	440b      	add	r3, r1
 8004b36:	761a      	strb	r2, [r3, #24]
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	e000e100 	.word	0xe000e100
 8004b48:	e000ed00 	.word	0xe000ed00

08004b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b089      	sub	sp, #36	@ 0x24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	f1c3 0307 	rsb	r3, r3, #7
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	bf28      	it	cs
 8004b6a:	2304      	movcs	r3, #4
 8004b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	3304      	adds	r3, #4
 8004b72:	2b06      	cmp	r3, #6
 8004b74:	d902      	bls.n	8004b7c <NVIC_EncodePriority+0x30>
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	3b03      	subs	r3, #3
 8004b7a:	e000      	b.n	8004b7e <NVIC_EncodePriority+0x32>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b80:	f04f 32ff 	mov.w	r2, #4294967295
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8a:	43da      	mvns	r2, r3
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	401a      	ands	r2, r3
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b94:	f04f 31ff 	mov.w	r1, #4294967295
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9e:	43d9      	mvns	r1, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ba4:	4313      	orrs	r3, r2
         );
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3724      	adds	r7, #36	@ 0x24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
	...

08004bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bc4:	d301      	bcc.n	8004bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e00f      	b.n	8004bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bca:	4a0a      	ldr	r2, [pc, #40]	@ (8004bf4 <SysTick_Config+0x40>)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bd2:	210f      	movs	r1, #15
 8004bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd8:	f7ff ff8e 	bl	8004af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bdc:	4b05      	ldr	r3, [pc, #20]	@ (8004bf4 <SysTick_Config+0x40>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004be2:	4b04      	ldr	r3, [pc, #16]	@ (8004bf4 <SysTick_Config+0x40>)
 8004be4:	2207      	movs	r2, #7
 8004be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	e000e010 	.word	0xe000e010

08004bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff ff29 	bl	8004a58 <__NVIC_SetPriorityGrouping>
}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b086      	sub	sp, #24
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	4603      	mov	r3, r0
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	607a      	str	r2, [r7, #4]
 8004c1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c1c:	f7ff ff40 	bl	8004aa0 <__NVIC_GetPriorityGrouping>
 8004c20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	68b9      	ldr	r1, [r7, #8]
 8004c26:	6978      	ldr	r0, [r7, #20]
 8004c28:	f7ff ff90 	bl	8004b4c <NVIC_EncodePriority>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c32:	4611      	mov	r1, r2
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff ff5f 	bl	8004af8 <__NVIC_SetPriority>
}
 8004c3a:	bf00      	nop
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b082      	sub	sp, #8
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	4603      	mov	r3, r0
 8004c4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff ff33 	bl	8004abc <__NVIC_EnableIRQ>
}
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b082      	sub	sp, #8
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7ff ffa4 	bl	8004bb4 <SysTick_Config>
 8004c6c:	4603      	mov	r3, r0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b098      	sub	sp, #96	@ 0x60
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004c80:	4a84      	ldr	r2, [pc, #528]	@ (8004e94 <HAL_FDCAN_Init+0x21c>)
 8004c82:	f107 030c 	add.w	r3, r7, #12
 8004c86:	4611      	mov	r1, r2
 8004c88:	224c      	movs	r2, #76	@ 0x4c
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f006 f9fc 	bl	800b088 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e1c6      	b.n	8005028 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e98 <HAL_FDCAN_Init+0x220>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d106      	bne.n	8004cb2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004cac:	461a      	mov	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fd fc46 	bl	8002558 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699a      	ldr	r2, [r3, #24]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0210 	bic.w	r2, r2, #16
 8004cda:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cdc:	f7fd ff12 	bl	8002b04 <HAL_GetTick>
 8004ce0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004ce2:	e014      	b.n	8004d0e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004ce4:	f7fd ff0e 	bl	8002b04 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b0a      	cmp	r3, #10
 8004cf0:	d90d      	bls.n	8004d0e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cf8:	f043 0201 	orr.w	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2203      	movs	r2, #3
 8004d06:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e18c      	b.n	8005028 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d0e3      	beq.n	8004ce4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699a      	ldr	r2, [r3, #24]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0201 	orr.w	r2, r2, #1
 8004d2a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d2c:	f7fd feea 	bl	8002b04 <HAL_GetTick>
 8004d30:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d32:	e014      	b.n	8004d5e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d34:	f7fd fee6 	bl	8002b04 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b0a      	cmp	r3, #10
 8004d40:	d90d      	bls.n	8004d5e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d48:	f043 0201 	orr.w	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2203      	movs	r2, #3
 8004d56:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e164      	b.n	8005028 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0e3      	beq.n	8004d34 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0202 	orr.w	r2, r2, #2
 8004d7a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	7c1b      	ldrb	r3, [r3, #16]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d108      	bne.n	8004d96 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d92:	619a      	str	r2, [r3, #24]
 8004d94:	e007      	b.n	8004da6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699a      	ldr	r2, [r3, #24]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004da4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	7c5b      	ldrb	r3, [r3, #17]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d108      	bne.n	8004dc0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699a      	ldr	r2, [r3, #24]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dbc:	619a      	str	r2, [r3, #24]
 8004dbe:	e007      	b.n	8004dd0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004dce:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	7c9b      	ldrb	r3, [r3, #18]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d108      	bne.n	8004dea <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004de6:	619a      	str	r2, [r3, #24]
 8004de8:	e007      	b.n	8004dfa <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699a      	ldr	r2, [r3, #24]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004df8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004e1e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0210 	bic.w	r2, r2, #16
 8004e2e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d108      	bne.n	8004e4a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0204 	orr.w	r2, r2, #4
 8004e46:	619a      	str	r2, [r3, #24]
 8004e48:	e030      	b.n	8004eac <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d02c      	beq.n	8004eac <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d020      	beq.n	8004e9c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699a      	ldr	r2, [r3, #24]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e68:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0210 	orr.w	r2, r2, #16
 8004e78:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d114      	bne.n	8004eac <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699a      	ldr	r2, [r3, #24]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0220 	orr.w	r2, r2, #32
 8004e90:	619a      	str	r2, [r3, #24]
 8004e92:	e00b      	b.n	8004eac <HAL_FDCAN_Init+0x234>
 8004e94:	0800bc44 	.word	0x0800bc44
 8004e98:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0220 	orr.w	r2, r2, #32
 8004eaa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ebc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ec4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ed4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ed6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ee0:	d115      	bne.n	8004f0e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eec:	3b01      	subs	r3, #1
 8004eee:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ef0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004efa:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f02:	3b01      	subs	r3, #1
 8004f04:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004f0a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f0c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f34:	4413      	add	r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d011      	beq.n	8004f5e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004f42:	f023 0107 	bic.w	r1, r3, #7
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	3360      	adds	r3, #96	@ 0x60
 8004f4e:	443b      	add	r3, r7
 8004f50:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d011      	beq.n	8004f8a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f6e:	f023 0107 	bic.w	r1, r3, #7
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	3360      	adds	r3, #96	@ 0x60
 8004f7a:	443b      	add	r3, r7
 8004f7c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d012      	beq.n	8004fb8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f9a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	3360      	adds	r3, #96	@ 0x60
 8004fa6:	443b      	add	r3, r7
 8004fa8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004fac:	011a      	lsls	r2, r3, #4
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d012      	beq.n	8004fe6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004fc8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	3360      	adds	r3, #96	@ 0x60
 8004fd4:	443b      	add	r3, r7
 8004fd6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004fda:	021a      	lsls	r2, r3, #8
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a11      	ldr	r2, [pc, #68]	@ (8005030 <HAL_FDCAN_Init+0x3b8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d107      	bne.n	8005000 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f022 0203 	bic.w	r2, r2, #3
 8004ffe:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fdf7 	bl	8005c0c <FDCAN_CalcultateRamBlockAddresses>
 800501e:	4603      	mov	r3, r0
 8005020:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005024:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005028:	4618      	mov	r0, r3
 800502a:	3760      	adds	r7, #96	@ 0x60
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	4000a000 	.word	0x4000a000

08005034 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005044:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d002      	beq.n	8005052 <HAL_FDCAN_ConfigFilter+0x1e>
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d157      	bne.n	8005102 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d12b      	bne.n	80050b2 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	2b07      	cmp	r3, #7
 8005060:	d10d      	bne.n	800507e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800506e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005074:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8005076:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	e00e      	b.n	800509c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800508a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005092:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	e025      	b.n	80050fe <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	075a      	lsls	r2, r3, #29
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	2b07      	cmp	r3, #7
 80050c6:	d103      	bne.n	80050d0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	e006      	b.n	80050de <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	079a      	lsls	r2, r3, #30
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4413      	add	r3, r2
 80050ea:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	3304      	adds	r3, #4
 80050f6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e008      	b.n	8005114 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005108:	f043 0202 	orr.w	r2, r3, #2
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
  }
}
 8005114:	4618      	mov	r0, r3
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b01      	cmp	r3, #1
 8005132:	d111      	bne.n	8005158 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0201 	bic.w	r2, r2, #1
 800514a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8005154:	2300      	movs	r3, #0
 8005156:	e008      	b.n	800516a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800515e:	f043 0204 	orr.w	r2, r3, #4
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
  }
}
 800516a:	4618      	mov	r0, r3
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b086      	sub	sp, #24
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d141      	bne.n	8005212 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005196:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d109      	bne.n	80051b2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e038      	b.n	8005224 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80051ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e026      	b.n	8005224 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80051de:	0c1b      	lsrs	r3, r3, #16
 80051e0:	f003 031f 	and.w	r3, r3, #31
 80051e4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	68b9      	ldr	r1, [r7, #8]
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 fe93 	bl	8005f18 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2101      	movs	r1, #1
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	fa01 f202 	lsl.w	r2, r1, r2
 80051fe:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005202:	2201      	movs	r2, #1
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	409a      	lsls	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	e008      	b.n	8005224 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005218:	f043 0208 	orr.w	r2, r3, #8
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
  }
}
 8005224:	4618      	mov	r0, r3
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800522c:	b480      	push	{r7}
 800522e:	b08b      	sub	sp, #44	@ 0x2c
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005244:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005246:	7efb      	ldrb	r3, [r7, #27]
 8005248:	2b02      	cmp	r3, #2
 800524a:	f040 8149 	bne.w	80054e0 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b40      	cmp	r3, #64	@ 0x40
 8005252:	d14c      	bne.n	80052ee <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800525c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d109      	bne.n	8005278 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800526a:	f043 0220 	orr.w	r2, r3, #32
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e13c      	b.n	80054f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005284:	2b00      	cmp	r3, #0
 8005286:	d109      	bne.n	800529c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800528e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e12a      	b.n	80054f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052ac:	d10a      	bne.n	80052c4 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80052b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052be:	d101      	bne.n	80052c4 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80052c0:	2301      	movs	r3, #1
 80052c2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052cc:	0a1b      	lsrs	r3, r3, #8
 80052ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	4413      	add	r3, r2
 80052d6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e0:	69f9      	ldr	r1, [r7, #28]
 80052e2:	fb01 f303 	mul.w	r3, r1, r3
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ec:	e068      	b.n	80053c0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b41      	cmp	r3, #65	@ 0x41
 80052f2:	d14c      	bne.n	800538e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80052fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d109      	bne.n	8005318 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800530a:	f043 0220 	orr.w	r2, r3, #32
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0ec      	b.n	80054f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005320:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005324:	2b00      	cmp	r3, #0
 8005326:	d109      	bne.n	800533c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800532e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e0da      	b.n	80054f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005344:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800534c:	d10a      	bne.n	8005364 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005356:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800535a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800535e:	d101      	bne.n	8005364 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005360:	2301      	movs	r3, #1
 8005362:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800536c:	0a1b      	lsrs	r3, r3, #8
 800536e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	4413      	add	r3, r2
 8005376:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005380:	69f9      	ldr	r1, [r7, #28]
 8005382:	fb01 f303 	mul.w	r3, r1, r3
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	627b      	str	r3, [r7, #36]	@ 0x24
 800538c:	e018      	b.n	80053c0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	429a      	cmp	r2, r3
 8005396:	d309      	bcc.n	80053ac <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800539e:	f043 0220 	orr.w	r2, r3, #32
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0a2      	b.n	80054f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	fb01 f303 	mul.w	r3, r1, r3
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d107      	bne.n	80053e4 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80053d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	0c9b      	lsrs	r3, r3, #18
 80053da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	e005      	b.n	80053f0 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80053fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540a:	3304      	adds	r3, #4
 800540c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	b29a      	uxth	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	f003 020f 	and.w	r2, r3, #15
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	0e1b      	lsrs	r3, r3, #24
 8005444:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800544c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	0fda      	lsrs	r2, r3, #31
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	3304      	adds	r3, #4
 800545a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005460:	2300      	movs	r3, #0
 8005462:	623b      	str	r3, [r7, #32]
 8005464:	e00a      	b.n	800547c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	441a      	add	r2, r3
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	440b      	add	r3, r1
 8005472:	7812      	ldrb	r2, [r2, #0]
 8005474:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	3301      	adds	r3, #1
 800547a:	623b      	str	r3, [r7, #32]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	4a1f      	ldr	r2, [pc, #124]	@ (8005500 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005482:	5cd3      	ldrb	r3, [r2, r3]
 8005484:	461a      	mov	r2, r3
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	4293      	cmp	r3, r2
 800548a:	d3ec      	bcc.n	8005466 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b40      	cmp	r3, #64	@ 0x40
 8005490:	d105      	bne.n	800549e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69fa      	ldr	r2, [r7, #28]
 8005498:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800549c:	e01e      	b.n	80054dc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2b41      	cmp	r3, #65	@ 0x41
 80054a2:	d105      	bne.n	80054b0 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80054ae:	e015      	b.n	80054dc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b1f      	cmp	r3, #31
 80054b4:	d808      	bhi.n	80054c8 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2101      	movs	r1, #1
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	fa01 f202 	lsl.w	r2, r1, r2
 80054c2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80054c6:	e009      	b.n	80054dc <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f003 021f 	and.w	r2, r3, #31
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2101      	movs	r1, #1
 80054d4:	fa01 f202 	lsl.w	r2, r1, r2
 80054d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	e008      	b.n	80054f2 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054e6:	f043 0208 	orr.w	r2, r3, #8
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
  }
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	372c      	adds	r7, #44	@ 0x2c
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	0800bca0 	.word	0x0800bca0

08005504 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005516:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005518:	7dfb      	ldrb	r3, [r7, #23]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d002      	beq.n	8005524 <HAL_FDCAN_ActivateNotification+0x20>
 800551e:	7dfb      	ldrb	r3, [r7, #23]
 8005520:	2b02      	cmp	r3, #2
 8005522:	d155      	bne.n	80055d0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4013      	ands	r3, r2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d108      	bne.n	8005544 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0201 	orr.w	r2, r2, #1
 8005540:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005542:	e014      	b.n	800556e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	4013      	ands	r3, r2
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	429a      	cmp	r2, r3
 8005552:	d108      	bne.n	8005566 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0202 	orr.w	r2, r2, #2
 8005562:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005564:	e003      	b.n	800556e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2203      	movs	r2, #3
 800556c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005574:	2b00      	cmp	r3, #0
 8005576:	d009      	beq.n	800558c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	430a      	orrs	r2, r1
 8005588:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005592:	2b00      	cmp	r3, #0
 8005594:	d009      	beq.n	80055aa <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	4b0f      	ldr	r3, [pc, #60]	@ (80055f0 <HAL_FDCAN_ActivateNotification+0xec>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	430b      	orrs	r3, r1
 80055bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80055be:	4b0d      	ldr	r3, [pc, #52]	@ (80055f4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80055c0:	695a      	ldr	r2, [r3, #20]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	0f9b      	lsrs	r3, r3, #30
 80055c6:	490b      	ldr	r1, [pc, #44]	@ (80055f4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e008      	b.n	80055e2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055d6:	f043 0202 	orr.w	r2, r3, #2
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
  }
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	3fcfffff 	.word	0x3fcfffff
 80055f4:	4000a800 	.word	0x4000a800

080055f8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b096      	sub	sp, #88	@ 0x58
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005600:	4b9a      	ldr	r3, [pc, #616]	@ (800586c <HAL_FDCAN_IRQHandler+0x274>)
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	079b      	lsls	r3, r3, #30
 8005606:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005608:	4b98      	ldr	r3, [pc, #608]	@ (800586c <HAL_FDCAN_IRQHandler+0x274>)
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	079b      	lsls	r3, r3, #30
 800560e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005610:	4013      	ands	r3, r2
 8005612:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800561a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800561e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005626:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005628:	4013      	ands	r3, r2
 800562a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005640:	4013      	ands	r3, r2
 8005642:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800564a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800564e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005656:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005658:	4013      	ands	r3, r2
 800565a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005662:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005666:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800566e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005670:	4013      	ands	r3, r2
 8005672:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800567a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800567e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005686:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005688:	4013      	ands	r3, r2
 800568a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800569a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800569c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800569e:	0a1b      	lsrs	r3, r3, #8
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d010      	beq.n	80056ca <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80056a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056aa:	0a1b      	lsrs	r3, r3, #8
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80056be:	4b6b      	ldr	r3, [pc, #428]	@ (800586c <HAL_FDCAN_IRQHandler+0x274>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fa54 	bl	8005b72 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80056ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056cc:	0a9b      	lsrs	r3, r3, #10
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d01d      	beq.n	8005712 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80056d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d8:	0a9b      	lsrs	r3, r3, #10
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d017      	beq.n	8005712 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80056ea:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056f6:	4013      	ands	r3, r2
 80056f8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005702:	651a      	str	r2, [r3, #80]	@ 0x50
 8005704:	4b59      	ldr	r3, [pc, #356]	@ (800586c <HAL_FDCAN_IRQHandler+0x274>)
 8005706:	2200      	movs	r2, #0
 8005708:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800570a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fa07 	bl	8005b20 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00d      	beq.n	8005734 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800571e:	4b54      	ldr	r3, [pc, #336]	@ (8005870 <HAL_FDCAN_IRQHandler+0x278>)
 8005720:	400b      	ands	r3, r1
 8005722:	6513      	str	r3, [r2, #80]	@ 0x50
 8005724:	4a51      	ldr	r2, [pc, #324]	@ (800586c <HAL_FDCAN_IRQHandler+0x274>)
 8005726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005728:	0f9b      	lsrs	r3, r3, #30
 800572a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800572c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f9c0 	bl	8005ab4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005734:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00d      	beq.n	8005756 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005740:	4b4b      	ldr	r3, [pc, #300]	@ (8005870 <HAL_FDCAN_IRQHandler+0x278>)
 8005742:	400b      	ands	r3, r1
 8005744:	6513      	str	r3, [r2, #80]	@ 0x50
 8005746:	4a49      	ldr	r2, [pc, #292]	@ (800586c <HAL_FDCAN_IRQHandler+0x274>)
 8005748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800574a:	0f9b      	lsrs	r3, r3, #30
 800574c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800574e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f9ba 	bl	8005aca <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00d      	beq.n	8005778 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005762:	4b43      	ldr	r3, [pc, #268]	@ (8005870 <HAL_FDCAN_IRQHandler+0x278>)
 8005764:	400b      	ands	r3, r1
 8005766:	6513      	str	r3, [r2, #80]	@ 0x50
 8005768:	4a40      	ldr	r2, [pc, #256]	@ (800586c <HAL_FDCAN_IRQHandler+0x274>)
 800576a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800576c:	0f9b      	lsrs	r3, r3, #30
 800576e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005770:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7fc fa02 	bl	8001b7c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00d      	beq.n	800579a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005784:	4b3a      	ldr	r3, [pc, #232]	@ (8005870 <HAL_FDCAN_IRQHandler+0x278>)
 8005786:	400b      	ands	r3, r1
 8005788:	6513      	str	r3, [r2, #80]	@ 0x50
 800578a:	4a38      	ldr	r2, [pc, #224]	@ (800586c <HAL_FDCAN_IRQHandler+0x274>)
 800578c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800578e:	0f9b      	lsrs	r3, r3, #30
 8005790:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005792:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f9a3 	bl	8005ae0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800579a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800579c:	0adb      	lsrs	r3, r3, #11
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d010      	beq.n	80057c8 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80057a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a8:	0adb      	lsrs	r3, r3, #11
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80057bc:	4b2b      	ldr	r3, [pc, #172]	@ (800586c <HAL_FDCAN_IRQHandler+0x274>)
 80057be:	2200      	movs	r2, #0
 80057c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f997 	bl	8005af6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80057c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ca:	0a5b      	lsrs	r3, r3, #9
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01d      	beq.n	8005810 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80057d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d6:	0a5b      	lsrs	r3, r3, #9
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d017      	beq.n	8005810 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80057e8:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057f4:	4013      	ands	r3, r2
 80057f6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005800:	651a      	str	r2, [r3, #80]	@ 0x50
 8005802:	4b1a      	ldr	r3, [pc, #104]	@ (800586c <HAL_FDCAN_IRQHandler+0x274>)
 8005804:	2200      	movs	r2, #0
 8005806:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005808:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f97d 	bl	8005b0a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005812:	0cdb      	lsrs	r3, r3, #19
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d010      	beq.n	800583e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800581c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581e:	0cdb      	lsrs	r3, r3, #19
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00a      	beq.n	800583e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005830:	651a      	str	r2, [r3, #80]	@ 0x50
 8005832:	4b0e      	ldr	r3, [pc, #56]	@ (800586c <HAL_FDCAN_IRQHandler+0x274>)
 8005834:	2200      	movs	r2, #0
 8005836:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f97c 	bl	8005b36 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800583e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005840:	0c1b      	lsrs	r3, r3, #16
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d016      	beq.n	8005878 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800584a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584c:	0c1b      	lsrs	r3, r3, #16
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d010      	beq.n	8005878 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800585e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005860:	4b02      	ldr	r3, [pc, #8]	@ (800586c <HAL_FDCAN_IRQHandler+0x274>)
 8005862:	2200      	movs	r2, #0
 8005864:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	e004      	b.n	8005874 <HAL_FDCAN_IRQHandler+0x27c>
 800586a:	bf00      	nop
 800586c:	4000a800 	.word	0x4000a800
 8005870:	3fcfffff 	.word	0x3fcfffff
 8005874:	f000 f969 	bl	8005b4a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800587a:	0c9b      	lsrs	r3, r3, #18
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d010      	beq.n	80058a6 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005886:	0c9b      	lsrs	r3, r3, #18
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005898:	651a      	str	r2, [r3, #80]	@ 0x50
 800589a:	4b83      	ldr	r3, [pc, #524]	@ (8005aa8 <HAL_FDCAN_IRQHandler+0x4b0>)
 800589c:	2200      	movs	r2, #0
 800589e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f95c 	bl	8005b5e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80058a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a8:	0c5b      	lsrs	r3, r3, #17
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d015      	beq.n	80058de <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80058b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b4:	0c5b      	lsrs	r3, r3, #17
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00f      	beq.n	80058de <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80058c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80058c8:	4b77      	ldr	r3, [pc, #476]	@ (8005aa8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80058de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00d      	beq.n	8005900 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058ea:	4b70      	ldr	r3, [pc, #448]	@ (8005aac <HAL_FDCAN_IRQHandler+0x4b4>)
 80058ec:	400b      	ands	r3, r1
 80058ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80058f0:	4a6d      	ldr	r2, [pc, #436]	@ (8005aa8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80058f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058f4:	0f9b      	lsrs	r3, r3, #30
 80058f6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80058f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f94d 	bl	8005b9a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005902:	2b00      	cmp	r3, #0
 8005904:	d011      	beq.n	800592a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800590c:	4b67      	ldr	r3, [pc, #412]	@ (8005aac <HAL_FDCAN_IRQHandler+0x4b4>)
 800590e:	400b      	ands	r3, r1
 8005910:	6513      	str	r3, [r2, #80]	@ 0x50
 8005912:	4a65      	ldr	r2, [pc, #404]	@ (8005aa8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005916:	0f9b      	lsrs	r3, r3, #30
 8005918:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a60      	ldr	r2, [pc, #384]	@ (8005ab0 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	f040 80ac 	bne.w	8005a8e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 0303 	and.w	r3, r3, #3
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 80a4 	beq.w	8005a8e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005958:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800595a:	4013      	ands	r3, r2
 800595c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005968:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005970:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005972:	4013      	ands	r3, r2
 8005974:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005980:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800598a:	4013      	ands	r3, r2
 800598c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005998:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a0:	6a3a      	ldr	r2, [r7, #32]
 80059a2:	4013      	ands	r3, r2
 80059a4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80059b0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b8:	69fa      	ldr	r2, [r7, #28]
 80059ba:	4013      	ands	r3, r2
 80059bc:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80059ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d007      	beq.n	80059e4 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059da:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80059dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f8e6 	bl	8005bb0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80059e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059f0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80059f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f8e6 	bl	8005bc6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	099b      	lsrs	r3, r3, #6
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01a      	beq.n	8005a3c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	099b      	lsrs	r3, r3, #6
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d014      	beq.n	8005a3c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a18:	0c1b      	lsrs	r3, r3, #16
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a28:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2240      	movs	r2, #64	@ 0x40
 8005a30:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	6939      	ldr	r1, [r7, #16]
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f8d0 	bl	8005bdc <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d007      	beq.n	8005a52 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a48:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005a4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f8d1 	bl	8005bf4 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00b      	beq.n	8005a70 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	6a3a      	ldr	r2, [r7, #32]
 8005a5e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00b      	beq.n	8005a8e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f874 	bl	8005b86 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005a9e:	bf00      	nop
 8005aa0:	3758      	adds	r7, #88	@ 0x58
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	4000a800 	.word	0x4000a800
 8005aac:	3fcfffff 	.word	0x3fcfffff
 8005ab0:	4000a000 	.word	0x4000a000

08005ab4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005abe:	bf00      	nop
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005aea:	bf00      	nop
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
	...

08005c0c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c18:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005c22:	4ba7      	ldr	r3, [pc, #668]	@ (8005ec0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	0091      	lsls	r1, r2, #2
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	6812      	ldr	r2, [r2, #0]
 8005c2e:	430b      	orrs	r3, r1
 8005c30:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c3c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c44:	041a      	lsls	r2, r3, #16
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	4413      	add	r3, r2
 8005c58:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005c62:	4b97      	ldr	r3, [pc, #604]	@ (8005ec0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	0091      	lsls	r1, r2, #2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6812      	ldr	r2, [r2, #0]
 8005c6e:	430b      	orrs	r3, r1
 8005c70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c84:	041a      	lsls	r2, r3, #16
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	4413      	add	r3, r2
 8005c9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005ca4:	4b86      	ldr	r3, [pc, #536]	@ (8005ec0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	0091      	lsls	r1, r2, #2
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6812      	ldr	r2, [r2, #0]
 8005cb0:	430b      	orrs	r3, r1
 8005cb2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005cbe:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc6:	041a      	lsls	r2, r3, #16
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005cda:	fb02 f303 	mul.w	r3, r2, r3
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005cec:	4b74      	ldr	r3, [pc, #464]	@ (8005ec0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	0091      	lsls	r1, r2, #2
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d06:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d0e:	041a      	lsls	r2, r3, #16
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	4413      	add	r3, r2
 8005d2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005d34:	4b62      	ldr	r3, [pc, #392]	@ (8005ec0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d36:	4013      	ands	r3, r2
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	0091      	lsls	r1, r2, #2
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6812      	ldr	r2, [r2, #0]
 8005d40:	430b      	orrs	r3, r1
 8005d42:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005d4e:	fb02 f303 	mul.w	r3, r2, r3
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	4413      	add	r3, r2
 8005d56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005d60:	4b57      	ldr	r3, [pc, #348]	@ (8005ec0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d62:	4013      	ands	r3, r2
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	0091      	lsls	r1, r2, #2
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	6812      	ldr	r2, [r2, #0]
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d7a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d82:	041a      	lsls	r2, r3, #16
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	4413      	add	r3, r2
 8005d98:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005da2:	4b47      	ldr	r3, [pc, #284]	@ (8005ec0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005da4:	4013      	ands	r3, r2
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	0091      	lsls	r1, r2, #2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	430b      	orrs	r3, r1
 8005db0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005dbc:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dc4:	041a      	lsls	r2, r3, #16
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005dd8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005de0:	061a      	lsls	r2, r3, #24
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005df0:	4b34      	ldr	r3, [pc, #208]	@ (8005ec4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005df2:	4413      	add	r3, r2
 8005df4:	009a      	lsls	r2, r3, #2
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	441a      	add	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	441a      	add	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005e26:	fb01 f303 	mul.w	r3, r1, r3
 8005e2a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005e2c:	441a      	add	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e3a:	6879      	ldr	r1, [r7, #4]
 8005e3c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005e3e:	fb01 f303 	mul.w	r3, r1, r3
 8005e42:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005e44:	441a      	add	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e52:	6879      	ldr	r1, [r7, #4]
 8005e54:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005e56:	fb01 f303 	mul.w	r3, r1, r3
 8005e5a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005e5c:	441a      	add	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	441a      	add	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005e86:	fb01 f303 	mul.w	r3, r1, r3
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	441a      	add	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005ea2:	fb01 f303 	mul.w	r3, r1, r3
 8005ea6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005ea8:	441a      	add	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eb6:	4a04      	ldr	r2, [pc, #16]	@ (8005ec8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d915      	bls.n	8005ee8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005ebc:	e006      	b.n	8005ecc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005ebe:	bf00      	nop
 8005ec0:	ffff0003 	.word	0xffff0003
 8005ec4:	10002b00 	.word	0x10002b00
 8005ec8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ed2:	f043 0220 	orr.w	r2, r3, #32
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2203      	movs	r2, #3
 8005ee0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e010      	b.n	8005f0a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	e005      	b.n	8005efc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d3f3      	bcc.n	8005ef0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop

08005f18 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b089      	sub	sp, #36	@ 0x24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10a      	bne.n	8005f44 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005f36:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	e00a      	b.n	8005f5a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005f4c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005f52:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f58:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005f64:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005f6a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005f70:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f86:	6839      	ldr	r1, [r7, #0]
 8005f88:	fb01 f303 	mul.w	r3, r1, r3
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	69fa      	ldr	r2, [r7, #28]
 8005f96:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]
 8005fae:	e020      	b.n	8005ff2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	3303      	adds	r3, #3
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	3302      	adds	r3, #2
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	440b      	add	r3, r1
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005fc8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	6879      	ldr	r1, [r7, #4]
 8005fd0:	440b      	add	r3, r1
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005fd6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	440a      	add	r2, r1
 8005fde:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005fe0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	617b      	str	r3, [r7, #20]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	4a06      	ldr	r2, [pc, #24]	@ (8006010 <FDCAN_CopyMessageToRAM+0xf8>)
 8005ff8:	5cd3      	ldrb	r3, [r2, r3]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d3d6      	bcc.n	8005fb0 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8006002:	bf00      	nop
 8006004:	bf00      	nop
 8006006:	3724      	adds	r7, #36	@ 0x24
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	0800bca0 	.word	0x0800bca0

08006014 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006014:	b480      	push	{r7}
 8006016:	b089      	sub	sp, #36	@ 0x24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800601e:	2300      	movs	r3, #0
 8006020:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006022:	4b86      	ldr	r3, [pc, #536]	@ (800623c <HAL_GPIO_Init+0x228>)
 8006024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006026:	e18c      	b.n	8006342 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	2101      	movs	r1, #1
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	fa01 f303 	lsl.w	r3, r1, r3
 8006034:	4013      	ands	r3, r2
 8006036:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 817e 	beq.w	800633c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	2b01      	cmp	r3, #1
 800604a:	d005      	beq.n	8006058 <HAL_GPIO_Init+0x44>
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f003 0303 	and.w	r3, r3, #3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d130      	bne.n	80060ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	2203      	movs	r2, #3
 8006064:	fa02 f303 	lsl.w	r3, r2, r3
 8006068:	43db      	mvns	r3, r3
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	4013      	ands	r3, r2
 800606e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	4313      	orrs	r3, r2
 8006080:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800608e:	2201      	movs	r2, #1
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	fa02 f303 	lsl.w	r3, r2, r3
 8006096:	43db      	mvns	r3, r3
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	4013      	ands	r3, r2
 800609c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	091b      	lsrs	r3, r3, #4
 80060a4:	f003 0201 	and.w	r2, r3, #1
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	fa02 f303 	lsl.w	r3, r2, r3
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f003 0303 	and.w	r3, r3, #3
 80060c2:	2b03      	cmp	r3, #3
 80060c4:	d017      	beq.n	80060f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	2203      	movs	r2, #3
 80060d2:	fa02 f303 	lsl.w	r3, r2, r3
 80060d6:	43db      	mvns	r3, r3
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	4013      	ands	r3, r2
 80060dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	005b      	lsls	r3, r3, #1
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d123      	bne.n	800614a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	08da      	lsrs	r2, r3, #3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	3208      	adds	r2, #8
 800610a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800610e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	220f      	movs	r2, #15
 800611a:	fa02 f303 	lsl.w	r3, r2, r3
 800611e:	43db      	mvns	r3, r3
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	4013      	ands	r3, r2
 8006124:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	691a      	ldr	r2, [r3, #16]
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	fa02 f303 	lsl.w	r3, r2, r3
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	4313      	orrs	r3, r2
 800613a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	08da      	lsrs	r2, r3, #3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3208      	adds	r2, #8
 8006144:	69b9      	ldr	r1, [r7, #24]
 8006146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	2203      	movs	r2, #3
 8006156:	fa02 f303 	lsl.w	r3, r2, r3
 800615a:	43db      	mvns	r3, r3
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	4013      	ands	r3, r2
 8006160:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f003 0203 	and.w	r2, r3, #3
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	4313      	orrs	r3, r2
 8006176:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 80d8 	beq.w	800633c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800618c:	4b2c      	ldr	r3, [pc, #176]	@ (8006240 <HAL_GPIO_Init+0x22c>)
 800618e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006192:	4a2b      	ldr	r2, [pc, #172]	@ (8006240 <HAL_GPIO_Init+0x22c>)
 8006194:	f043 0302 	orr.w	r3, r3, #2
 8006198:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800619c:	4b28      	ldr	r3, [pc, #160]	@ (8006240 <HAL_GPIO_Init+0x22c>)
 800619e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	60fb      	str	r3, [r7, #12]
 80061a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061aa:	4a26      	ldr	r2, [pc, #152]	@ (8006244 <HAL_GPIO_Init+0x230>)
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	089b      	lsrs	r3, r3, #2
 80061b0:	3302      	adds	r3, #2
 80061b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	220f      	movs	r2, #15
 80061c2:	fa02 f303 	lsl.w	r3, r2, r3
 80061c6:	43db      	mvns	r3, r3
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	4013      	ands	r3, r2
 80061cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006248 <HAL_GPIO_Init+0x234>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d04a      	beq.n	800626c <HAL_GPIO_Init+0x258>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a1c      	ldr	r2, [pc, #112]	@ (800624c <HAL_GPIO_Init+0x238>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d02b      	beq.n	8006236 <HAL_GPIO_Init+0x222>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006250 <HAL_GPIO_Init+0x23c>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d025      	beq.n	8006232 <HAL_GPIO_Init+0x21e>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a1a      	ldr	r2, [pc, #104]	@ (8006254 <HAL_GPIO_Init+0x240>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d01f      	beq.n	800622e <HAL_GPIO_Init+0x21a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a19      	ldr	r2, [pc, #100]	@ (8006258 <HAL_GPIO_Init+0x244>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d019      	beq.n	800622a <HAL_GPIO_Init+0x216>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a18      	ldr	r2, [pc, #96]	@ (800625c <HAL_GPIO_Init+0x248>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d013      	beq.n	8006226 <HAL_GPIO_Init+0x212>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a17      	ldr	r2, [pc, #92]	@ (8006260 <HAL_GPIO_Init+0x24c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00d      	beq.n	8006222 <HAL_GPIO_Init+0x20e>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a16      	ldr	r2, [pc, #88]	@ (8006264 <HAL_GPIO_Init+0x250>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d007      	beq.n	800621e <HAL_GPIO_Init+0x20a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a15      	ldr	r2, [pc, #84]	@ (8006268 <HAL_GPIO_Init+0x254>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d101      	bne.n	800621a <HAL_GPIO_Init+0x206>
 8006216:	2309      	movs	r3, #9
 8006218:	e029      	b.n	800626e <HAL_GPIO_Init+0x25a>
 800621a:	230a      	movs	r3, #10
 800621c:	e027      	b.n	800626e <HAL_GPIO_Init+0x25a>
 800621e:	2307      	movs	r3, #7
 8006220:	e025      	b.n	800626e <HAL_GPIO_Init+0x25a>
 8006222:	2306      	movs	r3, #6
 8006224:	e023      	b.n	800626e <HAL_GPIO_Init+0x25a>
 8006226:	2305      	movs	r3, #5
 8006228:	e021      	b.n	800626e <HAL_GPIO_Init+0x25a>
 800622a:	2304      	movs	r3, #4
 800622c:	e01f      	b.n	800626e <HAL_GPIO_Init+0x25a>
 800622e:	2303      	movs	r3, #3
 8006230:	e01d      	b.n	800626e <HAL_GPIO_Init+0x25a>
 8006232:	2302      	movs	r3, #2
 8006234:	e01b      	b.n	800626e <HAL_GPIO_Init+0x25a>
 8006236:	2301      	movs	r3, #1
 8006238:	e019      	b.n	800626e <HAL_GPIO_Init+0x25a>
 800623a:	bf00      	nop
 800623c:	58000080 	.word	0x58000080
 8006240:	58024400 	.word	0x58024400
 8006244:	58000400 	.word	0x58000400
 8006248:	58020000 	.word	0x58020000
 800624c:	58020400 	.word	0x58020400
 8006250:	58020800 	.word	0x58020800
 8006254:	58020c00 	.word	0x58020c00
 8006258:	58021000 	.word	0x58021000
 800625c:	58021400 	.word	0x58021400
 8006260:	58021800 	.word	0x58021800
 8006264:	58021c00 	.word	0x58021c00
 8006268:	58022400 	.word	0x58022400
 800626c:	2300      	movs	r3, #0
 800626e:	69fa      	ldr	r2, [r7, #28]
 8006270:	f002 0203 	and.w	r2, r2, #3
 8006274:	0092      	lsls	r2, r2, #2
 8006276:	4093      	lsls	r3, r2
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	4313      	orrs	r3, r2
 800627c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800627e:	4938      	ldr	r1, [pc, #224]	@ (8006360 <HAL_GPIO_Init+0x34c>)
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	089b      	lsrs	r3, r3, #2
 8006284:	3302      	adds	r3, #2
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800628c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	43db      	mvns	r3, r3
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	4013      	ands	r3, r2
 800629c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80062b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80062ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	43db      	mvns	r3, r3
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	4013      	ands	r3, r2
 80062ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80062e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	43db      	mvns	r3, r3
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	4013      	ands	r3, r2
 80062f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	43db      	mvns	r3, r3
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	4013      	ands	r3, r2
 8006320:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	4313      	orrs	r3, r2
 8006334:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	3301      	adds	r3, #1
 8006340:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	fa22 f303 	lsr.w	r3, r2, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	f47f ae6b 	bne.w	8006028 <HAL_GPIO_Init+0x14>
  }
}
 8006352:	bf00      	nop
 8006354:	bf00      	nop
 8006356:	3724      	adds	r7, #36	@ 0x24
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	58000400 	.word	0x58000400

08006364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691a      	ldr	r2, [r3, #16]
 8006374:	887b      	ldrh	r3, [r7, #2]
 8006376:	4013      	ands	r3, r2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800637c:	2301      	movs	r3, #1
 800637e:	73fb      	strb	r3, [r7, #15]
 8006380:	e001      	b.n	8006386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006382:	2300      	movs	r3, #0
 8006384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	807b      	strh	r3, [r7, #2]
 80063a0:	4613      	mov	r3, r2
 80063a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063a4:	787b      	ldrb	r3, [r7, #1]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063aa:	887a      	ldrh	r2, [r7, #2]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80063b0:	e003      	b.n	80063ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063b2:	887b      	ldrh	r3, [r7, #2]
 80063b4:	041a      	lsls	r2, r3, #16
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	619a      	str	r2, [r3, #24]
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
	...

080063c8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80063d0:	4b19      	ldr	r3, [pc, #100]	@ (8006438 <HAL_PWREx_ConfigSupply+0x70>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d00a      	beq.n	80063f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80063dc:	4b16      	ldr	r3, [pc, #88]	@ (8006438 <HAL_PWREx_ConfigSupply+0x70>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f003 0307 	and.w	r3, r3, #7
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d001      	beq.n	80063ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e01f      	b.n	800642e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	e01d      	b.n	800642e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80063f2:	4b11      	ldr	r3, [pc, #68]	@ (8006438 <HAL_PWREx_ConfigSupply+0x70>)
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f023 0207 	bic.w	r2, r3, #7
 80063fa:	490f      	ldr	r1, [pc, #60]	@ (8006438 <HAL_PWREx_ConfigSupply+0x70>)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006402:	f7fc fb7f 	bl	8002b04 <HAL_GetTick>
 8006406:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006408:	e009      	b.n	800641e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800640a:	f7fc fb7b 	bl	8002b04 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006418:	d901      	bls.n	800641e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e007      	b.n	800642e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800641e:	4b06      	ldr	r3, [pc, #24]	@ (8006438 <HAL_PWREx_ConfigSupply+0x70>)
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800642a:	d1ee      	bne.n	800640a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	58024800 	.word	0x58024800

0800643c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08c      	sub	sp, #48	@ 0x30
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e3c8      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 8087 	beq.w	800656a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800645c:	4b88      	ldr	r3, [pc, #544]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006466:	4b86      	ldr	r3, [pc, #536]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 8006468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800646c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646e:	2b10      	cmp	r3, #16
 8006470:	d007      	beq.n	8006482 <HAL_RCC_OscConfig+0x46>
 8006472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006474:	2b18      	cmp	r3, #24
 8006476:	d110      	bne.n	800649a <HAL_RCC_OscConfig+0x5e>
 8006478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d10b      	bne.n	800649a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006482:	4b7f      	ldr	r3, [pc, #508]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d06c      	beq.n	8006568 <HAL_RCC_OscConfig+0x12c>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d168      	bne.n	8006568 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e3a2      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064a2:	d106      	bne.n	80064b2 <HAL_RCC_OscConfig+0x76>
 80064a4:	4b76      	ldr	r3, [pc, #472]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a75      	ldr	r2, [pc, #468]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 80064aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064ae:	6013      	str	r3, [r2, #0]
 80064b0:	e02e      	b.n	8006510 <HAL_RCC_OscConfig+0xd4>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10c      	bne.n	80064d4 <HAL_RCC_OscConfig+0x98>
 80064ba:	4b71      	ldr	r3, [pc, #452]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a70      	ldr	r2, [pc, #448]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 80064c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	4b6e      	ldr	r3, [pc, #440]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a6d      	ldr	r2, [pc, #436]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 80064cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	e01d      	b.n	8006510 <HAL_RCC_OscConfig+0xd4>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064dc:	d10c      	bne.n	80064f8 <HAL_RCC_OscConfig+0xbc>
 80064de:	4b68      	ldr	r3, [pc, #416]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a67      	ldr	r2, [pc, #412]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 80064e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	4b65      	ldr	r3, [pc, #404]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a64      	ldr	r2, [pc, #400]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 80064f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064f4:	6013      	str	r3, [r2, #0]
 80064f6:	e00b      	b.n	8006510 <HAL_RCC_OscConfig+0xd4>
 80064f8:	4b61      	ldr	r3, [pc, #388]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a60      	ldr	r2, [pc, #384]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 80064fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006502:	6013      	str	r3, [r2, #0]
 8006504:	4b5e      	ldr	r3, [pc, #376]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a5d      	ldr	r2, [pc, #372]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 800650a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800650e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d013      	beq.n	8006540 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006518:	f7fc faf4 	bl	8002b04 <HAL_GetTick>
 800651c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800651e:	e008      	b.n	8006532 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006520:	f7fc faf0 	bl	8002b04 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	2b64      	cmp	r3, #100	@ 0x64
 800652c:	d901      	bls.n	8006532 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e356      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006532:	4b53      	ldr	r3, [pc, #332]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d0f0      	beq.n	8006520 <HAL_RCC_OscConfig+0xe4>
 800653e:	e014      	b.n	800656a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006540:	f7fc fae0 	bl	8002b04 <HAL_GetTick>
 8006544:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006546:	e008      	b.n	800655a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006548:	f7fc fadc 	bl	8002b04 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b64      	cmp	r3, #100	@ 0x64
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e342      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800655a:	4b49      	ldr	r3, [pc, #292]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f0      	bne.n	8006548 <HAL_RCC_OscConfig+0x10c>
 8006566:	e000      	b.n	800656a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 808c 	beq.w	8006690 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006578:	4b41      	ldr	r3, [pc, #260]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006580:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006582:	4b3f      	ldr	r3, [pc, #252]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 8006584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006586:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d007      	beq.n	800659e <HAL_RCC_OscConfig+0x162>
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	2b18      	cmp	r3, #24
 8006592:	d137      	bne.n	8006604 <HAL_RCC_OscConfig+0x1c8>
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d132      	bne.n	8006604 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800659e:	4b38      	ldr	r3, [pc, #224]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0304 	and.w	r3, r3, #4
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d005      	beq.n	80065b6 <HAL_RCC_OscConfig+0x17a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e314      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065b6:	4b32      	ldr	r3, [pc, #200]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f023 0219 	bic.w	r2, r3, #25
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	492f      	ldr	r1, [pc, #188]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c8:	f7fc fa9c 	bl	8002b04 <HAL_GetTick>
 80065cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065ce:	e008      	b.n	80065e2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065d0:	f7fc fa98 	bl	8002b04 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e2fe      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065e2:	4b27      	ldr	r3, [pc, #156]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0304 	and.w	r3, r3, #4
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0f0      	beq.n	80065d0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ee:	4b24      	ldr	r3, [pc, #144]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	061b      	lsls	r3, r3, #24
 80065fc:	4920      	ldr	r1, [pc, #128]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006602:	e045      	b.n	8006690 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d026      	beq.n	800665a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800660c:	4b1c      	ldr	r3, [pc, #112]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f023 0219 	bic.w	r2, r3, #25
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	4919      	ldr	r1, [pc, #100]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 800661a:	4313      	orrs	r3, r2
 800661c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661e:	f7fc fa71 	bl	8002b04 <HAL_GetTick>
 8006622:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006624:	e008      	b.n	8006638 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006626:	f7fc fa6d 	bl	8002b04 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b02      	cmp	r3, #2
 8006632:	d901      	bls.n	8006638 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e2d3      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006638:	4b11      	ldr	r3, [pc, #68]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0f0      	beq.n	8006626 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006644:	4b0e      	ldr	r3, [pc, #56]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	061b      	lsls	r3, r3, #24
 8006652:	490b      	ldr	r1, [pc, #44]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 8006654:	4313      	orrs	r3, r2
 8006656:	604b      	str	r3, [r1, #4]
 8006658:	e01a      	b.n	8006690 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800665a:	4b09      	ldr	r3, [pc, #36]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a08      	ldr	r2, [pc, #32]	@ (8006680 <HAL_RCC_OscConfig+0x244>)
 8006660:	f023 0301 	bic.w	r3, r3, #1
 8006664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006666:	f7fc fa4d 	bl	8002b04 <HAL_GetTick>
 800666a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800666c:	e00a      	b.n	8006684 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800666e:	f7fc fa49 	bl	8002b04 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d903      	bls.n	8006684 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e2af      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
 8006680:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006684:	4b96      	ldr	r3, [pc, #600]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1ee      	bne.n	800666e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0310 	and.w	r3, r3, #16
 8006698:	2b00      	cmp	r3, #0
 800669a:	d06a      	beq.n	8006772 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800669c:	4b90      	ldr	r3, [pc, #576]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066a4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066a6:	4b8e      	ldr	r3, [pc, #568]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 80066a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066aa:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	d007      	beq.n	80066c2 <HAL_RCC_OscConfig+0x286>
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b18      	cmp	r3, #24
 80066b6:	d11b      	bne.n	80066f0 <HAL_RCC_OscConfig+0x2b4>
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d116      	bne.n	80066f0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066c2:	4b87      	ldr	r3, [pc, #540]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d005      	beq.n	80066da <HAL_RCC_OscConfig+0x29e>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	2b80      	cmp	r3, #128	@ 0x80
 80066d4:	d001      	beq.n	80066da <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e282      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066da:	4b81      	ldr	r3, [pc, #516]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	061b      	lsls	r3, r3, #24
 80066e8:	497d      	ldr	r1, [pc, #500]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066ee:	e040      	b.n	8006772 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d023      	beq.n	8006740 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80066f8:	4b79      	ldr	r3, [pc, #484]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a78      	ldr	r2, [pc, #480]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 80066fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006704:	f7fc f9fe 	bl	8002b04 <HAL_GetTick>
 8006708:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800670c:	f7fc f9fa 	bl	8002b04 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e260      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800671e:	4b70      	ldr	r3, [pc, #448]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0f0      	beq.n	800670c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800672a:	4b6d      	ldr	r3, [pc, #436]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	061b      	lsls	r3, r3, #24
 8006738:	4969      	ldr	r1, [pc, #420]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 800673a:	4313      	orrs	r3, r2
 800673c:	60cb      	str	r3, [r1, #12]
 800673e:	e018      	b.n	8006772 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006740:	4b67      	ldr	r3, [pc, #412]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a66      	ldr	r2, [pc, #408]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 8006746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800674a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674c:	f7fc f9da 	bl	8002b04 <HAL_GetTick>
 8006750:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006754:	f7fc f9d6 	bl	8002b04 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b02      	cmp	r3, #2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e23c      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006766:	4b5e      	ldr	r3, [pc, #376]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1f0      	bne.n	8006754 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0308 	and.w	r3, r3, #8
 800677a:	2b00      	cmp	r3, #0
 800677c:	d036      	beq.n	80067ec <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d019      	beq.n	80067ba <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006786:	4b56      	ldr	r3, [pc, #344]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 8006788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800678a:	4a55      	ldr	r2, [pc, #340]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 800678c:	f043 0301 	orr.w	r3, r3, #1
 8006790:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006792:	f7fc f9b7 	bl	8002b04 <HAL_GetTick>
 8006796:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006798:	e008      	b.n	80067ac <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800679a:	f7fc f9b3 	bl	8002b04 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d901      	bls.n	80067ac <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e219      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067ac:	4b4c      	ldr	r3, [pc, #304]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 80067ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d0f0      	beq.n	800679a <HAL_RCC_OscConfig+0x35e>
 80067b8:	e018      	b.n	80067ec <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067ba:	4b49      	ldr	r3, [pc, #292]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 80067bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067be:	4a48      	ldr	r2, [pc, #288]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 80067c0:	f023 0301 	bic.w	r3, r3, #1
 80067c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c6:	f7fc f99d 	bl	8002b04 <HAL_GetTick>
 80067ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067cc:	e008      	b.n	80067e0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067ce:	f7fc f999 	bl	8002b04 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e1ff      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067e0:	4b3f      	ldr	r3, [pc, #252]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 80067e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1f0      	bne.n	80067ce <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0320 	and.w	r3, r3, #32
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d036      	beq.n	8006866 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d019      	beq.n	8006834 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006800:	4b37      	ldr	r3, [pc, #220]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a36      	ldr	r2, [pc, #216]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 8006806:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800680a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800680c:	f7fc f97a 	bl	8002b04 <HAL_GetTick>
 8006810:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006814:	f7fc f976 	bl	8002b04 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e1dc      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006826:	4b2e      	ldr	r3, [pc, #184]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0f0      	beq.n	8006814 <HAL_RCC_OscConfig+0x3d8>
 8006832:	e018      	b.n	8006866 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006834:	4b2a      	ldr	r3, [pc, #168]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a29      	ldr	r2, [pc, #164]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 800683a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800683e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006840:	f7fc f960 	bl	8002b04 <HAL_GetTick>
 8006844:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006846:	e008      	b.n	800685a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006848:	f7fc f95c 	bl	8002b04 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e1c2      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800685a:	4b21      	ldr	r3, [pc, #132]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1f0      	bne.n	8006848 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0304 	and.w	r3, r3, #4
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 8086 	beq.w	8006980 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006874:	4b1b      	ldr	r3, [pc, #108]	@ (80068e4 <HAL_RCC_OscConfig+0x4a8>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a1a      	ldr	r2, [pc, #104]	@ (80068e4 <HAL_RCC_OscConfig+0x4a8>)
 800687a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800687e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006880:	f7fc f940 	bl	8002b04 <HAL_GetTick>
 8006884:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006888:	f7fc f93c 	bl	8002b04 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b64      	cmp	r3, #100	@ 0x64
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e1a2      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800689a:	4b12      	ldr	r3, [pc, #72]	@ (80068e4 <HAL_RCC_OscConfig+0x4a8>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0f0      	beq.n	8006888 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d106      	bne.n	80068bc <HAL_RCC_OscConfig+0x480>
 80068ae:	4b0c      	ldr	r3, [pc, #48]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 80068b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b2:	4a0b      	ldr	r2, [pc, #44]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 80068b4:	f043 0301 	orr.w	r3, r3, #1
 80068b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80068ba:	e032      	b.n	8006922 <HAL_RCC_OscConfig+0x4e6>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d111      	bne.n	80068e8 <HAL_RCC_OscConfig+0x4ac>
 80068c4:	4b06      	ldr	r3, [pc, #24]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 80068c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c8:	4a05      	ldr	r2, [pc, #20]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 80068ca:	f023 0301 	bic.w	r3, r3, #1
 80068ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80068d0:	4b03      	ldr	r3, [pc, #12]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 80068d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068d4:	4a02      	ldr	r2, [pc, #8]	@ (80068e0 <HAL_RCC_OscConfig+0x4a4>)
 80068d6:	f023 0304 	bic.w	r3, r3, #4
 80068da:	6713      	str	r3, [r2, #112]	@ 0x70
 80068dc:	e021      	b.n	8006922 <HAL_RCC_OscConfig+0x4e6>
 80068de:	bf00      	nop
 80068e0:	58024400 	.word	0x58024400
 80068e4:	58024800 	.word	0x58024800
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	2b05      	cmp	r3, #5
 80068ee:	d10c      	bne.n	800690a <HAL_RCC_OscConfig+0x4ce>
 80068f0:	4b83      	ldr	r3, [pc, #524]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 80068f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f4:	4a82      	ldr	r2, [pc, #520]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 80068f6:	f043 0304 	orr.w	r3, r3, #4
 80068fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80068fc:	4b80      	ldr	r3, [pc, #512]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 80068fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006900:	4a7f      	ldr	r2, [pc, #508]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006902:	f043 0301 	orr.w	r3, r3, #1
 8006906:	6713      	str	r3, [r2, #112]	@ 0x70
 8006908:	e00b      	b.n	8006922 <HAL_RCC_OscConfig+0x4e6>
 800690a:	4b7d      	ldr	r3, [pc, #500]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 800690c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800690e:	4a7c      	ldr	r2, [pc, #496]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006910:	f023 0301 	bic.w	r3, r3, #1
 8006914:	6713      	str	r3, [r2, #112]	@ 0x70
 8006916:	4b7a      	ldr	r3, [pc, #488]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800691a:	4a79      	ldr	r2, [pc, #484]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 800691c:	f023 0304 	bic.w	r3, r3, #4
 8006920:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d015      	beq.n	8006956 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800692a:	f7fc f8eb 	bl	8002b04 <HAL_GetTick>
 800692e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006930:	e00a      	b.n	8006948 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006932:	f7fc f8e7 	bl	8002b04 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006940:	4293      	cmp	r3, r2
 8006942:	d901      	bls.n	8006948 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e14b      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006948:	4b6d      	ldr	r3, [pc, #436]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 800694a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0ee      	beq.n	8006932 <HAL_RCC_OscConfig+0x4f6>
 8006954:	e014      	b.n	8006980 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006956:	f7fc f8d5 	bl	8002b04 <HAL_GetTick>
 800695a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800695c:	e00a      	b.n	8006974 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800695e:	f7fc f8d1 	bl	8002b04 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800696c:	4293      	cmp	r3, r2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e135      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006974:	4b62      	ldr	r3, [pc, #392]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1ee      	bne.n	800695e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 812a 	beq.w	8006bde <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800698a:	4b5d      	ldr	r3, [pc, #372]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006992:	2b18      	cmp	r3, #24
 8006994:	f000 80ba 	beq.w	8006b0c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699c:	2b02      	cmp	r3, #2
 800699e:	f040 8095 	bne.w	8006acc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069a2:	4b57      	ldr	r3, [pc, #348]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a56      	ldr	r2, [pc, #344]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 80069a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ae:	f7fc f8a9 	bl	8002b04 <HAL_GetTick>
 80069b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069b4:	e008      	b.n	80069c8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069b6:	f7fc f8a5 	bl	8002b04 <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d901      	bls.n	80069c8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e10b      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069c8:	4b4d      	ldr	r3, [pc, #308]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1f0      	bne.n	80069b6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069d4:	4b4a      	ldr	r3, [pc, #296]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 80069d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069d8:	4b4a      	ldr	r3, [pc, #296]	@ (8006b04 <HAL_RCC_OscConfig+0x6c8>)
 80069da:	4013      	ands	r3, r2
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80069e4:	0112      	lsls	r2, r2, #4
 80069e6:	430a      	orrs	r2, r1
 80069e8:	4945      	ldr	r1, [pc, #276]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	628b      	str	r3, [r1, #40]	@ 0x28
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f2:	3b01      	subs	r3, #1
 80069f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069fc:	3b01      	subs	r3, #1
 80069fe:	025b      	lsls	r3, r3, #9
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	431a      	orrs	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	041b      	lsls	r3, r3, #16
 8006a0c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006a10:	431a      	orrs	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a16:	3b01      	subs	r3, #1
 8006a18:	061b      	lsls	r3, r3, #24
 8006a1a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006a1e:	4938      	ldr	r1, [pc, #224]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006a24:	4b36      	ldr	r3, [pc, #216]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a28:	4a35      	ldr	r2, [pc, #212]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a2a:	f023 0301 	bic.w	r3, r3, #1
 8006a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a30:	4b33      	ldr	r3, [pc, #204]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a34:	4b34      	ldr	r3, [pc, #208]	@ (8006b08 <HAL_RCC_OscConfig+0x6cc>)
 8006a36:	4013      	ands	r3, r2
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a3c:	00d2      	lsls	r2, r2, #3
 8006a3e:	4930      	ldr	r1, [pc, #192]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a44:	4b2e      	ldr	r3, [pc, #184]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a48:	f023 020c 	bic.w	r2, r3, #12
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a50:	492b      	ldr	r1, [pc, #172]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a56:	4b2a      	ldr	r3, [pc, #168]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5a:	f023 0202 	bic.w	r2, r3, #2
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a62:	4927      	ldr	r1, [pc, #156]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a68:	4b25      	ldr	r3, [pc, #148]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6c:	4a24      	ldr	r2, [pc, #144]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a74:	4b22      	ldr	r3, [pc, #136]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a78:	4a21      	ldr	r2, [pc, #132]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006a80:	4b1f      	ldr	r3, [pc, #124]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a84:	4a1e      	ldr	r2, [pc, #120]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a90:	4a1b      	ldr	r2, [pc, #108]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a92:	f043 0301 	orr.w	r3, r3, #1
 8006a96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a98:	4b19      	ldr	r3, [pc, #100]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a18      	ldr	r2, [pc, #96]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa4:	f7fc f82e 	bl	8002b04 <HAL_GetTick>
 8006aa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aac:	f7fc f82a 	bl	8002b04 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e090      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006abe:	4b10      	ldr	r3, [pc, #64]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0f0      	beq.n	8006aac <HAL_RCC_OscConfig+0x670>
 8006aca:	e088      	b.n	8006bde <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006acc:	4b0c      	ldr	r3, [pc, #48]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006ad2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad8:	f7fc f814 	bl	8002b04 <HAL_GetTick>
 8006adc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ae0:	f7fc f810 	bl	8002b04 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e076      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006af2:	4b03      	ldr	r3, [pc, #12]	@ (8006b00 <HAL_RCC_OscConfig+0x6c4>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1f0      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x6a4>
 8006afe:	e06e      	b.n	8006bde <HAL_RCC_OscConfig+0x7a2>
 8006b00:	58024400 	.word	0x58024400
 8006b04:	fffffc0c 	.word	0xfffffc0c
 8006b08:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b0c:	4b36      	ldr	r3, [pc, #216]	@ (8006be8 <HAL_RCC_OscConfig+0x7ac>)
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b12:	4b35      	ldr	r3, [pc, #212]	@ (8006be8 <HAL_RCC_OscConfig+0x7ac>)
 8006b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b16:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d031      	beq.n	8006b84 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f003 0203 	and.w	r2, r3, #3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d12a      	bne.n	8006b84 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	091b      	lsrs	r3, r3, #4
 8006b32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d122      	bne.n	8006b84 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b48:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d11a      	bne.n	8006b84 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	0a5b      	lsrs	r3, r3, #9
 8006b52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d111      	bne.n	8006b84 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	0c1b      	lsrs	r3, r3, #16
 8006b64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d108      	bne.n	8006b84 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	0e1b      	lsrs	r3, r3, #24
 8006b76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d001      	beq.n	8006b88 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e02b      	b.n	8006be0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006b88:	4b17      	ldr	r3, [pc, #92]	@ (8006be8 <HAL_RCC_OscConfig+0x7ac>)
 8006b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b8c:	08db      	lsrs	r3, r3, #3
 8006b8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b92:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d01f      	beq.n	8006bde <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006b9e:	4b12      	ldr	r3, [pc, #72]	@ (8006be8 <HAL_RCC_OscConfig+0x7ac>)
 8006ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba2:	4a11      	ldr	r2, [pc, #68]	@ (8006be8 <HAL_RCC_OscConfig+0x7ac>)
 8006ba4:	f023 0301 	bic.w	r3, r3, #1
 8006ba8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006baa:	f7fb ffab 	bl	8002b04 <HAL_GetTick>
 8006bae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006bb0:	bf00      	nop
 8006bb2:	f7fb ffa7 	bl	8002b04 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d0f9      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8006be8 <HAL_RCC_OscConfig+0x7ac>)
 8006bc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006bec <HAL_RCC_OscConfig+0x7b0>)
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006bca:	00d2      	lsls	r2, r2, #3
 8006bcc:	4906      	ldr	r1, [pc, #24]	@ (8006be8 <HAL_RCC_OscConfig+0x7ac>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006bd2:	4b05      	ldr	r3, [pc, #20]	@ (8006be8 <HAL_RCC_OscConfig+0x7ac>)
 8006bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd6:	4a04      	ldr	r2, [pc, #16]	@ (8006be8 <HAL_RCC_OscConfig+0x7ac>)
 8006bd8:	f043 0301 	orr.w	r3, r3, #1
 8006bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3730      	adds	r7, #48	@ 0x30
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	58024400 	.word	0x58024400
 8006bec:	ffff0007 	.word	0xffff0007

08006bf0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e19c      	b.n	8006f3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c04:	4b8a      	ldr	r3, [pc, #552]	@ (8006e30 <HAL_RCC_ClockConfig+0x240>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d910      	bls.n	8006c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c12:	4b87      	ldr	r3, [pc, #540]	@ (8006e30 <HAL_RCC_ClockConfig+0x240>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f023 020f 	bic.w	r2, r3, #15
 8006c1a:	4985      	ldr	r1, [pc, #532]	@ (8006e30 <HAL_RCC_ClockConfig+0x240>)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c22:	4b83      	ldr	r3, [pc, #524]	@ (8006e30 <HAL_RCC_ClockConfig+0x240>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 030f 	and.w	r3, r3, #15
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d001      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e184      	b.n	8006f3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d010      	beq.n	8006c62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691a      	ldr	r2, [r3, #16]
 8006c44:	4b7b      	ldr	r3, [pc, #492]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d908      	bls.n	8006c62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c50:	4b78      	ldr	r3, [pc, #480]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	4975      	ldr	r1, [pc, #468]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0308 	and.w	r3, r3, #8
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d010      	beq.n	8006c90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	695a      	ldr	r2, [r3, #20]
 8006c72:	4b70      	ldr	r3, [pc, #448]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d908      	bls.n	8006c90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c7e:	4b6d      	ldr	r3, [pc, #436]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	496a      	ldr	r1, [pc, #424]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0310 	and.w	r3, r3, #16
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d010      	beq.n	8006cbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	699a      	ldr	r2, [r3, #24]
 8006ca0:	4b64      	ldr	r3, [pc, #400]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d908      	bls.n	8006cbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006cac:	4b61      	ldr	r3, [pc, #388]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	495e      	ldr	r1, [pc, #376]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0320 	and.w	r3, r3, #32
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d010      	beq.n	8006cec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	69da      	ldr	r2, [r3, #28]
 8006cce:	4b59      	ldr	r3, [pc, #356]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d908      	bls.n	8006cec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006cda:	4b56      	ldr	r3, [pc, #344]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	4953      	ldr	r1, [pc, #332]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d010      	beq.n	8006d1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68da      	ldr	r2, [r3, #12]
 8006cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	f003 030f 	and.w	r3, r3, #15
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d908      	bls.n	8006d1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d08:	4b4a      	ldr	r3, [pc, #296]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	f023 020f 	bic.w	r2, r3, #15
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	4947      	ldr	r1, [pc, #284]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d055      	beq.n	8006dd2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d26:	4b43      	ldr	r3, [pc, #268]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	4940      	ldr	r1, [pc, #256]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d107      	bne.n	8006d50 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d40:	4b3c      	ldr	r3, [pc, #240]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d121      	bne.n	8006d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e0f6      	b.n	8006f3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d107      	bne.n	8006d68 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d58:	4b36      	ldr	r3, [pc, #216]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d115      	bne.n	8006d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e0ea      	b.n	8006f3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d107      	bne.n	8006d80 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d70:	4b30      	ldr	r3, [pc, #192]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d109      	bne.n	8006d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e0de      	b.n	8006f3e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d80:	4b2c      	ldr	r3, [pc, #176]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0304 	and.w	r3, r3, #4
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e0d6      	b.n	8006f3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d90:	4b28      	ldr	r3, [pc, #160]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	f023 0207 	bic.w	r2, r3, #7
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	4925      	ldr	r1, [pc, #148]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006da2:	f7fb feaf 	bl	8002b04 <HAL_GetTick>
 8006da6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006da8:	e00a      	b.n	8006dc0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006daa:	f7fb feab 	bl	8002b04 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e0be      	b.n	8006f3e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d1eb      	bne.n	8006daa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d010      	beq.n	8006e00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	4b14      	ldr	r3, [pc, #80]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f003 030f 	and.w	r3, r3, #15
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d208      	bcs.n	8006e00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dee:	4b11      	ldr	r3, [pc, #68]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	f023 020f 	bic.w	r2, r3, #15
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	490e      	ldr	r1, [pc, #56]	@ (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e00:	4b0b      	ldr	r3, [pc, #44]	@ (8006e30 <HAL_RCC_ClockConfig+0x240>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 030f 	and.w	r3, r3, #15
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d214      	bcs.n	8006e38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e0e:	4b08      	ldr	r3, [pc, #32]	@ (8006e30 <HAL_RCC_ClockConfig+0x240>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f023 020f 	bic.w	r2, r3, #15
 8006e16:	4906      	ldr	r1, [pc, #24]	@ (8006e30 <HAL_RCC_ClockConfig+0x240>)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e1e:	4b04      	ldr	r3, [pc, #16]	@ (8006e30 <HAL_RCC_ClockConfig+0x240>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d005      	beq.n	8006e38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e086      	b.n	8006f3e <HAL_RCC_ClockConfig+0x34e>
 8006e30:	52002000 	.word	0x52002000
 8006e34:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d010      	beq.n	8006e66 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691a      	ldr	r2, [r3, #16]
 8006e48:	4b3f      	ldr	r3, [pc, #252]	@ (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d208      	bcs.n	8006e66 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e54:	4b3c      	ldr	r3, [pc, #240]	@ (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	4939      	ldr	r1, [pc, #228]	@ (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0308 	and.w	r3, r3, #8
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d010      	beq.n	8006e94 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	695a      	ldr	r2, [r3, #20]
 8006e76:	4b34      	ldr	r3, [pc, #208]	@ (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d208      	bcs.n	8006e94 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e82:	4b31      	ldr	r3, [pc, #196]	@ (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	492e      	ldr	r1, [pc, #184]	@ (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d010      	beq.n	8006ec2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	699a      	ldr	r2, [r3, #24]
 8006ea4:	4b28      	ldr	r3, [pc, #160]	@ (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d208      	bcs.n	8006ec2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006eb0:	4b25      	ldr	r3, [pc, #148]	@ (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	4922      	ldr	r1, [pc, #136]	@ (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0320 	and.w	r3, r3, #32
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d010      	beq.n	8006ef0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	69da      	ldr	r2, [r3, #28]
 8006ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d208      	bcs.n	8006ef0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006ede:	4b1a      	ldr	r3, [pc, #104]	@ (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	4917      	ldr	r1, [pc, #92]	@ (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ef0:	f000 f834 	bl	8006f5c <HAL_RCC_GetSysClockFreq>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	4b14      	ldr	r3, [pc, #80]	@ (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	0a1b      	lsrs	r3, r3, #8
 8006efc:	f003 030f 	and.w	r3, r3, #15
 8006f00:	4912      	ldr	r1, [pc, #72]	@ (8006f4c <HAL_RCC_ClockConfig+0x35c>)
 8006f02:	5ccb      	ldrb	r3, [r1, r3]
 8006f04:	f003 031f 	and.w	r3, r3, #31
 8006f08:	fa22 f303 	lsr.w	r3, r2, r3
 8006f0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	f003 030f 	and.w	r3, r3, #15
 8006f16:	4a0d      	ldr	r2, [pc, #52]	@ (8006f4c <HAL_RCC_ClockConfig+0x35c>)
 8006f18:	5cd3      	ldrb	r3, [r2, r3]
 8006f1a:	f003 031f 	and.w	r3, r3, #31
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	fa22 f303 	lsr.w	r3, r2, r3
 8006f24:	4a0a      	ldr	r2, [pc, #40]	@ (8006f50 <HAL_RCC_ClockConfig+0x360>)
 8006f26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f28:	4a0a      	ldr	r2, [pc, #40]	@ (8006f54 <HAL_RCC_ClockConfig+0x364>)
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f58 <HAL_RCC_ClockConfig+0x368>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fb fd9c 	bl	8002a70 <HAL_InitTick>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3718      	adds	r7, #24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	58024400 	.word	0x58024400
 8006f4c:	0800bc90 	.word	0x0800bc90
 8006f50:	2400000c 	.word	0x2400000c
 8006f54:	24000008 	.word	0x24000008
 8006f58:	24000010 	.word	0x24000010

08006f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b089      	sub	sp, #36	@ 0x24
 8006f60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f62:	4bb3      	ldr	r3, [pc, #716]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f6a:	2b18      	cmp	r3, #24
 8006f6c:	f200 8155 	bhi.w	800721a <HAL_RCC_GetSysClockFreq+0x2be>
 8006f70:	a201      	add	r2, pc, #4	@ (adr r2, 8006f78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f76:	bf00      	nop
 8006f78:	08006fdd 	.word	0x08006fdd
 8006f7c:	0800721b 	.word	0x0800721b
 8006f80:	0800721b 	.word	0x0800721b
 8006f84:	0800721b 	.word	0x0800721b
 8006f88:	0800721b 	.word	0x0800721b
 8006f8c:	0800721b 	.word	0x0800721b
 8006f90:	0800721b 	.word	0x0800721b
 8006f94:	0800721b 	.word	0x0800721b
 8006f98:	08007003 	.word	0x08007003
 8006f9c:	0800721b 	.word	0x0800721b
 8006fa0:	0800721b 	.word	0x0800721b
 8006fa4:	0800721b 	.word	0x0800721b
 8006fa8:	0800721b 	.word	0x0800721b
 8006fac:	0800721b 	.word	0x0800721b
 8006fb0:	0800721b 	.word	0x0800721b
 8006fb4:	0800721b 	.word	0x0800721b
 8006fb8:	08007009 	.word	0x08007009
 8006fbc:	0800721b 	.word	0x0800721b
 8006fc0:	0800721b 	.word	0x0800721b
 8006fc4:	0800721b 	.word	0x0800721b
 8006fc8:	0800721b 	.word	0x0800721b
 8006fcc:	0800721b 	.word	0x0800721b
 8006fd0:	0800721b 	.word	0x0800721b
 8006fd4:	0800721b 	.word	0x0800721b
 8006fd8:	0800700f 	.word	0x0800700f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fdc:	4b94      	ldr	r3, [pc, #592]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0320 	and.w	r3, r3, #32
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d009      	beq.n	8006ffc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fe8:	4b91      	ldr	r3, [pc, #580]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	08db      	lsrs	r3, r3, #3
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	4a90      	ldr	r2, [pc, #576]	@ (8007234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006ffa:	e111      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ffc:	4b8d      	ldr	r3, [pc, #564]	@ (8007234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ffe:	61bb      	str	r3, [r7, #24]
      break;
 8007000:	e10e      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007002:	4b8d      	ldr	r3, [pc, #564]	@ (8007238 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007004:	61bb      	str	r3, [r7, #24]
      break;
 8007006:	e10b      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007008:	4b8c      	ldr	r3, [pc, #560]	@ (800723c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800700a:	61bb      	str	r3, [r7, #24]
      break;
 800700c:	e108      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800700e:	4b88      	ldr	r3, [pc, #544]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007018:	4b85      	ldr	r3, [pc, #532]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800701a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701c:	091b      	lsrs	r3, r3, #4
 800701e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007022:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007024:	4b82      	ldr	r3, [pc, #520]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800702e:	4b80      	ldr	r3, [pc, #512]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007032:	08db      	lsrs	r3, r3, #3
 8007034:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	fb02 f303 	mul.w	r3, r2, r3
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007046:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 80e1 	beq.w	8007214 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2b02      	cmp	r3, #2
 8007056:	f000 8083 	beq.w	8007160 <HAL_RCC_GetSysClockFreq+0x204>
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2b02      	cmp	r3, #2
 800705e:	f200 80a1 	bhi.w	80071a4 <HAL_RCC_GetSysClockFreq+0x248>
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d003      	beq.n	8007070 <HAL_RCC_GetSysClockFreq+0x114>
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d056      	beq.n	800711c <HAL_RCC_GetSysClockFreq+0x1c0>
 800706e:	e099      	b.n	80071a4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007070:	4b6f      	ldr	r3, [pc, #444]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0320 	and.w	r3, r3, #32
 8007078:	2b00      	cmp	r3, #0
 800707a:	d02d      	beq.n	80070d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800707c:	4b6c      	ldr	r3, [pc, #432]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	08db      	lsrs	r3, r3, #3
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	4a6b      	ldr	r2, [pc, #428]	@ (8007234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007088:	fa22 f303 	lsr.w	r3, r2, r3
 800708c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	ee07 3a90 	vmov	s15, r3
 8007094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a6:	4b62      	ldr	r3, [pc, #392]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80070ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007240 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80070d6:	e087      	b.n	80071e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007244 <HAL_RCC_GetSysClockFreq+0x2e8>
 80070e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ea:	4b51      	ldr	r3, [pc, #324]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80070fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007240 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800710a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800710e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007116:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800711a:	e065      	b.n	80071e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007126:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007248 <HAL_RCC_GetSysClockFreq+0x2ec>
 800712a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800712e:	4b40      	ldr	r3, [pc, #256]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800713e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007142:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007240 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800714a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800714e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800715e:	e043      	b.n	80071e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	ee07 3a90 	vmov	s15, r3
 8007166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800724c <HAL_RCC_GetSysClockFreq+0x2f0>
 800716e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007172:	4b2f      	ldr	r3, [pc, #188]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007182:	ed97 6a02 	vldr	s12, [r7, #8]
 8007186:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007240 <HAL_RCC_GetSysClockFreq+0x2e4>
 800718a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800718e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800719e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071a2:	e021      	b.n	80071e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007248 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b6:	4b1e      	ldr	r3, [pc, #120]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80071ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007240 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80071e8:	4b11      	ldr	r3, [pc, #68]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ec:	0a5b      	lsrs	r3, r3, #9
 80071ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071f2:	3301      	adds	r3, #1
 80071f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	ee07 3a90 	vmov	s15, r3
 80071fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007200:	edd7 6a07 	vldr	s13, [r7, #28]
 8007204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800720c:	ee17 3a90 	vmov	r3, s15
 8007210:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007212:	e005      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	61bb      	str	r3, [r7, #24]
      break;
 8007218:	e002      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800721a:	4b07      	ldr	r3, [pc, #28]	@ (8007238 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800721c:	61bb      	str	r3, [r7, #24]
      break;
 800721e:	bf00      	nop
  }

  return sysclockfreq;
 8007220:	69bb      	ldr	r3, [r7, #24]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3724      	adds	r7, #36	@ 0x24
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	58024400 	.word	0x58024400
 8007234:	03d09000 	.word	0x03d09000
 8007238:	003d0900 	.word	0x003d0900
 800723c:	016e3600 	.word	0x016e3600
 8007240:	46000000 	.word	0x46000000
 8007244:	4c742400 	.word	0x4c742400
 8007248:	4a742400 	.word	0x4a742400
 800724c:	4bb71b00 	.word	0x4bb71b00

08007250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007256:	f7ff fe81 	bl	8006f5c <HAL_RCC_GetSysClockFreq>
 800725a:	4602      	mov	r2, r0
 800725c:	4b10      	ldr	r3, [pc, #64]	@ (80072a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	0a1b      	lsrs	r3, r3, #8
 8007262:	f003 030f 	and.w	r3, r3, #15
 8007266:	490f      	ldr	r1, [pc, #60]	@ (80072a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007268:	5ccb      	ldrb	r3, [r1, r3]
 800726a:	f003 031f 	and.w	r3, r3, #31
 800726e:	fa22 f303 	lsr.w	r3, r2, r3
 8007272:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007274:	4b0a      	ldr	r3, [pc, #40]	@ (80072a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	f003 030f 	and.w	r3, r3, #15
 800727c:	4a09      	ldr	r2, [pc, #36]	@ (80072a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800727e:	5cd3      	ldrb	r3, [r2, r3]
 8007280:	f003 031f 	and.w	r3, r3, #31
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	fa22 f303 	lsr.w	r3, r2, r3
 800728a:	4a07      	ldr	r2, [pc, #28]	@ (80072a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800728c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800728e:	4a07      	ldr	r2, [pc, #28]	@ (80072ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007294:	4b04      	ldr	r3, [pc, #16]	@ (80072a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007296:	681b      	ldr	r3, [r3, #0]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	58024400 	.word	0x58024400
 80072a4:	0800bc90 	.word	0x0800bc90
 80072a8:	2400000c 	.word	0x2400000c
 80072ac:	24000008 	.word	0x24000008

080072b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80072b4:	f7ff ffcc 	bl	8007250 <HAL_RCC_GetHCLKFreq>
 80072b8:	4602      	mov	r2, r0
 80072ba:	4b06      	ldr	r3, [pc, #24]	@ (80072d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	091b      	lsrs	r3, r3, #4
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	4904      	ldr	r1, [pc, #16]	@ (80072d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072c6:	5ccb      	ldrb	r3, [r1, r3]
 80072c8:	f003 031f 	and.w	r3, r3, #31
 80072cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	58024400 	.word	0x58024400
 80072d8:	0800bc90 	.word	0x0800bc90

080072dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80072e0:	f7ff ffb6 	bl	8007250 <HAL_RCC_GetHCLKFreq>
 80072e4:	4602      	mov	r2, r0
 80072e6:	4b06      	ldr	r3, [pc, #24]	@ (8007300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	0a1b      	lsrs	r3, r3, #8
 80072ec:	f003 0307 	and.w	r3, r3, #7
 80072f0:	4904      	ldr	r1, [pc, #16]	@ (8007304 <HAL_RCC_GetPCLK2Freq+0x28>)
 80072f2:	5ccb      	ldrb	r3, [r1, r3]
 80072f4:	f003 031f 	and.w	r3, r3, #31
 80072f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	58024400 	.word	0x58024400
 8007304:	0800bc90 	.word	0x0800bc90

08007308 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800730c:	b0c6      	sub	sp, #280	@ 0x118
 800730e:	af00      	add	r7, sp, #0
 8007310:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007314:	2300      	movs	r3, #0
 8007316:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800731a:	2300      	movs	r3, #0
 800731c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800732c:	2500      	movs	r5, #0
 800732e:	ea54 0305 	orrs.w	r3, r4, r5
 8007332:	d049      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800733a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800733e:	d02f      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007340:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007344:	d828      	bhi.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007346:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800734a:	d01a      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800734c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007350:	d822      	bhi.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007356:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800735a:	d007      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800735c:	e01c      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800735e:	4bab      	ldr	r3, [pc, #684]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007362:	4aaa      	ldr	r2, [pc, #680]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007368:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800736a:	e01a      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800736c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007370:	3308      	adds	r3, #8
 8007372:	2102      	movs	r1, #2
 8007374:	4618      	mov	r0, r3
 8007376:	f002 fa49 	bl	800980c <RCCEx_PLL2_Config>
 800737a:	4603      	mov	r3, r0
 800737c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007380:	e00f      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007386:	3328      	adds	r3, #40	@ 0x28
 8007388:	2102      	movs	r1, #2
 800738a:	4618      	mov	r0, r3
 800738c:	f002 faf0 	bl	8009970 <RCCEx_PLL3_Config>
 8007390:	4603      	mov	r3, r0
 8007392:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007396:	e004      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800739e:	e000      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80073a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10a      	bne.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80073aa:	4b98      	ldr	r3, [pc, #608]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80073b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073b8:	4a94      	ldr	r2, [pc, #592]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073ba:	430b      	orrs	r3, r1
 80073bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80073be:	e003      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80073d4:	f04f 0900 	mov.w	r9, #0
 80073d8:	ea58 0309 	orrs.w	r3, r8, r9
 80073dc:	d047      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80073de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d82a      	bhi.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80073e8:	a201      	add	r2, pc, #4	@ (adr r2, 80073f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80073ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ee:	bf00      	nop
 80073f0:	08007405 	.word	0x08007405
 80073f4:	08007413 	.word	0x08007413
 80073f8:	08007429 	.word	0x08007429
 80073fc:	08007447 	.word	0x08007447
 8007400:	08007447 	.word	0x08007447
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007404:	4b81      	ldr	r3, [pc, #516]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007408:	4a80      	ldr	r2, [pc, #512]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800740a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800740e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007410:	e01a      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007416:	3308      	adds	r3, #8
 8007418:	2100      	movs	r1, #0
 800741a:	4618      	mov	r0, r3
 800741c:	f002 f9f6 	bl	800980c <RCCEx_PLL2_Config>
 8007420:	4603      	mov	r3, r0
 8007422:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007426:	e00f      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800742c:	3328      	adds	r3, #40	@ 0x28
 800742e:	2100      	movs	r1, #0
 8007430:	4618      	mov	r0, r3
 8007432:	f002 fa9d 	bl	8009970 <RCCEx_PLL3_Config>
 8007436:	4603      	mov	r3, r0
 8007438:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800743c:	e004      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007444:	e000      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10a      	bne.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007450:	4b6e      	ldr	r3, [pc, #440]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007454:	f023 0107 	bic.w	r1, r3, #7
 8007458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800745e:	4a6b      	ldr	r2, [pc, #428]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007460:	430b      	orrs	r3, r1
 8007462:	6513      	str	r3, [r2, #80]	@ 0x50
 8007464:	e003      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007466:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800746a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800746e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007476:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800747a:	f04f 0b00 	mov.w	fp, #0
 800747e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007482:	d05b      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007488:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800748c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007490:	d03b      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007492:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007496:	d834      	bhi.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007498:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800749c:	d037      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800749e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80074a2:	d82e      	bhi.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80074a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80074a8:	d033      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80074aa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80074ae:	d828      	bhi.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80074b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074b4:	d01a      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80074b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074ba:	d822      	bhi.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d003      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80074c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074c4:	d007      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80074c6:	e01c      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c8:	4b50      	ldr	r3, [pc, #320]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074cc:	4a4f      	ldr	r2, [pc, #316]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074d4:	e01e      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074da:	3308      	adds	r3, #8
 80074dc:	2100      	movs	r1, #0
 80074de:	4618      	mov	r0, r3
 80074e0:	f002 f994 	bl	800980c <RCCEx_PLL2_Config>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80074ea:	e013      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f0:	3328      	adds	r3, #40	@ 0x28
 80074f2:	2100      	movs	r1, #0
 80074f4:	4618      	mov	r0, r3
 80074f6:	f002 fa3b 	bl	8009970 <RCCEx_PLL3_Config>
 80074fa:	4603      	mov	r3, r0
 80074fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007500:	e008      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007508:	e004      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800750a:	bf00      	nop
 800750c:	e002      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800750e:	bf00      	nop
 8007510:	e000      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007512:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007514:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10b      	bne.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800751c:	4b3b      	ldr	r3, [pc, #236]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800751e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007520:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007528:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800752c:	4a37      	ldr	r2, [pc, #220]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800752e:	430b      	orrs	r3, r1
 8007530:	6593      	str	r3, [r2, #88]	@ 0x58
 8007532:	e003      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007534:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007538:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800753c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007544:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007548:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800754c:	2300      	movs	r3, #0
 800754e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007552:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007556:	460b      	mov	r3, r1
 8007558:	4313      	orrs	r3, r2
 800755a:	d05d      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800755c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007560:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007564:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007568:	d03b      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800756a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800756e:	d834      	bhi.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007570:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007574:	d037      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007576:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800757a:	d82e      	bhi.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800757c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007580:	d033      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007582:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007586:	d828      	bhi.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007588:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800758c:	d01a      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800758e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007592:	d822      	bhi.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007594:	2b00      	cmp	r3, #0
 8007596:	d003      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007598:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800759c:	d007      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800759e:	e01c      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075a0:	4b1a      	ldr	r3, [pc, #104]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a4:	4a19      	ldr	r2, [pc, #100]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075ac:	e01e      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b2:	3308      	adds	r3, #8
 80075b4:	2100      	movs	r1, #0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f002 f928 	bl	800980c <RCCEx_PLL2_Config>
 80075bc:	4603      	mov	r3, r0
 80075be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80075c2:	e013      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c8:	3328      	adds	r3, #40	@ 0x28
 80075ca:	2100      	movs	r1, #0
 80075cc:	4618      	mov	r0, r3
 80075ce:	f002 f9cf 	bl	8009970 <RCCEx_PLL3_Config>
 80075d2:	4603      	mov	r3, r0
 80075d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075d8:	e008      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075e0:	e004      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80075e2:	bf00      	nop
 80075e4:	e002      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80075e6:	bf00      	nop
 80075e8:	e000      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80075ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10d      	bne.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80075f4:	4b05      	ldr	r3, [pc, #20]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075f8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80075fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007600:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007604:	4a01      	ldr	r2, [pc, #4]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007606:	430b      	orrs	r3, r1
 8007608:	6593      	str	r3, [r2, #88]	@ 0x58
 800760a:	e005      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800760c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007610:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007614:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800761c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007620:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007624:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007628:	2300      	movs	r3, #0
 800762a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800762e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007632:	460b      	mov	r3, r1
 8007634:	4313      	orrs	r3, r2
 8007636:	d03a      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800763c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800763e:	2b30      	cmp	r3, #48	@ 0x30
 8007640:	d01f      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007642:	2b30      	cmp	r3, #48	@ 0x30
 8007644:	d819      	bhi.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007646:	2b20      	cmp	r3, #32
 8007648:	d00c      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800764a:	2b20      	cmp	r3, #32
 800764c:	d815      	bhi.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d019      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007652:	2b10      	cmp	r3, #16
 8007654:	d111      	bne.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007656:	4baa      	ldr	r3, [pc, #680]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765a:	4aa9      	ldr	r2, [pc, #676]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800765c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007660:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007662:	e011      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007668:	3308      	adds	r3, #8
 800766a:	2102      	movs	r1, #2
 800766c:	4618      	mov	r0, r3
 800766e:	f002 f8cd 	bl	800980c <RCCEx_PLL2_Config>
 8007672:	4603      	mov	r3, r0
 8007674:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007678:	e006      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007680:	e002      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007682:	bf00      	nop
 8007684:	e000      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007688:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10a      	bne.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007690:	4b9b      	ldr	r3, [pc, #620]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007694:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800769c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800769e:	4a98      	ldr	r2, [pc, #608]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076a0:	430b      	orrs	r3, r1
 80076a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076a4:	e003      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80076ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80076ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076be:	2300      	movs	r3, #0
 80076c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80076c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80076c8:	460b      	mov	r3, r1
 80076ca:	4313      	orrs	r3, r2
 80076cc:	d051      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80076ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076d8:	d035      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80076da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076de:	d82e      	bhi.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80076e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076e4:	d031      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80076e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076ea:	d828      	bhi.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80076ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076f0:	d01a      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80076f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076f6:	d822      	bhi.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80076fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007700:	d007      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007702:	e01c      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007704:	4b7e      	ldr	r3, [pc, #504]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007708:	4a7d      	ldr	r2, [pc, #500]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800770a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800770e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007710:	e01c      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007716:	3308      	adds	r3, #8
 8007718:	2100      	movs	r1, #0
 800771a:	4618      	mov	r0, r3
 800771c:	f002 f876 	bl	800980c <RCCEx_PLL2_Config>
 8007720:	4603      	mov	r3, r0
 8007722:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007726:	e011      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800772c:	3328      	adds	r3, #40	@ 0x28
 800772e:	2100      	movs	r1, #0
 8007730:	4618      	mov	r0, r3
 8007732:	f002 f91d 	bl	8009970 <RCCEx_PLL3_Config>
 8007736:	4603      	mov	r3, r0
 8007738:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800773c:	e006      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007744:	e002      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007746:	bf00      	nop
 8007748:	e000      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800774a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800774c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10a      	bne.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007754:	4b6a      	ldr	r3, [pc, #424]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007758:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800775c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007762:	4a67      	ldr	r2, [pc, #412]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007764:	430b      	orrs	r3, r1
 8007766:	6513      	str	r3, [r2, #80]	@ 0x50
 8007768:	e003      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800776a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800776e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800777e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007782:	2300      	movs	r3, #0
 8007784:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007788:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800778c:	460b      	mov	r3, r1
 800778e:	4313      	orrs	r3, r2
 8007790:	d053      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007798:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800779c:	d033      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800779e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80077a2:	d82c      	bhi.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80077a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80077a8:	d02f      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80077aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80077ae:	d826      	bhi.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80077b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80077b4:	d02b      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80077b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80077ba:	d820      	bhi.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80077bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077c0:	d012      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80077c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077c6:	d81a      	bhi.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d022      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80077cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077d0:	d115      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d6:	3308      	adds	r3, #8
 80077d8:	2101      	movs	r1, #1
 80077da:	4618      	mov	r0, r3
 80077dc:	f002 f816 	bl	800980c <RCCEx_PLL2_Config>
 80077e0:	4603      	mov	r3, r0
 80077e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80077e6:	e015      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ec:	3328      	adds	r3, #40	@ 0x28
 80077ee:	2101      	movs	r1, #1
 80077f0:	4618      	mov	r0, r3
 80077f2:	f002 f8bd 	bl	8009970 <RCCEx_PLL3_Config>
 80077f6:	4603      	mov	r3, r0
 80077f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80077fc:	e00a      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007804:	e006      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007806:	bf00      	nop
 8007808:	e004      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800780a:	bf00      	nop
 800780c:	e002      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800780e:	bf00      	nop
 8007810:	e000      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007814:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800781c:	4b38      	ldr	r3, [pc, #224]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800781e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007820:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800782a:	4a35      	ldr	r2, [pc, #212]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800782c:	430b      	orrs	r3, r1
 800782e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007830:	e003      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007832:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007836:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800783a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007846:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800784a:	2300      	movs	r3, #0
 800784c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007850:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007854:	460b      	mov	r3, r1
 8007856:	4313      	orrs	r3, r2
 8007858:	d058      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800785a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007862:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007866:	d033      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007868:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800786c:	d82c      	bhi.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800786e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007872:	d02f      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007878:	d826      	bhi.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800787a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800787e:	d02b      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007880:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007884:	d820      	bhi.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800788a:	d012      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800788c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007890:	d81a      	bhi.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d022      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800789a:	d115      	bne.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a0:	3308      	adds	r3, #8
 80078a2:	2101      	movs	r1, #1
 80078a4:	4618      	mov	r0, r3
 80078a6:	f001 ffb1 	bl	800980c <RCCEx_PLL2_Config>
 80078aa:	4603      	mov	r3, r0
 80078ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80078b0:	e015      	b.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b6:	3328      	adds	r3, #40	@ 0x28
 80078b8:	2101      	movs	r1, #1
 80078ba:	4618      	mov	r0, r3
 80078bc:	f002 f858 	bl	8009970 <RCCEx_PLL3_Config>
 80078c0:	4603      	mov	r3, r0
 80078c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80078c6:	e00a      	b.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078ce:	e006      	b.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80078d0:	bf00      	nop
 80078d2:	e004      	b.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80078d4:	bf00      	nop
 80078d6:	e002      	b.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80078d8:	bf00      	nop
 80078da:	e000      	b.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80078dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10e      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80078e6:	4b06      	ldr	r3, [pc, #24]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80078ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80078f6:	4a02      	ldr	r2, [pc, #8]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078f8:	430b      	orrs	r3, r1
 80078fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80078fc:	e006      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x604>
 80078fe:	bf00      	nop
 8007900:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007904:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007908:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800790c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800791c:	2300      	movs	r3, #0
 800791e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007922:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007926:	460b      	mov	r3, r1
 8007928:	4313      	orrs	r3, r2
 800792a:	d037      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800792c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007936:	d00e      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800793c:	d816      	bhi.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800793e:	2b00      	cmp	r3, #0
 8007940:	d018      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007942:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007946:	d111      	bne.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007948:	4bc4      	ldr	r3, [pc, #784]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800794a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800794c:	4ac3      	ldr	r2, [pc, #780]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800794e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007952:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007954:	e00f      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795a:	3308      	adds	r3, #8
 800795c:	2101      	movs	r1, #1
 800795e:	4618      	mov	r0, r3
 8007960:	f001 ff54 	bl	800980c <RCCEx_PLL2_Config>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800796a:	e004      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007972:	e000      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007976:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10a      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800797e:	4bb7      	ldr	r3, [pc, #732]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007982:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800798c:	4ab3      	ldr	r2, [pc, #716]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800798e:	430b      	orrs	r3, r1
 8007990:	6513      	str	r3, [r2, #80]	@ 0x50
 8007992:	e003      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007994:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007998:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800799c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80079a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079ac:	2300      	movs	r3, #0
 80079ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80079b6:	460b      	mov	r3, r1
 80079b8:	4313      	orrs	r3, r2
 80079ba:	d039      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80079bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d81c      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80079c6:	a201      	add	r2, pc, #4	@ (adr r2, 80079cc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80079c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079cc:	08007a09 	.word	0x08007a09
 80079d0:	080079dd 	.word	0x080079dd
 80079d4:	080079eb 	.word	0x080079eb
 80079d8:	08007a09 	.word	0x08007a09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079dc:	4b9f      	ldr	r3, [pc, #636]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e0:	4a9e      	ldr	r2, [pc, #632]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80079e8:	e00f      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ee:	3308      	adds	r3, #8
 80079f0:	2102      	movs	r1, #2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f001 ff0a 	bl	800980c <RCCEx_PLL2_Config>
 80079f8:	4603      	mov	r3, r0
 80079fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80079fe:	e004      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a06:	e000      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007a12:	4b92      	ldr	r3, [pc, #584]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a16:	f023 0103 	bic.w	r1, r3, #3
 8007a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a20:	4a8e      	ldr	r2, [pc, #568]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a22:	430b      	orrs	r3, r1
 8007a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a26:	e003      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007a3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a40:	2300      	movs	r3, #0
 8007a42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	f000 8099 	beq.w	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a52:	4b83      	ldr	r3, [pc, #524]	@ (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a82      	ldr	r2, [pc, #520]	@ (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a5e:	f7fb f851 	bl	8002b04 <HAL_GetTick>
 8007a62:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a66:	e00b      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a68:	f7fb f84c 	bl	8002b04 <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	2b64      	cmp	r3, #100	@ 0x64
 8007a76:	d903      	bls.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a7e:	e005      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a80:	4b77      	ldr	r3, [pc, #476]	@ (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d0ed      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007a8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d173      	bne.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a94:	4b71      	ldr	r3, [pc, #452]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007aa0:	4053      	eors	r3, r2
 8007aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d015      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007aaa:	4b6c      	ldr	r3, [pc, #432]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ab2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ab6:	4b69      	ldr	r3, [pc, #420]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aba:	4a68      	ldr	r2, [pc, #416]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ac0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ac2:	4b66      	ldr	r3, [pc, #408]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ac6:	4a65      	ldr	r2, [pc, #404]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007acc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007ace:	4a63      	ldr	r2, [pc, #396]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ad4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ada:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ae2:	d118      	bne.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae4:	f7fb f80e 	bl	8002b04 <HAL_GetTick>
 8007ae8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007aec:	e00d      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aee:	f7fb f809 	bl	8002b04 <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007af8:	1ad2      	subs	r2, r2, r3
 8007afa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d903      	bls.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007b08:	e005      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b0a:	4b54      	ldr	r3, [pc, #336]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0eb      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007b16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d129      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b2e:	d10e      	bne.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007b30:	4b4a      	ldr	r3, [pc, #296]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b40:	091a      	lsrs	r2, r3, #4
 8007b42:	4b48      	ldr	r3, [pc, #288]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007b44:	4013      	ands	r3, r2
 8007b46:	4a45      	ldr	r2, [pc, #276]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	6113      	str	r3, [r2, #16]
 8007b4c:	e005      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007b4e:	4b43      	ldr	r3, [pc, #268]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	4a42      	ldr	r2, [pc, #264]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007b58:	6113      	str	r3, [r2, #16]
 8007b5a:	4b40      	ldr	r3, [pc, #256]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b5c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b6a:	4a3c      	ldr	r2, [pc, #240]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b6c:	430b      	orrs	r3, r1
 8007b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b70:	e008      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007b7a:	e003      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	f002 0301 	and.w	r3, r2, #1
 8007b90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b94:	2300      	movs	r3, #0
 8007b96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007b9a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	f000 808f 	beq.w	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007baa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bac:	2b28      	cmp	r3, #40	@ 0x28
 8007bae:	d871      	bhi.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb6:	bf00      	nop
 8007bb8:	08007c9d 	.word	0x08007c9d
 8007bbc:	08007c95 	.word	0x08007c95
 8007bc0:	08007c95 	.word	0x08007c95
 8007bc4:	08007c95 	.word	0x08007c95
 8007bc8:	08007c95 	.word	0x08007c95
 8007bcc:	08007c95 	.word	0x08007c95
 8007bd0:	08007c95 	.word	0x08007c95
 8007bd4:	08007c95 	.word	0x08007c95
 8007bd8:	08007c69 	.word	0x08007c69
 8007bdc:	08007c95 	.word	0x08007c95
 8007be0:	08007c95 	.word	0x08007c95
 8007be4:	08007c95 	.word	0x08007c95
 8007be8:	08007c95 	.word	0x08007c95
 8007bec:	08007c95 	.word	0x08007c95
 8007bf0:	08007c95 	.word	0x08007c95
 8007bf4:	08007c95 	.word	0x08007c95
 8007bf8:	08007c7f 	.word	0x08007c7f
 8007bfc:	08007c95 	.word	0x08007c95
 8007c00:	08007c95 	.word	0x08007c95
 8007c04:	08007c95 	.word	0x08007c95
 8007c08:	08007c95 	.word	0x08007c95
 8007c0c:	08007c95 	.word	0x08007c95
 8007c10:	08007c95 	.word	0x08007c95
 8007c14:	08007c95 	.word	0x08007c95
 8007c18:	08007c9d 	.word	0x08007c9d
 8007c1c:	08007c95 	.word	0x08007c95
 8007c20:	08007c95 	.word	0x08007c95
 8007c24:	08007c95 	.word	0x08007c95
 8007c28:	08007c95 	.word	0x08007c95
 8007c2c:	08007c95 	.word	0x08007c95
 8007c30:	08007c95 	.word	0x08007c95
 8007c34:	08007c95 	.word	0x08007c95
 8007c38:	08007c9d 	.word	0x08007c9d
 8007c3c:	08007c95 	.word	0x08007c95
 8007c40:	08007c95 	.word	0x08007c95
 8007c44:	08007c95 	.word	0x08007c95
 8007c48:	08007c95 	.word	0x08007c95
 8007c4c:	08007c95 	.word	0x08007c95
 8007c50:	08007c95 	.word	0x08007c95
 8007c54:	08007c95 	.word	0x08007c95
 8007c58:	08007c9d 	.word	0x08007c9d
 8007c5c:	58024400 	.word	0x58024400
 8007c60:	58024800 	.word	0x58024800
 8007c64:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	2101      	movs	r1, #1
 8007c70:	4618      	mov	r0, r3
 8007c72:	f001 fdcb 	bl	800980c <RCCEx_PLL2_Config>
 8007c76:	4603      	mov	r3, r0
 8007c78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c7c:	e00f      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c82:	3328      	adds	r3, #40	@ 0x28
 8007c84:	2101      	movs	r1, #1
 8007c86:	4618      	mov	r0, r3
 8007c88:	f001 fe72 	bl	8009970 <RCCEx_PLL3_Config>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c92:	e004      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c9a:	e000      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10a      	bne.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007ca6:	4bbf      	ldr	r3, [pc, #764]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007caa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007cb4:	4abb      	ldr	r2, [pc, #748]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007cb6:	430b      	orrs	r3, r1
 8007cb8:	6553      	str	r3, [r2, #84]	@ 0x54
 8007cba:	e003      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	f002 0302 	and.w	r3, r2, #2
 8007cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cda:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	d041      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cea:	2b05      	cmp	r3, #5
 8007cec:	d824      	bhi.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007cee:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf4:	08007d41 	.word	0x08007d41
 8007cf8:	08007d0d 	.word	0x08007d0d
 8007cfc:	08007d23 	.word	0x08007d23
 8007d00:	08007d41 	.word	0x08007d41
 8007d04:	08007d41 	.word	0x08007d41
 8007d08:	08007d41 	.word	0x08007d41
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d10:	3308      	adds	r3, #8
 8007d12:	2101      	movs	r1, #1
 8007d14:	4618      	mov	r0, r3
 8007d16:	f001 fd79 	bl	800980c <RCCEx_PLL2_Config>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d20:	e00f      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d26:	3328      	adds	r3, #40	@ 0x28
 8007d28:	2101      	movs	r1, #1
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f001 fe20 	bl	8009970 <RCCEx_PLL3_Config>
 8007d30:	4603      	mov	r3, r0
 8007d32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d36:	e004      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d3e:	e000      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10a      	bne.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d4a:	4b96      	ldr	r3, [pc, #600]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d4e:	f023 0107 	bic.w	r1, r3, #7
 8007d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d58:	4a92      	ldr	r2, [pc, #584]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d5a:	430b      	orrs	r3, r1
 8007d5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d5e:	e003      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d70:	f002 0304 	and.w	r3, r2, #4
 8007d74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d7e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d82:	460b      	mov	r3, r1
 8007d84:	4313      	orrs	r3, r2
 8007d86:	d044      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d90:	2b05      	cmp	r3, #5
 8007d92:	d825      	bhi.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007d94:	a201      	add	r2, pc, #4	@ (adr r2, 8007d9c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9a:	bf00      	nop
 8007d9c:	08007de9 	.word	0x08007de9
 8007da0:	08007db5 	.word	0x08007db5
 8007da4:	08007dcb 	.word	0x08007dcb
 8007da8:	08007de9 	.word	0x08007de9
 8007dac:	08007de9 	.word	0x08007de9
 8007db0:	08007de9 	.word	0x08007de9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db8:	3308      	adds	r3, #8
 8007dba:	2101      	movs	r1, #1
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f001 fd25 	bl	800980c <RCCEx_PLL2_Config>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007dc8:	e00f      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dce:	3328      	adds	r3, #40	@ 0x28
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f001 fdcc 	bl	8009970 <RCCEx_PLL3_Config>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007dde:	e004      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007de6:	e000      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10b      	bne.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007df2:	4b6c      	ldr	r3, [pc, #432]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007df6:	f023 0107 	bic.w	r1, r3, #7
 8007dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e02:	4a68      	ldr	r2, [pc, #416]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e04:	430b      	orrs	r3, r1
 8007e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e08:	e003      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1a:	f002 0320 	and.w	r3, r2, #32
 8007e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e22:	2300      	movs	r3, #0
 8007e24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	d055      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e3e:	d033      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e44:	d82c      	bhi.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e4a:	d02f      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e50:	d826      	bhi.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007e52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e56:	d02b      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007e58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e5c:	d820      	bhi.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007e5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e62:	d012      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007e64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e68:	d81a      	bhi.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d022      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007e6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e72:	d115      	bne.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e78:	3308      	adds	r3, #8
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 fcc5 	bl	800980c <RCCEx_PLL2_Config>
 8007e82:	4603      	mov	r3, r0
 8007e84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e88:	e015      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e8e:	3328      	adds	r3, #40	@ 0x28
 8007e90:	2102      	movs	r1, #2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f001 fd6c 	bl	8009970 <RCCEx_PLL3_Config>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e9e:	e00a      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ea6:	e006      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007ea8:	bf00      	nop
 8007eaa:	e004      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007eac:	bf00      	nop
 8007eae:	e002      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007eb0:	bf00      	nop
 8007eb2:	e000      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10b      	bne.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ebe:	4b39      	ldr	r3, [pc, #228]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ec2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ece:	4a35      	ldr	r2, [pc, #212]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ed0:	430b      	orrs	r3, r1
 8007ed2:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ed4:	e003      	b.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007eda:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007eea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ef4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4313      	orrs	r3, r2
 8007efc:	d058      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f06:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f0a:	d033      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007f0c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f10:	d82c      	bhi.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f16:	d02f      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f1c:	d826      	bhi.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007f1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f22:	d02b      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007f24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f28:	d820      	bhi.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007f2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f2e:	d012      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007f30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f34:	d81a      	bhi.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d022      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f3e:	d115      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f44:	3308      	adds	r3, #8
 8007f46:	2100      	movs	r1, #0
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f001 fc5f 	bl	800980c <RCCEx_PLL2_Config>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f54:	e015      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f5a:	3328      	adds	r3, #40	@ 0x28
 8007f5c:	2102      	movs	r1, #2
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f001 fd06 	bl	8009970 <RCCEx_PLL3_Config>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f6a:	e00a      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f72:	e006      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f74:	bf00      	nop
 8007f76:	e004      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f78:	bf00      	nop
 8007f7a:	e002      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f7c:	bf00      	nop
 8007f7e:	e000      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10e      	bne.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f8a:	4b06      	ldr	r3, [pc, #24]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f8e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f9a:	4a02      	ldr	r2, [pc, #8]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f9c:	430b      	orrs	r3, r1
 8007f9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fa0:	e006      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007fa2:	bf00      	nop
 8007fa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007fbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007fc6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	d055      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007fd8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007fdc:	d033      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007fde:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007fe2:	d82c      	bhi.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007fe4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fe8:	d02f      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fee:	d826      	bhi.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007ff0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007ff4:	d02b      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007ff6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007ffa:	d820      	bhi.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007ffc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008000:	d012      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008002:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008006:	d81a      	bhi.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008008:	2b00      	cmp	r3, #0
 800800a:	d022      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800800c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008010:	d115      	bne.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008016:	3308      	adds	r3, #8
 8008018:	2100      	movs	r1, #0
 800801a:	4618      	mov	r0, r3
 800801c:	f001 fbf6 	bl	800980c <RCCEx_PLL2_Config>
 8008020:	4603      	mov	r3, r0
 8008022:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008026:	e015      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800802c:	3328      	adds	r3, #40	@ 0x28
 800802e:	2102      	movs	r1, #2
 8008030:	4618      	mov	r0, r3
 8008032:	f001 fc9d 	bl	8009970 <RCCEx_PLL3_Config>
 8008036:	4603      	mov	r3, r0
 8008038:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800803c:	e00a      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008044:	e006      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008046:	bf00      	nop
 8008048:	e004      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800804a:	bf00      	nop
 800804c:	e002      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800804e:	bf00      	nop
 8008050:	e000      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008054:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10b      	bne.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800805c:	4ba0      	ldr	r3, [pc, #640]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800805e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008060:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008068:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800806c:	4a9c      	ldr	r2, [pc, #624]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800806e:	430b      	orrs	r3, r1
 8008070:	6593      	str	r3, [r2, #88]	@ 0x58
 8008072:	e003      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008078:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800807c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	f002 0308 	and.w	r3, r2, #8
 8008088:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800808c:	2300      	movs	r3, #0
 800808e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008092:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008096:	460b      	mov	r3, r1
 8008098:	4313      	orrs	r3, r2
 800809a:	d01e      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800809c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080a8:	d10c      	bne.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80080aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ae:	3328      	adds	r3, #40	@ 0x28
 80080b0:	2102      	movs	r1, #2
 80080b2:	4618      	mov	r0, r3
 80080b4:	f001 fc5c 	bl	8009970 <RCCEx_PLL3_Config>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d002      	beq.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80080c4:	4b86      	ldr	r3, [pc, #536]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80080cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080d4:	4a82      	ldr	r2, [pc, #520]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080d6:	430b      	orrs	r3, r1
 80080d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	f002 0310 	and.w	r3, r2, #16
 80080e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080ea:	2300      	movs	r3, #0
 80080ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080f0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80080f4:	460b      	mov	r3, r1
 80080f6:	4313      	orrs	r3, r2
 80080f8:	d01e      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80080fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008106:	d10c      	bne.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800810c:	3328      	adds	r3, #40	@ 0x28
 800810e:	2102      	movs	r1, #2
 8008110:	4618      	mov	r0, r3
 8008112:	f001 fc2d 	bl	8009970 <RCCEx_PLL3_Config>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008122:	4b6f      	ldr	r3, [pc, #444]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008126:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800812a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800812e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008132:	4a6b      	ldr	r2, [pc, #428]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008134:	430b      	orrs	r3, r1
 8008136:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008144:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008146:	2300      	movs	r3, #0
 8008148:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800814a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800814e:	460b      	mov	r3, r1
 8008150:	4313      	orrs	r3, r2
 8008152:	d03e      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008158:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800815c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008160:	d022      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008162:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008166:	d81b      	bhi.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008168:	2b00      	cmp	r3, #0
 800816a:	d003      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800816c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008170:	d00b      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008172:	e015      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008178:	3308      	adds	r3, #8
 800817a:	2100      	movs	r1, #0
 800817c:	4618      	mov	r0, r3
 800817e:	f001 fb45 	bl	800980c <RCCEx_PLL2_Config>
 8008182:	4603      	mov	r3, r0
 8008184:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008188:	e00f      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800818a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800818e:	3328      	adds	r3, #40	@ 0x28
 8008190:	2102      	movs	r1, #2
 8008192:	4618      	mov	r0, r3
 8008194:	f001 fbec 	bl	8009970 <RCCEx_PLL3_Config>
 8008198:	4603      	mov	r3, r0
 800819a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800819e:	e004      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80081a6:	e000      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80081a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10b      	bne.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80081b2:	4b4b      	ldr	r3, [pc, #300]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80081ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081c2:	4a47      	ldr	r2, [pc, #284]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081c4:	430b      	orrs	r3, r1
 80081c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80081c8:	e003      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80081d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081da:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80081de:	673b      	str	r3, [r7, #112]	@ 0x70
 80081e0:	2300      	movs	r3, #0
 80081e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80081e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80081e8:	460b      	mov	r3, r1
 80081ea:	4313      	orrs	r3, r2
 80081ec:	d03b      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80081ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081fa:	d01f      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80081fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008200:	d818      	bhi.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008202:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008206:	d003      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008208:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800820c:	d007      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800820e:	e011      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008210:	4b33      	ldr	r3, [pc, #204]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008214:	4a32      	ldr	r2, [pc, #200]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800821a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800821c:	e00f      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800821e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008222:	3328      	adds	r3, #40	@ 0x28
 8008224:	2101      	movs	r1, #1
 8008226:	4618      	mov	r0, r3
 8008228:	f001 fba2 	bl	8009970 <RCCEx_PLL3_Config>
 800822c:	4603      	mov	r3, r0
 800822e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008232:	e004      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800823a:	e000      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800823c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800823e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10b      	bne.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008246:	4b26      	ldr	r3, [pc, #152]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800824a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800824e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008252:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008256:	4a22      	ldr	r2, [pc, #136]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008258:	430b      	orrs	r3, r1
 800825a:	6553      	str	r3, [r2, #84]	@ 0x54
 800825c:	e003      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008262:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008272:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008274:	2300      	movs	r3, #0
 8008276:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008278:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800827c:	460b      	mov	r3, r1
 800827e:	4313      	orrs	r3, r2
 8008280:	d034      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800828c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008290:	d007      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008292:	e011      	b.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008294:	4b12      	ldr	r3, [pc, #72]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008298:	4a11      	ldr	r2, [pc, #68]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800829a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800829e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80082a0:	e00e      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a6:	3308      	adds	r3, #8
 80082a8:	2102      	movs	r1, #2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f001 faae 	bl	800980c <RCCEx_PLL2_Config>
 80082b0:	4603      	mov	r3, r0
 80082b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80082b6:	e003      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80082be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10d      	bne.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80082c8:	4b05      	ldr	r3, [pc, #20]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80082d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082d6:	4a02      	ldr	r2, [pc, #8]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082d8:	430b      	orrs	r3, r1
 80082da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80082dc:	e006      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80082de:	bf00      	nop
 80082e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80082f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80082fa:	2300      	movs	r3, #0
 80082fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80082fe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008302:	460b      	mov	r3, r1
 8008304:	4313      	orrs	r3, r2
 8008306:	d00c      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800830c:	3328      	adds	r3, #40	@ 0x28
 800830e:	2102      	movs	r1, #2
 8008310:	4618      	mov	r0, r3
 8008312:	f001 fb2d 	bl	8009970 <RCCEx_PLL3_Config>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d002      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800832e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008330:	2300      	movs	r3, #0
 8008332:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008334:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008338:	460b      	mov	r3, r1
 800833a:	4313      	orrs	r3, r2
 800833c:	d036      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800833e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008342:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008344:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008348:	d018      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800834a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800834e:	d811      	bhi.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008350:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008354:	d014      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008356:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800835a:	d80b      	bhi.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800835c:	2b00      	cmp	r3, #0
 800835e:	d011      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008360:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008364:	d106      	bne.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008366:	4bb7      	ldr	r3, [pc, #732]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800836a:	4ab6      	ldr	r2, [pc, #728]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800836c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008370:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008372:	e008      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800837a:	e004      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800837c:	bf00      	nop
 800837e:	e002      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008380:	bf00      	nop
 8008382:	e000      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008386:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10a      	bne.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800838e:	4bad      	ldr	r3, [pc, #692]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008392:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800839a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800839c:	4aa9      	ldr	r2, [pc, #676]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800839e:	430b      	orrs	r3, r1
 80083a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80083a2:	e003      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80083ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80083b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80083ba:	2300      	movs	r3, #0
 80083bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80083be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80083c2:	460b      	mov	r3, r1
 80083c4:	4313      	orrs	r3, r2
 80083c6:	d009      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80083c8:	4b9e      	ldr	r3, [pc, #632]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80083d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d6:	4a9b      	ldr	r2, [pc, #620]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083d8:	430b      	orrs	r3, r1
 80083da:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80083dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80083e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083ea:	2300      	movs	r3, #0
 80083ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80083f2:	460b      	mov	r3, r1
 80083f4:	4313      	orrs	r3, r2
 80083f6:	d009      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80083f8:	4b92      	ldr	r3, [pc, #584]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083fc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008404:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008406:	4a8f      	ldr	r2, [pc, #572]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008408:	430b      	orrs	r3, r1
 800840a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800840c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008414:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008418:	643b      	str	r3, [r7, #64]	@ 0x40
 800841a:	2300      	movs	r3, #0
 800841c:	647b      	str	r3, [r7, #68]	@ 0x44
 800841e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008422:	460b      	mov	r3, r1
 8008424:	4313      	orrs	r3, r2
 8008426:	d00e      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008428:	4b86      	ldr	r3, [pc, #536]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	4a85      	ldr	r2, [pc, #532]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800842e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008432:	6113      	str	r3, [r2, #16]
 8008434:	4b83      	ldr	r3, [pc, #524]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008436:	6919      	ldr	r1, [r3, #16]
 8008438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800843c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008440:	4a80      	ldr	r2, [pc, #512]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008442:	430b      	orrs	r3, r1
 8008444:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800844a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008452:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008454:	2300      	movs	r3, #0
 8008456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008458:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800845c:	460b      	mov	r3, r1
 800845e:	4313      	orrs	r3, r2
 8008460:	d009      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008462:	4b78      	ldr	r3, [pc, #480]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008466:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800846a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800846e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008470:	4a74      	ldr	r2, [pc, #464]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008472:	430b      	orrs	r3, r1
 8008474:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800847a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008482:	633b      	str	r3, [r7, #48]	@ 0x30
 8008484:	2300      	movs	r3, #0
 8008486:	637b      	str	r3, [r7, #52]	@ 0x34
 8008488:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800848c:	460b      	mov	r3, r1
 800848e:	4313      	orrs	r3, r2
 8008490:	d00a      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008492:	4b6c      	ldr	r3, [pc, #432]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008496:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800849a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800849e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084a2:	4a68      	ldr	r2, [pc, #416]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084a4:	430b      	orrs	r3, r1
 80084a6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80084a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b0:	2100      	movs	r1, #0
 80084b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80084be:	460b      	mov	r3, r1
 80084c0:	4313      	orrs	r3, r2
 80084c2:	d011      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c8:	3308      	adds	r3, #8
 80084ca:	2100      	movs	r1, #0
 80084cc:	4618      	mov	r0, r3
 80084ce:	f001 f99d 	bl	800980c <RCCEx_PLL2_Config>
 80084d2:	4603      	mov	r3, r0
 80084d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80084d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d003      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80084e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	2100      	movs	r1, #0
 80084f2:	6239      	str	r1, [r7, #32]
 80084f4:	f003 0302 	and.w	r3, r3, #2
 80084f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80084fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80084fe:	460b      	mov	r3, r1
 8008500:	4313      	orrs	r3, r2
 8008502:	d011      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008508:	3308      	adds	r3, #8
 800850a:	2101      	movs	r1, #1
 800850c:	4618      	mov	r0, r3
 800850e:	f001 f97d 	bl	800980c <RCCEx_PLL2_Config>
 8008512:	4603      	mov	r3, r0
 8008514:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008518:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800851c:	2b00      	cmp	r3, #0
 800851e:	d003      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008520:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008524:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008530:	2100      	movs	r1, #0
 8008532:	61b9      	str	r1, [r7, #24]
 8008534:	f003 0304 	and.w	r3, r3, #4
 8008538:	61fb      	str	r3, [r7, #28]
 800853a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800853e:	460b      	mov	r3, r1
 8008540:	4313      	orrs	r3, r2
 8008542:	d011      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008548:	3308      	adds	r3, #8
 800854a:	2102      	movs	r1, #2
 800854c:	4618      	mov	r0, r3
 800854e:	f001 f95d 	bl	800980c <RCCEx_PLL2_Config>
 8008552:	4603      	mov	r3, r0
 8008554:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008558:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800855c:	2b00      	cmp	r3, #0
 800855e:	d003      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008560:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008564:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800856c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008570:	2100      	movs	r1, #0
 8008572:	6139      	str	r1, [r7, #16]
 8008574:	f003 0308 	and.w	r3, r3, #8
 8008578:	617b      	str	r3, [r7, #20]
 800857a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800857e:	460b      	mov	r3, r1
 8008580:	4313      	orrs	r3, r2
 8008582:	d011      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008588:	3328      	adds	r3, #40	@ 0x28
 800858a:	2100      	movs	r1, #0
 800858c:	4618      	mov	r0, r3
 800858e:	f001 f9ef 	bl	8009970 <RCCEx_PLL3_Config>
 8008592:	4603      	mov	r3, r0
 8008594:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008598:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800859c:	2b00      	cmp	r3, #0
 800859e:	d003      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80085a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b0:	2100      	movs	r1, #0
 80085b2:	60b9      	str	r1, [r7, #8]
 80085b4:	f003 0310 	and.w	r3, r3, #16
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80085be:	460b      	mov	r3, r1
 80085c0:	4313      	orrs	r3, r2
 80085c2:	d011      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085c8:	3328      	adds	r3, #40	@ 0x28
 80085ca:	2101      	movs	r1, #1
 80085cc:	4618      	mov	r0, r3
 80085ce:	f001 f9cf 	bl	8009970 <RCCEx_PLL3_Config>
 80085d2:	4603      	mov	r3, r0
 80085d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80085d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d003      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80085e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f0:	2100      	movs	r1, #0
 80085f2:	6039      	str	r1, [r7, #0]
 80085f4:	f003 0320 	and.w	r3, r3, #32
 80085f8:	607b      	str	r3, [r7, #4]
 80085fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80085fe:	460b      	mov	r3, r1
 8008600:	4313      	orrs	r3, r2
 8008602:	d011      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008608:	3328      	adds	r3, #40	@ 0x28
 800860a:	2102      	movs	r1, #2
 800860c:	4618      	mov	r0, r3
 800860e:	f001 f9af 	bl	8009970 <RCCEx_PLL3_Config>
 8008612:	4603      	mov	r3, r0
 8008614:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008618:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800861c:	2b00      	cmp	r3, #0
 800861e:	d003      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008620:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008624:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008628:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800862c:	2b00      	cmp	r3, #0
 800862e:	d101      	bne.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	e000      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
}
 8008636:	4618      	mov	r0, r3
 8008638:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800863c:	46bd      	mov	sp, r7
 800863e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008642:	bf00      	nop
 8008644:	58024400 	.word	0x58024400

08008648 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b090      	sub	sp, #64	@ 0x40
 800864c:	af00      	add	r7, sp, #0
 800864e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008656:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800865a:	430b      	orrs	r3, r1
 800865c:	f040 8094 	bne.w	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008660:	4b9b      	ldr	r3, [pc, #620]	@ (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008664:	f003 0307 	and.w	r3, r3, #7
 8008668:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800866a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866c:	2b04      	cmp	r3, #4
 800866e:	f200 8087 	bhi.w	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008672:	a201      	add	r2, pc, #4	@ (adr r2, 8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008678:	0800868d 	.word	0x0800868d
 800867c:	080086b5 	.word	0x080086b5
 8008680:	080086dd 	.word	0x080086dd
 8008684:	08008779 	.word	0x08008779
 8008688:	08008705 	.word	0x08008705
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800868c:	4b90      	ldr	r3, [pc, #576]	@ (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008694:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008698:	d108      	bne.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800869a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 ff62 	bl	8009568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086a8:	f000 bc93 	b.w	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b0:	f000 bc8f 	b.w	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086b4:	4b86      	ldr	r3, [pc, #536]	@ (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086c0:	d108      	bne.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086c2:	f107 0318 	add.w	r3, r7, #24
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 fca6 	bl	8009018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086d0:	f000 bc7f 	b.w	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d8:	f000 bc7b 	b.w	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086dc:	4b7c      	ldr	r3, [pc, #496]	@ (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086e8:	d108      	bne.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086ea:	f107 030c 	add.w	r3, r7, #12
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 fde6 	bl	80092c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086f8:	f000 bc6b 	b.w	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008700:	f000 bc67 	b.w	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008704:	4b72      	ldr	r3, [pc, #456]	@ (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008708:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800870c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800870e:	4b70      	ldr	r3, [pc, #448]	@ (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0304 	and.w	r3, r3, #4
 8008716:	2b04      	cmp	r3, #4
 8008718:	d10c      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800871a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800871c:	2b00      	cmp	r3, #0
 800871e:	d109      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008720:	4b6b      	ldr	r3, [pc, #428]	@ (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	08db      	lsrs	r3, r3, #3
 8008726:	f003 0303 	and.w	r3, r3, #3
 800872a:	4a6a      	ldr	r2, [pc, #424]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800872c:	fa22 f303 	lsr.w	r3, r2, r3
 8008730:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008732:	e01f      	b.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008734:	4b66      	ldr	r3, [pc, #408]	@ (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800873c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008740:	d106      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008744:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008748:	d102      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800874a:	4b63      	ldr	r3, [pc, #396]	@ (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800874c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800874e:	e011      	b.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008750:	4b5f      	ldr	r3, [pc, #380]	@ (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008758:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800875c:	d106      	bne.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800875e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008764:	d102      	bne.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008766:	4b5d      	ldr	r3, [pc, #372]	@ (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008768:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800876a:	e003      	b.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800876c:	2300      	movs	r3, #0
 800876e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008770:	f000 bc2f 	b.w	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008774:	f000 bc2d 	b.w	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008778:	4b59      	ldr	r3, [pc, #356]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800877a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800877c:	f000 bc29 	b.w	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008784:	f000 bc25 	b.w	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800878c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008790:	430b      	orrs	r3, r1
 8008792:	f040 80a7 	bne.w	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008796:	4b4e      	ldr	r3, [pc, #312]	@ (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800879a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800879e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80087a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80087a6:	d054      	beq.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80087a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80087ae:	f200 808b 	bhi.w	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80087b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80087b8:	f000 8083 	beq.w	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80087bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80087c2:	f200 8081 	bhi.w	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80087c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087cc:	d02f      	beq.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80087ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087d4:	d878      	bhi.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80087d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d004      	beq.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80087dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087e2:	d012      	beq.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80087e4:	e070      	b.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087e6:	4b3a      	ldr	r3, [pc, #232]	@ (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087f2:	d107      	bne.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 feb5 	bl	8009568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008802:	e3e6      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008808:	e3e3      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800880a:	4b31      	ldr	r3, [pc, #196]	@ (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008812:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008816:	d107      	bne.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008818:	f107 0318 	add.w	r3, r7, #24
 800881c:	4618      	mov	r0, r3
 800881e:	f000 fbfb 	bl	8009018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008826:	e3d4      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800882c:	e3d1      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800882e:	4b28      	ldr	r3, [pc, #160]	@ (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800883a:	d107      	bne.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800883c:	f107 030c 	add.w	r3, r7, #12
 8008840:	4618      	mov	r0, r3
 8008842:	f000 fd3d 	bl	80092c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800884a:	e3c2      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008850:	e3bf      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008852:	4b1f      	ldr	r3, [pc, #124]	@ (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008856:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800885a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800885c:	4b1c      	ldr	r3, [pc, #112]	@ (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b04      	cmp	r3, #4
 8008866:	d10c      	bne.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800886a:	2b00      	cmp	r3, #0
 800886c:	d109      	bne.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800886e:	4b18      	ldr	r3, [pc, #96]	@ (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	08db      	lsrs	r3, r3, #3
 8008874:	f003 0303 	and.w	r3, r3, #3
 8008878:	4a16      	ldr	r2, [pc, #88]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800887a:	fa22 f303 	lsr.w	r3, r2, r3
 800887e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008880:	e01e      	b.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008882:	4b13      	ldr	r3, [pc, #76]	@ (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800888a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800888e:	d106      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008892:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008896:	d102      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008898:	4b0f      	ldr	r3, [pc, #60]	@ (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800889c:	e010      	b.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800889e:	4b0c      	ldr	r3, [pc, #48]	@ (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088aa:	d106      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80088ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088b2:	d102      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80088b4:	4b09      	ldr	r3, [pc, #36]	@ (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088b8:	e002      	b.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80088be:	e388      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80088c0:	e387      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80088c2:	4b07      	ldr	r3, [pc, #28]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80088c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088c6:	e384      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088cc:	e381      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80088ce:	bf00      	nop
 80088d0:	58024400 	.word	0x58024400
 80088d4:	03d09000 	.word	0x03d09000
 80088d8:	003d0900 	.word	0x003d0900
 80088dc:	016e3600 	.word	0x016e3600
 80088e0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80088e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088e8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80088ec:	430b      	orrs	r3, r1
 80088ee:	f040 809c 	bne.w	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80088f2:	4b9e      	ldr	r3, [pc, #632]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088f6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80088fa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80088fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008902:	d054      	beq.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008906:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800890a:	f200 808b 	bhi.w	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800890e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008910:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008914:	f000 8083 	beq.w	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800891e:	f200 8081 	bhi.w	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008924:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008928:	d02f      	beq.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800892a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008930:	d878      	bhi.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008934:	2b00      	cmp	r3, #0
 8008936:	d004      	beq.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800893e:	d012      	beq.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008940:	e070      	b.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008942:	4b8a      	ldr	r3, [pc, #552]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800894a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800894e:	d107      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008954:	4618      	mov	r0, r3
 8008956:	f000 fe07 	bl	8009568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800895a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800895e:	e338      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008964:	e335      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008966:	4b81      	ldr	r3, [pc, #516]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800896e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008972:	d107      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008974:	f107 0318 	add.w	r3, r7, #24
 8008978:	4618      	mov	r0, r3
 800897a:	f000 fb4d 	bl	8009018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008982:	e326      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008984:	2300      	movs	r3, #0
 8008986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008988:	e323      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800898a:	4b78      	ldr	r3, [pc, #480]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008992:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008996:	d107      	bne.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008998:	f107 030c 	add.w	r3, r7, #12
 800899c:	4618      	mov	r0, r3
 800899e:	f000 fc8f 	bl	80092c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089a6:	e314      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ac:	e311      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089ae:	4b6f      	ldr	r3, [pc, #444]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80089b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089b8:	4b6c      	ldr	r3, [pc, #432]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0304 	and.w	r3, r3, #4
 80089c0:	2b04      	cmp	r3, #4
 80089c2:	d10c      	bne.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80089c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d109      	bne.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089ca:	4b68      	ldr	r3, [pc, #416]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	08db      	lsrs	r3, r3, #3
 80089d0:	f003 0303 	and.w	r3, r3, #3
 80089d4:	4a66      	ldr	r2, [pc, #408]	@ (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80089d6:	fa22 f303 	lsr.w	r3, r2, r3
 80089da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089dc:	e01e      	b.n	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089de:	4b63      	ldr	r3, [pc, #396]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089ea:	d106      	bne.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80089ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089f2:	d102      	bne.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089f4:	4b5f      	ldr	r3, [pc, #380]	@ (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80089f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089f8:	e010      	b.n	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089fa:	4b5c      	ldr	r3, [pc, #368]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a06:	d106      	bne.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a0e:	d102      	bne.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a10:	4b59      	ldr	r3, [pc, #356]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a14:	e002      	b.n	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a16:	2300      	movs	r3, #0
 8008a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008a1a:	e2da      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008a1c:	e2d9      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a1e:	4b57      	ldr	r3, [pc, #348]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a22:	e2d6      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a28:	e2d3      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a2e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008a32:	430b      	orrs	r3, r1
 8008a34:	f040 80a7 	bne.w	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008a38:	4b4c      	ldr	r3, [pc, #304]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a3c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008a40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a48:	d055      	beq.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a50:	f200 8096 	bhi.w	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a5a:	f000 8084 	beq.w	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a64:	f200 808c 	bhi.w	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a6e:	d030      	beq.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a76:	f200 8083 	bhi.w	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d004      	beq.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a86:	d012      	beq.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008a88:	e07a      	b.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a8a:	4b38      	ldr	r3, [pc, #224]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a96:	d107      	bne.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 fd63 	bl	8009568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aa6:	e294      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aac:	e291      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008aae:	4b2f      	ldr	r3, [pc, #188]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ab6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008aba:	d107      	bne.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008abc:	f107 0318 	add.w	r3, r7, #24
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 faa9 	bl	8009018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aca:	e282      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ad0:	e27f      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ad2:	4b26      	ldr	r3, [pc, #152]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ada:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ade:	d107      	bne.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ae0:	f107 030c 	add.w	r3, r7, #12
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f000 fbeb 	bl	80092c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aee:	e270      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af4:	e26d      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008af6:	4b1d      	ldr	r3, [pc, #116]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008afa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008afe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b00:	4b1a      	ldr	r3, [pc, #104]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	d10c      	bne.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d109      	bne.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b12:	4b16      	ldr	r3, [pc, #88]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	08db      	lsrs	r3, r3, #3
 8008b18:	f003 0303 	and.w	r3, r3, #3
 8008b1c:	4a14      	ldr	r2, [pc, #80]	@ (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b24:	e01e      	b.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b26:	4b11      	ldr	r3, [pc, #68]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b32:	d106      	bne.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b3a:	d102      	bne.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b40:	e010      	b.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b42:	4b0a      	ldr	r3, [pc, #40]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b4e:	d106      	bne.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b56:	d102      	bne.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b58:	4b07      	ldr	r3, [pc, #28]	@ (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b5c:	e002      	b.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b62:	e236      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b64:	e235      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b66:	4b05      	ldr	r3, [pc, #20]	@ (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b6a:	e232      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b6c:	58024400 	.word	0x58024400
 8008b70:	03d09000 	.word	0x03d09000
 8008b74:	003d0900 	.word	0x003d0900
 8008b78:	016e3600 	.word	0x016e3600
 8008b7c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b84:	e225      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008b86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b8a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008b8e:	430b      	orrs	r3, r1
 8008b90:	f040 8085 	bne.w	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008b94:	4b9c      	ldr	r3, [pc, #624]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b98:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008ba4:	d06b      	beq.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bac:	d874      	bhi.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008bb4:	d056      	beq.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008bbc:	d86c      	bhi.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bc4:	d03b      	beq.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bcc:	d864      	bhi.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bd4:	d021      	beq.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bdc:	d85c      	bhi.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d004      	beq.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bea:	d004      	beq.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008bec:	e054      	b.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008bee:	f7fe fb5f 	bl	80072b0 <HAL_RCC_GetPCLK1Freq>
 8008bf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008bf4:	e1ed      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bf6:	4b84      	ldr	r3, [pc, #528]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c02:	d107      	bne.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c04:	f107 0318 	add.w	r3, r7, #24
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 fa05 	bl	8009018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c12:	e1de      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c18:	e1db      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c1a:	4b7b      	ldr	r3, [pc, #492]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c26:	d107      	bne.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c28:	f107 030c 	add.w	r3, r7, #12
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f000 fb47 	bl	80092c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c36:	e1cc      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c3c:	e1c9      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c3e:	4b72      	ldr	r3, [pc, #456]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0304 	and.w	r3, r3, #4
 8008c46:	2b04      	cmp	r3, #4
 8008c48:	d109      	bne.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c4a:	4b6f      	ldr	r3, [pc, #444]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	08db      	lsrs	r3, r3, #3
 8008c50:	f003 0303 	and.w	r3, r3, #3
 8008c54:	4a6d      	ldr	r2, [pc, #436]	@ (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008c56:	fa22 f303 	lsr.w	r3, r2, r3
 8008c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c5c:	e1b9      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c62:	e1b6      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c64:	4b68      	ldr	r3, [pc, #416]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c70:	d102      	bne.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008c72:	4b67      	ldr	r3, [pc, #412]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c76:	e1ac      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c7c:	e1a9      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c7e:	4b62      	ldr	r3, [pc, #392]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c8a:	d102      	bne.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008c8c:	4b61      	ldr	r3, [pc, #388]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c90:	e19f      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c96:	e19c      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c9c:	e199      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008c9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ca2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008ca6:	430b      	orrs	r3, r1
 8008ca8:	d173      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008caa:	4b57      	ldr	r3, [pc, #348]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008cb2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cba:	d02f      	beq.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cc2:	d863      	bhi.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d004      	beq.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cd0:	d012      	beq.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008cd2:	e05b      	b.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cd4:	4b4c      	ldr	r3, [pc, #304]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ce0:	d107      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ce2:	f107 0318 	add.w	r3, r7, #24
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 f996 	bl	8009018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cf0:	e16f      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cf6:	e16c      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cf8:	4b43      	ldr	r3, [pc, #268]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d04:	d107      	bne.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d06:	f107 030c 	add.w	r3, r7, #12
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 fad8 	bl	80092c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d14:	e15d      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d1a:	e15a      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d1c:	4b3a      	ldr	r3, [pc, #232]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d24:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d26:	4b38      	ldr	r3, [pc, #224]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0304 	and.w	r3, r3, #4
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d10c      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d109      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d38:	4b33      	ldr	r3, [pc, #204]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	08db      	lsrs	r3, r3, #3
 8008d3e:	f003 0303 	and.w	r3, r3, #3
 8008d42:	4a32      	ldr	r2, [pc, #200]	@ (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008d44:	fa22 f303 	lsr.w	r3, r2, r3
 8008d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d4a:	e01e      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d58:	d106      	bne.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d60:	d102      	bne.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d62:	4b2b      	ldr	r3, [pc, #172]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d66:	e010      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d68:	4b27      	ldr	r3, [pc, #156]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d74:	d106      	bne.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d7c:	d102      	bne.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d7e:	4b25      	ldr	r3, [pc, #148]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d82:	e002      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d84:	2300      	movs	r3, #0
 8008d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008d88:	e123      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d8a:	e122      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d90:	e11f      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d96:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008d9a:	430b      	orrs	r3, r1
 8008d9c:	d13c      	bne.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008da6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d004      	beq.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008db4:	d012      	beq.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008db6:	e023      	b.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008db8:	4b13      	ldr	r3, [pc, #76]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008dc4:	d107      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f000 fbcc 	bl	8009568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dd4:	e0fd      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dda:	e0fa      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008de4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008de8:	d107      	bne.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dea:	f107 0318 	add.w	r3, r7, #24
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 f912 	bl	8009018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008df8:	e0eb      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dfe:	e0e8      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008e00:	2300      	movs	r3, #0
 8008e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e04:	e0e5      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e06:	bf00      	nop
 8008e08:	58024400 	.word	0x58024400
 8008e0c:	03d09000 	.word	0x03d09000
 8008e10:	003d0900 	.word	0x003d0900
 8008e14:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e1c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008e20:	430b      	orrs	r3, r1
 8008e22:	f040 8085 	bne.w	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008e26:	4b6d      	ldr	r3, [pc, #436]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e2a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008e2e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e36:	d06b      	beq.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e3e:	d874      	bhi.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e46:	d056      	beq.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e4e:	d86c      	bhi.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e56:	d03b      	beq.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e5e:	d864      	bhi.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e66:	d021      	beq.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e6e:	d85c      	bhi.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d004      	beq.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e7c:	d004      	beq.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008e7e:	e054      	b.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008e80:	f000 f8b4 	bl	8008fec <HAL_RCCEx_GetD3PCLK1Freq>
 8008e84:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e86:	e0a4      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e88:	4b54      	ldr	r3, [pc, #336]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e94:	d107      	bne.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e96:	f107 0318 	add.w	r3, r7, #24
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f000 f8bc 	bl	8009018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ea4:	e095      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eaa:	e092      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008eac:	4b4b      	ldr	r3, [pc, #300]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008eb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008eb8:	d107      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eba:	f107 030c 	add.w	r3, r7, #12
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 f9fe 	bl	80092c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ec8:	e083      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ece:	e080      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ed0:	4b42      	ldr	r3, [pc, #264]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0304 	and.w	r3, r3, #4
 8008ed8:	2b04      	cmp	r3, #4
 8008eda:	d109      	bne.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008edc:	4b3f      	ldr	r3, [pc, #252]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	08db      	lsrs	r3, r3, #3
 8008ee2:	f003 0303 	and.w	r3, r3, #3
 8008ee6:	4a3e      	ldr	r2, [pc, #248]	@ (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8008eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eee:	e070      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ef4:	e06d      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008ef6:	4b39      	ldr	r3, [pc, #228]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008efe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f02:	d102      	bne.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008f04:	4b37      	ldr	r3, [pc, #220]	@ (8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f08:	e063      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f0e:	e060      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f10:	4b32      	ldr	r3, [pc, #200]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f1c:	d102      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008f1e:	4b32      	ldr	r3, [pc, #200]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f22:	e056      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f24:	2300      	movs	r3, #0
 8008f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f28:	e053      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f2e:	e050      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f34:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008f38:	430b      	orrs	r3, r1
 8008f3a:	d148      	bne.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008f3c:	4b27      	ldr	r3, [pc, #156]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f44:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f4c:	d02a      	beq.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f54:	d838      	bhi.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d004      	beq.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f62:	d00d      	beq.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008f64:	e030      	b.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f66:	4b1d      	ldr	r3, [pc, #116]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f72:	d102      	bne.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008f74:	4b1c      	ldr	r3, [pc, #112]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f78:	e02b      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f7e:	e028      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f80:	4b16      	ldr	r3, [pc, #88]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f8c:	d107      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 fae8 	bl	8009568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f9c:	e019      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fa2:	e016      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fb0:	d107      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fb2:	f107 0318 	add.w	r3, r7, #24
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 f82e 	bl	8009018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fc0:	e007      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fc6:	e004      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fcc:	e001      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3740      	adds	r7, #64	@ 0x40
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	58024400 	.word	0x58024400
 8008fe0:	03d09000 	.word	0x03d09000
 8008fe4:	003d0900 	.word	0x003d0900
 8008fe8:	016e3600 	.word	0x016e3600

08008fec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008ff0:	f7fe f92e 	bl	8007250 <HAL_RCC_GetHCLKFreq>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	4b06      	ldr	r3, [pc, #24]	@ (8009010 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008ff8:	6a1b      	ldr	r3, [r3, #32]
 8008ffa:	091b      	lsrs	r3, r3, #4
 8008ffc:	f003 0307 	and.w	r3, r3, #7
 8009000:	4904      	ldr	r1, [pc, #16]	@ (8009014 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009002:	5ccb      	ldrb	r3, [r1, r3]
 8009004:	f003 031f 	and.w	r3, r3, #31
 8009008:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800900c:	4618      	mov	r0, r3
 800900e:	bd80      	pop	{r7, pc}
 8009010:	58024400 	.word	0x58024400
 8009014:	0800bc90 	.word	0x0800bc90

08009018 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009018:	b480      	push	{r7}
 800901a:	b089      	sub	sp, #36	@ 0x24
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009020:	4ba1      	ldr	r3, [pc, #644]	@ (80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009024:	f003 0303 	and.w	r3, r3, #3
 8009028:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800902a:	4b9f      	ldr	r3, [pc, #636]	@ (80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800902c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800902e:	0b1b      	lsrs	r3, r3, #12
 8009030:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009034:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009036:	4b9c      	ldr	r3, [pc, #624]	@ (80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800903a:	091b      	lsrs	r3, r3, #4
 800903c:	f003 0301 	and.w	r3, r3, #1
 8009040:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009042:	4b99      	ldr	r3, [pc, #612]	@ (80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009046:	08db      	lsrs	r3, r3, #3
 8009048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	fb02 f303 	mul.w	r3, r2, r3
 8009052:	ee07 3a90 	vmov	s15, r3
 8009056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800905a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 8111 	beq.w	8009288 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	2b02      	cmp	r3, #2
 800906a:	f000 8083 	beq.w	8009174 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	2b02      	cmp	r3, #2
 8009072:	f200 80a1 	bhi.w	80091b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d003      	beq.n	8009084 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d056      	beq.n	8009130 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009082:	e099      	b.n	80091b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009084:	4b88      	ldr	r3, [pc, #544]	@ (80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0320 	and.w	r3, r3, #32
 800908c:	2b00      	cmp	r3, #0
 800908e:	d02d      	beq.n	80090ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009090:	4b85      	ldr	r3, [pc, #532]	@ (80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	08db      	lsrs	r3, r3, #3
 8009096:	f003 0303 	and.w	r3, r3, #3
 800909a:	4a84      	ldr	r2, [pc, #528]	@ (80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800909c:	fa22 f303 	lsr.w	r3, r2, r3
 80090a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	ee07 3a90 	vmov	s15, r3
 80090a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	ee07 3a90 	vmov	s15, r3
 80090b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ba:	4b7b      	ldr	r3, [pc, #492]	@ (80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c2:	ee07 3a90 	vmov	s15, r3
 80090c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80090ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80092b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80090ea:	e087      	b.n	80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	ee07 3a90 	vmov	s15, r3
 80090f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80092b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80090fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090fe:	4b6a      	ldr	r3, [pc, #424]	@ (80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009106:	ee07 3a90 	vmov	s15, r3
 800910a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800910e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009112:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80092b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800911a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800911e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800912a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800912e:	e065      	b.n	80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	ee07 3a90 	vmov	s15, r3
 8009136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800913a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80092b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800913e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009142:	4b59      	ldr	r3, [pc, #356]	@ (80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800914a:	ee07 3a90 	vmov	s15, r3
 800914e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009152:	ed97 6a03 	vldr	s12, [r7, #12]
 8009156:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80092b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800915a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800915e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800916a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800916e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009172:	e043      	b.n	80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	ee07 3a90 	vmov	s15, r3
 800917a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800917e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80092bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009186:	4b48      	ldr	r3, [pc, #288]	@ (80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800918a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800918e:	ee07 3a90 	vmov	s15, r3
 8009192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009196:	ed97 6a03 	vldr	s12, [r7, #12]
 800919a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80092b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800919e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091b6:	e021      	b.n	80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	ee07 3a90 	vmov	s15, r3
 80091be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80092b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ca:	4b37      	ldr	r3, [pc, #220]	@ (80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d2:	ee07 3a90 	vmov	s15, r3
 80091d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091da:	ed97 6a03 	vldr	s12, [r7, #12]
 80091de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80092b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80091fc:	4b2a      	ldr	r3, [pc, #168]	@ (80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009200:	0a5b      	lsrs	r3, r3, #9
 8009202:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009206:	ee07 3a90 	vmov	s15, r3
 800920a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009212:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009216:	edd7 6a07 	vldr	s13, [r7, #28]
 800921a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800921e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009222:	ee17 2a90 	vmov	r2, s15
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800922a:	4b1f      	ldr	r3, [pc, #124]	@ (80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800922c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800922e:	0c1b      	lsrs	r3, r3, #16
 8009230:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009234:	ee07 3a90 	vmov	s15, r3
 8009238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800923c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009240:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009244:	edd7 6a07 	vldr	s13, [r7, #28]
 8009248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800924c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009250:	ee17 2a90 	vmov	r2, s15
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009258:	4b13      	ldr	r3, [pc, #76]	@ (80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800925a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800925c:	0e1b      	lsrs	r3, r3, #24
 800925e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009262:	ee07 3a90 	vmov	s15, r3
 8009266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800926a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800926e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009272:	edd7 6a07 	vldr	s13, [r7, #28]
 8009276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800927a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800927e:	ee17 2a90 	vmov	r2, s15
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009286:	e008      	b.n	800929a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	609a      	str	r2, [r3, #8]
}
 800929a:	bf00      	nop
 800929c:	3724      	adds	r7, #36	@ 0x24
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	58024400 	.word	0x58024400
 80092ac:	03d09000 	.word	0x03d09000
 80092b0:	46000000 	.word	0x46000000
 80092b4:	4c742400 	.word	0x4c742400
 80092b8:	4a742400 	.word	0x4a742400
 80092bc:	4bb71b00 	.word	0x4bb71b00

080092c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b089      	sub	sp, #36	@ 0x24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092c8:	4ba1      	ldr	r3, [pc, #644]	@ (8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092cc:	f003 0303 	and.w	r3, r3, #3
 80092d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80092d2:	4b9f      	ldr	r3, [pc, #636]	@ (8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d6:	0d1b      	lsrs	r3, r3, #20
 80092d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80092de:	4b9c      	ldr	r3, [pc, #624]	@ (8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e2:	0a1b      	lsrs	r3, r3, #8
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80092ea:	4b99      	ldr	r3, [pc, #612]	@ (8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092ee:	08db      	lsrs	r3, r3, #3
 80092f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092f4:	693a      	ldr	r2, [r7, #16]
 80092f6:	fb02 f303 	mul.w	r3, r2, r3
 80092fa:	ee07 3a90 	vmov	s15, r3
 80092fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009302:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 8111 	beq.w	8009530 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	2b02      	cmp	r3, #2
 8009312:	f000 8083 	beq.w	800941c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	2b02      	cmp	r3, #2
 800931a:	f200 80a1 	bhi.w	8009460 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d003      	beq.n	800932c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	2b01      	cmp	r3, #1
 8009328:	d056      	beq.n	80093d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800932a:	e099      	b.n	8009460 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800932c:	4b88      	ldr	r3, [pc, #544]	@ (8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 0320 	and.w	r3, r3, #32
 8009334:	2b00      	cmp	r3, #0
 8009336:	d02d      	beq.n	8009394 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009338:	4b85      	ldr	r3, [pc, #532]	@ (8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	08db      	lsrs	r3, r3, #3
 800933e:	f003 0303 	and.w	r3, r3, #3
 8009342:	4a84      	ldr	r2, [pc, #528]	@ (8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009344:	fa22 f303 	lsr.w	r3, r2, r3
 8009348:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	ee07 3a90 	vmov	s15, r3
 8009350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	ee07 3a90 	vmov	s15, r3
 800935a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800935e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009362:	4b7b      	ldr	r3, [pc, #492]	@ (8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800936a:	ee07 3a90 	vmov	s15, r3
 800936e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009372:	ed97 6a03 	vldr	s12, [r7, #12]
 8009376:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800937a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800937e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800938a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800938e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009392:	e087      	b.n	80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	ee07 3a90 	vmov	s15, r3
 800939a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800939e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800955c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80093a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093a6:	4b6a      	ldr	r3, [pc, #424]	@ (8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ae:	ee07 3a90 	vmov	s15, r3
 80093b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093d6:	e065      	b.n	80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	ee07 3a90 	vmov	s15, r3
 80093de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80093e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ea:	4b59      	ldr	r3, [pc, #356]	@ (8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f2:	ee07 3a90 	vmov	s15, r3
 80093f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80093fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800940a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800940e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800941a:	e043      	b.n	80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	ee07 3a90 	vmov	s15, r3
 8009422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009426:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800942a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800942e:	4b48      	ldr	r3, [pc, #288]	@ (8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009436:	ee07 3a90 	vmov	s15, r3
 800943a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800943e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009442:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800944a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800944e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800945a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800945e:	e021      	b.n	80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	ee07 3a90 	vmov	s15, r3
 8009466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800946a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800946e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009472:	4b37      	ldr	r3, [pc, #220]	@ (8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800947a:	ee07 3a90 	vmov	s15, r3
 800947e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009482:	ed97 6a03 	vldr	s12, [r7, #12]
 8009486:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800948a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800948e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800949a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800949e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80094a4:	4b2a      	ldr	r3, [pc, #168]	@ (8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094a8:	0a5b      	lsrs	r3, r3, #9
 80094aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ae:	ee07 3a90 	vmov	s15, r3
 80094b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094be:	edd7 6a07 	vldr	s13, [r7, #28]
 80094c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ca:	ee17 2a90 	vmov	r2, s15
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80094d2:	4b1f      	ldr	r3, [pc, #124]	@ (8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094d6:	0c1b      	lsrs	r3, r3, #16
 80094d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094dc:	ee07 3a90 	vmov	s15, r3
 80094e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80094f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094f8:	ee17 2a90 	vmov	r2, s15
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009500:	4b13      	ldr	r3, [pc, #76]	@ (8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009504:	0e1b      	lsrs	r3, r3, #24
 8009506:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800950a:	ee07 3a90 	vmov	s15, r3
 800950e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009512:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800951a:	edd7 6a07 	vldr	s13, [r7, #28]
 800951e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009526:	ee17 2a90 	vmov	r2, s15
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800952e:	e008      	b.n	8009542 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	609a      	str	r2, [r3, #8]
}
 8009542:	bf00      	nop
 8009544:	3724      	adds	r7, #36	@ 0x24
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	58024400 	.word	0x58024400
 8009554:	03d09000 	.word	0x03d09000
 8009558:	46000000 	.word	0x46000000
 800955c:	4c742400 	.word	0x4c742400
 8009560:	4a742400 	.word	0x4a742400
 8009564:	4bb71b00 	.word	0x4bb71b00

08009568 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009568:	b480      	push	{r7}
 800956a:	b089      	sub	sp, #36	@ 0x24
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009570:	4ba0      	ldr	r3, [pc, #640]	@ (80097f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009574:	f003 0303 	and.w	r3, r3, #3
 8009578:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800957a:	4b9e      	ldr	r3, [pc, #632]	@ (80097f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800957c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800957e:	091b      	lsrs	r3, r3, #4
 8009580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009584:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009586:	4b9b      	ldr	r3, [pc, #620]	@ (80097f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009590:	4b98      	ldr	r3, [pc, #608]	@ (80097f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009594:	08db      	lsrs	r3, r3, #3
 8009596:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	fb02 f303 	mul.w	r3, r2, r3
 80095a0:	ee07 3a90 	vmov	s15, r3
 80095a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095a8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f000 8111 	beq.w	80097d6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	f000 8083 	beq.w	80096c2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	2b02      	cmp	r3, #2
 80095c0:	f200 80a1 	bhi.w	8009706 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d003      	beq.n	80095d2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d056      	beq.n	800967e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80095d0:	e099      	b.n	8009706 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095d2:	4b88      	ldr	r3, [pc, #544]	@ (80097f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0320 	and.w	r3, r3, #32
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d02d      	beq.n	800963a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095de:	4b85      	ldr	r3, [pc, #532]	@ (80097f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	08db      	lsrs	r3, r3, #3
 80095e4:	f003 0303 	and.w	r3, r3, #3
 80095e8:	4a83      	ldr	r2, [pc, #524]	@ (80097f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80095ea:	fa22 f303 	lsr.w	r3, r2, r3
 80095ee:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	ee07 3a90 	vmov	s15, r3
 80095f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	ee07 3a90 	vmov	s15, r3
 8009600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009608:	4b7a      	ldr	r3, [pc, #488]	@ (80097f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800960a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800960c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009610:	ee07 3a90 	vmov	s15, r3
 8009614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009618:	ed97 6a03 	vldr	s12, [r7, #12]
 800961c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80097fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009628:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800962c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009634:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009638:	e087      	b.n	800974a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	ee07 3a90 	vmov	s15, r3
 8009640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009644:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009800 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800964c:	4b69      	ldr	r3, [pc, #420]	@ (80097f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800964e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009654:	ee07 3a90 	vmov	s15, r3
 8009658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800965c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009660:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80097fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800966c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009678:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800967c:	e065      	b.n	800974a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	ee07 3a90 	vmov	s15, r3
 8009684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009688:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009804 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800968c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009690:	4b58      	ldr	r3, [pc, #352]	@ (80097f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009698:	ee07 3a90 	vmov	s15, r3
 800969c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80096a4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80097fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096c0:	e043      	b.n	800974a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	ee07 3a90 	vmov	s15, r3
 80096c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096cc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009808 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80096d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096d4:	4b47      	ldr	r3, [pc, #284]	@ (80097f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096dc:	ee07 3a90 	vmov	s15, r3
 80096e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80096e8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80097fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009700:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009704:	e021      	b.n	800974a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	ee07 3a90 	vmov	s15, r3
 800970c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009710:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009800 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009718:	4b36      	ldr	r3, [pc, #216]	@ (80097f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800971a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800971c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009720:	ee07 3a90 	vmov	s15, r3
 8009724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009728:	ed97 6a03 	vldr	s12, [r7, #12]
 800972c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80097fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009730:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009734:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009738:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800973c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009744:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009748:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800974a:	4b2a      	ldr	r3, [pc, #168]	@ (80097f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800974c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800974e:	0a5b      	lsrs	r3, r3, #9
 8009750:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009754:	ee07 3a90 	vmov	s15, r3
 8009758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800975c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009760:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009764:	edd7 6a07 	vldr	s13, [r7, #28]
 8009768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800976c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009770:	ee17 2a90 	vmov	r2, s15
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009778:	4b1e      	ldr	r3, [pc, #120]	@ (80097f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800977a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800977c:	0c1b      	lsrs	r3, r3, #16
 800977e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009782:	ee07 3a90 	vmov	s15, r3
 8009786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800978a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800978e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009792:	edd7 6a07 	vldr	s13, [r7, #28]
 8009796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800979a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800979e:	ee17 2a90 	vmov	r2, s15
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80097a6:	4b13      	ldr	r3, [pc, #76]	@ (80097f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097aa:	0e1b      	lsrs	r3, r3, #24
 80097ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097b0:	ee07 3a90 	vmov	s15, r3
 80097b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80097c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097cc:	ee17 2a90 	vmov	r2, s15
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80097d4:	e008      	b.n	80097e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	609a      	str	r2, [r3, #8]
}
 80097e8:	bf00      	nop
 80097ea:	3724      	adds	r7, #36	@ 0x24
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	58024400 	.word	0x58024400
 80097f8:	03d09000 	.word	0x03d09000
 80097fc:	46000000 	.word	0x46000000
 8009800:	4c742400 	.word	0x4c742400
 8009804:	4a742400 	.word	0x4a742400
 8009808:	4bb71b00 	.word	0x4bb71b00

0800980c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009816:	2300      	movs	r3, #0
 8009818:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800981a:	4b53      	ldr	r3, [pc, #332]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 800981c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800981e:	f003 0303 	and.w	r3, r3, #3
 8009822:	2b03      	cmp	r3, #3
 8009824:	d101      	bne.n	800982a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e099      	b.n	800995e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800982a:	4b4f      	ldr	r3, [pc, #316]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a4e      	ldr	r2, [pc, #312]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 8009830:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009836:	f7f9 f965 	bl	8002b04 <HAL_GetTick>
 800983a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800983c:	e008      	b.n	8009850 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800983e:	f7f9 f961 	bl	8002b04 <HAL_GetTick>
 8009842:	4602      	mov	r2, r0
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	2b02      	cmp	r3, #2
 800984a:	d901      	bls.n	8009850 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	e086      	b.n	800995e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009850:	4b45      	ldr	r3, [pc, #276]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1f0      	bne.n	800983e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800985c:	4b42      	ldr	r3, [pc, #264]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 800985e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009860:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	031b      	lsls	r3, r3, #12
 800986a:	493f      	ldr	r1, [pc, #252]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 800986c:	4313      	orrs	r3, r2
 800986e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	3b01      	subs	r3, #1
 8009876:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	3b01      	subs	r3, #1
 8009880:	025b      	lsls	r3, r3, #9
 8009882:	b29b      	uxth	r3, r3
 8009884:	431a      	orrs	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	3b01      	subs	r3, #1
 800988c:	041b      	lsls	r3, r3, #16
 800988e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009892:	431a      	orrs	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	3b01      	subs	r3, #1
 800989a:	061b      	lsls	r3, r3, #24
 800989c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80098a0:	4931      	ldr	r1, [pc, #196]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80098a6:	4b30      	ldr	r3, [pc, #192]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 80098a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	695b      	ldr	r3, [r3, #20]
 80098b2:	492d      	ldr	r1, [pc, #180]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 80098b4:	4313      	orrs	r3, r2
 80098b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80098b8:	4b2b      	ldr	r3, [pc, #172]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 80098ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098bc:	f023 0220 	bic.w	r2, r3, #32
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	4928      	ldr	r1, [pc, #160]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80098ca:	4b27      	ldr	r3, [pc, #156]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 80098cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ce:	4a26      	ldr	r2, [pc, #152]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 80098d0:	f023 0310 	bic.w	r3, r3, #16
 80098d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098d6:	4b24      	ldr	r3, [pc, #144]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 80098d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098da:	4b24      	ldr	r3, [pc, #144]	@ (800996c <RCCEx_PLL2_Config+0x160>)
 80098dc:	4013      	ands	r3, r2
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	69d2      	ldr	r2, [r2, #28]
 80098e2:	00d2      	lsls	r2, r2, #3
 80098e4:	4920      	ldr	r1, [pc, #128]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80098ea:	4b1f      	ldr	r3, [pc, #124]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 80098ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ee:	4a1e      	ldr	r2, [pc, #120]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 80098f0:	f043 0310 	orr.w	r3, r3, #16
 80098f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d106      	bne.n	800990a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80098fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 80098fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009900:	4a19      	ldr	r2, [pc, #100]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 8009902:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009906:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009908:	e00f      	b.n	800992a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d106      	bne.n	800991e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009910:	4b15      	ldr	r3, [pc, #84]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 8009912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009914:	4a14      	ldr	r2, [pc, #80]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 8009916:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800991a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800991c:	e005      	b.n	800992a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800991e:	4b12      	ldr	r3, [pc, #72]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 8009920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009922:	4a11      	ldr	r2, [pc, #68]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 8009924:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009928:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800992a:	4b0f      	ldr	r3, [pc, #60]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a0e      	ldr	r2, [pc, #56]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 8009930:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009936:	f7f9 f8e5 	bl	8002b04 <HAL_GetTick>
 800993a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800993c:	e008      	b.n	8009950 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800993e:	f7f9 f8e1 	bl	8002b04 <HAL_GetTick>
 8009942:	4602      	mov	r2, r0
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	2b02      	cmp	r3, #2
 800994a:	d901      	bls.n	8009950 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800994c:	2303      	movs	r3, #3
 800994e:	e006      	b.n	800995e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009950:	4b05      	ldr	r3, [pc, #20]	@ (8009968 <RCCEx_PLL2_Config+0x15c>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009958:	2b00      	cmp	r3, #0
 800995a:	d0f0      	beq.n	800993e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800995c:	7bfb      	ldrb	r3, [r7, #15]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	58024400 	.word	0x58024400
 800996c:	ffff0007 	.word	0xffff0007

08009970 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800997a:	2300      	movs	r3, #0
 800997c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800997e:	4b53      	ldr	r3, [pc, #332]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009982:	f003 0303 	and.w	r3, r3, #3
 8009986:	2b03      	cmp	r3, #3
 8009988:	d101      	bne.n	800998e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e099      	b.n	8009ac2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800998e:	4b4f      	ldr	r3, [pc, #316]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a4e      	ldr	r2, [pc, #312]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009994:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800999a:	f7f9 f8b3 	bl	8002b04 <HAL_GetTick>
 800999e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099a0:	e008      	b.n	80099b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80099a2:	f7f9 f8af 	bl	8002b04 <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d901      	bls.n	80099b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e086      	b.n	8009ac2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099b4:	4b45      	ldr	r3, [pc, #276]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1f0      	bne.n	80099a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80099c0:	4b42      	ldr	r3, [pc, #264]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 80099c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	051b      	lsls	r3, r3, #20
 80099ce:	493f      	ldr	r1, [pc, #252]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 80099d0:	4313      	orrs	r3, r2
 80099d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	3b01      	subs	r3, #1
 80099da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	3b01      	subs	r3, #1
 80099e4:	025b      	lsls	r3, r3, #9
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	431a      	orrs	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	3b01      	subs	r3, #1
 80099f0:	041b      	lsls	r3, r3, #16
 80099f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80099f6:	431a      	orrs	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	3b01      	subs	r3, #1
 80099fe:	061b      	lsls	r3, r3, #24
 8009a00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009a04:	4931      	ldr	r1, [pc, #196]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a0a:	4b30      	ldr	r3, [pc, #192]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	492d      	ldr	r1, [pc, #180]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a20:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	4928      	ldr	r1, [pc, #160]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a2e:	4b27      	ldr	r3, [pc, #156]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a32:	4a26      	ldr	r2, [pc, #152]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a3a:	4b24      	ldr	r3, [pc, #144]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a3e:	4b24      	ldr	r3, [pc, #144]	@ (8009ad0 <RCCEx_PLL3_Config+0x160>)
 8009a40:	4013      	ands	r3, r2
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	69d2      	ldr	r2, [r2, #28]
 8009a46:	00d2      	lsls	r2, r2, #3
 8009a48:	4920      	ldr	r1, [pc, #128]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a52:	4a1e      	ldr	r2, [pc, #120]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d106      	bne.n	8009a6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a60:	4b1a      	ldr	r3, [pc, #104]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a64:	4a19      	ldr	r2, [pc, #100]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a6c:	e00f      	b.n	8009a8e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d106      	bne.n	8009a82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a74:	4b15      	ldr	r3, [pc, #84]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a78:	4a14      	ldr	r2, [pc, #80]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a80:	e005      	b.n	8009a8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a82:	4b12      	ldr	r3, [pc, #72]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a86:	4a11      	ldr	r2, [pc, #68]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a0e      	ldr	r2, [pc, #56]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a9a:	f7f9 f833 	bl	8002b04 <HAL_GetTick>
 8009a9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009aa0:	e008      	b.n	8009ab4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009aa2:	f7f9 f82f 	bl	8002b04 <HAL_GetTick>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d901      	bls.n	8009ab4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e006      	b.n	8009ac2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ab4:	4b05      	ldr	r3, [pc, #20]	@ (8009acc <RCCEx_PLL3_Config+0x15c>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d0f0      	beq.n	8009aa2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	58024400 	.word	0x58024400
 8009ad0:	ffff0007 	.word	0xffff0007

08009ad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d101      	bne.n	8009ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e042      	b.n	8009b6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d106      	bne.n	8009afe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7f8 fe03 	bl	8002704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2224      	movs	r2, #36	@ 0x24
 8009b02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f022 0201 	bic.w	r2, r2, #1
 8009b14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d002      	beq.n	8009b24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 ff38 	bl	800a994 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f8c9 	bl	8009cbc <UART_SetConfig>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d101      	bne.n	8009b34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e01b      	b.n	8009b6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	685a      	ldr	r2, [r3, #4]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	689a      	ldr	r2, [r3, #8]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f042 0201 	orr.w	r2, r2, #1
 8009b62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 ffb7 	bl	800aad8 <UART_CheckIdleState>
 8009b6a:	4603      	mov	r3, r0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b08a      	sub	sp, #40	@ 0x28
 8009b78:	af02      	add	r7, sp, #8
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	603b      	str	r3, [r7, #0]
 8009b80:	4613      	mov	r3, r2
 8009b82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b8a:	2b20      	cmp	r3, #32
 8009b8c:	d17b      	bne.n	8009c86 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <HAL_UART_Transmit+0x26>
 8009b94:	88fb      	ldrh	r3, [r7, #6]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d101      	bne.n	8009b9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e074      	b.n	8009c88 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2221      	movs	r2, #33	@ 0x21
 8009baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009bae:	f7f8 ffa9 	bl	8002b04 <HAL_GetTick>
 8009bb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	88fa      	ldrh	r2, [r7, #6]
 8009bb8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	88fa      	ldrh	r2, [r7, #6]
 8009bc0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bcc:	d108      	bne.n	8009be0 <HAL_UART_Transmit+0x6c>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d104      	bne.n	8009be0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	61bb      	str	r3, [r7, #24]
 8009bde:	e003      	b.n	8009be8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009be4:	2300      	movs	r3, #0
 8009be6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009be8:	e030      	b.n	8009c4c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	2180      	movs	r1, #128	@ 0x80
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f001 f819 	bl	800ac2c <UART_WaitOnFlagUntilTimeout>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d005      	beq.n	8009c0c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2220      	movs	r2, #32
 8009c04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	e03d      	b.n	8009c88 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10b      	bne.n	8009c2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	461a      	mov	r2, r3
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c20:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	3302      	adds	r3, #2
 8009c26:	61bb      	str	r3, [r7, #24]
 8009c28:	e007      	b.n	8009c3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	781a      	ldrb	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	3301      	adds	r3, #1
 8009c38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	3b01      	subs	r3, #1
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d1c8      	bne.n	8009bea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	2140      	movs	r1, #64	@ 0x40
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f000 ffe2 	bl	800ac2c <UART_WaitOnFlagUntilTimeout>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d005      	beq.n	8009c7a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2220      	movs	r2, #32
 8009c72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009c76:	2303      	movs	r3, #3
 8009c78:	e006      	b.n	8009c88 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2220      	movs	r2, #32
 8009c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009c82:	2300      	movs	r3, #0
 8009c84:	e000      	b.n	8009c88 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009c86:	2302      	movs	r3, #2
  }
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3720      	adds	r7, #32
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c9e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ca6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	4313      	orrs	r3, r2
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr
	...

08009cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cc0:	b092      	sub	sp, #72	@ 0x48
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	689a      	ldr	r2, [r3, #8]
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	431a      	orrs	r2, r3
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	431a      	orrs	r2, r3
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	69db      	ldr	r3, [r3, #28]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	4bbe      	ldr	r3, [pc, #760]	@ (8009fe4 <UART_SetConfig+0x328>)
 8009cec:	4013      	ands	r3, r2
 8009cee:	697a      	ldr	r2, [r7, #20]
 8009cf0:	6812      	ldr	r2, [r2, #0]
 8009cf2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009cf4:	430b      	orrs	r3, r1
 8009cf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	68da      	ldr	r2, [r3, #12]
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	699b      	ldr	r3, [r3, #24]
 8009d12:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4ab3      	ldr	r2, [pc, #716]	@ (8009fe8 <UART_SetConfig+0x32c>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d004      	beq.n	8009d28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	6a1b      	ldr	r3, [r3, #32]
 8009d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d24:	4313      	orrs	r3, r2
 8009d26:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	689a      	ldr	r2, [r3, #8]
 8009d2e:	4baf      	ldr	r3, [pc, #700]	@ (8009fec <UART_SetConfig+0x330>)
 8009d30:	4013      	ands	r3, r2
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	6812      	ldr	r2, [r2, #0]
 8009d36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009d38:	430b      	orrs	r3, r1
 8009d3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d42:	f023 010f 	bic.w	r1, r3, #15
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	430a      	orrs	r2, r1
 8009d50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4aa6      	ldr	r2, [pc, #664]	@ (8009ff0 <UART_SetConfig+0x334>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d177      	bne.n	8009e4c <UART_SetConfig+0x190>
 8009d5c:	4ba5      	ldr	r3, [pc, #660]	@ (8009ff4 <UART_SetConfig+0x338>)
 8009d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d64:	2b28      	cmp	r3, #40	@ 0x28
 8009d66:	d86d      	bhi.n	8009e44 <UART_SetConfig+0x188>
 8009d68:	a201      	add	r2, pc, #4	@ (adr r2, 8009d70 <UART_SetConfig+0xb4>)
 8009d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6e:	bf00      	nop
 8009d70:	08009e15 	.word	0x08009e15
 8009d74:	08009e45 	.word	0x08009e45
 8009d78:	08009e45 	.word	0x08009e45
 8009d7c:	08009e45 	.word	0x08009e45
 8009d80:	08009e45 	.word	0x08009e45
 8009d84:	08009e45 	.word	0x08009e45
 8009d88:	08009e45 	.word	0x08009e45
 8009d8c:	08009e45 	.word	0x08009e45
 8009d90:	08009e1d 	.word	0x08009e1d
 8009d94:	08009e45 	.word	0x08009e45
 8009d98:	08009e45 	.word	0x08009e45
 8009d9c:	08009e45 	.word	0x08009e45
 8009da0:	08009e45 	.word	0x08009e45
 8009da4:	08009e45 	.word	0x08009e45
 8009da8:	08009e45 	.word	0x08009e45
 8009dac:	08009e45 	.word	0x08009e45
 8009db0:	08009e25 	.word	0x08009e25
 8009db4:	08009e45 	.word	0x08009e45
 8009db8:	08009e45 	.word	0x08009e45
 8009dbc:	08009e45 	.word	0x08009e45
 8009dc0:	08009e45 	.word	0x08009e45
 8009dc4:	08009e45 	.word	0x08009e45
 8009dc8:	08009e45 	.word	0x08009e45
 8009dcc:	08009e45 	.word	0x08009e45
 8009dd0:	08009e2d 	.word	0x08009e2d
 8009dd4:	08009e45 	.word	0x08009e45
 8009dd8:	08009e45 	.word	0x08009e45
 8009ddc:	08009e45 	.word	0x08009e45
 8009de0:	08009e45 	.word	0x08009e45
 8009de4:	08009e45 	.word	0x08009e45
 8009de8:	08009e45 	.word	0x08009e45
 8009dec:	08009e45 	.word	0x08009e45
 8009df0:	08009e35 	.word	0x08009e35
 8009df4:	08009e45 	.word	0x08009e45
 8009df8:	08009e45 	.word	0x08009e45
 8009dfc:	08009e45 	.word	0x08009e45
 8009e00:	08009e45 	.word	0x08009e45
 8009e04:	08009e45 	.word	0x08009e45
 8009e08:	08009e45 	.word	0x08009e45
 8009e0c:	08009e45 	.word	0x08009e45
 8009e10:	08009e3d 	.word	0x08009e3d
 8009e14:	2301      	movs	r3, #1
 8009e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1a:	e326      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009e1c:	2304      	movs	r3, #4
 8009e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e22:	e322      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009e24:	2308      	movs	r3, #8
 8009e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e2a:	e31e      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009e2c:	2310      	movs	r3, #16
 8009e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e32:	e31a      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009e34:	2320      	movs	r3, #32
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3a:	e316      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009e3c:	2340      	movs	r3, #64	@ 0x40
 8009e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e42:	e312      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009e44:	2380      	movs	r3, #128	@ 0x80
 8009e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4a:	e30e      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a69      	ldr	r2, [pc, #420]	@ (8009ff8 <UART_SetConfig+0x33c>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d130      	bne.n	8009eb8 <UART_SetConfig+0x1fc>
 8009e56:	4b67      	ldr	r3, [pc, #412]	@ (8009ff4 <UART_SetConfig+0x338>)
 8009e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e5a:	f003 0307 	and.w	r3, r3, #7
 8009e5e:	2b05      	cmp	r3, #5
 8009e60:	d826      	bhi.n	8009eb0 <UART_SetConfig+0x1f4>
 8009e62:	a201      	add	r2, pc, #4	@ (adr r2, 8009e68 <UART_SetConfig+0x1ac>)
 8009e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e68:	08009e81 	.word	0x08009e81
 8009e6c:	08009e89 	.word	0x08009e89
 8009e70:	08009e91 	.word	0x08009e91
 8009e74:	08009e99 	.word	0x08009e99
 8009e78:	08009ea1 	.word	0x08009ea1
 8009e7c:	08009ea9 	.word	0x08009ea9
 8009e80:	2300      	movs	r3, #0
 8009e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e86:	e2f0      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009e88:	2304      	movs	r3, #4
 8009e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e8e:	e2ec      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009e90:	2308      	movs	r3, #8
 8009e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e96:	e2e8      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009e98:	2310      	movs	r3, #16
 8009e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e9e:	e2e4      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009ea0:	2320      	movs	r3, #32
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea6:	e2e0      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009ea8:	2340      	movs	r3, #64	@ 0x40
 8009eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eae:	e2dc      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009eb0:	2380      	movs	r3, #128	@ 0x80
 8009eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb6:	e2d8      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a4f      	ldr	r2, [pc, #316]	@ (8009ffc <UART_SetConfig+0x340>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d130      	bne.n	8009f24 <UART_SetConfig+0x268>
 8009ec2:	4b4c      	ldr	r3, [pc, #304]	@ (8009ff4 <UART_SetConfig+0x338>)
 8009ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ec6:	f003 0307 	and.w	r3, r3, #7
 8009eca:	2b05      	cmp	r3, #5
 8009ecc:	d826      	bhi.n	8009f1c <UART_SetConfig+0x260>
 8009ece:	a201      	add	r2, pc, #4	@ (adr r2, 8009ed4 <UART_SetConfig+0x218>)
 8009ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed4:	08009eed 	.word	0x08009eed
 8009ed8:	08009ef5 	.word	0x08009ef5
 8009edc:	08009efd 	.word	0x08009efd
 8009ee0:	08009f05 	.word	0x08009f05
 8009ee4:	08009f0d 	.word	0x08009f0d
 8009ee8:	08009f15 	.word	0x08009f15
 8009eec:	2300      	movs	r3, #0
 8009eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ef2:	e2ba      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009ef4:	2304      	movs	r3, #4
 8009ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009efa:	e2b6      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009efc:	2308      	movs	r3, #8
 8009efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f02:	e2b2      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009f04:	2310      	movs	r3, #16
 8009f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f0a:	e2ae      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009f0c:	2320      	movs	r3, #32
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f12:	e2aa      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009f14:	2340      	movs	r3, #64	@ 0x40
 8009f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f1a:	e2a6      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009f1c:	2380      	movs	r3, #128	@ 0x80
 8009f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f22:	e2a2      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a35      	ldr	r2, [pc, #212]	@ (800a000 <UART_SetConfig+0x344>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d130      	bne.n	8009f90 <UART_SetConfig+0x2d4>
 8009f2e:	4b31      	ldr	r3, [pc, #196]	@ (8009ff4 <UART_SetConfig+0x338>)
 8009f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f32:	f003 0307 	and.w	r3, r3, #7
 8009f36:	2b05      	cmp	r3, #5
 8009f38:	d826      	bhi.n	8009f88 <UART_SetConfig+0x2cc>
 8009f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f40 <UART_SetConfig+0x284>)
 8009f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f40:	08009f59 	.word	0x08009f59
 8009f44:	08009f61 	.word	0x08009f61
 8009f48:	08009f69 	.word	0x08009f69
 8009f4c:	08009f71 	.word	0x08009f71
 8009f50:	08009f79 	.word	0x08009f79
 8009f54:	08009f81 	.word	0x08009f81
 8009f58:	2300      	movs	r3, #0
 8009f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f5e:	e284      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009f60:	2304      	movs	r3, #4
 8009f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f66:	e280      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009f68:	2308      	movs	r3, #8
 8009f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f6e:	e27c      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009f70:	2310      	movs	r3, #16
 8009f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f76:	e278      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009f78:	2320      	movs	r3, #32
 8009f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f7e:	e274      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009f80:	2340      	movs	r3, #64	@ 0x40
 8009f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f86:	e270      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009f88:	2380      	movs	r3, #128	@ 0x80
 8009f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f8e:	e26c      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a1b      	ldr	r2, [pc, #108]	@ (800a004 <UART_SetConfig+0x348>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d142      	bne.n	800a020 <UART_SetConfig+0x364>
 8009f9a:	4b16      	ldr	r3, [pc, #88]	@ (8009ff4 <UART_SetConfig+0x338>)
 8009f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f9e:	f003 0307 	and.w	r3, r3, #7
 8009fa2:	2b05      	cmp	r3, #5
 8009fa4:	d838      	bhi.n	800a018 <UART_SetConfig+0x35c>
 8009fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8009fac <UART_SetConfig+0x2f0>)
 8009fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fac:	08009fc5 	.word	0x08009fc5
 8009fb0:	08009fcd 	.word	0x08009fcd
 8009fb4:	08009fd5 	.word	0x08009fd5
 8009fb8:	08009fdd 	.word	0x08009fdd
 8009fbc:	0800a009 	.word	0x0800a009
 8009fc0:	0800a011 	.word	0x0800a011
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fca:	e24e      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009fcc:	2304      	movs	r3, #4
 8009fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fd2:	e24a      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009fd4:	2308      	movs	r3, #8
 8009fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fda:	e246      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009fdc:	2310      	movs	r3, #16
 8009fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fe2:	e242      	b.n	800a46a <UART_SetConfig+0x7ae>
 8009fe4:	cfff69f3 	.word	0xcfff69f3
 8009fe8:	58000c00 	.word	0x58000c00
 8009fec:	11fff4ff 	.word	0x11fff4ff
 8009ff0:	40011000 	.word	0x40011000
 8009ff4:	58024400 	.word	0x58024400
 8009ff8:	40004400 	.word	0x40004400
 8009ffc:	40004800 	.word	0x40004800
 800a000:	40004c00 	.word	0x40004c00
 800a004:	40005000 	.word	0x40005000
 800a008:	2320      	movs	r3, #32
 800a00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a00e:	e22c      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a010:	2340      	movs	r3, #64	@ 0x40
 800a012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a016:	e228      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a018:	2380      	movs	r3, #128	@ 0x80
 800a01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a01e:	e224      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4ab1      	ldr	r2, [pc, #708]	@ (800a2ec <UART_SetConfig+0x630>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d176      	bne.n	800a118 <UART_SetConfig+0x45c>
 800a02a:	4bb1      	ldr	r3, [pc, #708]	@ (800a2f0 <UART_SetConfig+0x634>)
 800a02c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a02e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a032:	2b28      	cmp	r3, #40	@ 0x28
 800a034:	d86c      	bhi.n	800a110 <UART_SetConfig+0x454>
 800a036:	a201      	add	r2, pc, #4	@ (adr r2, 800a03c <UART_SetConfig+0x380>)
 800a038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a03c:	0800a0e1 	.word	0x0800a0e1
 800a040:	0800a111 	.word	0x0800a111
 800a044:	0800a111 	.word	0x0800a111
 800a048:	0800a111 	.word	0x0800a111
 800a04c:	0800a111 	.word	0x0800a111
 800a050:	0800a111 	.word	0x0800a111
 800a054:	0800a111 	.word	0x0800a111
 800a058:	0800a111 	.word	0x0800a111
 800a05c:	0800a0e9 	.word	0x0800a0e9
 800a060:	0800a111 	.word	0x0800a111
 800a064:	0800a111 	.word	0x0800a111
 800a068:	0800a111 	.word	0x0800a111
 800a06c:	0800a111 	.word	0x0800a111
 800a070:	0800a111 	.word	0x0800a111
 800a074:	0800a111 	.word	0x0800a111
 800a078:	0800a111 	.word	0x0800a111
 800a07c:	0800a0f1 	.word	0x0800a0f1
 800a080:	0800a111 	.word	0x0800a111
 800a084:	0800a111 	.word	0x0800a111
 800a088:	0800a111 	.word	0x0800a111
 800a08c:	0800a111 	.word	0x0800a111
 800a090:	0800a111 	.word	0x0800a111
 800a094:	0800a111 	.word	0x0800a111
 800a098:	0800a111 	.word	0x0800a111
 800a09c:	0800a0f9 	.word	0x0800a0f9
 800a0a0:	0800a111 	.word	0x0800a111
 800a0a4:	0800a111 	.word	0x0800a111
 800a0a8:	0800a111 	.word	0x0800a111
 800a0ac:	0800a111 	.word	0x0800a111
 800a0b0:	0800a111 	.word	0x0800a111
 800a0b4:	0800a111 	.word	0x0800a111
 800a0b8:	0800a111 	.word	0x0800a111
 800a0bc:	0800a101 	.word	0x0800a101
 800a0c0:	0800a111 	.word	0x0800a111
 800a0c4:	0800a111 	.word	0x0800a111
 800a0c8:	0800a111 	.word	0x0800a111
 800a0cc:	0800a111 	.word	0x0800a111
 800a0d0:	0800a111 	.word	0x0800a111
 800a0d4:	0800a111 	.word	0x0800a111
 800a0d8:	0800a111 	.word	0x0800a111
 800a0dc:	0800a109 	.word	0x0800a109
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0e6:	e1c0      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a0e8:	2304      	movs	r3, #4
 800a0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ee:	e1bc      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a0f0:	2308      	movs	r3, #8
 800a0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0f6:	e1b8      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a0f8:	2310      	movs	r3, #16
 800a0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0fe:	e1b4      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a100:	2320      	movs	r3, #32
 800a102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a106:	e1b0      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a108:	2340      	movs	r3, #64	@ 0x40
 800a10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a10e:	e1ac      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a110:	2380      	movs	r3, #128	@ 0x80
 800a112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a116:	e1a8      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a75      	ldr	r2, [pc, #468]	@ (800a2f4 <UART_SetConfig+0x638>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d130      	bne.n	800a184 <UART_SetConfig+0x4c8>
 800a122:	4b73      	ldr	r3, [pc, #460]	@ (800a2f0 <UART_SetConfig+0x634>)
 800a124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a126:	f003 0307 	and.w	r3, r3, #7
 800a12a:	2b05      	cmp	r3, #5
 800a12c:	d826      	bhi.n	800a17c <UART_SetConfig+0x4c0>
 800a12e:	a201      	add	r2, pc, #4	@ (adr r2, 800a134 <UART_SetConfig+0x478>)
 800a130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a134:	0800a14d 	.word	0x0800a14d
 800a138:	0800a155 	.word	0x0800a155
 800a13c:	0800a15d 	.word	0x0800a15d
 800a140:	0800a165 	.word	0x0800a165
 800a144:	0800a16d 	.word	0x0800a16d
 800a148:	0800a175 	.word	0x0800a175
 800a14c:	2300      	movs	r3, #0
 800a14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a152:	e18a      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a154:	2304      	movs	r3, #4
 800a156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a15a:	e186      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a15c:	2308      	movs	r3, #8
 800a15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a162:	e182      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a164:	2310      	movs	r3, #16
 800a166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a16a:	e17e      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a16c:	2320      	movs	r3, #32
 800a16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a172:	e17a      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a174:	2340      	movs	r3, #64	@ 0x40
 800a176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a17a:	e176      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a17c:	2380      	movs	r3, #128	@ 0x80
 800a17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a182:	e172      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a5b      	ldr	r2, [pc, #364]	@ (800a2f8 <UART_SetConfig+0x63c>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d130      	bne.n	800a1f0 <UART_SetConfig+0x534>
 800a18e:	4b58      	ldr	r3, [pc, #352]	@ (800a2f0 <UART_SetConfig+0x634>)
 800a190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a192:	f003 0307 	and.w	r3, r3, #7
 800a196:	2b05      	cmp	r3, #5
 800a198:	d826      	bhi.n	800a1e8 <UART_SetConfig+0x52c>
 800a19a:	a201      	add	r2, pc, #4	@ (adr r2, 800a1a0 <UART_SetConfig+0x4e4>)
 800a19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a0:	0800a1b9 	.word	0x0800a1b9
 800a1a4:	0800a1c1 	.word	0x0800a1c1
 800a1a8:	0800a1c9 	.word	0x0800a1c9
 800a1ac:	0800a1d1 	.word	0x0800a1d1
 800a1b0:	0800a1d9 	.word	0x0800a1d9
 800a1b4:	0800a1e1 	.word	0x0800a1e1
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1be:	e154      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a1c0:	2304      	movs	r3, #4
 800a1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1c6:	e150      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a1c8:	2308      	movs	r3, #8
 800a1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ce:	e14c      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a1d0:	2310      	movs	r3, #16
 800a1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1d6:	e148      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a1d8:	2320      	movs	r3, #32
 800a1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1de:	e144      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a1e0:	2340      	movs	r3, #64	@ 0x40
 800a1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e6:	e140      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a1e8:	2380      	movs	r3, #128	@ 0x80
 800a1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ee:	e13c      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a41      	ldr	r2, [pc, #260]	@ (800a2fc <UART_SetConfig+0x640>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	f040 8082 	bne.w	800a300 <UART_SetConfig+0x644>
 800a1fc:	4b3c      	ldr	r3, [pc, #240]	@ (800a2f0 <UART_SetConfig+0x634>)
 800a1fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a200:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a204:	2b28      	cmp	r3, #40	@ 0x28
 800a206:	d86d      	bhi.n	800a2e4 <UART_SetConfig+0x628>
 800a208:	a201      	add	r2, pc, #4	@ (adr r2, 800a210 <UART_SetConfig+0x554>)
 800a20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20e:	bf00      	nop
 800a210:	0800a2b5 	.word	0x0800a2b5
 800a214:	0800a2e5 	.word	0x0800a2e5
 800a218:	0800a2e5 	.word	0x0800a2e5
 800a21c:	0800a2e5 	.word	0x0800a2e5
 800a220:	0800a2e5 	.word	0x0800a2e5
 800a224:	0800a2e5 	.word	0x0800a2e5
 800a228:	0800a2e5 	.word	0x0800a2e5
 800a22c:	0800a2e5 	.word	0x0800a2e5
 800a230:	0800a2bd 	.word	0x0800a2bd
 800a234:	0800a2e5 	.word	0x0800a2e5
 800a238:	0800a2e5 	.word	0x0800a2e5
 800a23c:	0800a2e5 	.word	0x0800a2e5
 800a240:	0800a2e5 	.word	0x0800a2e5
 800a244:	0800a2e5 	.word	0x0800a2e5
 800a248:	0800a2e5 	.word	0x0800a2e5
 800a24c:	0800a2e5 	.word	0x0800a2e5
 800a250:	0800a2c5 	.word	0x0800a2c5
 800a254:	0800a2e5 	.word	0x0800a2e5
 800a258:	0800a2e5 	.word	0x0800a2e5
 800a25c:	0800a2e5 	.word	0x0800a2e5
 800a260:	0800a2e5 	.word	0x0800a2e5
 800a264:	0800a2e5 	.word	0x0800a2e5
 800a268:	0800a2e5 	.word	0x0800a2e5
 800a26c:	0800a2e5 	.word	0x0800a2e5
 800a270:	0800a2cd 	.word	0x0800a2cd
 800a274:	0800a2e5 	.word	0x0800a2e5
 800a278:	0800a2e5 	.word	0x0800a2e5
 800a27c:	0800a2e5 	.word	0x0800a2e5
 800a280:	0800a2e5 	.word	0x0800a2e5
 800a284:	0800a2e5 	.word	0x0800a2e5
 800a288:	0800a2e5 	.word	0x0800a2e5
 800a28c:	0800a2e5 	.word	0x0800a2e5
 800a290:	0800a2d5 	.word	0x0800a2d5
 800a294:	0800a2e5 	.word	0x0800a2e5
 800a298:	0800a2e5 	.word	0x0800a2e5
 800a29c:	0800a2e5 	.word	0x0800a2e5
 800a2a0:	0800a2e5 	.word	0x0800a2e5
 800a2a4:	0800a2e5 	.word	0x0800a2e5
 800a2a8:	0800a2e5 	.word	0x0800a2e5
 800a2ac:	0800a2e5 	.word	0x0800a2e5
 800a2b0:	0800a2dd 	.word	0x0800a2dd
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ba:	e0d6      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a2bc:	2304      	movs	r3, #4
 800a2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2c2:	e0d2      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a2c4:	2308      	movs	r3, #8
 800a2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ca:	e0ce      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a2cc:	2310      	movs	r3, #16
 800a2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2d2:	e0ca      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a2d4:	2320      	movs	r3, #32
 800a2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2da:	e0c6      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a2dc:	2340      	movs	r3, #64	@ 0x40
 800a2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2e2:	e0c2      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a2e4:	2380      	movs	r3, #128	@ 0x80
 800a2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ea:	e0be      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a2ec:	40011400 	.word	0x40011400
 800a2f0:	58024400 	.word	0x58024400
 800a2f4:	40007800 	.word	0x40007800
 800a2f8:	40007c00 	.word	0x40007c00
 800a2fc:	40011800 	.word	0x40011800
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4aad      	ldr	r2, [pc, #692]	@ (800a5bc <UART_SetConfig+0x900>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d176      	bne.n	800a3f8 <UART_SetConfig+0x73c>
 800a30a:	4bad      	ldr	r3, [pc, #692]	@ (800a5c0 <UART_SetConfig+0x904>)
 800a30c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a30e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a312:	2b28      	cmp	r3, #40	@ 0x28
 800a314:	d86c      	bhi.n	800a3f0 <UART_SetConfig+0x734>
 800a316:	a201      	add	r2, pc, #4	@ (adr r2, 800a31c <UART_SetConfig+0x660>)
 800a318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31c:	0800a3c1 	.word	0x0800a3c1
 800a320:	0800a3f1 	.word	0x0800a3f1
 800a324:	0800a3f1 	.word	0x0800a3f1
 800a328:	0800a3f1 	.word	0x0800a3f1
 800a32c:	0800a3f1 	.word	0x0800a3f1
 800a330:	0800a3f1 	.word	0x0800a3f1
 800a334:	0800a3f1 	.word	0x0800a3f1
 800a338:	0800a3f1 	.word	0x0800a3f1
 800a33c:	0800a3c9 	.word	0x0800a3c9
 800a340:	0800a3f1 	.word	0x0800a3f1
 800a344:	0800a3f1 	.word	0x0800a3f1
 800a348:	0800a3f1 	.word	0x0800a3f1
 800a34c:	0800a3f1 	.word	0x0800a3f1
 800a350:	0800a3f1 	.word	0x0800a3f1
 800a354:	0800a3f1 	.word	0x0800a3f1
 800a358:	0800a3f1 	.word	0x0800a3f1
 800a35c:	0800a3d1 	.word	0x0800a3d1
 800a360:	0800a3f1 	.word	0x0800a3f1
 800a364:	0800a3f1 	.word	0x0800a3f1
 800a368:	0800a3f1 	.word	0x0800a3f1
 800a36c:	0800a3f1 	.word	0x0800a3f1
 800a370:	0800a3f1 	.word	0x0800a3f1
 800a374:	0800a3f1 	.word	0x0800a3f1
 800a378:	0800a3f1 	.word	0x0800a3f1
 800a37c:	0800a3d9 	.word	0x0800a3d9
 800a380:	0800a3f1 	.word	0x0800a3f1
 800a384:	0800a3f1 	.word	0x0800a3f1
 800a388:	0800a3f1 	.word	0x0800a3f1
 800a38c:	0800a3f1 	.word	0x0800a3f1
 800a390:	0800a3f1 	.word	0x0800a3f1
 800a394:	0800a3f1 	.word	0x0800a3f1
 800a398:	0800a3f1 	.word	0x0800a3f1
 800a39c:	0800a3e1 	.word	0x0800a3e1
 800a3a0:	0800a3f1 	.word	0x0800a3f1
 800a3a4:	0800a3f1 	.word	0x0800a3f1
 800a3a8:	0800a3f1 	.word	0x0800a3f1
 800a3ac:	0800a3f1 	.word	0x0800a3f1
 800a3b0:	0800a3f1 	.word	0x0800a3f1
 800a3b4:	0800a3f1 	.word	0x0800a3f1
 800a3b8:	0800a3f1 	.word	0x0800a3f1
 800a3bc:	0800a3e9 	.word	0x0800a3e9
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c6:	e050      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a3c8:	2304      	movs	r3, #4
 800a3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ce:	e04c      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a3d0:	2308      	movs	r3, #8
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d6:	e048      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a3d8:	2310      	movs	r3, #16
 800a3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3de:	e044      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a3e0:	2320      	movs	r3, #32
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e6:	e040      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a3e8:	2340      	movs	r3, #64	@ 0x40
 800a3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ee:	e03c      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a3f0:	2380      	movs	r3, #128	@ 0x80
 800a3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3f6:	e038      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a71      	ldr	r2, [pc, #452]	@ (800a5c4 <UART_SetConfig+0x908>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d130      	bne.n	800a464 <UART_SetConfig+0x7a8>
 800a402:	4b6f      	ldr	r3, [pc, #444]	@ (800a5c0 <UART_SetConfig+0x904>)
 800a404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a406:	f003 0307 	and.w	r3, r3, #7
 800a40a:	2b05      	cmp	r3, #5
 800a40c:	d826      	bhi.n	800a45c <UART_SetConfig+0x7a0>
 800a40e:	a201      	add	r2, pc, #4	@ (adr r2, 800a414 <UART_SetConfig+0x758>)
 800a410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a414:	0800a42d 	.word	0x0800a42d
 800a418:	0800a435 	.word	0x0800a435
 800a41c:	0800a43d 	.word	0x0800a43d
 800a420:	0800a445 	.word	0x0800a445
 800a424:	0800a44d 	.word	0x0800a44d
 800a428:	0800a455 	.word	0x0800a455
 800a42c:	2302      	movs	r3, #2
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a432:	e01a      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a434:	2304      	movs	r3, #4
 800a436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43a:	e016      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a43c:	2308      	movs	r3, #8
 800a43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a442:	e012      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a444:	2310      	movs	r3, #16
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a44a:	e00e      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a44c:	2320      	movs	r3, #32
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a452:	e00a      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a454:	2340      	movs	r3, #64	@ 0x40
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a45a:	e006      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a45c:	2380      	movs	r3, #128	@ 0x80
 800a45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a462:	e002      	b.n	800a46a <UART_SetConfig+0x7ae>
 800a464:	2380      	movs	r3, #128	@ 0x80
 800a466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a55      	ldr	r2, [pc, #340]	@ (800a5c4 <UART_SetConfig+0x908>)
 800a470:	4293      	cmp	r3, r2
 800a472:	f040 80f8 	bne.w	800a666 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a476:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a47a:	2b20      	cmp	r3, #32
 800a47c:	dc46      	bgt.n	800a50c <UART_SetConfig+0x850>
 800a47e:	2b02      	cmp	r3, #2
 800a480:	db75      	blt.n	800a56e <UART_SetConfig+0x8b2>
 800a482:	3b02      	subs	r3, #2
 800a484:	2b1e      	cmp	r3, #30
 800a486:	d872      	bhi.n	800a56e <UART_SetConfig+0x8b2>
 800a488:	a201      	add	r2, pc, #4	@ (adr r2, 800a490 <UART_SetConfig+0x7d4>)
 800a48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48e:	bf00      	nop
 800a490:	0800a513 	.word	0x0800a513
 800a494:	0800a56f 	.word	0x0800a56f
 800a498:	0800a51b 	.word	0x0800a51b
 800a49c:	0800a56f 	.word	0x0800a56f
 800a4a0:	0800a56f 	.word	0x0800a56f
 800a4a4:	0800a56f 	.word	0x0800a56f
 800a4a8:	0800a52b 	.word	0x0800a52b
 800a4ac:	0800a56f 	.word	0x0800a56f
 800a4b0:	0800a56f 	.word	0x0800a56f
 800a4b4:	0800a56f 	.word	0x0800a56f
 800a4b8:	0800a56f 	.word	0x0800a56f
 800a4bc:	0800a56f 	.word	0x0800a56f
 800a4c0:	0800a56f 	.word	0x0800a56f
 800a4c4:	0800a56f 	.word	0x0800a56f
 800a4c8:	0800a53b 	.word	0x0800a53b
 800a4cc:	0800a56f 	.word	0x0800a56f
 800a4d0:	0800a56f 	.word	0x0800a56f
 800a4d4:	0800a56f 	.word	0x0800a56f
 800a4d8:	0800a56f 	.word	0x0800a56f
 800a4dc:	0800a56f 	.word	0x0800a56f
 800a4e0:	0800a56f 	.word	0x0800a56f
 800a4e4:	0800a56f 	.word	0x0800a56f
 800a4e8:	0800a56f 	.word	0x0800a56f
 800a4ec:	0800a56f 	.word	0x0800a56f
 800a4f0:	0800a56f 	.word	0x0800a56f
 800a4f4:	0800a56f 	.word	0x0800a56f
 800a4f8:	0800a56f 	.word	0x0800a56f
 800a4fc:	0800a56f 	.word	0x0800a56f
 800a500:	0800a56f 	.word	0x0800a56f
 800a504:	0800a56f 	.word	0x0800a56f
 800a508:	0800a561 	.word	0x0800a561
 800a50c:	2b40      	cmp	r3, #64	@ 0x40
 800a50e:	d02a      	beq.n	800a566 <UART_SetConfig+0x8aa>
 800a510:	e02d      	b.n	800a56e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a512:	f7fe fd6b 	bl	8008fec <HAL_RCCEx_GetD3PCLK1Freq>
 800a516:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a518:	e02f      	b.n	800a57a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a51a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fe fd7a 	bl	8009018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a528:	e027      	b.n	800a57a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a52a:	f107 0318 	add.w	r3, r7, #24
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fe fec6 	bl	80092c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a538:	e01f      	b.n	800a57a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a53a:	4b21      	ldr	r3, [pc, #132]	@ (800a5c0 <UART_SetConfig+0x904>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f003 0320 	and.w	r3, r3, #32
 800a542:	2b00      	cmp	r3, #0
 800a544:	d009      	beq.n	800a55a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a546:	4b1e      	ldr	r3, [pc, #120]	@ (800a5c0 <UART_SetConfig+0x904>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	08db      	lsrs	r3, r3, #3
 800a54c:	f003 0303 	and.w	r3, r3, #3
 800a550:	4a1d      	ldr	r2, [pc, #116]	@ (800a5c8 <UART_SetConfig+0x90c>)
 800a552:	fa22 f303 	lsr.w	r3, r2, r3
 800a556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a558:	e00f      	b.n	800a57a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a55a:	4b1b      	ldr	r3, [pc, #108]	@ (800a5c8 <UART_SetConfig+0x90c>)
 800a55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a55e:	e00c      	b.n	800a57a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a560:	4b1a      	ldr	r3, [pc, #104]	@ (800a5cc <UART_SetConfig+0x910>)
 800a562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a564:	e009      	b.n	800a57a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a56a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a56c:	e005      	b.n	800a57a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a56e:	2300      	movs	r3, #0
 800a570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a578:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a57a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f000 81ee 	beq.w	800a95e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a586:	4a12      	ldr	r2, [pc, #72]	@ (800a5d0 <UART_SetConfig+0x914>)
 800a588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a58c:	461a      	mov	r2, r3
 800a58e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a590:	fbb3 f3f2 	udiv	r3, r3, r2
 800a594:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	685a      	ldr	r2, [r3, #4]
 800a59a:	4613      	mov	r3, r2
 800a59c:	005b      	lsls	r3, r3, #1
 800a59e:	4413      	add	r3, r2
 800a5a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d305      	bcc.n	800a5b2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d910      	bls.n	800a5d4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a5b8:	e1d1      	b.n	800a95e <UART_SetConfig+0xca2>
 800a5ba:	bf00      	nop
 800a5bc:	40011c00 	.word	0x40011c00
 800a5c0:	58024400 	.word	0x58024400
 800a5c4:	58000c00 	.word	0x58000c00
 800a5c8:	03d09000 	.word	0x03d09000
 800a5cc:	003d0900 	.word	0x003d0900
 800a5d0:	0800bcb0 	.word	0x0800bcb0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	60bb      	str	r3, [r7, #8]
 800a5da:	60fa      	str	r2, [r7, #12]
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e0:	4ac0      	ldr	r2, [pc, #768]	@ (800a8e4 <UART_SetConfig+0xc28>)
 800a5e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	603b      	str	r3, [r7, #0]
 800a5ec:	607a      	str	r2, [r7, #4]
 800a5ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5f6:	f7f5 fee3 	bl	80003c0 <__aeabi_uldivmod>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	4610      	mov	r0, r2
 800a600:	4619      	mov	r1, r3
 800a602:	f04f 0200 	mov.w	r2, #0
 800a606:	f04f 0300 	mov.w	r3, #0
 800a60a:	020b      	lsls	r3, r1, #8
 800a60c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a610:	0202      	lsls	r2, r0, #8
 800a612:	6979      	ldr	r1, [r7, #20]
 800a614:	6849      	ldr	r1, [r1, #4]
 800a616:	0849      	lsrs	r1, r1, #1
 800a618:	2000      	movs	r0, #0
 800a61a:	460c      	mov	r4, r1
 800a61c:	4605      	mov	r5, r0
 800a61e:	eb12 0804 	adds.w	r8, r2, r4
 800a622:	eb43 0905 	adc.w	r9, r3, r5
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	469a      	mov	sl, r3
 800a62e:	4693      	mov	fp, r2
 800a630:	4652      	mov	r2, sl
 800a632:	465b      	mov	r3, fp
 800a634:	4640      	mov	r0, r8
 800a636:	4649      	mov	r1, r9
 800a638:	f7f5 fec2 	bl	80003c0 <__aeabi_uldivmod>
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	4613      	mov	r3, r2
 800a642:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a646:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a64a:	d308      	bcc.n	800a65e <UART_SetConfig+0x9a2>
 800a64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a64e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a652:	d204      	bcs.n	800a65e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a65a:	60da      	str	r2, [r3, #12]
 800a65c:	e17f      	b.n	800a95e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a664:	e17b      	b.n	800a95e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	69db      	ldr	r3, [r3, #28]
 800a66a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a66e:	f040 80bd 	bne.w	800a7ec <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a672:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a676:	2b20      	cmp	r3, #32
 800a678:	dc48      	bgt.n	800a70c <UART_SetConfig+0xa50>
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	db7b      	blt.n	800a776 <UART_SetConfig+0xaba>
 800a67e:	2b20      	cmp	r3, #32
 800a680:	d879      	bhi.n	800a776 <UART_SetConfig+0xaba>
 800a682:	a201      	add	r2, pc, #4	@ (adr r2, 800a688 <UART_SetConfig+0x9cc>)
 800a684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a688:	0800a713 	.word	0x0800a713
 800a68c:	0800a71b 	.word	0x0800a71b
 800a690:	0800a777 	.word	0x0800a777
 800a694:	0800a777 	.word	0x0800a777
 800a698:	0800a723 	.word	0x0800a723
 800a69c:	0800a777 	.word	0x0800a777
 800a6a0:	0800a777 	.word	0x0800a777
 800a6a4:	0800a777 	.word	0x0800a777
 800a6a8:	0800a733 	.word	0x0800a733
 800a6ac:	0800a777 	.word	0x0800a777
 800a6b0:	0800a777 	.word	0x0800a777
 800a6b4:	0800a777 	.word	0x0800a777
 800a6b8:	0800a777 	.word	0x0800a777
 800a6bc:	0800a777 	.word	0x0800a777
 800a6c0:	0800a777 	.word	0x0800a777
 800a6c4:	0800a777 	.word	0x0800a777
 800a6c8:	0800a743 	.word	0x0800a743
 800a6cc:	0800a777 	.word	0x0800a777
 800a6d0:	0800a777 	.word	0x0800a777
 800a6d4:	0800a777 	.word	0x0800a777
 800a6d8:	0800a777 	.word	0x0800a777
 800a6dc:	0800a777 	.word	0x0800a777
 800a6e0:	0800a777 	.word	0x0800a777
 800a6e4:	0800a777 	.word	0x0800a777
 800a6e8:	0800a777 	.word	0x0800a777
 800a6ec:	0800a777 	.word	0x0800a777
 800a6f0:	0800a777 	.word	0x0800a777
 800a6f4:	0800a777 	.word	0x0800a777
 800a6f8:	0800a777 	.word	0x0800a777
 800a6fc:	0800a777 	.word	0x0800a777
 800a700:	0800a777 	.word	0x0800a777
 800a704:	0800a777 	.word	0x0800a777
 800a708:	0800a769 	.word	0x0800a769
 800a70c:	2b40      	cmp	r3, #64	@ 0x40
 800a70e:	d02e      	beq.n	800a76e <UART_SetConfig+0xab2>
 800a710:	e031      	b.n	800a776 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a712:	f7fc fdcd 	bl	80072b0 <HAL_RCC_GetPCLK1Freq>
 800a716:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a718:	e033      	b.n	800a782 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a71a:	f7fc fddf 	bl	80072dc <HAL_RCC_GetPCLK2Freq>
 800a71e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a720:	e02f      	b.n	800a782 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a726:	4618      	mov	r0, r3
 800a728:	f7fe fc76 	bl	8009018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a730:	e027      	b.n	800a782 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a732:	f107 0318 	add.w	r3, r7, #24
 800a736:	4618      	mov	r0, r3
 800a738:	f7fe fdc2 	bl	80092c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a740:	e01f      	b.n	800a782 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a742:	4b69      	ldr	r3, [pc, #420]	@ (800a8e8 <UART_SetConfig+0xc2c>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f003 0320 	and.w	r3, r3, #32
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d009      	beq.n	800a762 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a74e:	4b66      	ldr	r3, [pc, #408]	@ (800a8e8 <UART_SetConfig+0xc2c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	08db      	lsrs	r3, r3, #3
 800a754:	f003 0303 	and.w	r3, r3, #3
 800a758:	4a64      	ldr	r2, [pc, #400]	@ (800a8ec <UART_SetConfig+0xc30>)
 800a75a:	fa22 f303 	lsr.w	r3, r2, r3
 800a75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a760:	e00f      	b.n	800a782 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a762:	4b62      	ldr	r3, [pc, #392]	@ (800a8ec <UART_SetConfig+0xc30>)
 800a764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a766:	e00c      	b.n	800a782 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a768:	4b61      	ldr	r3, [pc, #388]	@ (800a8f0 <UART_SetConfig+0xc34>)
 800a76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a76c:	e009      	b.n	800a782 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a76e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a774:	e005      	b.n	800a782 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a776:	2300      	movs	r3, #0
 800a778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a780:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a784:	2b00      	cmp	r3, #0
 800a786:	f000 80ea 	beq.w	800a95e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a78e:	4a55      	ldr	r2, [pc, #340]	@ (800a8e4 <UART_SetConfig+0xc28>)
 800a790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a794:	461a      	mov	r2, r3
 800a796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a798:	fbb3 f3f2 	udiv	r3, r3, r2
 800a79c:	005a      	lsls	r2, r3, #1
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	085b      	lsrs	r3, r3, #1
 800a7a4:	441a      	add	r2, r3
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b2:	2b0f      	cmp	r3, #15
 800a7b4:	d916      	bls.n	800a7e4 <UART_SetConfig+0xb28>
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7bc:	d212      	bcs.n	800a7e4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	f023 030f 	bic.w	r3, r3, #15
 800a7c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ca:	085b      	lsrs	r3, r3, #1
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	f003 0307 	and.w	r3, r3, #7
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a7e0:	60da      	str	r2, [r3, #12]
 800a7e2:	e0bc      	b.n	800a95e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a7ea:	e0b8      	b.n	800a95e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a7f0:	2b20      	cmp	r3, #32
 800a7f2:	dc4b      	bgt.n	800a88c <UART_SetConfig+0xbd0>
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f2c0 8087 	blt.w	800a908 <UART_SetConfig+0xc4c>
 800a7fa:	2b20      	cmp	r3, #32
 800a7fc:	f200 8084 	bhi.w	800a908 <UART_SetConfig+0xc4c>
 800a800:	a201      	add	r2, pc, #4	@ (adr r2, 800a808 <UART_SetConfig+0xb4c>)
 800a802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a806:	bf00      	nop
 800a808:	0800a893 	.word	0x0800a893
 800a80c:	0800a89b 	.word	0x0800a89b
 800a810:	0800a909 	.word	0x0800a909
 800a814:	0800a909 	.word	0x0800a909
 800a818:	0800a8a3 	.word	0x0800a8a3
 800a81c:	0800a909 	.word	0x0800a909
 800a820:	0800a909 	.word	0x0800a909
 800a824:	0800a909 	.word	0x0800a909
 800a828:	0800a8b3 	.word	0x0800a8b3
 800a82c:	0800a909 	.word	0x0800a909
 800a830:	0800a909 	.word	0x0800a909
 800a834:	0800a909 	.word	0x0800a909
 800a838:	0800a909 	.word	0x0800a909
 800a83c:	0800a909 	.word	0x0800a909
 800a840:	0800a909 	.word	0x0800a909
 800a844:	0800a909 	.word	0x0800a909
 800a848:	0800a8c3 	.word	0x0800a8c3
 800a84c:	0800a909 	.word	0x0800a909
 800a850:	0800a909 	.word	0x0800a909
 800a854:	0800a909 	.word	0x0800a909
 800a858:	0800a909 	.word	0x0800a909
 800a85c:	0800a909 	.word	0x0800a909
 800a860:	0800a909 	.word	0x0800a909
 800a864:	0800a909 	.word	0x0800a909
 800a868:	0800a909 	.word	0x0800a909
 800a86c:	0800a909 	.word	0x0800a909
 800a870:	0800a909 	.word	0x0800a909
 800a874:	0800a909 	.word	0x0800a909
 800a878:	0800a909 	.word	0x0800a909
 800a87c:	0800a909 	.word	0x0800a909
 800a880:	0800a909 	.word	0x0800a909
 800a884:	0800a909 	.word	0x0800a909
 800a888:	0800a8fb 	.word	0x0800a8fb
 800a88c:	2b40      	cmp	r3, #64	@ 0x40
 800a88e:	d037      	beq.n	800a900 <UART_SetConfig+0xc44>
 800a890:	e03a      	b.n	800a908 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a892:	f7fc fd0d 	bl	80072b0 <HAL_RCC_GetPCLK1Freq>
 800a896:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a898:	e03c      	b.n	800a914 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a89a:	f7fc fd1f 	bl	80072dc <HAL_RCC_GetPCLK2Freq>
 800a89e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8a0:	e038      	b.n	800a914 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7fe fbb6 	bl	8009018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8b0:	e030      	b.n	800a914 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8b2:	f107 0318 	add.w	r3, r7, #24
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fe fd02 	bl	80092c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c0:	e028      	b.n	800a914 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8c2:	4b09      	ldr	r3, [pc, #36]	@ (800a8e8 <UART_SetConfig+0xc2c>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 0320 	and.w	r3, r3, #32
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d012      	beq.n	800a8f4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8ce:	4b06      	ldr	r3, [pc, #24]	@ (800a8e8 <UART_SetConfig+0xc2c>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	08db      	lsrs	r3, r3, #3
 800a8d4:	f003 0303 	and.w	r3, r3, #3
 800a8d8:	4a04      	ldr	r2, [pc, #16]	@ (800a8ec <UART_SetConfig+0xc30>)
 800a8da:	fa22 f303 	lsr.w	r3, r2, r3
 800a8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8e0:	e018      	b.n	800a914 <UART_SetConfig+0xc58>
 800a8e2:	bf00      	nop
 800a8e4:	0800bcb0 	.word	0x0800bcb0
 800a8e8:	58024400 	.word	0x58024400
 800a8ec:	03d09000 	.word	0x03d09000
 800a8f0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a8f4:	4b24      	ldr	r3, [pc, #144]	@ (800a988 <UART_SetConfig+0xccc>)
 800a8f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8f8:	e00c      	b.n	800a914 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8fa:	4b24      	ldr	r3, [pc, #144]	@ (800a98c <UART_SetConfig+0xcd0>)
 800a8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8fe:	e009      	b.n	800a914 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a900:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a906:	e005      	b.n	800a914 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a908:	2300      	movs	r3, #0
 800a90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a912:	bf00      	nop
    }

    if (pclk != 0U)
 800a914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a916:	2b00      	cmp	r3, #0
 800a918:	d021      	beq.n	800a95e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a91e:	4a1c      	ldr	r2, [pc, #112]	@ (800a990 <UART_SetConfig+0xcd4>)
 800a920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a924:	461a      	mov	r2, r3
 800a926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a928:	fbb3 f2f2 	udiv	r2, r3, r2
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	085b      	lsrs	r3, r3, #1
 800a932:	441a      	add	r2, r3
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	fbb2 f3f3 	udiv	r3, r2, r3
 800a93c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a940:	2b0f      	cmp	r3, #15
 800a942:	d909      	bls.n	800a958 <UART_SetConfig+0xc9c>
 800a944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a94a:	d205      	bcs.n	800a958 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a94e:	b29a      	uxth	r2, r3
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	60da      	str	r2, [r3, #12]
 800a956:	e002      	b.n	800a95e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2201      	movs	r2, #1
 800a962:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	2201      	movs	r2, #1
 800a96a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2200      	movs	r2, #0
 800a972:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	2200      	movs	r2, #0
 800a978:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a97a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3748      	adds	r7, #72	@ 0x48
 800a982:	46bd      	mov	sp, r7
 800a984:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a988:	03d09000 	.word	0x03d09000
 800a98c:	003d0900 	.word	0x003d0900
 800a990:	0800bcb0 	.word	0x0800bcb0

0800a994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a0:	f003 0308 	and.w	r3, r3, #8
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00a      	beq.n	800a9be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	430a      	orrs	r2, r1
 800a9bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00a      	beq.n	800a9e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	430a      	orrs	r2, r1
 800a9de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9e4:	f003 0302 	and.w	r3, r3, #2
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00a      	beq.n	800aa02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	430a      	orrs	r2, r1
 800aa00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa06:	f003 0304 	and.w	r3, r3, #4
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00a      	beq.n	800aa24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	430a      	orrs	r2, r1
 800aa22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa28:	f003 0310 	and.w	r3, r3, #16
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d00a      	beq.n	800aa46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	430a      	orrs	r2, r1
 800aa44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa4a:	f003 0320 	and.w	r3, r3, #32
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00a      	beq.n	800aa68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	430a      	orrs	r2, r1
 800aa66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d01a      	beq.n	800aaaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	430a      	orrs	r2, r1
 800aa88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa92:	d10a      	bne.n	800aaaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	430a      	orrs	r2, r1
 800aaa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00a      	beq.n	800aacc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	430a      	orrs	r2, r1
 800aaca:	605a      	str	r2, [r3, #4]
  }
}
 800aacc:	bf00      	nop
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b098      	sub	sp, #96	@ 0x60
 800aadc:	af02      	add	r7, sp, #8
 800aade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aae8:	f7f8 f80c 	bl	8002b04 <HAL_GetTick>
 800aaec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 0308 	and.w	r3, r3, #8
 800aaf8:	2b08      	cmp	r3, #8
 800aafa:	d12f      	bne.n	800ab5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aafc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab04:	2200      	movs	r2, #0
 800ab06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f88e 	bl	800ac2c <UART_WaitOnFlagUntilTimeout>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d022      	beq.n	800ab5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab1e:	e853 3f00 	ldrex	r3, [r3]
 800ab22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab2a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	461a      	mov	r2, r3
 800ab32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab34:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab3c:	e841 2300 	strex	r3, r2, [r1]
 800ab40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1e6      	bne.n	800ab16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2220      	movs	r2, #32
 800ab4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e063      	b.n	800ac24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f003 0304 	and.w	r3, r3, #4
 800ab66:	2b04      	cmp	r3, #4
 800ab68:	d149      	bne.n	800abfe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab72:	2200      	movs	r2, #0
 800ab74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f857 	bl	800ac2c <UART_WaitOnFlagUntilTimeout>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d03c      	beq.n	800abfe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8c:	e853 3f00 	ldrex	r3, [r3]
 800ab90:	623b      	str	r3, [r7, #32]
   return(result);
 800ab92:	6a3b      	ldr	r3, [r7, #32]
 800ab94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aba2:	633b      	str	r3, [r7, #48]	@ 0x30
 800aba4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aba8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abaa:	e841 2300 	strex	r3, r2, [r1]
 800abae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1e6      	bne.n	800ab84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3308      	adds	r3, #8
 800abbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	e853 3f00 	ldrex	r3, [r3]
 800abc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f023 0301 	bic.w	r3, r3, #1
 800abcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	3308      	adds	r3, #8
 800abd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abd6:	61fa      	str	r2, [r7, #28]
 800abd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abda:	69b9      	ldr	r1, [r7, #24]
 800abdc:	69fa      	ldr	r2, [r7, #28]
 800abde:	e841 2300 	strex	r3, r2, [r1]
 800abe2:	617b      	str	r3, [r7, #20]
   return(result);
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1e5      	bne.n	800abb6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2220      	movs	r2, #32
 800abee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abfa:	2303      	movs	r3, #3
 800abfc:	e012      	b.n	800ac24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2220      	movs	r2, #32
 800ac02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2220      	movs	r2, #32
 800ac0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac22:	2300      	movs	r3, #0
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3758      	adds	r7, #88	@ 0x58
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	603b      	str	r3, [r7, #0]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac3c:	e04f      	b.n	800acde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac44:	d04b      	beq.n	800acde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac46:	f7f7 ff5d 	bl	8002b04 <HAL_GetTick>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	1ad3      	subs	r3, r2, r3
 800ac50:	69ba      	ldr	r2, [r7, #24]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d302      	bcc.n	800ac5c <UART_WaitOnFlagUntilTimeout+0x30>
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d101      	bne.n	800ac60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	e04e      	b.n	800acfe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 0304 	and.w	r3, r3, #4
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d037      	beq.n	800acde <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	2b80      	cmp	r3, #128	@ 0x80
 800ac72:	d034      	beq.n	800acde <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	2b40      	cmp	r3, #64	@ 0x40
 800ac78:	d031      	beq.n	800acde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	69db      	ldr	r3, [r3, #28]
 800ac80:	f003 0308 	and.w	r3, r3, #8
 800ac84:	2b08      	cmp	r3, #8
 800ac86:	d110      	bne.n	800acaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2208      	movs	r2, #8
 800ac8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f000 f839 	bl	800ad08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2208      	movs	r2, #8
 800ac9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e029      	b.n	800acfe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	69db      	ldr	r3, [r3, #28]
 800acb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800acb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acb8:	d111      	bne.n	800acde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800acc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f000 f81f 	bl	800ad08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2220      	movs	r2, #32
 800acce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800acda:	2303      	movs	r3, #3
 800acdc:	e00f      	b.n	800acfe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	69da      	ldr	r2, [r3, #28]
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	4013      	ands	r3, r2
 800ace8:	68ba      	ldr	r2, [r7, #8]
 800acea:	429a      	cmp	r2, r3
 800acec:	bf0c      	ite	eq
 800acee:	2301      	moveq	r3, #1
 800acf0:	2300      	movne	r3, #0
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	461a      	mov	r2, r3
 800acf6:	79fb      	ldrb	r3, [r7, #7]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d0a0      	beq.n	800ac3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
	...

0800ad08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b095      	sub	sp, #84	@ 0x54
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad18:	e853 3f00 	ldrex	r3, [r3]
 800ad1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad2e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad36:	e841 2300 	strex	r3, r2, [r1]
 800ad3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1e6      	bne.n	800ad10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	3308      	adds	r3, #8
 800ad48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	e853 3f00 	ldrex	r3, [r3]
 800ad50:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad52:	69fa      	ldr	r2, [r7, #28]
 800ad54:	4b1e      	ldr	r3, [pc, #120]	@ (800add0 <UART_EndRxTransfer+0xc8>)
 800ad56:	4013      	ands	r3, r2
 800ad58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	3308      	adds	r3, #8
 800ad60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad6a:	e841 2300 	strex	r3, r2, [r1]
 800ad6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1e5      	bne.n	800ad42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d118      	bne.n	800adb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	e853 3f00 	ldrex	r3, [r3]
 800ad8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	f023 0310 	bic.w	r3, r3, #16
 800ad92:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	461a      	mov	r2, r3
 800ad9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad9c:	61bb      	str	r3, [r7, #24]
 800ad9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada0:	6979      	ldr	r1, [r7, #20]
 800ada2:	69ba      	ldr	r2, [r7, #24]
 800ada4:	e841 2300 	strex	r3, r2, [r1]
 800ada8:	613b      	str	r3, [r7, #16]
   return(result);
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1e6      	bne.n	800ad7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2220      	movs	r2, #32
 800adb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800adc4:	bf00      	nop
 800adc6:	3754      	adds	r7, #84	@ 0x54
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr
 800add0:	effffffe 	.word	0xeffffffe

0800add4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d101      	bne.n	800adea <HAL_UARTEx_DisableFifoMode+0x16>
 800ade6:	2302      	movs	r3, #2
 800ade8:	e027      	b.n	800ae3a <HAL_UARTEx_DisableFifoMode+0x66>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2224      	movs	r2, #36	@ 0x24
 800adf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f022 0201 	bic.w	r2, r2, #1
 800ae10:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ae18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2220      	movs	r2, #32
 800ae2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3714      	adds	r7, #20
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b084      	sub	sp, #16
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
 800ae4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d101      	bne.n	800ae5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	e02d      	b.n	800aeba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2201      	movs	r2, #1
 800ae62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2224      	movs	r2, #36	@ 0x24
 800ae6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f022 0201 	bic.w	r2, r2, #1
 800ae84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	683a      	ldr	r2, [r7, #0]
 800ae96:	430a      	orrs	r2, r1
 800ae98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 f850 	bl	800af40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68fa      	ldr	r2, [r7, #12]
 800aea6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2220      	movs	r2, #32
 800aeac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b084      	sub	sp, #16
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
 800aeca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d101      	bne.n	800aeda <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aed6:	2302      	movs	r3, #2
 800aed8:	e02d      	b.n	800af36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2201      	movs	r2, #1
 800aede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2224      	movs	r2, #36	@ 0x24
 800aee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f022 0201 	bic.w	r2, r2, #1
 800af00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	683a      	ldr	r2, [r7, #0]
 800af12:	430a      	orrs	r2, r1
 800af14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 f812 	bl	800af40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2220      	movs	r2, #32
 800af28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
	...

0800af40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d108      	bne.n	800af62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af60:	e031      	b.n	800afc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af62:	2310      	movs	r3, #16
 800af64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af66:	2310      	movs	r3, #16
 800af68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	0e5b      	lsrs	r3, r3, #25
 800af72:	b2db      	uxtb	r3, r3
 800af74:	f003 0307 	and.w	r3, r3, #7
 800af78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	0f5b      	lsrs	r3, r3, #29
 800af82:	b2db      	uxtb	r3, r3
 800af84:	f003 0307 	and.w	r3, r3, #7
 800af88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af8a:	7bbb      	ldrb	r3, [r7, #14]
 800af8c:	7b3a      	ldrb	r2, [r7, #12]
 800af8e:	4911      	ldr	r1, [pc, #68]	@ (800afd4 <UARTEx_SetNbDataToProcess+0x94>)
 800af90:	5c8a      	ldrb	r2, [r1, r2]
 800af92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af96:	7b3a      	ldrb	r2, [r7, #12]
 800af98:	490f      	ldr	r1, [pc, #60]	@ (800afd8 <UARTEx_SetNbDataToProcess+0x98>)
 800af9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800afa0:	b29a      	uxth	r2, r3
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800afa8:	7bfb      	ldrb	r3, [r7, #15]
 800afaa:	7b7a      	ldrb	r2, [r7, #13]
 800afac:	4909      	ldr	r1, [pc, #36]	@ (800afd4 <UARTEx_SetNbDataToProcess+0x94>)
 800afae:	5c8a      	ldrb	r2, [r1, r2]
 800afb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800afb4:	7b7a      	ldrb	r2, [r7, #13]
 800afb6:	4908      	ldr	r1, [pc, #32]	@ (800afd8 <UARTEx_SetNbDataToProcess+0x98>)
 800afb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800afba:	fb93 f3f2 	sdiv	r3, r3, r2
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800afc6:	bf00      	nop
 800afc8:	3714      	adds	r7, #20
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	0800bcc8 	.word	0x0800bcc8
 800afd8:	0800bcd0 	.word	0x0800bcd0

0800afdc <siprintf>:
 800afdc:	b40e      	push	{r1, r2, r3}
 800afde:	b510      	push	{r4, lr}
 800afe0:	b09d      	sub	sp, #116	@ 0x74
 800afe2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800afe4:	9002      	str	r0, [sp, #8]
 800afe6:	9006      	str	r0, [sp, #24]
 800afe8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800afec:	480a      	ldr	r0, [pc, #40]	@ (800b018 <siprintf+0x3c>)
 800afee:	9107      	str	r1, [sp, #28]
 800aff0:	9104      	str	r1, [sp, #16]
 800aff2:	490a      	ldr	r1, [pc, #40]	@ (800b01c <siprintf+0x40>)
 800aff4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aff8:	9105      	str	r1, [sp, #20]
 800affa:	2400      	movs	r4, #0
 800affc:	a902      	add	r1, sp, #8
 800affe:	6800      	ldr	r0, [r0, #0]
 800b000:	9301      	str	r3, [sp, #4]
 800b002:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b004:	f000 f9a2 	bl	800b34c <_svfiprintf_r>
 800b008:	9b02      	ldr	r3, [sp, #8]
 800b00a:	701c      	strb	r4, [r3, #0]
 800b00c:	b01d      	add	sp, #116	@ 0x74
 800b00e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b012:	b003      	add	sp, #12
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	24000018 	.word	0x24000018
 800b01c:	ffff0208 	.word	0xffff0208

0800b020 <memset>:
 800b020:	4402      	add	r2, r0
 800b022:	4603      	mov	r3, r0
 800b024:	4293      	cmp	r3, r2
 800b026:	d100      	bne.n	800b02a <memset+0xa>
 800b028:	4770      	bx	lr
 800b02a:	f803 1b01 	strb.w	r1, [r3], #1
 800b02e:	e7f9      	b.n	800b024 <memset+0x4>

0800b030 <__errno>:
 800b030:	4b01      	ldr	r3, [pc, #4]	@ (800b038 <__errno+0x8>)
 800b032:	6818      	ldr	r0, [r3, #0]
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	24000018 	.word	0x24000018

0800b03c <__libc_init_array>:
 800b03c:	b570      	push	{r4, r5, r6, lr}
 800b03e:	4d0d      	ldr	r5, [pc, #52]	@ (800b074 <__libc_init_array+0x38>)
 800b040:	4c0d      	ldr	r4, [pc, #52]	@ (800b078 <__libc_init_array+0x3c>)
 800b042:	1b64      	subs	r4, r4, r5
 800b044:	10a4      	asrs	r4, r4, #2
 800b046:	2600      	movs	r6, #0
 800b048:	42a6      	cmp	r6, r4
 800b04a:	d109      	bne.n	800b060 <__libc_init_array+0x24>
 800b04c:	4d0b      	ldr	r5, [pc, #44]	@ (800b07c <__libc_init_array+0x40>)
 800b04e:	4c0c      	ldr	r4, [pc, #48]	@ (800b080 <__libc_init_array+0x44>)
 800b050:	f000 fc64 	bl	800b91c <_init>
 800b054:	1b64      	subs	r4, r4, r5
 800b056:	10a4      	asrs	r4, r4, #2
 800b058:	2600      	movs	r6, #0
 800b05a:	42a6      	cmp	r6, r4
 800b05c:	d105      	bne.n	800b06a <__libc_init_array+0x2e>
 800b05e:	bd70      	pop	{r4, r5, r6, pc}
 800b060:	f855 3b04 	ldr.w	r3, [r5], #4
 800b064:	4798      	blx	r3
 800b066:	3601      	adds	r6, #1
 800b068:	e7ee      	b.n	800b048 <__libc_init_array+0xc>
 800b06a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b06e:	4798      	blx	r3
 800b070:	3601      	adds	r6, #1
 800b072:	e7f2      	b.n	800b05a <__libc_init_array+0x1e>
 800b074:	0800bd14 	.word	0x0800bd14
 800b078:	0800bd14 	.word	0x0800bd14
 800b07c:	0800bd14 	.word	0x0800bd14
 800b080:	0800bd1c 	.word	0x0800bd1c

0800b084 <__retarget_lock_acquire_recursive>:
 800b084:	4770      	bx	lr

0800b086 <__retarget_lock_release_recursive>:
 800b086:	4770      	bx	lr

0800b088 <memcpy>:
 800b088:	440a      	add	r2, r1
 800b08a:	4291      	cmp	r1, r2
 800b08c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b090:	d100      	bne.n	800b094 <memcpy+0xc>
 800b092:	4770      	bx	lr
 800b094:	b510      	push	{r4, lr}
 800b096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b09a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b09e:	4291      	cmp	r1, r2
 800b0a0:	d1f9      	bne.n	800b096 <memcpy+0xe>
 800b0a2:	bd10      	pop	{r4, pc}

0800b0a4 <_free_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	4605      	mov	r5, r0
 800b0a8:	2900      	cmp	r1, #0
 800b0aa:	d041      	beq.n	800b130 <_free_r+0x8c>
 800b0ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0b0:	1f0c      	subs	r4, r1, #4
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	bfb8      	it	lt
 800b0b6:	18e4      	addlt	r4, r4, r3
 800b0b8:	f000 f8e0 	bl	800b27c <__malloc_lock>
 800b0bc:	4a1d      	ldr	r2, [pc, #116]	@ (800b134 <_free_r+0x90>)
 800b0be:	6813      	ldr	r3, [r2, #0]
 800b0c0:	b933      	cbnz	r3, 800b0d0 <_free_r+0x2c>
 800b0c2:	6063      	str	r3, [r4, #4]
 800b0c4:	6014      	str	r4, [r2, #0]
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0cc:	f000 b8dc 	b.w	800b288 <__malloc_unlock>
 800b0d0:	42a3      	cmp	r3, r4
 800b0d2:	d908      	bls.n	800b0e6 <_free_r+0x42>
 800b0d4:	6820      	ldr	r0, [r4, #0]
 800b0d6:	1821      	adds	r1, r4, r0
 800b0d8:	428b      	cmp	r3, r1
 800b0da:	bf01      	itttt	eq
 800b0dc:	6819      	ldreq	r1, [r3, #0]
 800b0de:	685b      	ldreq	r3, [r3, #4]
 800b0e0:	1809      	addeq	r1, r1, r0
 800b0e2:	6021      	streq	r1, [r4, #0]
 800b0e4:	e7ed      	b.n	800b0c2 <_free_r+0x1e>
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	b10b      	cbz	r3, 800b0f0 <_free_r+0x4c>
 800b0ec:	42a3      	cmp	r3, r4
 800b0ee:	d9fa      	bls.n	800b0e6 <_free_r+0x42>
 800b0f0:	6811      	ldr	r1, [r2, #0]
 800b0f2:	1850      	adds	r0, r2, r1
 800b0f4:	42a0      	cmp	r0, r4
 800b0f6:	d10b      	bne.n	800b110 <_free_r+0x6c>
 800b0f8:	6820      	ldr	r0, [r4, #0]
 800b0fa:	4401      	add	r1, r0
 800b0fc:	1850      	adds	r0, r2, r1
 800b0fe:	4283      	cmp	r3, r0
 800b100:	6011      	str	r1, [r2, #0]
 800b102:	d1e0      	bne.n	800b0c6 <_free_r+0x22>
 800b104:	6818      	ldr	r0, [r3, #0]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	6053      	str	r3, [r2, #4]
 800b10a:	4408      	add	r0, r1
 800b10c:	6010      	str	r0, [r2, #0]
 800b10e:	e7da      	b.n	800b0c6 <_free_r+0x22>
 800b110:	d902      	bls.n	800b118 <_free_r+0x74>
 800b112:	230c      	movs	r3, #12
 800b114:	602b      	str	r3, [r5, #0]
 800b116:	e7d6      	b.n	800b0c6 <_free_r+0x22>
 800b118:	6820      	ldr	r0, [r4, #0]
 800b11a:	1821      	adds	r1, r4, r0
 800b11c:	428b      	cmp	r3, r1
 800b11e:	bf04      	itt	eq
 800b120:	6819      	ldreq	r1, [r3, #0]
 800b122:	685b      	ldreq	r3, [r3, #4]
 800b124:	6063      	str	r3, [r4, #4]
 800b126:	bf04      	itt	eq
 800b128:	1809      	addeq	r1, r1, r0
 800b12a:	6021      	streq	r1, [r4, #0]
 800b12c:	6054      	str	r4, [r2, #4]
 800b12e:	e7ca      	b.n	800b0c6 <_free_r+0x22>
 800b130:	bd38      	pop	{r3, r4, r5, pc}
 800b132:	bf00      	nop
 800b134:	24000e44 	.word	0x24000e44

0800b138 <sbrk_aligned>:
 800b138:	b570      	push	{r4, r5, r6, lr}
 800b13a:	4e0f      	ldr	r6, [pc, #60]	@ (800b178 <sbrk_aligned+0x40>)
 800b13c:	460c      	mov	r4, r1
 800b13e:	6831      	ldr	r1, [r6, #0]
 800b140:	4605      	mov	r5, r0
 800b142:	b911      	cbnz	r1, 800b14a <sbrk_aligned+0x12>
 800b144:	f000 fba4 	bl	800b890 <_sbrk_r>
 800b148:	6030      	str	r0, [r6, #0]
 800b14a:	4621      	mov	r1, r4
 800b14c:	4628      	mov	r0, r5
 800b14e:	f000 fb9f 	bl	800b890 <_sbrk_r>
 800b152:	1c43      	adds	r3, r0, #1
 800b154:	d103      	bne.n	800b15e <sbrk_aligned+0x26>
 800b156:	f04f 34ff 	mov.w	r4, #4294967295
 800b15a:	4620      	mov	r0, r4
 800b15c:	bd70      	pop	{r4, r5, r6, pc}
 800b15e:	1cc4      	adds	r4, r0, #3
 800b160:	f024 0403 	bic.w	r4, r4, #3
 800b164:	42a0      	cmp	r0, r4
 800b166:	d0f8      	beq.n	800b15a <sbrk_aligned+0x22>
 800b168:	1a21      	subs	r1, r4, r0
 800b16a:	4628      	mov	r0, r5
 800b16c:	f000 fb90 	bl	800b890 <_sbrk_r>
 800b170:	3001      	adds	r0, #1
 800b172:	d1f2      	bne.n	800b15a <sbrk_aligned+0x22>
 800b174:	e7ef      	b.n	800b156 <sbrk_aligned+0x1e>
 800b176:	bf00      	nop
 800b178:	24000e40 	.word	0x24000e40

0800b17c <_malloc_r>:
 800b17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b180:	1ccd      	adds	r5, r1, #3
 800b182:	f025 0503 	bic.w	r5, r5, #3
 800b186:	3508      	adds	r5, #8
 800b188:	2d0c      	cmp	r5, #12
 800b18a:	bf38      	it	cc
 800b18c:	250c      	movcc	r5, #12
 800b18e:	2d00      	cmp	r5, #0
 800b190:	4606      	mov	r6, r0
 800b192:	db01      	blt.n	800b198 <_malloc_r+0x1c>
 800b194:	42a9      	cmp	r1, r5
 800b196:	d904      	bls.n	800b1a2 <_malloc_r+0x26>
 800b198:	230c      	movs	r3, #12
 800b19a:	6033      	str	r3, [r6, #0]
 800b19c:	2000      	movs	r0, #0
 800b19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b278 <_malloc_r+0xfc>
 800b1a6:	f000 f869 	bl	800b27c <__malloc_lock>
 800b1aa:	f8d8 3000 	ldr.w	r3, [r8]
 800b1ae:	461c      	mov	r4, r3
 800b1b0:	bb44      	cbnz	r4, 800b204 <_malloc_r+0x88>
 800b1b2:	4629      	mov	r1, r5
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	f7ff ffbf 	bl	800b138 <sbrk_aligned>
 800b1ba:	1c43      	adds	r3, r0, #1
 800b1bc:	4604      	mov	r4, r0
 800b1be:	d158      	bne.n	800b272 <_malloc_r+0xf6>
 800b1c0:	f8d8 4000 	ldr.w	r4, [r8]
 800b1c4:	4627      	mov	r7, r4
 800b1c6:	2f00      	cmp	r7, #0
 800b1c8:	d143      	bne.n	800b252 <_malloc_r+0xd6>
 800b1ca:	2c00      	cmp	r4, #0
 800b1cc:	d04b      	beq.n	800b266 <_malloc_r+0xea>
 800b1ce:	6823      	ldr	r3, [r4, #0]
 800b1d0:	4639      	mov	r1, r7
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	eb04 0903 	add.w	r9, r4, r3
 800b1d8:	f000 fb5a 	bl	800b890 <_sbrk_r>
 800b1dc:	4581      	cmp	r9, r0
 800b1de:	d142      	bne.n	800b266 <_malloc_r+0xea>
 800b1e0:	6821      	ldr	r1, [r4, #0]
 800b1e2:	1a6d      	subs	r5, r5, r1
 800b1e4:	4629      	mov	r1, r5
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	f7ff ffa6 	bl	800b138 <sbrk_aligned>
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d03a      	beq.n	800b266 <_malloc_r+0xea>
 800b1f0:	6823      	ldr	r3, [r4, #0]
 800b1f2:	442b      	add	r3, r5
 800b1f4:	6023      	str	r3, [r4, #0]
 800b1f6:	f8d8 3000 	ldr.w	r3, [r8]
 800b1fa:	685a      	ldr	r2, [r3, #4]
 800b1fc:	bb62      	cbnz	r2, 800b258 <_malloc_r+0xdc>
 800b1fe:	f8c8 7000 	str.w	r7, [r8]
 800b202:	e00f      	b.n	800b224 <_malloc_r+0xa8>
 800b204:	6822      	ldr	r2, [r4, #0]
 800b206:	1b52      	subs	r2, r2, r5
 800b208:	d420      	bmi.n	800b24c <_malloc_r+0xd0>
 800b20a:	2a0b      	cmp	r2, #11
 800b20c:	d917      	bls.n	800b23e <_malloc_r+0xc2>
 800b20e:	1961      	adds	r1, r4, r5
 800b210:	42a3      	cmp	r3, r4
 800b212:	6025      	str	r5, [r4, #0]
 800b214:	bf18      	it	ne
 800b216:	6059      	strne	r1, [r3, #4]
 800b218:	6863      	ldr	r3, [r4, #4]
 800b21a:	bf08      	it	eq
 800b21c:	f8c8 1000 	streq.w	r1, [r8]
 800b220:	5162      	str	r2, [r4, r5]
 800b222:	604b      	str	r3, [r1, #4]
 800b224:	4630      	mov	r0, r6
 800b226:	f000 f82f 	bl	800b288 <__malloc_unlock>
 800b22a:	f104 000b 	add.w	r0, r4, #11
 800b22e:	1d23      	adds	r3, r4, #4
 800b230:	f020 0007 	bic.w	r0, r0, #7
 800b234:	1ac2      	subs	r2, r0, r3
 800b236:	bf1c      	itt	ne
 800b238:	1a1b      	subne	r3, r3, r0
 800b23a:	50a3      	strne	r3, [r4, r2]
 800b23c:	e7af      	b.n	800b19e <_malloc_r+0x22>
 800b23e:	6862      	ldr	r2, [r4, #4]
 800b240:	42a3      	cmp	r3, r4
 800b242:	bf0c      	ite	eq
 800b244:	f8c8 2000 	streq.w	r2, [r8]
 800b248:	605a      	strne	r2, [r3, #4]
 800b24a:	e7eb      	b.n	800b224 <_malloc_r+0xa8>
 800b24c:	4623      	mov	r3, r4
 800b24e:	6864      	ldr	r4, [r4, #4]
 800b250:	e7ae      	b.n	800b1b0 <_malloc_r+0x34>
 800b252:	463c      	mov	r4, r7
 800b254:	687f      	ldr	r7, [r7, #4]
 800b256:	e7b6      	b.n	800b1c6 <_malloc_r+0x4a>
 800b258:	461a      	mov	r2, r3
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	42a3      	cmp	r3, r4
 800b25e:	d1fb      	bne.n	800b258 <_malloc_r+0xdc>
 800b260:	2300      	movs	r3, #0
 800b262:	6053      	str	r3, [r2, #4]
 800b264:	e7de      	b.n	800b224 <_malloc_r+0xa8>
 800b266:	230c      	movs	r3, #12
 800b268:	6033      	str	r3, [r6, #0]
 800b26a:	4630      	mov	r0, r6
 800b26c:	f000 f80c 	bl	800b288 <__malloc_unlock>
 800b270:	e794      	b.n	800b19c <_malloc_r+0x20>
 800b272:	6005      	str	r5, [r0, #0]
 800b274:	e7d6      	b.n	800b224 <_malloc_r+0xa8>
 800b276:	bf00      	nop
 800b278:	24000e44 	.word	0x24000e44

0800b27c <__malloc_lock>:
 800b27c:	4801      	ldr	r0, [pc, #4]	@ (800b284 <__malloc_lock+0x8>)
 800b27e:	f7ff bf01 	b.w	800b084 <__retarget_lock_acquire_recursive>
 800b282:	bf00      	nop
 800b284:	24000e3c 	.word	0x24000e3c

0800b288 <__malloc_unlock>:
 800b288:	4801      	ldr	r0, [pc, #4]	@ (800b290 <__malloc_unlock+0x8>)
 800b28a:	f7ff befc 	b.w	800b086 <__retarget_lock_release_recursive>
 800b28e:	bf00      	nop
 800b290:	24000e3c 	.word	0x24000e3c

0800b294 <__ssputs_r>:
 800b294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b298:	688e      	ldr	r6, [r1, #8]
 800b29a:	461f      	mov	r7, r3
 800b29c:	42be      	cmp	r6, r7
 800b29e:	680b      	ldr	r3, [r1, #0]
 800b2a0:	4682      	mov	sl, r0
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	4690      	mov	r8, r2
 800b2a6:	d82d      	bhi.n	800b304 <__ssputs_r+0x70>
 800b2a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b2ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b2b0:	d026      	beq.n	800b300 <__ssputs_r+0x6c>
 800b2b2:	6965      	ldr	r5, [r4, #20]
 800b2b4:	6909      	ldr	r1, [r1, #16]
 800b2b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2ba:	eba3 0901 	sub.w	r9, r3, r1
 800b2be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2c2:	1c7b      	adds	r3, r7, #1
 800b2c4:	444b      	add	r3, r9
 800b2c6:	106d      	asrs	r5, r5, #1
 800b2c8:	429d      	cmp	r5, r3
 800b2ca:	bf38      	it	cc
 800b2cc:	461d      	movcc	r5, r3
 800b2ce:	0553      	lsls	r3, r2, #21
 800b2d0:	d527      	bpl.n	800b322 <__ssputs_r+0x8e>
 800b2d2:	4629      	mov	r1, r5
 800b2d4:	f7ff ff52 	bl	800b17c <_malloc_r>
 800b2d8:	4606      	mov	r6, r0
 800b2da:	b360      	cbz	r0, 800b336 <__ssputs_r+0xa2>
 800b2dc:	6921      	ldr	r1, [r4, #16]
 800b2de:	464a      	mov	r2, r9
 800b2e0:	f7ff fed2 	bl	800b088 <memcpy>
 800b2e4:	89a3      	ldrh	r3, [r4, #12]
 800b2e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b2ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2ee:	81a3      	strh	r3, [r4, #12]
 800b2f0:	6126      	str	r6, [r4, #16]
 800b2f2:	6165      	str	r5, [r4, #20]
 800b2f4:	444e      	add	r6, r9
 800b2f6:	eba5 0509 	sub.w	r5, r5, r9
 800b2fa:	6026      	str	r6, [r4, #0]
 800b2fc:	60a5      	str	r5, [r4, #8]
 800b2fe:	463e      	mov	r6, r7
 800b300:	42be      	cmp	r6, r7
 800b302:	d900      	bls.n	800b306 <__ssputs_r+0x72>
 800b304:	463e      	mov	r6, r7
 800b306:	6820      	ldr	r0, [r4, #0]
 800b308:	4632      	mov	r2, r6
 800b30a:	4641      	mov	r1, r8
 800b30c:	f000 faa6 	bl	800b85c <memmove>
 800b310:	68a3      	ldr	r3, [r4, #8]
 800b312:	1b9b      	subs	r3, r3, r6
 800b314:	60a3      	str	r3, [r4, #8]
 800b316:	6823      	ldr	r3, [r4, #0]
 800b318:	4433      	add	r3, r6
 800b31a:	6023      	str	r3, [r4, #0]
 800b31c:	2000      	movs	r0, #0
 800b31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b322:	462a      	mov	r2, r5
 800b324:	f000 fac4 	bl	800b8b0 <_realloc_r>
 800b328:	4606      	mov	r6, r0
 800b32a:	2800      	cmp	r0, #0
 800b32c:	d1e0      	bne.n	800b2f0 <__ssputs_r+0x5c>
 800b32e:	6921      	ldr	r1, [r4, #16]
 800b330:	4650      	mov	r0, sl
 800b332:	f7ff feb7 	bl	800b0a4 <_free_r>
 800b336:	230c      	movs	r3, #12
 800b338:	f8ca 3000 	str.w	r3, [sl]
 800b33c:	89a3      	ldrh	r3, [r4, #12]
 800b33e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b342:	81a3      	strh	r3, [r4, #12]
 800b344:	f04f 30ff 	mov.w	r0, #4294967295
 800b348:	e7e9      	b.n	800b31e <__ssputs_r+0x8a>
	...

0800b34c <_svfiprintf_r>:
 800b34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b350:	4698      	mov	r8, r3
 800b352:	898b      	ldrh	r3, [r1, #12]
 800b354:	061b      	lsls	r3, r3, #24
 800b356:	b09d      	sub	sp, #116	@ 0x74
 800b358:	4607      	mov	r7, r0
 800b35a:	460d      	mov	r5, r1
 800b35c:	4614      	mov	r4, r2
 800b35e:	d510      	bpl.n	800b382 <_svfiprintf_r+0x36>
 800b360:	690b      	ldr	r3, [r1, #16]
 800b362:	b973      	cbnz	r3, 800b382 <_svfiprintf_r+0x36>
 800b364:	2140      	movs	r1, #64	@ 0x40
 800b366:	f7ff ff09 	bl	800b17c <_malloc_r>
 800b36a:	6028      	str	r0, [r5, #0]
 800b36c:	6128      	str	r0, [r5, #16]
 800b36e:	b930      	cbnz	r0, 800b37e <_svfiprintf_r+0x32>
 800b370:	230c      	movs	r3, #12
 800b372:	603b      	str	r3, [r7, #0]
 800b374:	f04f 30ff 	mov.w	r0, #4294967295
 800b378:	b01d      	add	sp, #116	@ 0x74
 800b37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37e:	2340      	movs	r3, #64	@ 0x40
 800b380:	616b      	str	r3, [r5, #20]
 800b382:	2300      	movs	r3, #0
 800b384:	9309      	str	r3, [sp, #36]	@ 0x24
 800b386:	2320      	movs	r3, #32
 800b388:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b38c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b390:	2330      	movs	r3, #48	@ 0x30
 800b392:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b530 <_svfiprintf_r+0x1e4>
 800b396:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b39a:	f04f 0901 	mov.w	r9, #1
 800b39e:	4623      	mov	r3, r4
 800b3a0:	469a      	mov	sl, r3
 800b3a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3a6:	b10a      	cbz	r2, 800b3ac <_svfiprintf_r+0x60>
 800b3a8:	2a25      	cmp	r2, #37	@ 0x25
 800b3aa:	d1f9      	bne.n	800b3a0 <_svfiprintf_r+0x54>
 800b3ac:	ebba 0b04 	subs.w	fp, sl, r4
 800b3b0:	d00b      	beq.n	800b3ca <_svfiprintf_r+0x7e>
 800b3b2:	465b      	mov	r3, fp
 800b3b4:	4622      	mov	r2, r4
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	4638      	mov	r0, r7
 800b3ba:	f7ff ff6b 	bl	800b294 <__ssputs_r>
 800b3be:	3001      	adds	r0, #1
 800b3c0:	f000 80a7 	beq.w	800b512 <_svfiprintf_r+0x1c6>
 800b3c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3c6:	445a      	add	r2, fp
 800b3c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b3ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	f000 809f 	beq.w	800b512 <_svfiprintf_r+0x1c6>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3de:	f10a 0a01 	add.w	sl, sl, #1
 800b3e2:	9304      	str	r3, [sp, #16]
 800b3e4:	9307      	str	r3, [sp, #28]
 800b3e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3ea:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3ec:	4654      	mov	r4, sl
 800b3ee:	2205      	movs	r2, #5
 800b3f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3f4:	484e      	ldr	r0, [pc, #312]	@ (800b530 <_svfiprintf_r+0x1e4>)
 800b3f6:	f7f4 ff93 	bl	8000320 <memchr>
 800b3fa:	9a04      	ldr	r2, [sp, #16]
 800b3fc:	b9d8      	cbnz	r0, 800b436 <_svfiprintf_r+0xea>
 800b3fe:	06d0      	lsls	r0, r2, #27
 800b400:	bf44      	itt	mi
 800b402:	2320      	movmi	r3, #32
 800b404:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b408:	0711      	lsls	r1, r2, #28
 800b40a:	bf44      	itt	mi
 800b40c:	232b      	movmi	r3, #43	@ 0x2b
 800b40e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b412:	f89a 3000 	ldrb.w	r3, [sl]
 800b416:	2b2a      	cmp	r3, #42	@ 0x2a
 800b418:	d015      	beq.n	800b446 <_svfiprintf_r+0xfa>
 800b41a:	9a07      	ldr	r2, [sp, #28]
 800b41c:	4654      	mov	r4, sl
 800b41e:	2000      	movs	r0, #0
 800b420:	f04f 0c0a 	mov.w	ip, #10
 800b424:	4621      	mov	r1, r4
 800b426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b42a:	3b30      	subs	r3, #48	@ 0x30
 800b42c:	2b09      	cmp	r3, #9
 800b42e:	d94b      	bls.n	800b4c8 <_svfiprintf_r+0x17c>
 800b430:	b1b0      	cbz	r0, 800b460 <_svfiprintf_r+0x114>
 800b432:	9207      	str	r2, [sp, #28]
 800b434:	e014      	b.n	800b460 <_svfiprintf_r+0x114>
 800b436:	eba0 0308 	sub.w	r3, r0, r8
 800b43a:	fa09 f303 	lsl.w	r3, r9, r3
 800b43e:	4313      	orrs	r3, r2
 800b440:	9304      	str	r3, [sp, #16]
 800b442:	46a2      	mov	sl, r4
 800b444:	e7d2      	b.n	800b3ec <_svfiprintf_r+0xa0>
 800b446:	9b03      	ldr	r3, [sp, #12]
 800b448:	1d19      	adds	r1, r3, #4
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	9103      	str	r1, [sp, #12]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	bfbb      	ittet	lt
 800b452:	425b      	neglt	r3, r3
 800b454:	f042 0202 	orrlt.w	r2, r2, #2
 800b458:	9307      	strge	r3, [sp, #28]
 800b45a:	9307      	strlt	r3, [sp, #28]
 800b45c:	bfb8      	it	lt
 800b45e:	9204      	strlt	r2, [sp, #16]
 800b460:	7823      	ldrb	r3, [r4, #0]
 800b462:	2b2e      	cmp	r3, #46	@ 0x2e
 800b464:	d10a      	bne.n	800b47c <_svfiprintf_r+0x130>
 800b466:	7863      	ldrb	r3, [r4, #1]
 800b468:	2b2a      	cmp	r3, #42	@ 0x2a
 800b46a:	d132      	bne.n	800b4d2 <_svfiprintf_r+0x186>
 800b46c:	9b03      	ldr	r3, [sp, #12]
 800b46e:	1d1a      	adds	r2, r3, #4
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	9203      	str	r2, [sp, #12]
 800b474:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b478:	3402      	adds	r4, #2
 800b47a:	9305      	str	r3, [sp, #20]
 800b47c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b540 <_svfiprintf_r+0x1f4>
 800b480:	7821      	ldrb	r1, [r4, #0]
 800b482:	2203      	movs	r2, #3
 800b484:	4650      	mov	r0, sl
 800b486:	f7f4 ff4b 	bl	8000320 <memchr>
 800b48a:	b138      	cbz	r0, 800b49c <_svfiprintf_r+0x150>
 800b48c:	9b04      	ldr	r3, [sp, #16]
 800b48e:	eba0 000a 	sub.w	r0, r0, sl
 800b492:	2240      	movs	r2, #64	@ 0x40
 800b494:	4082      	lsls	r2, r0
 800b496:	4313      	orrs	r3, r2
 800b498:	3401      	adds	r4, #1
 800b49a:	9304      	str	r3, [sp, #16]
 800b49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4a0:	4824      	ldr	r0, [pc, #144]	@ (800b534 <_svfiprintf_r+0x1e8>)
 800b4a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b4a6:	2206      	movs	r2, #6
 800b4a8:	f7f4 ff3a 	bl	8000320 <memchr>
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	d036      	beq.n	800b51e <_svfiprintf_r+0x1d2>
 800b4b0:	4b21      	ldr	r3, [pc, #132]	@ (800b538 <_svfiprintf_r+0x1ec>)
 800b4b2:	bb1b      	cbnz	r3, 800b4fc <_svfiprintf_r+0x1b0>
 800b4b4:	9b03      	ldr	r3, [sp, #12]
 800b4b6:	3307      	adds	r3, #7
 800b4b8:	f023 0307 	bic.w	r3, r3, #7
 800b4bc:	3308      	adds	r3, #8
 800b4be:	9303      	str	r3, [sp, #12]
 800b4c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4c2:	4433      	add	r3, r6
 800b4c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4c6:	e76a      	b.n	800b39e <_svfiprintf_r+0x52>
 800b4c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4cc:	460c      	mov	r4, r1
 800b4ce:	2001      	movs	r0, #1
 800b4d0:	e7a8      	b.n	800b424 <_svfiprintf_r+0xd8>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	3401      	adds	r4, #1
 800b4d6:	9305      	str	r3, [sp, #20]
 800b4d8:	4619      	mov	r1, r3
 800b4da:	f04f 0c0a 	mov.w	ip, #10
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4e4:	3a30      	subs	r2, #48	@ 0x30
 800b4e6:	2a09      	cmp	r2, #9
 800b4e8:	d903      	bls.n	800b4f2 <_svfiprintf_r+0x1a6>
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d0c6      	beq.n	800b47c <_svfiprintf_r+0x130>
 800b4ee:	9105      	str	r1, [sp, #20]
 800b4f0:	e7c4      	b.n	800b47c <_svfiprintf_r+0x130>
 800b4f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e7f0      	b.n	800b4de <_svfiprintf_r+0x192>
 800b4fc:	ab03      	add	r3, sp, #12
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	462a      	mov	r2, r5
 800b502:	4b0e      	ldr	r3, [pc, #56]	@ (800b53c <_svfiprintf_r+0x1f0>)
 800b504:	a904      	add	r1, sp, #16
 800b506:	4638      	mov	r0, r7
 800b508:	f3af 8000 	nop.w
 800b50c:	1c42      	adds	r2, r0, #1
 800b50e:	4606      	mov	r6, r0
 800b510:	d1d6      	bne.n	800b4c0 <_svfiprintf_r+0x174>
 800b512:	89ab      	ldrh	r3, [r5, #12]
 800b514:	065b      	lsls	r3, r3, #25
 800b516:	f53f af2d 	bmi.w	800b374 <_svfiprintf_r+0x28>
 800b51a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b51c:	e72c      	b.n	800b378 <_svfiprintf_r+0x2c>
 800b51e:	ab03      	add	r3, sp, #12
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	462a      	mov	r2, r5
 800b524:	4b05      	ldr	r3, [pc, #20]	@ (800b53c <_svfiprintf_r+0x1f0>)
 800b526:	a904      	add	r1, sp, #16
 800b528:	4638      	mov	r0, r7
 800b52a:	f000 f879 	bl	800b620 <_printf_i>
 800b52e:	e7ed      	b.n	800b50c <_svfiprintf_r+0x1c0>
 800b530:	0800bcd8 	.word	0x0800bcd8
 800b534:	0800bce2 	.word	0x0800bce2
 800b538:	00000000 	.word	0x00000000
 800b53c:	0800b295 	.word	0x0800b295
 800b540:	0800bcde 	.word	0x0800bcde

0800b544 <_printf_common>:
 800b544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b548:	4616      	mov	r6, r2
 800b54a:	4698      	mov	r8, r3
 800b54c:	688a      	ldr	r2, [r1, #8]
 800b54e:	690b      	ldr	r3, [r1, #16]
 800b550:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b554:	4293      	cmp	r3, r2
 800b556:	bfb8      	it	lt
 800b558:	4613      	movlt	r3, r2
 800b55a:	6033      	str	r3, [r6, #0]
 800b55c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b560:	4607      	mov	r7, r0
 800b562:	460c      	mov	r4, r1
 800b564:	b10a      	cbz	r2, 800b56a <_printf_common+0x26>
 800b566:	3301      	adds	r3, #1
 800b568:	6033      	str	r3, [r6, #0]
 800b56a:	6823      	ldr	r3, [r4, #0]
 800b56c:	0699      	lsls	r1, r3, #26
 800b56e:	bf42      	ittt	mi
 800b570:	6833      	ldrmi	r3, [r6, #0]
 800b572:	3302      	addmi	r3, #2
 800b574:	6033      	strmi	r3, [r6, #0]
 800b576:	6825      	ldr	r5, [r4, #0]
 800b578:	f015 0506 	ands.w	r5, r5, #6
 800b57c:	d106      	bne.n	800b58c <_printf_common+0x48>
 800b57e:	f104 0a19 	add.w	sl, r4, #25
 800b582:	68e3      	ldr	r3, [r4, #12]
 800b584:	6832      	ldr	r2, [r6, #0]
 800b586:	1a9b      	subs	r3, r3, r2
 800b588:	42ab      	cmp	r3, r5
 800b58a:	dc26      	bgt.n	800b5da <_printf_common+0x96>
 800b58c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b590:	6822      	ldr	r2, [r4, #0]
 800b592:	3b00      	subs	r3, #0
 800b594:	bf18      	it	ne
 800b596:	2301      	movne	r3, #1
 800b598:	0692      	lsls	r2, r2, #26
 800b59a:	d42b      	bmi.n	800b5f4 <_printf_common+0xb0>
 800b59c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b5a0:	4641      	mov	r1, r8
 800b5a2:	4638      	mov	r0, r7
 800b5a4:	47c8      	blx	r9
 800b5a6:	3001      	adds	r0, #1
 800b5a8:	d01e      	beq.n	800b5e8 <_printf_common+0xa4>
 800b5aa:	6823      	ldr	r3, [r4, #0]
 800b5ac:	6922      	ldr	r2, [r4, #16]
 800b5ae:	f003 0306 	and.w	r3, r3, #6
 800b5b2:	2b04      	cmp	r3, #4
 800b5b4:	bf02      	ittt	eq
 800b5b6:	68e5      	ldreq	r5, [r4, #12]
 800b5b8:	6833      	ldreq	r3, [r6, #0]
 800b5ba:	1aed      	subeq	r5, r5, r3
 800b5bc:	68a3      	ldr	r3, [r4, #8]
 800b5be:	bf0c      	ite	eq
 800b5c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5c4:	2500      	movne	r5, #0
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	bfc4      	itt	gt
 800b5ca:	1a9b      	subgt	r3, r3, r2
 800b5cc:	18ed      	addgt	r5, r5, r3
 800b5ce:	2600      	movs	r6, #0
 800b5d0:	341a      	adds	r4, #26
 800b5d2:	42b5      	cmp	r5, r6
 800b5d4:	d11a      	bne.n	800b60c <_printf_common+0xc8>
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	e008      	b.n	800b5ec <_printf_common+0xa8>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	4652      	mov	r2, sl
 800b5de:	4641      	mov	r1, r8
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	47c8      	blx	r9
 800b5e4:	3001      	adds	r0, #1
 800b5e6:	d103      	bne.n	800b5f0 <_printf_common+0xac>
 800b5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5f0:	3501      	adds	r5, #1
 800b5f2:	e7c6      	b.n	800b582 <_printf_common+0x3e>
 800b5f4:	18e1      	adds	r1, r4, r3
 800b5f6:	1c5a      	adds	r2, r3, #1
 800b5f8:	2030      	movs	r0, #48	@ 0x30
 800b5fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5fe:	4422      	add	r2, r4
 800b600:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b604:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b608:	3302      	adds	r3, #2
 800b60a:	e7c7      	b.n	800b59c <_printf_common+0x58>
 800b60c:	2301      	movs	r3, #1
 800b60e:	4622      	mov	r2, r4
 800b610:	4641      	mov	r1, r8
 800b612:	4638      	mov	r0, r7
 800b614:	47c8      	blx	r9
 800b616:	3001      	adds	r0, #1
 800b618:	d0e6      	beq.n	800b5e8 <_printf_common+0xa4>
 800b61a:	3601      	adds	r6, #1
 800b61c:	e7d9      	b.n	800b5d2 <_printf_common+0x8e>
	...

0800b620 <_printf_i>:
 800b620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b624:	7e0f      	ldrb	r7, [r1, #24]
 800b626:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b628:	2f78      	cmp	r7, #120	@ 0x78
 800b62a:	4691      	mov	r9, r2
 800b62c:	4680      	mov	r8, r0
 800b62e:	460c      	mov	r4, r1
 800b630:	469a      	mov	sl, r3
 800b632:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b636:	d807      	bhi.n	800b648 <_printf_i+0x28>
 800b638:	2f62      	cmp	r7, #98	@ 0x62
 800b63a:	d80a      	bhi.n	800b652 <_printf_i+0x32>
 800b63c:	2f00      	cmp	r7, #0
 800b63e:	f000 80d1 	beq.w	800b7e4 <_printf_i+0x1c4>
 800b642:	2f58      	cmp	r7, #88	@ 0x58
 800b644:	f000 80b8 	beq.w	800b7b8 <_printf_i+0x198>
 800b648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b64c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b650:	e03a      	b.n	800b6c8 <_printf_i+0xa8>
 800b652:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b656:	2b15      	cmp	r3, #21
 800b658:	d8f6      	bhi.n	800b648 <_printf_i+0x28>
 800b65a:	a101      	add	r1, pc, #4	@ (adr r1, 800b660 <_printf_i+0x40>)
 800b65c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b660:	0800b6b9 	.word	0x0800b6b9
 800b664:	0800b6cd 	.word	0x0800b6cd
 800b668:	0800b649 	.word	0x0800b649
 800b66c:	0800b649 	.word	0x0800b649
 800b670:	0800b649 	.word	0x0800b649
 800b674:	0800b649 	.word	0x0800b649
 800b678:	0800b6cd 	.word	0x0800b6cd
 800b67c:	0800b649 	.word	0x0800b649
 800b680:	0800b649 	.word	0x0800b649
 800b684:	0800b649 	.word	0x0800b649
 800b688:	0800b649 	.word	0x0800b649
 800b68c:	0800b7cb 	.word	0x0800b7cb
 800b690:	0800b6f7 	.word	0x0800b6f7
 800b694:	0800b785 	.word	0x0800b785
 800b698:	0800b649 	.word	0x0800b649
 800b69c:	0800b649 	.word	0x0800b649
 800b6a0:	0800b7ed 	.word	0x0800b7ed
 800b6a4:	0800b649 	.word	0x0800b649
 800b6a8:	0800b6f7 	.word	0x0800b6f7
 800b6ac:	0800b649 	.word	0x0800b649
 800b6b0:	0800b649 	.word	0x0800b649
 800b6b4:	0800b78d 	.word	0x0800b78d
 800b6b8:	6833      	ldr	r3, [r6, #0]
 800b6ba:	1d1a      	adds	r2, r3, #4
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	6032      	str	r2, [r6, #0]
 800b6c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	e09c      	b.n	800b806 <_printf_i+0x1e6>
 800b6cc:	6833      	ldr	r3, [r6, #0]
 800b6ce:	6820      	ldr	r0, [r4, #0]
 800b6d0:	1d19      	adds	r1, r3, #4
 800b6d2:	6031      	str	r1, [r6, #0]
 800b6d4:	0606      	lsls	r6, r0, #24
 800b6d6:	d501      	bpl.n	800b6dc <_printf_i+0xbc>
 800b6d8:	681d      	ldr	r5, [r3, #0]
 800b6da:	e003      	b.n	800b6e4 <_printf_i+0xc4>
 800b6dc:	0645      	lsls	r5, r0, #25
 800b6de:	d5fb      	bpl.n	800b6d8 <_printf_i+0xb8>
 800b6e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6e4:	2d00      	cmp	r5, #0
 800b6e6:	da03      	bge.n	800b6f0 <_printf_i+0xd0>
 800b6e8:	232d      	movs	r3, #45	@ 0x2d
 800b6ea:	426d      	negs	r5, r5
 800b6ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6f0:	4858      	ldr	r0, [pc, #352]	@ (800b854 <_printf_i+0x234>)
 800b6f2:	230a      	movs	r3, #10
 800b6f4:	e011      	b.n	800b71a <_printf_i+0xfa>
 800b6f6:	6821      	ldr	r1, [r4, #0]
 800b6f8:	6833      	ldr	r3, [r6, #0]
 800b6fa:	0608      	lsls	r0, r1, #24
 800b6fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b700:	d402      	bmi.n	800b708 <_printf_i+0xe8>
 800b702:	0649      	lsls	r1, r1, #25
 800b704:	bf48      	it	mi
 800b706:	b2ad      	uxthmi	r5, r5
 800b708:	2f6f      	cmp	r7, #111	@ 0x6f
 800b70a:	4852      	ldr	r0, [pc, #328]	@ (800b854 <_printf_i+0x234>)
 800b70c:	6033      	str	r3, [r6, #0]
 800b70e:	bf14      	ite	ne
 800b710:	230a      	movne	r3, #10
 800b712:	2308      	moveq	r3, #8
 800b714:	2100      	movs	r1, #0
 800b716:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b71a:	6866      	ldr	r6, [r4, #4]
 800b71c:	60a6      	str	r6, [r4, #8]
 800b71e:	2e00      	cmp	r6, #0
 800b720:	db05      	blt.n	800b72e <_printf_i+0x10e>
 800b722:	6821      	ldr	r1, [r4, #0]
 800b724:	432e      	orrs	r6, r5
 800b726:	f021 0104 	bic.w	r1, r1, #4
 800b72a:	6021      	str	r1, [r4, #0]
 800b72c:	d04b      	beq.n	800b7c6 <_printf_i+0x1a6>
 800b72e:	4616      	mov	r6, r2
 800b730:	fbb5 f1f3 	udiv	r1, r5, r3
 800b734:	fb03 5711 	mls	r7, r3, r1, r5
 800b738:	5dc7      	ldrb	r7, [r0, r7]
 800b73a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b73e:	462f      	mov	r7, r5
 800b740:	42bb      	cmp	r3, r7
 800b742:	460d      	mov	r5, r1
 800b744:	d9f4      	bls.n	800b730 <_printf_i+0x110>
 800b746:	2b08      	cmp	r3, #8
 800b748:	d10b      	bne.n	800b762 <_printf_i+0x142>
 800b74a:	6823      	ldr	r3, [r4, #0]
 800b74c:	07df      	lsls	r7, r3, #31
 800b74e:	d508      	bpl.n	800b762 <_printf_i+0x142>
 800b750:	6923      	ldr	r3, [r4, #16]
 800b752:	6861      	ldr	r1, [r4, #4]
 800b754:	4299      	cmp	r1, r3
 800b756:	bfde      	ittt	le
 800b758:	2330      	movle	r3, #48	@ 0x30
 800b75a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b75e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b762:	1b92      	subs	r2, r2, r6
 800b764:	6122      	str	r2, [r4, #16]
 800b766:	f8cd a000 	str.w	sl, [sp]
 800b76a:	464b      	mov	r3, r9
 800b76c:	aa03      	add	r2, sp, #12
 800b76e:	4621      	mov	r1, r4
 800b770:	4640      	mov	r0, r8
 800b772:	f7ff fee7 	bl	800b544 <_printf_common>
 800b776:	3001      	adds	r0, #1
 800b778:	d14a      	bne.n	800b810 <_printf_i+0x1f0>
 800b77a:	f04f 30ff 	mov.w	r0, #4294967295
 800b77e:	b004      	add	sp, #16
 800b780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b784:	6823      	ldr	r3, [r4, #0]
 800b786:	f043 0320 	orr.w	r3, r3, #32
 800b78a:	6023      	str	r3, [r4, #0]
 800b78c:	4832      	ldr	r0, [pc, #200]	@ (800b858 <_printf_i+0x238>)
 800b78e:	2778      	movs	r7, #120	@ 0x78
 800b790:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b794:	6823      	ldr	r3, [r4, #0]
 800b796:	6831      	ldr	r1, [r6, #0]
 800b798:	061f      	lsls	r7, r3, #24
 800b79a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b79e:	d402      	bmi.n	800b7a6 <_printf_i+0x186>
 800b7a0:	065f      	lsls	r7, r3, #25
 800b7a2:	bf48      	it	mi
 800b7a4:	b2ad      	uxthmi	r5, r5
 800b7a6:	6031      	str	r1, [r6, #0]
 800b7a8:	07d9      	lsls	r1, r3, #31
 800b7aa:	bf44      	itt	mi
 800b7ac:	f043 0320 	orrmi.w	r3, r3, #32
 800b7b0:	6023      	strmi	r3, [r4, #0]
 800b7b2:	b11d      	cbz	r5, 800b7bc <_printf_i+0x19c>
 800b7b4:	2310      	movs	r3, #16
 800b7b6:	e7ad      	b.n	800b714 <_printf_i+0xf4>
 800b7b8:	4826      	ldr	r0, [pc, #152]	@ (800b854 <_printf_i+0x234>)
 800b7ba:	e7e9      	b.n	800b790 <_printf_i+0x170>
 800b7bc:	6823      	ldr	r3, [r4, #0]
 800b7be:	f023 0320 	bic.w	r3, r3, #32
 800b7c2:	6023      	str	r3, [r4, #0]
 800b7c4:	e7f6      	b.n	800b7b4 <_printf_i+0x194>
 800b7c6:	4616      	mov	r6, r2
 800b7c8:	e7bd      	b.n	800b746 <_printf_i+0x126>
 800b7ca:	6833      	ldr	r3, [r6, #0]
 800b7cc:	6825      	ldr	r5, [r4, #0]
 800b7ce:	6961      	ldr	r1, [r4, #20]
 800b7d0:	1d18      	adds	r0, r3, #4
 800b7d2:	6030      	str	r0, [r6, #0]
 800b7d4:	062e      	lsls	r6, r5, #24
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	d501      	bpl.n	800b7de <_printf_i+0x1be>
 800b7da:	6019      	str	r1, [r3, #0]
 800b7dc:	e002      	b.n	800b7e4 <_printf_i+0x1c4>
 800b7de:	0668      	lsls	r0, r5, #25
 800b7e0:	d5fb      	bpl.n	800b7da <_printf_i+0x1ba>
 800b7e2:	8019      	strh	r1, [r3, #0]
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	6123      	str	r3, [r4, #16]
 800b7e8:	4616      	mov	r6, r2
 800b7ea:	e7bc      	b.n	800b766 <_printf_i+0x146>
 800b7ec:	6833      	ldr	r3, [r6, #0]
 800b7ee:	1d1a      	adds	r2, r3, #4
 800b7f0:	6032      	str	r2, [r6, #0]
 800b7f2:	681e      	ldr	r6, [r3, #0]
 800b7f4:	6862      	ldr	r2, [r4, #4]
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	f7f4 fd91 	bl	8000320 <memchr>
 800b7fe:	b108      	cbz	r0, 800b804 <_printf_i+0x1e4>
 800b800:	1b80      	subs	r0, r0, r6
 800b802:	6060      	str	r0, [r4, #4]
 800b804:	6863      	ldr	r3, [r4, #4]
 800b806:	6123      	str	r3, [r4, #16]
 800b808:	2300      	movs	r3, #0
 800b80a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b80e:	e7aa      	b.n	800b766 <_printf_i+0x146>
 800b810:	6923      	ldr	r3, [r4, #16]
 800b812:	4632      	mov	r2, r6
 800b814:	4649      	mov	r1, r9
 800b816:	4640      	mov	r0, r8
 800b818:	47d0      	blx	sl
 800b81a:	3001      	adds	r0, #1
 800b81c:	d0ad      	beq.n	800b77a <_printf_i+0x15a>
 800b81e:	6823      	ldr	r3, [r4, #0]
 800b820:	079b      	lsls	r3, r3, #30
 800b822:	d413      	bmi.n	800b84c <_printf_i+0x22c>
 800b824:	68e0      	ldr	r0, [r4, #12]
 800b826:	9b03      	ldr	r3, [sp, #12]
 800b828:	4298      	cmp	r0, r3
 800b82a:	bfb8      	it	lt
 800b82c:	4618      	movlt	r0, r3
 800b82e:	e7a6      	b.n	800b77e <_printf_i+0x15e>
 800b830:	2301      	movs	r3, #1
 800b832:	4632      	mov	r2, r6
 800b834:	4649      	mov	r1, r9
 800b836:	4640      	mov	r0, r8
 800b838:	47d0      	blx	sl
 800b83a:	3001      	adds	r0, #1
 800b83c:	d09d      	beq.n	800b77a <_printf_i+0x15a>
 800b83e:	3501      	adds	r5, #1
 800b840:	68e3      	ldr	r3, [r4, #12]
 800b842:	9903      	ldr	r1, [sp, #12]
 800b844:	1a5b      	subs	r3, r3, r1
 800b846:	42ab      	cmp	r3, r5
 800b848:	dcf2      	bgt.n	800b830 <_printf_i+0x210>
 800b84a:	e7eb      	b.n	800b824 <_printf_i+0x204>
 800b84c:	2500      	movs	r5, #0
 800b84e:	f104 0619 	add.w	r6, r4, #25
 800b852:	e7f5      	b.n	800b840 <_printf_i+0x220>
 800b854:	0800bce9 	.word	0x0800bce9
 800b858:	0800bcfa 	.word	0x0800bcfa

0800b85c <memmove>:
 800b85c:	4288      	cmp	r0, r1
 800b85e:	b510      	push	{r4, lr}
 800b860:	eb01 0402 	add.w	r4, r1, r2
 800b864:	d902      	bls.n	800b86c <memmove+0x10>
 800b866:	4284      	cmp	r4, r0
 800b868:	4623      	mov	r3, r4
 800b86a:	d807      	bhi.n	800b87c <memmove+0x20>
 800b86c:	1e43      	subs	r3, r0, #1
 800b86e:	42a1      	cmp	r1, r4
 800b870:	d008      	beq.n	800b884 <memmove+0x28>
 800b872:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b876:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b87a:	e7f8      	b.n	800b86e <memmove+0x12>
 800b87c:	4402      	add	r2, r0
 800b87e:	4601      	mov	r1, r0
 800b880:	428a      	cmp	r2, r1
 800b882:	d100      	bne.n	800b886 <memmove+0x2a>
 800b884:	bd10      	pop	{r4, pc}
 800b886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b88a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b88e:	e7f7      	b.n	800b880 <memmove+0x24>

0800b890 <_sbrk_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	4d06      	ldr	r5, [pc, #24]	@ (800b8ac <_sbrk_r+0x1c>)
 800b894:	2300      	movs	r3, #0
 800b896:	4604      	mov	r4, r0
 800b898:	4608      	mov	r0, r1
 800b89a:	602b      	str	r3, [r5, #0]
 800b89c:	f7f6 ffd4 	bl	8002848 <_sbrk>
 800b8a0:	1c43      	adds	r3, r0, #1
 800b8a2:	d102      	bne.n	800b8aa <_sbrk_r+0x1a>
 800b8a4:	682b      	ldr	r3, [r5, #0]
 800b8a6:	b103      	cbz	r3, 800b8aa <_sbrk_r+0x1a>
 800b8a8:	6023      	str	r3, [r4, #0]
 800b8aa:	bd38      	pop	{r3, r4, r5, pc}
 800b8ac:	24000e38 	.word	0x24000e38

0800b8b0 <_realloc_r>:
 800b8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8b4:	4607      	mov	r7, r0
 800b8b6:	4614      	mov	r4, r2
 800b8b8:	460d      	mov	r5, r1
 800b8ba:	b921      	cbnz	r1, 800b8c6 <_realloc_r+0x16>
 800b8bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	f7ff bc5b 	b.w	800b17c <_malloc_r>
 800b8c6:	b92a      	cbnz	r2, 800b8d4 <_realloc_r+0x24>
 800b8c8:	f7ff fbec 	bl	800b0a4 <_free_r>
 800b8cc:	4625      	mov	r5, r4
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d4:	f000 f81a 	bl	800b90c <_malloc_usable_size_r>
 800b8d8:	4284      	cmp	r4, r0
 800b8da:	4606      	mov	r6, r0
 800b8dc:	d802      	bhi.n	800b8e4 <_realloc_r+0x34>
 800b8de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8e2:	d8f4      	bhi.n	800b8ce <_realloc_r+0x1e>
 800b8e4:	4621      	mov	r1, r4
 800b8e6:	4638      	mov	r0, r7
 800b8e8:	f7ff fc48 	bl	800b17c <_malloc_r>
 800b8ec:	4680      	mov	r8, r0
 800b8ee:	b908      	cbnz	r0, 800b8f4 <_realloc_r+0x44>
 800b8f0:	4645      	mov	r5, r8
 800b8f2:	e7ec      	b.n	800b8ce <_realloc_r+0x1e>
 800b8f4:	42b4      	cmp	r4, r6
 800b8f6:	4622      	mov	r2, r4
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	bf28      	it	cs
 800b8fc:	4632      	movcs	r2, r6
 800b8fe:	f7ff fbc3 	bl	800b088 <memcpy>
 800b902:	4629      	mov	r1, r5
 800b904:	4638      	mov	r0, r7
 800b906:	f7ff fbcd 	bl	800b0a4 <_free_r>
 800b90a:	e7f1      	b.n	800b8f0 <_realloc_r+0x40>

0800b90c <_malloc_usable_size_r>:
 800b90c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b910:	1f18      	subs	r0, r3, #4
 800b912:	2b00      	cmp	r3, #0
 800b914:	bfbc      	itt	lt
 800b916:	580b      	ldrlt	r3, [r1, r0]
 800b918:	18c0      	addlt	r0, r0, r3
 800b91a:	4770      	bx	lr

0800b91c <_init>:
 800b91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b91e:	bf00      	nop
 800b920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b922:	bc08      	pop	{r3}
 800b924:	469e      	mov	lr, r3
 800b926:	4770      	bx	lr

0800b928 <_fini>:
 800b928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92a:	bf00      	nop
 800b92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b92e:	bc08      	pop	{r3}
 800b930:	469e      	mov	lr, r3
 800b932:	4770      	bx	lr
