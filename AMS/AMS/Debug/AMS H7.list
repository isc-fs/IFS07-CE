
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b264  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800b534  0800b534  0000c534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b90c  0800b90c  0000c90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800b914  0800b914  0000c914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b91c  0800b91c  0000c91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  24000000  0800b920  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dc8  24000068  0800b988  0000d068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000e30  0800b988  0000de30  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 10 .debug_info   000217da  00000000  00000000  0000d096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000034e1  00000000  00000000  0002e870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001380  00000000  00000000  00031d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f0b  00000000  00000000  000330d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a285  00000000  00000000  00033fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a689  00000000  00000000  0006e268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169c66  00000000  00000000  000888f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f2557  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005928  00000000  00000000  001f259c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  001f7ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000068 	.word	0x24000068
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b51c 	.word	0x0800b51c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400006c 	.word	0x2400006c
 800030c:	0800b51c 	.word	0x0800b51c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <_ZN7BMS_MODC1Emiiihjii>:
/*********************************************************************************************************
 ** Function name:           BMS_MOD
 ** Descriptions:            Initialization function of teh class
 *********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT,
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
		uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG_V, int _LAG_T) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000726:	619a      	str	r2, [r3, #24]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	22c8      	movs	r2, #200	@ 0xc8
 800072c:	61da      	str	r2, [r3, #28]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000734:	621a      	str	r2, [r3, #32]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800073c:	625a      	str	r2, [r3, #36]	@ 0x24
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000744:	629a      	str	r2, [r3, #40]	@ 0x28
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	699a      	ldr	r2, [r3, #24]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	6a1a      	ldr	r2, [r3, #32]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	639a      	str	r2, [r3, #56]	@ 0x38
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2200      	movs	r2, #0
 8000770:	641a      	str	r2, [r3, #64]	@ 0x40
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	645a      	str	r2, [r3, #68]	@ 0x44
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2200      	movs	r2, #0
 800077e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2200      	movs	r2, #0
 800078e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2200      	movs	r2, #0
 8000796:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2213      	movs	r2, #19
 800079e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	2203      	movs	r2, #3
 80007a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3354      	adds	r3, #84	@ 0x54
 80007ac:	2230      	movs	r2, #48	@ 0x30
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f00a fa35 	bl	800ac20 <memset>
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2200      	movs	r2, #0
 80007ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2200      	movs	r2, #0
 80007c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2200      	movs	r2, #0
 80007ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f241 0268 	movw	r2, #4200	@ 0x1068
 80007d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2200      	movs	r2, #0
 80007dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2200      	movs	r2, #0
 80007e4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2200      	movs	r2, #0
 80007ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	33a0      	adds	r3, #160	@ 0xa0
 80007f4:	224c      	movs	r2, #76	@ 0x4c
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f00a fa11 	bl	800ac20 <memset>
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	33ec      	adds	r3, #236	@ 0xec
 8000802:	2298      	movs	r2, #152	@ 0x98
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f00a fa0a 	bl	800ac20 <memset>
	CANID = _ID;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	601a      	str	r2, [r3, #0]
	LIMIT_MAX_V = _MAXV;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	609a      	str	r2, [r3, #8]
	LIMIT_MIN_V = _MINV;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	683a      	ldr	r2, [r7, #0]
 800081c:	60da      	str	r2, [r3, #12]
	LIMIT_MAX_T = _MAXT;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	69ba      	ldr	r2, [r7, #24]
 8000822:	611a      	str	r2, [r3, #16]
	NUM_CELLS = _NUMCELLS;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	7f3a      	ldrb	r2, [r7, #28]
 8000828:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	time_lim_plotted_volts += _LAG_V;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000832:	441a      	add	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	631a      	str	r2, [r3, #48]	@ 0x30
	time_lim_plotted_temps += _LAG_T;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800083c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800083e:	441a      	add	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	63da      	str	r2, [r3, #60]	@ 0x3c

	time_lim_sent_volts += _LAG_V;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800084a:	441a      	add	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	635a      	str	r2, [r3, #52]	@ 0x34
	time_lim_sent_temps += _LAG_T;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000856:	441a      	add	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	641a      	str	r2, [r3, #64]	@ 0x40

	time_lim_received_volts += _LAG_V;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000862:	441a      	add	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	639a      	str	r2, [r3, #56]	@ 0x38
	time_lim_received_temps += _LAG_T;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800086c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800086e:	441a      	add	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	645a      	str	r2, [r3, #68]	@ 0x44

}
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	4618      	mov	r0, r3
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <_ZN7BMS_MOD12voltage_infoEPc>:

/*********************************************************************************************************
 ** Function name:           info
 ** Descriptions:            Function for printing the class data
 *********************************************************************************************************/
void BMS_MOD::voltage_info(char *buffer) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]

	if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 800088a:	f001 f923 	bl	8001ad4 <getUARTState>
 800088e:	4603      	mov	r3, r0
 8000890:	2b20      	cmp	r3, #32
 8000892:	bf0c      	ite	eq
 8000894:	2301      	moveq	r3, #1
 8000896:	2300      	movne	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	f000 8082 	beq.w	80009a4 <_ZN7BMS_MOD12voltage_infoEPc+0x124>
		print((char*) "\n***********************");
 80008a0:	4850      	ldr	r0, [pc, #320]	@ (80009e4 <_ZN7BMS_MOD12voltage_infoEPc+0x164>)
 80008a2:	f001 f8db 	bl	8001a5c <print>
		print((char*) "         BMS");
 80008a6:	4850      	ldr	r0, [pc, #320]	@ (80009e8 <_ZN7BMS_MOD12voltage_infoEPc+0x168>)
 80008a8:	f001 f8d8 	bl	8001a5c <print>
		print((char*) "***********************");
 80008ac:	484f      	ldr	r0, [pc, #316]	@ (80009ec <_ZN7BMS_MOD12voltage_infoEPc+0x16c>)
 80008ae:	f001 f8d5 	bl	8001a5c <print>
		sprintf(buffer, " - ERROR:     %i", error);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	461a      	mov	r2, r3
 80008b8:	494d      	ldr	r1, [pc, #308]	@ (80009f0 <_ZN7BMS_MOD12voltage_infoEPc+0x170>)
 80008ba:	6838      	ldr	r0, [r7, #0]
 80008bc:	f00a f98e 	bl	800abdc <siprintf>
		print(buffer);
 80008c0:	6838      	ldr	r0, [r7, #0]
 80008c2:	f001 f8cb 	bl	8001a5c <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	4949      	ldr	r1, [pc, #292]	@ (80009f4 <_ZN7BMS_MOD12voltage_infoEPc+0x174>)
 80008ce:	6838      	ldr	r0, [r7, #0]
 80008d0:	f00a f984 	bl	800abdc <siprintf>
		print(buffer);
 80008d4:	6838      	ldr	r0, [r7, #0]
 80008d6:	f001 f8c1 	bl	8001a5c <print>
		sprintf(buffer, " - MAX V =    %i mV", MAX_V);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	461a      	mov	r2, r3
 80008e0:	4945      	ldr	r1, [pc, #276]	@ (80009f8 <_ZN7BMS_MOD12voltage_infoEPc+0x178>)
 80008e2:	6838      	ldr	r0, [r7, #0]
 80008e4:	f00a f97a 	bl	800abdc <siprintf>
		print(buffer);
 80008e8:	6838      	ldr	r0, [r7, #0]
 80008ea:	f001 f8b7 	bl	8001a5c <print>
		sprintf(buffer, " - MIN V =    %i mV", MIN_V);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008f4:	461a      	mov	r2, r3
 80008f6:	4941      	ldr	r1, [pc, #260]	@ (80009fc <_ZN7BMS_MOD12voltage_infoEPc+0x17c>)
 80008f8:	6838      	ldr	r0, [r7, #0]
 80008fa:	f00a f96f 	bl	800abdc <siprintf>
		print(buffer);
 80008fe:	6838      	ldr	r0, [r7, #0]
 8000900:	f001 f8ac 	bl	8001a5c <print>
		print((char*) "-----------------------");
 8000904:	483e      	ldr	r0, [pc, #248]	@ (8000a00 <_ZN7BMS_MOD12voltage_infoEPc+0x180>)
 8000906:	f001 f8a9 	bl	8001a5c <print>
		sprintf(buffer, "VOLTS (mV): [%i", cellVoltagemV[0]);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000910:	461a      	mov	r2, r3
 8000912:	493c      	ldr	r1, [pc, #240]	@ (8000a04 <_ZN7BMS_MOD12voltage_infoEPc+0x184>)
 8000914:	6838      	ldr	r0, [r7, #0]
 8000916:	f00a f961 	bl	800abdc <siprintf>
		printnl(buffer);
 800091a:	6838      	ldr	r0, [r7, #0]
 800091c:	f001 f8bc 	bl	8001a98 <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	e00f      	b.n	8000946 <_ZN7BMS_MOD12voltage_infoEPc+0xc6>
			sprintf(buffer, ", %i", cellVoltagemV[i]);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	68fa      	ldr	r2, [r7, #12]
 800092a:	3228      	adds	r2, #40	@ 0x28
 800092c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000930:	461a      	mov	r2, r3
 8000932:	4935      	ldr	r1, [pc, #212]	@ (8000a08 <_ZN7BMS_MOD12voltage_infoEPc+0x188>)
 8000934:	6838      	ldr	r0, [r7, #0]
 8000936:	f00a f951 	bl	800abdc <siprintf>
			printnl(buffer);
 800093a:	6838      	ldr	r0, [r7, #0]
 800093c:	f001 f8ac 	bl	8001a98 <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	3301      	adds	r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800094c:	461a      	mov	r2, r3
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	4293      	cmp	r3, r2
 8000952:	dbe8      	blt.n	8000926 <_ZN7BMS_MOD12voltage_infoEPc+0xa6>
		}

		for (int i = 0; i < NUM_CELLS; i++) {
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	e00e      	b.n	8000978 <_ZN7BMS_MOD12voltage_infoEPc+0xf8>
			voltage_acum += cellVoltagemV[i];
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	68b9      	ldr	r1, [r7, #8]
 8000964:	3128      	adds	r1, #40	@ 0x28
 8000966:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800096a:	441a      	add	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		for (int i = 0; i < NUM_CELLS; i++) {
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	3301      	adds	r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800097e:	461a      	mov	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	4293      	cmp	r3, r2
 8000984:	dbe9      	blt.n	800095a <_ZN7BMS_MOD12voltage_infoEPc+0xda>
		}

		print((char*) "]");
 8000986:	4821      	ldr	r0, [pc, #132]	@ (8000a0c <_ZN7BMS_MOD12voltage_infoEPc+0x18c>)
 8000988:	f001 f868 	bl	8001a5c <print>
		sprintf(buffer, " - V(max) = %i mV || V(min) = %i", MAX_V, MIN_V);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	695a      	ldr	r2, [r3, #20]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000996:	491e      	ldr	r1, [pc, #120]	@ (8000a10 <_ZN7BMS_MOD12voltage_infoEPc+0x190>)
 8000998:	6838      	ldr	r0, [r7, #0]
 800099a:	f00a f91f 	bl	800abdc <siprintf>
		print(buffer);
 800099e:	6838      	ldr	r0, [r7, #0]
 80009a0:	f001 f85c 	bl	8001a5c <print>
	}
	sprintf(buffer, "- BALANCING V = %i mV", BALANCING_V);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009aa:	461a      	mov	r2, r3
 80009ac:	4919      	ldr	r1, [pc, #100]	@ (8000a14 <_ZN7BMS_MOD12voltage_infoEPc+0x194>)
 80009ae:	6838      	ldr	r0, [r7, #0]
 80009b0:	f00a f914 	bl	800abdc <siprintf>
	print(buffer);
 80009b4:	6838      	ldr	r0, [r7, #0]
 80009b6:	f001 f851 	bl	8001a5c <print>

	sprintf(buffer, "- STACK VOLTAGE = %i V", voltage_acum / 1000);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009c0:	4a15      	ldr	r2, [pc, #84]	@ (8000a18 <_ZN7BMS_MOD12voltage_infoEPc+0x198>)
 80009c2:	fb82 1203 	smull	r1, r2, r2, r3
 80009c6:	1192      	asrs	r2, r2, #6
 80009c8:	17db      	asrs	r3, r3, #31
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	461a      	mov	r2, r3
 80009ce:	4913      	ldr	r1, [pc, #76]	@ (8000a1c <_ZN7BMS_MOD12voltage_infoEPc+0x19c>)
 80009d0:	6838      	ldr	r0, [r7, #0]
 80009d2:	f00a f903 	bl	800abdc <siprintf>
	print(buffer);
 80009d6:	6838      	ldr	r0, [r7, #0]
 80009d8:	f001 f840 	bl	8001a5c <print>
}
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	0800b534 	.word	0x0800b534
 80009e8:	0800b550 	.word	0x0800b550
 80009ec:	0800b560 	.word	0x0800b560
 80009f0:	0800b578 	.word	0x0800b578
 80009f4:	0800b58c 	.word	0x0800b58c
 80009f8:	0800b5a0 	.word	0x0800b5a0
 80009fc:	0800b5b4 	.word	0x0800b5b4
 8000a00:	0800b5c8 	.word	0x0800b5c8
 8000a04:	0800b5e0 	.word	0x0800b5e0
 8000a08:	0800b5f0 	.word	0x0800b5f0
 8000a0c:	0800b5f8 	.word	0x0800b5f8
 8000a10:	0800b5fc 	.word	0x0800b5fc
 8000a14:	0800b620 	.word	0x0800b620
 8000a18:	10624dd3 	.word	0x10624dd3
 8000a1c:	0800b638 	.word	0x0800b638

08000a20 <_ZN7BMS_MOD5parseEmPhm>:

/*********************************************************************************************************
 ** Function name:           parse
 ** Descriptions:            Function for parsing the received data via CAN protocol
 *********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	@ 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
 8000a2c:	603b      	str	r3, [r7, #0]
	if (id > CANID && id < CANID + 30) {
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	f240 814b 	bls.w	8000cd0 <_ZN7BMS_MOD5parseEmPhm+0x2b0>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	331e      	adds	r3, #30
 8000a40:	68ba      	ldr	r2, [r7, #8]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	f080 8144 	bcs.w	8000cd0 <_ZN7BMS_MOD5parseEmPhm+0x2b0>
		int m = id % CANID;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a52:	fb01 f202 	mul.w	r2, r1, r2
 8000a56:	1a9b      	subs	r3, r3, r2
 8000a58:	617b      	str	r3, [r7, #20]
		int pos = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
		if (m >= 1 && m <= 5) {
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f340 80a6 	ble.w	8000bb2 <_ZN7BMS_MOD5parseEmPhm+0x192>
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	2b05      	cmp	r3, #5
 8000a6a:	f300 80a2 	bgt.w	8000bb2 <_ZN7BMS_MOD5parseEmPhm+0x192>
			time_lim_received_volts = t + TIME_LIM_RECV_VOLTS;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	6a1a      	ldr	r2, [r3, #32]
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	441a      	add	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	639a      	str	r2, [r3, #56]	@ 0x38

			for (int i = 0; i < 4; i++) {
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a7e:	e05a      	b.n	8000b36 <_ZN7BMS_MOD5parseEmPhm+0x116>
				pos = (m - 1) * 4 + i;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a88:	4413      	add	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
				if (pos >= 19)
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	2b12      	cmp	r3, #18
 8000a90:	dc55      	bgt.n	8000b3e <_ZN7BMS_MOD5parseEmPhm+0x11e>
					break;

				cellVoltagemV[pos] = (buf[2 * i] << 8) | buf[2 * i + 1];
 8000a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	461a      	mov	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	021b      	lsls	r3, r3, #8
 8000aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aa2:	0052      	lsls	r2, r2, #1
 8000aa4:	3201      	adds	r2, #1
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	440a      	add	r2, r1
 8000aaa:	7812      	ldrb	r2, [r2, #0]
 8000aac:	ea43 0102 	orr.w	r1, r3, r2
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	3228      	adds	r2, #40	@ 0x28
 8000ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				if ((cellVoltagemV[pos] > LIMIT_MAX_V
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	3228      	adds	r2, #40	@ 0x28
 8000ac0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dc08      	bgt.n	8000ade <_ZN7BMS_MOD5parseEmPhm+0xbe>
						|| cellVoltagemV[pos] < LIMIT_MIN_V)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	3228      	adds	r2, #40	@ 0x28
 8000ad2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	da21      	bge.n	8000b22 <_ZN7BMS_MOD5parseEmPhm+0x102>
						&& pos < NUM_CELLS) {
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	da1a      	bge.n	8000b22 <_ZN7BMS_MOD5parseEmPhm+0x102>
					flag_error_volt[pos]++;
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	3314      	adds	r3, #20
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4413      	add	r3, r2
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	1c5a      	adds	r2, r3, #1
 8000afa:	68f9      	ldr	r1, [r7, #12]
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	3314      	adds	r3, #20
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	440b      	add	r3, r1
 8000b04:	605a      	str	r2, [r3, #4]
					if (flag_error_volt[pos] >= max_flag)
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	3314      	adds	r3, #20
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	4413      	add	r3, r2
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b16:	429a      	cmp	r2, r3
 8000b18:	db0a      	blt.n	8000b30 <_ZN7BMS_MOD5parseEmPhm+0x110>
						error = BMS_ERROR_VOLTS;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	605a      	str	r2, [r3, #4]
					if (flag_error_volt[pos] >= max_flag)
 8000b20:	e006      	b.n	8000b30 <_ZN7BMS_MOD5parseEmPhm+0x110>
				} else {
					flag_error_volt[pos] = 0;
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	3314      	adds	r3, #20
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
			for (int i = 0; i < 4; i++) {
 8000b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b32:	3301      	adds	r3, #1
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	dda1      	ble.n	8000a80 <_ZN7BMS_MOD5parseEmPhm+0x60>
 8000b3c:	e000      	b.n	8000b40 <_ZN7BMS_MOD5parseEmPhm+0x120>
					break;
 8000b3e:	bf00      	nop
				}
			}

			MAX_V = cellVoltagemV[0];
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	615a      	str	r2, [r3, #20]
			MIN_V = cellVoltagemV[0];
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			for (int i = 1; i < 19; i++) {
 8000b56:	2301      	movs	r3, #1
 8000b58:	623b      	str	r3, [r7, #32]
 8000b5a:	e025      	b.n	8000ba8 <_ZN7BMS_MOD5parseEmPhm+0x188>
				if (cellVoltagemV[i] > MAX_V)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6a3a      	ldr	r2, [r7, #32]
 8000b60:	3228      	adds	r2, #40	@ 0x28
 8000b62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	dd07      	ble.n	8000b7e <_ZN7BMS_MOD5parseEmPhm+0x15e>
					MAX_V = cellVoltagemV[i];
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	6a3a      	ldr	r2, [r7, #32]
 8000b72:	3228      	adds	r2, #40	@ 0x28
 8000b74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	615a      	str	r2, [r3, #20]
 8000b7c:	e011      	b.n	8000ba2 <_ZN7BMS_MOD5parseEmPhm+0x182>
				else if (cellVoltagemV[i] < MIN_V)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	6a3a      	ldr	r2, [r7, #32]
 8000b82:	3228      	adds	r2, #40	@ 0x28
 8000b84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	da07      	bge.n	8000ba2 <_ZN7BMS_MOD5parseEmPhm+0x182>
					MIN_V = cellVoltagemV[i];
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	6a3a      	ldr	r2, [r7, #32]
 8000b96:	3228      	adds	r2, #40	@ 0x28
 8000b98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			for (int i = 1; i < 19; i++) {
 8000ba2:	6a3b      	ldr	r3, [r7, #32]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	623b      	str	r3, [r7, #32]
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	2b12      	cmp	r3, #18
 8000bac:	ddd6      	ble.n	8000b5c <_ZN7BMS_MOD5parseEmPhm+0x13c>
			}

			return true;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e08f      	b.n	8000cd2 <_ZN7BMS_MOD5parseEmPhm+0x2b2>

		} else if (m >= 21 && m <= 25) {
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2b14      	cmp	r3, #20
 8000bb6:	f340 808b 	ble.w	8000cd0 <_ZN7BMS_MOD5parseEmPhm+0x2b0>
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	2b19      	cmp	r3, #25
 8000bbe:	f300 8087 	bgt.w	8000cd0 <_ZN7BMS_MOD5parseEmPhm+0x2b0>
			// m = 21 → packet 0, m = 25 → packet 4
			time_lim_received_temps = t + TIME_LIM_RECV_TEMPS;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	441a      	add	r2, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	645a      	str	r2, [r3, #68]	@ 0x44
			if (flag_charger == 1)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d104      	bne.n	8000be2 <_ZN7BMS_MOD5parseEmPhm+0x1c2>
				module_send_message_CAN1(id, buf, 8);
 8000bd8:	2208      	movs	r2, #8
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	68b8      	ldr	r0, [r7, #8]
 8000bde:	f000 fefb 	bl	80019d8 <module_send_message_CAN1>

			for (int i = 0; i < 8; i++) {
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
 8000be6:	e023      	b.n	8000c30 <_ZN7BMS_MOD5parseEmPhm+0x210>
				pos = (m - 21) * 8 + i;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	3b15      	subs	r3, #21
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	69fa      	ldr	r2, [r7, #28]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
				if (pos >= 38)
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	2b25      	cmp	r3, #37	@ 0x25
 8000bf8:	dc1e      	bgt.n	8000c38 <_ZN7BMS_MOD5parseEmPhm+0x218>
					break;

				cellTemperature[pos] = buf[i];
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	4413      	add	r3, r2
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	4619      	mov	r1, r3
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	333a      	adds	r3, #58	@ 0x3a
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4413      	add	r3, r2
 8000c0e:	6059      	str	r1, [r3, #4]
				if (cellTemperature[pos] > LIMIT_MAX_T)
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	333a      	adds	r3, #58	@ 0x3a
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	691b      	ldr	r3, [r3, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dd02      	ble.n	8000c2a <_ZN7BMS_MOD5parseEmPhm+0x20a>
					error = BMS_ERROR_TEMP;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2203      	movs	r2, #3
 8000c28:	605a      	str	r2, [r3, #4]
			for (int i = 0; i < 8; i++) {
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	61fb      	str	r3, [r7, #28]
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	2b07      	cmp	r3, #7
 8000c34:	ddd8      	ble.n	8000be8 <_ZN7BMS_MOD5parseEmPhm+0x1c8>
 8000c36:	e000      	b.n	8000c3a <_ZN7BMS_MOD5parseEmPhm+0x21a>
					break;
 8000c38:	bf00      	nop
			}

			if (m == 25) {
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	2b19      	cmp	r3, #25
 8000c3e:	d145      	bne.n	8000ccc <_ZN7BMS_MOD5parseEmPhm+0x2ac>
				MAX_T = cellTemperature[0];
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
				MIN_T = cellTemperature[0];
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				for (int i = 1; i < 38; i++) {
 8000c58:	2301      	movs	r3, #1
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	e033      	b.n	8000cc6 <_ZN7BMS_MOD5parseEmPhm+0x2a6>
					if (cellTemperature[i] > MAX_T)
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	333a      	adds	r3, #58	@ 0x3a
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dd09      	ble.n	8000c88 <_ZN7BMS_MOD5parseEmPhm+0x268>
						MAX_T = cellTemperature[i];
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	333a      	adds	r3, #58	@ 0x3a
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	4413      	add	r3, r2
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8000c86:	e01b      	b.n	8000cc0 <_ZN7BMS_MOD5parseEmPhm+0x2a0>
					else if (cellTemperature[i] < MIN_T
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	333a      	adds	r3, #58	@ 0x3a
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	da10      	bge.n	8000cc0 <_ZN7BMS_MOD5parseEmPhm+0x2a0>
							&& cellTemperature[i] != 0)
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	333a      	adds	r3, #58	@ 0x3a
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d008      	beq.n	8000cc0 <_ZN7BMS_MOD5parseEmPhm+0x2a0>
						MIN_T = cellTemperature[i];
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	333a      	adds	r3, #58	@ 0x3a
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				for (int i = 1; i < 38; i++) {
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	2b25      	cmp	r3, #37	@ 0x25
 8000cca:	ddc8      	ble.n	8000c5e <_ZN7BMS_MOD5parseEmPhm+0x23e>
				}
			}


			return true;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e000      	b.n	8000cd2 <_ZN7BMS_MOD5parseEmPhm+0x2b2>
		}

	}

	return false;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3728      	adds	r7, #40	@ 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <_ZN7BMS_MOD13query_voltageEmPc>:

/*********************************************************************************************************
 ** Function name:           query_voltage
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/
int BMS_MOD::query_voltage(uint32_t time, char *buffer) {
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	60f8      	str	r0, [r7, #12]
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
	// Shunt voltage in milivolts

	message_balancing[1] = BALANCING_V & 0xFF; // Coment this two lines for disabling the balancing
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
	message_balancing[0] = (BALANCING_V >> 8) & 0xFF; // Coment this two lines for disabling the balancing
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000cfa:	121b      	asrs	r3, r3, #8
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

	if (time > time_lim_sent_volts) {
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d08:	68ba      	ldr	r2, [r7, #8]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d91d      	bls.n	8000d4a <_ZN7BMS_MOD13query_voltageEmPc+0x70>
		time_lim_sent_volts += TIME_LIM_SEND_VOLTS;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	441a      	add	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	635a      	str	r2, [r3, #52]	@ 0x34
		if (CANID != 0x00) { //It keeps sending 0x00 and dont know where
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d012      	beq.n	8000d4a <_ZN7BMS_MOD13query_voltageEmPc+0x70>
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3348      	adds	r3, #72	@ 0x48
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f000 fe74 	bl	8001a1c <module_send_message_CAN2>
 8000d34:	4603      	mov	r3, r0
					!= HAL_OK) {
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	bf14      	ite	ne
 8000d3a:	2301      	movne	r3, #1
 8000d3c:	2300      	moveq	r3, #0
 8000d3e:	b2db      	uxtb	r3, r3
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d002      	beq.n	8000d4a <_ZN7BMS_MOD13query_voltageEmPc+0x70>
				error = BMS_ERROR_COMMUNICATION;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2201      	movs	r2, #1
 8000d48:	605a      	str	r2, [r3, #4]
			}
		}

	}

	if (time > time_lim_received_volts) {
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d902      	bls.n	8000d5a <_ZN7BMS_MOD13query_voltageEmPc+0x80>
		error = BMS_ERROR_COMMUNICATION;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2201      	movs	r2, #1
 8000d58:	605a      	str	r2, [r3, #4]
	}

	if (TIME_LIM_PLOT_VOLTS > 0 && time > time_lim_plotted_volts) {
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d00f      	beq.n	8000d82 <_ZN7BMS_MOD13query_voltageEmPc+0xa8>
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d90a      	bls.n	8000d82 <_ZN7BMS_MOD13query_voltageEmPc+0xa8>
		time_lim_plotted_volts += TIME_LIM_PLOT_VOLTS;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	441a      	add	r2, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	631a      	str	r2, [r3, #48]	@ 0x30
		voltage_info(buffer);
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	68f8      	ldr	r0, [r7, #12]
 8000d7e:	f7ff fd7f 	bl	8000880 <_ZN7BMS_MOD12voltage_infoEPc>
	}

	for (int i = 0; i < NUM_CELLS; i++) {
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	e00e      	b.n	8000da6 <_ZN7BMS_MOD13query_voltageEmPc+0xcc>
		voltage_acum += cellVoltagemV[i];
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	6979      	ldr	r1, [r7, #20]
 8000d92:	3128      	adds	r1, #40	@ 0x28
 8000d94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d98:	441a      	add	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	for (int i = 0; i < NUM_CELLS; i++) {
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	3301      	adds	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000dac:	461a      	mov	r2, r3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	4293      	cmp	r3, r2
 8000db2:	dbe9      	blt.n	8000d88 <_ZN7BMS_MOD13query_voltageEmPc+0xae>
	}
	return error;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	685b      	ldr	r3, [r3, #4]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2202      	movs	r2, #2
 8000de4:	731a      	strb	r2, [r3, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2202      	movs	r2, #2
 8000dea:	611a      	str	r2, [r3, #16]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000df2:	615a      	str	r2, [r3, #20]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2264      	movs	r2, #100	@ 0x64
 8000df8:	619a      	str	r2, [r3, #24]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4a18      	ldr	r2, [pc, #96]	@ (8000e60 <_ZN7CPU_MODC1Emmi+0xa0>)
 8000dfe:	61da      	str	r2, [r3, #28]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	695a      	ldr	r2, [r3, #20]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	621a      	str	r2, [r3, #32]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	69da      	ldr	r2, [r3, #28]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6a1a      	ldr	r2, [r3, #32]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	441a      	add	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	441a      	add	r2, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	441a      	add	r2, r3
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	4618      	mov	r0, r3
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	000f4240 	.word	0x000f4240

08000e64 <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e78:	d131      	bne.n	8000ede <_ZN7CPU_MOD5parseEmPhm+0x7a>
        error = CPU_OK;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	69da      	ldr	r2, [r3, #28]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	441a      	add	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	7812      	ldrb	r2, [r2, #0]
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8000ea6:	dd18      	ble.n	8000eda <_ZN7CPU_MOD5parseEmPhm+0x76>
            error = CPU_BUS_LINE_OK;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2202      	movs	r2, #2
 8000eac:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6818      	ldr	r0, [r3, #0]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	330c      	adds	r3, #12
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f000 fd8d 	bl	80019d8 <module_send_message_CAN1>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	bf14      	ite	ne
 8000ec4:	2301      	movne	r3, #1
 8000ec6:	2300      	moveq	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d005      	beq.n	8000eda <_ZN7CPU_MOD5parseEmPhm+0x76>
                error = CPU_ERROR_COMMUNICATION;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	609a      	str	r2, [r3, #8]
                print((char*)"error message");
 8000ed4:	4804      	ldr	r0, [pc, #16]	@ (8000ee8 <_ZN7CPU_MOD5parseEmPhm+0x84>)
 8000ed6:	f000 fdc1 	bl	8001a5c <print>
            }

        }
        return true;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <_ZN7CPU_MOD5parseEmPhm+0x7c>
    }
    return false;
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	0800b7ac 	.word	0x0800b7ac

08000eec <_ZN7CPU_MOD11updateStateEi>:
        info(buffer);
    }
    return error;
}

void CPU_MOD::updateState(int s) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	731a      	strb	r2, [r3, #12]
    current_state = s;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	611a      	str	r2, [r3, #16]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX)
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	721a      	strb	r2, [r3, #8]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2200      	movs	r2, #0
 8000f32:	725a      	strb	r2, [r3, #9]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000f5e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	22fa      	movs	r2, #250	@ 0xfa
 8000f64:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2232      	movs	r2, #50	@ 0x32
 8000f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2232      	movs	r2, #50	@ 0x32
 8000f70:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2200      	movs	r2, #0
 8000f76:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2200      	movs	r2, #0
 8000f82:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2200      	movs	r2, #0
 8000f88:	641a      	str	r2, [r3, #64]	@ 0x40
{
    CANID = ID;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	605a      	str	r2, [r3, #4]
    C_MAX = _C_MAX;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	601a      	str	r2, [r3, #0]
    flag_error_current = 1;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	621a      	str	r2, [r3, #32]
}
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <_ZN11Current_MOD5queryEiPc>:
// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char* buffer)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
    error = Current_OK;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	635a      	str	r2, [r3, #52]	@ 0x34

    VoltagemV = readAnalogValue();
 8000fbe:	f000 fd93 	bl	8001ae8 <readAnalogValue>
 8000fc2:	eef0 7a40 	vmov.f32	s15, s0
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	edc3 7a04 	vstr	s15, [r3, #16]

    //printValue(VoltagemV);

    if(VoltagemV < 400){
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fd2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001014 <_ZN11Current_MOD5queryEiPc+0x68>
 8000fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fde:	d509      	bpl.n	8000ff4 <_ZN11Current_MOD5queryEiPc+0x48>
    	flag_error_current = 1;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	621a      	str	r2, [r3, #32]
    	flag_current = 1;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = 1;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ff2:	e008      	b.n	8001006 <_ZN11Current_MOD5queryEiPc+0x5a>
    }
    else{
    	flag_error_current = 0;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	621a      	str	r2, [r3, #32]
    	flag_current = 0;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = Current_OK;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2200      	movs	r2, #0
 8001004:	635a      	str	r2, [r3, #52]	@ 0x34
        time_lim_plotted += TIME_LIM_PLOT;

    }
*/
    //info(buffer);
    return error;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	43c80000 	.word	0x43c80000

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b085      	sub	sp, #20
 800101c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101e:	f001 faeb 	bl	80025f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001022:	f000 f89d 	bl	8001160 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001026:	f000 f917 	bl	8001258 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102a:	f000 fbc1 	bl	80017b0 <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 800102e:	f000 fad5 	bl	80015dc <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 8001032:	f000 fa49 	bl	80014c8 <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 8001036:	f000 fb5b 	bl	80016f0 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 800103a:	f000 f941 	bl	80012c0 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 800103e:	f000 f9c9 	bl	80013d4 <_ZL12MX_ADC3_Initv>
  /* USER CODE BEGIN 2 */

  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 8001042:	483d      	ldr	r0, [pc, #244]	@ (8001138 <main+0x120>)
 8001044:	f003 fe6c 	bl	8004d20 <HAL_FDCAN_Start>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	bf0c      	ite	eq
 800104e:	2301      	moveq	r3, #1
 8001050:	2300      	movne	r3, #0
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <main+0x46>
	  print((char*)"CAN_ACU iniciado");
 8001058:	4838      	ldr	r0, [pc, #224]	@ (800113c <main+0x124>)
 800105a:	f000 fcff 	bl	8001a5c <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 800105e:	2200      	movs	r2, #0
 8001060:	2101      	movs	r1, #1
 8001062:	4835      	ldr	r0, [pc, #212]	@ (8001138 <main+0x120>)
 8001064:	f004 f84e 	bl	8005104 <HAL_FDCAN_ActivateNotification>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	bf0c      	ite	eq
 800106e:	2301      	moveq	r3, #1
 8001070:	2300      	movne	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <main+0x66>
  {
	  print((char*)"CAN_ACU notification");
 8001078:	4831      	ldr	r0, [pc, #196]	@ (8001140 <main+0x128>)
 800107a:	f000 fcef 	bl	8001a5c <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 800107e:	4831      	ldr	r0, [pc, #196]	@ (8001144 <main+0x12c>)
 8001080:	f003 fe4e 	bl	8004d20 <HAL_FDCAN_Start>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	bf0c      	ite	eq
 800108a:	2301      	moveq	r3, #1
 800108c:	2300      	movne	r3, #0
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <main+0x82>
	  print((char*)"CAN_BMS iniciado");
 8001094:	482c      	ldr	r0, [pc, #176]	@ (8001148 <main+0x130>)
 8001096:	f000 fce1 	bl	8001a5c <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 800109a:	482c      	ldr	r0, [pc, #176]	@ (800114c <main+0x134>)
 800109c:	f002 f86c 	bl	8003178 <HAL_ADC_Start>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	bf0c      	ite	eq
 80010a6:	2301      	moveq	r3, #1
 80010a8:	2300      	movne	r3, #0
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <main+0x9e>
	  print((char*)"ADC iniciado");
 80010b0:	4827      	ldr	r0, [pc, #156]	@ (8001150 <main+0x138>)
 80010b2:	f000 fcd3 	bl	8001a5c <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 80010b6:	f000 fd3f 	bl	8001b38 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 80010ba:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <main+0x13c>)
 80010bc:	4a26      	ldr	r2, [pc, #152]	@ (8001158 <main+0x140>)
 80010be:	2140      	movs	r1, #64	@ 0x40
 80010c0:	4820      	ldr	r0, [pc, #128]	@ (8001144 <main+0x12c>)
 80010c2:	f003 feb3 	bl	8004e2c <HAL_FDCAN_GetRxMessage>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	bf0c      	ite	eq
 80010cc:	2301      	moveq	r3, #1
 80010ce:	2300      	movne	r3, #0
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0ef      	beq.n	80010b6 <main+0x9e>

		  msg_bms.id = RxHeader_bms.Identifier;
 80010d6:	4b20      	ldr	r3, [pc, #128]	@ (8001158 <main+0x140>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a20      	ldr	r2, [pc, #128]	@ (800115c <main+0x144>)
 80010dc:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 80010de:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <main+0x140>)
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <main+0x144>)
 80010e6:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	e00c      	b.n	8001108 <main+0xf0>
 80010ee:	4a19      	ldr	r2, [pc, #100]	@ (8001154 <main+0x13c>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	7819      	ldrb	r1, [r3, #0]
 80010f6:	4a19      	ldr	r2, [pc, #100]	@ (800115c <main+0x144>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	3305      	adds	r3, #5
 80010fe:	460a      	mov	r2, r1
 8001100:	701a      	strb	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3301      	adds	r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b07      	cmp	r3, #7
 800110c:	ddef      	ble.n	80010ee <main+0xd6>
		  msg_bms.bus = 2;
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <main+0x144>)
 8001110:	2202      	movs	r2, #2
 8001112:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 8001114:	f001 faf6 	bl	8002704 <HAL_GetTick>
 8001118:	4603      	mov	r3, r0
 800111a:	4a10      	ldr	r2, [pc, #64]	@ (800115c <main+0x144>)
 800111c:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <main+0x144>)
 8001120:	466c      	mov	r4, sp
 8001122:	f103 0210 	add.w	r2, r3, #16
 8001126:	e892 0003 	ldmia.w	r2, {r0, r1}
 800112a:	e884 0003 	stmia.w	r4, {r0, r1}
 800112e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001130:	f000 fe82 	bl	8001e38 <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001134:	e7bf      	b.n	80010b6 <main+0x9e>
 8001136:	bf00      	nop
 8001138:	24000164 	.word	0x24000164
 800113c:	0800b7bc 	.word	0x0800b7bc
 8001140:	0800b7d0 	.word	0x0800b7d0
 8001144:	24000204 	.word	0x24000204
 8001148:	0800b7e8 	.word	0x0800b7e8
 800114c:	240000f4 	.word	0x240000f4
 8001150:	0800b7fc 	.word	0x0800b7fc
 8001154:	240003d0 	.word	0x240003d0
 8001158:	240003a8 	.word	0x240003a8
 800115c:	2400043c 	.word	0x2400043c

08001160 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b09c      	sub	sp, #112	@ 0x70
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800116a:	224c      	movs	r2, #76	@ 0x4c
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f009 fd56 	bl	800ac20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2220      	movs	r2, #32
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f009 fd50 	bl	800ac20 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001180:	2002      	movs	r0, #2
 8001182:	f004 ff21 	bl	8005fc8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	4b32      	ldr	r3, [pc, #200]	@ (8001254 <_Z18SystemClock_Configv+0xf4>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	4a31      	ldr	r2, [pc, #196]	@ (8001254 <_Z18SystemClock_Configv+0xf4>)
 8001190:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001194:	6193      	str	r3, [r2, #24]
 8001196:	4b2f      	ldr	r3, [pc, #188]	@ (8001254 <_Z18SystemClock_Configv+0xf4>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011a2:	bf00      	nop
 80011a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001254 <_Z18SystemClock_Configv+0xf4>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011b0:	bf14      	ite	ne
 80011b2:	2301      	movne	r3, #1
 80011b4:	2300      	moveq	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f3      	bne.n	80011a4 <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011bc:	2301      	movs	r3, #1
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c6:	2302      	movs	r3, #2
 80011c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ca:	2302      	movs	r3, #2
 80011cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80011d2:	232c      	movs	r3, #44	@ 0x2c
 80011d4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80011d6:	2301      	movs	r3, #1
 80011d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011da:	2304      	movs	r3, #4
 80011dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011de:	2302      	movs	r3, #2
 80011e0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011e2:	230c      	movs	r3, #12
 80011e4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f2:	4618      	mov	r0, r3
 80011f4:	f004 ff22 	bl	800603c <HAL_RCC_OscConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	bf14      	ite	ne
 80011fe:	2301      	movne	r3, #1
 8001200:	2300      	moveq	r3, #0
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8001208:	f000 fc90 	bl	8001b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120c:	233f      	movs	r3, #63	@ 0x3f
 800120e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001210:	2303      	movs	r3, #3
 8001212:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001218:	2308      	movs	r3, #8
 800121a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800121c:	2340      	movs	r3, #64	@ 0x40
 800121e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001220:	2340      	movs	r3, #64	@ 0x40
 8001222:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001224:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001228:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800122a:	2340      	movs	r3, #64	@ 0x40
 800122c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2103      	movs	r1, #3
 8001232:	4618      	mov	r0, r3
 8001234:	f005 fadc 	bl	80067f0 <HAL_RCC_ClockConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	bf14      	ite	ne
 800123e:	2301      	movne	r3, #1
 8001240:	2300      	moveq	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 8001248:	f000 fc70 	bl	8001b2c <Error_Handler>
  }
}
 800124c:	bf00      	nop
 800124e:	3770      	adds	r7, #112	@ 0x70
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	58024800 	.word	0x58024800

08001258 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b0ae      	sub	sp, #184	@ 0xb8
 800125c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800125e:	463b      	mov	r3, r7
 8001260:	22b8      	movs	r2, #184	@ 0xb8
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f009 fcdb 	bl	800ac20 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800126a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800126e:	f04f 0300 	mov.w	r3, #0
 8001272:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001276:	2302      	movs	r3, #2
 8001278:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800127a:	2310      	movs	r3, #16
 800127c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800127e:	2302      	movs	r3, #2
 8001280:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001282:	2302      	movs	r3, #2
 8001284:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001286:	2302      	movs	r3, #2
 8001288:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800128a:	23c0      	movs	r3, #192	@ 0xc0
 800128c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4618      	mov	r0, r3
 80012a0:	f005 fe32 	bl	8006f08 <HAL_RCCEx_PeriphCLKConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	bf14      	ite	ne
 80012aa:	2301      	movne	r3, #1
 80012ac:	2300      	moveq	r3, #0
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 80012b4:	f000 fc3a 	bl	8001b2c <Error_Handler>
  }
}
 80012b8:	bf00      	nop
 80012ba:	37b8      	adds	r7, #184	@ 0xb8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08c      	sub	sp, #48	@ 0x30
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012d2:	463b      	mov	r3, r7
 80012d4:	2224      	movs	r2, #36	@ 0x24
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f009 fca1 	bl	800ac20 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012de:	4b3a      	ldr	r3, [pc, #232]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 80012e0:	4a3a      	ldr	r2, [pc, #232]	@ (80013cc <_ZL12MX_ADC1_Initv+0x10c>)
 80012e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012e4:	4b38      	ldr	r3, [pc, #224]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ea:	4b37      	ldr	r3, [pc, #220]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 80012ec:	2208      	movs	r2, #8
 80012ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012f0:	4b35      	ldr	r3, [pc, #212]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012f6:	4b34      	ldr	r3, [pc, #208]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 80012f8:	2204      	movs	r2, #4
 80012fa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012fc:	4b32      	ldr	r3, [pc, #200]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 80012fe:	2200      	movs	r2, #0
 8001300:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001302:	4b31      	ldr	r3, [pc, #196]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 8001304:	2200      	movs	r2, #0
 8001306:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001308:	4b2f      	ldr	r3, [pc, #188]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 800130a:	2201      	movs	r2, #1
 800130c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800130e:	4b2e      	ldr	r3, [pc, #184]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001316:	4b2c      	ldr	r3, [pc, #176]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 8001318:	2200      	movs	r2, #0
 800131a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800131c:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 800131e:	2200      	movs	r2, #0
 8001320:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001322:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 8001324:	2200      	movs	r2, #0
 8001326:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001328:	4b27      	ldr	r3, [pc, #156]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 800132a:	2200      	movs	r2, #0
 800132c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800132e:	4b26      	ldr	r3, [pc, #152]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 8001330:	2200      	movs	r2, #0
 8001332:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001334:	4b24      	ldr	r3, [pc, #144]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800133c:	4b22      	ldr	r3, [pc, #136]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 800133e:	2201      	movs	r2, #1
 8001340:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001342:	4821      	ldr	r0, [pc, #132]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 8001344:	f001 fd10 	bl	8002d68 <HAL_ADC_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	bf14      	ite	ne
 800134e:	2301      	movne	r3, #1
 8001350:	2300      	moveq	r3, #0
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8001358:	f000 fbe8 	bl	8001b2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001360:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001364:	4619      	mov	r1, r3
 8001366:	4818      	ldr	r0, [pc, #96]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 8001368:	f003 f894 	bl	8004494 <HAL_ADCEx_MultiModeConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	bf14      	ite	ne
 8001372:	2301      	movne	r3, #1
 8001374:	2300      	moveq	r3, #0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 800137c:	f000 fbd6 	bl	8001b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <_ZL12MX_ADC1_Initv+0x110>)
 8001382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001384:	2306      	movs	r3, #6
 8001386:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800138c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001390:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001392:	2304      	movs	r3, #4
 8001394:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	4619      	mov	r1, r3
 80013a4:	4808      	ldr	r0, [pc, #32]	@ (80013c8 <_ZL12MX_ADC1_Initv+0x108>)
 80013a6:	f002 f8e7 	bl	8003578 <HAL_ADC_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bf14      	ite	ne
 80013b0:	2301      	movne	r3, #1
 80013b2:	2300      	moveq	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <_ZL12MX_ADC1_Initv+0xfe>
  {
    Error_Handler();
 80013ba:	f000 fbb7 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	3730      	adds	r7, #48	@ 0x30
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	24000084 	.word	0x24000084
 80013cc:	40022000 	.word	0x40022000
 80013d0:	08600004 	.word	0x08600004

080013d4 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2224      	movs	r2, #36	@ 0x24
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f009 fc1d 	bl	800ac20 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013e6:	4b35      	ldr	r3, [pc, #212]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 80013e8:	4a35      	ldr	r2, [pc, #212]	@ (80014c0 <_ZL12MX_ADC3_Initv+0xec>)
 80013ea:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013ec:	4b33      	ldr	r3, [pc, #204]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 80013f2:	4b32      	ldr	r3, [pc, #200]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 80013f4:	220c      	movs	r2, #12
 80013f6:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80013f8:	4b30      	ldr	r3, [pc, #192]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013fe:	4b2f      	ldr	r3, [pc, #188]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001404:	4b2d      	ldr	r3, [pc, #180]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 8001406:	2204      	movs	r2, #4
 8001408:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800140a:	4b2c      	ldr	r3, [pc, #176]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 800140c:	2200      	movs	r2, #0
 800140e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001410:	4b2a      	ldr	r3, [pc, #168]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 8001412:	2200      	movs	r2, #0
 8001414:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001416:	4b29      	ldr	r3, [pc, #164]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 8001418:	2201      	movs	r2, #1
 800141a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800141c:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001424:	4b25      	ldr	r3, [pc, #148]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 8001426:	2200      	movs	r2, #0
 8001428:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800142a:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 800142c:	2200      	movs	r2, #0
 800142e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001430:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001438:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 800143a:	2200      	movs	r2, #0
 800143c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800143e:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 8001440:	2200      	movs	r2, #0
 8001442:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001444:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 8001446:	2200      	movs	r2, #0
 8001448:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800144a:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 800144c:	2200      	movs	r2, #0
 800144e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001450:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8001458:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 800145a:	2200      	movs	r2, #0
 800145c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800145e:	4817      	ldr	r0, [pc, #92]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 8001460:	f001 fc82 	bl	8002d68 <HAL_ADC_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	bf14      	ite	ne
 800146a:	2301      	movne	r3, #1
 800146c:	2300      	moveq	r3, #0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 8001474:	f000 fb5a 	bl	8001b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <_ZL12MX_ADC3_Initv+0xf0>)
 800147a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800147c:	2306      	movs	r3, #6
 800147e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001484:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001488:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800148a:	2304      	movs	r3, #4
 800148c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4808      	ldr	r0, [pc, #32]	@ (80014bc <_ZL12MX_ADC3_Initv+0xe8>)
 800149c:	f002 f86c 	bl	8003578 <HAL_ADC_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	bf14      	ite	ne
 80014a6:	2301      	movne	r3, #1
 80014a8:	2300      	moveq	r3, #0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 80014b0:	f000 fb3c 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	3728      	adds	r7, #40	@ 0x28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	240000f4 	.word	0x240000f4
 80014c0:	58026000 	.word	0x58026000
 80014c4:	1d500080 	.word	0x1d500080

080014c8 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80014ce:	4b41      	ldr	r3, [pc, #260]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80014d0:	4a41      	ldr	r2, [pc, #260]	@ (80015d8 <_ZL14MX_FDCAN1_Initv+0x110>)
 80014d2:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80014d4:	4b3f      	ldr	r3, [pc, #252]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80014d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014da:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80014dc:	4b3d      	ldr	r3, [pc, #244]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80014e2:	4b3c      	ldr	r3, [pc, #240]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80014e8:	4b3a      	ldr	r3, [pc, #232]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80014ee:	4b39      	ldr	r3, [pc, #228]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 80014f4:	4b37      	ldr	r3, [pc, #220]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80014f6:	2203      	movs	r2, #3
 80014f8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80014fa:	4b36      	ldr	r3, [pc, #216]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 8001500:	4b34      	ldr	r3, [pc, #208]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001502:	220a      	movs	r2, #10
 8001504:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8001506:	4b33      	ldr	r3, [pc, #204]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001508:	2205      	movs	r2, #5
 800150a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800150c:	4b31      	ldr	r3, [pc, #196]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800150e:	2201      	movs	r2, #1
 8001510:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001512:	4b30      	ldr	r3, [pc, #192]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001514:	2201      	movs	r2, #1
 8001516:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001518:	4b2e      	ldr	r3, [pc, #184]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800151a:	2201      	movs	r2, #1
 800151c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800151e:	4b2d      	ldr	r3, [pc, #180]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001520:	2201      	movs	r2, #1
 8001522:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001524:	4b2b      	ldr	r3, [pc, #172]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001526:	2200      	movs	r2, #0
 8001528:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800152a:	4b2a      	ldr	r3, [pc, #168]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800152c:	2200      	movs	r2, #0
 800152e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 8001530:	4b28      	ldr	r3, [pc, #160]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001532:	2205      	movs	r2, #5
 8001534:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8001536:	4b27      	ldr	r3, [pc, #156]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001538:	2220      	movs	r2, #32
 800153a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800153c:	4b25      	ldr	r3, [pc, #148]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800153e:	2204      	movs	r2, #4
 8001540:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8001542:	4b24      	ldr	r3, [pc, #144]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001544:	2220      	movs	r2, #32
 8001546:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001548:	4b22      	ldr	r3, [pc, #136]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800154a:	2204      	movs	r2, #4
 800154c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 800154e:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001550:	2201      	movs	r2, #1
 8001552:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001554:	4b1f      	ldr	r3, [pc, #124]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001556:	2204      	movs	r2, #4
 8001558:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 800155a:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800155c:	2201      	movs	r2, #1
 800155e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 8001560:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001562:	2220      	movs	r2, #32
 8001564:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8001566:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001568:	2220      	movs	r2, #32
 800156a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800156c:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800156e:	2200      	movs	r2, #0
 8001570:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001572:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001574:	2204      	movs	r2, #4
 8001576:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001578:	4816      	ldr	r0, [pc, #88]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800157a:	f003 f97d 	bl	8004878 <HAL_FDCAN_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	bf14      	ite	ne
 8001584:	2301      	movne	r3, #1
 8001586:	2300      	moveq	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 800158e:	f000 facd 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001592:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001596:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800159c:	2302      	movs	r3, #2
 800159e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80015a0:	2301      	movs	r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80015ac:	463b      	mov	r3, r7
 80015ae:	4619      	mov	r1, r3
 80015b0:	4808      	ldr	r0, [pc, #32]	@ (80015d4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80015b2:	f003 fb3f 	bl	8004c34 <HAL_FDCAN_ConfigFilter>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf14      	ite	ne
 80015bc:	2301      	movne	r3, #1
 80015be:	2300      	moveq	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 80015c6:	f000 fab1 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	3720      	adds	r7, #32
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	24000164 	.word	0x24000164
 80015d8:	4000a000 	.word	0x4000a000

080015dc <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80015e2:	4b41      	ldr	r3, [pc, #260]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80015e4:	4a41      	ldr	r2, [pc, #260]	@ (80016ec <_ZL14MX_FDCAN2_Initv+0x110>)
 80015e6:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80015e8:	4b3f      	ldr	r3, [pc, #252]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80015ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015ee:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80015f0:	4b3d      	ldr	r3, [pc, #244]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80015f6:	4b3c      	ldr	r3, [pc, #240]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80015fc:	4b3a      	ldr	r3, [pc, #232]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001602:	4b39      	ldr	r3, [pc, #228]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001604:	2200      	movs	r2, #0
 8001606:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 3;
 8001608:	4b37      	ldr	r3, [pc, #220]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800160a:	2203      	movs	r2, #3
 800160c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800160e:	4b36      	ldr	r3, [pc, #216]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001610:	2201      	movs	r2, #1
 8001612:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 8001614:	4b34      	ldr	r3, [pc, #208]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001616:	220a      	movs	r2, #10
 8001618:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 800161a:	4b33      	ldr	r3, [pc, #204]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800161c:	2205      	movs	r2, #5
 800161e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001620:	4b31      	ldr	r3, [pc, #196]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001622:	2201      	movs	r2, #1
 8001624:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001626:	4b30      	ldr	r3, [pc, #192]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001628:	2201      	movs	r2, #1
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800162c:	4b2e      	ldr	r3, [pc, #184]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800162e:	2201      	movs	r2, #1
 8001630:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001632:	4b2d      	ldr	r3, [pc, #180]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001634:	2201      	movs	r2, #1
 8001636:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001638:	4b2b      	ldr	r3, [pc, #172]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800163a:	2200      	movs	r2, #0
 800163c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800163e:	4b2a      	ldr	r3, [pc, #168]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001640:	2200      	movs	r2, #0
 8001642:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 8001644:	4b28      	ldr	r3, [pc, #160]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001646:	2205      	movs	r2, #5
 8001648:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 800164a:	4b27      	ldr	r3, [pc, #156]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800164c:	2220      	movs	r2, #32
 800164e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001650:	4b25      	ldr	r3, [pc, #148]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001652:	2204      	movs	r2, #4
 8001654:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 8001656:	4b24      	ldr	r3, [pc, #144]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001658:	2220      	movs	r2, #32
 800165a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800165c:	4b22      	ldr	r3, [pc, #136]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800165e:	2204      	movs	r2, #4
 8001660:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 8001662:	4b21      	ldr	r3, [pc, #132]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001664:	2201      	movs	r2, #1
 8001666:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001668:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800166a:	2204      	movs	r2, #4
 800166c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 800166e:	4b1e      	ldr	r3, [pc, #120]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001670:	2201      	movs	r2, #1
 8001672:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 8001674:	4b1c      	ldr	r3, [pc, #112]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001676:	2220      	movs	r2, #32
 8001678:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 800167a:	4b1b      	ldr	r3, [pc, #108]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800167c:	2220      	movs	r2, #32
 800167e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001680:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001682:	2200      	movs	r2, #0
 8001684:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001686:	4b18      	ldr	r3, [pc, #96]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001688:	2204      	movs	r2, #4
 800168a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800168c:	4816      	ldr	r0, [pc, #88]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800168e:	f003 f8f3 	bl	8004878 <HAL_FDCAN_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf14      	ite	ne
 8001698:	2301      	movne	r3, #1
 800169a:	2300      	moveq	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 80016a2:	f000 fa43 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80016a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016aa:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80016b0:	2302      	movs	r3, #2
 80016b2:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80016b4:	2301      	movs	r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 80016b8:	2310      	movs	r3, #16
 80016ba:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 80016bc:	2310      	movs	r3, #16
 80016be:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	4808      	ldr	r0, [pc, #32]	@ (80016e8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80016c6:	f003 fab5 	bl	8004c34 <HAL_FDCAN_ConfigFilter>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	bf14      	ite	ne
 80016d0:	2301      	movne	r3, #1
 80016d2:	2300      	moveq	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 80016da:	f000 fa27 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	3720      	adds	r7, #32
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	24000204 	.word	0x24000204
 80016ec:	4000a400 	.word	0x4000a400

080016f0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f4:	4b2c      	ldr	r3, [pc, #176]	@ (80017a8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80016f6:	4a2d      	ldr	r2, [pc, #180]	@ (80017ac <_ZL19MX_USART2_UART_Initv+0xbc>)
 80016f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016fa:	4b2b      	ldr	r3, [pc, #172]	@ (80017a8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80016fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001702:	4b29      	ldr	r3, [pc, #164]	@ (80017a8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001708:	4b27      	ldr	r3, [pc, #156]	@ (80017a8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800170e:	4b26      	ldr	r3, [pc, #152]	@ (80017a8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001714:	4b24      	ldr	r3, [pc, #144]	@ (80017a8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001716:	220c      	movs	r2, #12
 8001718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171a:	4b23      	ldr	r3, [pc, #140]	@ (80017a8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001726:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800172c:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001732:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001734:	2200      	movs	r2, #0
 8001736:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001738:	481b      	ldr	r0, [pc, #108]	@ (80017a8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800173a:	f007 ffcb 	bl	80096d4 <HAL_UART_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	bf14      	ite	ne
 8001744:	2301      	movne	r3, #1
 8001746:	2300      	moveq	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 800174e:	f000 f9ed 	bl	8001b2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001752:	2100      	movs	r1, #0
 8001754:	4814      	ldr	r0, [pc, #80]	@ (80017a8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001756:	f009 f976 	bl	800aa46 <HAL_UARTEx_SetTxFifoThreshold>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf14      	ite	ne
 8001760:	2301      	movne	r3, #1
 8001762:	2300      	moveq	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800176a:	f000 f9df 	bl	8001b2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800176e:	2100      	movs	r1, #0
 8001770:	480d      	ldr	r0, [pc, #52]	@ (80017a8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001772:	f009 f9a6 	bl	800aac2 <HAL_UARTEx_SetRxFifoThreshold>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf14      	ite	ne
 800177c:	2301      	movne	r3, #1
 800177e:	2300      	moveq	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001786:	f000 f9d1 	bl	8001b2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800178a:	4807      	ldr	r0, [pc, #28]	@ (80017a8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800178c:	f009 f922 	bl	800a9d4 <HAL_UARTEx_DisableFifoMode>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	bf14      	ite	ne
 8001796:	2301      	movne	r3, #1
 8001798:	2300      	moveq	r3, #0
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80017a0:	f000 f9c4 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	240002a4 	.word	0x240002a4
 80017ac:	40004400 	.word	0x40004400

080017b0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	@ 0x30
 80017b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b6:	f107 031c 	add.w	r3, r7, #28
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c6:	4b50      	ldr	r3, [pc, #320]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 80017c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 80017ce:	f043 0320 	orr.w	r3, r3, #32
 80017d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017dc:	f003 0320 	and.w	r3, r3, #32
 80017e0:	61bb      	str	r3, [r7, #24]
 80017e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e4:	4b48      	ldr	r3, [pc, #288]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 80017e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ea:	4a47      	ldr	r2, [pc, #284]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 80017ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017f4:	4b44      	ldr	r3, [pc, #272]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	4b41      	ldr	r3, [pc, #260]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 8001804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001808:	4a3f      	ldr	r2, [pc, #252]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001812:	4b3d      	ldr	r3, [pc, #244]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 8001814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001820:	4b39      	ldr	r3, [pc, #228]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 8001822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001826:	4a38      	ldr	r2, [pc, #224]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 8001828:	f043 0310 	orr.w	r3, r3, #16
 800182c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001830:	4b35      	ldr	r3, [pc, #212]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	4b32      	ldr	r3, [pc, #200]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001844:	4a30      	ldr	r2, [pc, #192]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800184e:	4b2e      	ldr	r3, [pc, #184]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 8001850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800185c:	4b2a      	ldr	r3, [pc, #168]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 800185e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001862:	4a29      	ldr	r2, [pc, #164]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 8001864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001868:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800186c:	4b26      	ldr	r3, [pc, #152]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 800186e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	4b23      	ldr	r3, [pc, #140]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001880:	4a21      	ldr	r2, [pc, #132]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 8001882:	f043 0308 	orr.w	r3, r3, #8
 8001886:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800188a:	4b1f      	ldr	r3, [pc, #124]	@ (8001908 <_ZL12MX_GPIO_Initv+0x158>)
 800188c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	2180      	movs	r1, #128	@ 0x80
 800189c:	481b      	ldr	r0, [pc, #108]	@ (800190c <_ZL12MX_GPIO_Initv+0x15c>)
 800189e:	f004 fb79 	bl	8005f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2138      	movs	r1, #56	@ 0x38
 80018a6:	481a      	ldr	r0, [pc, #104]	@ (8001910 <_ZL12MX_GPIO_Initv+0x160>)
 80018a8:	f004 fb74 	bl	8005f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 80018ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	4619      	mov	r1, r3
 80018c0:	4814      	ldr	r0, [pc, #80]	@ (8001914 <_ZL12MX_GPIO_Initv+0x164>)
 80018c2:	f004 f9a7 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 80018c6:	2380      	movs	r3, #128	@ 0x80
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	480b      	ldr	r0, [pc, #44]	@ (800190c <_ZL12MX_GPIO_Initv+0x15c>)
 80018de:	f004 f999 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 80018e2:	2338      	movs	r3, #56	@ 0x38
 80018e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	@ (8001910 <_ZL12MX_GPIO_Initv+0x160>)
 80018fa:	f004 f98b 	bl	8005c14 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80018fe:	bf00      	nop
 8001900:	3730      	adds	r7, #48	@ 0x30
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	58024400 	.word	0x58024400
 800190c:	58021800 	.word	0x58021800
 8001910:	58020c00 	.word	0x58020c00
 8001914:	58021000 	.word	0x58021000

08001918 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b087      	sub	sp, #28
 800191c:	af02      	add	r7, sp, #8
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d04b      	beq.n	80019c4 <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 800192c:	4b27      	ldr	r3, [pc, #156]	@ (80019cc <HAL_FDCAN_RxFifo0Callback+0xb4>)
 800192e:	4a28      	ldr	r2, [pc, #160]	@ (80019d0 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001930:	2140      	movs	r1, #64	@ 0x40
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f003 fa7a 	bl	8004e2c <HAL_FDCAN_GetRxMessage>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	bf0c      	ite	eq
 800193e:	2301      	moveq	r3, #1
 8001940:	2300      	movne	r3, #0
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d02e      	beq.n	80019a6 <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 8001948:	4b21      	ldr	r3, [pc, #132]	@ (80019d0 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a21      	ldr	r2, [pc, #132]	@ (80019d4 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 800194e:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001950:	4b1f      	ldr	r3, [pc, #124]	@ (80019d0 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b1f      	ldr	r3, [pc, #124]	@ (80019d4 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001958:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	e00c      	b.n	800197a <HAL_FDCAN_RxFifo0Callback+0x62>
 8001960:	4a1a      	ldr	r2, [pc, #104]	@ (80019cc <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4413      	add	r3, r2
 8001966:	7819      	ldrb	r1, [r3, #0]
 8001968:	4a1a      	ldr	r2, [pc, #104]	@ (80019d4 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4413      	add	r3, r2
 800196e:	3305      	adds	r3, #5
 8001970:	460a      	mov	r2, r1
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	3301      	adds	r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2b07      	cmp	r3, #7
 800197e:	ddef      	ble.n	8001960 <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001980:	4b14      	ldr	r3, [pc, #80]	@ (80019d4 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001982:	2201      	movs	r2, #1
 8001984:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 8001986:	f000 febd 	bl	8002704 <HAL_GetTick>
 800198a:	4603      	mov	r3, r0
 800198c:	4a11      	ldr	r2, [pc, #68]	@ (80019d4 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 800198e:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 8001990:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001992:	466c      	mov	r4, sp
 8001994:	f103 0210 	add.w	r2, r3, #16
 8001998:	e892 0003 	ldmia.w	r2, {r0, r1}
 800199c:	e884 0003 	stmia.w	r4, {r0, r1}
 80019a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019a2:	f000 fa49 	bl	8001e38 <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80019a6:	2200      	movs	r2, #0
 80019a8:	2101      	movs	r1, #1
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f003 fbaa 	bl	8005104 <HAL_FDCAN_ActivateNotification>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bf14      	ite	ne
 80019b6:	2301      	movne	r3, #1
 80019b8:	2300      	moveq	r3, #0
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 80019c0:	f000 f8b4 	bl	8001b2c <Error_Handler>
    }
  }
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd90      	pop	{r4, r7, pc}
 80019cc:	240003d0 	.word	0x240003d0
 80019d0:	24000380 	.word	0x24000380
 80019d4:	24000454 	.word	0x24000454

080019d8 <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	4613      	mov	r3, r2
 80019e4:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 80019e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001a14 <module_send_message_CAN1+0x3c>)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <module_send_message_CAN1+0x3c>)
 80019ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019f2:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	4a07      	ldr	r2, [pc, #28]	@ (8001a14 <module_send_message_CAN1+0x3c>)
 80019f8:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	4905      	ldr	r1, [pc, #20]	@ (8001a14 <module_send_message_CAN1+0x3c>)
 80019fe:	4806      	ldr	r0, [pc, #24]	@ (8001a18 <module_send_message_CAN1+0x40>)
 8001a00:	f003 f9b9 	bl	8004d76 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001a04:	4603      	mov	r3, r0
 8001a06:	75fb      	strb	r3, [r7, #23]

	return status;
 8001a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	24000338 	.word	0x24000338
 8001a18:	24000164 	.word	0x24000164

08001a1c <module_send_message_CAN2>:
	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);

	return status;
}

HAL_StatusTypeDef module_send_message_CAN2(uint32_t id, uint8_t* data, uint8_t length) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	4613      	mov	r3, r2
 8001a28:	71fb      	strb	r3, [r7, #7]
	TxHeader_bms.Identifier = id;
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <module_send_message_CAN2+0x38>)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6013      	str	r3, [r2, #0]
	TxHeader_bms.IdType = FDCAN_STANDARD_ID;
 8001a30:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <module_send_message_CAN2+0x38>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	605a      	str	r2, [r3, #4]
	TxHeader_bms.DataLength = length;
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	4a06      	ldr	r2, [pc, #24]	@ (8001a54 <module_send_message_CAN2+0x38>)
 8001a3a:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);
 8001a3c:	68ba      	ldr	r2, [r7, #8]
 8001a3e:	4905      	ldr	r1, [pc, #20]	@ (8001a54 <module_send_message_CAN2+0x38>)
 8001a40:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <module_send_message_CAN2+0x3c>)
 8001a42:	f003 f998 	bl	8004d76 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001a46:	4603      	mov	r3, r0
 8001a48:	75fb      	strb	r3, [r7, #23]

	return status;
 8001a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	2400035c 	.word	0x2400035c
 8001a58:	24000204 	.word	0x24000204

08001a5c <print>:

void print(char uart_buffer[]){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	4909      	ldr	r1, [pc, #36]	@ (8001a8c <print+0x30>)
 8001a68:	4809      	ldr	r0, [pc, #36]	@ (8001a90 <print+0x34>)
 8001a6a:	f009 f8b7 	bl	800abdc <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001a6e:	4808      	ldr	r0, [pc, #32]	@ (8001a90 <print+0x34>)
 8001a70:	f7fe fc4e 	bl	8000310 <strlen>
 8001a74:	4603      	mov	r3, r0
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7c:	4904      	ldr	r1, [pc, #16]	@ (8001a90 <print+0x34>)
 8001a7e:	4805      	ldr	r0, [pc, #20]	@ (8001a94 <print+0x38>)
 8001a80:	f007 fe78 	bl	8009774 <HAL_UART_Transmit>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	0800b80c 	.word	0x0800b80c
 8001a90:	240003d8 	.word	0x240003d8
 8001a94:	240002a4 	.word	0x240002a4

08001a98 <printnl>:

void printnl(char uart_buffer[]){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s", uart_buffer);
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	4909      	ldr	r1, [pc, #36]	@ (8001ac8 <printnl+0x30>)
 8001aa4:	4809      	ldr	r0, [pc, #36]	@ (8001acc <printnl+0x34>)
 8001aa6:	f009 f899 	bl	800abdc <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001aaa:	4808      	ldr	r0, [pc, #32]	@ (8001acc <printnl+0x34>)
 8001aac:	f7fe fc30 	bl	8000310 <strlen>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab8:	4904      	ldr	r1, [pc, #16]	@ (8001acc <printnl+0x34>)
 8001aba:	4805      	ldr	r0, [pc, #20]	@ (8001ad0 <printnl+0x38>)
 8001abc:	f007 fe5a 	bl	8009774 <HAL_UART_Transmit>
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	0800b814 	.word	0x0800b814
 8001acc:	240003d8 	.word	0x240003d8
 8001ad0:	240002a4 	.word	0x240002a4

08001ad4 <getUARTState>:
void printValue(int value){
	sprintf(uart_msg, "%hu \n\r", value);
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
}

HAL_UART_StateTypeDef getUARTState(){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&huart2);
 8001ad8:	4802      	ldr	r0, [pc, #8]	@ (8001ae4 <getUARTState+0x10>)
 8001ada:	f007 fed9 	bl	8009890 <HAL_UART_GetState>
 8001ade:	4603      	mov	r3, r0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	240002a4 	.word	0x240002a4

08001ae8 <readAnalogValue>:

float readAnalogValue(void){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
	float analogValue;

	HAL_ADC_Start(&hadc3);
 8001aee:	480e      	ldr	r0, [pc, #56]	@ (8001b28 <readAnalogValue+0x40>)
 8001af0:	f001 fb42 	bl	8003178 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295
 8001af8:	480b      	ldr	r0, [pc, #44]	@ (8001b28 <readAnalogValue+0x40>)
 8001afa:	f001 fc3b 	bl	8003374 <HAL_ADC_PollForConversion>
	analogValue = HAL_ADC_GetValue(&hadc3);
 8001afe:	480a      	ldr	r0, [pc, #40]	@ (8001b28 <readAnalogValue+0x40>)
 8001b00:	f001 fd2c 	bl	800355c <HAL_ADC_GetValue>
 8001b04:	ee07 0a90 	vmov	s15, r0
 8001b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b0c:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_ADC_Stop(&hadc3);
 8001b10:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <readAnalogValue+0x40>)
 8001b12:	f001 fbfb 	bl	800330c <HAL_ADC_Stop>
	return analogValue;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	ee07 3a90 	vmov	s15, r3
}
 8001b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	240000f4 	.word	0x240000f4

08001b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b30:	b672      	cpsid	i
}
 8001b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <Error_Handler+0x8>

08001b38 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	@ 0x28
 8001b3c:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
	int state_precharge = 0; // 0 means open, 1 closed
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	613b      	str	r3, [r7, #16]
	int flag_current = Current_ERROR_Comunication;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	60fb      	str	r3, [r7, #12]
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 8001b52:	f000 fdd7 	bl	8002704 <HAL_GetTick>
 8001b56:	60b8      	str	r0, [r7, #8]
	int time_s = HAL_GetTick();
 8001b58:	f000 fdd4 	bl	8002704 <HAL_GetTick>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	607b      	str	r3, [r7, #4]

	CPU.voltage_acum = 0; // For precharge
 8001b60:	4ba5      	ldr	r3, [pc, #660]	@ (8001df8 <_Z12select_statev+0x2c0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	62da      	str	r2, [r3, #44]	@ 0x2c


	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 8001b66:	4ba5      	ldr	r3, [pc, #660]	@ (8001dfc <_Z12select_statev+0x2c4>)
 8001b68:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001b6c:	601a      	str	r2, [r3, #0]
	MAX_T = 0;
 8001b6e:	4ba4      	ldr	r3, [pc, #656]	@ (8001e00 <_Z12select_statev+0x2c8>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001b74:	2300      	movs	r3, #0
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	e058      	b.n	8001c2c <_Z12select_statev+0xf4>
		BMS[i].voltage_acum = 0;// For precharge
 8001b7a:	4aa2      	ldr	r2, [pc, #648]	@ (8001e04 <_Z12select_statev+0x2cc>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	3388      	adds	r3, #136	@ 0x88
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]


		if (BMS[i].query_voltage(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8001b94:	fb02 f303 	mul.w	r3, r2, r3
 8001b98:	4a9a      	ldr	r2, [pc, #616]	@ (8001e04 <_Z12select_statev+0x2cc>)
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4a9a      	ldr	r2, [pc, #616]	@ (8001e08 <_Z12select_statev+0x2d0>)
 8001b9e:	68b9      	ldr	r1, [r7, #8]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff f89a 	bl	8000cda <_ZN7BMS_MOD13query_voltageEmPc>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
		{
			//state = error;
		}

		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 8001baa:	4b93      	ldr	r3, [pc, #588]	@ (8001df8 <_Z12select_statev+0x2c0>)
 8001bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bae:	4995      	ldr	r1, [pc, #596]	@ (8001e04 <_Z12select_statev+0x2cc>)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	f44f 70c2 	mov.w	r0, #388	@ 0x184
 8001bb6:	fb00 f303 	mul.w	r3, r0, r3
 8001bba:	440b      	add	r3, r1
 8001bbc:	3388      	adds	r3, #136	@ 0x88
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a8d      	ldr	r2, [pc, #564]	@ (8001df8 <_Z12select_statev+0x2c0>)
 8001bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 8001bc6:	4a8f      	ldr	r2, [pc, #572]	@ (8001e04 <_Z12select_statev+0x2cc>)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 8001bce:	fb01 f303 	mul.w	r3, r1, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	338c      	adds	r3, #140	@ 0x8c
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b88      	ldr	r3, [pc, #544]	@ (8001dfc <_Z12select_statev+0x2c4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	da0a      	bge.n	8001bf6 <_Z12select_statev+0xbe>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 8001be0:	4a88      	ldr	r2, [pc, #544]	@ (8001e04 <_Z12select_statev+0x2cc>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	4413      	add	r3, r2
 8001bee:	338c      	adds	r3, #140	@ 0x8c
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a82      	ldr	r2, [pc, #520]	@ (8001dfc <_Z12select_statev+0x2c4>)
 8001bf4:	6013      	str	r3, [r2, #0]

		/*if (BMS[i].query_temperature(time, buffer) != Temperatures_OK){
			state = error;
		}*/

		if (BMS[i].MAX_T > MAX_T)
 8001bf6:	4a83      	ldr	r2, [pc, #524]	@ (8001e04 <_Z12select_statev+0x2cc>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	339c      	adds	r3, #156	@ 0x9c
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b7d      	ldr	r3, [pc, #500]	@ (8001e00 <_Z12select_statev+0x2c8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dd0a      	ble.n	8001c26 <_Z12select_statev+0xee>
			MAX_T = BMS[i].MAX_T;
 8001c10:	4a7c      	ldr	r2, [pc, #496]	@ (8001e04 <_Z12select_statev+0x2cc>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 8001c18:	fb01 f303 	mul.w	r3, r1, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	339c      	adds	r3, #156	@ 0x9c
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a77      	ldr	r2, [pc, #476]	@ (8001e00 <_Z12select_statev+0x2c8>)
 8001c24:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	61bb      	str	r3, [r7, #24]
 8001c2c:	4b77      	ldr	r3, [pc, #476]	@ (8001e0c <_Z12select_statev+0x2d4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	dba1      	blt.n	8001b7a <_Z12select_statev+0x42>
	}

	if (time_s > time_sending_minV + 500) {
 8001c36:	4b76      	ldr	r3, [pc, #472]	@ (8001e10 <_Z12select_statev+0x2d8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dd23      	ble.n	8001c8c <_Z12select_statev+0x154>
		message_MINV[1] = MIN_V & 0xFF;
 8001c44:	4b6d      	ldr	r3, [pc, #436]	@ (8001dfc <_Z12select_statev+0x2c4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4b72      	ldr	r3, [pc, #456]	@ (8001e14 <_Z12select_statev+0x2dc>)
 8001c4c:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 8001c4e:	4b6b      	ldr	r3, [pc, #428]	@ (8001dfc <_Z12select_statev+0x2c4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	121b      	asrs	r3, r3, #8
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4b6f      	ldr	r3, [pc, #444]	@ (8001e14 <_Z12select_statev+0x2dc>)
 8001c58:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 8001c5a:	4b6a      	ldr	r3, [pc, #424]	@ (8001e04 <_Z12select_statev+0x2cc>)
 8001c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d010      	beq.n	8001c86 <_Z12select_statev+0x14e>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 8001c64:	2202      	movs	r2, #2
 8001c66:	496b      	ldr	r1, [pc, #428]	@ (8001e14 <_Z12select_statev+0x2dc>)
 8001c68:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c6c:	f7ff feb4 	bl	80019d8 <module_send_message_CAN1>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bf14      	ite	ne
 8001c76:	2301      	movne	r3, #1
 8001c78:	2300      	moveq	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <_Z12select_statev+0x14e>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 8001c80:	4865      	ldr	r0, [pc, #404]	@ (8001e18 <_Z12select_statev+0x2e0>)
 8001c82:	f7ff feeb 	bl	8001a5c <print>
		}
		time_sending_minV = time_s;
 8001c86:	4a62      	ldr	r2, [pc, #392]	@ (8001e10 <_Z12select_statev+0x2d8>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	e00d      	b.n	8001cae <_Z12select_statev+0x176>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 8001c92:	4b5a      	ldr	r3, [pc, #360]	@ (8001dfc <_Z12select_statev+0x2c4>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	495b      	ldr	r1, [pc, #364]	@ (8001e04 <_Z12select_statev+0x2cc>)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f44f 70c2 	mov.w	r0, #388	@ 0x184
 8001c9e:	fb00 f303 	mul.w	r3, r0, r3
 8001ca2:	440b      	add	r3, r1
 8001ca4:	3390      	adds	r3, #144	@ 0x90
 8001ca6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3301      	adds	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	4b57      	ldr	r3, [pc, #348]	@ (8001e0c <_Z12select_statev+0x2d4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dbec      	blt.n	8001c92 <_Z12select_statev+0x15a>

	}


	//flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
	flag_cpu = CPU_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	613b      	str	r3, [r7, #16]

	flag_current = current.query(time, buffer); //asking current how is it
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4a52      	ldr	r2, [pc, #328]	@ (8001e08 <_Z12select_statev+0x2d0>)
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4856      	ldr	r0, [pc, #344]	@ (8001e1c <_Z12select_statev+0x2e4>)
 8001cc4:	f7ff f972 	bl	8000fac <_ZN11Current_MOD5queryEiPc>
 8001cc8:	60f8      	str	r0, [r7, #12]
	print((char*)"voltage acu");
	printValue(CPU.voltage_acum);
	print((char*)"dc bus");
	printValue(CPU.DC_BUS);*/
	//printValue(state);
	switch (state) {
 8001cca:	4b55      	ldr	r3, [pc, #340]	@ (8001e20 <_Z12select_statev+0x2e8>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d861      	bhi.n	8001d96 <_Z12select_statev+0x25e>
 8001cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd8 <_Z12select_statev+0x1a0>)
 8001cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd8:	08001ced 	.word	0x08001ced
 8001cdc:	08001d0f 	.word	0x08001d0f
 8001ce0:	08001d2b 	.word	0x08001d2b
 8001ce4:	08001d47 	.word	0x08001d47
 8001ce8:	08001d7f 	.word	0x08001d7f
	case start:
		state_air_n = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
		state_precharge = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_DISCONNECTED);
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	483f      	ldr	r0, [pc, #252]	@ (8001df8 <_Z12select_statev+0x2c0>)
 8001cfc:	f7ff f8f6 	bl	8000eec <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu != CPU_ERROR_COMMUNICATION)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d046      	beq.n	8001d94 <_Z12select_statev+0x25c>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 8001d06:	4b46      	ldr	r3, [pc, #280]	@ (8001e20 <_Z12select_statev+0x2e8>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	701a      	strb	r2, [r3, #0]
		break;
 8001d0c:	e042      	b.n	8001d94 <_Z12select_statev+0x25c>
	case precharge:
		state_air_n = 1;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8001d16:	2301      	movs	r3, #1
 8001d18:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_PRECHARGE);
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	4836      	ldr	r0, [pc, #216]	@ (8001df8 <_Z12select_statev+0x2c0>)
 8001d1e:	f7ff f8e5 	bl	8000eec <_ZN7CPU_MOD11updateStateEi>
		//if (flag_cpu == CPU_OK) {
			state = transition;
 8001d22:	4b3f      	ldr	r3, [pc, #252]	@ (8001e20 <_Z12select_statev+0x2e8>)
 8001d24:	2202      	movs	r2, #2
 8001d26:	701a      	strb	r2, [r3, #0]
		//} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
			//state = error;
		 //else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
		break;
 8001d28:	e035      	b.n	8001d96 <_Z12select_statev+0x25e>
	case transition:
		state_air_n = 1;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_PRECHARGE);
 8001d36:	2101      	movs	r1, #1
 8001d38:	482f      	ldr	r0, [pc, #188]	@ (8001df8 <_Z12select_statev+0x2c0>)
 8001d3a:	f7ff f8d7 	bl	8000eec <_ZN7CPU_MOD11updateStateEi>
		//if ((((CPU.voltage_acum)/1000) * 0.9 < CPU.DC_BUS) && (CPU.voltage_acum != 0)){
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 8001d3e:	4b38      	ldr	r3, [pc, #224]	@ (8001e20 <_Z12select_statev+0x2e8>)
 8001d40:	2203      	movs	r2, #3
 8001d42:	701a      	strb	r2, [r3, #0]
		//}else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
		 //else if(flag_current != Current_OK) state = error;
		//}
		break;
 8001d44:	e027      	b.n	8001d96 <_Z12select_statev+0x25e>
	case run:
		state_air_n = 1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_POWER);
 8001d52:	2100      	movs	r1, #0
 8001d54:	4828      	ldr	r0, [pc, #160]	@ (8001df8 <_Z12select_statev+0x2c0>)
 8001d56:	f7ff f8c9 	bl	8000eec <_ZN7CPU_MOD11updateStateEi>
		if ((flag_cpu == CPU_ERROR_COMMUNICATION) && (flag_charger == 1)){
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d106      	bne.n	8001d6e <_Z12select_statev+0x236>
 8001d60:	4b30      	ldr	r3, [pc, #192]	@ (8001e24 <_Z12select_statev+0x2ec>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d102      	bne.n	8001d6e <_Z12select_statev+0x236>
			//state = error; //If I disconnect the charger, error
			print((char*)"CPU");
 8001d68:	482f      	ldr	r0, [pc, #188]	@ (8001e28 <_Z12select_statev+0x2f0>)
 8001d6a:	f7ff fe77 	bl	8001a5c <print>
		}
		if (flag_current != Current_OK){
			//state = error; //If current is too high, error
		}
		if(HAL_GPIO_ReadPin(DIGITAL1_GPIO_Port, DIGITAL1_Pin) == GPIO_PIN_RESET){ //SDC IO
 8001d6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d72:	482e      	ldr	r0, [pc, #184]	@ (8001e2c <_Z12select_statev+0x2f4>)
 8001d74:	f004 f8f6 	bl	8005f64 <HAL_GPIO_ReadPin>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
			//state = error;
			//print((char*)"DIGITAL");
		}
		break;
 8001d7c:	e00b      	b.n	8001d96 <_Z12select_statev+0x25e>
	case error:
		state_air_n = 0; //All relés closed
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
		state_precharge = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_ERROR);
 8001d8a:	2103      	movs	r1, #3
 8001d8c:	481a      	ldr	r0, [pc, #104]	@ (8001df8 <_Z12select_statev+0x2c0>)
 8001d8e:	f7ff f8ad 	bl	8000eec <_ZN7CPU_MOD11updateStateEi>
		break;
 8001d92:	e000      	b.n	8001d96 <_Z12select_statev+0x25e>
		break;
 8001d94:	bf00      	nop
	 print(buffer);
	 sprintf(buffer, " - STATE:     %i\n", state);
	 print(buffer);
	 sprintf(buffer, "***********************\n");
	 print(buffer);*/
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <_Z12select_statev+0x268>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <_Z12select_statev+0x26a>
 8001da0:	2300      	movs	r3, #0
 8001da2:	461a      	mov	r2, r3
 8001da4:	2180      	movs	r1, #128	@ 0x80
 8001da6:	4822      	ldr	r0, [pc, #136]	@ (8001e30 <_Z12select_statev+0x2f8>)
 8001da8:	f004 f8f4 	bl	8005f94 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 8001dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <_Z12select_statev+0x27e>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <_Z12select_statev+0x280>
 8001db6:	2300      	movs	r3, #0
 8001db8:	461a      	mov	r2, r3
 8001dba:	2108      	movs	r1, #8
 8001dbc:	481d      	ldr	r0, [pc, #116]	@ (8001e34 <_Z12select_statev+0x2fc>)
 8001dbe:	f004 f8e9 	bl	8005f94 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <_Z12select_statev+0x294>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <_Z12select_statev+0x296>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2110      	movs	r1, #16
 8001dd2:	4818      	ldr	r0, [pc, #96]	@ (8001e34 <_Z12select_statev+0x2fc>)
 8001dd4:	f004 f8de 	bl	8005f94 <HAL_GPIO_WritePin>
			state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <_Z12select_statev+0x2aa>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <_Z12select_statev+0x2ac>
 8001de2:	2300      	movs	r3, #0
 8001de4:	461a      	mov	r2, r3
 8001de6:	2120      	movs	r1, #32
 8001de8:	4812      	ldr	r0, [pc, #72]	@ (8001e34 <_Z12select_statev+0x2fc>)
 8001dea:	f004 f8d3 	bl	8005f94 <HAL_GPIO_WritePin>
	}




}
 8001dee:	bf00      	nop
 8001df0:	3728      	adds	r7, #40	@ 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	24000c0c 	.word	0x24000c0c
 8001dfc:	24000004 	.word	0x24000004
 8001e00:	24000c00 	.word	0x24000c00
 8001e04:	2400046c 	.word	0x2400046c
 8001e08:	24000c8c 	.word	0x24000c8c
 8001e0c:	24000000 	.word	0x24000000
 8001e10:	24000c08 	.word	0x24000c08
 8001e14:	24000c04 	.word	0x24000c04
 8001e18:	0800b820 	.word	0x0800b820
 8001e1c:	24000c44 	.word	0x24000c44
 8001e20:	24000c88 	.word	0x24000c88
 8001e24:	24000c40 	.word	0x24000c40
 8001e28:	0800b840 	.word	0x0800b840
 8001e2c:	58021000 	.word	0x58021000
 8001e30:	58021800 	.word	0x58021800
 8001e34:	58020c00 	.word	0x58020c00

08001e38 <_Z11parse_state6CANMsg>:

/*********************************************************************************************************
 ** Function name:           parse_state
 ** Descriptions:            Function for analysing the data from the CAN
 *********************************************************************************************************/
void parse_state(CANMsg data) {
 8001e38:	b084      	sub	sp, #16
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	f107 0c18 	add.w	ip, r7, #24
 8001e44:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t time = HAL_GetTick();
 8001e48:	f000 fc5c 	bl	8002704 <HAL_GetTick>
 8001e4c:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < BMS_N; i++) {
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	e017      	b.n	8001e88 <_Z11parse_state6CANMsg+0x50>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], time); //Checking if the message received is for  BMS
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	4a25      	ldr	r2, [pc, #148]	@ (8001ef8 <_Z11parse_state6CANMsg+0xc0>)
 8001e64:	1898      	adds	r0, r3, r2
 8001e66:	69b9      	ldr	r1, [r7, #24]
 8001e68:	f107 021d 	add.w	r2, r7, #29
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	f7fe fdd7 	bl	8000a20 <_ZN7BMS_MOD5parseEmPhm>
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]
		if (flag_bms)
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <_Z11parse_state6CANMsg+0x4a>
			i = BMS_N;
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001efc <_Z11parse_state6CANMsg+0xc4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < BMS_N; i++) {
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	3301      	adds	r3, #1
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	4b1c      	ldr	r3, [pc, #112]	@ (8001efc <_Z11parse_state6CANMsg+0xc4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	dbe2      	blt.n	8001e58 <_Z11parse_state6CANMsg+0x20>
	}

	if (!flag_bms) {
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	f083 0301 	eor.w	r3, r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d025      	beq.n	8001eea <_Z11parse_state6CANMsg+0xb2>
		if (CPU.parse(data.id, &data.buf[0], time))
 8001e9e:	69b9      	ldr	r1, [r7, #24]
 8001ea0:	f107 021d 	add.w	r2, r7, #29
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4816      	ldr	r0, [pc, #88]	@ (8001f00 <_Z11parse_state6CANMsg+0xc8>)
 8001ea8:	f7fe ffdc 	bl	8000e64 <_ZN7CPU_MOD5parseEmPhm>
			;                       //Cheking if message is for CPU
		if (data.id == 419385575) //If message from this direction received, it is because the charger is connected and the accu is for charging
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	4a15      	ldr	r2, [pc, #84]	@ (8001f04 <_Z11parse_state6CANMsg+0xcc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d11a      	bne.n	8001eea <_Z11parse_state6CANMsg+0xb2>
				{
			for (int i = 0; i < BMS_N; i++) {
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	e00c      	b.n	8001ed4 <_Z11parse_state6CANMsg+0x9c>
				BMS[i].flag_charger = 1;
 8001eba:	4a0f      	ldr	r2, [pc, #60]	@ (8001ef8 <_Z11parse_state6CANMsg+0xc0>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 8001ec2:	fb01 f303 	mul.w	r3, r1, r3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3394      	adds	r3, #148	@ 0x94
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <_Z11parse_state6CANMsg+0xc4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	dbed      	blt.n	8001eba <_Z11parse_state6CANMsg+0x82>
			}

			current.flag_charger = 1;
 8001ede:	4b0a      	ldr	r3, [pc, #40]	@ (8001f08 <_Z11parse_state6CANMsg+0xd0>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
			flag_charger = 1;
 8001ee4:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <_Z11parse_state6CANMsg+0xd4>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ef4:	b004      	add	sp, #16
 8001ef6:	4770      	bx	lr
 8001ef8:	2400046c 	.word	0x2400046c
 8001efc:	24000000 	.word	0x24000000
 8001f00:	24000c0c 	.word	0x24000c0c
 8001f04:	18ff50e7 	.word	0x18ff50e7
 8001f08:	24000c44 	.word	0x24000c44
 8001f0c:	24000c40 	.word	0x24000c40

08001f10 <_Z41__static_initialization_and_destruction_0v>:
 8001f10:	b590      	push	{r4, r7, lr}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af06      	add	r7, sp, #24
		};
 8001f16:	4c40      	ldr	r4, [pc, #256]	@ (8002018 <_Z41__static_initialization_and_destruction_0v+0x108>)
 8001f18:	2337      	movs	r3, #55	@ 0x37
 8001f1a:	9304      	str	r3, [sp, #16]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	9303      	str	r3, [sp, #12]
 8001f20:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001f24:	9302      	str	r3, [sp, #8]
 8001f26:	2313      	movs	r3, #19
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	233c      	movs	r3, #60	@ 0x3c
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001f32:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001f36:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f7fe fbd6 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8001f40:	f504 74c2 	add.w	r4, r4, #388	@ 0x184
 8001f44:	239b      	movs	r3, #155	@ 0x9b
 8001f46:	9304      	str	r3, [sp, #16]
 8001f48:	230a      	movs	r3, #10
 8001f4a:	9303      	str	r3, [sp, #12]
 8001f4c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001f50:	9302      	str	r3, [sp, #8]
 8001f52:	2313      	movs	r3, #19
 8001f54:	9301      	str	r3, [sp, #4]
 8001f56:	233c      	movs	r3, #60	@ 0x3c
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001f5e:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001f62:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8001f66:	4620      	mov	r0, r4
 8001f68:	f7fe fbc0 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8001f6c:	f504 74c2 	add.w	r4, r4, #388	@ 0x184
 8001f70:	23ff      	movs	r3, #255	@ 0xff
 8001f72:	9304      	str	r3, [sp, #16]
 8001f74:	2314      	movs	r3, #20
 8001f76:	9303      	str	r3, [sp, #12]
 8001f78:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001f7c:	9302      	str	r3, [sp, #8]
 8001f7e:	2313      	movs	r3, #19
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	233c      	movs	r3, #60	@ 0x3c
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001f8a:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001f8e:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001f92:	4620      	mov	r0, r4
 8001f94:	f7fe fbaa 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8001f98:	f504 74c2 	add.w	r4, r4, #388	@ 0x184
 8001f9c:	f240 1363 	movw	r3, #355	@ 0x163
 8001fa0:	9304      	str	r3, [sp, #16]
 8001fa2:	231e      	movs	r3, #30
 8001fa4:	9303      	str	r3, [sp, #12]
 8001fa6:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001faa:	9302      	str	r3, [sp, #8]
 8001fac:	2313      	movs	r3, #19
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	233c      	movs	r3, #60	@ 0x3c
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001fb8:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001fbc:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	f7fe fb93 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8001fc6:	f504 70c2 	add.w	r0, r4, #388	@ 0x184
 8001fca:	f240 13c7 	movw	r3, #455	@ 0x1c7
 8001fce:	9304      	str	r3, [sp, #16]
 8001fd0:	2328      	movs	r3, #40	@ 0x28
 8001fd2:	9303      	str	r3, [sp, #12]
 8001fd4:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001fd8:	9302      	str	r3, [sp, #8]
 8001fda:	2313      	movs	r3, #19
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	233c      	movs	r3, #60	@ 0x3c
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001fe6:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001fea:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8001fee:	f7fe fb7d 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 8001ff2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001ff6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ffa:	2120      	movs	r1, #32
 8001ffc:	4807      	ldr	r0, [pc, #28]	@ (800201c <_Z41__static_initialization_and_destruction_0v+0x10c>)
 8001ffe:	f7fe fedf 	bl	8000dc0 <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 8002002:	22c8      	movs	r2, #200	@ 0xc8
 8002004:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002008:	4805      	ldr	r0, [pc, #20]	@ (8002020 <_Z41__static_initialization_and_destruction_0v+0x110>)
 800200a:	f7fe ff81 	bl	8000f10 <_ZN11Current_MODC1Emi>
}
 800200e:	bf00      	nop
 8002010:	3704      	adds	r7, #4
 8002012:	46bd      	mov	sp, r7
 8002014:	bd90      	pop	{r4, r7, pc}
 8002016:	bf00      	nop
 8002018:	2400046c 	.word	0x2400046c
 800201c:	24000c0c 	.word	0x24000c0c
 8002020:	24000c44 	.word	0x24000c44

08002024 <_GLOBAL__sub_I_BMS>:
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
 8002028:	f7ff ff72 	bl	8001f10 <_Z41__static_initialization_and_destruction_0v>
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002036:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <HAL_MspInit+0x30>)
 8002038:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800203c:	4a08      	ldr	r2, [pc, #32]	@ (8002060 <HAL_MspInit+0x30>)
 800203e:	f043 0302 	orr.w	r3, r3, #2
 8002042:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_MspInit+0x30>)
 8002048:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	58024400 	.word	0x58024400

08002064 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08c      	sub	sp, #48	@ 0x30
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a31      	ldr	r2, [pc, #196]	@ (8002148 <HAL_ADC_MspInit+0xe4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d12b      	bne.n	80020de <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002086:	4b31      	ldr	r3, [pc, #196]	@ (800214c <HAL_ADC_MspInit+0xe8>)
 8002088:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800208c:	4a2f      	ldr	r2, [pc, #188]	@ (800214c <HAL_ADC_MspInit+0xe8>)
 800208e:	f043 0320 	orr.w	r3, r3, #32
 8002092:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002096:	4b2d      	ldr	r3, [pc, #180]	@ (800214c <HAL_ADC_MspInit+0xe8>)
 8002098:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020a4:	4b29      	ldr	r3, [pc, #164]	@ (800214c <HAL_ADC_MspInit+0xe8>)
 80020a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020aa:	4a28      	ldr	r2, [pc, #160]	@ (800214c <HAL_ADC_MspInit+0xe8>)
 80020ac:	f043 0320 	orr.w	r3, r3, #32
 80020b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020b4:	4b25      	ldr	r3, [pc, #148]	@ (800214c <HAL_ADC_MspInit+0xe8>)
 80020b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020c8:	2303      	movs	r3, #3
 80020ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	4619      	mov	r1, r3
 80020d6:	481e      	ldr	r0, [pc, #120]	@ (8002150 <HAL_ADC_MspInit+0xec>)
 80020d8:	f003 fd9c 	bl	8005c14 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 80020dc:	e02f      	b.n	800213e <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002154 <HAL_ADC_MspInit+0xf0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d12a      	bne.n	800213e <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80020e8:	4b18      	ldr	r3, [pc, #96]	@ (800214c <HAL_ADC_MspInit+0xe8>)
 80020ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ee:	4a17      	ldr	r2, [pc, #92]	@ (800214c <HAL_ADC_MspInit+0xe8>)
 80020f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020f8:	4b14      	ldr	r3, [pc, #80]	@ (800214c <HAL_ADC_MspInit+0xe8>)
 80020fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002106:	4b11      	ldr	r3, [pc, #68]	@ (800214c <HAL_ADC_MspInit+0xe8>)
 8002108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800210c:	4a0f      	ldr	r2, [pc, #60]	@ (800214c <HAL_ADC_MspInit+0xe8>)
 800210e:	f043 0320 	orr.w	r3, r3, #32
 8002112:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002116:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <HAL_ADC_MspInit+0xe8>)
 8002118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002124:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800212a:	2303      	movs	r3, #3
 800212c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002132:	f107 031c 	add.w	r3, r7, #28
 8002136:	4619      	mov	r1, r3
 8002138:	4805      	ldr	r0, [pc, #20]	@ (8002150 <HAL_ADC_MspInit+0xec>)
 800213a:	f003 fd6b 	bl	8005c14 <HAL_GPIO_Init>
}
 800213e:	bf00      	nop
 8002140:	3730      	adds	r7, #48	@ 0x30
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40022000 	.word	0x40022000
 800214c:	58024400 	.word	0x58024400
 8002150:	58021400 	.word	0x58021400
 8002154:	58026000 	.word	0x58026000

08002158 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b0ba      	sub	sp, #232	@ 0xe8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002170:	f107 0318 	add.w	r3, r7, #24
 8002174:	22b8      	movs	r2, #184	@ 0xb8
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f008 fd51 	bl	800ac20 <memset>
  if(hfdcan->Instance==FDCAN1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a5a      	ldr	r2, [pc, #360]	@ (80022ec <HAL_FDCAN_MspInit+0x194>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d157      	bne.n	8002238 <HAL_FDCAN_MspInit+0xe0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002188:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800219a:	f107 0318 	add.w	r3, r7, #24
 800219e:	4618      	mov	r0, r3
 80021a0:	f004 feb2 	bl	8006f08 <HAL_RCCEx_PeriphCLKConfig>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80021aa:	f7ff fcbf 	bl	8001b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80021ae:	4b50      	ldr	r3, [pc, #320]	@ (80022f0 <HAL_FDCAN_MspInit+0x198>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3301      	adds	r3, #1
 80021b4:	4a4e      	ldr	r2, [pc, #312]	@ (80022f0 <HAL_FDCAN_MspInit+0x198>)
 80021b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80021b8:	4b4d      	ldr	r3, [pc, #308]	@ (80022f0 <HAL_FDCAN_MspInit+0x198>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d10e      	bne.n	80021de <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80021c0:	4b4c      	ldr	r3, [pc, #304]	@ (80022f4 <HAL_FDCAN_MspInit+0x19c>)
 80021c2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80021c6:	4a4b      	ldr	r2, [pc, #300]	@ (80022f4 <HAL_FDCAN_MspInit+0x19c>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021cc:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80021d0:	4b48      	ldr	r3, [pc, #288]	@ (80022f4 <HAL_FDCAN_MspInit+0x19c>)
 80021d2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80021d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021de:	4b45      	ldr	r3, [pc, #276]	@ (80022f4 <HAL_FDCAN_MspInit+0x19c>)
 80021e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e4:	4a43      	ldr	r2, [pc, #268]	@ (80022f4 <HAL_FDCAN_MspInit+0x19c>)
 80021e6:	f043 0308 	orr.w	r3, r3, #8
 80021ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021ee:	4b41      	ldr	r3, [pc, #260]	@ (80022f4 <HAL_FDCAN_MspInit+0x19c>)
 80021f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021fc:	2303      	movs	r3, #3
 80021fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002214:	2309      	movs	r3, #9
 8002216:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800221a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800221e:	4619      	mov	r1, r3
 8002220:	4835      	ldr	r0, [pc, #212]	@ (80022f8 <HAL_FDCAN_MspInit+0x1a0>)
 8002222:	f003 fcf7 	bl	8005c14 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	2013      	movs	r0, #19
 800222c:	f002 faef 	bl	800480e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002230:	2013      	movs	r0, #19
 8002232:	f002 fb06 	bl	8004842 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002236:	e054      	b.n	80022e2 <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a2f      	ldr	r2, [pc, #188]	@ (80022fc <HAL_FDCAN_MspInit+0x1a4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d14f      	bne.n	80022e2 <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002242:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800224e:	2300      	movs	r3, #0
 8002250:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002254:	f107 0318 	add.w	r3, r7, #24
 8002258:	4618      	mov	r0, r3
 800225a:	f004 fe55 	bl	8006f08 <HAL_RCCEx_PeriphCLKConfig>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002264:	f7ff fc62 	bl	8001b2c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002268:	4b21      	ldr	r3, [pc, #132]	@ (80022f0 <HAL_FDCAN_MspInit+0x198>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	4a20      	ldr	r2, [pc, #128]	@ (80022f0 <HAL_FDCAN_MspInit+0x198>)
 8002270:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002272:	4b1f      	ldr	r3, [pc, #124]	@ (80022f0 <HAL_FDCAN_MspInit+0x198>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d10e      	bne.n	8002298 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800227a:	4b1e      	ldr	r3, [pc, #120]	@ (80022f4 <HAL_FDCAN_MspInit+0x19c>)
 800227c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002280:	4a1c      	ldr	r2, [pc, #112]	@ (80022f4 <HAL_FDCAN_MspInit+0x19c>)
 8002282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002286:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800228a:	4b1a      	ldr	r3, [pc, #104]	@ (80022f4 <HAL_FDCAN_MspInit+0x19c>)
 800228c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002298:	4b16      	ldr	r3, [pc, #88]	@ (80022f4 <HAL_FDCAN_MspInit+0x19c>)
 800229a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800229e:	4a15      	ldr	r2, [pc, #84]	@ (80022f4 <HAL_FDCAN_MspInit+0x19c>)
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <HAL_FDCAN_MspInit+0x19c>)
 80022aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80022b6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80022ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80022d0:	2309      	movs	r3, #9
 80022d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022da:	4619      	mov	r1, r3
 80022dc:	4808      	ldr	r0, [pc, #32]	@ (8002300 <HAL_FDCAN_MspInit+0x1a8>)
 80022de:	f003 fc99 	bl	8005c14 <HAL_GPIO_Init>
}
 80022e2:	bf00      	nop
 80022e4:	37e8      	adds	r7, #232	@ 0xe8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	4000a000 	.word	0x4000a000
 80022f0:	24000cdc 	.word	0x24000cdc
 80022f4:	58024400 	.word	0x58024400
 80022f8:	58020c00 	.word	0x58020c00
 80022fc:	4000a400 	.word	0x4000a400
 8002300:	58020400 	.word	0x58020400

08002304 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b0b8      	sub	sp, #224	@ 0xe0
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	22b8      	movs	r2, #184	@ 0xb8
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f008 fc7b 	bl	800ac20 <memset>
  if(huart->Instance==USART2)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a26      	ldr	r2, [pc, #152]	@ (80023c8 <HAL_UART_MspInit+0xc4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d145      	bne.n	80023c0 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002334:	f04f 0202 	mov.w	r2, #2
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002346:	f107 0310 	add.w	r3, r7, #16
 800234a:	4618      	mov	r0, r3
 800234c:	f004 fddc 	bl	8006f08 <HAL_RCCEx_PeriphCLKConfig>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002356:	f7ff fbe9 	bl	8001b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800235a:	4b1c      	ldr	r3, [pc, #112]	@ (80023cc <HAL_UART_MspInit+0xc8>)
 800235c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002360:	4a1a      	ldr	r2, [pc, #104]	@ (80023cc <HAL_UART_MspInit+0xc8>)
 8002362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002366:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800236a:	4b18      	ldr	r3, [pc, #96]	@ (80023cc <HAL_UART_MspInit+0xc8>)
 800236c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002378:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <HAL_UART_MspInit+0xc8>)
 800237a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800237e:	4a13      	ldr	r2, [pc, #76]	@ (80023cc <HAL_UART_MspInit+0xc8>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002388:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <HAL_UART_MspInit+0xc8>)
 800238a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002396:	230c      	movs	r3, #12
 8002398:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023ae:	2307      	movs	r3, #7
 80023b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80023b8:	4619      	mov	r1, r3
 80023ba:	4805      	ldr	r0, [pc, #20]	@ (80023d0 <HAL_UART_MspInit+0xcc>)
 80023bc:	f003 fc2a 	bl	8005c14 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80023c0:	bf00      	nop
 80023c2:	37e0      	adds	r7, #224	@ 0xe0
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40004400 	.word	0x40004400
 80023cc:	58024400 	.word	0x58024400
 80023d0:	58020000 	.word	0x58020000

080023d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <NMI_Handler+0x4>

080023dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <HardFault_Handler+0x4>

080023e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <MemManage_Handler+0x4>

080023ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <BusFault_Handler+0x4>

080023f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <UsageFault_Handler+0x4>

080023fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242a:	f000 f957 	bl	80026dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002438:	4802      	ldr	r0, [pc, #8]	@ (8002444 <FDCAN1_IT0_IRQHandler+0x10>)
 800243a:	f002 fedd 	bl	80051f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	24000164 	.word	0x24000164

08002448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002450:	4a14      	ldr	r2, [pc, #80]	@ (80024a4 <_sbrk+0x5c>)
 8002452:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <_sbrk+0x60>)
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800245c:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <_sbrk+0x64>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002464:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <_sbrk+0x64>)
 8002466:	4a12      	ldr	r2, [pc, #72]	@ (80024b0 <_sbrk+0x68>)
 8002468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800246a:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <_sbrk+0x64>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	429a      	cmp	r2, r3
 8002476:	d207      	bcs.n	8002488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002478:	f008 fbda 	bl	800ac30 <__errno>
 800247c:	4603      	mov	r3, r0
 800247e:	220c      	movs	r2, #12
 8002480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295
 8002486:	e009      	b.n	800249c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002488:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <_sbrk+0x64>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800248e:	4b07      	ldr	r3, [pc, #28]	@ (80024ac <_sbrk+0x64>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	4a05      	ldr	r2, [pc, #20]	@ (80024ac <_sbrk+0x64>)
 8002498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800249a:	68fb      	ldr	r3, [r7, #12]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	24050000 	.word	0x24050000
 80024a8:	00000400 	.word	0x00000400
 80024ac:	24000ce0 	.word	0x24000ce0
 80024b0:	24000e30 	.word	0x24000e30

080024b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024b8:	4b32      	ldr	r3, [pc, #200]	@ (8002584 <SystemInit+0xd0>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024be:	4a31      	ldr	r2, [pc, #196]	@ (8002584 <SystemInit+0xd0>)
 80024c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002588 <SystemInit+0xd4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	2b06      	cmp	r3, #6
 80024d2:	d807      	bhi.n	80024e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002588 <SystemInit+0xd4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 030f 	bic.w	r3, r3, #15
 80024dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002588 <SystemInit+0xd4>)
 80024de:	f043 0307 	orr.w	r3, r3, #7
 80024e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80024e4:	4b29      	ldr	r3, [pc, #164]	@ (800258c <SystemInit+0xd8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a28      	ldr	r2, [pc, #160]	@ (800258c <SystemInit+0xd8>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80024f0:	4b26      	ldr	r3, [pc, #152]	@ (800258c <SystemInit+0xd8>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80024f6:	4b25      	ldr	r3, [pc, #148]	@ (800258c <SystemInit+0xd8>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4924      	ldr	r1, [pc, #144]	@ (800258c <SystemInit+0xd8>)
 80024fc:	4b24      	ldr	r3, [pc, #144]	@ (8002590 <SystemInit+0xdc>)
 80024fe:	4013      	ands	r3, r2
 8002500:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002502:	4b21      	ldr	r3, [pc, #132]	@ (8002588 <SystemInit+0xd4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d007      	beq.n	800251e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800250e:	4b1e      	ldr	r3, [pc, #120]	@ (8002588 <SystemInit+0xd4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 030f 	bic.w	r3, r3, #15
 8002516:	4a1c      	ldr	r2, [pc, #112]	@ (8002588 <SystemInit+0xd4>)
 8002518:	f043 0307 	orr.w	r3, r3, #7
 800251c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800251e:	4b1b      	ldr	r3, [pc, #108]	@ (800258c <SystemInit+0xd8>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002524:	4b19      	ldr	r3, [pc, #100]	@ (800258c <SystemInit+0xd8>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800252a:	4b18      	ldr	r3, [pc, #96]	@ (800258c <SystemInit+0xd8>)
 800252c:	2200      	movs	r2, #0
 800252e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002530:	4b16      	ldr	r3, [pc, #88]	@ (800258c <SystemInit+0xd8>)
 8002532:	4a18      	ldr	r2, [pc, #96]	@ (8002594 <SystemInit+0xe0>)
 8002534:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002536:	4b15      	ldr	r3, [pc, #84]	@ (800258c <SystemInit+0xd8>)
 8002538:	4a17      	ldr	r2, [pc, #92]	@ (8002598 <SystemInit+0xe4>)
 800253a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800253c:	4b13      	ldr	r3, [pc, #76]	@ (800258c <SystemInit+0xd8>)
 800253e:	4a17      	ldr	r2, [pc, #92]	@ (800259c <SystemInit+0xe8>)
 8002540:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002542:	4b12      	ldr	r3, [pc, #72]	@ (800258c <SystemInit+0xd8>)
 8002544:	2200      	movs	r2, #0
 8002546:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002548:	4b10      	ldr	r3, [pc, #64]	@ (800258c <SystemInit+0xd8>)
 800254a:	4a14      	ldr	r2, [pc, #80]	@ (800259c <SystemInit+0xe8>)
 800254c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800254e:	4b0f      	ldr	r3, [pc, #60]	@ (800258c <SystemInit+0xd8>)
 8002550:	2200      	movs	r2, #0
 8002552:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002554:	4b0d      	ldr	r3, [pc, #52]	@ (800258c <SystemInit+0xd8>)
 8002556:	4a11      	ldr	r2, [pc, #68]	@ (800259c <SystemInit+0xe8>)
 8002558:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800255a:	4b0c      	ldr	r3, [pc, #48]	@ (800258c <SystemInit+0xd8>)
 800255c:	2200      	movs	r2, #0
 800255e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002560:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <SystemInit+0xd8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a09      	ldr	r2, [pc, #36]	@ (800258c <SystemInit+0xd8>)
 8002566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800256a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800256c:	4b07      	ldr	r3, [pc, #28]	@ (800258c <SystemInit+0xd8>)
 800256e:	2200      	movs	r2, #0
 8002570:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002572:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <SystemInit+0xec>)
 8002574:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002578:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800257a:	bf00      	nop
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00
 8002588:	52002000 	.word	0x52002000
 800258c:	58024400 	.word	0x58024400
 8002590:	eaf6ed7f 	.word	0xeaf6ed7f
 8002594:	02020200 	.word	0x02020200
 8002598:	01ff0000 	.word	0x01ff0000
 800259c:	01010280 	.word	0x01010280
 80025a0:	52004000 	.word	0x52004000

080025a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80025a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025a8:	f7ff ff84 	bl	80024b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025ac:	480c      	ldr	r0, [pc, #48]	@ (80025e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025ae:	490d      	ldr	r1, [pc, #52]	@ (80025e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025b0:	4a0d      	ldr	r2, [pc, #52]	@ (80025e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b4:	e002      	b.n	80025bc <LoopCopyDataInit>

080025b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ba:	3304      	adds	r3, #4

080025bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c0:	d3f9      	bcc.n	80025b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c2:	4a0a      	ldr	r2, [pc, #40]	@ (80025ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025c4:	4c0a      	ldr	r4, [pc, #40]	@ (80025f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c8:	e001      	b.n	80025ce <LoopFillZerobss>

080025ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ca:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 80025cc:	3204      	adds	r2, #4

080025ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d0:	d3fb      	bcc.n	80025ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025d2:	f008 fb33 	bl	800ac3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d6:	f7fe fd1f 	bl	8001018 <main>
  bx  lr
 80025da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025dc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80025e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025e4:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 80025e8:	0800b920 	.word	0x0800b920
  ldr r2, =_sbss
 80025ec:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 80025f0:	24000e30 	.word	0x24000e30

080025f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f4:	e7fe      	b.n	80025f4 <ADC3_IRQHandler>
	...

080025f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025fe:	2003      	movs	r0, #3
 8002600:	f002 f8fa 	bl	80047f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002604:	f004 faaa 	bl	8006b5c <HAL_RCC_GetSysClockFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <HAL_Init+0x68>)
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	4913      	ldr	r1, [pc, #76]	@ (8002664 <HAL_Init+0x6c>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
 8002620:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002622:	4b0f      	ldr	r3, [pc, #60]	@ (8002660 <HAL_Init+0x68>)
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	4a0e      	ldr	r2, [pc, #56]	@ (8002664 <HAL_Init+0x6c>)
 800262c:	5cd3      	ldrb	r3, [r2, r3]
 800262e:	f003 031f 	and.w	r3, r3, #31
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
 8002638:	4a0b      	ldr	r2, [pc, #44]	@ (8002668 <HAL_Init+0x70>)
 800263a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800263c:	4a0b      	ldr	r2, [pc, #44]	@ (800266c <HAL_Init+0x74>)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002642:	200f      	movs	r0, #15
 8002644:	f000 f814 	bl	8002670 <HAL_InitTick>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e002      	b.n	8002658 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002652:	f7ff fced 	bl	8002030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	58024400 	.word	0x58024400
 8002664:	0800b890 	.word	0x0800b890
 8002668:	2400000c 	.word	0x2400000c
 800266c:	24000008 	.word	0x24000008

08002670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002678:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <HAL_InitTick+0x60>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e021      	b.n	80026c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002684:	4b13      	ldr	r3, [pc, #76]	@ (80026d4 <HAL_InitTick+0x64>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <HAL_InitTick+0x60>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4619      	mov	r1, r3
 800268e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002692:	fbb3 f3f1 	udiv	r3, r3, r1
 8002696:	fbb2 f3f3 	udiv	r3, r2, r3
 800269a:	4618      	mov	r0, r3
 800269c:	f002 f8df 	bl	800485e <HAL_SYSTICK_Config>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00e      	b.n	80026c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b0f      	cmp	r3, #15
 80026ae:	d80a      	bhi.n	80026c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b0:	2200      	movs	r2, #0
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	f002 f8a9 	bl	800480e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026bc:	4a06      	ldr	r2, [pc, #24]	@ (80026d8 <HAL_InitTick+0x68>)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e000      	b.n	80026c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	24000014 	.word	0x24000014
 80026d4:	24000008 	.word	0x24000008
 80026d8:	24000010 	.word	0x24000010

080026dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_IncTick+0x20>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <HAL_IncTick+0x24>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	4a04      	ldr	r2, [pc, #16]	@ (8002700 <HAL_IncTick+0x24>)
 80026ee:	6013      	str	r3, [r2, #0]
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	24000014 	.word	0x24000014
 8002700:	24000ce4 	.word	0x24000ce4

08002704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return uwTick;
 8002708:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <HAL_GetTick+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	24000ce4 	.word	0x24000ce4

0800271c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	609a      	str	r2, [r3, #8]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	609a      	str	r2, [r3, #8]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a18      	ldr	r2, [pc, #96]	@ (80027f4 <LL_ADC_SetChannelPreselection+0x70>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d027      	beq.n	80027e6 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800279c:	2b00      	cmp	r3, #0
 800279e:	d107      	bne.n	80027b0 <LL_ADC_SetChannelPreselection+0x2c>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	0e9b      	lsrs	r3, r3, #26
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	2201      	movs	r2, #1
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	e015      	b.n	80027dc <LL_ADC_SetChannelPreselection+0x58>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 80027c6:	2320      	movs	r3, #32
 80027c8:	e003      	b.n	80027d2 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	2201      	movs	r2, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	69d2      	ldr	r2, [r2, #28]
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	58026000 	.word	0x58026000

080027f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3360      	adds	r3, #96	@ 0x60
 800280a:	461a      	mov	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4a10      	ldr	r2, [pc, #64]	@ (8002858 <LL_ADC_SetOffset+0x60>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d10b      	bne.n	8002834 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	4313      	orrs	r3, r2
 800282a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002832:	e00b      	b.n	800284c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	430b      	orrs	r3, r1
 8002846:	431a      	orrs	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	601a      	str	r2, [r3, #0]
}
 800284c:	bf00      	nop
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	58026000 	.word	0x58026000

0800285c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3360      	adds	r3, #96	@ 0x60
 800286a:	461a      	mov	r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	431a      	orrs	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	611a      	str	r2, [r3, #16]
}
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4a0c      	ldr	r2, [pc, #48]	@ (80028fc <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00e      	beq.n	80028ee <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3360      	adds	r3, #96	@ 0x60
 80028d4:	461a      	mov	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	431a      	orrs	r2, r3
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	601a      	str	r2, [r3, #0]
  }
}
 80028ee:	bf00      	nop
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	58026000 	.word	0x58026000

08002900 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4a0c      	ldr	r2, [pc, #48]	@ (8002940 <LL_ADC_SetOffsetSaturation+0x40>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d10e      	bne.n	8002932 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3360      	adds	r3, #96	@ 0x60
 8002918:	461a      	mov	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	431a      	orrs	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002932:	bf00      	nop
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	58026000 	.word	0x58026000

08002944 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4a0c      	ldr	r2, [pc, #48]	@ (8002984 <LL_ADC_SetOffsetSign+0x40>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d10e      	bne.n	8002976 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	3360      	adds	r3, #96	@ 0x60
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	431a      	orrs	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002976:	bf00      	nop
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	58026000 	.word	0x58026000

08002988 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	3360      	adds	r3, #96	@ 0x60
 8002998:	461a      	mov	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4a0c      	ldr	r2, [pc, #48]	@ (80029d8 <LL_ADC_SetOffsetState+0x50>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d108      	bne.n	80029bc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80029ba:	e007      	b.n	80029cc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	601a      	str	r2, [r3, #0]
}
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	58026000 	.word	0x58026000

080029dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b087      	sub	sp, #28
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	3330      	adds	r3, #48	@ 0x30
 8002a12:	461a      	mov	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	4413      	add	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	211f      	movs	r1, #31
 8002a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	401a      	ands	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	0e9b      	lsrs	r3, r3, #26
 8002a3a:	f003 011f 	and.w	r1, r3, #31
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	fa01 f303 	lsl.w	r3, r1, r3
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b087      	sub	sp, #28
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3314      	adds	r3, #20
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	0e5b      	lsrs	r3, r3, #25
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	4413      	add	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	0d1b      	lsrs	r3, r3, #20
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	2107      	movs	r1, #7
 8002a88:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	401a      	ands	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	0d1b      	lsrs	r3, r3, #20
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002aa4:	bf00      	nop
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4a1a      	ldr	r2, [pc, #104]	@ (8002b28 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d115      	bne.n	8002af0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f003 0318 	and.w	r3, r3, #24
 8002ada:	4914      	ldr	r1, [pc, #80]	@ (8002b2c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002adc:	40d9      	lsrs	r1, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	400b      	ands	r3, r1
 8002ae2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002aee:	e014      	b.n	8002b1a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002afc:	43db      	mvns	r3, r3
 8002afe:	401a      	ands	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f003 0318 	and.w	r3, r3, #24
 8002b06:	4909      	ldr	r1, [pc, #36]	@ (8002b2c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002b08:	40d9      	lsrs	r1, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	400b      	ands	r3, r1
 8002b0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b12:	431a      	orrs	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	58026000 	.word	0x58026000
 8002b2c:	000fffff 	.word	0x000fffff

08002b30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 031f 	and.w	r3, r3, #31
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	4b04      	ldr	r3, [pc, #16]	@ (8002b88 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6093      	str	r3, [r2, #8]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	5fffffc0 	.word	0x5fffffc0

08002b8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ba0:	d101      	bne.n	8002ba6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	6fffffc0 	.word	0x6fffffc0

08002bdc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bf0:	d101      	bne.n	8002bf6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <LL_ADC_Enable+0x24>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	f043 0201 	orr.w	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	7fffffc0 	.word	0x7fffffc0

08002c2c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <LL_ADC_Disable+0x24>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	f043 0202 	orr.w	r2, r3, #2
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	7fffffc0 	.word	0x7fffffc0

08002c54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <LL_ADC_IsEnabled+0x18>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <LL_ADC_IsEnabled+0x1a>
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d101      	bne.n	8002c92 <LL_ADC_IsDisableOngoing+0x18>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <LL_ADC_IsDisableOngoing+0x1a>
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	4b05      	ldr	r3, [pc, #20]	@ (8002cc4 <LL_ADC_REG_StartConversion+0x24>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	f043 0204 	orr.w	r2, r3, #4
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	7fffffc0 	.word	0x7fffffc0

08002cc8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	4b05      	ldr	r3, [pc, #20]	@ (8002cec <LL_ADC_REG_StopConversion+0x24>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	f043 0210 	orr.w	r2, r3, #16
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	7fffffc0 	.word	0x7fffffc0

08002cf0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d101      	bne.n	8002d08 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <LL_ADC_INJ_StopConversion+0x24>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	f043 0220 	orr.w	r2, r3, #32
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	7fffffc0 	.word	0x7fffffc0

08002d40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d101      	bne.n	8002d58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b089      	sub	sp, #36	@ 0x24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e1ee      	b.n	8003160 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff f967 	bl	8002064 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff feef 	bl	8002b8c <LL_ADC_IsDeepPowerDownEnabled>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d004      	beq.n	8002dbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fed5 	bl	8002b68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ff0a 	bl	8002bdc <LL_ADC_IsInternalRegulatorEnabled>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d114      	bne.n	8002df8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff feee 	bl	8002bb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dd8:	4b8e      	ldr	r3, [pc, #568]	@ (8003014 <HAL_ADC_Init+0x2ac>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	099b      	lsrs	r3, r3, #6
 8002dde:	4a8e      	ldr	r2, [pc, #568]	@ (8003018 <HAL_ADC_Init+0x2b0>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	3301      	adds	r3, #1
 8002de8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002dea:	e002      	b.n	8002df2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f9      	bne.n	8002dec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff feed 	bl	8002bdc <LL_ADC_IsInternalRegulatorEnabled>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10d      	bne.n	8002e24 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e0c:	f043 0210 	orr.w	r2, r3, #16
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e18:	f043 0201 	orr.w	r2, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff61 	bl	8002cf0 <LL_ADC_REG_IsConversionOngoing>
 8002e2e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f040 8188 	bne.w	800314e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f040 8184 	bne.w	800314e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e4a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e4e:	f043 0202 	orr.w	r2, r3, #2
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fefa 	bl	8002c54 <LL_ADC_IsEnabled>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d136      	bne.n	8002ed4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a6c      	ldr	r2, [pc, #432]	@ (800301c <HAL_ADC_Init+0x2b4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d004      	beq.n	8002e7a <HAL_ADC_Init+0x112>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a6a      	ldr	r2, [pc, #424]	@ (8003020 <HAL_ADC_Init+0x2b8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d10e      	bne.n	8002e98 <HAL_ADC_Init+0x130>
 8002e7a:	4868      	ldr	r0, [pc, #416]	@ (800301c <HAL_ADC_Init+0x2b4>)
 8002e7c:	f7ff feea 	bl	8002c54 <LL_ADC_IsEnabled>
 8002e80:	4604      	mov	r4, r0
 8002e82:	4867      	ldr	r0, [pc, #412]	@ (8003020 <HAL_ADC_Init+0x2b8>)
 8002e84:	f7ff fee6 	bl	8002c54 <LL_ADC_IsEnabled>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4323      	orrs	r3, r4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	e008      	b.n	8002eaa <HAL_ADC_Init+0x142>
 8002e98:	4862      	ldr	r0, [pc, #392]	@ (8003024 <HAL_ADC_Init+0x2bc>)
 8002e9a:	f7ff fedb 	bl	8002c54 <LL_ADC_IsEnabled>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d012      	beq.n	8002ed4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a5a      	ldr	r2, [pc, #360]	@ (800301c <HAL_ADC_Init+0x2b4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d004      	beq.n	8002ec2 <HAL_ADC_Init+0x15a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a58      	ldr	r2, [pc, #352]	@ (8003020 <HAL_ADC_Init+0x2b8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_Init+0x15e>
 8002ec2:	4a59      	ldr	r2, [pc, #356]	@ (8003028 <HAL_ADC_Init+0x2c0>)
 8002ec4:	e000      	b.n	8002ec8 <HAL_ADC_Init+0x160>
 8002ec6:	4a59      	ldr	r2, [pc, #356]	@ (800302c <HAL_ADC_Init+0x2c4>)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4610      	mov	r0, r2
 8002ed0:	f7ff fc24 	bl	800271c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a52      	ldr	r2, [pc, #328]	@ (8003024 <HAL_ADC_Init+0x2bc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d129      	bne.n	8002f32 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	7e5b      	ldrb	r3, [r3, #25]
 8002ee2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002ee8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002eee:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d013      	beq.n	8002f20 <HAL_ADC_Init+0x1b8>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b0c      	cmp	r3, #12
 8002efe:	d00d      	beq.n	8002f1c <HAL_ADC_Init+0x1b4>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b1c      	cmp	r3, #28
 8002f06:	d007      	beq.n	8002f18 <HAL_ADC_Init+0x1b0>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b18      	cmp	r3, #24
 8002f0e:	d101      	bne.n	8002f14 <HAL_ADC_Init+0x1ac>
 8002f10:	2318      	movs	r3, #24
 8002f12:	e006      	b.n	8002f22 <HAL_ADC_Init+0x1ba>
 8002f14:	2300      	movs	r3, #0
 8002f16:	e004      	b.n	8002f22 <HAL_ADC_Init+0x1ba>
 8002f18:	2310      	movs	r3, #16
 8002f1a:	e002      	b.n	8002f22 <HAL_ADC_Init+0x1ba>
 8002f1c:	2308      	movs	r3, #8
 8002f1e:	e000      	b.n	8002f22 <HAL_ADC_Init+0x1ba>
 8002f20:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002f22:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f2a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
 8002f30:	e00e      	b.n	8002f50 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	7e5b      	ldrb	r3, [r3, #25]
 8002f36:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f3c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f42:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f4a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d106      	bne.n	8002f68 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	045b      	lsls	r3, r3, #17
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d009      	beq.n	8002f84 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f74:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a26      	ldr	r2, [pc, #152]	@ (8003024 <HAL_ADC_Init+0x2bc>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d115      	bne.n	8002fba <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	4b26      	ldr	r3, [pc, #152]	@ (8003030 <HAL_ADC_Init+0x2c8>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	69b9      	ldr	r1, [r7, #24]
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	611a      	str	r2, [r3, #16]
 8002fb8:	e009      	b.n	8002fce <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8003034 <HAL_ADC_Init+0x2cc>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	69b9      	ldr	r1, [r7, #24]
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fe8c 	bl	8002cf0 <LL_ADC_REG_IsConversionOngoing>
 8002fd8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff feae 	bl	8002d40 <LL_ADC_INJ_IsConversionOngoing>
 8002fe4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f040 808e 	bne.w	800310a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f040 808a 	bne.w	800310a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8003024 <HAL_ADC_Init+0x2bc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d11b      	bne.n	8003038 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	7e1b      	ldrb	r3, [r3, #24]
 8003004:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800300c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	e018      	b.n	8003046 <HAL_ADC_Init+0x2de>
 8003014:	24000008 	.word	0x24000008
 8003018:	053e2d63 	.word	0x053e2d63
 800301c:	40022000 	.word	0x40022000
 8003020:	40022100 	.word	0x40022100
 8003024:	58026000 	.word	0x58026000
 8003028:	40022300 	.word	0x40022300
 800302c:	58026300 	.word	0x58026300
 8003030:	fff04007 	.word	0xfff04007
 8003034:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7e1b      	ldrb	r3, [r3, #24]
 800303c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	4b46      	ldr	r3, [pc, #280]	@ (8003168 <HAL_ADC_Init+0x400>)
 800304e:	4013      	ands	r3, r2
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	69b9      	ldr	r1, [r7, #24]
 8003056:	430b      	orrs	r3, r1
 8003058:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003060:	2b01      	cmp	r3, #1
 8003062:	d137      	bne.n	80030d4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003068:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a3f      	ldr	r2, [pc, #252]	@ (800316c <HAL_ADC_Init+0x404>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d116      	bne.n	80030a2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	4b3d      	ldr	r3, [pc, #244]	@ (8003170 <HAL_ADC_Init+0x408>)
 800307c:	4013      	ands	r3, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003086:	4311      	orrs	r1, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800308c:	4311      	orrs	r1, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003092:	430a      	orrs	r2, r1
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	611a      	str	r2, [r3, #16]
 80030a0:	e020      	b.n	80030e4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	4b32      	ldr	r3, [pc, #200]	@ (8003174 <HAL_ADC_Init+0x40c>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80030b0:	3a01      	subs	r2, #1
 80030b2:	0411      	lsls	r1, r2, #16
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80030b8:	4311      	orrs	r1, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80030be:	4311      	orrs	r1, r2
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80030c4:	430a      	orrs	r2, r1
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0201 	orr.w	r2, r2, #1
 80030d0:	611a      	str	r2, [r3, #16]
 80030d2:	e007      	b.n	80030e4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0201 	bic.w	r2, r2, #1
 80030e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1b      	ldr	r2, [pc, #108]	@ (800316c <HAL_ADC_Init+0x404>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d002      	beq.n	800310a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f001 f8b1 	bl	800426c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d10c      	bne.n	800312c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003118:	f023 010f 	bic.w	r1, r3, #15
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	1e5a      	subs	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	631a      	str	r2, [r3, #48]	@ 0x30
 800312a:	e007      	b.n	800313c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 020f 	bic.w	r2, r2, #15
 800313a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003140:	f023 0303 	bic.w	r3, r3, #3
 8003144:	f043 0201 	orr.w	r2, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	661a      	str	r2, [r3, #96]	@ 0x60
 800314c:	e007      	b.n	800315e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003152:	f043 0210 	orr.w	r2, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800315e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3724      	adds	r7, #36	@ 0x24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd90      	pop	{r4, r7, pc}
 8003168:	ffffbffc 	.word	0xffffbffc
 800316c:	58026000 	.word	0x58026000
 8003170:	fc00f81f 	.word	0xfc00f81f
 8003174:	fc00f81e 	.word	0xfc00f81e

08003178 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a5c      	ldr	r2, [pc, #368]	@ (80032f8 <HAL_ADC_Start+0x180>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_ADC_Start+0x1c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a5b      	ldr	r2, [pc, #364]	@ (80032fc <HAL_ADC_Start+0x184>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d101      	bne.n	8003198 <HAL_ADC_Start+0x20>
 8003194:	4b5a      	ldr	r3, [pc, #360]	@ (8003300 <HAL_ADC_Start+0x188>)
 8003196:	e000      	b.n	800319a <HAL_ADC_Start+0x22>
 8003198:	4b5a      	ldr	r3, [pc, #360]	@ (8003304 <HAL_ADC_Start+0x18c>)
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fcc8 	bl	8002b30 <LL_ADC_GetMultimode>
 80031a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff fda2 	bl	8002cf0 <LL_ADC_REG_IsConversionOngoing>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f040 809a 	bne.w	80032e8 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_ADC_Start+0x4a>
 80031be:	2302      	movs	r3, #2
 80031c0:	e095      	b.n	80032ee <HAL_ADC_Start+0x176>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 ff64 	bl	8004098 <ADC_Enable>
 80031d0:	4603      	mov	r3, r0
 80031d2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031d4:	7dfb      	ldrb	r3, [r7, #23]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f040 8081 	bne.w	80032de <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80031e0:	4b49      	ldr	r3, [pc, #292]	@ (8003308 <HAL_ADC_Start+0x190>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a42      	ldr	r2, [pc, #264]	@ (80032fc <HAL_ADC_Start+0x184>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d002      	beq.n	80031fc <HAL_ADC_Start+0x84>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	e000      	b.n	80031fe <HAL_ADC_Start+0x86>
 80031fc:	4b3e      	ldr	r3, [pc, #248]	@ (80032f8 <HAL_ADC_Start+0x180>)
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	4293      	cmp	r3, r2
 8003204:	d002      	beq.n	800320c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d105      	bne.n	8003218 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003210:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800321c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003224:	d106      	bne.n	8003234 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800322a:	f023 0206 	bic.w	r2, r3, #6
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	665a      	str	r2, [r3, #100]	@ 0x64
 8003232:	e002      	b.n	800323a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	221c      	movs	r2, #28
 8003240:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a2b      	ldr	r2, [pc, #172]	@ (80032fc <HAL_ADC_Start+0x184>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d002      	beq.n	800325a <HAL_ADC_Start+0xe2>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	e000      	b.n	800325c <HAL_ADC_Start+0xe4>
 800325a:	4b27      	ldr	r3, [pc, #156]	@ (80032f8 <HAL_ADC_Start+0x180>)
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	4293      	cmp	r3, r2
 8003262:	d008      	beq.n	8003276 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d005      	beq.n	8003276 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b05      	cmp	r3, #5
 800326e:	d002      	beq.n	8003276 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	2b09      	cmp	r3, #9
 8003274:	d114      	bne.n	80032a0 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d007      	beq.n	8003294 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003288:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800328c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fd01 	bl	8002ca0 <LL_ADC_REG_StartConversion>
 800329e:	e025      	b.n	80032ec <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a12      	ldr	r2, [pc, #72]	@ (80032fc <HAL_ADC_Start+0x184>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d002      	beq.n	80032bc <HAL_ADC_Start+0x144>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	e000      	b.n	80032be <HAL_ADC_Start+0x146>
 80032bc:	4b0e      	ldr	r3, [pc, #56]	@ (80032f8 <HAL_ADC_Start+0x180>)
 80032be:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00f      	beq.n	80032ec <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80032d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	661a      	str	r2, [r3, #96]	@ 0x60
 80032dc:	e006      	b.n	80032ec <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80032e6:	e001      	b.n	80032ec <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032e8:	2302      	movs	r3, #2
 80032ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40022000 	.word	0x40022000
 80032fc:	40022100 	.word	0x40022100
 8003300:	40022300 	.word	0x40022300
 8003304:	58026300 	.word	0x58026300
 8003308:	fffff0fe 	.word	0xfffff0fe

0800330c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_ADC_Stop+0x16>
 800331e:	2302      	movs	r3, #2
 8003320:	e021      	b.n	8003366 <HAL_ADC_Stop+0x5a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800332a:	2103      	movs	r1, #3
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fdf7 	bl	8003f20 <ADC_ConversionStop>
 8003332:	4603      	mov	r3, r0
 8003334:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10f      	bne.n	800335c <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 ff35 	bl	80041ac <ADC_Disable>
 8003342:	4603      	mov	r3, r0
 8003344:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d107      	bne.n	800335c <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003350:	4b07      	ldr	r3, [pc, #28]	@ (8003370 <HAL_ADC_Stop+0x64>)
 8003352:	4013      	ands	r3, r2
 8003354:	f043 0201 	orr.w	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003364:	7bfb      	ldrb	r3, [r7, #15]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	ffffeefe 	.word	0xffffeefe

08003374 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a72      	ldr	r2, [pc, #456]	@ (800354c <HAL_ADC_PollForConversion+0x1d8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_ADC_PollForConversion+0x1e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a70      	ldr	r2, [pc, #448]	@ (8003550 <HAL_ADC_PollForConversion+0x1dc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d101      	bne.n	8003396 <HAL_ADC_PollForConversion+0x22>
 8003392:	4b70      	ldr	r3, [pc, #448]	@ (8003554 <HAL_ADC_PollForConversion+0x1e0>)
 8003394:	e000      	b.n	8003398 <HAL_ADC_PollForConversion+0x24>
 8003396:	4b70      	ldr	r3, [pc, #448]	@ (8003558 <HAL_ADC_PollForConversion+0x1e4>)
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff fbc9 	bl	8002b30 <LL_ADC_GetMultimode>
 800339e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d102      	bne.n	80033ae <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80033a8:	2308      	movs	r3, #8
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	e037      	b.n	800341e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b05      	cmp	r3, #5
 80033b8:	d002      	beq.n	80033c0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2b09      	cmp	r3, #9
 80033be:	d111      	bne.n	80033e4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d2:	f043 0220 	orr.w	r2, r3, #32
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0b1      	b.n	8003542 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80033de:	2304      	movs	r3, #4
 80033e0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80033e2:	e01c      	b.n	800341e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a58      	ldr	r2, [pc, #352]	@ (800354c <HAL_ADC_PollForConversion+0x1d8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d004      	beq.n	80033f8 <HAL_ADC_PollForConversion+0x84>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a57      	ldr	r2, [pc, #348]	@ (8003550 <HAL_ADC_PollForConversion+0x1dc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d101      	bne.n	80033fc <HAL_ADC_PollForConversion+0x88>
 80033f8:	4b56      	ldr	r3, [pc, #344]	@ (8003554 <HAL_ADC_PollForConversion+0x1e0>)
 80033fa:	e000      	b.n	80033fe <HAL_ADC_PollForConversion+0x8a>
 80033fc:	4b56      	ldr	r3, [pc, #344]	@ (8003558 <HAL_ADC_PollForConversion+0x1e4>)
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff fba4 	bl	8002b4c <LL_ADC_GetMultiDMATransfer>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d007      	beq.n	800341a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e093      	b.n	8003542 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800341a:	2304      	movs	r3, #4
 800341c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800341e:	f7ff f971 	bl	8002704 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003424:	e021      	b.n	800346a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342c:	d01d      	beq.n	800346a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800342e:	f7ff f969 	bl	8002704 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d302      	bcc.n	8003444 <HAL_ADC_PollForConversion+0xd0>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d112      	bne.n	800346a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4013      	ands	r3, r2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003456:	f043 0204 	orr.w	r2, r3, #4
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e06b      	b.n	8003542 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0d6      	beq.n	8003426 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800347c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff faa7 	bl	80029dc <LL_ADC_REG_IsTriggerSourceSWStart>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01c      	beq.n	80034ce <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	7e5b      	ldrb	r3, [r3, #25]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d118      	bne.n	80034ce <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d111      	bne.n	80034ce <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d105      	bne.n	80034ce <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c6:	f043 0201 	orr.w	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003550 <HAL_ADC_PollForConversion+0x1dc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d002      	beq.n	80034de <HAL_ADC_PollForConversion+0x16a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	e000      	b.n	80034e0 <HAL_ADC_PollForConversion+0x16c>
 80034de:	4b1b      	ldr	r3, [pc, #108]	@ (800354c <HAL_ADC_PollForConversion+0x1d8>)
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d008      	beq.n	80034fa <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	d002      	beq.n	80034fa <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2b09      	cmp	r3, #9
 80034f8:	d104      	bne.n	8003504 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	e00c      	b.n	800351e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a11      	ldr	r2, [pc, #68]	@ (8003550 <HAL_ADC_PollForConversion+0x1dc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d002      	beq.n	8003514 <HAL_ADC_PollForConversion+0x1a0>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	e000      	b.n	8003516 <HAL_ADC_PollForConversion+0x1a2>
 8003514:	4b0d      	ldr	r3, [pc, #52]	@ (800354c <HAL_ADC_PollForConversion+0x1d8>)
 8003516:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	2b08      	cmp	r3, #8
 8003522:	d104      	bne.n	800352e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2208      	movs	r2, #8
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e008      	b.n	8003540 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d103      	bne.n	8003540 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	220c      	movs	r2, #12
 800353e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3720      	adds	r7, #32
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40022000 	.word	0x40022000
 8003550:	40022100 	.word	0x40022100
 8003554:	40022300 	.word	0x40022300
 8003558:	58026300 	.word	0x58026300

0800355c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b0a5      	sub	sp, #148	@ 0x94
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003592:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4aa4      	ldr	r2, [pc, #656]	@ (800382c <HAL_ADC_ConfigChannel+0x2b4>)
 800359a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d102      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x34>
 80035a6:	2302      	movs	r3, #2
 80035a8:	f000 bca2 	b.w	8003ef0 <HAL_ADC_ConfigChannel+0x978>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fb99 	bl	8002cf0 <LL_ADC_REG_IsConversionOngoing>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f040 8486 	bne.w	8003ed2 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	db31      	blt.n	8003632 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a97      	ldr	r2, [pc, #604]	@ (8003830 <HAL_ADC_ConfigChannel+0x2b8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d02c      	beq.n	8003632 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d108      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x7e>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0e9b      	lsrs	r3, r3, #26
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	2201      	movs	r2, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	e016      	b.n	8003624 <HAL_ADC_ConfigChannel+0xac>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003604:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003606:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800360e:	2320      	movs	r3, #32
 8003610:	e003      	b.n	800361a <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8003612:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003614:	fab3 f383 	clz	r3, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	2201      	movs	r2, #1
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	69d1      	ldr	r1, [r2, #28]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	430b      	orrs	r3, r1
 8003630:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	f7ff f9df 	bl	8002a02 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fb51 	bl	8002cf0 <LL_ADC_REG_IsConversionOngoing>
 800364e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fb72 	bl	8002d40 <LL_ADC_INJ_IsConversionOngoing>
 800365c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003660:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003664:	2b00      	cmp	r3, #0
 8003666:	f040 824a 	bne.w	8003afe <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800366a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800366e:	2b00      	cmp	r3, #0
 8003670:	f040 8245 	bne.w	8003afe <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6819      	ldr	r1, [r3, #0]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	461a      	mov	r2, r3
 8003682:	f7ff f9ea 	bl	8002a5a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a69      	ldr	r2, [pc, #420]	@ (8003830 <HAL_ADC_ConfigChannel+0x2b8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d10d      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	08db      	lsrs	r3, r3, #3
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036aa:	e032      	b.n	8003712 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80036ac:	4b61      	ldr	r3, [pc, #388]	@ (8003834 <HAL_ADC_ConfigChannel+0x2bc>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80036b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036b8:	d10b      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x15a>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	695a      	ldr	r2, [r3, #20]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	e01d      	b.n	800370e <HAL_ADC_ConfigChannel+0x196>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10b      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x180>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	695a      	ldr	r2, [r3, #20]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	089b      	lsrs	r3, r3, #2
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	e00a      	b.n	800370e <HAL_ADC_ConfigChannel+0x196>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	695a      	ldr	r2, [r3, #20]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	089b      	lsrs	r3, r3, #2
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b04      	cmp	r3, #4
 8003718:	d048      	beq.n	80037ac <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6919      	ldr	r1, [r3, #16]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800372a:	f7ff f865 	bl	80027f8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a3f      	ldr	r2, [pc, #252]	@ (8003830 <HAL_ADC_ConfigChannel+0x2b8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d119      	bne.n	800376c <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	6919      	ldr	r1, [r3, #16]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	461a      	mov	r2, r3
 8003746:	f7ff f8fd 	bl	8002944 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	6919      	ldr	r1, [r3, #16]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d102      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x1ea>
 800375c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003760:	e000      	b.n	8003764 <HAL_ADC_ConfigChannel+0x1ec>
 8003762:	2300      	movs	r3, #0
 8003764:	461a      	mov	r2, r3
 8003766:	f7ff f8cb 	bl	8002900 <LL_ADC_SetOffsetSaturation>
 800376a:	e1c8      	b.n	8003afe <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	6919      	ldr	r1, [r3, #16]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800377a:	2b01      	cmp	r3, #1
 800377c:	d102      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x20c>
 800377e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003782:	e000      	b.n	8003786 <HAL_ADC_ConfigChannel+0x20e>
 8003784:	2300      	movs	r3, #0
 8003786:	461a      	mov	r2, r3
 8003788:	f7ff f898 	bl	80028bc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6818      	ldr	r0, [r3, #0]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	6919      	ldr	r1, [r3, #16]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	7e1b      	ldrb	r3, [r3, #24]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d102      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x22a>
 800379c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80037a0:	e000      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x22c>
 80037a2:	2300      	movs	r3, #0
 80037a4:	461a      	mov	r2, r3
 80037a6:	f7ff f86f 	bl	8002888 <LL_ADC_SetDataRightShift>
 80037aa:	e1a8      	b.n	8003afe <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003830 <HAL_ADC_ConfigChannel+0x2b8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	f040 815b 	bne.w	8003a6e <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2100      	movs	r1, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff f84c 	bl	800285c <LL_ADC_GetOffsetChannel>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x26c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff f841 	bl	800285c <LL_ADC_GetOffsetChannel>
 80037da:	4603      	mov	r3, r0
 80037dc:	0e9b      	lsrs	r3, r3, #26
 80037de:	f003 021f 	and.w	r2, r3, #31
 80037e2:	e017      	b.n	8003814 <HAL_ADC_ConfigChannel+0x29c>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff f836 	bl	800285c <LL_ADC_GetOffsetChannel>
 80037f0:	4603      	mov	r3, r0
 80037f2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037f6:	fa93 f3a3 	rbit	r3, r3
 80037fa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80037fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003800:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003806:	2320      	movs	r3, #32
 8003808:	e003      	b.n	8003812 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 800380a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800380c:	fab3 f383 	clz	r3, r3
 8003810:	b2db      	uxtb	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10b      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x2c0>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	0e9b      	lsrs	r3, r3, #26
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	e017      	b.n	800385c <HAL_ADC_ConfigChannel+0x2e4>
 800382c:	47ff0000 	.word	0x47ff0000
 8003830:	58026000 	.word	0x58026000
 8003834:	5c001000 	.word	0x5c001000
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003840:	fa93 f3a3 	rbit	r3, r3
 8003844:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003846:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003848:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800384a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8003850:	2320      	movs	r3, #32
 8003852:	e003      	b.n	800385c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003854:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003856:	fab3 f383 	clz	r3, r3
 800385a:	b2db      	uxtb	r3, r3
 800385c:	429a      	cmp	r2, r3
 800385e:	d106      	bne.n	800386e <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2200      	movs	r2, #0
 8003866:	2100      	movs	r1, #0
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff f88d 	bl	8002988 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2101      	movs	r1, #1
 8003874:	4618      	mov	r0, r3
 8003876:	f7fe fff1 	bl	800285c <LL_ADC_GetOffsetChannel>
 800387a:	4603      	mov	r3, r0
 800387c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <HAL_ADC_ConfigChannel+0x322>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2101      	movs	r1, #1
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe ffe6 	bl	800285c <LL_ADC_GetOffsetChannel>
 8003890:	4603      	mov	r3, r0
 8003892:	0e9b      	lsrs	r3, r3, #26
 8003894:	f003 021f 	and.w	r2, r3, #31
 8003898:	e017      	b.n	80038ca <HAL_ADC_ConfigChannel+0x352>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2101      	movs	r1, #1
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fe ffdb 	bl	800285c <LL_ADC_GetOffsetChannel>
 80038a6:	4603      	mov	r3, r0
 80038a8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038ac:	fa93 f3a3 	rbit	r3, r3
 80038b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80038b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80038b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 80038bc:	2320      	movs	r3, #32
 80038be:	e003      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 80038c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c2:	fab3 f383 	clz	r3, r3
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d105      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x36a>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	0e9b      	lsrs	r3, r3, #26
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	e011      	b.n	8003906 <HAL_ADC_ConfigChannel+0x38e>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80038f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80038f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80038fa:	2320      	movs	r3, #32
 80038fc:	e003      	b.n	8003906 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80038fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003900:	fab3 f383 	clz	r3, r3
 8003904:	b2db      	uxtb	r3, r3
 8003906:	429a      	cmp	r2, r3
 8003908:	d106      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2200      	movs	r2, #0
 8003910:	2101      	movs	r1, #1
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff f838 	bl	8002988 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2102      	movs	r1, #2
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe ff9c 	bl	800285c <LL_ADC_GetOffsetChannel>
 8003924:	4603      	mov	r3, r0
 8003926:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x3cc>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2102      	movs	r1, #2
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe ff91 	bl	800285c <LL_ADC_GetOffsetChannel>
 800393a:	4603      	mov	r3, r0
 800393c:	0e9b      	lsrs	r3, r3, #26
 800393e:	f003 021f 	and.w	r2, r3, #31
 8003942:	e017      	b.n	8003974 <HAL_ADC_ConfigChannel+0x3fc>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2102      	movs	r1, #2
 800394a:	4618      	mov	r0, r3
 800394c:	f7fe ff86 	bl	800285c <LL_ADC_GetOffsetChannel>
 8003950:	4603      	mov	r3, r0
 8003952:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003956:	fa93 f3a3 	rbit	r3, r3
 800395a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800395c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800395e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003966:	2320      	movs	r3, #32
 8003968:	e003      	b.n	8003972 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800396a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800396c:	fab3 f383 	clz	r3, r3
 8003970:	b2db      	uxtb	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800397c:	2b00      	cmp	r3, #0
 800397e:	d105      	bne.n	800398c <HAL_ADC_ConfigChannel+0x414>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	0e9b      	lsrs	r3, r3, #26
 8003986:	f003 031f 	and.w	r3, r3, #31
 800398a:	e011      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x438>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003994:	fa93 f3a3 	rbit	r3, r3
 8003998:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800399a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80039a4:	2320      	movs	r3, #32
 80039a6:	e003      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80039a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039aa:	fab3 f383 	clz	r3, r3
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d106      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2200      	movs	r2, #0
 80039ba:	2102      	movs	r1, #2
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fe ffe3 	bl	8002988 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2103      	movs	r1, #3
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fe ff47 	bl	800285c <LL_ADC_GetOffsetChannel>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x476>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2103      	movs	r1, #3
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fe ff3c 	bl	800285c <LL_ADC_GetOffsetChannel>
 80039e4:	4603      	mov	r3, r0
 80039e6:	0e9b      	lsrs	r3, r3, #26
 80039e8:	f003 021f 	and.w	r2, r3, #31
 80039ec:	e017      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x4a6>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2103      	movs	r1, #3
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fe ff31 	bl	800285c <LL_ADC_GetOffsetChannel>
 80039fa:	4603      	mov	r3, r0
 80039fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	fa93 f3a3 	rbit	r3, r3
 8003a04:	61fb      	str	r3, [r7, #28]
  return result;
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003a10:	2320      	movs	r3, #32
 8003a12:	e003      	b.n	8003a1c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a16:	fab3 f383 	clz	r3, r3
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d105      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x4be>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	0e9b      	lsrs	r3, r3, #26
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	e011      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x4e2>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	fa93 f3a3 	rbit	r3, r3
 8003a42:	613b      	str	r3, [r7, #16]
  return result;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8003a4e:	2320      	movs	r3, #32
 8003a50:	e003      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	fab3 f383 	clz	r3, r3
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d14f      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2200      	movs	r2, #0
 8003a64:	2103      	movs	r1, #3
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe ff8e 	bl	8002988 <LL_ADC_SetOffsetState>
 8003a6c:	e047      	b.n	8003afe <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	069b      	lsls	r3, r3, #26
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d107      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a90:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a98:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	069b      	lsls	r3, r3, #26
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d107      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ab4:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003abc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	069b      	lsls	r3, r3, #26
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d107      	bne.n	8003ada <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ad8:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ae0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	069b      	lsls	r3, r3, #26
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d107      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003afc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff f8a6 	bl	8002c54 <LL_ADC_IsEnabled>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f040 81ea 	bne.w	8003ee4 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	6819      	ldr	r1, [r3, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f7fe ffc7 	bl	8002ab0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	4a7a      	ldr	r2, [pc, #488]	@ (8003d10 <HAL_ADC_ConfigChannel+0x798>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	f040 80e0 	bne.w	8003cee <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4977      	ldr	r1, [pc, #476]	@ (8003d14 <HAL_ADC_ConfigChannel+0x79c>)
 8003b38:	428b      	cmp	r3, r1
 8003b3a:	d147      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x654>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4975      	ldr	r1, [pc, #468]	@ (8003d18 <HAL_ADC_ConfigChannel+0x7a0>)
 8003b42:	428b      	cmp	r3, r1
 8003b44:	d040      	beq.n	8003bc8 <HAL_ADC_ConfigChannel+0x650>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4974      	ldr	r1, [pc, #464]	@ (8003d1c <HAL_ADC_ConfigChannel+0x7a4>)
 8003b4c:	428b      	cmp	r3, r1
 8003b4e:	d039      	beq.n	8003bc4 <HAL_ADC_ConfigChannel+0x64c>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4972      	ldr	r1, [pc, #456]	@ (8003d20 <HAL_ADC_ConfigChannel+0x7a8>)
 8003b56:	428b      	cmp	r3, r1
 8003b58:	d032      	beq.n	8003bc0 <HAL_ADC_ConfigChannel+0x648>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4971      	ldr	r1, [pc, #452]	@ (8003d24 <HAL_ADC_ConfigChannel+0x7ac>)
 8003b60:	428b      	cmp	r3, r1
 8003b62:	d02b      	beq.n	8003bbc <HAL_ADC_ConfigChannel+0x644>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	496f      	ldr	r1, [pc, #444]	@ (8003d28 <HAL_ADC_ConfigChannel+0x7b0>)
 8003b6a:	428b      	cmp	r3, r1
 8003b6c:	d024      	beq.n	8003bb8 <HAL_ADC_ConfigChannel+0x640>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	496e      	ldr	r1, [pc, #440]	@ (8003d2c <HAL_ADC_ConfigChannel+0x7b4>)
 8003b74:	428b      	cmp	r3, r1
 8003b76:	d01d      	beq.n	8003bb4 <HAL_ADC_ConfigChannel+0x63c>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	496c      	ldr	r1, [pc, #432]	@ (8003d30 <HAL_ADC_ConfigChannel+0x7b8>)
 8003b7e:	428b      	cmp	r3, r1
 8003b80:	d016      	beq.n	8003bb0 <HAL_ADC_ConfigChannel+0x638>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	496b      	ldr	r1, [pc, #428]	@ (8003d34 <HAL_ADC_ConfigChannel+0x7bc>)
 8003b88:	428b      	cmp	r3, r1
 8003b8a:	d00f      	beq.n	8003bac <HAL_ADC_ConfigChannel+0x634>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4969      	ldr	r1, [pc, #420]	@ (8003d38 <HAL_ADC_ConfigChannel+0x7c0>)
 8003b92:	428b      	cmp	r3, r1
 8003b94:	d008      	beq.n	8003ba8 <HAL_ADC_ConfigChannel+0x630>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4968      	ldr	r1, [pc, #416]	@ (8003d3c <HAL_ADC_ConfigChannel+0x7c4>)
 8003b9c:	428b      	cmp	r3, r1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x62c>
 8003ba0:	4b67      	ldr	r3, [pc, #412]	@ (8003d40 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ba2:	e0a0      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e09e      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003ba8:	4b66      	ldr	r3, [pc, #408]	@ (8003d44 <HAL_ADC_ConfigChannel+0x7cc>)
 8003baa:	e09c      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003bac:	4b66      	ldr	r3, [pc, #408]	@ (8003d48 <HAL_ADC_ConfigChannel+0x7d0>)
 8003bae:	e09a      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003bb0:	4b60      	ldr	r3, [pc, #384]	@ (8003d34 <HAL_ADC_ConfigChannel+0x7bc>)
 8003bb2:	e098      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003bb4:	4b5e      	ldr	r3, [pc, #376]	@ (8003d30 <HAL_ADC_ConfigChannel+0x7b8>)
 8003bb6:	e096      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003bb8:	4b64      	ldr	r3, [pc, #400]	@ (8003d4c <HAL_ADC_ConfigChannel+0x7d4>)
 8003bba:	e094      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003bbc:	4b64      	ldr	r3, [pc, #400]	@ (8003d50 <HAL_ADC_ConfigChannel+0x7d8>)
 8003bbe:	e092      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003bc0:	4b64      	ldr	r3, [pc, #400]	@ (8003d54 <HAL_ADC_ConfigChannel+0x7dc>)
 8003bc2:	e090      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003bc4:	4b64      	ldr	r3, [pc, #400]	@ (8003d58 <HAL_ADC_ConfigChannel+0x7e0>)
 8003bc6:	e08e      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e08c      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4962      	ldr	r1, [pc, #392]	@ (8003d5c <HAL_ADC_ConfigChannel+0x7e4>)
 8003bd2:	428b      	cmp	r3, r1
 8003bd4:	d140      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x6e0>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	494f      	ldr	r1, [pc, #316]	@ (8003d18 <HAL_ADC_ConfigChannel+0x7a0>)
 8003bdc:	428b      	cmp	r3, r1
 8003bde:	d039      	beq.n	8003c54 <HAL_ADC_ConfigChannel+0x6dc>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	494d      	ldr	r1, [pc, #308]	@ (8003d1c <HAL_ADC_ConfigChannel+0x7a4>)
 8003be6:	428b      	cmp	r3, r1
 8003be8:	d032      	beq.n	8003c50 <HAL_ADC_ConfigChannel+0x6d8>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	494c      	ldr	r1, [pc, #304]	@ (8003d20 <HAL_ADC_ConfigChannel+0x7a8>)
 8003bf0:	428b      	cmp	r3, r1
 8003bf2:	d02b      	beq.n	8003c4c <HAL_ADC_ConfigChannel+0x6d4>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	494a      	ldr	r1, [pc, #296]	@ (8003d24 <HAL_ADC_ConfigChannel+0x7ac>)
 8003bfa:	428b      	cmp	r3, r1
 8003bfc:	d024      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0x6d0>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4949      	ldr	r1, [pc, #292]	@ (8003d28 <HAL_ADC_ConfigChannel+0x7b0>)
 8003c04:	428b      	cmp	r3, r1
 8003c06:	d01d      	beq.n	8003c44 <HAL_ADC_ConfigChannel+0x6cc>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4947      	ldr	r1, [pc, #284]	@ (8003d2c <HAL_ADC_ConfigChannel+0x7b4>)
 8003c0e:	428b      	cmp	r3, r1
 8003c10:	d016      	beq.n	8003c40 <HAL_ADC_ConfigChannel+0x6c8>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4946      	ldr	r1, [pc, #280]	@ (8003d30 <HAL_ADC_ConfigChannel+0x7b8>)
 8003c18:	428b      	cmp	r3, r1
 8003c1a:	d00f      	beq.n	8003c3c <HAL_ADC_ConfigChannel+0x6c4>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4944      	ldr	r1, [pc, #272]	@ (8003d34 <HAL_ADC_ConfigChannel+0x7bc>)
 8003c22:	428b      	cmp	r3, r1
 8003c24:	d008      	beq.n	8003c38 <HAL_ADC_ConfigChannel+0x6c0>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4944      	ldr	r1, [pc, #272]	@ (8003d3c <HAL_ADC_ConfigChannel+0x7c4>)
 8003c2c:	428b      	cmp	r3, r1
 8003c2e:	d101      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x6bc>
 8003c30:	4b43      	ldr	r3, [pc, #268]	@ (8003d40 <HAL_ADC_ConfigChannel+0x7c8>)
 8003c32:	e058      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003c34:	2300      	movs	r3, #0
 8003c36:	e056      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003c38:	4b43      	ldr	r3, [pc, #268]	@ (8003d48 <HAL_ADC_ConfigChannel+0x7d0>)
 8003c3a:	e054      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003c3c:	4b3d      	ldr	r3, [pc, #244]	@ (8003d34 <HAL_ADC_ConfigChannel+0x7bc>)
 8003c3e:	e052      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003c40:	4b3b      	ldr	r3, [pc, #236]	@ (8003d30 <HAL_ADC_ConfigChannel+0x7b8>)
 8003c42:	e050      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003c44:	4b41      	ldr	r3, [pc, #260]	@ (8003d4c <HAL_ADC_ConfigChannel+0x7d4>)
 8003c46:	e04e      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003c48:	4b41      	ldr	r3, [pc, #260]	@ (8003d50 <HAL_ADC_ConfigChannel+0x7d8>)
 8003c4a:	e04c      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003c4c:	4b41      	ldr	r3, [pc, #260]	@ (8003d54 <HAL_ADC_ConfigChannel+0x7dc>)
 8003c4e:	e04a      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003c50:	4b41      	ldr	r3, [pc, #260]	@ (8003d58 <HAL_ADC_ConfigChannel+0x7e0>)
 8003c52:	e048      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e046      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4940      	ldr	r1, [pc, #256]	@ (8003d60 <HAL_ADC_ConfigChannel+0x7e8>)
 8003c5e:	428b      	cmp	r3, r1
 8003c60:	d140      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x76c>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	492c      	ldr	r1, [pc, #176]	@ (8003d18 <HAL_ADC_ConfigChannel+0x7a0>)
 8003c68:	428b      	cmp	r3, r1
 8003c6a:	d039      	beq.n	8003ce0 <HAL_ADC_ConfigChannel+0x768>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	492a      	ldr	r1, [pc, #168]	@ (8003d1c <HAL_ADC_ConfigChannel+0x7a4>)
 8003c72:	428b      	cmp	r3, r1
 8003c74:	d032      	beq.n	8003cdc <HAL_ADC_ConfigChannel+0x764>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4929      	ldr	r1, [pc, #164]	@ (8003d20 <HAL_ADC_ConfigChannel+0x7a8>)
 8003c7c:	428b      	cmp	r3, r1
 8003c7e:	d02b      	beq.n	8003cd8 <HAL_ADC_ConfigChannel+0x760>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4927      	ldr	r1, [pc, #156]	@ (8003d24 <HAL_ADC_ConfigChannel+0x7ac>)
 8003c86:	428b      	cmp	r3, r1
 8003c88:	d024      	beq.n	8003cd4 <HAL_ADC_ConfigChannel+0x75c>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4926      	ldr	r1, [pc, #152]	@ (8003d28 <HAL_ADC_ConfigChannel+0x7b0>)
 8003c90:	428b      	cmp	r3, r1
 8003c92:	d01d      	beq.n	8003cd0 <HAL_ADC_ConfigChannel+0x758>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4924      	ldr	r1, [pc, #144]	@ (8003d2c <HAL_ADC_ConfigChannel+0x7b4>)
 8003c9a:	428b      	cmp	r3, r1
 8003c9c:	d016      	beq.n	8003ccc <HAL_ADC_ConfigChannel+0x754>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4923      	ldr	r1, [pc, #140]	@ (8003d30 <HAL_ADC_ConfigChannel+0x7b8>)
 8003ca4:	428b      	cmp	r3, r1
 8003ca6:	d00f      	beq.n	8003cc8 <HAL_ADC_ConfigChannel+0x750>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4926      	ldr	r1, [pc, #152]	@ (8003d48 <HAL_ADC_ConfigChannel+0x7d0>)
 8003cae:	428b      	cmp	r3, r1
 8003cb0:	d008      	beq.n	8003cc4 <HAL_ADC_ConfigChannel+0x74c>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	492b      	ldr	r1, [pc, #172]	@ (8003d64 <HAL_ADC_ConfigChannel+0x7ec>)
 8003cb8:	428b      	cmp	r3, r1
 8003cba:	d101      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x748>
 8003cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8003d68 <HAL_ADC_ConfigChannel+0x7f0>)
 8003cbe:	e012      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e010      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003cc4:	4b27      	ldr	r3, [pc, #156]	@ (8003d64 <HAL_ADC_ConfigChannel+0x7ec>)
 8003cc6:	e00e      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d34 <HAL_ADC_ConfigChannel+0x7bc>)
 8003cca:	e00c      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003ccc:	4b18      	ldr	r3, [pc, #96]	@ (8003d30 <HAL_ADC_ConfigChannel+0x7b8>)
 8003cce:	e00a      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8003d4c <HAL_ADC_ConfigChannel+0x7d4>)
 8003cd2:	e008      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d50 <HAL_ADC_ConfigChannel+0x7d8>)
 8003cd6:	e006      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8003d54 <HAL_ADC_ConfigChannel+0x7dc>)
 8003cda:	e004      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8003d58 <HAL_ADC_ConfigChannel+0x7e0>)
 8003cde:	e002      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x76e>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4610      	mov	r0, r2
 8003cea:	f7fe fd4b 	bl	8002784 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f280 80f6 	bge.w	8003ee4 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a05      	ldr	r2, [pc, #20]	@ (8003d14 <HAL_ADC_ConfigChannel+0x79c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d004      	beq.n	8003d0c <HAL_ADC_ConfigChannel+0x794>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a15      	ldr	r2, [pc, #84]	@ (8003d5c <HAL_ADC_ConfigChannel+0x7e4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d131      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x7f8>
 8003d0c:	4b17      	ldr	r3, [pc, #92]	@ (8003d6c <HAL_ADC_ConfigChannel+0x7f4>)
 8003d0e:	e030      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x7fa>
 8003d10:	47ff0000 	.word	0x47ff0000
 8003d14:	40022000 	.word	0x40022000
 8003d18:	04300002 	.word	0x04300002
 8003d1c:	08600004 	.word	0x08600004
 8003d20:	0c900008 	.word	0x0c900008
 8003d24:	10c00010 	.word	0x10c00010
 8003d28:	14f00020 	.word	0x14f00020
 8003d2c:	2a000400 	.word	0x2a000400
 8003d30:	2e300800 	.word	0x2e300800
 8003d34:	32601000 	.word	0x32601000
 8003d38:	43210000 	.word	0x43210000
 8003d3c:	4b840000 	.word	0x4b840000
 8003d40:	4fb80000 	.word	0x4fb80000
 8003d44:	47520000 	.word	0x47520000
 8003d48:	36902000 	.word	0x36902000
 8003d4c:	25b00200 	.word	0x25b00200
 8003d50:	21800100 	.word	0x21800100
 8003d54:	1d500080 	.word	0x1d500080
 8003d58:	19200040 	.word	0x19200040
 8003d5c:	40022100 	.word	0x40022100
 8003d60:	58026000 	.word	0x58026000
 8003d64:	3ac04000 	.word	0x3ac04000
 8003d68:	3ef08000 	.word	0x3ef08000
 8003d6c:	40022300 	.word	0x40022300
 8003d70:	4b61      	ldr	r3, [pc, #388]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x980>)
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fe fcf8 	bl	8002768 <LL_ADC_GetCommonPathInternalCh>
 8003d78:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a5f      	ldr	r2, [pc, #380]	@ (8003efc <HAL_ADC_ConfigChannel+0x984>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d004      	beq.n	8003d8e <HAL_ADC_ConfigChannel+0x816>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a5d      	ldr	r2, [pc, #372]	@ (8003f00 <HAL_ADC_ConfigChannel+0x988>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d10e      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x834>
 8003d8e:	485b      	ldr	r0, [pc, #364]	@ (8003efc <HAL_ADC_ConfigChannel+0x984>)
 8003d90:	f7fe ff60 	bl	8002c54 <LL_ADC_IsEnabled>
 8003d94:	4604      	mov	r4, r0
 8003d96:	485a      	ldr	r0, [pc, #360]	@ (8003f00 <HAL_ADC_ConfigChannel+0x988>)
 8003d98:	f7fe ff5c 	bl	8002c54 <LL_ADC_IsEnabled>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	4323      	orrs	r3, r4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	bf0c      	ite	eq
 8003da4:	2301      	moveq	r3, #1
 8003da6:	2300      	movne	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	e008      	b.n	8003dbe <HAL_ADC_ConfigChannel+0x846>
 8003dac:	4855      	ldr	r0, [pc, #340]	@ (8003f04 <HAL_ADC_ConfigChannel+0x98c>)
 8003dae:	f7fe ff51 	bl	8002c54 <LL_ADC_IsEnabled>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d07d      	beq.n	8003ebe <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a50      	ldr	r2, [pc, #320]	@ (8003f08 <HAL_ADC_ConfigChannel+0x990>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d130      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x8b6>
 8003dcc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003dce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d12b      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a4a      	ldr	r2, [pc, #296]	@ (8003f04 <HAL_ADC_ConfigChannel+0x98c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	f040 8081 	bne.w	8003ee4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a45      	ldr	r2, [pc, #276]	@ (8003efc <HAL_ADC_ConfigChannel+0x984>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d004      	beq.n	8003df6 <HAL_ADC_ConfigChannel+0x87e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a43      	ldr	r2, [pc, #268]	@ (8003f00 <HAL_ADC_ConfigChannel+0x988>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d101      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x882>
 8003df6:	4a45      	ldr	r2, [pc, #276]	@ (8003f0c <HAL_ADC_ConfigChannel+0x994>)
 8003df8:	e000      	b.n	8003dfc <HAL_ADC_ConfigChannel+0x884>
 8003dfa:	4a3f      	ldr	r2, [pc, #252]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x980>)
 8003dfc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003dfe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f7fe fc9c 	bl	8002742 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e0a:	4b41      	ldr	r3, [pc, #260]	@ (8003f10 <HAL_ADC_ConfigChannel+0x998>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	099b      	lsrs	r3, r3, #6
 8003e10:	4a40      	ldr	r2, [pc, #256]	@ (8003f14 <HAL_ADC_ConfigChannel+0x99c>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	3301      	adds	r3, #1
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003e1e:	e002      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f9      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e2c:	e05a      	b.n	8003ee4 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a39      	ldr	r2, [pc, #228]	@ (8003f18 <HAL_ADC_ConfigChannel+0x9a0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d11e      	bne.n	8003e76 <HAL_ADC_ConfigChannel+0x8fe>
 8003e38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d119      	bne.n	8003e76 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a2f      	ldr	r2, [pc, #188]	@ (8003f04 <HAL_ADC_ConfigChannel+0x98c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d14b      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a2a      	ldr	r2, [pc, #168]	@ (8003efc <HAL_ADC_ConfigChannel+0x984>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <HAL_ADC_ConfigChannel+0x8e8>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a29      	ldr	r2, [pc, #164]	@ (8003f00 <HAL_ADC_ConfigChannel+0x988>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d101      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x8ec>
 8003e60:	4a2a      	ldr	r2, [pc, #168]	@ (8003f0c <HAL_ADC_ConfigChannel+0x994>)
 8003e62:	e000      	b.n	8003e66 <HAL_ADC_ConfigChannel+0x8ee>
 8003e64:	4a24      	ldr	r2, [pc, #144]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x980>)
 8003e66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4610      	mov	r0, r2
 8003e70:	f7fe fc67 	bl	8002742 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e74:	e036      	b.n	8003ee4 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a28      	ldr	r2, [pc, #160]	@ (8003f1c <HAL_ADC_ConfigChannel+0x9a4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d131      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x96c>
 8003e80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d12c      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a1d      	ldr	r2, [pc, #116]	@ (8003f04 <HAL_ADC_ConfigChannel+0x98c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d127      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a18      	ldr	r2, [pc, #96]	@ (8003efc <HAL_ADC_ConfigChannel+0x984>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d004      	beq.n	8003ea8 <HAL_ADC_ConfigChannel+0x930>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a17      	ldr	r2, [pc, #92]	@ (8003f00 <HAL_ADC_ConfigChannel+0x988>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d101      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x934>
 8003ea8:	4a18      	ldr	r2, [pc, #96]	@ (8003f0c <HAL_ADC_ConfigChannel+0x994>)
 8003eaa:	e000      	b.n	8003eae <HAL_ADC_ConfigChannel+0x936>
 8003eac:	4a12      	ldr	r2, [pc, #72]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x980>)
 8003eae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003eb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	f7fe fc43 	bl	8002742 <LL_ADC_SetCommonPathInternalCh>
 8003ebc:	e012      	b.n	8003ee4 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec2:	f043 0220 	orr.w	r2, r3, #32
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8003ed0:	e008      	b.n	8003ee4 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed6:	f043 0220 	orr.w	r2, r3, #32
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003eec:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3794      	adds	r7, #148	@ 0x94
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd90      	pop	{r4, r7, pc}
 8003ef8:	58026300 	.word	0x58026300
 8003efc:	40022000 	.word	0x40022000
 8003f00:	40022100 	.word	0x40022100
 8003f04:	58026000 	.word	0x58026000
 8003f08:	c7520000 	.word	0xc7520000
 8003f0c:	40022300 	.word	0x40022300
 8003f10:	24000008 	.word	0x24000008
 8003f14:	053e2d63 	.word	0x053e2d63
 8003f18:	c3210000 	.word	0xc3210000
 8003f1c:	cb840000 	.word	0xcb840000

08003f20 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe feda 	bl	8002cf0 <LL_ADC_REG_IsConversionOngoing>
 8003f3c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fefc 	bl	8002d40 <LL_ADC_INJ_IsConversionOngoing>
 8003f48:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d103      	bne.n	8003f58 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 8098 	beq.w	8004088 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d02a      	beq.n	8003fbc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	7e5b      	ldrb	r3, [r3, #25]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d126      	bne.n	8003fbc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	7e1b      	ldrb	r3, [r3, #24]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d122      	bne.n	8003fbc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003f76:	2301      	movs	r3, #1
 8003f78:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f7a:	e014      	b.n	8003fa6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	4a45      	ldr	r2, [pc, #276]	@ (8004094 <ADC_ConversionStop+0x174>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d90d      	bls.n	8003fa0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f88:	f043 0210 	orr.w	r2, r3, #16
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f94:	f043 0201 	orr.w	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e074      	b.n	800408a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb0:	2b40      	cmp	r3, #64	@ 0x40
 8003fb2:	d1e3      	bne.n	8003f7c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2240      	movs	r2, #64	@ 0x40
 8003fba:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d014      	beq.n	8003fec <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe fe92 	bl	8002cf0 <LL_ADC_REG_IsConversionOngoing>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00c      	beq.n	8003fec <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe fe4f 	bl	8002c7a <LL_ADC_IsDisableOngoing>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d104      	bne.n	8003fec <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe fe6e 	bl	8002cc8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d014      	beq.n	800401c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fe fea2 	bl	8002d40 <LL_ADC_INJ_IsConversionOngoing>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00c      	beq.n	800401c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe fe37 	bl	8002c7a <LL_ADC_IsDisableOngoing>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d104      	bne.n	800401c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe fe7e 	bl	8002d18 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d005      	beq.n	800402e <ADC_ConversionStop+0x10e>
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b03      	cmp	r3, #3
 8004026:	d105      	bne.n	8004034 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004028:	230c      	movs	r3, #12
 800402a:	617b      	str	r3, [r7, #20]
        break;
 800402c:	e005      	b.n	800403a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800402e:	2308      	movs	r3, #8
 8004030:	617b      	str	r3, [r7, #20]
        break;
 8004032:	e002      	b.n	800403a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004034:	2304      	movs	r3, #4
 8004036:	617b      	str	r3, [r7, #20]
        break;
 8004038:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800403a:	f7fe fb63 	bl	8002704 <HAL_GetTick>
 800403e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004040:	e01b      	b.n	800407a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004042:	f7fe fb5f 	bl	8002704 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b05      	cmp	r3, #5
 800404e:	d914      	bls.n	800407a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	4013      	ands	r3, r2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00d      	beq.n	800407a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004062:	f043 0210 	orr.w	r2, r3, #16
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800406e:	f043 0201 	orr.w	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e007      	b.n	800408a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	4013      	ands	r3, r2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1dc      	bne.n	8004042 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3720      	adds	r7, #32
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	000cdbff 	.word	0x000cdbff

08004098 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe fdd5 	bl	8002c54 <LL_ADC_IsEnabled>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d16e      	bne.n	800418e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	4b38      	ldr	r3, [pc, #224]	@ (8004198 <ADC_Enable+0x100>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00d      	beq.n	80040da <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c2:	f043 0210 	orr.w	r2, r3, #16
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040ce:	f043 0201 	orr.w	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e05a      	b.n	8004190 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe fd90 	bl	8002c04 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80040e4:	f7fe fb0e 	bl	8002704 <HAL_GetTick>
 80040e8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a2b      	ldr	r2, [pc, #172]	@ (800419c <ADC_Enable+0x104>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d004      	beq.n	80040fe <ADC_Enable+0x66>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a29      	ldr	r2, [pc, #164]	@ (80041a0 <ADC_Enable+0x108>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d101      	bne.n	8004102 <ADC_Enable+0x6a>
 80040fe:	4b29      	ldr	r3, [pc, #164]	@ (80041a4 <ADC_Enable+0x10c>)
 8004100:	e000      	b.n	8004104 <ADC_Enable+0x6c>
 8004102:	4b29      	ldr	r3, [pc, #164]	@ (80041a8 <ADC_Enable+0x110>)
 8004104:	4618      	mov	r0, r3
 8004106:	f7fe fd13 	bl	8002b30 <LL_ADC_GetMultimode>
 800410a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a23      	ldr	r2, [pc, #140]	@ (80041a0 <ADC_Enable+0x108>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d002      	beq.n	800411c <ADC_Enable+0x84>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	e000      	b.n	800411e <ADC_Enable+0x86>
 800411c:	4b1f      	ldr	r3, [pc, #124]	@ (800419c <ADC_Enable+0x104>)
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6812      	ldr	r2, [r2, #0]
 8004122:	4293      	cmp	r3, r2
 8004124:	d02c      	beq.n	8004180 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d130      	bne.n	800418e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800412c:	e028      	b.n	8004180 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7fe fd8e 	bl	8002c54 <LL_ADC_IsEnabled>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d104      	bne.n	8004148 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fe fd5e 	bl	8002c04 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004148:	f7fe fadc 	bl	8002704 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d914      	bls.n	8004180 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d00d      	beq.n	8004180 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004168:	f043 0210 	orr.w	r2, r3, #16
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004174:	f043 0201 	orr.w	r2, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e007      	b.n	8004190 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b01      	cmp	r3, #1
 800418c:	d1cf      	bne.n	800412e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	8000003f 	.word	0x8000003f
 800419c:	40022000 	.word	0x40022000
 80041a0:	40022100 	.word	0x40022100
 80041a4:	40022300 	.word	0x40022300
 80041a8:	58026300 	.word	0x58026300

080041ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe fd5e 	bl	8002c7a <LL_ADC_IsDisableOngoing>
 80041be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fe fd45 	bl	8002c54 <LL_ADC_IsEnabled>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d047      	beq.n	8004260 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d144      	bne.n	8004260 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 030d 	and.w	r3, r3, #13
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d10c      	bne.n	80041fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fe fd1f 	bl	8002c2c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2203      	movs	r2, #3
 80041f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041f6:	f7fe fa85 	bl	8002704 <HAL_GetTick>
 80041fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041fc:	e029      	b.n	8004252 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004202:	f043 0210 	orr.w	r2, r3, #16
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800420e:	f043 0201 	orr.w	r2, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e023      	b.n	8004262 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800421a:	f7fe fa73 	bl	8002704 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d914      	bls.n	8004252 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00d      	beq.n	8004252 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800423a:	f043 0210 	orr.w	r2, r3, #16
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004246:	f043 0201 	orr.w	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e007      	b.n	8004262 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1dc      	bne.n	800421a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a6c      	ldr	r2, [pc, #432]	@ (800442c <ADC_ConfigureBoostMode+0x1c0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d004      	beq.n	8004288 <ADC_ConfigureBoostMode+0x1c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a6b      	ldr	r2, [pc, #428]	@ (8004430 <ADC_ConfigureBoostMode+0x1c4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d109      	bne.n	800429c <ADC_ConfigureBoostMode+0x30>
 8004288:	4b6a      	ldr	r3, [pc, #424]	@ (8004434 <ADC_ConfigureBoostMode+0x1c8>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004290:	2b00      	cmp	r3, #0
 8004292:	bf14      	ite	ne
 8004294:	2301      	movne	r3, #1
 8004296:	2300      	moveq	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	e008      	b.n	80042ae <ADC_ConfigureBoostMode+0x42>
 800429c:	4b66      	ldr	r3, [pc, #408]	@ (8004438 <ADC_ConfigureBoostMode+0x1cc>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf14      	ite	ne
 80042a8:	2301      	movne	r3, #1
 80042aa:	2300      	moveq	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d01c      	beq.n	80042ec <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80042b2:	f002 fdcd 	bl	8006e50 <HAL_RCC_GetHCLKFreq>
 80042b6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80042c0:	d010      	beq.n	80042e4 <ADC_ConfigureBoostMode+0x78>
 80042c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80042c6:	d873      	bhi.n	80043b0 <ADC_ConfigureBoostMode+0x144>
 80042c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042cc:	d002      	beq.n	80042d4 <ADC_ConfigureBoostMode+0x68>
 80042ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042d2:	d16d      	bne.n	80043b0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	0c1b      	lsrs	r3, r3, #16
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	60fb      	str	r3, [r7, #12]
        break;
 80042e2:	e068      	b.n	80043b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	089b      	lsrs	r3, r3, #2
 80042e8:	60fb      	str	r3, [r7, #12]
        break;
 80042ea:	e064      	b.n	80043b6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80042ec:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80042f0:	f04f 0100 	mov.w	r1, #0
 80042f4:	f003 ffa8 	bl	8008248 <HAL_RCCEx_GetPeriphCLKFreq>
 80042f8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004302:	d051      	beq.n	80043a8 <ADC_ConfigureBoostMode+0x13c>
 8004304:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004308:	d854      	bhi.n	80043b4 <ADC_ConfigureBoostMode+0x148>
 800430a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800430e:	d047      	beq.n	80043a0 <ADC_ConfigureBoostMode+0x134>
 8004310:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004314:	d84e      	bhi.n	80043b4 <ADC_ConfigureBoostMode+0x148>
 8004316:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800431a:	d03d      	beq.n	8004398 <ADC_ConfigureBoostMode+0x12c>
 800431c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004320:	d848      	bhi.n	80043b4 <ADC_ConfigureBoostMode+0x148>
 8004322:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004326:	d033      	beq.n	8004390 <ADC_ConfigureBoostMode+0x124>
 8004328:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800432c:	d842      	bhi.n	80043b4 <ADC_ConfigureBoostMode+0x148>
 800432e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004332:	d029      	beq.n	8004388 <ADC_ConfigureBoostMode+0x11c>
 8004334:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004338:	d83c      	bhi.n	80043b4 <ADC_ConfigureBoostMode+0x148>
 800433a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800433e:	d01a      	beq.n	8004376 <ADC_ConfigureBoostMode+0x10a>
 8004340:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004344:	d836      	bhi.n	80043b4 <ADC_ConfigureBoostMode+0x148>
 8004346:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800434a:	d014      	beq.n	8004376 <ADC_ConfigureBoostMode+0x10a>
 800434c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004350:	d830      	bhi.n	80043b4 <ADC_ConfigureBoostMode+0x148>
 8004352:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004356:	d00e      	beq.n	8004376 <ADC_ConfigureBoostMode+0x10a>
 8004358:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800435c:	d82a      	bhi.n	80043b4 <ADC_ConfigureBoostMode+0x148>
 800435e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004362:	d008      	beq.n	8004376 <ADC_ConfigureBoostMode+0x10a>
 8004364:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004368:	d824      	bhi.n	80043b4 <ADC_ConfigureBoostMode+0x148>
 800436a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800436e:	d002      	beq.n	8004376 <ADC_ConfigureBoostMode+0x10a>
 8004370:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004374:	d11e      	bne.n	80043b4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	0c9b      	lsrs	r3, r3, #18
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	fbb2 f3f3 	udiv	r3, r2, r3
 8004384:	60fb      	str	r3, [r7, #12]
        break;
 8004386:	e016      	b.n	80043b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	60fb      	str	r3, [r7, #12]
        break;
 800438e:	e012      	b.n	80043b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	60fb      	str	r3, [r7, #12]
        break;
 8004396:	e00e      	b.n	80043b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	099b      	lsrs	r3, r3, #6
 800439c:	60fb      	str	r3, [r7, #12]
        break;
 800439e:	e00a      	b.n	80043b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	09db      	lsrs	r3, r3, #7
 80043a4:	60fb      	str	r3, [r7, #12]
        break;
 80043a6:	e006      	b.n	80043b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	0a1b      	lsrs	r3, r3, #8
 80043ac:	60fb      	str	r3, [r7, #12]
        break;
 80043ae:	e002      	b.n	80043b6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80043b0:	bf00      	nop
 80043b2:	e000      	b.n	80043b6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80043b4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	085b      	lsrs	r3, r3, #1
 80043ba:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4a1f      	ldr	r2, [pc, #124]	@ (800443c <ADC_ConfigureBoostMode+0x1d0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d808      	bhi.n	80043d6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80043d2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80043d4:	e025      	b.n	8004422 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4a19      	ldr	r2, [pc, #100]	@ (8004440 <ADC_ConfigureBoostMode+0x1d4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d80a      	bhi.n	80043f4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043f0:	609a      	str	r2, [r3, #8]
}
 80043f2:	e016      	b.n	8004422 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4a13      	ldr	r2, [pc, #76]	@ (8004444 <ADC_ConfigureBoostMode+0x1d8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d80a      	bhi.n	8004412 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800440e:	609a      	str	r2, [r3, #8]
}
 8004410:	e007      	b.n	8004422 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004420:	609a      	str	r2, [r3, #8]
}
 8004422:	bf00      	nop
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40022000 	.word	0x40022000
 8004430:	40022100 	.word	0x40022100
 8004434:	40022300 	.word	0x40022300
 8004438:	58026300 	.word	0x58026300
 800443c:	005f5e10 	.word	0x005f5e10
 8004440:	00bebc20 	.word	0x00bebc20
 8004444:	017d7840 	.word	0x017d7840

08004448 <LL_ADC_IsEnabled>:
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <LL_ADC_IsEnabled+0x18>
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <LL_ADC_IsEnabled+0x1a>
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <LL_ADC_REG_IsConversionOngoing>:
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b04      	cmp	r3, #4
 8004480:	d101      	bne.n	8004486 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004494:	b590      	push	{r4, r7, lr}
 8004496:	b0a3      	sub	sp, #140	@ 0x8c
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e0c1      	b.n	8004636 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80044ba:	2300      	movs	r3, #0
 80044bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80044be:	2300      	movs	r3, #0
 80044c0:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004640 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d102      	bne.n	80044d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80044cc:	4b5d      	ldr	r3, [pc, #372]	@ (8004644 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	e001      	b.n	80044d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10b      	bne.n	80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e0:	f043 0220 	orr.w	r2, r3, #32
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0a0      	b.n	8004636 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff ffb9 	bl	800446e <LL_ADC_REG_IsConversionOngoing>
 80044fc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff ffb2 	bl	800446e <LL_ADC_REG_IsConversionOngoing>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	f040 8081 	bne.w	8004614 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004512:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004516:	2b00      	cmp	r3, #0
 8004518:	d17c      	bne.n	8004614 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a48      	ldr	r2, [pc, #288]	@ (8004640 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a46      	ldr	r2, [pc, #280]	@ (8004644 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d101      	bne.n	8004532 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800452e:	4b46      	ldr	r3, [pc, #280]	@ (8004648 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004530:	e000      	b.n	8004534 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004532:	4b46      	ldr	r3, [pc, #280]	@ (800464c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004534:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d039      	beq.n	80045b2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800453e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	431a      	orrs	r2, r3
 800454c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800454e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a3a      	ldr	r2, [pc, #232]	@ (8004640 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d004      	beq.n	8004564 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a39      	ldr	r2, [pc, #228]	@ (8004644 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d10e      	bne.n	8004582 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004564:	4836      	ldr	r0, [pc, #216]	@ (8004640 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004566:	f7ff ff6f 	bl	8004448 <LL_ADC_IsEnabled>
 800456a:	4604      	mov	r4, r0
 800456c:	4835      	ldr	r0, [pc, #212]	@ (8004644 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800456e:	f7ff ff6b 	bl	8004448 <LL_ADC_IsEnabled>
 8004572:	4603      	mov	r3, r0
 8004574:	4323      	orrs	r3, r4
 8004576:	2b00      	cmp	r3, #0
 8004578:	bf0c      	ite	eq
 800457a:	2301      	moveq	r3, #1
 800457c:	2300      	movne	r3, #0
 800457e:	b2db      	uxtb	r3, r3
 8004580:	e008      	b.n	8004594 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004582:	4833      	ldr	r0, [pc, #204]	@ (8004650 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004584:	f7ff ff60 	bl	8004448 <LL_ADC_IsEnabled>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	bf0c      	ite	eq
 800458e:	2301      	moveq	r3, #1
 8004590:	2300      	movne	r3, #0
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d047      	beq.n	8004628 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004598:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	4b2d      	ldr	r3, [pc, #180]	@ (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800459e:	4013      	ands	r3, r2
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	6811      	ldr	r1, [r2, #0]
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	6892      	ldr	r2, [r2, #8]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	431a      	orrs	r2, r3
 80045ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045ae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045b0:	e03a      	b.n	8004628 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80045b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045bc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004640 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d004      	beq.n	80045d2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004644 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d10e      	bne.n	80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80045d2:	481b      	ldr	r0, [pc, #108]	@ (8004640 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80045d4:	f7ff ff38 	bl	8004448 <LL_ADC_IsEnabled>
 80045d8:	4604      	mov	r4, r0
 80045da:	481a      	ldr	r0, [pc, #104]	@ (8004644 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80045dc:	f7ff ff34 	bl	8004448 <LL_ADC_IsEnabled>
 80045e0:	4603      	mov	r3, r0
 80045e2:	4323      	orrs	r3, r4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	e008      	b.n	8004602 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80045f0:	4817      	ldr	r0, [pc, #92]	@ (8004650 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80045f2:	f7ff ff29 	bl	8004448 <LL_ADC_IsEnabled>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	bf0c      	ite	eq
 80045fc:	2301      	moveq	r3, #1
 80045fe:	2300      	movne	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d010      	beq.n	8004628 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004606:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	4b12      	ldr	r3, [pc, #72]	@ (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800460c:	4013      	ands	r3, r2
 800460e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004610:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004612:	e009      	b.n	8004628 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004618:	f043 0220 	orr.w	r2, r3, #32
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004626:	e000      	b.n	800462a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004628:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004632:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004636:	4618      	mov	r0, r3
 8004638:	378c      	adds	r7, #140	@ 0x8c
 800463a:	46bd      	mov	sp, r7
 800463c:	bd90      	pop	{r4, r7, pc}
 800463e:	bf00      	nop
 8004640:	40022000 	.word	0x40022000
 8004644:	40022100 	.word	0x40022100
 8004648:	40022300 	.word	0x40022300
 800464c:	58026300 	.word	0x58026300
 8004650:	58026000 	.word	0x58026000
 8004654:	fffff0e0 	.word	0xfffff0e0

08004658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004668:	4b0b      	ldr	r3, [pc, #44]	@ (8004698 <__NVIC_SetPriorityGrouping+0x40>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004674:	4013      	ands	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004680:	4b06      	ldr	r3, [pc, #24]	@ (800469c <__NVIC_SetPriorityGrouping+0x44>)
 8004682:	4313      	orrs	r3, r2
 8004684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004686:	4a04      	ldr	r2, [pc, #16]	@ (8004698 <__NVIC_SetPriorityGrouping+0x40>)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	60d3      	str	r3, [r2, #12]
}
 800468c:	bf00      	nop
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	e000ed00 	.word	0xe000ed00
 800469c:	05fa0000 	.word	0x05fa0000

080046a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046a4:	4b04      	ldr	r3, [pc, #16]	@ (80046b8 <__NVIC_GetPriorityGrouping+0x18>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	f003 0307 	and.w	r3, r3, #7
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	e000ed00 	.word	0xe000ed00

080046bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	db0b      	blt.n	80046e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	f003 021f 	and.w	r2, r3, #31
 80046d4:	4907      	ldr	r1, [pc, #28]	@ (80046f4 <__NVIC_EnableIRQ+0x38>)
 80046d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	2001      	movs	r0, #1
 80046de:	fa00 f202 	lsl.w	r2, r0, r2
 80046e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	e000e100 	.word	0xe000e100

080046f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	6039      	str	r1, [r7, #0]
 8004702:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004704:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004708:	2b00      	cmp	r3, #0
 800470a:	db0a      	blt.n	8004722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	b2da      	uxtb	r2, r3
 8004710:	490c      	ldr	r1, [pc, #48]	@ (8004744 <__NVIC_SetPriority+0x4c>)
 8004712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004716:	0112      	lsls	r2, r2, #4
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	440b      	add	r3, r1
 800471c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004720:	e00a      	b.n	8004738 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	b2da      	uxtb	r2, r3
 8004726:	4908      	ldr	r1, [pc, #32]	@ (8004748 <__NVIC_SetPriority+0x50>)
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	3b04      	subs	r3, #4
 8004730:	0112      	lsls	r2, r2, #4
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	440b      	add	r3, r1
 8004736:	761a      	strb	r2, [r3, #24]
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	e000e100 	.word	0xe000e100
 8004748:	e000ed00 	.word	0xe000ed00

0800474c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800474c:	b480      	push	{r7}
 800474e:	b089      	sub	sp, #36	@ 0x24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f1c3 0307 	rsb	r3, r3, #7
 8004766:	2b04      	cmp	r3, #4
 8004768:	bf28      	it	cs
 800476a:	2304      	movcs	r3, #4
 800476c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	3304      	adds	r3, #4
 8004772:	2b06      	cmp	r3, #6
 8004774:	d902      	bls.n	800477c <NVIC_EncodePriority+0x30>
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	3b03      	subs	r3, #3
 800477a:	e000      	b.n	800477e <NVIC_EncodePriority+0x32>
 800477c:	2300      	movs	r3, #0
 800477e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004780:	f04f 32ff 	mov.w	r2, #4294967295
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	43da      	mvns	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	401a      	ands	r2, r3
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004794:	f04f 31ff 	mov.w	r1, #4294967295
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	fa01 f303 	lsl.w	r3, r1, r3
 800479e:	43d9      	mvns	r1, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a4:	4313      	orrs	r3, r2
         );
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3724      	adds	r7, #36	@ 0x24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
	...

080047b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3b01      	subs	r3, #1
 80047c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047c4:	d301      	bcc.n	80047ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047c6:	2301      	movs	r3, #1
 80047c8:	e00f      	b.n	80047ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ca:	4a0a      	ldr	r2, [pc, #40]	@ (80047f4 <SysTick_Config+0x40>)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047d2:	210f      	movs	r1, #15
 80047d4:	f04f 30ff 	mov.w	r0, #4294967295
 80047d8:	f7ff ff8e 	bl	80046f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047dc:	4b05      	ldr	r3, [pc, #20]	@ (80047f4 <SysTick_Config+0x40>)
 80047de:	2200      	movs	r2, #0
 80047e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047e2:	4b04      	ldr	r3, [pc, #16]	@ (80047f4 <SysTick_Config+0x40>)
 80047e4:	2207      	movs	r2, #7
 80047e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	e000e010 	.word	0xe000e010

080047f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff ff29 	bl	8004658 <__NVIC_SetPriorityGrouping>
}
 8004806:	bf00      	nop
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b086      	sub	sp, #24
 8004812:	af00      	add	r7, sp, #0
 8004814:	4603      	mov	r3, r0
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800481c:	f7ff ff40 	bl	80046a0 <__NVIC_GetPriorityGrouping>
 8004820:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	6978      	ldr	r0, [r7, #20]
 8004828:	f7ff ff90 	bl	800474c <NVIC_EncodePriority>
 800482c:	4602      	mov	r2, r0
 800482e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004832:	4611      	mov	r1, r2
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff ff5f 	bl	80046f8 <__NVIC_SetPriority>
}
 800483a:	bf00      	nop
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	af00      	add	r7, sp, #0
 8004848:	4603      	mov	r3, r0
 800484a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800484c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff ff33 	bl	80046bc <__NVIC_EnableIRQ>
}
 8004856:	bf00      	nop
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff ffa4 	bl	80047b4 <SysTick_Config>
 800486c:	4603      	mov	r3, r0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b098      	sub	sp, #96	@ 0x60
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004880:	4a84      	ldr	r2, [pc, #528]	@ (8004a94 <HAL_FDCAN_Init+0x21c>)
 8004882:	f107 030c 	add.w	r3, r7, #12
 8004886:	4611      	mov	r1, r2
 8004888:	224c      	movs	r2, #76	@ 0x4c
 800488a:	4618      	mov	r0, r3
 800488c:	f006 f9fc 	bl	800ac88 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e1c6      	b.n	8004c28 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a98 <HAL_FDCAN_Init+0x220>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d106      	bne.n	80048b2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80048ac:	461a      	mov	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fd fc46 	bl	8002158 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0210 	bic.w	r2, r2, #16
 80048da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048dc:	f7fd ff12 	bl	8002704 <HAL_GetTick>
 80048e0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80048e2:	e014      	b.n	800490e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80048e4:	f7fd ff0e 	bl	8002704 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b0a      	cmp	r3, #10
 80048f0:	d90d      	bls.n	800490e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048f8:	f043 0201 	orr.w	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2203      	movs	r2, #3
 8004906:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e18c      	b.n	8004c28 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	2b08      	cmp	r3, #8
 800491a:	d0e3      	beq.n	80048e4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699a      	ldr	r2, [r3, #24]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800492c:	f7fd feea 	bl	8002704 <HAL_GetTick>
 8004930:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004932:	e014      	b.n	800495e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004934:	f7fd fee6 	bl	8002704 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b0a      	cmp	r3, #10
 8004940:	d90d      	bls.n	800495e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004948:	f043 0201 	orr.w	r2, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2203      	movs	r2, #3
 8004956:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e164      	b.n	8004c28 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0e3      	beq.n	8004934 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0202 	orr.w	r2, r2, #2
 800497a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	7c1b      	ldrb	r3, [r3, #16]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d108      	bne.n	8004996 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004992:	619a      	str	r2, [r3, #24]
 8004994:	e007      	b.n	80049a6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	699a      	ldr	r2, [r3, #24]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049a4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	7c5b      	ldrb	r3, [r3, #17]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d108      	bne.n	80049c0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699a      	ldr	r2, [r3, #24]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049bc:	619a      	str	r2, [r3, #24]
 80049be:	e007      	b.n	80049d0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049ce:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	7c9b      	ldrb	r3, [r3, #18]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d108      	bne.n	80049ea <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80049e6:	619a      	str	r2, [r3, #24]
 80049e8:	e007      	b.n	80049fa <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699a      	ldr	r2, [r3, #24]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049f8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004a1e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0210 	bic.w	r2, r2, #16
 8004a2e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d108      	bne.n	8004a4a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0204 	orr.w	r2, r2, #4
 8004a46:	619a      	str	r2, [r3, #24]
 8004a48:	e030      	b.n	8004aac <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d02c      	beq.n	8004aac <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d020      	beq.n	8004a9c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699a      	ldr	r2, [r3, #24]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a68:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0210 	orr.w	r2, r2, #16
 8004a78:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d114      	bne.n	8004aac <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699a      	ldr	r2, [r3, #24]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0220 	orr.w	r2, r2, #32
 8004a90:	619a      	str	r2, [r3, #24]
 8004a92:	e00b      	b.n	8004aac <HAL_FDCAN_Init+0x234>
 8004a94:	0800b844 	.word	0x0800b844
 8004a98:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0220 	orr.w	r2, r2, #32
 8004aaa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004abc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ac4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ad4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ad6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ae0:	d115      	bne.n	8004b0e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aec:	3b01      	subs	r3, #1
 8004aee:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004af0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af6:	3b01      	subs	r3, #1
 8004af8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004afa:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b02:	3b01      	subs	r3, #1
 8004b04:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004b0a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004b0c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b34:	4413      	add	r3, r2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d011      	beq.n	8004b5e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004b42:	f023 0107 	bic.w	r1, r3, #7
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	3360      	adds	r3, #96	@ 0x60
 8004b4e:	443b      	add	r3, r7
 8004b50:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d011      	beq.n	8004b8a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b6e:	f023 0107 	bic.w	r1, r3, #7
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	3360      	adds	r3, #96	@ 0x60
 8004b7a:	443b      	add	r3, r7
 8004b7c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d012      	beq.n	8004bb8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b9a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	3360      	adds	r3, #96	@ 0x60
 8004ba6:	443b      	add	r3, r7
 8004ba8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004bac:	011a      	lsls	r2, r3, #4
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d012      	beq.n	8004be6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004bc8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	3360      	adds	r3, #96	@ 0x60
 8004bd4:	443b      	add	r3, r7
 8004bd6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004bda:	021a      	lsls	r2, r3, #8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a11      	ldr	r2, [pc, #68]	@ (8004c30 <HAL_FDCAN_Init+0x3b8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d107      	bne.n	8004c00 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f022 0203 	bic.w	r2, r2, #3
 8004bfe:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fdf7 	bl	800580c <FDCAN_CalcultateRamBlockAddresses>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004c24:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3760      	adds	r7, #96	@ 0x60
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	4000a000 	.word	0x4000a000

08004c34 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004c44:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d002      	beq.n	8004c52 <HAL_FDCAN_ConfigFilter+0x1e>
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d157      	bne.n	8004d02 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d12b      	bne.n	8004cb2 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	2b07      	cmp	r3, #7
 8004c60:	d10d      	bne.n	8004c7e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004c6e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004c74:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8004c76:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	e00e      	b.n	8004c9c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004c8a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004c92:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	e025      	b.n	8004cfe <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	075a      	lsls	r2, r3, #29
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	2b07      	cmp	r3, #7
 8004cc6:	d103      	bne.n	8004cd0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	e006      	b.n	8004cde <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	079a      	lsls	r2, r3, #30
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	4413      	add	r3, r2
 8004cea:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	e008      	b.n	8004d14 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d08:	f043 0202 	orr.w	r2, r3, #2
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
  }
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d111      	bne.n	8004d58 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0201 	bic.w	r2, r2, #1
 8004d4a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	e008      	b.n	8004d6a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d5e:	f043 0204 	orr.w	r2, r3, #4
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
  }
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b086      	sub	sp, #24
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d141      	bne.n	8004e12 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004d96:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004da4:	f043 0220 	orr.w	r2, r3, #32
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e038      	b.n	8004e24 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004dba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d009      	beq.n	8004dd6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dc8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e026      	b.n	8004e24 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004dde:	0c1b      	lsrs	r3, r3, #16
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 fe93 	bl	8005b18 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2101      	movs	r1, #1
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfe:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004e02:	2201      	movs	r2, #1
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	409a      	lsls	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e008      	b.n	8004e24 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e18:	f043 0208 	orr.w	r2, r3, #8
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
  }
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b08b      	sub	sp, #44	@ 0x2c
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004e44:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004e46:	7efb      	ldrb	r3, [r7, #27]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	f040 8149 	bne.w	80050e0 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b40      	cmp	r3, #64	@ 0x40
 8004e52:	d14c      	bne.n	8004eee <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e5c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d109      	bne.n	8004e78 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e6a:	f043 0220 	orr.w	r2, r3, #32
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e13c      	b.n	80050f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d109      	bne.n	8004e9c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e12a      	b.n	80050f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ea4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eac:	d10a      	bne.n	8004ec4 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004eb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004eba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ebe:	d101      	bne.n	8004ec4 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ecc:	0a1b      	lsrs	r3, r3, #8
 8004ece:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee0:	69f9      	ldr	r1, [r7, #28]
 8004ee2:	fb01 f303 	mul.w	r3, r1, r3
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eec:	e068      	b.n	8004fc0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b41      	cmp	r3, #65	@ 0x41
 8004ef2:	d14c      	bne.n	8004f8e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004efc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d109      	bne.n	8004f18 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f0a:	f043 0220 	orr.w	r2, r3, #32
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0ec      	b.n	80050f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d109      	bne.n	8004f3c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f2e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e0da      	b.n	80050f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f4c:	d10a      	bne.n	8004f64 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f5e:	d101      	bne.n	8004f64 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004f60:	2301      	movs	r3, #1
 8004f62:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f6c:	0a1b      	lsrs	r3, r3, #8
 8004f6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	4413      	add	r3, r2
 8004f76:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f80:	69f9      	ldr	r1, [r7, #28]
 8004f82:	fb01 f303 	mul.w	r3, r1, r3
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f8c:	e018      	b.n	8004fc0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d309      	bcc.n	8004fac <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f9e:	f043 0220 	orr.w	r2, r3, #32
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e0a2      	b.n	80050f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb4:	68b9      	ldr	r1, [r7, #8]
 8004fb6:	fb01 f303 	mul.w	r3, r1, r3
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d107      	bne.n	8004fe4 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	0c9b      	lsrs	r3, r3, #18
 8004fda:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	e005      	b.n	8004ff0 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500a:	3304      	adds	r3, #4
 800500c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	b29a      	uxth	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	0c1b      	lsrs	r3, r3, #16
 800501e:	f003 020f 	and.w	r2, r3, #15
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	0e1b      	lsrs	r3, r3, #24
 8005044:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	0fda      	lsrs	r2, r3, #31
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	3304      	adds	r3, #4
 800505a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800505c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005060:	2300      	movs	r3, #0
 8005062:	623b      	str	r3, [r7, #32]
 8005064:	e00a      	b.n	800507c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	441a      	add	r2, r3
 800506c:	6839      	ldr	r1, [r7, #0]
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	440b      	add	r3, r1
 8005072:	7812      	ldrb	r2, [r2, #0]
 8005074:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	3301      	adds	r3, #1
 800507a:	623b      	str	r3, [r7, #32]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4a1f      	ldr	r2, [pc, #124]	@ (8005100 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005082:	5cd3      	ldrb	r3, [r2, r3]
 8005084:	461a      	mov	r2, r3
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	4293      	cmp	r3, r2
 800508a:	d3ec      	bcc.n	8005066 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b40      	cmp	r3, #64	@ 0x40
 8005090:	d105      	bne.n	800509e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800509c:	e01e      	b.n	80050dc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b41      	cmp	r3, #65	@ 0x41
 80050a2:	d105      	bne.n	80050b0 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80050ae:	e015      	b.n	80050dc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2b1f      	cmp	r3, #31
 80050b4:	d808      	bhi.n	80050c8 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2101      	movs	r1, #1
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	fa01 f202 	lsl.w	r2, r1, r2
 80050c2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80050c6:	e009      	b.n	80050dc <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f003 021f 	and.w	r2, r3, #31
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2101      	movs	r1, #1
 80050d4:	fa01 f202 	lsl.w	r2, r1, r2
 80050d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	e008      	b.n	80050f2 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050e6:	f043 0208 	orr.w	r2, r3, #8
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
  }
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	372c      	adds	r7, #44	@ 0x2c
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	0800b8a0 	.word	0x0800b8a0

08005104 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005116:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005118:	7dfb      	ldrb	r3, [r7, #23]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d002      	beq.n	8005124 <HAL_FDCAN_ActivateNotification+0x20>
 800511e:	7dfb      	ldrb	r3, [r7, #23]
 8005120:	2b02      	cmp	r3, #2
 8005122:	d155      	bne.n	80051d0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	4013      	ands	r3, r2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d108      	bne.n	8005144 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0201 	orr.w	r2, r2, #1
 8005140:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005142:	e014      	b.n	800516e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	4013      	ands	r3, r2
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	429a      	cmp	r2, r3
 8005152:	d108      	bne.n	8005166 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0202 	orr.w	r2, r2, #2
 8005162:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005164:	e003      	b.n	800516e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2203      	movs	r2, #3
 800516c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005174:	2b00      	cmp	r3, #0
 8005176:	d009      	beq.n	800518c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	430a      	orrs	r2, r1
 8005188:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005192:	2b00      	cmp	r3, #0
 8005194:	d009      	beq.n	80051aa <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	4b0f      	ldr	r3, [pc, #60]	@ (80051f0 <HAL_FDCAN_ActivateNotification+0xec>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	430b      	orrs	r3, r1
 80051bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80051be:	4b0d      	ldr	r3, [pc, #52]	@ (80051f4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80051c0:	695a      	ldr	r2, [r3, #20]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	0f9b      	lsrs	r3, r3, #30
 80051c6:	490b      	ldr	r1, [pc, #44]	@ (80051f4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e008      	b.n	80051e2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051d6:	f043 0202 	orr.w	r2, r3, #2
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
  }
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	371c      	adds	r7, #28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	3fcfffff 	.word	0x3fcfffff
 80051f4:	4000a800 	.word	0x4000a800

080051f8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b096      	sub	sp, #88	@ 0x58
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005200:	4b9a      	ldr	r3, [pc, #616]	@ (800546c <HAL_FDCAN_IRQHandler+0x274>)
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	079b      	lsls	r3, r3, #30
 8005206:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005208:	4b98      	ldr	r3, [pc, #608]	@ (800546c <HAL_FDCAN_IRQHandler+0x274>)
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	079b      	lsls	r3, r3, #30
 800520e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005210:	4013      	ands	r3, r2
 8005212:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800521a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800521e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005226:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005228:	4013      	ands	r3, r2
 800522a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800523e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005240:	4013      	ands	r3, r2
 8005242:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800524a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800524e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005256:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005258:	4013      	ands	r3, r2
 800525a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005262:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005266:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005270:	4013      	ands	r3, r2
 8005272:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800527a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800527e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005286:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005288:	4013      	ands	r3, r2
 800528a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800529a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800529c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d010      	beq.n	80052ca <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80052a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80052be:	4b6b      	ldr	r3, [pc, #428]	@ (800546c <HAL_FDCAN_IRQHandler+0x274>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fa54 	bl	8005772 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80052ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052cc:	0a9b      	lsrs	r3, r3, #10
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d01d      	beq.n	8005312 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80052d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d8:	0a9b      	lsrs	r3, r3, #10
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d017      	beq.n	8005312 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80052ea:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052f6:	4013      	ands	r3, r2
 80052f8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005302:	651a      	str	r2, [r3, #80]	@ 0x50
 8005304:	4b59      	ldr	r3, [pc, #356]	@ (800546c <HAL_FDCAN_IRQHandler+0x274>)
 8005306:	2200      	movs	r2, #0
 8005308:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800530a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fa07 	bl	8005720 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00d      	beq.n	8005334 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800531e:	4b54      	ldr	r3, [pc, #336]	@ (8005470 <HAL_FDCAN_IRQHandler+0x278>)
 8005320:	400b      	ands	r3, r1
 8005322:	6513      	str	r3, [r2, #80]	@ 0x50
 8005324:	4a51      	ldr	r2, [pc, #324]	@ (800546c <HAL_FDCAN_IRQHandler+0x274>)
 8005326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005328:	0f9b      	lsrs	r3, r3, #30
 800532a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800532c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f9c0 	bl	80056b4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00d      	beq.n	8005356 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005340:	4b4b      	ldr	r3, [pc, #300]	@ (8005470 <HAL_FDCAN_IRQHandler+0x278>)
 8005342:	400b      	ands	r3, r1
 8005344:	6513      	str	r3, [r2, #80]	@ 0x50
 8005346:	4a49      	ldr	r2, [pc, #292]	@ (800546c <HAL_FDCAN_IRQHandler+0x274>)
 8005348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800534a:	0f9b      	lsrs	r3, r3, #30
 800534c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800534e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f9ba 	bl	80056ca <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005356:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00d      	beq.n	8005378 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005362:	4b43      	ldr	r3, [pc, #268]	@ (8005470 <HAL_FDCAN_IRQHandler+0x278>)
 8005364:	400b      	ands	r3, r1
 8005366:	6513      	str	r3, [r2, #80]	@ 0x50
 8005368:	4a40      	ldr	r2, [pc, #256]	@ (800546c <HAL_FDCAN_IRQHandler+0x274>)
 800536a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800536c:	0f9b      	lsrs	r3, r3, #30
 800536e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005370:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fc fad0 	bl	8001918 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005378:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00d      	beq.n	800539a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005384:	4b3a      	ldr	r3, [pc, #232]	@ (8005470 <HAL_FDCAN_IRQHandler+0x278>)
 8005386:	400b      	ands	r3, r1
 8005388:	6513      	str	r3, [r2, #80]	@ 0x50
 800538a:	4a38      	ldr	r2, [pc, #224]	@ (800546c <HAL_FDCAN_IRQHandler+0x274>)
 800538c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800538e:	0f9b      	lsrs	r3, r3, #30
 8005390:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005392:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f9a3 	bl	80056e0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800539a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800539c:	0adb      	lsrs	r3, r3, #11
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d010      	beq.n	80053c8 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80053a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a8:	0adb      	lsrs	r3, r3, #11
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80053bc:	4b2b      	ldr	r3, [pc, #172]	@ (800546c <HAL_FDCAN_IRQHandler+0x274>)
 80053be:	2200      	movs	r2, #0
 80053c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f997 	bl	80056f6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80053c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ca:	0a5b      	lsrs	r3, r3, #9
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d01d      	beq.n	8005410 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80053d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d6:	0a5b      	lsrs	r3, r3, #9
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d017      	beq.n	8005410 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80053e8:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053f4:	4013      	ands	r3, r2
 80053f6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005400:	651a      	str	r2, [r3, #80]	@ 0x50
 8005402:	4b1a      	ldr	r3, [pc, #104]	@ (800546c <HAL_FDCAN_IRQHandler+0x274>)
 8005404:	2200      	movs	r2, #0
 8005406:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005408:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f97d 	bl	800570a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005412:	0cdb      	lsrs	r3, r3, #19
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d010      	beq.n	800543e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800541c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541e:	0cdb      	lsrs	r3, r3, #19
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005430:	651a      	str	r2, [r3, #80]	@ 0x50
 8005432:	4b0e      	ldr	r3, [pc, #56]	@ (800546c <HAL_FDCAN_IRQHandler+0x274>)
 8005434:	2200      	movs	r2, #0
 8005436:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f97c 	bl	8005736 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800543e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005440:	0c1b      	lsrs	r3, r3, #16
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d016      	beq.n	8005478 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800544a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544c:	0c1b      	lsrs	r3, r3, #16
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d010      	beq.n	8005478 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800545e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005460:	4b02      	ldr	r3, [pc, #8]	@ (800546c <HAL_FDCAN_IRQHandler+0x274>)
 8005462:	2200      	movs	r2, #0
 8005464:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	e004      	b.n	8005474 <HAL_FDCAN_IRQHandler+0x27c>
 800546a:	bf00      	nop
 800546c:	4000a800 	.word	0x4000a800
 8005470:	3fcfffff 	.word	0x3fcfffff
 8005474:	f000 f969 	bl	800574a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800547a:	0c9b      	lsrs	r3, r3, #18
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	d010      	beq.n	80054a6 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005486:	0c9b      	lsrs	r3, r3, #18
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005498:	651a      	str	r2, [r3, #80]	@ 0x50
 800549a:	4b83      	ldr	r3, [pc, #524]	@ (80056a8 <HAL_FDCAN_IRQHandler+0x4b0>)
 800549c:	2200      	movs	r2, #0
 800549e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f95c 	bl	800575e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80054a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054a8:	0c5b      	lsrs	r3, r3, #17
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d015      	beq.n	80054de <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80054b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b4:	0c5b      	lsrs	r3, r3, #17
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00f      	beq.n	80054de <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80054c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80054c8:	4b77      	ldr	r3, [pc, #476]	@ (80056a8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80054de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00d      	beq.n	8005500 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054ea:	4b70      	ldr	r3, [pc, #448]	@ (80056ac <HAL_FDCAN_IRQHandler+0x4b4>)
 80054ec:	400b      	ands	r3, r1
 80054ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80054f0:	4a6d      	ldr	r2, [pc, #436]	@ (80056a8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80054f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054f4:	0f9b      	lsrs	r3, r3, #30
 80054f6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80054f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f94d 	bl	800579a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005502:	2b00      	cmp	r3, #0
 8005504:	d011      	beq.n	800552a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800550c:	4b67      	ldr	r3, [pc, #412]	@ (80056ac <HAL_FDCAN_IRQHandler+0x4b4>)
 800550e:	400b      	ands	r3, r1
 8005510:	6513      	str	r3, [r2, #80]	@ 0x50
 8005512:	4a65      	ldr	r2, [pc, #404]	@ (80056a8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005516:	0f9b      	lsrs	r3, r3, #30
 8005518:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a60      	ldr	r2, [pc, #384]	@ (80056b0 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	f040 80ac 	bne.w	800568e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 80a4 	beq.w	800568e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005558:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800555a:	4013      	ands	r3, r2
 800555c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005568:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005570:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005572:	4013      	ands	r3, r2
 8005574:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005580:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800558a:	4013      	ands	r3, r2
 800558c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005598:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a0:	6a3a      	ldr	r2, [r7, #32]
 80055a2:	4013      	ands	r3, r2
 80055a4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80055b0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	4013      	ands	r3, r2
 80055bc:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80055ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d007      	beq.n	80055e4 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055da:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80055dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f8e6 	bl	80057b0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80055e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d007      	beq.n	80055fa <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055f0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80055f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f8e6 	bl	80057c6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	099b      	lsrs	r3, r3, #6
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01a      	beq.n	800563c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	099b      	lsrs	r3, r3, #6
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d014      	beq.n	800563c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005618:	0c1b      	lsrs	r3, r3, #16
 800561a:	b29b      	uxth	r3, r3
 800561c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005624:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005628:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2240      	movs	r2, #64	@ 0x40
 8005630:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	6939      	ldr	r1, [r7, #16]
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f8d0 	bl	80057dc <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800563c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563e:	2b00      	cmp	r3, #0
 8005640:	d007      	beq.n	8005652 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005648:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800564a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f8d1 	bl	80057f4 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00b      	beq.n	8005670 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	6a3a      	ldr	r2, [r7, #32]
 800565e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00b      	beq.n	800568e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f874 	bl	8005786 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800569e:	bf00      	nop
 80056a0:	3758      	adds	r7, #88	@ 0x58
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	4000a800 	.word	0x4000a800
 80056ac:	3fcfffff 	.word	0x3fcfffff
 80056b0:	4000a000 	.word	0x4000a000

080056b4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
	...

0800580c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005818:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005822:	4ba7      	ldr	r3, [pc, #668]	@ (8005ac0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005824:	4013      	ands	r3, r2
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	0091      	lsls	r1, r2, #2
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6812      	ldr	r2, [r2, #0]
 800582e:	430b      	orrs	r3, r1
 8005830:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800583c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005844:	041a      	lsls	r2, r3, #16
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	4413      	add	r3, r2
 8005858:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005862:	4b97      	ldr	r3, [pc, #604]	@ (8005ac0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005864:	4013      	ands	r3, r2
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	0091      	lsls	r1, r2, #2
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6812      	ldr	r2, [r2, #0]
 800586e:	430b      	orrs	r3, r1
 8005870:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800587c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005884:	041a      	lsls	r2, r3, #16
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	4413      	add	r3, r2
 800589a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80058a4:	4b86      	ldr	r3, [pc, #536]	@ (8005ac0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	0091      	lsls	r1, r2, #2
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6812      	ldr	r2, [r2, #0]
 80058b0:	430b      	orrs	r3, r1
 80058b2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80058be:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c6:	041a      	lsls	r2, r3, #16
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80058da:	fb02 f303 	mul.w	r3, r2, r3
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	4413      	add	r3, r2
 80058e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80058ec:	4b74      	ldr	r3, [pc, #464]	@ (8005ac0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80058ee:	4013      	ands	r3, r2
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	0091      	lsls	r1, r2, #2
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	430b      	orrs	r3, r1
 80058fa:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005906:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800590e:	041a      	lsls	r2, r3, #16
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005922:	fb02 f303 	mul.w	r3, r2, r3
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	4413      	add	r3, r2
 800592a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005934:	4b62      	ldr	r3, [pc, #392]	@ (8005ac0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005936:	4013      	ands	r3, r2
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	0091      	lsls	r1, r2, #2
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6812      	ldr	r2, [r2, #0]
 8005940:	430b      	orrs	r3, r1
 8005942:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800594e:	fb02 f303 	mul.w	r3, r2, r3
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	4413      	add	r3, r2
 8005956:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005960:	4b57      	ldr	r3, [pc, #348]	@ (8005ac0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005962:	4013      	ands	r3, r2
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	0091      	lsls	r1, r2, #2
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6812      	ldr	r2, [r2, #0]
 800596c:	430b      	orrs	r3, r1
 800596e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800597a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005982:	041a      	lsls	r2, r3, #16
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	4413      	add	r3, r2
 8005998:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80059a2:	4b47      	ldr	r3, [pc, #284]	@ (8005ac0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	0091      	lsls	r1, r2, #2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6812      	ldr	r2, [r2, #0]
 80059ae:	430b      	orrs	r3, r1
 80059b0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80059bc:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059c4:	041a      	lsls	r2, r3, #16
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80059d8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059e0:	061a      	lsls	r2, r3, #24
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059f0:	4b34      	ldr	r3, [pc, #208]	@ (8005ac4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80059f2:	4413      	add	r3, r2
 80059f4:	009a      	lsls	r2, r3, #2
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	441a      	add	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	441a      	add	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005a26:	fb01 f303 	mul.w	r3, r1, r3
 8005a2a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005a2c:	441a      	add	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005a3e:	fb01 f303 	mul.w	r3, r1, r3
 8005a42:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005a44:	441a      	add	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005a56:	fb01 f303 	mul.w	r3, r1, r3
 8005a5a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005a5c:	441a      	add	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	441a      	add	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a82:	6879      	ldr	r1, [r7, #4]
 8005a84:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005a86:	fb01 f303 	mul.w	r3, r1, r3
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	441a      	add	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005aa2:	fb01 f303 	mul.w	r3, r1, r3
 8005aa6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005aa8:	441a      	add	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab6:	4a04      	ldr	r2, [pc, #16]	@ (8005ac8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d915      	bls.n	8005ae8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005abc:	e006      	b.n	8005acc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005abe:	bf00      	nop
 8005ac0:	ffff0003 	.word	0xffff0003
 8005ac4:	10002b00 	.word	0x10002b00
 8005ac8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ad2:	f043 0220 	orr.w	r2, r3, #32
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2203      	movs	r2, #3
 8005ae0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e010      	b.n	8005b0a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	e005      	b.n	8005afc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	3304      	adds	r3, #4
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d3f3      	bcc.n	8005af0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop

08005b18 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b089      	sub	sp, #36	@ 0x24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10a      	bne.n	8005b44 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005b36:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	61fb      	str	r3, [r7, #28]
 8005b42:	e00a      	b.n	8005b5a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005b4c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005b52:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005b54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b58:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005b64:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005b6a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005b70:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b86:	6839      	ldr	r1, [r7, #0]
 8005b88:	fb01 f303 	mul.w	r3, r1, r3
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	69fa      	ldr	r2, [r7, #28]
 8005b96:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005baa:	2300      	movs	r3, #0
 8005bac:	617b      	str	r3, [r7, #20]
 8005bae:	e020      	b.n	8005bf2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	3303      	adds	r3, #3
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	3302      	adds	r3, #2
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	440b      	add	r3, r1
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005bc8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	440b      	add	r3, r1
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005bd6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005bd8:	6879      	ldr	r1, [r7, #4]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	440a      	add	r2, r1
 8005bde:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005be0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	3304      	adds	r3, #4
 8005bea:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	3304      	adds	r3, #4
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	4a06      	ldr	r2, [pc, #24]	@ (8005c10 <FDCAN_CopyMessageToRAM+0xf8>)
 8005bf8:	5cd3      	ldrb	r3, [r2, r3]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d3d6      	bcc.n	8005bb0 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8005c02:	bf00      	nop
 8005c04:	bf00      	nop
 8005c06:	3724      	adds	r7, #36	@ 0x24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	0800b8a0 	.word	0x0800b8a0

08005c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b089      	sub	sp, #36	@ 0x24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c22:	4b86      	ldr	r3, [pc, #536]	@ (8005e3c <HAL_GPIO_Init+0x228>)
 8005c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c26:	e18c      	b.n	8005f42 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	fa01 f303 	lsl.w	r3, r1, r3
 8005c34:	4013      	ands	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 817e 	beq.w	8005f3c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f003 0303 	and.w	r3, r3, #3
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d005      	beq.n	8005c58 <HAL_GPIO_Init+0x44>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f003 0303 	and.w	r3, r3, #3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d130      	bne.n	8005cba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	2203      	movs	r2, #3
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c8e:	2201      	movs	r2, #1
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	43db      	mvns	r3, r3
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	091b      	lsrs	r3, r3, #4
 8005ca4:	f003 0201 	and.w	r2, r3, #1
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d017      	beq.n	8005cf6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	2203      	movs	r2, #3
 8005cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd6:	43db      	mvns	r3, r3
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f003 0303 	and.w	r3, r3, #3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d123      	bne.n	8005d4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	08da      	lsrs	r2, r3, #3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	3208      	adds	r2, #8
 8005d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	220f      	movs	r2, #15
 8005d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	4013      	ands	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	691a      	ldr	r2, [r3, #16]
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	08da      	lsrs	r2, r3, #3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3208      	adds	r2, #8
 8005d44:	69b9      	ldr	r1, [r7, #24]
 8005d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	2203      	movs	r2, #3
 8005d56:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5a:	43db      	mvns	r3, r3
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f003 0203 	and.w	r2, r3, #3
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 80d8 	beq.w	8005f3c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d8c:	4b2c      	ldr	r3, [pc, #176]	@ (8005e40 <HAL_GPIO_Init+0x22c>)
 8005d8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d92:	4a2b      	ldr	r2, [pc, #172]	@ (8005e40 <HAL_GPIO_Init+0x22c>)
 8005d94:	f043 0302 	orr.w	r3, r3, #2
 8005d98:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005d9c:	4b28      	ldr	r3, [pc, #160]	@ (8005e40 <HAL_GPIO_Init+0x22c>)
 8005d9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005daa:	4a26      	ldr	r2, [pc, #152]	@ (8005e44 <HAL_GPIO_Init+0x230>)
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	089b      	lsrs	r3, r3, #2
 8005db0:	3302      	adds	r3, #2
 8005db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	220f      	movs	r2, #15
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e48 <HAL_GPIO_Init+0x234>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d04a      	beq.n	8005e6c <HAL_GPIO_Init+0x258>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8005e4c <HAL_GPIO_Init+0x238>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d02b      	beq.n	8005e36 <HAL_GPIO_Init+0x222>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e50 <HAL_GPIO_Init+0x23c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d025      	beq.n	8005e32 <HAL_GPIO_Init+0x21e>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a1a      	ldr	r2, [pc, #104]	@ (8005e54 <HAL_GPIO_Init+0x240>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d01f      	beq.n	8005e2e <HAL_GPIO_Init+0x21a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a19      	ldr	r2, [pc, #100]	@ (8005e58 <HAL_GPIO_Init+0x244>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d019      	beq.n	8005e2a <HAL_GPIO_Init+0x216>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a18      	ldr	r2, [pc, #96]	@ (8005e5c <HAL_GPIO_Init+0x248>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d013      	beq.n	8005e26 <HAL_GPIO_Init+0x212>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a17      	ldr	r2, [pc, #92]	@ (8005e60 <HAL_GPIO_Init+0x24c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00d      	beq.n	8005e22 <HAL_GPIO_Init+0x20e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a16      	ldr	r2, [pc, #88]	@ (8005e64 <HAL_GPIO_Init+0x250>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d007      	beq.n	8005e1e <HAL_GPIO_Init+0x20a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a15      	ldr	r2, [pc, #84]	@ (8005e68 <HAL_GPIO_Init+0x254>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d101      	bne.n	8005e1a <HAL_GPIO_Init+0x206>
 8005e16:	2309      	movs	r3, #9
 8005e18:	e029      	b.n	8005e6e <HAL_GPIO_Init+0x25a>
 8005e1a:	230a      	movs	r3, #10
 8005e1c:	e027      	b.n	8005e6e <HAL_GPIO_Init+0x25a>
 8005e1e:	2307      	movs	r3, #7
 8005e20:	e025      	b.n	8005e6e <HAL_GPIO_Init+0x25a>
 8005e22:	2306      	movs	r3, #6
 8005e24:	e023      	b.n	8005e6e <HAL_GPIO_Init+0x25a>
 8005e26:	2305      	movs	r3, #5
 8005e28:	e021      	b.n	8005e6e <HAL_GPIO_Init+0x25a>
 8005e2a:	2304      	movs	r3, #4
 8005e2c:	e01f      	b.n	8005e6e <HAL_GPIO_Init+0x25a>
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e01d      	b.n	8005e6e <HAL_GPIO_Init+0x25a>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e01b      	b.n	8005e6e <HAL_GPIO_Init+0x25a>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e019      	b.n	8005e6e <HAL_GPIO_Init+0x25a>
 8005e3a:	bf00      	nop
 8005e3c:	58000080 	.word	0x58000080
 8005e40:	58024400 	.word	0x58024400
 8005e44:	58000400 	.word	0x58000400
 8005e48:	58020000 	.word	0x58020000
 8005e4c:	58020400 	.word	0x58020400
 8005e50:	58020800 	.word	0x58020800
 8005e54:	58020c00 	.word	0x58020c00
 8005e58:	58021000 	.word	0x58021000
 8005e5c:	58021400 	.word	0x58021400
 8005e60:	58021800 	.word	0x58021800
 8005e64:	58021c00 	.word	0x58021c00
 8005e68:	58022400 	.word	0x58022400
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	f002 0203 	and.w	r2, r2, #3
 8005e74:	0092      	lsls	r2, r2, #2
 8005e76:	4093      	lsls	r3, r2
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e7e:	4938      	ldr	r1, [pc, #224]	@ (8005f60 <HAL_GPIO_Init+0x34c>)
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	089b      	lsrs	r3, r3, #2
 8005e84:	3302      	adds	r3, #2
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	43db      	mvns	r3, r3
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005eb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	43db      	mvns	r3, r3
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ee0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	43db      	mvns	r3, r3
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	fa22 f303 	lsr.w	r3, r2, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f47f ae6b 	bne.w	8005c28 <HAL_GPIO_Init+0x14>
  }
}
 8005f52:	bf00      	nop
 8005f54:	bf00      	nop
 8005f56:	3724      	adds	r7, #36	@ 0x24
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	58000400 	.word	0x58000400

08005f64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691a      	ldr	r2, [r3, #16]
 8005f74:	887b      	ldrh	r3, [r7, #2]
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]
 8005f80:	e001      	b.n	8005f86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f82:	2300      	movs	r3, #0
 8005f84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	807b      	strh	r3, [r7, #2]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005fa4:	787b      	ldrb	r3, [r7, #1]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005faa:	887a      	ldrh	r2, [r7, #2]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005fb0:	e003      	b.n	8005fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005fb2:	887b      	ldrh	r3, [r7, #2]
 8005fb4:	041a      	lsls	r2, r3, #16
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	619a      	str	r2, [r3, #24]
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
	...

08005fc8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005fd0:	4b19      	ldr	r3, [pc, #100]	@ (8006038 <HAL_PWREx_ConfigSupply+0x70>)
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d00a      	beq.n	8005ff2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005fdc:	4b16      	ldr	r3, [pc, #88]	@ (8006038 <HAL_PWREx_ConfigSupply+0x70>)
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d001      	beq.n	8005fee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e01f      	b.n	800602e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e01d      	b.n	800602e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ff2:	4b11      	ldr	r3, [pc, #68]	@ (8006038 <HAL_PWREx_ConfigSupply+0x70>)
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f023 0207 	bic.w	r2, r3, #7
 8005ffa:	490f      	ldr	r1, [pc, #60]	@ (8006038 <HAL_PWREx_ConfigSupply+0x70>)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006002:	f7fc fb7f 	bl	8002704 <HAL_GetTick>
 8006006:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006008:	e009      	b.n	800601e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800600a:	f7fc fb7b 	bl	8002704 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006018:	d901      	bls.n	800601e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e007      	b.n	800602e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800601e:	4b06      	ldr	r3, [pc, #24]	@ (8006038 <HAL_PWREx_ConfigSupply+0x70>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800602a:	d1ee      	bne.n	800600a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	58024800 	.word	0x58024800

0800603c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08c      	sub	sp, #48	@ 0x30
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e3c8      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 8087 	beq.w	800616a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800605c:	4b88      	ldr	r3, [pc, #544]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006064:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006066:	4b86      	ldr	r3, [pc, #536]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 8006068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800606c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606e:	2b10      	cmp	r3, #16
 8006070:	d007      	beq.n	8006082 <HAL_RCC_OscConfig+0x46>
 8006072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006074:	2b18      	cmp	r3, #24
 8006076:	d110      	bne.n	800609a <HAL_RCC_OscConfig+0x5e>
 8006078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d10b      	bne.n	800609a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006082:	4b7f      	ldr	r3, [pc, #508]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d06c      	beq.n	8006168 <HAL_RCC_OscConfig+0x12c>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d168      	bne.n	8006168 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e3a2      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a2:	d106      	bne.n	80060b2 <HAL_RCC_OscConfig+0x76>
 80060a4:	4b76      	ldr	r3, [pc, #472]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a75      	ldr	r2, [pc, #468]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 80060aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	e02e      	b.n	8006110 <HAL_RCC_OscConfig+0xd4>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10c      	bne.n	80060d4 <HAL_RCC_OscConfig+0x98>
 80060ba:	4b71      	ldr	r3, [pc, #452]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a70      	ldr	r2, [pc, #448]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 80060c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	4b6e      	ldr	r3, [pc, #440]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a6d      	ldr	r2, [pc, #436]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 80060cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	e01d      	b.n	8006110 <HAL_RCC_OscConfig+0xd4>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060dc:	d10c      	bne.n	80060f8 <HAL_RCC_OscConfig+0xbc>
 80060de:	4b68      	ldr	r3, [pc, #416]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a67      	ldr	r2, [pc, #412]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 80060e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	4b65      	ldr	r3, [pc, #404]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a64      	ldr	r2, [pc, #400]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 80060f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	e00b      	b.n	8006110 <HAL_RCC_OscConfig+0xd4>
 80060f8:	4b61      	ldr	r3, [pc, #388]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a60      	ldr	r2, [pc, #384]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 80060fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	4b5e      	ldr	r3, [pc, #376]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a5d      	ldr	r2, [pc, #372]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 800610a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800610e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d013      	beq.n	8006140 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006118:	f7fc faf4 	bl	8002704 <HAL_GetTick>
 800611c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800611e:	e008      	b.n	8006132 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006120:	f7fc faf0 	bl	8002704 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b64      	cmp	r3, #100	@ 0x64
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e356      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006132:	4b53      	ldr	r3, [pc, #332]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0f0      	beq.n	8006120 <HAL_RCC_OscConfig+0xe4>
 800613e:	e014      	b.n	800616a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006140:	f7fc fae0 	bl	8002704 <HAL_GetTick>
 8006144:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006148:	f7fc fadc 	bl	8002704 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b64      	cmp	r3, #100	@ 0x64
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e342      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800615a:	4b49      	ldr	r3, [pc, #292]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1f0      	bne.n	8006148 <HAL_RCC_OscConfig+0x10c>
 8006166:	e000      	b.n	800616a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 808c 	beq.w	8006290 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006178:	4b41      	ldr	r3, [pc, #260]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006180:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006182:	4b3f      	ldr	r3, [pc, #252]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 8006184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006186:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d007      	beq.n	800619e <HAL_RCC_OscConfig+0x162>
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	2b18      	cmp	r3, #24
 8006192:	d137      	bne.n	8006204 <HAL_RCC_OscConfig+0x1c8>
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d132      	bne.n	8006204 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800619e:	4b38      	ldr	r3, [pc, #224]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0304 	and.w	r3, r3, #4
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <HAL_RCC_OscConfig+0x17a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e314      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80061b6:	4b32      	ldr	r3, [pc, #200]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f023 0219 	bic.w	r2, r3, #25
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	492f      	ldr	r1, [pc, #188]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c8:	f7fc fa9c 	bl	8002704 <HAL_GetTick>
 80061cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061ce:	e008      	b.n	80061e2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061d0:	f7fc fa98 	bl	8002704 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e2fe      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061e2:	4b27      	ldr	r3, [pc, #156]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0304 	and.w	r3, r3, #4
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0f0      	beq.n	80061d0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ee:	4b24      	ldr	r3, [pc, #144]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	061b      	lsls	r3, r3, #24
 80061fc:	4920      	ldr	r1, [pc, #128]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006202:	e045      	b.n	8006290 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d026      	beq.n	800625a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800620c:	4b1c      	ldr	r3, [pc, #112]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f023 0219 	bic.w	r2, r3, #25
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	4919      	ldr	r1, [pc, #100]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 800621a:	4313      	orrs	r3, r2
 800621c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621e:	f7fc fa71 	bl	8002704 <HAL_GetTick>
 8006222:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006224:	e008      	b.n	8006238 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006226:	f7fc fa6d 	bl	8002704 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e2d3      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006238:	4b11      	ldr	r3, [pc, #68]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0f0      	beq.n	8006226 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006244:	4b0e      	ldr	r3, [pc, #56]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	061b      	lsls	r3, r3, #24
 8006252:	490b      	ldr	r1, [pc, #44]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 8006254:	4313      	orrs	r3, r2
 8006256:	604b      	str	r3, [r1, #4]
 8006258:	e01a      	b.n	8006290 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800625a:	4b09      	ldr	r3, [pc, #36]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a08      	ldr	r2, [pc, #32]	@ (8006280 <HAL_RCC_OscConfig+0x244>)
 8006260:	f023 0301 	bic.w	r3, r3, #1
 8006264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006266:	f7fc fa4d 	bl	8002704 <HAL_GetTick>
 800626a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800626c:	e00a      	b.n	8006284 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800626e:	f7fc fa49 	bl	8002704 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d903      	bls.n	8006284 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e2af      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
 8006280:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006284:	4b96      	ldr	r3, [pc, #600]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1ee      	bne.n	800626e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0310 	and.w	r3, r3, #16
 8006298:	2b00      	cmp	r3, #0
 800629a:	d06a      	beq.n	8006372 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800629c:	4b90      	ldr	r3, [pc, #576]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062a4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062a6:	4b8e      	ldr	r3, [pc, #568]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 80062a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062aa:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	2b08      	cmp	r3, #8
 80062b0:	d007      	beq.n	80062c2 <HAL_RCC_OscConfig+0x286>
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2b18      	cmp	r3, #24
 80062b6:	d11b      	bne.n	80062f0 <HAL_RCC_OscConfig+0x2b4>
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d116      	bne.n	80062f0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062c2:	4b87      	ldr	r3, [pc, #540]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <HAL_RCC_OscConfig+0x29e>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	2b80      	cmp	r3, #128	@ 0x80
 80062d4:	d001      	beq.n	80062da <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e282      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062da:	4b81      	ldr	r3, [pc, #516]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	061b      	lsls	r3, r3, #24
 80062e8:	497d      	ldr	r1, [pc, #500]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062ee:	e040      	b.n	8006372 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d023      	beq.n	8006340 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80062f8:	4b79      	ldr	r3, [pc, #484]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a78      	ldr	r2, [pc, #480]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 80062fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006304:	f7fc f9fe 	bl	8002704 <HAL_GetTick>
 8006308:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800630a:	e008      	b.n	800631e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800630c:	f7fc f9fa 	bl	8002704 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e260      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800631e:	4b70      	ldr	r3, [pc, #448]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0f0      	beq.n	800630c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800632a:	4b6d      	ldr	r3, [pc, #436]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	061b      	lsls	r3, r3, #24
 8006338:	4969      	ldr	r1, [pc, #420]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 800633a:	4313      	orrs	r3, r2
 800633c:	60cb      	str	r3, [r1, #12]
 800633e:	e018      	b.n	8006372 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006340:	4b67      	ldr	r3, [pc, #412]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a66      	ldr	r2, [pc, #408]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 8006346:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800634a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634c:	f7fc f9da 	bl	8002704 <HAL_GetTick>
 8006350:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006352:	e008      	b.n	8006366 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006354:	f7fc f9d6 	bl	8002704 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b02      	cmp	r3, #2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e23c      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006366:	4b5e      	ldr	r3, [pc, #376]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1f0      	bne.n	8006354 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0308 	and.w	r3, r3, #8
 800637a:	2b00      	cmp	r3, #0
 800637c:	d036      	beq.n	80063ec <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d019      	beq.n	80063ba <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006386:	4b56      	ldr	r3, [pc, #344]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 8006388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800638a:	4a55      	ldr	r2, [pc, #340]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 800638c:	f043 0301 	orr.w	r3, r3, #1
 8006390:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006392:	f7fc f9b7 	bl	8002704 <HAL_GetTick>
 8006396:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006398:	e008      	b.n	80063ac <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800639a:	f7fc f9b3 	bl	8002704 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d901      	bls.n	80063ac <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e219      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063ac:	4b4c      	ldr	r3, [pc, #304]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 80063ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0f0      	beq.n	800639a <HAL_RCC_OscConfig+0x35e>
 80063b8:	e018      	b.n	80063ec <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063ba:	4b49      	ldr	r3, [pc, #292]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 80063bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063be:	4a48      	ldr	r2, [pc, #288]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 80063c0:	f023 0301 	bic.w	r3, r3, #1
 80063c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c6:	f7fc f99d 	bl	8002704 <HAL_GetTick>
 80063ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063cc:	e008      	b.n	80063e0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ce:	f7fc f999 	bl	8002704 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d901      	bls.n	80063e0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e1ff      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063e0:	4b3f      	ldr	r3, [pc, #252]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 80063e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1f0      	bne.n	80063ce <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d036      	beq.n	8006466 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d019      	beq.n	8006434 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006400:	4b37      	ldr	r3, [pc, #220]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a36      	ldr	r2, [pc, #216]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 8006406:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800640a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800640c:	f7fc f97a 	bl	8002704 <HAL_GetTick>
 8006410:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006414:	f7fc f976 	bl	8002704 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e1dc      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006426:	4b2e      	ldr	r3, [pc, #184]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0f0      	beq.n	8006414 <HAL_RCC_OscConfig+0x3d8>
 8006432:	e018      	b.n	8006466 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006434:	4b2a      	ldr	r3, [pc, #168]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a29      	ldr	r2, [pc, #164]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 800643a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800643e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006440:	f7fc f960 	bl	8002704 <HAL_GetTick>
 8006444:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006446:	e008      	b.n	800645a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006448:	f7fc f95c 	bl	8002704 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e1c2      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800645a:	4b21      	ldr	r3, [pc, #132]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1f0      	bne.n	8006448 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0304 	and.w	r3, r3, #4
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 8086 	beq.w	8006580 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006474:	4b1b      	ldr	r3, [pc, #108]	@ (80064e4 <HAL_RCC_OscConfig+0x4a8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a1a      	ldr	r2, [pc, #104]	@ (80064e4 <HAL_RCC_OscConfig+0x4a8>)
 800647a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800647e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006480:	f7fc f940 	bl	8002704 <HAL_GetTick>
 8006484:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006488:	f7fc f93c 	bl	8002704 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b64      	cmp	r3, #100	@ 0x64
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e1a2      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800649a:	4b12      	ldr	r3, [pc, #72]	@ (80064e4 <HAL_RCC_OscConfig+0x4a8>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0f0      	beq.n	8006488 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d106      	bne.n	80064bc <HAL_RCC_OscConfig+0x480>
 80064ae:	4b0c      	ldr	r3, [pc, #48]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 80064b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b2:	4a0b      	ldr	r2, [pc, #44]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 80064b4:	f043 0301 	orr.w	r3, r3, #1
 80064b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80064ba:	e032      	b.n	8006522 <HAL_RCC_OscConfig+0x4e6>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d111      	bne.n	80064e8 <HAL_RCC_OscConfig+0x4ac>
 80064c4:	4b06      	ldr	r3, [pc, #24]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 80064c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064c8:	4a05      	ldr	r2, [pc, #20]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 80064ca:	f023 0301 	bic.w	r3, r3, #1
 80064ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80064d0:	4b03      	ldr	r3, [pc, #12]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 80064d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d4:	4a02      	ldr	r2, [pc, #8]	@ (80064e0 <HAL_RCC_OscConfig+0x4a4>)
 80064d6:	f023 0304 	bic.w	r3, r3, #4
 80064da:	6713      	str	r3, [r2, #112]	@ 0x70
 80064dc:	e021      	b.n	8006522 <HAL_RCC_OscConfig+0x4e6>
 80064de:	bf00      	nop
 80064e0:	58024400 	.word	0x58024400
 80064e4:	58024800 	.word	0x58024800
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	2b05      	cmp	r3, #5
 80064ee:	d10c      	bne.n	800650a <HAL_RCC_OscConfig+0x4ce>
 80064f0:	4b83      	ldr	r3, [pc, #524]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 80064f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064f4:	4a82      	ldr	r2, [pc, #520]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 80064f6:	f043 0304 	orr.w	r3, r3, #4
 80064fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80064fc:	4b80      	ldr	r3, [pc, #512]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 80064fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006500:	4a7f      	ldr	r2, [pc, #508]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 8006502:	f043 0301 	orr.w	r3, r3, #1
 8006506:	6713      	str	r3, [r2, #112]	@ 0x70
 8006508:	e00b      	b.n	8006522 <HAL_RCC_OscConfig+0x4e6>
 800650a:	4b7d      	ldr	r3, [pc, #500]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 800650c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650e:	4a7c      	ldr	r2, [pc, #496]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 8006510:	f023 0301 	bic.w	r3, r3, #1
 8006514:	6713      	str	r3, [r2, #112]	@ 0x70
 8006516:	4b7a      	ldr	r3, [pc, #488]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651a:	4a79      	ldr	r2, [pc, #484]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 800651c:	f023 0304 	bic.w	r3, r3, #4
 8006520:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d015      	beq.n	8006556 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652a:	f7fc f8eb 	bl	8002704 <HAL_GetTick>
 800652e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006530:	e00a      	b.n	8006548 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006532:	f7fc f8e7 	bl	8002704 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006540:	4293      	cmp	r3, r2
 8006542:	d901      	bls.n	8006548 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e14b      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006548:	4b6d      	ldr	r3, [pc, #436]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 800654a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0ee      	beq.n	8006532 <HAL_RCC_OscConfig+0x4f6>
 8006554:	e014      	b.n	8006580 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006556:	f7fc f8d5 	bl	8002704 <HAL_GetTick>
 800655a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800655c:	e00a      	b.n	8006574 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800655e:	f7fc f8d1 	bl	8002704 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800656c:	4293      	cmp	r3, r2
 800656e:	d901      	bls.n	8006574 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e135      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006574:	4b62      	ldr	r3, [pc, #392]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 8006576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1ee      	bne.n	800655e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 812a 	beq.w	80067de <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800658a:	4b5d      	ldr	r3, [pc, #372]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006592:	2b18      	cmp	r3, #24
 8006594:	f000 80ba 	beq.w	800670c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659c:	2b02      	cmp	r3, #2
 800659e:	f040 8095 	bne.w	80066cc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065a2:	4b57      	ldr	r3, [pc, #348]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a56      	ldr	r2, [pc, #344]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 80065a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ae:	f7fc f8a9 	bl	8002704 <HAL_GetTick>
 80065b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065b4:	e008      	b.n	80065c8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065b6:	f7fc f8a5 	bl	8002704 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d901      	bls.n	80065c8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e10b      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065c8:	4b4d      	ldr	r3, [pc, #308]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1f0      	bne.n	80065b6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065d4:	4b4a      	ldr	r3, [pc, #296]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 80065d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065d8:	4b4a      	ldr	r3, [pc, #296]	@ (8006704 <HAL_RCC_OscConfig+0x6c8>)
 80065da:	4013      	ands	r3, r2
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80065e4:	0112      	lsls	r2, r2, #4
 80065e6:	430a      	orrs	r2, r1
 80065e8:	4945      	ldr	r1, [pc, #276]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	628b      	str	r3, [r1, #40]	@ 0x28
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f2:	3b01      	subs	r3, #1
 80065f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065fc:	3b01      	subs	r3, #1
 80065fe:	025b      	lsls	r3, r3, #9
 8006600:	b29b      	uxth	r3, r3
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006608:	3b01      	subs	r3, #1
 800660a:	041b      	lsls	r3, r3, #16
 800660c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006610:	431a      	orrs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006616:	3b01      	subs	r3, #1
 8006618:	061b      	lsls	r3, r3, #24
 800661a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800661e:	4938      	ldr	r1, [pc, #224]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 8006620:	4313      	orrs	r3, r2
 8006622:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006624:	4b36      	ldr	r3, [pc, #216]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 8006626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006628:	4a35      	ldr	r2, [pc, #212]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 800662a:	f023 0301 	bic.w	r3, r3, #1
 800662e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006630:	4b33      	ldr	r3, [pc, #204]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 8006632:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006634:	4b34      	ldr	r3, [pc, #208]	@ (8006708 <HAL_RCC_OscConfig+0x6cc>)
 8006636:	4013      	ands	r3, r2
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800663c:	00d2      	lsls	r2, r2, #3
 800663e:	4930      	ldr	r1, [pc, #192]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 8006640:	4313      	orrs	r3, r2
 8006642:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006644:	4b2e      	ldr	r3, [pc, #184]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 8006646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006648:	f023 020c 	bic.w	r2, r3, #12
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006650:	492b      	ldr	r1, [pc, #172]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 8006652:	4313      	orrs	r3, r2
 8006654:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006656:	4b2a      	ldr	r3, [pc, #168]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 8006658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665a:	f023 0202 	bic.w	r2, r3, #2
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006662:	4927      	ldr	r1, [pc, #156]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 8006664:	4313      	orrs	r3, r2
 8006666:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006668:	4b25      	ldr	r3, [pc, #148]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 800666a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666c:	4a24      	ldr	r2, [pc, #144]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 800666e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006672:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006674:	4b22      	ldr	r3, [pc, #136]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 8006676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006678:	4a21      	ldr	r2, [pc, #132]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 800667a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800667e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006680:	4b1f      	ldr	r3, [pc, #124]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 8006682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006684:	4a1e      	ldr	r2, [pc, #120]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 8006686:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800668a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800668c:	4b1c      	ldr	r3, [pc, #112]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 800668e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006690:	4a1b      	ldr	r2, [pc, #108]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 8006692:	f043 0301 	orr.w	r3, r3, #1
 8006696:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006698:	4b19      	ldr	r3, [pc, #100]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a18      	ldr	r2, [pc, #96]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 800669e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a4:	f7fc f82e 	bl	8002704 <HAL_GetTick>
 80066a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ac:	f7fc f82a 	bl	8002704 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e090      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066be:	4b10      	ldr	r3, [pc, #64]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0f0      	beq.n	80066ac <HAL_RCC_OscConfig+0x670>
 80066ca:	e088      	b.n	80067de <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a0b      	ldr	r2, [pc, #44]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 80066d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d8:	f7fc f814 	bl	8002704 <HAL_GetTick>
 80066dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066de:	e008      	b.n	80066f2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066e0:	f7fc f810 	bl	8002704 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e076      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066f2:	4b03      	ldr	r3, [pc, #12]	@ (8006700 <HAL_RCC_OscConfig+0x6c4>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1f0      	bne.n	80066e0 <HAL_RCC_OscConfig+0x6a4>
 80066fe:	e06e      	b.n	80067de <HAL_RCC_OscConfig+0x7a2>
 8006700:	58024400 	.word	0x58024400
 8006704:	fffffc0c 	.word	0xfffffc0c
 8006708:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800670c:	4b36      	ldr	r3, [pc, #216]	@ (80067e8 <HAL_RCC_OscConfig+0x7ac>)
 800670e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006710:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006712:	4b35      	ldr	r3, [pc, #212]	@ (80067e8 <HAL_RCC_OscConfig+0x7ac>)
 8006714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006716:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671c:	2b01      	cmp	r3, #1
 800671e:	d031      	beq.n	8006784 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f003 0203 	and.w	r2, r3, #3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800672a:	429a      	cmp	r2, r3
 800672c:	d12a      	bne.n	8006784 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	091b      	lsrs	r3, r3, #4
 8006732:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800673a:	429a      	cmp	r2, r3
 800673c:	d122      	bne.n	8006784 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006748:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800674a:	429a      	cmp	r2, r3
 800674c:	d11a      	bne.n	8006784 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	0a5b      	lsrs	r3, r3, #9
 8006752:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800675a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800675c:	429a      	cmp	r2, r3
 800675e:	d111      	bne.n	8006784 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	0c1b      	lsrs	r3, r3, #16
 8006764:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800676e:	429a      	cmp	r2, r3
 8006770:	d108      	bne.n	8006784 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	0e1b      	lsrs	r3, r3, #24
 8006776:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800677e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006780:	429a      	cmp	r2, r3
 8006782:	d001      	beq.n	8006788 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e02b      	b.n	80067e0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006788:	4b17      	ldr	r3, [pc, #92]	@ (80067e8 <HAL_RCC_OscConfig+0x7ac>)
 800678a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800678c:	08db      	lsrs	r3, r3, #3
 800678e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006792:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	429a      	cmp	r2, r3
 800679c:	d01f      	beq.n	80067de <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800679e:	4b12      	ldr	r3, [pc, #72]	@ (80067e8 <HAL_RCC_OscConfig+0x7ac>)
 80067a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a2:	4a11      	ldr	r2, [pc, #68]	@ (80067e8 <HAL_RCC_OscConfig+0x7ac>)
 80067a4:	f023 0301 	bic.w	r3, r3, #1
 80067a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80067aa:	f7fb ffab 	bl	8002704 <HAL_GetTick>
 80067ae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80067b0:	bf00      	nop
 80067b2:	f7fb ffa7 	bl	8002704 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d0f9      	beq.n	80067b2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80067be:	4b0a      	ldr	r3, [pc, #40]	@ (80067e8 <HAL_RCC_OscConfig+0x7ac>)
 80067c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067c2:	4b0a      	ldr	r3, [pc, #40]	@ (80067ec <HAL_RCC_OscConfig+0x7b0>)
 80067c4:	4013      	ands	r3, r2
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80067ca:	00d2      	lsls	r2, r2, #3
 80067cc:	4906      	ldr	r1, [pc, #24]	@ (80067e8 <HAL_RCC_OscConfig+0x7ac>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80067d2:	4b05      	ldr	r3, [pc, #20]	@ (80067e8 <HAL_RCC_OscConfig+0x7ac>)
 80067d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d6:	4a04      	ldr	r2, [pc, #16]	@ (80067e8 <HAL_RCC_OscConfig+0x7ac>)
 80067d8:	f043 0301 	orr.w	r3, r3, #1
 80067dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3730      	adds	r7, #48	@ 0x30
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	58024400 	.word	0x58024400
 80067ec:	ffff0007 	.word	0xffff0007

080067f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e19c      	b.n	8006b3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006804:	4b8a      	ldr	r3, [pc, #552]	@ (8006a30 <HAL_RCC_ClockConfig+0x240>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	429a      	cmp	r2, r3
 8006810:	d910      	bls.n	8006834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006812:	4b87      	ldr	r3, [pc, #540]	@ (8006a30 <HAL_RCC_ClockConfig+0x240>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f023 020f 	bic.w	r2, r3, #15
 800681a:	4985      	ldr	r1, [pc, #532]	@ (8006a30 <HAL_RCC_ClockConfig+0x240>)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	4313      	orrs	r3, r2
 8006820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006822:	4b83      	ldr	r3, [pc, #524]	@ (8006a30 <HAL_RCC_ClockConfig+0x240>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d001      	beq.n	8006834 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e184      	b.n	8006b3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b00      	cmp	r3, #0
 800683e:	d010      	beq.n	8006862 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	4b7b      	ldr	r3, [pc, #492]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800684c:	429a      	cmp	r2, r3
 800684e:	d908      	bls.n	8006862 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006850:	4b78      	ldr	r3, [pc, #480]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	4975      	ldr	r1, [pc, #468]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 800685e:	4313      	orrs	r3, r2
 8006860:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0308 	and.w	r3, r3, #8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d010      	beq.n	8006890 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695a      	ldr	r2, [r3, #20]
 8006872:	4b70      	ldr	r3, [pc, #448]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800687a:	429a      	cmp	r2, r3
 800687c:	d908      	bls.n	8006890 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800687e:	4b6d      	ldr	r3, [pc, #436]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	496a      	ldr	r1, [pc, #424]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 800688c:	4313      	orrs	r3, r2
 800688e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0310 	and.w	r3, r3, #16
 8006898:	2b00      	cmp	r3, #0
 800689a:	d010      	beq.n	80068be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699a      	ldr	r2, [r3, #24]
 80068a0:	4b64      	ldr	r3, [pc, #400]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d908      	bls.n	80068be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068ac:	4b61      	ldr	r3, [pc, #388]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	495e      	ldr	r1, [pc, #376]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d010      	beq.n	80068ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69da      	ldr	r2, [r3, #28]
 80068ce:	4b59      	ldr	r3, [pc, #356]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d908      	bls.n	80068ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80068da:	4b56      	ldr	r3, [pc, #344]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	4953      	ldr	r1, [pc, #332]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d010      	beq.n	800691a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	4b4d      	ldr	r3, [pc, #308]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	f003 030f 	and.w	r3, r3, #15
 8006904:	429a      	cmp	r2, r3
 8006906:	d908      	bls.n	800691a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006908:	4b4a      	ldr	r3, [pc, #296]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	f023 020f 	bic.w	r2, r3, #15
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	4947      	ldr	r1, [pc, #284]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006916:	4313      	orrs	r3, r2
 8006918:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d055      	beq.n	80069d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006926:	4b43      	ldr	r3, [pc, #268]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	4940      	ldr	r1, [pc, #256]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006934:	4313      	orrs	r3, r2
 8006936:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	2b02      	cmp	r3, #2
 800693e:	d107      	bne.n	8006950 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006940:	4b3c      	ldr	r3, [pc, #240]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d121      	bne.n	8006990 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e0f6      	b.n	8006b3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	2b03      	cmp	r3, #3
 8006956:	d107      	bne.n	8006968 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006958:	4b36      	ldr	r3, [pc, #216]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d115      	bne.n	8006990 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e0ea      	b.n	8006b3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d107      	bne.n	8006980 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006970:	4b30      	ldr	r3, [pc, #192]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006978:	2b00      	cmp	r3, #0
 800697a:	d109      	bne.n	8006990 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e0de      	b.n	8006b3e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006980:	4b2c      	ldr	r3, [pc, #176]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e0d6      	b.n	8006b3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006990:	4b28      	ldr	r3, [pc, #160]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	f023 0207 	bic.w	r2, r3, #7
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	4925      	ldr	r1, [pc, #148]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069a2:	f7fb feaf 	bl	8002704 <HAL_GetTick>
 80069a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069a8:	e00a      	b.n	80069c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069aa:	f7fb feab 	bl	8002704 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d901      	bls.n	80069c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e0be      	b.n	8006b3e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d1eb      	bne.n	80069aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d010      	beq.n	8006a00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	4b14      	ldr	r3, [pc, #80]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d208      	bcs.n	8006a00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069ee:	4b11      	ldr	r3, [pc, #68]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	f023 020f 	bic.w	r2, r3, #15
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	490e      	ldr	r1, [pc, #56]	@ (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a00:	4b0b      	ldr	r3, [pc, #44]	@ (8006a30 <HAL_RCC_ClockConfig+0x240>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 030f 	and.w	r3, r3, #15
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d214      	bcs.n	8006a38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a0e:	4b08      	ldr	r3, [pc, #32]	@ (8006a30 <HAL_RCC_ClockConfig+0x240>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f023 020f 	bic.w	r2, r3, #15
 8006a16:	4906      	ldr	r1, [pc, #24]	@ (8006a30 <HAL_RCC_ClockConfig+0x240>)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a1e:	4b04      	ldr	r3, [pc, #16]	@ (8006a30 <HAL_RCC_ClockConfig+0x240>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 030f 	and.w	r3, r3, #15
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d005      	beq.n	8006a38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e086      	b.n	8006b3e <HAL_RCC_ClockConfig+0x34e>
 8006a30:	52002000 	.word	0x52002000
 8006a34:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d010      	beq.n	8006a66 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691a      	ldr	r2, [r3, #16]
 8006a48:	4b3f      	ldr	r3, [pc, #252]	@ (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d208      	bcs.n	8006a66 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a54:	4b3c      	ldr	r3, [pc, #240]	@ (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	4939      	ldr	r1, [pc, #228]	@ (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0308 	and.w	r3, r3, #8
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d010      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	695a      	ldr	r2, [r3, #20]
 8006a76:	4b34      	ldr	r3, [pc, #208]	@ (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d208      	bcs.n	8006a94 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a82:	4b31      	ldr	r3, [pc, #196]	@ (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	492e      	ldr	r1, [pc, #184]	@ (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0310 	and.w	r3, r3, #16
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d010      	beq.n	8006ac2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	699a      	ldr	r2, [r3, #24]
 8006aa4:	4b28      	ldr	r3, [pc, #160]	@ (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d208      	bcs.n	8006ac2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ab0:	4b25      	ldr	r3, [pc, #148]	@ (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	4922      	ldr	r1, [pc, #136]	@ (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d010      	beq.n	8006af0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	69da      	ldr	r2, [r3, #28]
 8006ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d208      	bcs.n	8006af0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006ade:	4b1a      	ldr	r3, [pc, #104]	@ (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	4917      	ldr	r1, [pc, #92]	@ (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006af0:	f000 f834 	bl	8006b5c <HAL_RCC_GetSysClockFreq>
 8006af4:	4602      	mov	r2, r0
 8006af6:	4b14      	ldr	r3, [pc, #80]	@ (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	0a1b      	lsrs	r3, r3, #8
 8006afc:	f003 030f 	and.w	r3, r3, #15
 8006b00:	4912      	ldr	r1, [pc, #72]	@ (8006b4c <HAL_RCC_ClockConfig+0x35c>)
 8006b02:	5ccb      	ldrb	r3, [r1, r3]
 8006b04:	f003 031f 	and.w	r3, r3, #31
 8006b08:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	f003 030f 	and.w	r3, r3, #15
 8006b16:	4a0d      	ldr	r2, [pc, #52]	@ (8006b4c <HAL_RCC_ClockConfig+0x35c>)
 8006b18:	5cd3      	ldrb	r3, [r2, r3]
 8006b1a:	f003 031f 	and.w	r3, r3, #31
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	fa22 f303 	lsr.w	r3, r2, r3
 8006b24:	4a0a      	ldr	r2, [pc, #40]	@ (8006b50 <HAL_RCC_ClockConfig+0x360>)
 8006b26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b28:	4a0a      	ldr	r2, [pc, #40]	@ (8006b54 <HAL_RCC_ClockConfig+0x364>)
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b58 <HAL_RCC_ClockConfig+0x368>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fb fd9c 	bl	8002670 <HAL_InitTick>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	58024400 	.word	0x58024400
 8006b4c:	0800b890 	.word	0x0800b890
 8006b50:	2400000c 	.word	0x2400000c
 8006b54:	24000008 	.word	0x24000008
 8006b58:	24000010 	.word	0x24000010

08006b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b089      	sub	sp, #36	@ 0x24
 8006b60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b62:	4bb3      	ldr	r3, [pc, #716]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b6a:	2b18      	cmp	r3, #24
 8006b6c:	f200 8155 	bhi.w	8006e1a <HAL_RCC_GetSysClockFreq+0x2be>
 8006b70:	a201      	add	r2, pc, #4	@ (adr r2, 8006b78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b76:	bf00      	nop
 8006b78:	08006bdd 	.word	0x08006bdd
 8006b7c:	08006e1b 	.word	0x08006e1b
 8006b80:	08006e1b 	.word	0x08006e1b
 8006b84:	08006e1b 	.word	0x08006e1b
 8006b88:	08006e1b 	.word	0x08006e1b
 8006b8c:	08006e1b 	.word	0x08006e1b
 8006b90:	08006e1b 	.word	0x08006e1b
 8006b94:	08006e1b 	.word	0x08006e1b
 8006b98:	08006c03 	.word	0x08006c03
 8006b9c:	08006e1b 	.word	0x08006e1b
 8006ba0:	08006e1b 	.word	0x08006e1b
 8006ba4:	08006e1b 	.word	0x08006e1b
 8006ba8:	08006e1b 	.word	0x08006e1b
 8006bac:	08006e1b 	.word	0x08006e1b
 8006bb0:	08006e1b 	.word	0x08006e1b
 8006bb4:	08006e1b 	.word	0x08006e1b
 8006bb8:	08006c09 	.word	0x08006c09
 8006bbc:	08006e1b 	.word	0x08006e1b
 8006bc0:	08006e1b 	.word	0x08006e1b
 8006bc4:	08006e1b 	.word	0x08006e1b
 8006bc8:	08006e1b 	.word	0x08006e1b
 8006bcc:	08006e1b 	.word	0x08006e1b
 8006bd0:	08006e1b 	.word	0x08006e1b
 8006bd4:	08006e1b 	.word	0x08006e1b
 8006bd8:	08006c0f 	.word	0x08006c0f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bdc:	4b94      	ldr	r3, [pc, #592]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0320 	and.w	r3, r3, #32
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d009      	beq.n	8006bfc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006be8:	4b91      	ldr	r3, [pc, #580]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	08db      	lsrs	r3, r3, #3
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	4a90      	ldr	r2, [pc, #576]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006bfa:	e111      	b.n	8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006bfc:	4b8d      	ldr	r3, [pc, #564]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bfe:	61bb      	str	r3, [r7, #24]
      break;
 8006c00:	e10e      	b.n	8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006c02:	4b8d      	ldr	r3, [pc, #564]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c04:	61bb      	str	r3, [r7, #24]
      break;
 8006c06:	e10b      	b.n	8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006c08:	4b8c      	ldr	r3, [pc, #560]	@ (8006e3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006c0a:	61bb      	str	r3, [r7, #24]
      break;
 8006c0c:	e108      	b.n	8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c0e:	4b88      	ldr	r3, [pc, #544]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c12:	f003 0303 	and.w	r3, r3, #3
 8006c16:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006c18:	4b85      	ldr	r3, [pc, #532]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1c:	091b      	lsrs	r3, r3, #4
 8006c1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c22:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c24:	4b82      	ldr	r3, [pc, #520]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006c2e:	4b80      	ldr	r3, [pc, #512]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c32:	08db      	lsrs	r3, r3, #3
 8006c34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	fb02 f303 	mul.w	r3, r2, r3
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c46:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 80e1 	beq.w	8006e14 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	f000 8083 	beq.w	8006d60 <HAL_RCC_GetSysClockFreq+0x204>
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	f200 80a1 	bhi.w	8006da4 <HAL_RCC_GetSysClockFreq+0x248>
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <HAL_RCC_GetSysClockFreq+0x114>
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d056      	beq.n	8006d1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006c6e:	e099      	b.n	8006da4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c70:	4b6f      	ldr	r3, [pc, #444]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0320 	and.w	r3, r3, #32
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d02d      	beq.n	8006cd8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c7c:	4b6c      	ldr	r3, [pc, #432]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	08db      	lsrs	r3, r3, #3
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	4a6b      	ldr	r2, [pc, #428]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c88:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	ee07 3a90 	vmov	s15, r3
 8006c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ca6:	4b62      	ldr	r3, [pc, #392]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006e40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006cd6:	e087      	b.n	8006de8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	ee07 3a90 	vmov	s15, r3
 8006cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006e44 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cea:	4b51      	ldr	r3, [pc, #324]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cf2:	ee07 3a90 	vmov	s15, r3
 8006cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cfe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006e40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d1a:	e065      	b.n	8006de8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	ee07 3a90 	vmov	s15, r3
 8006d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d26:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006e48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d2e:	4b40      	ldr	r3, [pc, #256]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d36:	ee07 3a90 	vmov	s15, r3
 8006d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d42:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006e40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d5e:	e043      	b.n	8006de8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	ee07 3a90 	vmov	s15, r3
 8006d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006e4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d72:	4b2f      	ldr	r3, [pc, #188]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d82:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d86:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006e40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006da2:	e021      	b.n	8006de8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	ee07 3a90 	vmov	s15, r3
 8006daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006e48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db6:	4b1e      	ldr	r3, [pc, #120]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dbe:	ee07 3a90 	vmov	s15, r3
 8006dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006e40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006de6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006de8:	4b11      	ldr	r3, [pc, #68]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dec:	0a5b      	lsrs	r3, r3, #9
 8006dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006df2:	3301      	adds	r3, #1
 8006df4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	ee07 3a90 	vmov	s15, r3
 8006dfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e00:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e0c:	ee17 3a90 	vmov	r3, s15
 8006e10:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006e12:	e005      	b.n	8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	61bb      	str	r3, [r7, #24]
      break;
 8006e18:	e002      	b.n	8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006e1a:	4b07      	ldr	r3, [pc, #28]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e1c:	61bb      	str	r3, [r7, #24]
      break;
 8006e1e:	bf00      	nop
  }

  return sysclockfreq;
 8006e20:	69bb      	ldr	r3, [r7, #24]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3724      	adds	r7, #36	@ 0x24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	58024400 	.word	0x58024400
 8006e34:	03d09000 	.word	0x03d09000
 8006e38:	003d0900 	.word	0x003d0900
 8006e3c:	016e3600 	.word	0x016e3600
 8006e40:	46000000 	.word	0x46000000
 8006e44:	4c742400 	.word	0x4c742400
 8006e48:	4a742400 	.word	0x4a742400
 8006e4c:	4bb71b00 	.word	0x4bb71b00

08006e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006e56:	f7ff fe81 	bl	8006b5c <HAL_RCC_GetSysClockFreq>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	4b10      	ldr	r3, [pc, #64]	@ (8006ea0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	0a1b      	lsrs	r3, r3, #8
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	490f      	ldr	r1, [pc, #60]	@ (8006ea4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e68:	5ccb      	ldrb	r3, [r1, r3]
 8006e6a:	f003 031f 	and.w	r3, r3, #31
 8006e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e74:	4b0a      	ldr	r3, [pc, #40]	@ (8006ea0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	f003 030f 	and.w	r3, r3, #15
 8006e7c:	4a09      	ldr	r2, [pc, #36]	@ (8006ea4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e7e:	5cd3      	ldrb	r3, [r2, r3]
 8006e80:	f003 031f 	and.w	r3, r3, #31
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	fa22 f303 	lsr.w	r3, r2, r3
 8006e8a:	4a07      	ldr	r2, [pc, #28]	@ (8006ea8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e8e:	4a07      	ldr	r2, [pc, #28]	@ (8006eac <HAL_RCC_GetHCLKFreq+0x5c>)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006e94:	4b04      	ldr	r3, [pc, #16]	@ (8006ea8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e96:	681b      	ldr	r3, [r3, #0]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	58024400 	.word	0x58024400
 8006ea4:	0800b890 	.word	0x0800b890
 8006ea8:	2400000c 	.word	0x2400000c
 8006eac:	24000008 	.word	0x24000008

08006eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006eb4:	f7ff ffcc 	bl	8006e50 <HAL_RCC_GetHCLKFreq>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	4b06      	ldr	r3, [pc, #24]	@ (8006ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	091b      	lsrs	r3, r3, #4
 8006ec0:	f003 0307 	and.w	r3, r3, #7
 8006ec4:	4904      	ldr	r1, [pc, #16]	@ (8006ed8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ec6:	5ccb      	ldrb	r3, [r1, r3]
 8006ec8:	f003 031f 	and.w	r3, r3, #31
 8006ecc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	58024400 	.word	0x58024400
 8006ed8:	0800b890 	.word	0x0800b890

08006edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006ee0:	f7ff ffb6 	bl	8006e50 <HAL_RCC_GetHCLKFreq>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	4b06      	ldr	r3, [pc, #24]	@ (8006f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	0a1b      	lsrs	r3, r3, #8
 8006eec:	f003 0307 	and.w	r3, r3, #7
 8006ef0:	4904      	ldr	r1, [pc, #16]	@ (8006f04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ef2:	5ccb      	ldrb	r3, [r1, r3]
 8006ef4:	f003 031f 	and.w	r3, r3, #31
 8006ef8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	58024400 	.word	0x58024400
 8006f04:	0800b890 	.word	0x0800b890

08006f08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f0c:	b0c6      	sub	sp, #280	@ 0x118
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f14:	2300      	movs	r3, #0
 8006f16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f28:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006f2c:	2500      	movs	r5, #0
 8006f2e:	ea54 0305 	orrs.w	r3, r4, r5
 8006f32:	d049      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f3e:	d02f      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006f40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f44:	d828      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006f46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f4a:	d01a      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006f4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f50:	d822      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006f56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f5a:	d007      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f5c:	e01c      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f5e:	4bab      	ldr	r3, [pc, #684]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f62:	4aaa      	ldr	r2, [pc, #680]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f6a:	e01a      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f70:	3308      	adds	r3, #8
 8006f72:	2102      	movs	r1, #2
 8006f74:	4618      	mov	r0, r3
 8006f76:	f002 fa49 	bl	800940c <RCCEx_PLL2_Config>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f80:	e00f      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f86:	3328      	adds	r3, #40	@ 0x28
 8006f88:	2102      	movs	r1, #2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f002 faf0 	bl	8009570 <RCCEx_PLL3_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f96:	e004      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f9e:	e000      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10a      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006faa:	4b98      	ldr	r3, [pc, #608]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fb8:	4a94      	ldr	r2, [pc, #592]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006fba:	430b      	orrs	r3, r1
 8006fbc:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fbe:	e003      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006fd4:	f04f 0900 	mov.w	r9, #0
 8006fd8:	ea58 0309 	orrs.w	r3, r8, r9
 8006fdc:	d047      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fe4:	2b04      	cmp	r3, #4
 8006fe6:	d82a      	bhi.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fee:	bf00      	nop
 8006ff0:	08007005 	.word	0x08007005
 8006ff4:	08007013 	.word	0x08007013
 8006ff8:	08007029 	.word	0x08007029
 8006ffc:	08007047 	.word	0x08007047
 8007000:	08007047 	.word	0x08007047
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007004:	4b81      	ldr	r3, [pc, #516]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007008:	4a80      	ldr	r2, [pc, #512]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800700a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800700e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007010:	e01a      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007016:	3308      	adds	r3, #8
 8007018:	2100      	movs	r1, #0
 800701a:	4618      	mov	r0, r3
 800701c:	f002 f9f6 	bl	800940c <RCCEx_PLL2_Config>
 8007020:	4603      	mov	r3, r0
 8007022:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007026:	e00f      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800702c:	3328      	adds	r3, #40	@ 0x28
 800702e:	2100      	movs	r1, #0
 8007030:	4618      	mov	r0, r3
 8007032:	f002 fa9d 	bl	8009570 <RCCEx_PLL3_Config>
 8007036:	4603      	mov	r3, r0
 8007038:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800703c:	e004      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007044:	e000      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007046:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007048:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10a      	bne.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007050:	4b6e      	ldr	r3, [pc, #440]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007054:	f023 0107 	bic.w	r1, r3, #7
 8007058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800705e:	4a6b      	ldr	r2, [pc, #428]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007060:	430b      	orrs	r3, r1
 8007062:	6513      	str	r3, [r2, #80]	@ 0x50
 8007064:	e003      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007066:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800706a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800706e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007076:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800707a:	f04f 0b00 	mov.w	fp, #0
 800707e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007082:	d05b      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007088:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800708c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007090:	d03b      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007092:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007096:	d834      	bhi.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007098:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800709c:	d037      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800709e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070a2:	d82e      	bhi.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80070a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80070a8:	d033      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80070aa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80070ae:	d828      	bhi.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80070b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070b4:	d01a      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80070b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070ba:	d822      	bhi.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d003      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80070c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070c4:	d007      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80070c6:	e01c      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070c8:	4b50      	ldr	r3, [pc, #320]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070cc:	4a4f      	ldr	r2, [pc, #316]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070d4:	e01e      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070da:	3308      	adds	r3, #8
 80070dc:	2100      	movs	r1, #0
 80070de:	4618      	mov	r0, r3
 80070e0:	f002 f994 	bl	800940c <RCCEx_PLL2_Config>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80070ea:	e013      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f0:	3328      	adds	r3, #40	@ 0x28
 80070f2:	2100      	movs	r1, #0
 80070f4:	4618      	mov	r0, r3
 80070f6:	f002 fa3b 	bl	8009570 <RCCEx_PLL3_Config>
 80070fa:	4603      	mov	r3, r0
 80070fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007100:	e008      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007108:	e004      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800710a:	bf00      	nop
 800710c:	e002      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800710e:	bf00      	nop
 8007110:	e000      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007114:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10b      	bne.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800711c:	4b3b      	ldr	r3, [pc, #236]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800711e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007120:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007128:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800712c:	4a37      	ldr	r2, [pc, #220]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800712e:	430b      	orrs	r3, r1
 8007130:	6593      	str	r3, [r2, #88]	@ 0x58
 8007132:	e003      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007134:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007138:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800713c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007148:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800714c:	2300      	movs	r3, #0
 800714e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007152:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007156:	460b      	mov	r3, r1
 8007158:	4313      	orrs	r3, r2
 800715a:	d05d      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800715c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007160:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007164:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007168:	d03b      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800716a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800716e:	d834      	bhi.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007170:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007174:	d037      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007176:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800717a:	d82e      	bhi.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800717c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007180:	d033      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007182:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007186:	d828      	bhi.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007188:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800718c:	d01a      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800718e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007192:	d822      	bhi.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800719c:	d007      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800719e:	e01c      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071a0:	4b1a      	ldr	r3, [pc, #104]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a4:	4a19      	ldr	r2, [pc, #100]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071ac:	e01e      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b2:	3308      	adds	r3, #8
 80071b4:	2100      	movs	r1, #0
 80071b6:	4618      	mov	r0, r3
 80071b8:	f002 f928 	bl	800940c <RCCEx_PLL2_Config>
 80071bc:	4603      	mov	r3, r0
 80071be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80071c2:	e013      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c8:	3328      	adds	r3, #40	@ 0x28
 80071ca:	2100      	movs	r1, #0
 80071cc:	4618      	mov	r0, r3
 80071ce:	f002 f9cf 	bl	8009570 <RCCEx_PLL3_Config>
 80071d2:	4603      	mov	r3, r0
 80071d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071d8:	e008      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071e0:	e004      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80071e2:	bf00      	nop
 80071e4:	e002      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80071e6:	bf00      	nop
 80071e8:	e000      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80071ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10d      	bne.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80071f4:	4b05      	ldr	r3, [pc, #20]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071f8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80071fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007200:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007204:	4a01      	ldr	r2, [pc, #4]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007206:	430b      	orrs	r3, r1
 8007208:	6593      	str	r3, [r2, #88]	@ 0x58
 800720a:	e005      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800720c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007210:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007214:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007224:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007228:	2300      	movs	r3, #0
 800722a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800722e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007232:	460b      	mov	r3, r1
 8007234:	4313      	orrs	r3, r2
 8007236:	d03a      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800723c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800723e:	2b30      	cmp	r3, #48	@ 0x30
 8007240:	d01f      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007242:	2b30      	cmp	r3, #48	@ 0x30
 8007244:	d819      	bhi.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007246:	2b20      	cmp	r3, #32
 8007248:	d00c      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800724a:	2b20      	cmp	r3, #32
 800724c:	d815      	bhi.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d019      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007252:	2b10      	cmp	r3, #16
 8007254:	d111      	bne.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007256:	4baa      	ldr	r3, [pc, #680]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725a:	4aa9      	ldr	r2, [pc, #676]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800725c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007260:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007262:	e011      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007268:	3308      	adds	r3, #8
 800726a:	2102      	movs	r1, #2
 800726c:	4618      	mov	r0, r3
 800726e:	f002 f8cd 	bl	800940c <RCCEx_PLL2_Config>
 8007272:	4603      	mov	r3, r0
 8007274:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007278:	e006      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007280:	e002      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007282:	bf00      	nop
 8007284:	e000      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007288:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10a      	bne.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007290:	4b9b      	ldr	r3, [pc, #620]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007294:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800729c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800729e:	4a98      	ldr	r2, [pc, #608]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072a0:	430b      	orrs	r3, r1
 80072a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072a4:	e003      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80072ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80072ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072be:	2300      	movs	r3, #0
 80072c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80072c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80072c8:	460b      	mov	r3, r1
 80072ca:	4313      	orrs	r3, r2
 80072cc:	d051      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80072ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072d8:	d035      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80072da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072de:	d82e      	bhi.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80072e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072e4:	d031      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80072e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072ea:	d828      	bhi.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80072ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072f0:	d01a      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80072f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072f6:	d822      	bhi.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80072fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007300:	d007      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007302:	e01c      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007304:	4b7e      	ldr	r3, [pc, #504]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007308:	4a7d      	ldr	r2, [pc, #500]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800730a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800730e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007310:	e01c      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007316:	3308      	adds	r3, #8
 8007318:	2100      	movs	r1, #0
 800731a:	4618      	mov	r0, r3
 800731c:	f002 f876 	bl	800940c <RCCEx_PLL2_Config>
 8007320:	4603      	mov	r3, r0
 8007322:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007326:	e011      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800732c:	3328      	adds	r3, #40	@ 0x28
 800732e:	2100      	movs	r1, #0
 8007330:	4618      	mov	r0, r3
 8007332:	f002 f91d 	bl	8009570 <RCCEx_PLL3_Config>
 8007336:	4603      	mov	r3, r0
 8007338:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800733c:	e006      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007344:	e002      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007346:	bf00      	nop
 8007348:	e000      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800734a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800734c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10a      	bne.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007354:	4b6a      	ldr	r3, [pc, #424]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007358:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800735c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007362:	4a67      	ldr	r2, [pc, #412]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007364:	430b      	orrs	r3, r1
 8007366:	6513      	str	r3, [r2, #80]	@ 0x50
 8007368:	e003      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800736a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800736e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800737e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007382:	2300      	movs	r3, #0
 8007384:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007388:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800738c:	460b      	mov	r3, r1
 800738e:	4313      	orrs	r3, r2
 8007390:	d053      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007398:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800739c:	d033      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800739e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073a2:	d82c      	bhi.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80073a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80073a8:	d02f      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80073aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80073ae:	d826      	bhi.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80073b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80073b4:	d02b      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80073b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80073ba:	d820      	bhi.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80073bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073c0:	d012      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80073c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073c6:	d81a      	bhi.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d022      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80073cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073d0:	d115      	bne.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d6:	3308      	adds	r3, #8
 80073d8:	2101      	movs	r1, #1
 80073da:	4618      	mov	r0, r3
 80073dc:	f002 f816 	bl	800940c <RCCEx_PLL2_Config>
 80073e0:	4603      	mov	r3, r0
 80073e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80073e6:	e015      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ec:	3328      	adds	r3, #40	@ 0x28
 80073ee:	2101      	movs	r1, #1
 80073f0:	4618      	mov	r0, r3
 80073f2:	f002 f8bd 	bl	8009570 <RCCEx_PLL3_Config>
 80073f6:	4603      	mov	r3, r0
 80073f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80073fc:	e00a      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007404:	e006      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007406:	bf00      	nop
 8007408:	e004      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800740a:	bf00      	nop
 800740c:	e002      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800740e:	bf00      	nop
 8007410:	e000      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10a      	bne.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800741c:	4b38      	ldr	r3, [pc, #224]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800741e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007420:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800742a:	4a35      	ldr	r2, [pc, #212]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800742c:	430b      	orrs	r3, r1
 800742e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007430:	e003      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007432:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007436:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800743a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007446:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800744a:	2300      	movs	r3, #0
 800744c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007450:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007454:	460b      	mov	r3, r1
 8007456:	4313      	orrs	r3, r2
 8007458:	d058      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800745a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007462:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007466:	d033      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007468:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800746c:	d82c      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800746e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007472:	d02f      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007478:	d826      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800747a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800747e:	d02b      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007480:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007484:	d820      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007486:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800748a:	d012      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800748c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007490:	d81a      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d022      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007496:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800749a:	d115      	bne.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800749c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a0:	3308      	adds	r3, #8
 80074a2:	2101      	movs	r1, #1
 80074a4:	4618      	mov	r0, r3
 80074a6:	f001 ffb1 	bl	800940c <RCCEx_PLL2_Config>
 80074aa:	4603      	mov	r3, r0
 80074ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80074b0:	e015      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b6:	3328      	adds	r3, #40	@ 0x28
 80074b8:	2101      	movs	r1, #1
 80074ba:	4618      	mov	r0, r3
 80074bc:	f002 f858 	bl	8009570 <RCCEx_PLL3_Config>
 80074c0:	4603      	mov	r3, r0
 80074c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80074c6:	e00a      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074ce:	e006      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80074d0:	bf00      	nop
 80074d2:	e004      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80074d4:	bf00      	nop
 80074d6:	e002      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80074d8:	bf00      	nop
 80074da:	e000      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80074dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10e      	bne.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80074e6:	4b06      	ldr	r3, [pc, #24]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80074ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80074f6:	4a02      	ldr	r2, [pc, #8]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074f8:	430b      	orrs	r3, r1
 80074fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80074fc:	e006      	b.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x604>
 80074fe:	bf00      	nop
 8007500:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007508:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800750c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007514:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007518:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800751c:	2300      	movs	r3, #0
 800751e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007522:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007526:	460b      	mov	r3, r1
 8007528:	4313      	orrs	r3, r2
 800752a:	d037      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800752c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007530:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007532:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007536:	d00e      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007538:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800753c:	d816      	bhi.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800753e:	2b00      	cmp	r3, #0
 8007540:	d018      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007542:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007546:	d111      	bne.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007548:	4bc4      	ldr	r3, [pc, #784]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800754a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754c:	4ac3      	ldr	r2, [pc, #780]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800754e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007554:	e00f      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755a:	3308      	adds	r3, #8
 800755c:	2101      	movs	r1, #1
 800755e:	4618      	mov	r0, r3
 8007560:	f001 ff54 	bl	800940c <RCCEx_PLL2_Config>
 8007564:	4603      	mov	r3, r0
 8007566:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800756a:	e004      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007572:	e000      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007576:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10a      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800757e:	4bb7      	ldr	r3, [pc, #732]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007582:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800758a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800758c:	4ab3      	ldr	r2, [pc, #716]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800758e:	430b      	orrs	r3, r1
 8007590:	6513      	str	r3, [r2, #80]	@ 0x50
 8007592:	e003      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007594:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007598:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80075a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075ac:	2300      	movs	r3, #0
 80075ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80075b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80075b6:	460b      	mov	r3, r1
 80075b8:	4313      	orrs	r3, r2
 80075ba:	d039      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80075bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d81c      	bhi.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80075c6:	a201      	add	r2, pc, #4	@ (adr r2, 80075cc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	08007609 	.word	0x08007609
 80075d0:	080075dd 	.word	0x080075dd
 80075d4:	080075eb 	.word	0x080075eb
 80075d8:	08007609 	.word	0x08007609
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075dc:	4b9f      	ldr	r3, [pc, #636]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e0:	4a9e      	ldr	r2, [pc, #632]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80075e8:	e00f      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80075ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ee:	3308      	adds	r3, #8
 80075f0:	2102      	movs	r1, #2
 80075f2:	4618      	mov	r0, r3
 80075f4:	f001 ff0a 	bl	800940c <RCCEx_PLL2_Config>
 80075f8:	4603      	mov	r3, r0
 80075fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80075fe:	e004      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007606:	e000      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007608:	bf00      	nop
    }

    if (ret == HAL_OK)
 800760a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10a      	bne.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007612:	4b92      	ldr	r3, [pc, #584]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007616:	f023 0103 	bic.w	r1, r3, #3
 800761a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800761e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007620:	4a8e      	ldr	r2, [pc, #568]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007622:	430b      	orrs	r3, r1
 8007624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007626:	e003      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007628:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800762c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007638:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800763c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007640:	2300      	movs	r3, #0
 8007642:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007646:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800764a:	460b      	mov	r3, r1
 800764c:	4313      	orrs	r3, r2
 800764e:	f000 8099 	beq.w	8007784 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007652:	4b83      	ldr	r3, [pc, #524]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a82      	ldr	r2, [pc, #520]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800765c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800765e:	f7fb f851 	bl	8002704 <HAL_GetTick>
 8007662:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007666:	e00b      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007668:	f7fb f84c 	bl	8002704 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	2b64      	cmp	r3, #100	@ 0x64
 8007676:	d903      	bls.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800767e:	e005      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007680:	4b77      	ldr	r3, [pc, #476]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007688:	2b00      	cmp	r3, #0
 800768a:	d0ed      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800768c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007690:	2b00      	cmp	r3, #0
 8007692:	d173      	bne.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007694:	4b71      	ldr	r3, [pc, #452]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007696:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800769c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80076a0:	4053      	eors	r3, r2
 80076a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d015      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076aa:	4b6c      	ldr	r3, [pc, #432]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076b2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80076b6:	4b69      	ldr	r3, [pc, #420]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076ba:	4a68      	ldr	r2, [pc, #416]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076c0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80076c2:	4b66      	ldr	r3, [pc, #408]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076c6:	4a65      	ldr	r2, [pc, #404]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076cc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80076ce:	4a63      	ldr	r2, [pc, #396]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076d4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80076d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80076de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076e2:	d118      	bne.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e4:	f7fb f80e 	bl	8002704 <HAL_GetTick>
 80076e8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076ec:	e00d      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076ee:	f7fb f809 	bl	8002704 <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80076f8:	1ad2      	subs	r2, r2, r3
 80076fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80076fe:	429a      	cmp	r2, r3
 8007700:	d903      	bls.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007708:	e005      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800770a:	4b54      	ldr	r3, [pc, #336]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800770c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0eb      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007716:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800771a:	2b00      	cmp	r3, #0
 800771c:	d129      	bne.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800771e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007722:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800772a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800772e:	d10e      	bne.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007730:	4b4a      	ldr	r3, [pc, #296]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007740:	091a      	lsrs	r2, r3, #4
 8007742:	4b48      	ldr	r3, [pc, #288]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007744:	4013      	ands	r3, r2
 8007746:	4a45      	ldr	r2, [pc, #276]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007748:	430b      	orrs	r3, r1
 800774a:	6113      	str	r3, [r2, #16]
 800774c:	e005      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800774e:	4b43      	ldr	r3, [pc, #268]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	4a42      	ldr	r2, [pc, #264]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007754:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007758:	6113      	str	r3, [r2, #16]
 800775a:	4b40      	ldr	r3, [pc, #256]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800775c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800775e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007762:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800776a:	4a3c      	ldr	r2, [pc, #240]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800776c:	430b      	orrs	r3, r1
 800776e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007770:	e008      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007772:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007776:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800777a:	e003      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800777c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007780:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778c:	f002 0301 	and.w	r3, r2, #1
 8007790:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007794:	2300      	movs	r3, #0
 8007796:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800779a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800779e:	460b      	mov	r3, r1
 80077a0:	4313      	orrs	r3, r2
 80077a2:	f000 808f 	beq.w	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80077a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077ac:	2b28      	cmp	r3, #40	@ 0x28
 80077ae:	d871      	bhi.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80077b0:	a201      	add	r2, pc, #4	@ (adr r2, 80077b8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80077b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b6:	bf00      	nop
 80077b8:	0800789d 	.word	0x0800789d
 80077bc:	08007895 	.word	0x08007895
 80077c0:	08007895 	.word	0x08007895
 80077c4:	08007895 	.word	0x08007895
 80077c8:	08007895 	.word	0x08007895
 80077cc:	08007895 	.word	0x08007895
 80077d0:	08007895 	.word	0x08007895
 80077d4:	08007895 	.word	0x08007895
 80077d8:	08007869 	.word	0x08007869
 80077dc:	08007895 	.word	0x08007895
 80077e0:	08007895 	.word	0x08007895
 80077e4:	08007895 	.word	0x08007895
 80077e8:	08007895 	.word	0x08007895
 80077ec:	08007895 	.word	0x08007895
 80077f0:	08007895 	.word	0x08007895
 80077f4:	08007895 	.word	0x08007895
 80077f8:	0800787f 	.word	0x0800787f
 80077fc:	08007895 	.word	0x08007895
 8007800:	08007895 	.word	0x08007895
 8007804:	08007895 	.word	0x08007895
 8007808:	08007895 	.word	0x08007895
 800780c:	08007895 	.word	0x08007895
 8007810:	08007895 	.word	0x08007895
 8007814:	08007895 	.word	0x08007895
 8007818:	0800789d 	.word	0x0800789d
 800781c:	08007895 	.word	0x08007895
 8007820:	08007895 	.word	0x08007895
 8007824:	08007895 	.word	0x08007895
 8007828:	08007895 	.word	0x08007895
 800782c:	08007895 	.word	0x08007895
 8007830:	08007895 	.word	0x08007895
 8007834:	08007895 	.word	0x08007895
 8007838:	0800789d 	.word	0x0800789d
 800783c:	08007895 	.word	0x08007895
 8007840:	08007895 	.word	0x08007895
 8007844:	08007895 	.word	0x08007895
 8007848:	08007895 	.word	0x08007895
 800784c:	08007895 	.word	0x08007895
 8007850:	08007895 	.word	0x08007895
 8007854:	08007895 	.word	0x08007895
 8007858:	0800789d 	.word	0x0800789d
 800785c:	58024400 	.word	0x58024400
 8007860:	58024800 	.word	0x58024800
 8007864:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786c:	3308      	adds	r3, #8
 800786e:	2101      	movs	r1, #1
 8007870:	4618      	mov	r0, r3
 8007872:	f001 fdcb 	bl	800940c <RCCEx_PLL2_Config>
 8007876:	4603      	mov	r3, r0
 8007878:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800787c:	e00f      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800787e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007882:	3328      	adds	r3, #40	@ 0x28
 8007884:	2101      	movs	r1, #1
 8007886:	4618      	mov	r0, r3
 8007888:	f001 fe72 	bl	8009570 <RCCEx_PLL3_Config>
 800788c:	4603      	mov	r3, r0
 800788e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007892:	e004      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800789a:	e000      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800789c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800789e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10a      	bne.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80078a6:	4bbf      	ldr	r3, [pc, #764]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80078a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80078ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078b4:	4abb      	ldr	r2, [pc, #748]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80078b6:	430b      	orrs	r3, r1
 80078b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80078ba:	e003      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80078c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078cc:	f002 0302 	and.w	r3, r2, #2
 80078d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078d4:	2300      	movs	r3, #0
 80078d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80078de:	460b      	mov	r3, r1
 80078e0:	4313      	orrs	r3, r2
 80078e2:	d041      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80078e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078ea:	2b05      	cmp	r3, #5
 80078ec:	d824      	bhi.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80078ee:	a201      	add	r2, pc, #4	@ (adr r2, 80078f4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80078f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f4:	08007941 	.word	0x08007941
 80078f8:	0800790d 	.word	0x0800790d
 80078fc:	08007923 	.word	0x08007923
 8007900:	08007941 	.word	0x08007941
 8007904:	08007941 	.word	0x08007941
 8007908:	08007941 	.word	0x08007941
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800790c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007910:	3308      	adds	r3, #8
 8007912:	2101      	movs	r1, #1
 8007914:	4618      	mov	r0, r3
 8007916:	f001 fd79 	bl	800940c <RCCEx_PLL2_Config>
 800791a:	4603      	mov	r3, r0
 800791c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007920:	e00f      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007926:	3328      	adds	r3, #40	@ 0x28
 8007928:	2101      	movs	r1, #1
 800792a:	4618      	mov	r0, r3
 800792c:	f001 fe20 	bl	8009570 <RCCEx_PLL3_Config>
 8007930:	4603      	mov	r3, r0
 8007932:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007936:	e004      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800793e:	e000      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007942:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10a      	bne.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800794a:	4b96      	ldr	r3, [pc, #600]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800794c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800794e:	f023 0107 	bic.w	r1, r3, #7
 8007952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007958:	4a92      	ldr	r2, [pc, #584]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800795a:	430b      	orrs	r3, r1
 800795c:	6553      	str	r3, [r2, #84]	@ 0x54
 800795e:	e003      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007960:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007964:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	f002 0304 	and.w	r3, r2, #4
 8007974:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007978:	2300      	movs	r3, #0
 800797a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800797e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007982:	460b      	mov	r3, r1
 8007984:	4313      	orrs	r3, r2
 8007986:	d044      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007990:	2b05      	cmp	r3, #5
 8007992:	d825      	bhi.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007994:	a201      	add	r2, pc, #4	@ (adr r2, 800799c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799a:	bf00      	nop
 800799c:	080079e9 	.word	0x080079e9
 80079a0:	080079b5 	.word	0x080079b5
 80079a4:	080079cb 	.word	0x080079cb
 80079a8:	080079e9 	.word	0x080079e9
 80079ac:	080079e9 	.word	0x080079e9
 80079b0:	080079e9 	.word	0x080079e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b8:	3308      	adds	r3, #8
 80079ba:	2101      	movs	r1, #1
 80079bc:	4618      	mov	r0, r3
 80079be:	f001 fd25 	bl	800940c <RCCEx_PLL2_Config>
 80079c2:	4603      	mov	r3, r0
 80079c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80079c8:	e00f      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ce:	3328      	adds	r3, #40	@ 0x28
 80079d0:	2101      	movs	r1, #1
 80079d2:	4618      	mov	r0, r3
 80079d4:	f001 fdcc 	bl	8009570 <RCCEx_PLL3_Config>
 80079d8:	4603      	mov	r3, r0
 80079da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80079de:	e004      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079e6:	e000      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80079e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10b      	bne.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80079f2:	4b6c      	ldr	r3, [pc, #432]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80079f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079f6:	f023 0107 	bic.w	r1, r3, #7
 80079fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a02:	4a68      	ldr	r2, [pc, #416]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a04:	430b      	orrs	r3, r1
 8007a06:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a08:	e003      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1a:	f002 0320 	and.w	r3, r2, #32
 8007a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a22:	2300      	movs	r3, #0
 8007a24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	d055      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a3e:	d033      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a44:	d82c      	bhi.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a4a:	d02f      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a50:	d826      	bhi.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007a52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a56:	d02b      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007a58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a5c:	d820      	bhi.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007a5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a62:	d012      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007a64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a68:	d81a      	bhi.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d022      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007a6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a72:	d115      	bne.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a78:	3308      	adds	r3, #8
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f001 fcc5 	bl	800940c <RCCEx_PLL2_Config>
 8007a82:	4603      	mov	r3, r0
 8007a84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a88:	e015      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8e:	3328      	adds	r3, #40	@ 0x28
 8007a90:	2102      	movs	r1, #2
 8007a92:	4618      	mov	r0, r3
 8007a94:	f001 fd6c 	bl	8009570 <RCCEx_PLL3_Config>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a9e:	e00a      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007aa6:	e006      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007aa8:	bf00      	nop
 8007aaa:	e004      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007aac:	bf00      	nop
 8007aae:	e002      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007ab0:	bf00      	nop
 8007ab2:	e000      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ab6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10b      	bne.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007abe:	4b39      	ldr	r3, [pc, #228]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ac2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ace:	4a35      	ldr	r2, [pc, #212]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ad0:	430b      	orrs	r3, r1
 8007ad2:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ad4:	e003      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ada:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007aea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007aee:	2300      	movs	r3, #0
 8007af0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007af4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007af8:	460b      	mov	r3, r1
 8007afa:	4313      	orrs	r3, r2
 8007afc:	d058      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b06:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007b0a:	d033      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007b0c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007b10:	d82c      	bhi.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007b12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b16:	d02f      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b1c:	d826      	bhi.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007b1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b22:	d02b      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007b24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b28:	d820      	bhi.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007b2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b2e:	d012      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007b30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b34:	d81a      	bhi.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d022      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b3e:	d115      	bne.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b44:	3308      	adds	r3, #8
 8007b46:	2100      	movs	r1, #0
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f001 fc5f 	bl	800940c <RCCEx_PLL2_Config>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007b54:	e015      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5a:	3328      	adds	r3, #40	@ 0x28
 8007b5c:	2102      	movs	r1, #2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f001 fd06 	bl	8009570 <RCCEx_PLL3_Config>
 8007b64:	4603      	mov	r3, r0
 8007b66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007b6a:	e00a      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b72:	e006      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007b74:	bf00      	nop
 8007b76:	e004      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007b78:	bf00      	nop
 8007b7a:	e002      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007b7c:	bf00      	nop
 8007b7e:	e000      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10e      	bne.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b8a:	4b06      	ldr	r3, [pc, #24]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b8e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b9a:	4a02      	ldr	r2, [pc, #8]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ba0:	e006      	b.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007ba2:	bf00      	nop
 8007ba4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007bbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007bc6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	d055      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bd8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007bdc:	d033      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007bde:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007be2:	d82c      	bhi.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007be4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007be8:	d02f      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007bea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bee:	d826      	bhi.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007bf0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007bf4:	d02b      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007bf6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007bfa:	d820      	bhi.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007bfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c00:	d012      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007c02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c06:	d81a      	bhi.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d022      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007c0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c10:	d115      	bne.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c16:	3308      	adds	r3, #8
 8007c18:	2100      	movs	r1, #0
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 fbf6 	bl	800940c <RCCEx_PLL2_Config>
 8007c20:	4603      	mov	r3, r0
 8007c22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007c26:	e015      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c2c:	3328      	adds	r3, #40	@ 0x28
 8007c2e:	2102      	movs	r1, #2
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 fc9d 	bl	8009570 <RCCEx_PLL3_Config>
 8007c36:	4603      	mov	r3, r0
 8007c38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007c3c:	e00a      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c44:	e006      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007c46:	bf00      	nop
 8007c48:	e004      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007c4a:	bf00      	nop
 8007c4c:	e002      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007c4e:	bf00      	nop
 8007c50:	e000      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10b      	bne.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007c5c:	4ba0      	ldr	r3, [pc, #640]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c60:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c6c:	4a9c      	ldr	r2, [pc, #624]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c6e:	430b      	orrs	r3, r1
 8007c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c72:	e003      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	f002 0308 	and.w	r3, r2, #8
 8007c88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007c92:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007c96:	460b      	mov	r3, r1
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	d01e      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ca8:	d10c      	bne.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cae:	3328      	adds	r3, #40	@ 0x28
 8007cb0:	2102      	movs	r1, #2
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f001 fc5c 	bl	8009570 <RCCEx_PLL3_Config>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d002      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007cc4:	4b86      	ldr	r3, [pc, #536]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cc8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cd4:	4a82      	ldr	r2, [pc, #520]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007cd6:	430b      	orrs	r3, r1
 8007cd8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce2:	f002 0310 	and.w	r3, r2, #16
 8007ce6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cea:	2300      	movs	r3, #0
 8007cec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cf0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	d01e      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d06:	d10c      	bne.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d0c:	3328      	adds	r3, #40	@ 0x28
 8007d0e:	2102      	movs	r1, #2
 8007d10:	4618      	mov	r0, r3
 8007d12:	f001 fc2d 	bl	8009570 <RCCEx_PLL3_Config>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d002      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d22:	4b6f      	ldr	r3, [pc, #444]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d32:	4a6b      	ldr	r2, [pc, #428]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d34:	430b      	orrs	r3, r1
 8007d36:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007d44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d46:	2300      	movs	r3, #0
 8007d48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d4a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4313      	orrs	r3, r2
 8007d52:	d03e      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d60:	d022      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007d62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d66:	d81b      	bhi.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d70:	d00b      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007d72:	e015      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d78:	3308      	adds	r3, #8
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f001 fb45 	bl	800940c <RCCEx_PLL2_Config>
 8007d82:	4603      	mov	r3, r0
 8007d84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d88:	e00f      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d8e:	3328      	adds	r3, #40	@ 0x28
 8007d90:	2102      	movs	r1, #2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f001 fbec 	bl	8009570 <RCCEx_PLL3_Config>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d9e:	e004      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007da6:	e000      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007daa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10b      	bne.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007db2:	4b4b      	ldr	r3, [pc, #300]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007db6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007dc2:	4a47      	ldr	r2, [pc, #284]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007dc4:	430b      	orrs	r3, r1
 8007dc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dc8:	e003      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007dde:	673b      	str	r3, [r7, #112]	@ 0x70
 8007de0:	2300      	movs	r3, #0
 8007de2:	677b      	str	r3, [r7, #116]	@ 0x74
 8007de4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007de8:	460b      	mov	r3, r1
 8007dea:	4313      	orrs	r3, r2
 8007dec:	d03b      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007df6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007dfa:	d01f      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007dfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e00:	d818      	bhi.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007e02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e06:	d003      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007e08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e0c:	d007      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007e0e:	e011      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e10:	4b33      	ldr	r3, [pc, #204]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e14:	4a32      	ldr	r2, [pc, #200]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007e1c:	e00f      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e22:	3328      	adds	r3, #40	@ 0x28
 8007e24:	2101      	movs	r1, #1
 8007e26:	4618      	mov	r0, r3
 8007e28:	f001 fba2 	bl	8009570 <RCCEx_PLL3_Config>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007e32:	e004      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e3a:	e000      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10b      	bne.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e46:	4b26      	ldr	r3, [pc, #152]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e56:	4a22      	ldr	r2, [pc, #136]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e58:	430b      	orrs	r3, r1
 8007e5a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e5c:	e003      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007e72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e74:	2300      	movs	r3, #0
 8007e76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e78:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	d034      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d003      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e90:	d007      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007e92:	e011      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e94:	4b12      	ldr	r3, [pc, #72]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e98:	4a11      	ldr	r2, [pc, #68]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007ea0:	e00e      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea6:	3308      	adds	r3, #8
 8007ea8:	2102      	movs	r1, #2
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f001 faae 	bl	800940c <RCCEx_PLL2_Config>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007eb6:	e003      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ec0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10d      	bne.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007ec8:	4b05      	ldr	r3, [pc, #20]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ecc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ed6:	4a02      	ldr	r2, [pc, #8]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007edc:	e006      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007ede:	bf00      	nop
 8007ee0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ee8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007ef8:	663b      	str	r3, [r7, #96]	@ 0x60
 8007efa:	2300      	movs	r3, #0
 8007efc:	667b      	str	r3, [r7, #100]	@ 0x64
 8007efe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007f02:	460b      	mov	r3, r1
 8007f04:	4313      	orrs	r3, r2
 8007f06:	d00c      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f0c:	3328      	adds	r3, #40	@ 0x28
 8007f0e:	2102      	movs	r1, #2
 8007f10:	4618      	mov	r0, r3
 8007f12:	f001 fb2d 	bl	8009570 <RCCEx_PLL3_Config>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007f2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f30:	2300      	movs	r3, #0
 8007f32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f34:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	d036      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f48:	d018      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007f4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f4e:	d811      	bhi.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f54:	d014      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007f56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f5a:	d80b      	bhi.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d011      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007f60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f64:	d106      	bne.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f66:	4bb7      	ldr	r3, [pc, #732]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6a:	4ab6      	ldr	r2, [pc, #728]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007f72:	e008      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f7a:	e004      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007f7c:	bf00      	nop
 8007f7e:	e002      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007f80:	bf00      	nop
 8007f82:	e000      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10a      	bne.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f8e:	4bad      	ldr	r3, [pc, #692]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f9c:	4aa9      	ldr	r2, [pc, #676]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f9e:	430b      	orrs	r3, r1
 8007fa0:	6553      	str	r3, [r2, #84]	@ 0x54
 8007fa2:	e003      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007fb8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fba:	2300      	movs	r3, #0
 8007fbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8007fbe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	d009      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007fc8:	4b9e      	ldr	r3, [pc, #632]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fcc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fd6:	4a9b      	ldr	r2, [pc, #620]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fd8:	430b      	orrs	r3, r1
 8007fda:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fea:	2300      	movs	r3, #0
 8007fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	d009      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ff8:	4b92      	ldr	r3, [pc, #584]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ffc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008004:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008006:	4a8f      	ldr	r2, [pc, #572]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008008:	430b      	orrs	r3, r1
 800800a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800800c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008018:	643b      	str	r3, [r7, #64]	@ 0x40
 800801a:	2300      	movs	r3, #0
 800801c:	647b      	str	r3, [r7, #68]	@ 0x44
 800801e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008022:	460b      	mov	r3, r1
 8008024:	4313      	orrs	r3, r2
 8008026:	d00e      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008028:	4b86      	ldr	r3, [pc, #536]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	4a85      	ldr	r2, [pc, #532]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800802e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008032:	6113      	str	r3, [r2, #16]
 8008034:	4b83      	ldr	r3, [pc, #524]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008036:	6919      	ldr	r1, [r3, #16]
 8008038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800803c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008040:	4a80      	ldr	r2, [pc, #512]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008042:	430b      	orrs	r3, r1
 8008044:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008052:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008054:	2300      	movs	r3, #0
 8008056:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008058:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800805c:	460b      	mov	r3, r1
 800805e:	4313      	orrs	r3, r2
 8008060:	d009      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008062:	4b78      	ldr	r3, [pc, #480]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008066:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800806a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800806e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008070:	4a74      	ldr	r2, [pc, #464]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008072:	430b      	orrs	r3, r1
 8008074:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800807a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008082:	633b      	str	r3, [r7, #48]	@ 0x30
 8008084:	2300      	movs	r3, #0
 8008086:	637b      	str	r3, [r7, #52]	@ 0x34
 8008088:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800808c:	460b      	mov	r3, r1
 800808e:	4313      	orrs	r3, r2
 8008090:	d00a      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008092:	4b6c      	ldr	r3, [pc, #432]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008096:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800809a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800809e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080a2:	4a68      	ldr	r2, [pc, #416]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080a4:	430b      	orrs	r3, r1
 80080a6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80080a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	2100      	movs	r1, #0
 80080b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80080be:	460b      	mov	r3, r1
 80080c0:	4313      	orrs	r3, r2
 80080c2:	d011      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080c8:	3308      	adds	r3, #8
 80080ca:	2100      	movs	r1, #0
 80080cc:	4618      	mov	r0, r3
 80080ce:	f001 f99d 	bl	800940c <RCCEx_PLL2_Config>
 80080d2:	4603      	mov	r3, r0
 80080d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80080d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d003      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80080e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f0:	2100      	movs	r1, #0
 80080f2:	6239      	str	r1, [r7, #32]
 80080f4:	f003 0302 	and.w	r3, r3, #2
 80080f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80080fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80080fe:	460b      	mov	r3, r1
 8008100:	4313      	orrs	r3, r2
 8008102:	d011      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008108:	3308      	adds	r3, #8
 800810a:	2101      	movs	r1, #1
 800810c:	4618      	mov	r0, r3
 800810e:	f001 f97d 	bl	800940c <RCCEx_PLL2_Config>
 8008112:	4603      	mov	r3, r0
 8008114:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008118:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008120:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008124:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008130:	2100      	movs	r1, #0
 8008132:	61b9      	str	r1, [r7, #24]
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	61fb      	str	r3, [r7, #28]
 800813a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800813e:	460b      	mov	r3, r1
 8008140:	4313      	orrs	r3, r2
 8008142:	d011      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008148:	3308      	adds	r3, #8
 800814a:	2102      	movs	r1, #2
 800814c:	4618      	mov	r0, r3
 800814e:	f001 f95d 	bl	800940c <RCCEx_PLL2_Config>
 8008152:	4603      	mov	r3, r0
 8008154:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008158:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800815c:	2b00      	cmp	r3, #0
 800815e:	d003      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008160:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008164:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800816c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008170:	2100      	movs	r1, #0
 8008172:	6139      	str	r1, [r7, #16]
 8008174:	f003 0308 	and.w	r3, r3, #8
 8008178:	617b      	str	r3, [r7, #20]
 800817a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800817e:	460b      	mov	r3, r1
 8008180:	4313      	orrs	r3, r2
 8008182:	d011      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008188:	3328      	adds	r3, #40	@ 0x28
 800818a:	2100      	movs	r1, #0
 800818c:	4618      	mov	r0, r3
 800818e:	f001 f9ef 	bl	8009570 <RCCEx_PLL3_Config>
 8008192:	4603      	mov	r3, r0
 8008194:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008198:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800819c:	2b00      	cmp	r3, #0
 800819e:	d003      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80081a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	2100      	movs	r1, #0
 80081b2:	60b9      	str	r1, [r7, #8]
 80081b4:	f003 0310 	and.w	r3, r3, #16
 80081b8:	60fb      	str	r3, [r7, #12]
 80081ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80081be:	460b      	mov	r3, r1
 80081c0:	4313      	orrs	r3, r2
 80081c2:	d011      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c8:	3328      	adds	r3, #40	@ 0x28
 80081ca:	2101      	movs	r1, #1
 80081cc:	4618      	mov	r0, r3
 80081ce:	f001 f9cf 	bl	8009570 <RCCEx_PLL3_Config>
 80081d2:	4603      	mov	r3, r0
 80081d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80081d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d003      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80081e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f0:	2100      	movs	r1, #0
 80081f2:	6039      	str	r1, [r7, #0]
 80081f4:	f003 0320 	and.w	r3, r3, #32
 80081f8:	607b      	str	r3, [r7, #4]
 80081fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80081fe:	460b      	mov	r3, r1
 8008200:	4313      	orrs	r3, r2
 8008202:	d011      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008208:	3328      	adds	r3, #40	@ 0x28
 800820a:	2102      	movs	r1, #2
 800820c:	4618      	mov	r0, r3
 800820e:	f001 f9af 	bl	8009570 <RCCEx_PLL3_Config>
 8008212:	4603      	mov	r3, r0
 8008214:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008218:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800821c:	2b00      	cmp	r3, #0
 800821e:	d003      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008220:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008224:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008228:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800822c:	2b00      	cmp	r3, #0
 800822e:	d101      	bne.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	e000      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008234:	2301      	movs	r3, #1
}
 8008236:	4618      	mov	r0, r3
 8008238:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800823c:	46bd      	mov	sp, r7
 800823e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008242:	bf00      	nop
 8008244:	58024400 	.word	0x58024400

08008248 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b090      	sub	sp, #64	@ 0x40
 800824c:	af00      	add	r7, sp, #0
 800824e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008256:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800825a:	430b      	orrs	r3, r1
 800825c:	f040 8094 	bne.w	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008260:	4b9b      	ldr	r3, [pc, #620]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008264:	f003 0307 	and.w	r3, r3, #7
 8008268:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800826a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826c:	2b04      	cmp	r3, #4
 800826e:	f200 8087 	bhi.w	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008272:	a201      	add	r2, pc, #4	@ (adr r2, 8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008278:	0800828d 	.word	0x0800828d
 800827c:	080082b5 	.word	0x080082b5
 8008280:	080082dd 	.word	0x080082dd
 8008284:	08008379 	.word	0x08008379
 8008288:	08008305 	.word	0x08008305
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800828c:	4b90      	ldr	r3, [pc, #576]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008294:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008298:	d108      	bne.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800829a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 ff62 	bl	8009168 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082a8:	f000 bc93 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082b0:	f000 bc8f 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082b4:	4b86      	ldr	r3, [pc, #536]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082c0:	d108      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082c2:	f107 0318 	add.w	r3, r7, #24
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 fca6 	bl	8008c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082d0:	f000 bc7f 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082d4:	2300      	movs	r3, #0
 80082d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082d8:	f000 bc7b 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082dc:	4b7c      	ldr	r3, [pc, #496]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082e8:	d108      	bne.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082ea:	f107 030c 	add.w	r3, r7, #12
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 fde6 	bl	8008ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082f8:	f000 bc6b 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008300:	f000 bc67 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008304:	4b72      	ldr	r3, [pc, #456]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008308:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800830c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800830e:	4b70      	ldr	r3, [pc, #448]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0304 	and.w	r3, r3, #4
 8008316:	2b04      	cmp	r3, #4
 8008318:	d10c      	bne.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800831a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800831c:	2b00      	cmp	r3, #0
 800831e:	d109      	bne.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008320:	4b6b      	ldr	r3, [pc, #428]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	08db      	lsrs	r3, r3, #3
 8008326:	f003 0303 	and.w	r3, r3, #3
 800832a:	4a6a      	ldr	r2, [pc, #424]	@ (80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800832c:	fa22 f303 	lsr.w	r3, r2, r3
 8008330:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008332:	e01f      	b.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008334:	4b66      	ldr	r3, [pc, #408]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800833c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008340:	d106      	bne.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008344:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008348:	d102      	bne.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800834a:	4b63      	ldr	r3, [pc, #396]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800834c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800834e:	e011      	b.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008350:	4b5f      	ldr	r3, [pc, #380]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008358:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800835c:	d106      	bne.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800835e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008364:	d102      	bne.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008366:	4b5d      	ldr	r3, [pc, #372]	@ (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008368:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800836a:	e003      	b.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800836c:	2300      	movs	r3, #0
 800836e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008370:	f000 bc2f 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008374:	f000 bc2d 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008378:	4b59      	ldr	r3, [pc, #356]	@ (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800837a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800837c:	f000 bc29 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008384:	f000 bc25 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800838c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008390:	430b      	orrs	r3, r1
 8008392:	f040 80a7 	bne.w	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008396:	4b4e      	ldr	r3, [pc, #312]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800839a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800839e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80083a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80083a6:	d054      	beq.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80083a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80083ae:	f200 808b 	bhi.w	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80083b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80083b8:	f000 8083 	beq.w	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80083bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80083c2:	f200 8081 	bhi.w	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80083c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083cc:	d02f      	beq.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80083ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083d4:	d878      	bhi.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80083d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d004      	beq.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80083dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083e2:	d012      	beq.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80083e4:	e070      	b.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083e6:	4b3a      	ldr	r3, [pc, #232]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083f2:	d107      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 feb5 	bl	8009168 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008402:	e3e6      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008408:	e3e3      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800840a:	4b31      	ldr	r3, [pc, #196]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008412:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008416:	d107      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008418:	f107 0318 	add.w	r3, r7, #24
 800841c:	4618      	mov	r0, r3
 800841e:	f000 fbfb 	bl	8008c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008426:	e3d4      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008428:	2300      	movs	r3, #0
 800842a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800842c:	e3d1      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800842e:	4b28      	ldr	r3, [pc, #160]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008436:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800843a:	d107      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800843c:	f107 030c 	add.w	r3, r7, #12
 8008440:	4618      	mov	r0, r3
 8008442:	f000 fd3d 	bl	8008ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800844a:	e3c2      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008450:	e3bf      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008452:	4b1f      	ldr	r3, [pc, #124]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008456:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800845a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800845c:	4b1c      	ldr	r3, [pc, #112]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0304 	and.w	r3, r3, #4
 8008464:	2b04      	cmp	r3, #4
 8008466:	d10c      	bne.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800846a:	2b00      	cmp	r3, #0
 800846c:	d109      	bne.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800846e:	4b18      	ldr	r3, [pc, #96]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	08db      	lsrs	r3, r3, #3
 8008474:	f003 0303 	and.w	r3, r3, #3
 8008478:	4a16      	ldr	r2, [pc, #88]	@ (80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800847a:	fa22 f303 	lsr.w	r3, r2, r3
 800847e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008480:	e01e      	b.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008482:	4b13      	ldr	r3, [pc, #76]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800848a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800848e:	d106      	bne.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008496:	d102      	bne.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008498:	4b0f      	ldr	r3, [pc, #60]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800849a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800849c:	e010      	b.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800849e:	4b0c      	ldr	r3, [pc, #48]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084aa:	d106      	bne.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80084ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084b2:	d102      	bne.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084b4:	4b09      	ldr	r3, [pc, #36]	@ (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084b8:	e002      	b.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084ba:	2300      	movs	r3, #0
 80084bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80084be:	e388      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80084c0:	e387      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80084c2:	4b07      	ldr	r3, [pc, #28]	@ (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80084c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084c6:	e384      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084cc:	e381      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80084ce:	bf00      	nop
 80084d0:	58024400 	.word	0x58024400
 80084d4:	03d09000 	.word	0x03d09000
 80084d8:	003d0900 	.word	0x003d0900
 80084dc:	016e3600 	.word	0x016e3600
 80084e0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80084e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084e8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80084ec:	430b      	orrs	r3, r1
 80084ee:	f040 809c 	bne.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80084f2:	4b9e      	ldr	r3, [pc, #632]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80084f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084f6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80084fa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80084fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008502:	d054      	beq.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008506:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800850a:	f200 808b 	bhi.w	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800850e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008510:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008514:	f000 8083 	beq.w	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800851e:	f200 8081 	bhi.w	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008524:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008528:	d02f      	beq.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800852a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008530:	d878      	bhi.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008534:	2b00      	cmp	r3, #0
 8008536:	d004      	beq.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800853e:	d012      	beq.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008540:	e070      	b.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008542:	4b8a      	ldr	r3, [pc, #552]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800854a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800854e:	d107      	bne.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008550:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008554:	4618      	mov	r0, r3
 8008556:	f000 fe07 	bl	8009168 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800855a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800855e:	e338      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008560:	2300      	movs	r3, #0
 8008562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008564:	e335      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008566:	4b81      	ldr	r3, [pc, #516]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800856e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008572:	d107      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008574:	f107 0318 	add.w	r3, r7, #24
 8008578:	4618      	mov	r0, r3
 800857a:	f000 fb4d 	bl	8008c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008582:	e326      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008588:	e323      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800858a:	4b78      	ldr	r3, [pc, #480]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008592:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008596:	d107      	bne.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008598:	f107 030c 	add.w	r3, r7, #12
 800859c:	4618      	mov	r0, r3
 800859e:	f000 fc8f 	bl	8008ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085a6:	e314      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085a8:	2300      	movs	r3, #0
 80085aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ac:	e311      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085ae:	4b6f      	ldr	r3, [pc, #444]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80085b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80085b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085b8:	4b6c      	ldr	r3, [pc, #432]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0304 	and.w	r3, r3, #4
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d10c      	bne.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80085c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d109      	bne.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085ca:	4b68      	ldr	r3, [pc, #416]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	08db      	lsrs	r3, r3, #3
 80085d0:	f003 0303 	and.w	r3, r3, #3
 80085d4:	4a66      	ldr	r2, [pc, #408]	@ (8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80085d6:	fa22 f303 	lsr.w	r3, r2, r3
 80085da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085dc:	e01e      	b.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085de:	4b63      	ldr	r3, [pc, #396]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085ea:	d106      	bne.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80085ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085f2:	d102      	bne.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085f4:	4b5f      	ldr	r3, [pc, #380]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80085f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085f8:	e010      	b.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085fa:	4b5c      	ldr	r3, [pc, #368]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008602:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008606:	d106      	bne.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800860a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800860e:	d102      	bne.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008610:	4b59      	ldr	r3, [pc, #356]	@ (8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008614:	e002      	b.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008616:	2300      	movs	r3, #0
 8008618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800861a:	e2da      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800861c:	e2d9      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800861e:	4b57      	ldr	r3, [pc, #348]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008622:	e2d6      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008624:	2300      	movs	r3, #0
 8008626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008628:	e2d3      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800862a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800862e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008632:	430b      	orrs	r3, r1
 8008634:	f040 80a7 	bne.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008638:	4b4c      	ldr	r3, [pc, #304]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800863a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800863c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008640:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008644:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008648:	d055      	beq.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800864a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008650:	f200 8096 	bhi.w	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008656:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800865a:	f000 8084 	beq.w	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800865e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008660:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008664:	f200 808c 	bhi.w	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800866a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800866e:	d030      	beq.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008676:	f200 8083 	bhi.w	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800867a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800867c:	2b00      	cmp	r3, #0
 800867e:	d004      	beq.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008686:	d012      	beq.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008688:	e07a      	b.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800868a:	4b38      	ldr	r3, [pc, #224]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008692:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008696:	d107      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800869c:	4618      	mov	r0, r3
 800869e:	f000 fd63 	bl	8009168 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086a6:	e294      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086a8:	2300      	movs	r3, #0
 80086aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ac:	e291      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086ae:	4b2f      	ldr	r3, [pc, #188]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086ba:	d107      	bne.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086bc:	f107 0318 	add.w	r3, r7, #24
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 faa9 	bl	8008c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ca:	e282      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086cc:	2300      	movs	r3, #0
 80086ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d0:	e27f      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086d2:	4b26      	ldr	r3, [pc, #152]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086de:	d107      	bne.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086e0:	f107 030c 	add.w	r3, r7, #12
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 fbeb 	bl	8008ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ee:	e270      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f4:	e26d      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086f6:	4b1d      	ldr	r3, [pc, #116]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008700:	4b1a      	ldr	r3, [pc, #104]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 0304 	and.w	r3, r3, #4
 8008708:	2b04      	cmp	r3, #4
 800870a:	d10c      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800870c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800870e:	2b00      	cmp	r3, #0
 8008710:	d109      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008712:	4b16      	ldr	r3, [pc, #88]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	08db      	lsrs	r3, r3, #3
 8008718:	f003 0303 	and.w	r3, r3, #3
 800871c:	4a14      	ldr	r2, [pc, #80]	@ (8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800871e:	fa22 f303 	lsr.w	r3, r2, r3
 8008722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008724:	e01e      	b.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008726:	4b11      	ldr	r3, [pc, #68]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800872e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008732:	d106      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800873a:	d102      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800873c:	4b0d      	ldr	r3, [pc, #52]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800873e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008740:	e010      	b.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008742:	4b0a      	ldr	r3, [pc, #40]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800874a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800874e:	d106      	bne.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008756:	d102      	bne.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008758:	4b07      	ldr	r3, [pc, #28]	@ (8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800875a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800875c:	e002      	b.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800875e:	2300      	movs	r3, #0
 8008760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008762:	e236      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008764:	e235      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008766:	4b05      	ldr	r3, [pc, #20]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800876a:	e232      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800876c:	58024400 	.word	0x58024400
 8008770:	03d09000 	.word	0x03d09000
 8008774:	003d0900 	.word	0x003d0900
 8008778:	016e3600 	.word	0x016e3600
 800877c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008784:	e225      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008786:	e9d7 2300 	ldrd	r2, r3, [r7]
 800878a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800878e:	430b      	orrs	r3, r1
 8008790:	f040 8085 	bne.w	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008794:	4b9c      	ldr	r3, [pc, #624]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008798:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800879c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800879e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80087a4:	d06b      	beq.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80087a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80087ac:	d874      	bhi.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80087ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80087b4:	d056      	beq.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80087b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80087bc:	d86c      	bhi.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80087be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80087c4:	d03b      	beq.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80087c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80087cc:	d864      	bhi.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80087ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087d4:	d021      	beq.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80087d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087dc:	d85c      	bhi.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80087de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d004      	beq.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80087e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087ea:	d004      	beq.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80087ec:	e054      	b.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80087ee:	f7fe fb5f 	bl	8006eb0 <HAL_RCC_GetPCLK1Freq>
 80087f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087f4:	e1ed      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087f6:	4b84      	ldr	r3, [pc, #528]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008802:	d107      	bne.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008804:	f107 0318 	add.w	r3, r7, #24
 8008808:	4618      	mov	r0, r3
 800880a:	f000 fa05 	bl	8008c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008812:	e1de      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008814:	2300      	movs	r3, #0
 8008816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008818:	e1db      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800881a:	4b7b      	ldr	r3, [pc, #492]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008822:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008826:	d107      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008828:	f107 030c 	add.w	r3, r7, #12
 800882c:	4618      	mov	r0, r3
 800882e:	f000 fb47 	bl	8008ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008836:	e1cc      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008838:	2300      	movs	r3, #0
 800883a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800883c:	e1c9      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800883e:	4b72      	ldr	r3, [pc, #456]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 0304 	and.w	r3, r3, #4
 8008846:	2b04      	cmp	r3, #4
 8008848:	d109      	bne.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800884a:	4b6f      	ldr	r3, [pc, #444]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	08db      	lsrs	r3, r3, #3
 8008850:	f003 0303 	and.w	r3, r3, #3
 8008854:	4a6d      	ldr	r2, [pc, #436]	@ (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008856:	fa22 f303 	lsr.w	r3, r2, r3
 800885a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800885c:	e1b9      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800885e:	2300      	movs	r3, #0
 8008860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008862:	e1b6      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008864:	4b68      	ldr	r3, [pc, #416]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800886c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008870:	d102      	bne.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008872:	4b67      	ldr	r3, [pc, #412]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008876:	e1ac      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008878:	2300      	movs	r3, #0
 800887a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800887c:	e1a9      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800887e:	4b62      	ldr	r3, [pc, #392]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008886:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800888a:	d102      	bne.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800888c:	4b61      	ldr	r3, [pc, #388]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800888e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008890:	e19f      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008892:	2300      	movs	r3, #0
 8008894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008896:	e19c      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008898:	2300      	movs	r3, #0
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800889c:	e199      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800889e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088a2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80088a6:	430b      	orrs	r3, r1
 80088a8:	d173      	bne.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80088aa:	4b57      	ldr	r3, [pc, #348]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80088ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80088b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80088b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088ba:	d02f      	beq.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80088bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088c2:	d863      	bhi.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80088c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d004      	beq.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80088ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088d0:	d012      	beq.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80088d2:	e05b      	b.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088d4:	4b4c      	ldr	r3, [pc, #304]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088e0:	d107      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088e2:	f107 0318 	add.w	r3, r7, #24
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 f996 	bl	8008c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088f0:	e16f      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088f6:	e16c      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088f8:	4b43      	ldr	r3, [pc, #268]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008904:	d107      	bne.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008906:	f107 030c 	add.w	r3, r7, #12
 800890a:	4618      	mov	r0, r3
 800890c:	f000 fad8 	bl	8008ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008914:	e15d      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008916:	2300      	movs	r3, #0
 8008918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800891a:	e15a      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800891c:	4b3a      	ldr	r3, [pc, #232]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800891e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008920:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008924:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008926:	4b38      	ldr	r3, [pc, #224]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0304 	and.w	r3, r3, #4
 800892e:	2b04      	cmp	r3, #4
 8008930:	d10c      	bne.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008934:	2b00      	cmp	r3, #0
 8008936:	d109      	bne.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008938:	4b33      	ldr	r3, [pc, #204]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	08db      	lsrs	r3, r3, #3
 800893e:	f003 0303 	and.w	r3, r3, #3
 8008942:	4a32      	ldr	r2, [pc, #200]	@ (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008944:	fa22 f303 	lsr.w	r3, r2, r3
 8008948:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800894a:	e01e      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800894c:	4b2e      	ldr	r3, [pc, #184]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008954:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008958:	d106      	bne.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800895a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800895c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008960:	d102      	bne.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008962:	4b2b      	ldr	r3, [pc, #172]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008966:	e010      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008968:	4b27      	ldr	r3, [pc, #156]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008970:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008974:	d106      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008978:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800897c:	d102      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800897e:	4b25      	ldr	r3, [pc, #148]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008980:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008982:	e002      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008984:	2300      	movs	r3, #0
 8008986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008988:	e123      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800898a:	e122      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008990:	e11f      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008992:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008996:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800899a:	430b      	orrs	r3, r1
 800899c:	d13c      	bne.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800899e:	4b1a      	ldr	r3, [pc, #104]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089a6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80089a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d004      	beq.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80089ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089b4:	d012      	beq.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80089b6:	e023      	b.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089b8:	4b13      	ldr	r3, [pc, #76]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089c4:	d107      	bne.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 fbcc 	bl	8009168 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089d4:	e0fd      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089da:	e0fa      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089e8:	d107      	bne.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089ea:	f107 0318 	add.w	r3, r7, #24
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 f912 	bl	8008c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089f8:	e0eb      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089fa:	2300      	movs	r3, #0
 80089fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089fe:	e0e8      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a04:	e0e5      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008a06:	bf00      	nop
 8008a08:	58024400 	.word	0x58024400
 8008a0c:	03d09000 	.word	0x03d09000
 8008a10:	003d0900 	.word	0x003d0900
 8008a14:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a1c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008a20:	430b      	orrs	r3, r1
 8008a22:	f040 8085 	bne.w	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008a26:	4b6d      	ldr	r3, [pc, #436]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a2a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008a2e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a36:	d06b      	beq.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a3e:	d874      	bhi.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a46:	d056      	beq.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a4e:	d86c      	bhi.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a56:	d03b      	beq.n	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a5e:	d864      	bhi.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a66:	d021      	beq.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a6e:	d85c      	bhi.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d004      	beq.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a7c:	d004      	beq.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008a7e:	e054      	b.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008a80:	f000 f8b4 	bl	8008bec <HAL_RCCEx_GetD3PCLK1Freq>
 8008a84:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a86:	e0a4      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a88:	4b54      	ldr	r3, [pc, #336]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a94:	d107      	bne.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a96:	f107 0318 	add.w	r3, r7, #24
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 f8bc 	bl	8008c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aa4:	e095      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aaa:	e092      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008aac:	4b4b      	ldr	r3, [pc, #300]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ab4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ab8:	d107      	bne.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aba:	f107 030c 	add.w	r3, r7, #12
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 f9fe 	bl	8008ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ac8:	e083      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ace:	e080      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ad0:	4b42      	ldr	r3, [pc, #264]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0304 	and.w	r3, r3, #4
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	d109      	bne.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008adc:	4b3f      	ldr	r3, [pc, #252]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	08db      	lsrs	r3, r3, #3
 8008ae2:	f003 0303 	and.w	r3, r3, #3
 8008ae6:	4a3e      	ldr	r2, [pc, #248]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8008aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aee:	e070      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af4:	e06d      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008af6:	4b39      	ldr	r3, [pc, #228]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b02:	d102      	bne.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008b04:	4b37      	ldr	r3, [pc, #220]	@ (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b08:	e063      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b0e:	e060      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b10:	4b32      	ldr	r3, [pc, #200]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b1c:	d102      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008b1e:	4b32      	ldr	r3, [pc, #200]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b22:	e056      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b28:	e053      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b2e:	e050      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b34:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	d148      	bne.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008b3c:	4b27      	ldr	r3, [pc, #156]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008b44:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b4c:	d02a      	beq.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b54:	d838      	bhi.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d004      	beq.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b62:	d00d      	beq.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008b64:	e030      	b.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b66:	4b1d      	ldr	r3, [pc, #116]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b72:	d102      	bne.n	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008b74:	4b1c      	ldr	r3, [pc, #112]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b78:	e02b      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b7e:	e028      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b80:	4b16      	ldr	r3, [pc, #88]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b8c:	d107      	bne.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 fae8 	bl	8009168 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b9c:	e019      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ba2:	e016      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bb0:	d107      	bne.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bb2:	f107 0318 	add.w	r3, r7, #24
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 f82e 	bl	8008c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bc0:	e007      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bc6:	e004      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bcc:	e001      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3740      	adds	r7, #64	@ 0x40
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	58024400 	.word	0x58024400
 8008be0:	03d09000 	.word	0x03d09000
 8008be4:	003d0900 	.word	0x003d0900
 8008be8:	016e3600 	.word	0x016e3600

08008bec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008bf0:	f7fe f92e 	bl	8006e50 <HAL_RCC_GetHCLKFreq>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	4b06      	ldr	r3, [pc, #24]	@ (8008c10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	091b      	lsrs	r3, r3, #4
 8008bfc:	f003 0307 	and.w	r3, r3, #7
 8008c00:	4904      	ldr	r1, [pc, #16]	@ (8008c14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008c02:	5ccb      	ldrb	r3, [r1, r3]
 8008c04:	f003 031f 	and.w	r3, r3, #31
 8008c08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	58024400 	.word	0x58024400
 8008c14:	0800b890 	.word	0x0800b890

08008c18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b089      	sub	sp, #36	@ 0x24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c20:	4ba1      	ldr	r3, [pc, #644]	@ (8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c24:	f003 0303 	and.w	r3, r3, #3
 8008c28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008c2a:	4b9f      	ldr	r3, [pc, #636]	@ (8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c2e:	0b1b      	lsrs	r3, r3, #12
 8008c30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008c36:	4b9c      	ldr	r3, [pc, #624]	@ (8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c3a:	091b      	lsrs	r3, r3, #4
 8008c3c:	f003 0301 	and.w	r3, r3, #1
 8008c40:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008c42:	4b99      	ldr	r3, [pc, #612]	@ (8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c46:	08db      	lsrs	r3, r3, #3
 8008c48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	fb02 f303 	mul.w	r3, r2, r3
 8008c52:	ee07 3a90 	vmov	s15, r3
 8008c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 8111 	beq.w	8008e88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	f000 8083 	beq.w	8008d74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	f200 80a1 	bhi.w	8008db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d056      	beq.n	8008d30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008c82:	e099      	b.n	8008db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c84:	4b88      	ldr	r3, [pc, #544]	@ (8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 0320 	and.w	r3, r3, #32
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d02d      	beq.n	8008cec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c90:	4b85      	ldr	r3, [pc, #532]	@ (8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	08db      	lsrs	r3, r3, #3
 8008c96:	f003 0303 	and.w	r3, r3, #3
 8008c9a:	4a84      	ldr	r2, [pc, #528]	@ (8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	ee07 3a90 	vmov	s15, r3
 8008ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	ee07 3a90 	vmov	s15, r3
 8008cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cba:	4b7b      	ldr	r3, [pc, #492]	@ (8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cc2:	ee07 3a90 	vmov	s15, r3
 8008cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cea:	e087      	b.n	8008dfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	ee07 3a90 	vmov	s15, r3
 8008cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cfe:	4b6a      	ldr	r3, [pc, #424]	@ (8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d06:	ee07 3a90 	vmov	s15, r3
 8008d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d2e:	e065      	b.n	8008dfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	ee07 3a90 	vmov	s15, r3
 8008d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d42:	4b59      	ldr	r3, [pc, #356]	@ (8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d4a:	ee07 3a90 	vmov	s15, r3
 8008d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d72:	e043      	b.n	8008dfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	ee07 3a90 	vmov	s15, r3
 8008d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008ebc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d86:	4b48      	ldr	r3, [pc, #288]	@ (8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d8e:	ee07 3a90 	vmov	s15, r3
 8008d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008db6:	e021      	b.n	8008dfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	ee07 3a90 	vmov	s15, r3
 8008dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dca:	4b37      	ldr	r3, [pc, #220]	@ (8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dde:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dfa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008dfc:	4b2a      	ldr	r3, [pc, #168]	@ (8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e00:	0a5b      	lsrs	r3, r3, #9
 8008e02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e06:	ee07 3a90 	vmov	s15, r3
 8008e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e16:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e22:	ee17 2a90 	vmov	r2, s15
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e2e:	0c1b      	lsrs	r3, r3, #16
 8008e30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e34:	ee07 3a90 	vmov	s15, r3
 8008e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e44:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e50:	ee17 2a90 	vmov	r2, s15
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008e58:	4b13      	ldr	r3, [pc, #76]	@ (8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e5c:	0e1b      	lsrs	r3, r3, #24
 8008e5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e62:	ee07 3a90 	vmov	s15, r3
 8008e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e72:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e7e:	ee17 2a90 	vmov	r2, s15
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e86:	e008      	b.n	8008e9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	609a      	str	r2, [r3, #8]
}
 8008e9a:	bf00      	nop
 8008e9c:	3724      	adds	r7, #36	@ 0x24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	58024400 	.word	0x58024400
 8008eac:	03d09000 	.word	0x03d09000
 8008eb0:	46000000 	.word	0x46000000
 8008eb4:	4c742400 	.word	0x4c742400
 8008eb8:	4a742400 	.word	0x4a742400
 8008ebc:	4bb71b00 	.word	0x4bb71b00

08008ec0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b089      	sub	sp, #36	@ 0x24
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ec8:	4ba1      	ldr	r3, [pc, #644]	@ (8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ecc:	f003 0303 	and.w	r3, r3, #3
 8008ed0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008ed2:	4b9f      	ldr	r3, [pc, #636]	@ (8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed6:	0d1b      	lsrs	r3, r3, #20
 8008ed8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008edc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008ede:	4b9c      	ldr	r3, [pc, #624]	@ (8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee2:	0a1b      	lsrs	r3, r3, #8
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008eea:	4b99      	ldr	r3, [pc, #612]	@ (8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eee:	08db      	lsrs	r3, r3, #3
 8008ef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	fb02 f303 	mul.w	r3, r2, r3
 8008efa:	ee07 3a90 	vmov	s15, r3
 8008efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f000 8111 	beq.w	8009130 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	f000 8083 	beq.w	800901c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	f200 80a1 	bhi.w	8009060 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d003      	beq.n	8008f2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d056      	beq.n	8008fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f2a:	e099      	b.n	8009060 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f2c:	4b88      	ldr	r3, [pc, #544]	@ (8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 0320 	and.w	r3, r3, #32
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d02d      	beq.n	8008f94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f38:	4b85      	ldr	r3, [pc, #532]	@ (8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	08db      	lsrs	r3, r3, #3
 8008f3e:	f003 0303 	and.w	r3, r3, #3
 8008f42:	4a84      	ldr	r2, [pc, #528]	@ (8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008f44:	fa22 f303 	lsr.w	r3, r2, r3
 8008f48:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	ee07 3a90 	vmov	s15, r3
 8008f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	ee07 3a90 	vmov	s15, r3
 8008f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f62:	4b7b      	ldr	r3, [pc, #492]	@ (8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f6a:	ee07 3a90 	vmov	s15, r3
 8008f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f76:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009158 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f92:	e087      	b.n	80090a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	ee07 3a90 	vmov	s15, r3
 8008f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f9e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800915c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fa6:	4b6a      	ldr	r3, [pc, #424]	@ (8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fae:	ee07 3a90 	vmov	s15, r3
 8008fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009158 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fd6:	e065      	b.n	80090a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	ee07 3a90 	vmov	s15, r3
 8008fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009160 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fea:	4b59      	ldr	r3, [pc, #356]	@ (8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ff2:	ee07 3a90 	vmov	s15, r3
 8008ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ffe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009158 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800900a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800900e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800901a:	e043      	b.n	80090a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	ee07 3a90 	vmov	s15, r3
 8009022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009026:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009164 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800902a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800902e:	4b48      	ldr	r3, [pc, #288]	@ (8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009036:	ee07 3a90 	vmov	s15, r3
 800903a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800903e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009042:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009158 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800904a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800904e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800905a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800905e:	e021      	b.n	80090a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	ee07 3a90 	vmov	s15, r3
 8009066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800906a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009160 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800906e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009072:	4b37      	ldr	r3, [pc, #220]	@ (8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800907a:	ee07 3a90 	vmov	s15, r3
 800907e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009082:	ed97 6a03 	vldr	s12, [r7, #12]
 8009086:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009158 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800908a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800908e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800909a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800909e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80090a4:	4b2a      	ldr	r3, [pc, #168]	@ (8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090a8:	0a5b      	lsrs	r3, r3, #9
 80090aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090ae:	ee07 3a90 	vmov	s15, r3
 80090b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090be:	edd7 6a07 	vldr	s13, [r7, #28]
 80090c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090ca:	ee17 2a90 	vmov	r2, s15
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80090d2:	4b1f      	ldr	r3, [pc, #124]	@ (8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090d6:	0c1b      	lsrs	r3, r3, #16
 80090d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090dc:	ee07 3a90 	vmov	s15, r3
 80090e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80090f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090f8:	ee17 2a90 	vmov	r2, s15
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009100:	4b13      	ldr	r3, [pc, #76]	@ (8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009104:	0e1b      	lsrs	r3, r3, #24
 8009106:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800910a:	ee07 3a90 	vmov	s15, r3
 800910e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009112:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009116:	ee37 7a87 	vadd.f32	s14, s15, s14
 800911a:	edd7 6a07 	vldr	s13, [r7, #28]
 800911e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009126:	ee17 2a90 	vmov	r2, s15
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800912e:	e008      	b.n	8009142 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	609a      	str	r2, [r3, #8]
}
 8009142:	bf00      	nop
 8009144:	3724      	adds	r7, #36	@ 0x24
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	58024400 	.word	0x58024400
 8009154:	03d09000 	.word	0x03d09000
 8009158:	46000000 	.word	0x46000000
 800915c:	4c742400 	.word	0x4c742400
 8009160:	4a742400 	.word	0x4a742400
 8009164:	4bb71b00 	.word	0x4bb71b00

08009168 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009168:	b480      	push	{r7}
 800916a:	b089      	sub	sp, #36	@ 0x24
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009170:	4ba0      	ldr	r3, [pc, #640]	@ (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009174:	f003 0303 	and.w	r3, r3, #3
 8009178:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800917a:	4b9e      	ldr	r3, [pc, #632]	@ (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800917c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800917e:	091b      	lsrs	r3, r3, #4
 8009180:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009184:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009186:	4b9b      	ldr	r3, [pc, #620]	@ (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009190:	4b98      	ldr	r3, [pc, #608]	@ (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009194:	08db      	lsrs	r3, r3, #3
 8009196:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	fb02 f303 	mul.w	r3, r2, r3
 80091a0:	ee07 3a90 	vmov	s15, r3
 80091a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f000 8111 	beq.w	80093d6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	f000 8083 	beq.w	80092c2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	f200 80a1 	bhi.w	8009306 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d056      	beq.n	800927e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80091d0:	e099      	b.n	8009306 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091d2:	4b88      	ldr	r3, [pc, #544]	@ (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 0320 	and.w	r3, r3, #32
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d02d      	beq.n	800923a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091de:	4b85      	ldr	r3, [pc, #532]	@ (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	08db      	lsrs	r3, r3, #3
 80091e4:	f003 0303 	and.w	r3, r3, #3
 80091e8:	4a83      	ldr	r2, [pc, #524]	@ (80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80091ea:	fa22 f303 	lsr.w	r3, r2, r3
 80091ee:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	ee07 3a90 	vmov	s15, r3
 80091f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	ee07 3a90 	vmov	s15, r3
 8009200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009204:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009208:	4b7a      	ldr	r3, [pc, #488]	@ (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800920a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800920c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009210:	ee07 3a90 	vmov	s15, r3
 8009214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009218:	ed97 6a03 	vldr	s12, [r7, #12]
 800921c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80093fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009220:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009224:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009228:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800922c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009234:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009238:	e087      	b.n	800934a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	ee07 3a90 	vmov	s15, r3
 8009240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009244:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009400 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009248:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800924c:	4b69      	ldr	r3, [pc, #420]	@ (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800924e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009254:	ee07 3a90 	vmov	s15, r3
 8009258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800925c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009260:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80093fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009264:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009268:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800926c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009278:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800927c:	e065      	b.n	800934a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	ee07 3a90 	vmov	s15, r3
 8009284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009288:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009404 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800928c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009290:	4b58      	ldr	r3, [pc, #352]	@ (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009298:	ee07 3a90 	vmov	s15, r3
 800929c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80092a4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80093fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092c0:	e043      	b.n	800934a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	ee07 3a90 	vmov	s15, r3
 80092c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092cc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009408 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80092d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092d4:	4b47      	ldr	r3, [pc, #284]	@ (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092dc:	ee07 3a90 	vmov	s15, r3
 80092e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80092e8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80093fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009300:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009304:	e021      	b.n	800934a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	ee07 3a90 	vmov	s15, r3
 800930c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009310:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009400 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009314:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009318:	4b36      	ldr	r3, [pc, #216]	@ (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800931a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800931c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009320:	ee07 3a90 	vmov	s15, r3
 8009324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009328:	ed97 6a03 	vldr	s12, [r7, #12]
 800932c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80093fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009330:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009334:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009338:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800933c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009344:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009348:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800934a:	4b2a      	ldr	r3, [pc, #168]	@ (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800934c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800934e:	0a5b      	lsrs	r3, r3, #9
 8009350:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009354:	ee07 3a90 	vmov	s15, r3
 8009358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800935c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009360:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009364:	edd7 6a07 	vldr	s13, [r7, #28]
 8009368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800936c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009370:	ee17 2a90 	vmov	r2, s15
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009378:	4b1e      	ldr	r3, [pc, #120]	@ (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800937a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800937c:	0c1b      	lsrs	r3, r3, #16
 800937e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009382:	ee07 3a90 	vmov	s15, r3
 8009386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800938e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009392:	edd7 6a07 	vldr	s13, [r7, #28]
 8009396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800939a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800939e:	ee17 2a90 	vmov	r2, s15
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80093a6:	4b13      	ldr	r3, [pc, #76]	@ (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093aa:	0e1b      	lsrs	r3, r3, #24
 80093ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093b0:	ee07 3a90 	vmov	s15, r3
 80093b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80093c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093cc:	ee17 2a90 	vmov	r2, s15
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80093d4:	e008      	b.n	80093e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	609a      	str	r2, [r3, #8]
}
 80093e8:	bf00      	nop
 80093ea:	3724      	adds	r7, #36	@ 0x24
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	58024400 	.word	0x58024400
 80093f8:	03d09000 	.word	0x03d09000
 80093fc:	46000000 	.word	0x46000000
 8009400:	4c742400 	.word	0x4c742400
 8009404:	4a742400 	.word	0x4a742400
 8009408:	4bb71b00 	.word	0x4bb71b00

0800940c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800941a:	4b53      	ldr	r3, [pc, #332]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 800941c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800941e:	f003 0303 	and.w	r3, r3, #3
 8009422:	2b03      	cmp	r3, #3
 8009424:	d101      	bne.n	800942a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e099      	b.n	800955e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800942a:	4b4f      	ldr	r3, [pc, #316]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a4e      	ldr	r2, [pc, #312]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 8009430:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009436:	f7f9 f965 	bl	8002704 <HAL_GetTick>
 800943a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800943c:	e008      	b.n	8009450 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800943e:	f7f9 f961 	bl	8002704 <HAL_GetTick>
 8009442:	4602      	mov	r2, r0
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	2b02      	cmp	r3, #2
 800944a:	d901      	bls.n	8009450 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800944c:	2303      	movs	r3, #3
 800944e:	e086      	b.n	800955e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009450:	4b45      	ldr	r3, [pc, #276]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1f0      	bne.n	800943e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800945c:	4b42      	ldr	r3, [pc, #264]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 800945e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009460:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	031b      	lsls	r3, r3, #12
 800946a:	493f      	ldr	r1, [pc, #252]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 800946c:	4313      	orrs	r3, r2
 800946e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	3b01      	subs	r3, #1
 8009476:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	3b01      	subs	r3, #1
 8009480:	025b      	lsls	r3, r3, #9
 8009482:	b29b      	uxth	r3, r3
 8009484:	431a      	orrs	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	3b01      	subs	r3, #1
 800948c:	041b      	lsls	r3, r3, #16
 800948e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009492:	431a      	orrs	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	3b01      	subs	r3, #1
 800949a:	061b      	lsls	r3, r3, #24
 800949c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80094a0:	4931      	ldr	r1, [pc, #196]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 80094a2:	4313      	orrs	r3, r2
 80094a4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80094a6:	4b30      	ldr	r3, [pc, #192]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 80094a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	492d      	ldr	r1, [pc, #180]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 80094b4:	4313      	orrs	r3, r2
 80094b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80094b8:	4b2b      	ldr	r3, [pc, #172]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 80094ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094bc:	f023 0220 	bic.w	r2, r3, #32
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	4928      	ldr	r1, [pc, #160]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 80094c6:	4313      	orrs	r3, r2
 80094c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80094ca:	4b27      	ldr	r3, [pc, #156]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 80094cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ce:	4a26      	ldr	r2, [pc, #152]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 80094d0:	f023 0310 	bic.w	r3, r3, #16
 80094d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80094d6:	4b24      	ldr	r3, [pc, #144]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 80094d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094da:	4b24      	ldr	r3, [pc, #144]	@ (800956c <RCCEx_PLL2_Config+0x160>)
 80094dc:	4013      	ands	r3, r2
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	69d2      	ldr	r2, [r2, #28]
 80094e2:	00d2      	lsls	r2, r2, #3
 80094e4:	4920      	ldr	r1, [pc, #128]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80094ea:	4b1f      	ldr	r3, [pc, #124]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 80094ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ee:	4a1e      	ldr	r2, [pc, #120]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 80094f0:	f043 0310 	orr.w	r3, r3, #16
 80094f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d106      	bne.n	800950a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80094fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 80094fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009500:	4a19      	ldr	r2, [pc, #100]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 8009502:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009506:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009508:	e00f      	b.n	800952a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d106      	bne.n	800951e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009510:	4b15      	ldr	r3, [pc, #84]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 8009512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009514:	4a14      	ldr	r2, [pc, #80]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 8009516:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800951a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800951c:	e005      	b.n	800952a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800951e:	4b12      	ldr	r3, [pc, #72]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 8009520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009522:	4a11      	ldr	r2, [pc, #68]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 8009524:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009528:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800952a:	4b0f      	ldr	r3, [pc, #60]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a0e      	ldr	r2, [pc, #56]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 8009530:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009536:	f7f9 f8e5 	bl	8002704 <HAL_GetTick>
 800953a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800953c:	e008      	b.n	8009550 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800953e:	f7f9 f8e1 	bl	8002704 <HAL_GetTick>
 8009542:	4602      	mov	r2, r0
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	2b02      	cmp	r3, #2
 800954a:	d901      	bls.n	8009550 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800954c:	2303      	movs	r3, #3
 800954e:	e006      	b.n	800955e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009550:	4b05      	ldr	r3, [pc, #20]	@ (8009568 <RCCEx_PLL2_Config+0x15c>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d0f0      	beq.n	800953e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800955c:	7bfb      	ldrb	r3, [r7, #15]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	58024400 	.word	0x58024400
 800956c:	ffff0007 	.word	0xffff0007

08009570 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800957e:	4b53      	ldr	r3, [pc, #332]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 8009580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009582:	f003 0303 	and.w	r3, r3, #3
 8009586:	2b03      	cmp	r3, #3
 8009588:	d101      	bne.n	800958e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e099      	b.n	80096c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800958e:	4b4f      	ldr	r3, [pc, #316]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a4e      	ldr	r2, [pc, #312]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 8009594:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800959a:	f7f9 f8b3 	bl	8002704 <HAL_GetTick>
 800959e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80095a0:	e008      	b.n	80095b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80095a2:	f7f9 f8af 	bl	8002704 <HAL_GetTick>
 80095a6:	4602      	mov	r2, r0
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	1ad3      	subs	r3, r2, r3
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d901      	bls.n	80095b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80095b0:	2303      	movs	r3, #3
 80095b2:	e086      	b.n	80096c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80095b4:	4b45      	ldr	r3, [pc, #276]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1f0      	bne.n	80095a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80095c0:	4b42      	ldr	r3, [pc, #264]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 80095c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095c4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	051b      	lsls	r3, r3, #20
 80095ce:	493f      	ldr	r1, [pc, #252]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 80095d0:	4313      	orrs	r3, r2
 80095d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	3b01      	subs	r3, #1
 80095da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	3b01      	subs	r3, #1
 80095e4:	025b      	lsls	r3, r3, #9
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	431a      	orrs	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	3b01      	subs	r3, #1
 80095f0:	041b      	lsls	r3, r3, #16
 80095f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80095f6:	431a      	orrs	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	3b01      	subs	r3, #1
 80095fe:	061b      	lsls	r3, r3, #24
 8009600:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009604:	4931      	ldr	r1, [pc, #196]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 8009606:	4313      	orrs	r3, r2
 8009608:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800960a:	4b30      	ldr	r3, [pc, #192]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 800960c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	695b      	ldr	r3, [r3, #20]
 8009616:	492d      	ldr	r1, [pc, #180]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 8009618:	4313      	orrs	r3, r2
 800961a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800961c:	4b2b      	ldr	r3, [pc, #172]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 800961e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009620:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	4928      	ldr	r1, [pc, #160]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 800962a:	4313      	orrs	r3, r2
 800962c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800962e:	4b27      	ldr	r3, [pc, #156]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 8009630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009632:	4a26      	ldr	r2, [pc, #152]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 8009634:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009638:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800963a:	4b24      	ldr	r3, [pc, #144]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 800963c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800963e:	4b24      	ldr	r3, [pc, #144]	@ (80096d0 <RCCEx_PLL3_Config+0x160>)
 8009640:	4013      	ands	r3, r2
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	69d2      	ldr	r2, [r2, #28]
 8009646:	00d2      	lsls	r2, r2, #3
 8009648:	4920      	ldr	r1, [pc, #128]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 800964a:	4313      	orrs	r3, r2
 800964c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800964e:	4b1f      	ldr	r3, [pc, #124]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 8009650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009652:	4a1e      	ldr	r2, [pc, #120]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 8009654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009658:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d106      	bne.n	800966e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009660:	4b1a      	ldr	r3, [pc, #104]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 8009662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009664:	4a19      	ldr	r2, [pc, #100]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 8009666:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800966a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800966c:	e00f      	b.n	800968e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d106      	bne.n	8009682 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009674:	4b15      	ldr	r3, [pc, #84]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 8009676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009678:	4a14      	ldr	r2, [pc, #80]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 800967a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800967e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009680:	e005      	b.n	800968e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009682:	4b12      	ldr	r3, [pc, #72]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 8009684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009686:	4a11      	ldr	r2, [pc, #68]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 8009688:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800968c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800968e:	4b0f      	ldr	r3, [pc, #60]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a0e      	ldr	r2, [pc, #56]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 8009694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800969a:	f7f9 f833 	bl	8002704 <HAL_GetTick>
 800969e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80096a0:	e008      	b.n	80096b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80096a2:	f7f9 f82f 	bl	8002704 <HAL_GetTick>
 80096a6:	4602      	mov	r2, r0
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d901      	bls.n	80096b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80096b0:	2303      	movs	r3, #3
 80096b2:	e006      	b.n	80096c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80096b4:	4b05      	ldr	r3, [pc, #20]	@ (80096cc <RCCEx_PLL3_Config+0x15c>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d0f0      	beq.n	80096a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	58024400 	.word	0x58024400
 80096d0:	ffff0007 	.word	0xffff0007

080096d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e042      	b.n	800976c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d106      	bne.n	80096fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7f8 fe03 	bl	8002304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2224      	movs	r2, #36	@ 0x24
 8009702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f022 0201 	bic.w	r2, r2, #1
 8009714:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800971a:	2b00      	cmp	r3, #0
 800971c:	d002      	beq.n	8009724 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 ff38 	bl	800a594 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f8c9 	bl	80098bc <UART_SetConfig>
 800972a:	4603      	mov	r3, r0
 800972c:	2b01      	cmp	r3, #1
 800972e:	d101      	bne.n	8009734 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	e01b      	b.n	800976c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	689a      	ldr	r2, [r3, #8]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f042 0201 	orr.w	r2, r2, #1
 8009762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 ffb7 	bl	800a6d8 <UART_CheckIdleState>
 800976a:	4603      	mov	r3, r0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b08a      	sub	sp, #40	@ 0x28
 8009778:	af02      	add	r7, sp, #8
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	603b      	str	r3, [r7, #0]
 8009780:	4613      	mov	r3, r2
 8009782:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800978a:	2b20      	cmp	r3, #32
 800978c:	d17b      	bne.n	8009886 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <HAL_UART_Transmit+0x26>
 8009794:	88fb      	ldrh	r3, [r7, #6]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e074      	b.n	8009888 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2221      	movs	r2, #33	@ 0x21
 80097aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097ae:	f7f8 ffa9 	bl	8002704 <HAL_GetTick>
 80097b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	88fa      	ldrh	r2, [r7, #6]
 80097b8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	88fa      	ldrh	r2, [r7, #6]
 80097c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097cc:	d108      	bne.n	80097e0 <HAL_UART_Transmit+0x6c>
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d104      	bne.n	80097e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80097d6:	2300      	movs	r3, #0
 80097d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	61bb      	str	r3, [r7, #24]
 80097de:	e003      	b.n	80097e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097e4:	2300      	movs	r3, #0
 80097e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80097e8:	e030      	b.n	800984c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2200      	movs	r2, #0
 80097f2:	2180      	movs	r1, #128	@ 0x80
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f001 f819 	bl	800a82c <UART_WaitOnFlagUntilTimeout>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d005      	beq.n	800980c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2220      	movs	r2, #32
 8009804:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009808:	2303      	movs	r3, #3
 800980a:	e03d      	b.n	8009888 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10b      	bne.n	800982a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	881b      	ldrh	r3, [r3, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009820:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	3302      	adds	r3, #2
 8009826:	61bb      	str	r3, [r7, #24]
 8009828:	e007      	b.n	800983a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	781a      	ldrb	r2, [r3, #0]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	3301      	adds	r3, #1
 8009838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009840:	b29b      	uxth	r3, r3
 8009842:	3b01      	subs	r3, #1
 8009844:	b29a      	uxth	r2, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009852:	b29b      	uxth	r3, r3
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1c8      	bne.n	80097ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	2200      	movs	r2, #0
 8009860:	2140      	movs	r1, #64	@ 0x40
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 ffe2 	bl	800a82c <UART_WaitOnFlagUntilTimeout>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d005      	beq.n	800987a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2220      	movs	r2, #32
 8009872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009876:	2303      	movs	r3, #3
 8009878:	e006      	b.n	8009888 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2220      	movs	r2, #32
 800987e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	e000      	b.n	8009888 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009886:	2302      	movs	r3, #2
  }
}
 8009888:	4618      	mov	r0, r3
 800988a:	3720      	adds	r7, #32
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800989e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098a6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	4313      	orrs	r3, r2
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3714      	adds	r7, #20
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
	...

080098bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098c0:	b092      	sub	sp, #72	@ 0x48
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	689a      	ldr	r2, [r3, #8]
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	431a      	orrs	r2, r3
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	431a      	orrs	r2, r3
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	69db      	ldr	r3, [r3, #28]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	4bbe      	ldr	r3, [pc, #760]	@ (8009be4 <UART_SetConfig+0x328>)
 80098ec:	4013      	ands	r3, r2
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	6812      	ldr	r2, [r2, #0]
 80098f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80098f4:	430b      	orrs	r3, r1
 80098f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	68da      	ldr	r2, [r3, #12]
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	430a      	orrs	r2, r1
 800990c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4ab3      	ldr	r2, [pc, #716]	@ (8009be8 <UART_SetConfig+0x32c>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d004      	beq.n	8009928 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009924:	4313      	orrs	r3, r2
 8009926:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	689a      	ldr	r2, [r3, #8]
 800992e:	4baf      	ldr	r3, [pc, #700]	@ (8009bec <UART_SetConfig+0x330>)
 8009930:	4013      	ands	r3, r2
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	6812      	ldr	r2, [r2, #0]
 8009936:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009938:	430b      	orrs	r3, r1
 800993a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009942:	f023 010f 	bic.w	r1, r3, #15
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4aa6      	ldr	r2, [pc, #664]	@ (8009bf0 <UART_SetConfig+0x334>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d177      	bne.n	8009a4c <UART_SetConfig+0x190>
 800995c:	4ba5      	ldr	r3, [pc, #660]	@ (8009bf4 <UART_SetConfig+0x338>)
 800995e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009960:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009964:	2b28      	cmp	r3, #40	@ 0x28
 8009966:	d86d      	bhi.n	8009a44 <UART_SetConfig+0x188>
 8009968:	a201      	add	r2, pc, #4	@ (adr r2, 8009970 <UART_SetConfig+0xb4>)
 800996a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996e:	bf00      	nop
 8009970:	08009a15 	.word	0x08009a15
 8009974:	08009a45 	.word	0x08009a45
 8009978:	08009a45 	.word	0x08009a45
 800997c:	08009a45 	.word	0x08009a45
 8009980:	08009a45 	.word	0x08009a45
 8009984:	08009a45 	.word	0x08009a45
 8009988:	08009a45 	.word	0x08009a45
 800998c:	08009a45 	.word	0x08009a45
 8009990:	08009a1d 	.word	0x08009a1d
 8009994:	08009a45 	.word	0x08009a45
 8009998:	08009a45 	.word	0x08009a45
 800999c:	08009a45 	.word	0x08009a45
 80099a0:	08009a45 	.word	0x08009a45
 80099a4:	08009a45 	.word	0x08009a45
 80099a8:	08009a45 	.word	0x08009a45
 80099ac:	08009a45 	.word	0x08009a45
 80099b0:	08009a25 	.word	0x08009a25
 80099b4:	08009a45 	.word	0x08009a45
 80099b8:	08009a45 	.word	0x08009a45
 80099bc:	08009a45 	.word	0x08009a45
 80099c0:	08009a45 	.word	0x08009a45
 80099c4:	08009a45 	.word	0x08009a45
 80099c8:	08009a45 	.word	0x08009a45
 80099cc:	08009a45 	.word	0x08009a45
 80099d0:	08009a2d 	.word	0x08009a2d
 80099d4:	08009a45 	.word	0x08009a45
 80099d8:	08009a45 	.word	0x08009a45
 80099dc:	08009a45 	.word	0x08009a45
 80099e0:	08009a45 	.word	0x08009a45
 80099e4:	08009a45 	.word	0x08009a45
 80099e8:	08009a45 	.word	0x08009a45
 80099ec:	08009a45 	.word	0x08009a45
 80099f0:	08009a35 	.word	0x08009a35
 80099f4:	08009a45 	.word	0x08009a45
 80099f8:	08009a45 	.word	0x08009a45
 80099fc:	08009a45 	.word	0x08009a45
 8009a00:	08009a45 	.word	0x08009a45
 8009a04:	08009a45 	.word	0x08009a45
 8009a08:	08009a45 	.word	0x08009a45
 8009a0c:	08009a45 	.word	0x08009a45
 8009a10:	08009a3d 	.word	0x08009a3d
 8009a14:	2301      	movs	r3, #1
 8009a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a1a:	e326      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009a1c:	2304      	movs	r3, #4
 8009a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a22:	e322      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009a24:	2308      	movs	r3, #8
 8009a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a2a:	e31e      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009a2c:	2310      	movs	r3, #16
 8009a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a32:	e31a      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009a34:	2320      	movs	r3, #32
 8009a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a3a:	e316      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009a3c:	2340      	movs	r3, #64	@ 0x40
 8009a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a42:	e312      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009a44:	2380      	movs	r3, #128	@ 0x80
 8009a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a4a:	e30e      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a69      	ldr	r2, [pc, #420]	@ (8009bf8 <UART_SetConfig+0x33c>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d130      	bne.n	8009ab8 <UART_SetConfig+0x1fc>
 8009a56:	4b67      	ldr	r3, [pc, #412]	@ (8009bf4 <UART_SetConfig+0x338>)
 8009a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a5a:	f003 0307 	and.w	r3, r3, #7
 8009a5e:	2b05      	cmp	r3, #5
 8009a60:	d826      	bhi.n	8009ab0 <UART_SetConfig+0x1f4>
 8009a62:	a201      	add	r2, pc, #4	@ (adr r2, 8009a68 <UART_SetConfig+0x1ac>)
 8009a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a68:	08009a81 	.word	0x08009a81
 8009a6c:	08009a89 	.word	0x08009a89
 8009a70:	08009a91 	.word	0x08009a91
 8009a74:	08009a99 	.word	0x08009a99
 8009a78:	08009aa1 	.word	0x08009aa1
 8009a7c:	08009aa9 	.word	0x08009aa9
 8009a80:	2300      	movs	r3, #0
 8009a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a86:	e2f0      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009a88:	2304      	movs	r3, #4
 8009a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a8e:	e2ec      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009a90:	2308      	movs	r3, #8
 8009a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a96:	e2e8      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009a98:	2310      	movs	r3, #16
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a9e:	e2e4      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009aa0:	2320      	movs	r3, #32
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aa6:	e2e0      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009aa8:	2340      	movs	r3, #64	@ 0x40
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aae:	e2dc      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009ab0:	2380      	movs	r3, #128	@ 0x80
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab6:	e2d8      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a4f      	ldr	r2, [pc, #316]	@ (8009bfc <UART_SetConfig+0x340>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d130      	bne.n	8009b24 <UART_SetConfig+0x268>
 8009ac2:	4b4c      	ldr	r3, [pc, #304]	@ (8009bf4 <UART_SetConfig+0x338>)
 8009ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ac6:	f003 0307 	and.w	r3, r3, #7
 8009aca:	2b05      	cmp	r3, #5
 8009acc:	d826      	bhi.n	8009b1c <UART_SetConfig+0x260>
 8009ace:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad4 <UART_SetConfig+0x218>)
 8009ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad4:	08009aed 	.word	0x08009aed
 8009ad8:	08009af5 	.word	0x08009af5
 8009adc:	08009afd 	.word	0x08009afd
 8009ae0:	08009b05 	.word	0x08009b05
 8009ae4:	08009b0d 	.word	0x08009b0d
 8009ae8:	08009b15 	.word	0x08009b15
 8009aec:	2300      	movs	r3, #0
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009af2:	e2ba      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009af4:	2304      	movs	r3, #4
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afa:	e2b6      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009afc:	2308      	movs	r3, #8
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b02:	e2b2      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009b04:	2310      	movs	r3, #16
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0a:	e2ae      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009b0c:	2320      	movs	r3, #32
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b12:	e2aa      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009b14:	2340      	movs	r3, #64	@ 0x40
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b1a:	e2a6      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009b1c:	2380      	movs	r3, #128	@ 0x80
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b22:	e2a2      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a35      	ldr	r2, [pc, #212]	@ (8009c00 <UART_SetConfig+0x344>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d130      	bne.n	8009b90 <UART_SetConfig+0x2d4>
 8009b2e:	4b31      	ldr	r3, [pc, #196]	@ (8009bf4 <UART_SetConfig+0x338>)
 8009b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b32:	f003 0307 	and.w	r3, r3, #7
 8009b36:	2b05      	cmp	r3, #5
 8009b38:	d826      	bhi.n	8009b88 <UART_SetConfig+0x2cc>
 8009b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b40 <UART_SetConfig+0x284>)
 8009b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b40:	08009b59 	.word	0x08009b59
 8009b44:	08009b61 	.word	0x08009b61
 8009b48:	08009b69 	.word	0x08009b69
 8009b4c:	08009b71 	.word	0x08009b71
 8009b50:	08009b79 	.word	0x08009b79
 8009b54:	08009b81 	.word	0x08009b81
 8009b58:	2300      	movs	r3, #0
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b5e:	e284      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009b60:	2304      	movs	r3, #4
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b66:	e280      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009b68:	2308      	movs	r3, #8
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b6e:	e27c      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009b70:	2310      	movs	r3, #16
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b76:	e278      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009b78:	2320      	movs	r3, #32
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b7e:	e274      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009b80:	2340      	movs	r3, #64	@ 0x40
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b86:	e270      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009b88:	2380      	movs	r3, #128	@ 0x80
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8e:	e26c      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a1b      	ldr	r2, [pc, #108]	@ (8009c04 <UART_SetConfig+0x348>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d142      	bne.n	8009c20 <UART_SetConfig+0x364>
 8009b9a:	4b16      	ldr	r3, [pc, #88]	@ (8009bf4 <UART_SetConfig+0x338>)
 8009b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b9e:	f003 0307 	and.w	r3, r3, #7
 8009ba2:	2b05      	cmp	r3, #5
 8009ba4:	d838      	bhi.n	8009c18 <UART_SetConfig+0x35c>
 8009ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bac <UART_SetConfig+0x2f0>)
 8009ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bac:	08009bc5 	.word	0x08009bc5
 8009bb0:	08009bcd 	.word	0x08009bcd
 8009bb4:	08009bd5 	.word	0x08009bd5
 8009bb8:	08009bdd 	.word	0x08009bdd
 8009bbc:	08009c09 	.word	0x08009c09
 8009bc0:	08009c11 	.word	0x08009c11
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bca:	e24e      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009bcc:	2304      	movs	r3, #4
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bd2:	e24a      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009bd4:	2308      	movs	r3, #8
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bda:	e246      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009bdc:	2310      	movs	r3, #16
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009be2:	e242      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009be4:	cfff69f3 	.word	0xcfff69f3
 8009be8:	58000c00 	.word	0x58000c00
 8009bec:	11fff4ff 	.word	0x11fff4ff
 8009bf0:	40011000 	.word	0x40011000
 8009bf4:	58024400 	.word	0x58024400
 8009bf8:	40004400 	.word	0x40004400
 8009bfc:	40004800 	.word	0x40004800
 8009c00:	40004c00 	.word	0x40004c00
 8009c04:	40005000 	.word	0x40005000
 8009c08:	2320      	movs	r3, #32
 8009c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c0e:	e22c      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009c10:	2340      	movs	r3, #64	@ 0x40
 8009c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c16:	e228      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009c18:	2380      	movs	r3, #128	@ 0x80
 8009c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c1e:	e224      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4ab1      	ldr	r2, [pc, #708]	@ (8009eec <UART_SetConfig+0x630>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d176      	bne.n	8009d18 <UART_SetConfig+0x45c>
 8009c2a:	4bb1      	ldr	r3, [pc, #708]	@ (8009ef0 <UART_SetConfig+0x634>)
 8009c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c32:	2b28      	cmp	r3, #40	@ 0x28
 8009c34:	d86c      	bhi.n	8009d10 <UART_SetConfig+0x454>
 8009c36:	a201      	add	r2, pc, #4	@ (adr r2, 8009c3c <UART_SetConfig+0x380>)
 8009c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3c:	08009ce1 	.word	0x08009ce1
 8009c40:	08009d11 	.word	0x08009d11
 8009c44:	08009d11 	.word	0x08009d11
 8009c48:	08009d11 	.word	0x08009d11
 8009c4c:	08009d11 	.word	0x08009d11
 8009c50:	08009d11 	.word	0x08009d11
 8009c54:	08009d11 	.word	0x08009d11
 8009c58:	08009d11 	.word	0x08009d11
 8009c5c:	08009ce9 	.word	0x08009ce9
 8009c60:	08009d11 	.word	0x08009d11
 8009c64:	08009d11 	.word	0x08009d11
 8009c68:	08009d11 	.word	0x08009d11
 8009c6c:	08009d11 	.word	0x08009d11
 8009c70:	08009d11 	.word	0x08009d11
 8009c74:	08009d11 	.word	0x08009d11
 8009c78:	08009d11 	.word	0x08009d11
 8009c7c:	08009cf1 	.word	0x08009cf1
 8009c80:	08009d11 	.word	0x08009d11
 8009c84:	08009d11 	.word	0x08009d11
 8009c88:	08009d11 	.word	0x08009d11
 8009c8c:	08009d11 	.word	0x08009d11
 8009c90:	08009d11 	.word	0x08009d11
 8009c94:	08009d11 	.word	0x08009d11
 8009c98:	08009d11 	.word	0x08009d11
 8009c9c:	08009cf9 	.word	0x08009cf9
 8009ca0:	08009d11 	.word	0x08009d11
 8009ca4:	08009d11 	.word	0x08009d11
 8009ca8:	08009d11 	.word	0x08009d11
 8009cac:	08009d11 	.word	0x08009d11
 8009cb0:	08009d11 	.word	0x08009d11
 8009cb4:	08009d11 	.word	0x08009d11
 8009cb8:	08009d11 	.word	0x08009d11
 8009cbc:	08009d01 	.word	0x08009d01
 8009cc0:	08009d11 	.word	0x08009d11
 8009cc4:	08009d11 	.word	0x08009d11
 8009cc8:	08009d11 	.word	0x08009d11
 8009ccc:	08009d11 	.word	0x08009d11
 8009cd0:	08009d11 	.word	0x08009d11
 8009cd4:	08009d11 	.word	0x08009d11
 8009cd8:	08009d11 	.word	0x08009d11
 8009cdc:	08009d09 	.word	0x08009d09
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ce6:	e1c0      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009ce8:	2304      	movs	r3, #4
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cee:	e1bc      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009cf0:	2308      	movs	r3, #8
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cf6:	e1b8      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009cf8:	2310      	movs	r3, #16
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cfe:	e1b4      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009d00:	2320      	movs	r3, #32
 8009d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d06:	e1b0      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009d08:	2340      	movs	r3, #64	@ 0x40
 8009d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d0e:	e1ac      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009d10:	2380      	movs	r3, #128	@ 0x80
 8009d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d16:	e1a8      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a75      	ldr	r2, [pc, #468]	@ (8009ef4 <UART_SetConfig+0x638>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d130      	bne.n	8009d84 <UART_SetConfig+0x4c8>
 8009d22:	4b73      	ldr	r3, [pc, #460]	@ (8009ef0 <UART_SetConfig+0x634>)
 8009d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d26:	f003 0307 	and.w	r3, r3, #7
 8009d2a:	2b05      	cmp	r3, #5
 8009d2c:	d826      	bhi.n	8009d7c <UART_SetConfig+0x4c0>
 8009d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d34 <UART_SetConfig+0x478>)
 8009d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d34:	08009d4d 	.word	0x08009d4d
 8009d38:	08009d55 	.word	0x08009d55
 8009d3c:	08009d5d 	.word	0x08009d5d
 8009d40:	08009d65 	.word	0x08009d65
 8009d44:	08009d6d 	.word	0x08009d6d
 8009d48:	08009d75 	.word	0x08009d75
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d52:	e18a      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009d54:	2304      	movs	r3, #4
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d5a:	e186      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009d5c:	2308      	movs	r3, #8
 8009d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d62:	e182      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009d64:	2310      	movs	r3, #16
 8009d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d6a:	e17e      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009d6c:	2320      	movs	r3, #32
 8009d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d72:	e17a      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009d74:	2340      	movs	r3, #64	@ 0x40
 8009d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d7a:	e176      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009d7c:	2380      	movs	r3, #128	@ 0x80
 8009d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d82:	e172      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a5b      	ldr	r2, [pc, #364]	@ (8009ef8 <UART_SetConfig+0x63c>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d130      	bne.n	8009df0 <UART_SetConfig+0x534>
 8009d8e:	4b58      	ldr	r3, [pc, #352]	@ (8009ef0 <UART_SetConfig+0x634>)
 8009d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d92:	f003 0307 	and.w	r3, r3, #7
 8009d96:	2b05      	cmp	r3, #5
 8009d98:	d826      	bhi.n	8009de8 <UART_SetConfig+0x52c>
 8009d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8009da0 <UART_SetConfig+0x4e4>)
 8009d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da0:	08009db9 	.word	0x08009db9
 8009da4:	08009dc1 	.word	0x08009dc1
 8009da8:	08009dc9 	.word	0x08009dc9
 8009dac:	08009dd1 	.word	0x08009dd1
 8009db0:	08009dd9 	.word	0x08009dd9
 8009db4:	08009de1 	.word	0x08009de1
 8009db8:	2300      	movs	r3, #0
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dbe:	e154      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009dc0:	2304      	movs	r3, #4
 8009dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dc6:	e150      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009dc8:	2308      	movs	r3, #8
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dce:	e14c      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009dd0:	2310      	movs	r3, #16
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd6:	e148      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009dd8:	2320      	movs	r3, #32
 8009dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dde:	e144      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009de0:	2340      	movs	r3, #64	@ 0x40
 8009de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de6:	e140      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009de8:	2380      	movs	r3, #128	@ 0x80
 8009dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dee:	e13c      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a41      	ldr	r2, [pc, #260]	@ (8009efc <UART_SetConfig+0x640>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	f040 8082 	bne.w	8009f00 <UART_SetConfig+0x644>
 8009dfc:	4b3c      	ldr	r3, [pc, #240]	@ (8009ef0 <UART_SetConfig+0x634>)
 8009dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e04:	2b28      	cmp	r3, #40	@ 0x28
 8009e06:	d86d      	bhi.n	8009ee4 <UART_SetConfig+0x628>
 8009e08:	a201      	add	r2, pc, #4	@ (adr r2, 8009e10 <UART_SetConfig+0x554>)
 8009e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0e:	bf00      	nop
 8009e10:	08009eb5 	.word	0x08009eb5
 8009e14:	08009ee5 	.word	0x08009ee5
 8009e18:	08009ee5 	.word	0x08009ee5
 8009e1c:	08009ee5 	.word	0x08009ee5
 8009e20:	08009ee5 	.word	0x08009ee5
 8009e24:	08009ee5 	.word	0x08009ee5
 8009e28:	08009ee5 	.word	0x08009ee5
 8009e2c:	08009ee5 	.word	0x08009ee5
 8009e30:	08009ebd 	.word	0x08009ebd
 8009e34:	08009ee5 	.word	0x08009ee5
 8009e38:	08009ee5 	.word	0x08009ee5
 8009e3c:	08009ee5 	.word	0x08009ee5
 8009e40:	08009ee5 	.word	0x08009ee5
 8009e44:	08009ee5 	.word	0x08009ee5
 8009e48:	08009ee5 	.word	0x08009ee5
 8009e4c:	08009ee5 	.word	0x08009ee5
 8009e50:	08009ec5 	.word	0x08009ec5
 8009e54:	08009ee5 	.word	0x08009ee5
 8009e58:	08009ee5 	.word	0x08009ee5
 8009e5c:	08009ee5 	.word	0x08009ee5
 8009e60:	08009ee5 	.word	0x08009ee5
 8009e64:	08009ee5 	.word	0x08009ee5
 8009e68:	08009ee5 	.word	0x08009ee5
 8009e6c:	08009ee5 	.word	0x08009ee5
 8009e70:	08009ecd 	.word	0x08009ecd
 8009e74:	08009ee5 	.word	0x08009ee5
 8009e78:	08009ee5 	.word	0x08009ee5
 8009e7c:	08009ee5 	.word	0x08009ee5
 8009e80:	08009ee5 	.word	0x08009ee5
 8009e84:	08009ee5 	.word	0x08009ee5
 8009e88:	08009ee5 	.word	0x08009ee5
 8009e8c:	08009ee5 	.word	0x08009ee5
 8009e90:	08009ed5 	.word	0x08009ed5
 8009e94:	08009ee5 	.word	0x08009ee5
 8009e98:	08009ee5 	.word	0x08009ee5
 8009e9c:	08009ee5 	.word	0x08009ee5
 8009ea0:	08009ee5 	.word	0x08009ee5
 8009ea4:	08009ee5 	.word	0x08009ee5
 8009ea8:	08009ee5 	.word	0x08009ee5
 8009eac:	08009ee5 	.word	0x08009ee5
 8009eb0:	08009edd 	.word	0x08009edd
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eba:	e0d6      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009ebc:	2304      	movs	r3, #4
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ec2:	e0d2      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009ec4:	2308      	movs	r3, #8
 8009ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eca:	e0ce      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009ecc:	2310      	movs	r3, #16
 8009ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ed2:	e0ca      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009ed4:	2320      	movs	r3, #32
 8009ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eda:	e0c6      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009edc:	2340      	movs	r3, #64	@ 0x40
 8009ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ee2:	e0c2      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009ee4:	2380      	movs	r3, #128	@ 0x80
 8009ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eea:	e0be      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009eec:	40011400 	.word	0x40011400
 8009ef0:	58024400 	.word	0x58024400
 8009ef4:	40007800 	.word	0x40007800
 8009ef8:	40007c00 	.word	0x40007c00
 8009efc:	40011800 	.word	0x40011800
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4aad      	ldr	r2, [pc, #692]	@ (800a1bc <UART_SetConfig+0x900>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d176      	bne.n	8009ff8 <UART_SetConfig+0x73c>
 8009f0a:	4bad      	ldr	r3, [pc, #692]	@ (800a1c0 <UART_SetConfig+0x904>)
 8009f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f12:	2b28      	cmp	r3, #40	@ 0x28
 8009f14:	d86c      	bhi.n	8009ff0 <UART_SetConfig+0x734>
 8009f16:	a201      	add	r2, pc, #4	@ (adr r2, 8009f1c <UART_SetConfig+0x660>)
 8009f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1c:	08009fc1 	.word	0x08009fc1
 8009f20:	08009ff1 	.word	0x08009ff1
 8009f24:	08009ff1 	.word	0x08009ff1
 8009f28:	08009ff1 	.word	0x08009ff1
 8009f2c:	08009ff1 	.word	0x08009ff1
 8009f30:	08009ff1 	.word	0x08009ff1
 8009f34:	08009ff1 	.word	0x08009ff1
 8009f38:	08009ff1 	.word	0x08009ff1
 8009f3c:	08009fc9 	.word	0x08009fc9
 8009f40:	08009ff1 	.word	0x08009ff1
 8009f44:	08009ff1 	.word	0x08009ff1
 8009f48:	08009ff1 	.word	0x08009ff1
 8009f4c:	08009ff1 	.word	0x08009ff1
 8009f50:	08009ff1 	.word	0x08009ff1
 8009f54:	08009ff1 	.word	0x08009ff1
 8009f58:	08009ff1 	.word	0x08009ff1
 8009f5c:	08009fd1 	.word	0x08009fd1
 8009f60:	08009ff1 	.word	0x08009ff1
 8009f64:	08009ff1 	.word	0x08009ff1
 8009f68:	08009ff1 	.word	0x08009ff1
 8009f6c:	08009ff1 	.word	0x08009ff1
 8009f70:	08009ff1 	.word	0x08009ff1
 8009f74:	08009ff1 	.word	0x08009ff1
 8009f78:	08009ff1 	.word	0x08009ff1
 8009f7c:	08009fd9 	.word	0x08009fd9
 8009f80:	08009ff1 	.word	0x08009ff1
 8009f84:	08009ff1 	.word	0x08009ff1
 8009f88:	08009ff1 	.word	0x08009ff1
 8009f8c:	08009ff1 	.word	0x08009ff1
 8009f90:	08009ff1 	.word	0x08009ff1
 8009f94:	08009ff1 	.word	0x08009ff1
 8009f98:	08009ff1 	.word	0x08009ff1
 8009f9c:	08009fe1 	.word	0x08009fe1
 8009fa0:	08009ff1 	.word	0x08009ff1
 8009fa4:	08009ff1 	.word	0x08009ff1
 8009fa8:	08009ff1 	.word	0x08009ff1
 8009fac:	08009ff1 	.word	0x08009ff1
 8009fb0:	08009ff1 	.word	0x08009ff1
 8009fb4:	08009ff1 	.word	0x08009ff1
 8009fb8:	08009ff1 	.word	0x08009ff1
 8009fbc:	08009fe9 	.word	0x08009fe9
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fc6:	e050      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009fc8:	2304      	movs	r3, #4
 8009fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fce:	e04c      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009fd0:	2308      	movs	r3, #8
 8009fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fd6:	e048      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009fd8:	2310      	movs	r3, #16
 8009fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fde:	e044      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009fe0:	2320      	movs	r3, #32
 8009fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fe6:	e040      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009fe8:	2340      	movs	r3, #64	@ 0x40
 8009fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fee:	e03c      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009ff0:	2380      	movs	r3, #128	@ 0x80
 8009ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ff6:	e038      	b.n	800a06a <UART_SetConfig+0x7ae>
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a71      	ldr	r2, [pc, #452]	@ (800a1c4 <UART_SetConfig+0x908>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d130      	bne.n	800a064 <UART_SetConfig+0x7a8>
 800a002:	4b6f      	ldr	r3, [pc, #444]	@ (800a1c0 <UART_SetConfig+0x904>)
 800a004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a006:	f003 0307 	and.w	r3, r3, #7
 800a00a:	2b05      	cmp	r3, #5
 800a00c:	d826      	bhi.n	800a05c <UART_SetConfig+0x7a0>
 800a00e:	a201      	add	r2, pc, #4	@ (adr r2, 800a014 <UART_SetConfig+0x758>)
 800a010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a014:	0800a02d 	.word	0x0800a02d
 800a018:	0800a035 	.word	0x0800a035
 800a01c:	0800a03d 	.word	0x0800a03d
 800a020:	0800a045 	.word	0x0800a045
 800a024:	0800a04d 	.word	0x0800a04d
 800a028:	0800a055 	.word	0x0800a055
 800a02c:	2302      	movs	r3, #2
 800a02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a032:	e01a      	b.n	800a06a <UART_SetConfig+0x7ae>
 800a034:	2304      	movs	r3, #4
 800a036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a03a:	e016      	b.n	800a06a <UART_SetConfig+0x7ae>
 800a03c:	2308      	movs	r3, #8
 800a03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a042:	e012      	b.n	800a06a <UART_SetConfig+0x7ae>
 800a044:	2310      	movs	r3, #16
 800a046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a04a:	e00e      	b.n	800a06a <UART_SetConfig+0x7ae>
 800a04c:	2320      	movs	r3, #32
 800a04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a052:	e00a      	b.n	800a06a <UART_SetConfig+0x7ae>
 800a054:	2340      	movs	r3, #64	@ 0x40
 800a056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a05a:	e006      	b.n	800a06a <UART_SetConfig+0x7ae>
 800a05c:	2380      	movs	r3, #128	@ 0x80
 800a05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a062:	e002      	b.n	800a06a <UART_SetConfig+0x7ae>
 800a064:	2380      	movs	r3, #128	@ 0x80
 800a066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a55      	ldr	r2, [pc, #340]	@ (800a1c4 <UART_SetConfig+0x908>)
 800a070:	4293      	cmp	r3, r2
 800a072:	f040 80f8 	bne.w	800a266 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a076:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a07a:	2b20      	cmp	r3, #32
 800a07c:	dc46      	bgt.n	800a10c <UART_SetConfig+0x850>
 800a07e:	2b02      	cmp	r3, #2
 800a080:	db75      	blt.n	800a16e <UART_SetConfig+0x8b2>
 800a082:	3b02      	subs	r3, #2
 800a084:	2b1e      	cmp	r3, #30
 800a086:	d872      	bhi.n	800a16e <UART_SetConfig+0x8b2>
 800a088:	a201      	add	r2, pc, #4	@ (adr r2, 800a090 <UART_SetConfig+0x7d4>)
 800a08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08e:	bf00      	nop
 800a090:	0800a113 	.word	0x0800a113
 800a094:	0800a16f 	.word	0x0800a16f
 800a098:	0800a11b 	.word	0x0800a11b
 800a09c:	0800a16f 	.word	0x0800a16f
 800a0a0:	0800a16f 	.word	0x0800a16f
 800a0a4:	0800a16f 	.word	0x0800a16f
 800a0a8:	0800a12b 	.word	0x0800a12b
 800a0ac:	0800a16f 	.word	0x0800a16f
 800a0b0:	0800a16f 	.word	0x0800a16f
 800a0b4:	0800a16f 	.word	0x0800a16f
 800a0b8:	0800a16f 	.word	0x0800a16f
 800a0bc:	0800a16f 	.word	0x0800a16f
 800a0c0:	0800a16f 	.word	0x0800a16f
 800a0c4:	0800a16f 	.word	0x0800a16f
 800a0c8:	0800a13b 	.word	0x0800a13b
 800a0cc:	0800a16f 	.word	0x0800a16f
 800a0d0:	0800a16f 	.word	0x0800a16f
 800a0d4:	0800a16f 	.word	0x0800a16f
 800a0d8:	0800a16f 	.word	0x0800a16f
 800a0dc:	0800a16f 	.word	0x0800a16f
 800a0e0:	0800a16f 	.word	0x0800a16f
 800a0e4:	0800a16f 	.word	0x0800a16f
 800a0e8:	0800a16f 	.word	0x0800a16f
 800a0ec:	0800a16f 	.word	0x0800a16f
 800a0f0:	0800a16f 	.word	0x0800a16f
 800a0f4:	0800a16f 	.word	0x0800a16f
 800a0f8:	0800a16f 	.word	0x0800a16f
 800a0fc:	0800a16f 	.word	0x0800a16f
 800a100:	0800a16f 	.word	0x0800a16f
 800a104:	0800a16f 	.word	0x0800a16f
 800a108:	0800a161 	.word	0x0800a161
 800a10c:	2b40      	cmp	r3, #64	@ 0x40
 800a10e:	d02a      	beq.n	800a166 <UART_SetConfig+0x8aa>
 800a110:	e02d      	b.n	800a16e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a112:	f7fe fd6b 	bl	8008bec <HAL_RCCEx_GetD3PCLK1Freq>
 800a116:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a118:	e02f      	b.n	800a17a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a11a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fe fd7a 	bl	8008c18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a128:	e027      	b.n	800a17a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a12a:	f107 0318 	add.w	r3, r7, #24
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fe fec6 	bl	8008ec0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a138:	e01f      	b.n	800a17a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a13a:	4b21      	ldr	r3, [pc, #132]	@ (800a1c0 <UART_SetConfig+0x904>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 0320 	and.w	r3, r3, #32
 800a142:	2b00      	cmp	r3, #0
 800a144:	d009      	beq.n	800a15a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a146:	4b1e      	ldr	r3, [pc, #120]	@ (800a1c0 <UART_SetConfig+0x904>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	08db      	lsrs	r3, r3, #3
 800a14c:	f003 0303 	and.w	r3, r3, #3
 800a150:	4a1d      	ldr	r2, [pc, #116]	@ (800a1c8 <UART_SetConfig+0x90c>)
 800a152:	fa22 f303 	lsr.w	r3, r2, r3
 800a156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a158:	e00f      	b.n	800a17a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a15a:	4b1b      	ldr	r3, [pc, #108]	@ (800a1c8 <UART_SetConfig+0x90c>)
 800a15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a15e:	e00c      	b.n	800a17a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a160:	4b1a      	ldr	r3, [pc, #104]	@ (800a1cc <UART_SetConfig+0x910>)
 800a162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a164:	e009      	b.n	800a17a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a16c:	e005      	b.n	800a17a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a16e:	2300      	movs	r3, #0
 800a170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a178:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a17a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f000 81ee 	beq.w	800a55e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a186:	4a12      	ldr	r2, [pc, #72]	@ (800a1d0 <UART_SetConfig+0x914>)
 800a188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a18c:	461a      	mov	r2, r3
 800a18e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a190:	fbb3 f3f2 	udiv	r3, r3, r2
 800a194:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	685a      	ldr	r2, [r3, #4]
 800a19a:	4613      	mov	r3, r2
 800a19c:	005b      	lsls	r3, r3, #1
 800a19e:	4413      	add	r3, r2
 800a1a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d305      	bcc.n	800a1b2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d910      	bls.n	800a1d4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a1b8:	e1d1      	b.n	800a55e <UART_SetConfig+0xca2>
 800a1ba:	bf00      	nop
 800a1bc:	40011c00 	.word	0x40011c00
 800a1c0:	58024400 	.word	0x58024400
 800a1c4:	58000c00 	.word	0x58000c00
 800a1c8:	03d09000 	.word	0x03d09000
 800a1cc:	003d0900 	.word	0x003d0900
 800a1d0:	0800b8b0 	.word	0x0800b8b0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	60bb      	str	r3, [r7, #8]
 800a1da:	60fa      	str	r2, [r7, #12]
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1e0:	4ac0      	ldr	r2, [pc, #768]	@ (800a4e4 <UART_SetConfig+0xc28>)
 800a1e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	603b      	str	r3, [r7, #0]
 800a1ec:	607a      	str	r2, [r7, #4]
 800a1ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a1f6:	f7f6 f8e3 	bl	80003c0 <__aeabi_uldivmod>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	4610      	mov	r0, r2
 800a200:	4619      	mov	r1, r3
 800a202:	f04f 0200 	mov.w	r2, #0
 800a206:	f04f 0300 	mov.w	r3, #0
 800a20a:	020b      	lsls	r3, r1, #8
 800a20c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a210:	0202      	lsls	r2, r0, #8
 800a212:	6979      	ldr	r1, [r7, #20]
 800a214:	6849      	ldr	r1, [r1, #4]
 800a216:	0849      	lsrs	r1, r1, #1
 800a218:	2000      	movs	r0, #0
 800a21a:	460c      	mov	r4, r1
 800a21c:	4605      	mov	r5, r0
 800a21e:	eb12 0804 	adds.w	r8, r2, r4
 800a222:	eb43 0905 	adc.w	r9, r3, r5
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	469a      	mov	sl, r3
 800a22e:	4693      	mov	fp, r2
 800a230:	4652      	mov	r2, sl
 800a232:	465b      	mov	r3, fp
 800a234:	4640      	mov	r0, r8
 800a236:	4649      	mov	r1, r9
 800a238:	f7f6 f8c2 	bl	80003c0 <__aeabi_uldivmod>
 800a23c:	4602      	mov	r2, r0
 800a23e:	460b      	mov	r3, r1
 800a240:	4613      	mov	r3, r2
 800a242:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a246:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a24a:	d308      	bcc.n	800a25e <UART_SetConfig+0x9a2>
 800a24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a24e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a252:	d204      	bcs.n	800a25e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a25a:	60da      	str	r2, [r3, #12]
 800a25c:	e17f      	b.n	800a55e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a264:	e17b      	b.n	800a55e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	69db      	ldr	r3, [r3, #28]
 800a26a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a26e:	f040 80bd 	bne.w	800a3ec <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a272:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a276:	2b20      	cmp	r3, #32
 800a278:	dc48      	bgt.n	800a30c <UART_SetConfig+0xa50>
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	db7b      	blt.n	800a376 <UART_SetConfig+0xaba>
 800a27e:	2b20      	cmp	r3, #32
 800a280:	d879      	bhi.n	800a376 <UART_SetConfig+0xaba>
 800a282:	a201      	add	r2, pc, #4	@ (adr r2, 800a288 <UART_SetConfig+0x9cc>)
 800a284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a288:	0800a313 	.word	0x0800a313
 800a28c:	0800a31b 	.word	0x0800a31b
 800a290:	0800a377 	.word	0x0800a377
 800a294:	0800a377 	.word	0x0800a377
 800a298:	0800a323 	.word	0x0800a323
 800a29c:	0800a377 	.word	0x0800a377
 800a2a0:	0800a377 	.word	0x0800a377
 800a2a4:	0800a377 	.word	0x0800a377
 800a2a8:	0800a333 	.word	0x0800a333
 800a2ac:	0800a377 	.word	0x0800a377
 800a2b0:	0800a377 	.word	0x0800a377
 800a2b4:	0800a377 	.word	0x0800a377
 800a2b8:	0800a377 	.word	0x0800a377
 800a2bc:	0800a377 	.word	0x0800a377
 800a2c0:	0800a377 	.word	0x0800a377
 800a2c4:	0800a377 	.word	0x0800a377
 800a2c8:	0800a343 	.word	0x0800a343
 800a2cc:	0800a377 	.word	0x0800a377
 800a2d0:	0800a377 	.word	0x0800a377
 800a2d4:	0800a377 	.word	0x0800a377
 800a2d8:	0800a377 	.word	0x0800a377
 800a2dc:	0800a377 	.word	0x0800a377
 800a2e0:	0800a377 	.word	0x0800a377
 800a2e4:	0800a377 	.word	0x0800a377
 800a2e8:	0800a377 	.word	0x0800a377
 800a2ec:	0800a377 	.word	0x0800a377
 800a2f0:	0800a377 	.word	0x0800a377
 800a2f4:	0800a377 	.word	0x0800a377
 800a2f8:	0800a377 	.word	0x0800a377
 800a2fc:	0800a377 	.word	0x0800a377
 800a300:	0800a377 	.word	0x0800a377
 800a304:	0800a377 	.word	0x0800a377
 800a308:	0800a369 	.word	0x0800a369
 800a30c:	2b40      	cmp	r3, #64	@ 0x40
 800a30e:	d02e      	beq.n	800a36e <UART_SetConfig+0xab2>
 800a310:	e031      	b.n	800a376 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a312:	f7fc fdcd 	bl	8006eb0 <HAL_RCC_GetPCLK1Freq>
 800a316:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a318:	e033      	b.n	800a382 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a31a:	f7fc fddf 	bl	8006edc <HAL_RCC_GetPCLK2Freq>
 800a31e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a320:	e02f      	b.n	800a382 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a326:	4618      	mov	r0, r3
 800a328:	f7fe fc76 	bl	8008c18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a330:	e027      	b.n	800a382 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a332:	f107 0318 	add.w	r3, r7, #24
 800a336:	4618      	mov	r0, r3
 800a338:	f7fe fdc2 	bl	8008ec0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a340:	e01f      	b.n	800a382 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a342:	4b69      	ldr	r3, [pc, #420]	@ (800a4e8 <UART_SetConfig+0xc2c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 0320 	and.w	r3, r3, #32
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d009      	beq.n	800a362 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a34e:	4b66      	ldr	r3, [pc, #408]	@ (800a4e8 <UART_SetConfig+0xc2c>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	08db      	lsrs	r3, r3, #3
 800a354:	f003 0303 	and.w	r3, r3, #3
 800a358:	4a64      	ldr	r2, [pc, #400]	@ (800a4ec <UART_SetConfig+0xc30>)
 800a35a:	fa22 f303 	lsr.w	r3, r2, r3
 800a35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a360:	e00f      	b.n	800a382 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a362:	4b62      	ldr	r3, [pc, #392]	@ (800a4ec <UART_SetConfig+0xc30>)
 800a364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a366:	e00c      	b.n	800a382 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a368:	4b61      	ldr	r3, [pc, #388]	@ (800a4f0 <UART_SetConfig+0xc34>)
 800a36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a36c:	e009      	b.n	800a382 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a36e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a374:	e005      	b.n	800a382 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a376:	2300      	movs	r3, #0
 800a378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a380:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 80ea 	beq.w	800a55e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a38e:	4a55      	ldr	r2, [pc, #340]	@ (800a4e4 <UART_SetConfig+0xc28>)
 800a390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a394:	461a      	mov	r2, r3
 800a396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a398:	fbb3 f3f2 	udiv	r3, r3, r2
 800a39c:	005a      	lsls	r2, r3, #1
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	085b      	lsrs	r3, r3, #1
 800a3a4:	441a      	add	r2, r3
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b2:	2b0f      	cmp	r3, #15
 800a3b4:	d916      	bls.n	800a3e4 <UART_SetConfig+0xb28>
 800a3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3bc:	d212      	bcs.n	800a3e4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	f023 030f 	bic.w	r3, r3, #15
 800a3c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ca:	085b      	lsrs	r3, r3, #1
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	f003 0307 	and.w	r3, r3, #7
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a3e0:	60da      	str	r2, [r3, #12]
 800a3e2:	e0bc      	b.n	800a55e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a3ea:	e0b8      	b.n	800a55e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a3f0:	2b20      	cmp	r3, #32
 800a3f2:	dc4b      	bgt.n	800a48c <UART_SetConfig+0xbd0>
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f2c0 8087 	blt.w	800a508 <UART_SetConfig+0xc4c>
 800a3fa:	2b20      	cmp	r3, #32
 800a3fc:	f200 8084 	bhi.w	800a508 <UART_SetConfig+0xc4c>
 800a400:	a201      	add	r2, pc, #4	@ (adr r2, 800a408 <UART_SetConfig+0xb4c>)
 800a402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a406:	bf00      	nop
 800a408:	0800a493 	.word	0x0800a493
 800a40c:	0800a49b 	.word	0x0800a49b
 800a410:	0800a509 	.word	0x0800a509
 800a414:	0800a509 	.word	0x0800a509
 800a418:	0800a4a3 	.word	0x0800a4a3
 800a41c:	0800a509 	.word	0x0800a509
 800a420:	0800a509 	.word	0x0800a509
 800a424:	0800a509 	.word	0x0800a509
 800a428:	0800a4b3 	.word	0x0800a4b3
 800a42c:	0800a509 	.word	0x0800a509
 800a430:	0800a509 	.word	0x0800a509
 800a434:	0800a509 	.word	0x0800a509
 800a438:	0800a509 	.word	0x0800a509
 800a43c:	0800a509 	.word	0x0800a509
 800a440:	0800a509 	.word	0x0800a509
 800a444:	0800a509 	.word	0x0800a509
 800a448:	0800a4c3 	.word	0x0800a4c3
 800a44c:	0800a509 	.word	0x0800a509
 800a450:	0800a509 	.word	0x0800a509
 800a454:	0800a509 	.word	0x0800a509
 800a458:	0800a509 	.word	0x0800a509
 800a45c:	0800a509 	.word	0x0800a509
 800a460:	0800a509 	.word	0x0800a509
 800a464:	0800a509 	.word	0x0800a509
 800a468:	0800a509 	.word	0x0800a509
 800a46c:	0800a509 	.word	0x0800a509
 800a470:	0800a509 	.word	0x0800a509
 800a474:	0800a509 	.word	0x0800a509
 800a478:	0800a509 	.word	0x0800a509
 800a47c:	0800a509 	.word	0x0800a509
 800a480:	0800a509 	.word	0x0800a509
 800a484:	0800a509 	.word	0x0800a509
 800a488:	0800a4fb 	.word	0x0800a4fb
 800a48c:	2b40      	cmp	r3, #64	@ 0x40
 800a48e:	d037      	beq.n	800a500 <UART_SetConfig+0xc44>
 800a490:	e03a      	b.n	800a508 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a492:	f7fc fd0d 	bl	8006eb0 <HAL_RCC_GetPCLK1Freq>
 800a496:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a498:	e03c      	b.n	800a514 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a49a:	f7fc fd1f 	bl	8006edc <HAL_RCC_GetPCLK2Freq>
 800a49e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4a0:	e038      	b.n	800a514 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fe fbb6 	bl	8008c18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4b0:	e030      	b.n	800a514 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4b2:	f107 0318 	add.w	r3, r7, #24
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fe fd02 	bl	8008ec0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4c0:	e028      	b.n	800a514 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4c2:	4b09      	ldr	r3, [pc, #36]	@ (800a4e8 <UART_SetConfig+0xc2c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f003 0320 	and.w	r3, r3, #32
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d012      	beq.n	800a4f4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4ce:	4b06      	ldr	r3, [pc, #24]	@ (800a4e8 <UART_SetConfig+0xc2c>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	08db      	lsrs	r3, r3, #3
 800a4d4:	f003 0303 	and.w	r3, r3, #3
 800a4d8:	4a04      	ldr	r2, [pc, #16]	@ (800a4ec <UART_SetConfig+0xc30>)
 800a4da:	fa22 f303 	lsr.w	r3, r2, r3
 800a4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4e0:	e018      	b.n	800a514 <UART_SetConfig+0xc58>
 800a4e2:	bf00      	nop
 800a4e4:	0800b8b0 	.word	0x0800b8b0
 800a4e8:	58024400 	.word	0x58024400
 800a4ec:	03d09000 	.word	0x03d09000
 800a4f0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a4f4:	4b24      	ldr	r3, [pc, #144]	@ (800a588 <UART_SetConfig+0xccc>)
 800a4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f8:	e00c      	b.n	800a514 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4fa:	4b24      	ldr	r3, [pc, #144]	@ (800a58c <UART_SetConfig+0xcd0>)
 800a4fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4fe:	e009      	b.n	800a514 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a500:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a506:	e005      	b.n	800a514 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a508:	2300      	movs	r3, #0
 800a50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a512:	bf00      	nop
    }

    if (pclk != 0U)
 800a514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a516:	2b00      	cmp	r3, #0
 800a518:	d021      	beq.n	800a55e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a51e:	4a1c      	ldr	r2, [pc, #112]	@ (800a590 <UART_SetConfig+0xcd4>)
 800a520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a524:	461a      	mov	r2, r3
 800a526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a528:	fbb3 f2f2 	udiv	r2, r3, r2
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	085b      	lsrs	r3, r3, #1
 800a532:	441a      	add	r2, r3
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	fbb2 f3f3 	udiv	r3, r2, r3
 800a53c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a540:	2b0f      	cmp	r3, #15
 800a542:	d909      	bls.n	800a558 <UART_SetConfig+0xc9c>
 800a544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a54a:	d205      	bcs.n	800a558 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54e:	b29a      	uxth	r2, r3
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	60da      	str	r2, [r3, #12]
 800a556:	e002      	b.n	800a55e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2201      	movs	r2, #1
 800a562:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	2201      	movs	r2, #1
 800a56a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	2200      	movs	r2, #0
 800a572:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	2200      	movs	r2, #0
 800a578:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a57a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3748      	adds	r7, #72	@ 0x48
 800a582:	46bd      	mov	sp, r7
 800a584:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a588:	03d09000 	.word	0x03d09000
 800a58c:	003d0900 	.word	0x003d0900
 800a590:	0800b8b0 	.word	0x0800b8b0

0800a594 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a0:	f003 0308 	and.w	r3, r3, #8
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00a      	beq.n	800a5be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	430a      	orrs	r2, r1
 800a5bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5c2:	f003 0301 	and.w	r3, r3, #1
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	430a      	orrs	r2, r1
 800a5de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e4:	f003 0302 	and.w	r3, r3, #2
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00a      	beq.n	800a602 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a606:	f003 0304 	and.w	r3, r3, #4
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00a      	beq.n	800a624 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	430a      	orrs	r2, r1
 800a622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a628:	f003 0310 	and.w	r3, r3, #16
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00a      	beq.n	800a646 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a64a:	f003 0320 	and.w	r3, r3, #32
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00a      	beq.n	800a668 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	430a      	orrs	r2, r1
 800a666:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a66c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a670:	2b00      	cmp	r3, #0
 800a672:	d01a      	beq.n	800a6aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	430a      	orrs	r2, r1
 800a688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a68e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a692:	d10a      	bne.n	800a6aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	430a      	orrs	r2, r1
 800a6a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00a      	beq.n	800a6cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	430a      	orrs	r2, r1
 800a6ca:	605a      	str	r2, [r3, #4]
  }
}
 800a6cc:	bf00      	nop
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b098      	sub	sp, #96	@ 0x60
 800a6dc:	af02      	add	r7, sp, #8
 800a6de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a6e8:	f7f8 f80c 	bl	8002704 <HAL_GetTick>
 800a6ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 0308 	and.w	r3, r3, #8
 800a6f8:	2b08      	cmp	r3, #8
 800a6fa:	d12f      	bne.n	800a75c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a700:	9300      	str	r3, [sp, #0]
 800a702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a704:	2200      	movs	r2, #0
 800a706:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 f88e 	bl	800a82c <UART_WaitOnFlagUntilTimeout>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d022      	beq.n	800a75c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a71e:	e853 3f00 	ldrex	r3, [r3]
 800a722:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a726:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a72a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	461a      	mov	r2, r3
 800a732:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a734:	647b      	str	r3, [r7, #68]	@ 0x44
 800a736:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a738:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a73a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a73c:	e841 2300 	strex	r3, r2, [r1]
 800a740:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1e6      	bne.n	800a716 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2220      	movs	r2, #32
 800a74c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a758:	2303      	movs	r3, #3
 800a75a:	e063      	b.n	800a824 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 0304 	and.w	r3, r3, #4
 800a766:	2b04      	cmp	r3, #4
 800a768:	d149      	bne.n	800a7fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a76a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a772:	2200      	movs	r2, #0
 800a774:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 f857 	bl	800a82c <UART_WaitOnFlagUntilTimeout>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d03c      	beq.n	800a7fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a78c:	e853 3f00 	ldrex	r3, [r3]
 800a790:	623b      	str	r3, [r7, #32]
   return(result);
 800a792:	6a3b      	ldr	r3, [r7, #32]
 800a794:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a798:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7aa:	e841 2300 	strex	r3, r2, [r1]
 800a7ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1e6      	bne.n	800a784 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	3308      	adds	r3, #8
 800a7bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	e853 3f00 	ldrex	r3, [r3]
 800a7c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f023 0301 	bic.w	r3, r3, #1
 800a7cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	3308      	adds	r3, #8
 800a7d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7d6:	61fa      	str	r2, [r7, #28]
 800a7d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7da:	69b9      	ldr	r1, [r7, #24]
 800a7dc:	69fa      	ldr	r2, [r7, #28]
 800a7de:	e841 2300 	strex	r3, r2, [r1]
 800a7e2:	617b      	str	r3, [r7, #20]
   return(result);
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1e5      	bne.n	800a7b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2220      	movs	r2, #32
 800a7ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	e012      	b.n	800a824 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2220      	movs	r2, #32
 800a802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2220      	movs	r2, #32
 800a80a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3758      	adds	r7, #88	@ 0x58
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	603b      	str	r3, [r7, #0]
 800a838:	4613      	mov	r3, r2
 800a83a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a83c:	e04f      	b.n	800a8de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a844:	d04b      	beq.n	800a8de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a846:	f7f7 ff5d 	bl	8002704 <HAL_GetTick>
 800a84a:	4602      	mov	r2, r0
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	69ba      	ldr	r2, [r7, #24]
 800a852:	429a      	cmp	r2, r3
 800a854:	d302      	bcc.n	800a85c <UART_WaitOnFlagUntilTimeout+0x30>
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a85c:	2303      	movs	r3, #3
 800a85e:	e04e      	b.n	800a8fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f003 0304 	and.w	r3, r3, #4
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d037      	beq.n	800a8de <UART_WaitOnFlagUntilTimeout+0xb2>
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	2b80      	cmp	r3, #128	@ 0x80
 800a872:	d034      	beq.n	800a8de <UART_WaitOnFlagUntilTimeout+0xb2>
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	2b40      	cmp	r3, #64	@ 0x40
 800a878:	d031      	beq.n	800a8de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	69db      	ldr	r3, [r3, #28]
 800a880:	f003 0308 	and.w	r3, r3, #8
 800a884:	2b08      	cmp	r3, #8
 800a886:	d110      	bne.n	800a8aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2208      	movs	r2, #8
 800a88e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f000 f839 	bl	800a908 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2208      	movs	r2, #8
 800a89a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e029      	b.n	800a8fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	69db      	ldr	r3, [r3, #28]
 800a8b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8b8:	d111      	bne.n	800a8de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a8c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f000 f81f 	bl	800a908 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2220      	movs	r2, #32
 800a8ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	e00f      	b.n	800a8fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	69da      	ldr	r2, [r3, #28]
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	4013      	ands	r3, r2
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	bf0c      	ite	eq
 800a8ee:	2301      	moveq	r3, #1
 800a8f0:	2300      	movne	r3, #0
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	79fb      	ldrb	r3, [r7, #7]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d0a0      	beq.n	800a83e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
	...

0800a908 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a908:	b480      	push	{r7}
 800a90a:	b095      	sub	sp, #84	@ 0x54
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a918:	e853 3f00 	ldrex	r3, [r3]
 800a91c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a920:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a924:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	461a      	mov	r2, r3
 800a92c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a92e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a930:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a932:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a934:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a936:	e841 2300 	strex	r3, r2, [r1]
 800a93a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1e6      	bne.n	800a910 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	3308      	adds	r3, #8
 800a948:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94a:	6a3b      	ldr	r3, [r7, #32]
 800a94c:	e853 3f00 	ldrex	r3, [r3]
 800a950:	61fb      	str	r3, [r7, #28]
   return(result);
 800a952:	69fa      	ldr	r2, [r7, #28]
 800a954:	4b1e      	ldr	r3, [pc, #120]	@ (800a9d0 <UART_EndRxTransfer+0xc8>)
 800a956:	4013      	ands	r3, r2
 800a958:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	3308      	adds	r3, #8
 800a960:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a962:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a964:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a968:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a96a:	e841 2300 	strex	r3, r2, [r1]
 800a96e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1e5      	bne.n	800a942 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d118      	bne.n	800a9b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	e853 3f00 	ldrex	r3, [r3]
 800a98a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	f023 0310 	bic.w	r3, r3, #16
 800a992:	647b      	str	r3, [r7, #68]	@ 0x44
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	461a      	mov	r2, r3
 800a99a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a99c:	61bb      	str	r3, [r7, #24]
 800a99e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a0:	6979      	ldr	r1, [r7, #20]
 800a9a2:	69ba      	ldr	r2, [r7, #24]
 800a9a4:	e841 2300 	strex	r3, r2, [r1]
 800a9a8:	613b      	str	r3, [r7, #16]
   return(result);
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d1e6      	bne.n	800a97e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2220      	movs	r2, #32
 800a9b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a9c4:	bf00      	nop
 800a9c6:	3754      	adds	r7, #84	@ 0x54
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	effffffe 	.word	0xeffffffe

0800a9d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d101      	bne.n	800a9ea <HAL_UARTEx_DisableFifoMode+0x16>
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	e027      	b.n	800aa3a <HAL_UARTEx_DisableFifoMode+0x66>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2224      	movs	r2, #36	@ 0x24
 800a9f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f022 0201 	bic.w	r2, r2, #1
 800aa10:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aa18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2220      	movs	r2, #32
 800aa2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3714      	adds	r7, #20
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b084      	sub	sp, #16
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
 800aa4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d101      	bne.n	800aa5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aa5a:	2302      	movs	r3, #2
 800aa5c:	e02d      	b.n	800aaba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2201      	movs	r2, #1
 800aa62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2224      	movs	r2, #36	@ 0x24
 800aa6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f022 0201 	bic.w	r2, r2, #1
 800aa84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	683a      	ldr	r2, [r7, #0]
 800aa96:	430a      	orrs	r2, r1
 800aa98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 f850 	bl	800ab40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2220      	movs	r2, #32
 800aaac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b084      	sub	sp, #16
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d101      	bne.n	800aada <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aad6:	2302      	movs	r3, #2
 800aad8:	e02d      	b.n	800ab36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2224      	movs	r2, #36	@ 0x24
 800aae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f022 0201 	bic.w	r2, r2, #1
 800ab00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	430a      	orrs	r2, r1
 800ab14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f812 	bl	800ab40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2220      	movs	r2, #32
 800ab28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
	...

0800ab40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d108      	bne.n	800ab62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2201      	movs	r2, #1
 800ab54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ab60:	e031      	b.n	800abc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ab62:	2310      	movs	r3, #16
 800ab64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ab66:	2310      	movs	r3, #16
 800ab68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	0e5b      	lsrs	r3, r3, #25
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	f003 0307 	and.w	r3, r3, #7
 800ab78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	0f5b      	lsrs	r3, r3, #29
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	f003 0307 	and.w	r3, r3, #7
 800ab88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab8a:	7bbb      	ldrb	r3, [r7, #14]
 800ab8c:	7b3a      	ldrb	r2, [r7, #12]
 800ab8e:	4911      	ldr	r1, [pc, #68]	@ (800abd4 <UARTEx_SetNbDataToProcess+0x94>)
 800ab90:	5c8a      	ldrb	r2, [r1, r2]
 800ab92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab96:	7b3a      	ldrb	r2, [r7, #12]
 800ab98:	490f      	ldr	r1, [pc, #60]	@ (800abd8 <UARTEx_SetNbDataToProcess+0x98>)
 800ab9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800aba0:	b29a      	uxth	r2, r3
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
 800abaa:	7b7a      	ldrb	r2, [r7, #13]
 800abac:	4909      	ldr	r1, [pc, #36]	@ (800abd4 <UARTEx_SetNbDataToProcess+0x94>)
 800abae:	5c8a      	ldrb	r2, [r1, r2]
 800abb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800abb4:	7b7a      	ldrb	r2, [r7, #13]
 800abb6:	4908      	ldr	r1, [pc, #32]	@ (800abd8 <UARTEx_SetNbDataToProcess+0x98>)
 800abb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800abba:	fb93 f3f2 	sdiv	r3, r3, r2
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800abc6:	bf00      	nop
 800abc8:	3714      	adds	r7, #20
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop
 800abd4:	0800b8c8 	.word	0x0800b8c8
 800abd8:	0800b8d0 	.word	0x0800b8d0

0800abdc <siprintf>:
 800abdc:	b40e      	push	{r1, r2, r3}
 800abde:	b510      	push	{r4, lr}
 800abe0:	b09d      	sub	sp, #116	@ 0x74
 800abe2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800abe4:	9002      	str	r0, [sp, #8]
 800abe6:	9006      	str	r0, [sp, #24]
 800abe8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800abec:	480a      	ldr	r0, [pc, #40]	@ (800ac18 <siprintf+0x3c>)
 800abee:	9107      	str	r1, [sp, #28]
 800abf0:	9104      	str	r1, [sp, #16]
 800abf2:	490a      	ldr	r1, [pc, #40]	@ (800ac1c <siprintf+0x40>)
 800abf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800abf8:	9105      	str	r1, [sp, #20]
 800abfa:	2400      	movs	r4, #0
 800abfc:	a902      	add	r1, sp, #8
 800abfe:	6800      	ldr	r0, [r0, #0]
 800ac00:	9301      	str	r3, [sp, #4]
 800ac02:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ac04:	f000 f9a2 	bl	800af4c <_svfiprintf_r>
 800ac08:	9b02      	ldr	r3, [sp, #8]
 800ac0a:	701c      	strb	r4, [r3, #0]
 800ac0c:	b01d      	add	sp, #116	@ 0x74
 800ac0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac12:	b003      	add	sp, #12
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop
 800ac18:	24000018 	.word	0x24000018
 800ac1c:	ffff0208 	.word	0xffff0208

0800ac20 <memset>:
 800ac20:	4402      	add	r2, r0
 800ac22:	4603      	mov	r3, r0
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d100      	bne.n	800ac2a <memset+0xa>
 800ac28:	4770      	bx	lr
 800ac2a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac2e:	e7f9      	b.n	800ac24 <memset+0x4>

0800ac30 <__errno>:
 800ac30:	4b01      	ldr	r3, [pc, #4]	@ (800ac38 <__errno+0x8>)
 800ac32:	6818      	ldr	r0, [r3, #0]
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop
 800ac38:	24000018 	.word	0x24000018

0800ac3c <__libc_init_array>:
 800ac3c:	b570      	push	{r4, r5, r6, lr}
 800ac3e:	4d0d      	ldr	r5, [pc, #52]	@ (800ac74 <__libc_init_array+0x38>)
 800ac40:	4c0d      	ldr	r4, [pc, #52]	@ (800ac78 <__libc_init_array+0x3c>)
 800ac42:	1b64      	subs	r4, r4, r5
 800ac44:	10a4      	asrs	r4, r4, #2
 800ac46:	2600      	movs	r6, #0
 800ac48:	42a6      	cmp	r6, r4
 800ac4a:	d109      	bne.n	800ac60 <__libc_init_array+0x24>
 800ac4c:	4d0b      	ldr	r5, [pc, #44]	@ (800ac7c <__libc_init_array+0x40>)
 800ac4e:	4c0c      	ldr	r4, [pc, #48]	@ (800ac80 <__libc_init_array+0x44>)
 800ac50:	f000 fc64 	bl	800b51c <_init>
 800ac54:	1b64      	subs	r4, r4, r5
 800ac56:	10a4      	asrs	r4, r4, #2
 800ac58:	2600      	movs	r6, #0
 800ac5a:	42a6      	cmp	r6, r4
 800ac5c:	d105      	bne.n	800ac6a <__libc_init_array+0x2e>
 800ac5e:	bd70      	pop	{r4, r5, r6, pc}
 800ac60:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac64:	4798      	blx	r3
 800ac66:	3601      	adds	r6, #1
 800ac68:	e7ee      	b.n	800ac48 <__libc_init_array+0xc>
 800ac6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac6e:	4798      	blx	r3
 800ac70:	3601      	adds	r6, #1
 800ac72:	e7f2      	b.n	800ac5a <__libc_init_array+0x1e>
 800ac74:	0800b914 	.word	0x0800b914
 800ac78:	0800b914 	.word	0x0800b914
 800ac7c:	0800b914 	.word	0x0800b914
 800ac80:	0800b91c 	.word	0x0800b91c

0800ac84 <__retarget_lock_acquire_recursive>:
 800ac84:	4770      	bx	lr

0800ac86 <__retarget_lock_release_recursive>:
 800ac86:	4770      	bx	lr

0800ac88 <memcpy>:
 800ac88:	440a      	add	r2, r1
 800ac8a:	4291      	cmp	r1, r2
 800ac8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac90:	d100      	bne.n	800ac94 <memcpy+0xc>
 800ac92:	4770      	bx	lr
 800ac94:	b510      	push	{r4, lr}
 800ac96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac9e:	4291      	cmp	r1, r2
 800aca0:	d1f9      	bne.n	800ac96 <memcpy+0xe>
 800aca2:	bd10      	pop	{r4, pc}

0800aca4 <_free_r>:
 800aca4:	b538      	push	{r3, r4, r5, lr}
 800aca6:	4605      	mov	r5, r0
 800aca8:	2900      	cmp	r1, #0
 800acaa:	d041      	beq.n	800ad30 <_free_r+0x8c>
 800acac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acb0:	1f0c      	subs	r4, r1, #4
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	bfb8      	it	lt
 800acb6:	18e4      	addlt	r4, r4, r3
 800acb8:	f000 f8e0 	bl	800ae7c <__malloc_lock>
 800acbc:	4a1d      	ldr	r2, [pc, #116]	@ (800ad34 <_free_r+0x90>)
 800acbe:	6813      	ldr	r3, [r2, #0]
 800acc0:	b933      	cbnz	r3, 800acd0 <_free_r+0x2c>
 800acc2:	6063      	str	r3, [r4, #4]
 800acc4:	6014      	str	r4, [r2, #0]
 800acc6:	4628      	mov	r0, r5
 800acc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800accc:	f000 b8dc 	b.w	800ae88 <__malloc_unlock>
 800acd0:	42a3      	cmp	r3, r4
 800acd2:	d908      	bls.n	800ace6 <_free_r+0x42>
 800acd4:	6820      	ldr	r0, [r4, #0]
 800acd6:	1821      	adds	r1, r4, r0
 800acd8:	428b      	cmp	r3, r1
 800acda:	bf01      	itttt	eq
 800acdc:	6819      	ldreq	r1, [r3, #0]
 800acde:	685b      	ldreq	r3, [r3, #4]
 800ace0:	1809      	addeq	r1, r1, r0
 800ace2:	6021      	streq	r1, [r4, #0]
 800ace4:	e7ed      	b.n	800acc2 <_free_r+0x1e>
 800ace6:	461a      	mov	r2, r3
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	b10b      	cbz	r3, 800acf0 <_free_r+0x4c>
 800acec:	42a3      	cmp	r3, r4
 800acee:	d9fa      	bls.n	800ace6 <_free_r+0x42>
 800acf0:	6811      	ldr	r1, [r2, #0]
 800acf2:	1850      	adds	r0, r2, r1
 800acf4:	42a0      	cmp	r0, r4
 800acf6:	d10b      	bne.n	800ad10 <_free_r+0x6c>
 800acf8:	6820      	ldr	r0, [r4, #0]
 800acfa:	4401      	add	r1, r0
 800acfc:	1850      	adds	r0, r2, r1
 800acfe:	4283      	cmp	r3, r0
 800ad00:	6011      	str	r1, [r2, #0]
 800ad02:	d1e0      	bne.n	800acc6 <_free_r+0x22>
 800ad04:	6818      	ldr	r0, [r3, #0]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	6053      	str	r3, [r2, #4]
 800ad0a:	4408      	add	r0, r1
 800ad0c:	6010      	str	r0, [r2, #0]
 800ad0e:	e7da      	b.n	800acc6 <_free_r+0x22>
 800ad10:	d902      	bls.n	800ad18 <_free_r+0x74>
 800ad12:	230c      	movs	r3, #12
 800ad14:	602b      	str	r3, [r5, #0]
 800ad16:	e7d6      	b.n	800acc6 <_free_r+0x22>
 800ad18:	6820      	ldr	r0, [r4, #0]
 800ad1a:	1821      	adds	r1, r4, r0
 800ad1c:	428b      	cmp	r3, r1
 800ad1e:	bf04      	itt	eq
 800ad20:	6819      	ldreq	r1, [r3, #0]
 800ad22:	685b      	ldreq	r3, [r3, #4]
 800ad24:	6063      	str	r3, [r4, #4]
 800ad26:	bf04      	itt	eq
 800ad28:	1809      	addeq	r1, r1, r0
 800ad2a:	6021      	streq	r1, [r4, #0]
 800ad2c:	6054      	str	r4, [r2, #4]
 800ad2e:	e7ca      	b.n	800acc6 <_free_r+0x22>
 800ad30:	bd38      	pop	{r3, r4, r5, pc}
 800ad32:	bf00      	nop
 800ad34:	24000e2c 	.word	0x24000e2c

0800ad38 <sbrk_aligned>:
 800ad38:	b570      	push	{r4, r5, r6, lr}
 800ad3a:	4e0f      	ldr	r6, [pc, #60]	@ (800ad78 <sbrk_aligned+0x40>)
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	6831      	ldr	r1, [r6, #0]
 800ad40:	4605      	mov	r5, r0
 800ad42:	b911      	cbnz	r1, 800ad4a <sbrk_aligned+0x12>
 800ad44:	f000 fba4 	bl	800b490 <_sbrk_r>
 800ad48:	6030      	str	r0, [r6, #0]
 800ad4a:	4621      	mov	r1, r4
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	f000 fb9f 	bl	800b490 <_sbrk_r>
 800ad52:	1c43      	adds	r3, r0, #1
 800ad54:	d103      	bne.n	800ad5e <sbrk_aligned+0x26>
 800ad56:	f04f 34ff 	mov.w	r4, #4294967295
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	bd70      	pop	{r4, r5, r6, pc}
 800ad5e:	1cc4      	adds	r4, r0, #3
 800ad60:	f024 0403 	bic.w	r4, r4, #3
 800ad64:	42a0      	cmp	r0, r4
 800ad66:	d0f8      	beq.n	800ad5a <sbrk_aligned+0x22>
 800ad68:	1a21      	subs	r1, r4, r0
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	f000 fb90 	bl	800b490 <_sbrk_r>
 800ad70:	3001      	adds	r0, #1
 800ad72:	d1f2      	bne.n	800ad5a <sbrk_aligned+0x22>
 800ad74:	e7ef      	b.n	800ad56 <sbrk_aligned+0x1e>
 800ad76:	bf00      	nop
 800ad78:	24000e28 	.word	0x24000e28

0800ad7c <_malloc_r>:
 800ad7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad80:	1ccd      	adds	r5, r1, #3
 800ad82:	f025 0503 	bic.w	r5, r5, #3
 800ad86:	3508      	adds	r5, #8
 800ad88:	2d0c      	cmp	r5, #12
 800ad8a:	bf38      	it	cc
 800ad8c:	250c      	movcc	r5, #12
 800ad8e:	2d00      	cmp	r5, #0
 800ad90:	4606      	mov	r6, r0
 800ad92:	db01      	blt.n	800ad98 <_malloc_r+0x1c>
 800ad94:	42a9      	cmp	r1, r5
 800ad96:	d904      	bls.n	800ada2 <_malloc_r+0x26>
 800ad98:	230c      	movs	r3, #12
 800ad9a:	6033      	str	r3, [r6, #0]
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ada2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ae78 <_malloc_r+0xfc>
 800ada6:	f000 f869 	bl	800ae7c <__malloc_lock>
 800adaa:	f8d8 3000 	ldr.w	r3, [r8]
 800adae:	461c      	mov	r4, r3
 800adb0:	bb44      	cbnz	r4, 800ae04 <_malloc_r+0x88>
 800adb2:	4629      	mov	r1, r5
 800adb4:	4630      	mov	r0, r6
 800adb6:	f7ff ffbf 	bl	800ad38 <sbrk_aligned>
 800adba:	1c43      	adds	r3, r0, #1
 800adbc:	4604      	mov	r4, r0
 800adbe:	d158      	bne.n	800ae72 <_malloc_r+0xf6>
 800adc0:	f8d8 4000 	ldr.w	r4, [r8]
 800adc4:	4627      	mov	r7, r4
 800adc6:	2f00      	cmp	r7, #0
 800adc8:	d143      	bne.n	800ae52 <_malloc_r+0xd6>
 800adca:	2c00      	cmp	r4, #0
 800adcc:	d04b      	beq.n	800ae66 <_malloc_r+0xea>
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	4639      	mov	r1, r7
 800add2:	4630      	mov	r0, r6
 800add4:	eb04 0903 	add.w	r9, r4, r3
 800add8:	f000 fb5a 	bl	800b490 <_sbrk_r>
 800addc:	4581      	cmp	r9, r0
 800adde:	d142      	bne.n	800ae66 <_malloc_r+0xea>
 800ade0:	6821      	ldr	r1, [r4, #0]
 800ade2:	1a6d      	subs	r5, r5, r1
 800ade4:	4629      	mov	r1, r5
 800ade6:	4630      	mov	r0, r6
 800ade8:	f7ff ffa6 	bl	800ad38 <sbrk_aligned>
 800adec:	3001      	adds	r0, #1
 800adee:	d03a      	beq.n	800ae66 <_malloc_r+0xea>
 800adf0:	6823      	ldr	r3, [r4, #0]
 800adf2:	442b      	add	r3, r5
 800adf4:	6023      	str	r3, [r4, #0]
 800adf6:	f8d8 3000 	ldr.w	r3, [r8]
 800adfa:	685a      	ldr	r2, [r3, #4]
 800adfc:	bb62      	cbnz	r2, 800ae58 <_malloc_r+0xdc>
 800adfe:	f8c8 7000 	str.w	r7, [r8]
 800ae02:	e00f      	b.n	800ae24 <_malloc_r+0xa8>
 800ae04:	6822      	ldr	r2, [r4, #0]
 800ae06:	1b52      	subs	r2, r2, r5
 800ae08:	d420      	bmi.n	800ae4c <_malloc_r+0xd0>
 800ae0a:	2a0b      	cmp	r2, #11
 800ae0c:	d917      	bls.n	800ae3e <_malloc_r+0xc2>
 800ae0e:	1961      	adds	r1, r4, r5
 800ae10:	42a3      	cmp	r3, r4
 800ae12:	6025      	str	r5, [r4, #0]
 800ae14:	bf18      	it	ne
 800ae16:	6059      	strne	r1, [r3, #4]
 800ae18:	6863      	ldr	r3, [r4, #4]
 800ae1a:	bf08      	it	eq
 800ae1c:	f8c8 1000 	streq.w	r1, [r8]
 800ae20:	5162      	str	r2, [r4, r5]
 800ae22:	604b      	str	r3, [r1, #4]
 800ae24:	4630      	mov	r0, r6
 800ae26:	f000 f82f 	bl	800ae88 <__malloc_unlock>
 800ae2a:	f104 000b 	add.w	r0, r4, #11
 800ae2e:	1d23      	adds	r3, r4, #4
 800ae30:	f020 0007 	bic.w	r0, r0, #7
 800ae34:	1ac2      	subs	r2, r0, r3
 800ae36:	bf1c      	itt	ne
 800ae38:	1a1b      	subne	r3, r3, r0
 800ae3a:	50a3      	strne	r3, [r4, r2]
 800ae3c:	e7af      	b.n	800ad9e <_malloc_r+0x22>
 800ae3e:	6862      	ldr	r2, [r4, #4]
 800ae40:	42a3      	cmp	r3, r4
 800ae42:	bf0c      	ite	eq
 800ae44:	f8c8 2000 	streq.w	r2, [r8]
 800ae48:	605a      	strne	r2, [r3, #4]
 800ae4a:	e7eb      	b.n	800ae24 <_malloc_r+0xa8>
 800ae4c:	4623      	mov	r3, r4
 800ae4e:	6864      	ldr	r4, [r4, #4]
 800ae50:	e7ae      	b.n	800adb0 <_malloc_r+0x34>
 800ae52:	463c      	mov	r4, r7
 800ae54:	687f      	ldr	r7, [r7, #4]
 800ae56:	e7b6      	b.n	800adc6 <_malloc_r+0x4a>
 800ae58:	461a      	mov	r2, r3
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	42a3      	cmp	r3, r4
 800ae5e:	d1fb      	bne.n	800ae58 <_malloc_r+0xdc>
 800ae60:	2300      	movs	r3, #0
 800ae62:	6053      	str	r3, [r2, #4]
 800ae64:	e7de      	b.n	800ae24 <_malloc_r+0xa8>
 800ae66:	230c      	movs	r3, #12
 800ae68:	6033      	str	r3, [r6, #0]
 800ae6a:	4630      	mov	r0, r6
 800ae6c:	f000 f80c 	bl	800ae88 <__malloc_unlock>
 800ae70:	e794      	b.n	800ad9c <_malloc_r+0x20>
 800ae72:	6005      	str	r5, [r0, #0]
 800ae74:	e7d6      	b.n	800ae24 <_malloc_r+0xa8>
 800ae76:	bf00      	nop
 800ae78:	24000e2c 	.word	0x24000e2c

0800ae7c <__malloc_lock>:
 800ae7c:	4801      	ldr	r0, [pc, #4]	@ (800ae84 <__malloc_lock+0x8>)
 800ae7e:	f7ff bf01 	b.w	800ac84 <__retarget_lock_acquire_recursive>
 800ae82:	bf00      	nop
 800ae84:	24000e24 	.word	0x24000e24

0800ae88 <__malloc_unlock>:
 800ae88:	4801      	ldr	r0, [pc, #4]	@ (800ae90 <__malloc_unlock+0x8>)
 800ae8a:	f7ff befc 	b.w	800ac86 <__retarget_lock_release_recursive>
 800ae8e:	bf00      	nop
 800ae90:	24000e24 	.word	0x24000e24

0800ae94 <__ssputs_r>:
 800ae94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae98:	688e      	ldr	r6, [r1, #8]
 800ae9a:	461f      	mov	r7, r3
 800ae9c:	42be      	cmp	r6, r7
 800ae9e:	680b      	ldr	r3, [r1, #0]
 800aea0:	4682      	mov	sl, r0
 800aea2:	460c      	mov	r4, r1
 800aea4:	4690      	mov	r8, r2
 800aea6:	d82d      	bhi.n	800af04 <__ssputs_r+0x70>
 800aea8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aeac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aeb0:	d026      	beq.n	800af00 <__ssputs_r+0x6c>
 800aeb2:	6965      	ldr	r5, [r4, #20]
 800aeb4:	6909      	ldr	r1, [r1, #16]
 800aeb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aeba:	eba3 0901 	sub.w	r9, r3, r1
 800aebe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aec2:	1c7b      	adds	r3, r7, #1
 800aec4:	444b      	add	r3, r9
 800aec6:	106d      	asrs	r5, r5, #1
 800aec8:	429d      	cmp	r5, r3
 800aeca:	bf38      	it	cc
 800aecc:	461d      	movcc	r5, r3
 800aece:	0553      	lsls	r3, r2, #21
 800aed0:	d527      	bpl.n	800af22 <__ssputs_r+0x8e>
 800aed2:	4629      	mov	r1, r5
 800aed4:	f7ff ff52 	bl	800ad7c <_malloc_r>
 800aed8:	4606      	mov	r6, r0
 800aeda:	b360      	cbz	r0, 800af36 <__ssputs_r+0xa2>
 800aedc:	6921      	ldr	r1, [r4, #16]
 800aede:	464a      	mov	r2, r9
 800aee0:	f7ff fed2 	bl	800ac88 <memcpy>
 800aee4:	89a3      	ldrh	r3, [r4, #12]
 800aee6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aeea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeee:	81a3      	strh	r3, [r4, #12]
 800aef0:	6126      	str	r6, [r4, #16]
 800aef2:	6165      	str	r5, [r4, #20]
 800aef4:	444e      	add	r6, r9
 800aef6:	eba5 0509 	sub.w	r5, r5, r9
 800aefa:	6026      	str	r6, [r4, #0]
 800aefc:	60a5      	str	r5, [r4, #8]
 800aefe:	463e      	mov	r6, r7
 800af00:	42be      	cmp	r6, r7
 800af02:	d900      	bls.n	800af06 <__ssputs_r+0x72>
 800af04:	463e      	mov	r6, r7
 800af06:	6820      	ldr	r0, [r4, #0]
 800af08:	4632      	mov	r2, r6
 800af0a:	4641      	mov	r1, r8
 800af0c:	f000 faa6 	bl	800b45c <memmove>
 800af10:	68a3      	ldr	r3, [r4, #8]
 800af12:	1b9b      	subs	r3, r3, r6
 800af14:	60a3      	str	r3, [r4, #8]
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	4433      	add	r3, r6
 800af1a:	6023      	str	r3, [r4, #0]
 800af1c:	2000      	movs	r0, #0
 800af1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af22:	462a      	mov	r2, r5
 800af24:	f000 fac4 	bl	800b4b0 <_realloc_r>
 800af28:	4606      	mov	r6, r0
 800af2a:	2800      	cmp	r0, #0
 800af2c:	d1e0      	bne.n	800aef0 <__ssputs_r+0x5c>
 800af2e:	6921      	ldr	r1, [r4, #16]
 800af30:	4650      	mov	r0, sl
 800af32:	f7ff feb7 	bl	800aca4 <_free_r>
 800af36:	230c      	movs	r3, #12
 800af38:	f8ca 3000 	str.w	r3, [sl]
 800af3c:	89a3      	ldrh	r3, [r4, #12]
 800af3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af42:	81a3      	strh	r3, [r4, #12]
 800af44:	f04f 30ff 	mov.w	r0, #4294967295
 800af48:	e7e9      	b.n	800af1e <__ssputs_r+0x8a>
	...

0800af4c <_svfiprintf_r>:
 800af4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af50:	4698      	mov	r8, r3
 800af52:	898b      	ldrh	r3, [r1, #12]
 800af54:	061b      	lsls	r3, r3, #24
 800af56:	b09d      	sub	sp, #116	@ 0x74
 800af58:	4607      	mov	r7, r0
 800af5a:	460d      	mov	r5, r1
 800af5c:	4614      	mov	r4, r2
 800af5e:	d510      	bpl.n	800af82 <_svfiprintf_r+0x36>
 800af60:	690b      	ldr	r3, [r1, #16]
 800af62:	b973      	cbnz	r3, 800af82 <_svfiprintf_r+0x36>
 800af64:	2140      	movs	r1, #64	@ 0x40
 800af66:	f7ff ff09 	bl	800ad7c <_malloc_r>
 800af6a:	6028      	str	r0, [r5, #0]
 800af6c:	6128      	str	r0, [r5, #16]
 800af6e:	b930      	cbnz	r0, 800af7e <_svfiprintf_r+0x32>
 800af70:	230c      	movs	r3, #12
 800af72:	603b      	str	r3, [r7, #0]
 800af74:	f04f 30ff 	mov.w	r0, #4294967295
 800af78:	b01d      	add	sp, #116	@ 0x74
 800af7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7e:	2340      	movs	r3, #64	@ 0x40
 800af80:	616b      	str	r3, [r5, #20]
 800af82:	2300      	movs	r3, #0
 800af84:	9309      	str	r3, [sp, #36]	@ 0x24
 800af86:	2320      	movs	r3, #32
 800af88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af90:	2330      	movs	r3, #48	@ 0x30
 800af92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b130 <_svfiprintf_r+0x1e4>
 800af96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af9a:	f04f 0901 	mov.w	r9, #1
 800af9e:	4623      	mov	r3, r4
 800afa0:	469a      	mov	sl, r3
 800afa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afa6:	b10a      	cbz	r2, 800afac <_svfiprintf_r+0x60>
 800afa8:	2a25      	cmp	r2, #37	@ 0x25
 800afaa:	d1f9      	bne.n	800afa0 <_svfiprintf_r+0x54>
 800afac:	ebba 0b04 	subs.w	fp, sl, r4
 800afb0:	d00b      	beq.n	800afca <_svfiprintf_r+0x7e>
 800afb2:	465b      	mov	r3, fp
 800afb4:	4622      	mov	r2, r4
 800afb6:	4629      	mov	r1, r5
 800afb8:	4638      	mov	r0, r7
 800afba:	f7ff ff6b 	bl	800ae94 <__ssputs_r>
 800afbe:	3001      	adds	r0, #1
 800afc0:	f000 80a7 	beq.w	800b112 <_svfiprintf_r+0x1c6>
 800afc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afc6:	445a      	add	r2, fp
 800afc8:	9209      	str	r2, [sp, #36]	@ 0x24
 800afca:	f89a 3000 	ldrb.w	r3, [sl]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 809f 	beq.w	800b112 <_svfiprintf_r+0x1c6>
 800afd4:	2300      	movs	r3, #0
 800afd6:	f04f 32ff 	mov.w	r2, #4294967295
 800afda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afde:	f10a 0a01 	add.w	sl, sl, #1
 800afe2:	9304      	str	r3, [sp, #16]
 800afe4:	9307      	str	r3, [sp, #28]
 800afe6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afea:	931a      	str	r3, [sp, #104]	@ 0x68
 800afec:	4654      	mov	r4, sl
 800afee:	2205      	movs	r2, #5
 800aff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aff4:	484e      	ldr	r0, [pc, #312]	@ (800b130 <_svfiprintf_r+0x1e4>)
 800aff6:	f7f5 f993 	bl	8000320 <memchr>
 800affa:	9a04      	ldr	r2, [sp, #16]
 800affc:	b9d8      	cbnz	r0, 800b036 <_svfiprintf_r+0xea>
 800affe:	06d0      	lsls	r0, r2, #27
 800b000:	bf44      	itt	mi
 800b002:	2320      	movmi	r3, #32
 800b004:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b008:	0711      	lsls	r1, r2, #28
 800b00a:	bf44      	itt	mi
 800b00c:	232b      	movmi	r3, #43	@ 0x2b
 800b00e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b012:	f89a 3000 	ldrb.w	r3, [sl]
 800b016:	2b2a      	cmp	r3, #42	@ 0x2a
 800b018:	d015      	beq.n	800b046 <_svfiprintf_r+0xfa>
 800b01a:	9a07      	ldr	r2, [sp, #28]
 800b01c:	4654      	mov	r4, sl
 800b01e:	2000      	movs	r0, #0
 800b020:	f04f 0c0a 	mov.w	ip, #10
 800b024:	4621      	mov	r1, r4
 800b026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b02a:	3b30      	subs	r3, #48	@ 0x30
 800b02c:	2b09      	cmp	r3, #9
 800b02e:	d94b      	bls.n	800b0c8 <_svfiprintf_r+0x17c>
 800b030:	b1b0      	cbz	r0, 800b060 <_svfiprintf_r+0x114>
 800b032:	9207      	str	r2, [sp, #28]
 800b034:	e014      	b.n	800b060 <_svfiprintf_r+0x114>
 800b036:	eba0 0308 	sub.w	r3, r0, r8
 800b03a:	fa09 f303 	lsl.w	r3, r9, r3
 800b03e:	4313      	orrs	r3, r2
 800b040:	9304      	str	r3, [sp, #16]
 800b042:	46a2      	mov	sl, r4
 800b044:	e7d2      	b.n	800afec <_svfiprintf_r+0xa0>
 800b046:	9b03      	ldr	r3, [sp, #12]
 800b048:	1d19      	adds	r1, r3, #4
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	9103      	str	r1, [sp, #12]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	bfbb      	ittet	lt
 800b052:	425b      	neglt	r3, r3
 800b054:	f042 0202 	orrlt.w	r2, r2, #2
 800b058:	9307      	strge	r3, [sp, #28]
 800b05a:	9307      	strlt	r3, [sp, #28]
 800b05c:	bfb8      	it	lt
 800b05e:	9204      	strlt	r2, [sp, #16]
 800b060:	7823      	ldrb	r3, [r4, #0]
 800b062:	2b2e      	cmp	r3, #46	@ 0x2e
 800b064:	d10a      	bne.n	800b07c <_svfiprintf_r+0x130>
 800b066:	7863      	ldrb	r3, [r4, #1]
 800b068:	2b2a      	cmp	r3, #42	@ 0x2a
 800b06a:	d132      	bne.n	800b0d2 <_svfiprintf_r+0x186>
 800b06c:	9b03      	ldr	r3, [sp, #12]
 800b06e:	1d1a      	adds	r2, r3, #4
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	9203      	str	r2, [sp, #12]
 800b074:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b078:	3402      	adds	r4, #2
 800b07a:	9305      	str	r3, [sp, #20]
 800b07c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b140 <_svfiprintf_r+0x1f4>
 800b080:	7821      	ldrb	r1, [r4, #0]
 800b082:	2203      	movs	r2, #3
 800b084:	4650      	mov	r0, sl
 800b086:	f7f5 f94b 	bl	8000320 <memchr>
 800b08a:	b138      	cbz	r0, 800b09c <_svfiprintf_r+0x150>
 800b08c:	9b04      	ldr	r3, [sp, #16]
 800b08e:	eba0 000a 	sub.w	r0, r0, sl
 800b092:	2240      	movs	r2, #64	@ 0x40
 800b094:	4082      	lsls	r2, r0
 800b096:	4313      	orrs	r3, r2
 800b098:	3401      	adds	r4, #1
 800b09a:	9304      	str	r3, [sp, #16]
 800b09c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0a0:	4824      	ldr	r0, [pc, #144]	@ (800b134 <_svfiprintf_r+0x1e8>)
 800b0a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0a6:	2206      	movs	r2, #6
 800b0a8:	f7f5 f93a 	bl	8000320 <memchr>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d036      	beq.n	800b11e <_svfiprintf_r+0x1d2>
 800b0b0:	4b21      	ldr	r3, [pc, #132]	@ (800b138 <_svfiprintf_r+0x1ec>)
 800b0b2:	bb1b      	cbnz	r3, 800b0fc <_svfiprintf_r+0x1b0>
 800b0b4:	9b03      	ldr	r3, [sp, #12]
 800b0b6:	3307      	adds	r3, #7
 800b0b8:	f023 0307 	bic.w	r3, r3, #7
 800b0bc:	3308      	adds	r3, #8
 800b0be:	9303      	str	r3, [sp, #12]
 800b0c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c2:	4433      	add	r3, r6
 800b0c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0c6:	e76a      	b.n	800af9e <_svfiprintf_r+0x52>
 800b0c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0cc:	460c      	mov	r4, r1
 800b0ce:	2001      	movs	r0, #1
 800b0d0:	e7a8      	b.n	800b024 <_svfiprintf_r+0xd8>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	3401      	adds	r4, #1
 800b0d6:	9305      	str	r3, [sp, #20]
 800b0d8:	4619      	mov	r1, r3
 800b0da:	f04f 0c0a 	mov.w	ip, #10
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0e4:	3a30      	subs	r2, #48	@ 0x30
 800b0e6:	2a09      	cmp	r2, #9
 800b0e8:	d903      	bls.n	800b0f2 <_svfiprintf_r+0x1a6>
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d0c6      	beq.n	800b07c <_svfiprintf_r+0x130>
 800b0ee:	9105      	str	r1, [sp, #20]
 800b0f0:	e7c4      	b.n	800b07c <_svfiprintf_r+0x130>
 800b0f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e7f0      	b.n	800b0de <_svfiprintf_r+0x192>
 800b0fc:	ab03      	add	r3, sp, #12
 800b0fe:	9300      	str	r3, [sp, #0]
 800b100:	462a      	mov	r2, r5
 800b102:	4b0e      	ldr	r3, [pc, #56]	@ (800b13c <_svfiprintf_r+0x1f0>)
 800b104:	a904      	add	r1, sp, #16
 800b106:	4638      	mov	r0, r7
 800b108:	f3af 8000 	nop.w
 800b10c:	1c42      	adds	r2, r0, #1
 800b10e:	4606      	mov	r6, r0
 800b110:	d1d6      	bne.n	800b0c0 <_svfiprintf_r+0x174>
 800b112:	89ab      	ldrh	r3, [r5, #12]
 800b114:	065b      	lsls	r3, r3, #25
 800b116:	f53f af2d 	bmi.w	800af74 <_svfiprintf_r+0x28>
 800b11a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b11c:	e72c      	b.n	800af78 <_svfiprintf_r+0x2c>
 800b11e:	ab03      	add	r3, sp, #12
 800b120:	9300      	str	r3, [sp, #0]
 800b122:	462a      	mov	r2, r5
 800b124:	4b05      	ldr	r3, [pc, #20]	@ (800b13c <_svfiprintf_r+0x1f0>)
 800b126:	a904      	add	r1, sp, #16
 800b128:	4638      	mov	r0, r7
 800b12a:	f000 f879 	bl	800b220 <_printf_i>
 800b12e:	e7ed      	b.n	800b10c <_svfiprintf_r+0x1c0>
 800b130:	0800b8d8 	.word	0x0800b8d8
 800b134:	0800b8e2 	.word	0x0800b8e2
 800b138:	00000000 	.word	0x00000000
 800b13c:	0800ae95 	.word	0x0800ae95
 800b140:	0800b8de 	.word	0x0800b8de

0800b144 <_printf_common>:
 800b144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b148:	4616      	mov	r6, r2
 800b14a:	4698      	mov	r8, r3
 800b14c:	688a      	ldr	r2, [r1, #8]
 800b14e:	690b      	ldr	r3, [r1, #16]
 800b150:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b154:	4293      	cmp	r3, r2
 800b156:	bfb8      	it	lt
 800b158:	4613      	movlt	r3, r2
 800b15a:	6033      	str	r3, [r6, #0]
 800b15c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b160:	4607      	mov	r7, r0
 800b162:	460c      	mov	r4, r1
 800b164:	b10a      	cbz	r2, 800b16a <_printf_common+0x26>
 800b166:	3301      	adds	r3, #1
 800b168:	6033      	str	r3, [r6, #0]
 800b16a:	6823      	ldr	r3, [r4, #0]
 800b16c:	0699      	lsls	r1, r3, #26
 800b16e:	bf42      	ittt	mi
 800b170:	6833      	ldrmi	r3, [r6, #0]
 800b172:	3302      	addmi	r3, #2
 800b174:	6033      	strmi	r3, [r6, #0]
 800b176:	6825      	ldr	r5, [r4, #0]
 800b178:	f015 0506 	ands.w	r5, r5, #6
 800b17c:	d106      	bne.n	800b18c <_printf_common+0x48>
 800b17e:	f104 0a19 	add.w	sl, r4, #25
 800b182:	68e3      	ldr	r3, [r4, #12]
 800b184:	6832      	ldr	r2, [r6, #0]
 800b186:	1a9b      	subs	r3, r3, r2
 800b188:	42ab      	cmp	r3, r5
 800b18a:	dc26      	bgt.n	800b1da <_printf_common+0x96>
 800b18c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b190:	6822      	ldr	r2, [r4, #0]
 800b192:	3b00      	subs	r3, #0
 800b194:	bf18      	it	ne
 800b196:	2301      	movne	r3, #1
 800b198:	0692      	lsls	r2, r2, #26
 800b19a:	d42b      	bmi.n	800b1f4 <_printf_common+0xb0>
 800b19c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b1a0:	4641      	mov	r1, r8
 800b1a2:	4638      	mov	r0, r7
 800b1a4:	47c8      	blx	r9
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	d01e      	beq.n	800b1e8 <_printf_common+0xa4>
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	6922      	ldr	r2, [r4, #16]
 800b1ae:	f003 0306 	and.w	r3, r3, #6
 800b1b2:	2b04      	cmp	r3, #4
 800b1b4:	bf02      	ittt	eq
 800b1b6:	68e5      	ldreq	r5, [r4, #12]
 800b1b8:	6833      	ldreq	r3, [r6, #0]
 800b1ba:	1aed      	subeq	r5, r5, r3
 800b1bc:	68a3      	ldr	r3, [r4, #8]
 800b1be:	bf0c      	ite	eq
 800b1c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1c4:	2500      	movne	r5, #0
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	bfc4      	itt	gt
 800b1ca:	1a9b      	subgt	r3, r3, r2
 800b1cc:	18ed      	addgt	r5, r5, r3
 800b1ce:	2600      	movs	r6, #0
 800b1d0:	341a      	adds	r4, #26
 800b1d2:	42b5      	cmp	r5, r6
 800b1d4:	d11a      	bne.n	800b20c <_printf_common+0xc8>
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	e008      	b.n	800b1ec <_printf_common+0xa8>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	4652      	mov	r2, sl
 800b1de:	4641      	mov	r1, r8
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	47c8      	blx	r9
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	d103      	bne.n	800b1f0 <_printf_common+0xac>
 800b1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1f0:	3501      	adds	r5, #1
 800b1f2:	e7c6      	b.n	800b182 <_printf_common+0x3e>
 800b1f4:	18e1      	adds	r1, r4, r3
 800b1f6:	1c5a      	adds	r2, r3, #1
 800b1f8:	2030      	movs	r0, #48	@ 0x30
 800b1fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b1fe:	4422      	add	r2, r4
 800b200:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b204:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b208:	3302      	adds	r3, #2
 800b20a:	e7c7      	b.n	800b19c <_printf_common+0x58>
 800b20c:	2301      	movs	r3, #1
 800b20e:	4622      	mov	r2, r4
 800b210:	4641      	mov	r1, r8
 800b212:	4638      	mov	r0, r7
 800b214:	47c8      	blx	r9
 800b216:	3001      	adds	r0, #1
 800b218:	d0e6      	beq.n	800b1e8 <_printf_common+0xa4>
 800b21a:	3601      	adds	r6, #1
 800b21c:	e7d9      	b.n	800b1d2 <_printf_common+0x8e>
	...

0800b220 <_printf_i>:
 800b220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b224:	7e0f      	ldrb	r7, [r1, #24]
 800b226:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b228:	2f78      	cmp	r7, #120	@ 0x78
 800b22a:	4691      	mov	r9, r2
 800b22c:	4680      	mov	r8, r0
 800b22e:	460c      	mov	r4, r1
 800b230:	469a      	mov	sl, r3
 800b232:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b236:	d807      	bhi.n	800b248 <_printf_i+0x28>
 800b238:	2f62      	cmp	r7, #98	@ 0x62
 800b23a:	d80a      	bhi.n	800b252 <_printf_i+0x32>
 800b23c:	2f00      	cmp	r7, #0
 800b23e:	f000 80d1 	beq.w	800b3e4 <_printf_i+0x1c4>
 800b242:	2f58      	cmp	r7, #88	@ 0x58
 800b244:	f000 80b8 	beq.w	800b3b8 <_printf_i+0x198>
 800b248:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b24c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b250:	e03a      	b.n	800b2c8 <_printf_i+0xa8>
 800b252:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b256:	2b15      	cmp	r3, #21
 800b258:	d8f6      	bhi.n	800b248 <_printf_i+0x28>
 800b25a:	a101      	add	r1, pc, #4	@ (adr r1, 800b260 <_printf_i+0x40>)
 800b25c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b260:	0800b2b9 	.word	0x0800b2b9
 800b264:	0800b2cd 	.word	0x0800b2cd
 800b268:	0800b249 	.word	0x0800b249
 800b26c:	0800b249 	.word	0x0800b249
 800b270:	0800b249 	.word	0x0800b249
 800b274:	0800b249 	.word	0x0800b249
 800b278:	0800b2cd 	.word	0x0800b2cd
 800b27c:	0800b249 	.word	0x0800b249
 800b280:	0800b249 	.word	0x0800b249
 800b284:	0800b249 	.word	0x0800b249
 800b288:	0800b249 	.word	0x0800b249
 800b28c:	0800b3cb 	.word	0x0800b3cb
 800b290:	0800b2f7 	.word	0x0800b2f7
 800b294:	0800b385 	.word	0x0800b385
 800b298:	0800b249 	.word	0x0800b249
 800b29c:	0800b249 	.word	0x0800b249
 800b2a0:	0800b3ed 	.word	0x0800b3ed
 800b2a4:	0800b249 	.word	0x0800b249
 800b2a8:	0800b2f7 	.word	0x0800b2f7
 800b2ac:	0800b249 	.word	0x0800b249
 800b2b0:	0800b249 	.word	0x0800b249
 800b2b4:	0800b38d 	.word	0x0800b38d
 800b2b8:	6833      	ldr	r3, [r6, #0]
 800b2ba:	1d1a      	adds	r2, r3, #4
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	6032      	str	r2, [r6, #0]
 800b2c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e09c      	b.n	800b406 <_printf_i+0x1e6>
 800b2cc:	6833      	ldr	r3, [r6, #0]
 800b2ce:	6820      	ldr	r0, [r4, #0]
 800b2d0:	1d19      	adds	r1, r3, #4
 800b2d2:	6031      	str	r1, [r6, #0]
 800b2d4:	0606      	lsls	r6, r0, #24
 800b2d6:	d501      	bpl.n	800b2dc <_printf_i+0xbc>
 800b2d8:	681d      	ldr	r5, [r3, #0]
 800b2da:	e003      	b.n	800b2e4 <_printf_i+0xc4>
 800b2dc:	0645      	lsls	r5, r0, #25
 800b2de:	d5fb      	bpl.n	800b2d8 <_printf_i+0xb8>
 800b2e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b2e4:	2d00      	cmp	r5, #0
 800b2e6:	da03      	bge.n	800b2f0 <_printf_i+0xd0>
 800b2e8:	232d      	movs	r3, #45	@ 0x2d
 800b2ea:	426d      	negs	r5, r5
 800b2ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2f0:	4858      	ldr	r0, [pc, #352]	@ (800b454 <_printf_i+0x234>)
 800b2f2:	230a      	movs	r3, #10
 800b2f4:	e011      	b.n	800b31a <_printf_i+0xfa>
 800b2f6:	6821      	ldr	r1, [r4, #0]
 800b2f8:	6833      	ldr	r3, [r6, #0]
 800b2fa:	0608      	lsls	r0, r1, #24
 800b2fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b300:	d402      	bmi.n	800b308 <_printf_i+0xe8>
 800b302:	0649      	lsls	r1, r1, #25
 800b304:	bf48      	it	mi
 800b306:	b2ad      	uxthmi	r5, r5
 800b308:	2f6f      	cmp	r7, #111	@ 0x6f
 800b30a:	4852      	ldr	r0, [pc, #328]	@ (800b454 <_printf_i+0x234>)
 800b30c:	6033      	str	r3, [r6, #0]
 800b30e:	bf14      	ite	ne
 800b310:	230a      	movne	r3, #10
 800b312:	2308      	moveq	r3, #8
 800b314:	2100      	movs	r1, #0
 800b316:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b31a:	6866      	ldr	r6, [r4, #4]
 800b31c:	60a6      	str	r6, [r4, #8]
 800b31e:	2e00      	cmp	r6, #0
 800b320:	db05      	blt.n	800b32e <_printf_i+0x10e>
 800b322:	6821      	ldr	r1, [r4, #0]
 800b324:	432e      	orrs	r6, r5
 800b326:	f021 0104 	bic.w	r1, r1, #4
 800b32a:	6021      	str	r1, [r4, #0]
 800b32c:	d04b      	beq.n	800b3c6 <_printf_i+0x1a6>
 800b32e:	4616      	mov	r6, r2
 800b330:	fbb5 f1f3 	udiv	r1, r5, r3
 800b334:	fb03 5711 	mls	r7, r3, r1, r5
 800b338:	5dc7      	ldrb	r7, [r0, r7]
 800b33a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b33e:	462f      	mov	r7, r5
 800b340:	42bb      	cmp	r3, r7
 800b342:	460d      	mov	r5, r1
 800b344:	d9f4      	bls.n	800b330 <_printf_i+0x110>
 800b346:	2b08      	cmp	r3, #8
 800b348:	d10b      	bne.n	800b362 <_printf_i+0x142>
 800b34a:	6823      	ldr	r3, [r4, #0]
 800b34c:	07df      	lsls	r7, r3, #31
 800b34e:	d508      	bpl.n	800b362 <_printf_i+0x142>
 800b350:	6923      	ldr	r3, [r4, #16]
 800b352:	6861      	ldr	r1, [r4, #4]
 800b354:	4299      	cmp	r1, r3
 800b356:	bfde      	ittt	le
 800b358:	2330      	movle	r3, #48	@ 0x30
 800b35a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b35e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b362:	1b92      	subs	r2, r2, r6
 800b364:	6122      	str	r2, [r4, #16]
 800b366:	f8cd a000 	str.w	sl, [sp]
 800b36a:	464b      	mov	r3, r9
 800b36c:	aa03      	add	r2, sp, #12
 800b36e:	4621      	mov	r1, r4
 800b370:	4640      	mov	r0, r8
 800b372:	f7ff fee7 	bl	800b144 <_printf_common>
 800b376:	3001      	adds	r0, #1
 800b378:	d14a      	bne.n	800b410 <_printf_i+0x1f0>
 800b37a:	f04f 30ff 	mov.w	r0, #4294967295
 800b37e:	b004      	add	sp, #16
 800b380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b384:	6823      	ldr	r3, [r4, #0]
 800b386:	f043 0320 	orr.w	r3, r3, #32
 800b38a:	6023      	str	r3, [r4, #0]
 800b38c:	4832      	ldr	r0, [pc, #200]	@ (800b458 <_printf_i+0x238>)
 800b38e:	2778      	movs	r7, #120	@ 0x78
 800b390:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b394:	6823      	ldr	r3, [r4, #0]
 800b396:	6831      	ldr	r1, [r6, #0]
 800b398:	061f      	lsls	r7, r3, #24
 800b39a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b39e:	d402      	bmi.n	800b3a6 <_printf_i+0x186>
 800b3a0:	065f      	lsls	r7, r3, #25
 800b3a2:	bf48      	it	mi
 800b3a4:	b2ad      	uxthmi	r5, r5
 800b3a6:	6031      	str	r1, [r6, #0]
 800b3a8:	07d9      	lsls	r1, r3, #31
 800b3aa:	bf44      	itt	mi
 800b3ac:	f043 0320 	orrmi.w	r3, r3, #32
 800b3b0:	6023      	strmi	r3, [r4, #0]
 800b3b2:	b11d      	cbz	r5, 800b3bc <_printf_i+0x19c>
 800b3b4:	2310      	movs	r3, #16
 800b3b6:	e7ad      	b.n	800b314 <_printf_i+0xf4>
 800b3b8:	4826      	ldr	r0, [pc, #152]	@ (800b454 <_printf_i+0x234>)
 800b3ba:	e7e9      	b.n	800b390 <_printf_i+0x170>
 800b3bc:	6823      	ldr	r3, [r4, #0]
 800b3be:	f023 0320 	bic.w	r3, r3, #32
 800b3c2:	6023      	str	r3, [r4, #0]
 800b3c4:	e7f6      	b.n	800b3b4 <_printf_i+0x194>
 800b3c6:	4616      	mov	r6, r2
 800b3c8:	e7bd      	b.n	800b346 <_printf_i+0x126>
 800b3ca:	6833      	ldr	r3, [r6, #0]
 800b3cc:	6825      	ldr	r5, [r4, #0]
 800b3ce:	6961      	ldr	r1, [r4, #20]
 800b3d0:	1d18      	adds	r0, r3, #4
 800b3d2:	6030      	str	r0, [r6, #0]
 800b3d4:	062e      	lsls	r6, r5, #24
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	d501      	bpl.n	800b3de <_printf_i+0x1be>
 800b3da:	6019      	str	r1, [r3, #0]
 800b3dc:	e002      	b.n	800b3e4 <_printf_i+0x1c4>
 800b3de:	0668      	lsls	r0, r5, #25
 800b3e0:	d5fb      	bpl.n	800b3da <_printf_i+0x1ba>
 800b3e2:	8019      	strh	r1, [r3, #0]
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	6123      	str	r3, [r4, #16]
 800b3e8:	4616      	mov	r6, r2
 800b3ea:	e7bc      	b.n	800b366 <_printf_i+0x146>
 800b3ec:	6833      	ldr	r3, [r6, #0]
 800b3ee:	1d1a      	adds	r2, r3, #4
 800b3f0:	6032      	str	r2, [r6, #0]
 800b3f2:	681e      	ldr	r6, [r3, #0]
 800b3f4:	6862      	ldr	r2, [r4, #4]
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	4630      	mov	r0, r6
 800b3fa:	f7f4 ff91 	bl	8000320 <memchr>
 800b3fe:	b108      	cbz	r0, 800b404 <_printf_i+0x1e4>
 800b400:	1b80      	subs	r0, r0, r6
 800b402:	6060      	str	r0, [r4, #4]
 800b404:	6863      	ldr	r3, [r4, #4]
 800b406:	6123      	str	r3, [r4, #16]
 800b408:	2300      	movs	r3, #0
 800b40a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b40e:	e7aa      	b.n	800b366 <_printf_i+0x146>
 800b410:	6923      	ldr	r3, [r4, #16]
 800b412:	4632      	mov	r2, r6
 800b414:	4649      	mov	r1, r9
 800b416:	4640      	mov	r0, r8
 800b418:	47d0      	blx	sl
 800b41a:	3001      	adds	r0, #1
 800b41c:	d0ad      	beq.n	800b37a <_printf_i+0x15a>
 800b41e:	6823      	ldr	r3, [r4, #0]
 800b420:	079b      	lsls	r3, r3, #30
 800b422:	d413      	bmi.n	800b44c <_printf_i+0x22c>
 800b424:	68e0      	ldr	r0, [r4, #12]
 800b426:	9b03      	ldr	r3, [sp, #12]
 800b428:	4298      	cmp	r0, r3
 800b42a:	bfb8      	it	lt
 800b42c:	4618      	movlt	r0, r3
 800b42e:	e7a6      	b.n	800b37e <_printf_i+0x15e>
 800b430:	2301      	movs	r3, #1
 800b432:	4632      	mov	r2, r6
 800b434:	4649      	mov	r1, r9
 800b436:	4640      	mov	r0, r8
 800b438:	47d0      	blx	sl
 800b43a:	3001      	adds	r0, #1
 800b43c:	d09d      	beq.n	800b37a <_printf_i+0x15a>
 800b43e:	3501      	adds	r5, #1
 800b440:	68e3      	ldr	r3, [r4, #12]
 800b442:	9903      	ldr	r1, [sp, #12]
 800b444:	1a5b      	subs	r3, r3, r1
 800b446:	42ab      	cmp	r3, r5
 800b448:	dcf2      	bgt.n	800b430 <_printf_i+0x210>
 800b44a:	e7eb      	b.n	800b424 <_printf_i+0x204>
 800b44c:	2500      	movs	r5, #0
 800b44e:	f104 0619 	add.w	r6, r4, #25
 800b452:	e7f5      	b.n	800b440 <_printf_i+0x220>
 800b454:	0800b8e9 	.word	0x0800b8e9
 800b458:	0800b8fa 	.word	0x0800b8fa

0800b45c <memmove>:
 800b45c:	4288      	cmp	r0, r1
 800b45e:	b510      	push	{r4, lr}
 800b460:	eb01 0402 	add.w	r4, r1, r2
 800b464:	d902      	bls.n	800b46c <memmove+0x10>
 800b466:	4284      	cmp	r4, r0
 800b468:	4623      	mov	r3, r4
 800b46a:	d807      	bhi.n	800b47c <memmove+0x20>
 800b46c:	1e43      	subs	r3, r0, #1
 800b46e:	42a1      	cmp	r1, r4
 800b470:	d008      	beq.n	800b484 <memmove+0x28>
 800b472:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b476:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b47a:	e7f8      	b.n	800b46e <memmove+0x12>
 800b47c:	4402      	add	r2, r0
 800b47e:	4601      	mov	r1, r0
 800b480:	428a      	cmp	r2, r1
 800b482:	d100      	bne.n	800b486 <memmove+0x2a>
 800b484:	bd10      	pop	{r4, pc}
 800b486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b48a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b48e:	e7f7      	b.n	800b480 <memmove+0x24>

0800b490 <_sbrk_r>:
 800b490:	b538      	push	{r3, r4, r5, lr}
 800b492:	4d06      	ldr	r5, [pc, #24]	@ (800b4ac <_sbrk_r+0x1c>)
 800b494:	2300      	movs	r3, #0
 800b496:	4604      	mov	r4, r0
 800b498:	4608      	mov	r0, r1
 800b49a:	602b      	str	r3, [r5, #0]
 800b49c:	f7f6 ffd4 	bl	8002448 <_sbrk>
 800b4a0:	1c43      	adds	r3, r0, #1
 800b4a2:	d102      	bne.n	800b4aa <_sbrk_r+0x1a>
 800b4a4:	682b      	ldr	r3, [r5, #0]
 800b4a6:	b103      	cbz	r3, 800b4aa <_sbrk_r+0x1a>
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	bd38      	pop	{r3, r4, r5, pc}
 800b4ac:	24000e20 	.word	0x24000e20

0800b4b0 <_realloc_r>:
 800b4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b4:	4607      	mov	r7, r0
 800b4b6:	4614      	mov	r4, r2
 800b4b8:	460d      	mov	r5, r1
 800b4ba:	b921      	cbnz	r1, 800b4c6 <_realloc_r+0x16>
 800b4bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c0:	4611      	mov	r1, r2
 800b4c2:	f7ff bc5b 	b.w	800ad7c <_malloc_r>
 800b4c6:	b92a      	cbnz	r2, 800b4d4 <_realloc_r+0x24>
 800b4c8:	f7ff fbec 	bl	800aca4 <_free_r>
 800b4cc:	4625      	mov	r5, r4
 800b4ce:	4628      	mov	r0, r5
 800b4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4d4:	f000 f81a 	bl	800b50c <_malloc_usable_size_r>
 800b4d8:	4284      	cmp	r4, r0
 800b4da:	4606      	mov	r6, r0
 800b4dc:	d802      	bhi.n	800b4e4 <_realloc_r+0x34>
 800b4de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4e2:	d8f4      	bhi.n	800b4ce <_realloc_r+0x1e>
 800b4e4:	4621      	mov	r1, r4
 800b4e6:	4638      	mov	r0, r7
 800b4e8:	f7ff fc48 	bl	800ad7c <_malloc_r>
 800b4ec:	4680      	mov	r8, r0
 800b4ee:	b908      	cbnz	r0, 800b4f4 <_realloc_r+0x44>
 800b4f0:	4645      	mov	r5, r8
 800b4f2:	e7ec      	b.n	800b4ce <_realloc_r+0x1e>
 800b4f4:	42b4      	cmp	r4, r6
 800b4f6:	4622      	mov	r2, r4
 800b4f8:	4629      	mov	r1, r5
 800b4fa:	bf28      	it	cs
 800b4fc:	4632      	movcs	r2, r6
 800b4fe:	f7ff fbc3 	bl	800ac88 <memcpy>
 800b502:	4629      	mov	r1, r5
 800b504:	4638      	mov	r0, r7
 800b506:	f7ff fbcd 	bl	800aca4 <_free_r>
 800b50a:	e7f1      	b.n	800b4f0 <_realloc_r+0x40>

0800b50c <_malloc_usable_size_r>:
 800b50c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b510:	1f18      	subs	r0, r3, #4
 800b512:	2b00      	cmp	r3, #0
 800b514:	bfbc      	itt	lt
 800b516:	580b      	ldrlt	r3, [r1, r0]
 800b518:	18c0      	addlt	r0, r0, r3
 800b51a:	4770      	bx	lr

0800b51c <_init>:
 800b51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51e:	bf00      	nop
 800b520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b522:	bc08      	pop	{r3}
 800b524:	469e      	mov	lr, r3
 800b526:	4770      	bx	lr

0800b528 <_fini>:
 800b528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52a:	bf00      	nop
 800b52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b52e:	bc08      	pop	{r3}
 800b530:	469e      	mov	lr, r3
 800b532:	4770      	bx	lr
