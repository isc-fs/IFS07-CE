
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c994  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800cc64  0800cc64  0000dc64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d0fc  0800d0fc  0000e0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800d104  0800d104  0000e104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d10c  0800d10c  0000e10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  24000000  0800d110  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e48  24000068  0800d178  0000f068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000eb0  0800d178  0000feb0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002703b  00000000  00000000  0000f096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c47  00000000  00000000  000360d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001928  00000000  00000000  00039d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013a7  00000000  00000000  0003b640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b7cc  00000000  00000000  0003c9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020e10  00000000  00000000  000781b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017626e  00000000  00000000  00098fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020f231  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000734c  00000000  00000000  0020f274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000042  00000000  00000000  002165c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000068 	.word	0x24000068
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800cc4c 	.word	0x0800cc4c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400006c 	.word	0x2400006c
 800030c:	0800cc4c 	.word	0x0800cc4c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <_ZN7BMS_MODC1Emiiihjii>:
/*********************************************************************************************************
 ** Function name:           BMS_MOD
 ** Descriptions:            Initialization function of teh class
 *********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT,
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
		uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG_V, int _LAG_T) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2200      	movs	r2, #0
 800071e:	751a      	strb	r2, [r3, #20]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000726:	619a      	str	r2, [r3, #24]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	22fa      	movs	r2, #250	@ 0xfa
 800072c:	61da      	str	r2, [r3, #28]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000734:	621a      	str	r2, [r3, #32]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800073c:	625a      	str	r2, [r3, #36]	@ 0x24
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000744:	629a      	str	r2, [r3, #40]	@ 0x28
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	699a      	ldr	r2, [r3, #24]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	6a1a      	ldr	r2, [r3, #32]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	639a      	str	r2, [r3, #56]	@ 0x38
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2200      	movs	r2, #0
 8000770:	641a      	str	r2, [r3, #64]	@ 0x40
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	645a      	str	r2, [r3, #68]	@ 0x44
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2200      	movs	r2, #0
 800077e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2200      	movs	r2, #0
 800078e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2200      	movs	r2, #0
 8000796:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2213      	movs	r2, #19
 800079e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	220a      	movs	r2, #10
 80007a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3354      	adds	r3, #84	@ 0x54
 80007ac:	2230      	movs	r2, #48	@ 0x30
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f00b fdcd 	bl	800c350 <memset>
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2200      	movs	r2, #0
 80007ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2200      	movs	r2, #0
 80007c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2200      	movs	r2, #0
 80007ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f241 0268 	movw	r2, #4200	@ 0x1068
 80007d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2200      	movs	r2, #0
 80007dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2200      	movs	r2, #0
 80007e4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2200      	movs	r2, #0
 80007ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2200      	movs	r2, #0
 80007f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2200      	movs	r2, #0
 80007fc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	33a8      	adds	r3, #168	@ 0xa8
 8000804:	224c      	movs	r2, #76	@ 0x4c
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f00b fda1 	bl	800c350 <memset>
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	33f4      	adds	r3, #244	@ 0xf4
 8000812:	2298      	movs	r2, #152	@ 0x98
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f00b fd9a 	bl	800c350 <memset>
	CANID = _ID;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	601a      	str	r2, [r3, #0]
	LIMIT_MAX_V = _MAXV;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	605a      	str	r2, [r3, #4]
	LIMIT_MIN_V = _MINV;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	683a      	ldr	r2, [r7, #0]
 800082c:	609a      	str	r2, [r3, #8]
	LIMIT_MAX_T = _MAXT;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	6a3a      	ldr	r2, [r7, #32]
 8000832:	60da      	str	r2, [r3, #12]
	NUM_CELLS = _NUMCELLS;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800083a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

	uint32_t now = HAL_GetTick();
 800083e:	f002 fbdd 	bl	8002ffc <HAL_GetTick>
 8000842:	6178      	str	r0, [r7, #20]

	time_lim_plotted_volts = now + _LAG_V;
 8000844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	441a      	add	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	631a      	str	r2, [r3, #48]	@ 0x30
	time_lim_sent_volts = now + _LAG_V;
 800084e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	441a      	add	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	635a      	str	r2, [r3, #52]	@ 0x34
	time_lim_received_volts = now + TIME_LIM_RECV_VOLTS + _LAG_V;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	6a1a      	ldr	r2, [r3, #32]
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	441a      	add	r2, r3
 8000860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000862:	441a      	add	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	639a      	str	r2, [r3, #56]	@ 0x38

	time_lim_plotted_temps = now + _LAG_T;
 8000868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	441a      	add	r2, r3
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	63da      	str	r2, [r3, #60]	@ 0x3c
	time_lim_sent_temps = now + _LAG_T;
 8000872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	441a      	add	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	641a      	str	r2, [r3, #64]	@ 0x40
	time_lim_received_temps = now + TIME_LIM_RECV_TEMPS + _LAG_T;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	441a      	add	r2, r3
 8000884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000886:	441a      	add	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	645a      	str	r2, [r3, #68]	@ 0x44
}
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	4618      	mov	r0, r3
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <_ZN7BMS_MOD12voltage_infoEPc>:

/*********************************************************************************************************
 ** Function name:           info
 ** Descriptions:            Function for printing the class data
 *********************************************************************************************************/
void BMS_MOD::voltage_info(char *buffer) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 80008a2:	f001 fc39 	bl	8002118 <getUARTState>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b20      	cmp	r3, #32
 80008aa:	bf0c      	ite	eq
 80008ac:	2301      	moveq	r3, #1
 80008ae:	2300      	movne	r3, #0
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 8083 	beq.w	80009be <_ZN7BMS_MOD12voltage_infoEPc+0x126>
		print((char*) "\n***********************");
 80008b8:	4851      	ldr	r0, [pc, #324]	@ (8000a00 <_ZN7BMS_MOD12voltage_infoEPc+0x168>)
 80008ba:	f001 fbd3 	bl	8002064 <print>
		print((char*) "         BMS");
 80008be:	4851      	ldr	r0, [pc, #324]	@ (8000a04 <_ZN7BMS_MOD12voltage_infoEPc+0x16c>)
 80008c0:	f001 fbd0 	bl	8002064 <print>
		print((char*) "***********************");
 80008c4:	4850      	ldr	r0, [pc, #320]	@ (8000a08 <_ZN7BMS_MOD12voltage_infoEPc+0x170>)
 80008c6:	f001 fbcd 	bl	8002064 <print>
		sprintf(buffer, " - ERROR:     %i", error_volt);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80008d0:	461a      	mov	r2, r3
 80008d2:	494e      	ldr	r1, [pc, #312]	@ (8000a0c <_ZN7BMS_MOD12voltage_infoEPc+0x174>)
 80008d4:	6838      	ldr	r0, [r7, #0]
 80008d6:	f00b fd19 	bl	800c30c <siprintf>
		print(buffer);
 80008da:	6838      	ldr	r0, [r7, #0]
 80008dc:	f001 fbc2 	bl	8002064 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	494a      	ldr	r1, [pc, #296]	@ (8000a10 <_ZN7BMS_MOD12voltage_infoEPc+0x178>)
 80008e8:	6838      	ldr	r0, [r7, #0]
 80008ea:	f00b fd0f 	bl	800c30c <siprintf>
		print(buffer);
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	f001 fbb8 	bl	8002064 <print>
		sprintf(buffer, " - MAX V =    %i mV", MAX_V);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	691b      	ldr	r3, [r3, #16]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4946      	ldr	r1, [pc, #280]	@ (8000a14 <_ZN7BMS_MOD12voltage_infoEPc+0x17c>)
 80008fc:	6838      	ldr	r0, [r7, #0]
 80008fe:	f00b fd05 	bl	800c30c <siprintf>
		print(buffer);
 8000902:	6838      	ldr	r0, [r7, #0]
 8000904:	f001 fbae 	bl	8002064 <print>
		sprintf(buffer, " - MIN V =    %i mV", MIN_V);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800090e:	461a      	mov	r2, r3
 8000910:	4941      	ldr	r1, [pc, #260]	@ (8000a18 <_ZN7BMS_MOD12voltage_infoEPc+0x180>)
 8000912:	6838      	ldr	r0, [r7, #0]
 8000914:	f00b fcfa 	bl	800c30c <siprintf>
		print(buffer);
 8000918:	6838      	ldr	r0, [r7, #0]
 800091a:	f001 fba3 	bl	8002064 <print>
		print((char*) "-----------------------");
 800091e:	483f      	ldr	r0, [pc, #252]	@ (8000a1c <_ZN7BMS_MOD12voltage_infoEPc+0x184>)
 8000920:	f001 fba0 	bl	8002064 <print>
		sprintf(buffer, "VOLTS (mV): [%i", cellVoltagemV[0]);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800092a:	461a      	mov	r2, r3
 800092c:	493c      	ldr	r1, [pc, #240]	@ (8000a20 <_ZN7BMS_MOD12voltage_infoEPc+0x188>)
 800092e:	6838      	ldr	r0, [r7, #0]
 8000930:	f00b fcec 	bl	800c30c <siprintf>
		printnl(buffer);
 8000934:	6838      	ldr	r0, [r7, #0]
 8000936:	f001 fbb3 	bl	80020a0 <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	e00f      	b.n	8000960 <_ZN7BMS_MOD12voltage_infoEPc+0xc8>
			sprintf(buffer, ", %i", cellVoltagemV[i]);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	322a      	adds	r2, #42	@ 0x2a
 8000946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094a:	461a      	mov	r2, r3
 800094c:	4935      	ldr	r1, [pc, #212]	@ (8000a24 <_ZN7BMS_MOD12voltage_infoEPc+0x18c>)
 800094e:	6838      	ldr	r0, [r7, #0]
 8000950:	f00b fcdc 	bl	800c30c <siprintf>
			printnl(buffer);
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f001 fba3 	bl	80020a0 <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3301      	adds	r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000966:	461a      	mov	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4293      	cmp	r3, r2
 800096c:	dbe8      	blt.n	8000940 <_ZN7BMS_MOD12voltage_infoEPc+0xa8>
		}

		for (int i = 0; i < NUM_CELLS; i++) {
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	e00e      	b.n	8000992 <_ZN7BMS_MOD12voltage_infoEPc+0xfa>
			voltage_acum += cellVoltagemV[i];
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	312a      	adds	r1, #42	@ 0x2a
 8000980:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000984:	441a      	add	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		for (int i = 0; i < NUM_CELLS; i++) {
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	3301      	adds	r3, #1
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000998:	461a      	mov	r2, r3
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	4293      	cmp	r3, r2
 800099e:	dbe9      	blt.n	8000974 <_ZN7BMS_MOD12voltage_infoEPc+0xdc>
		}

		print((char*) "]");
 80009a0:	4821      	ldr	r0, [pc, #132]	@ (8000a28 <_ZN7BMS_MOD12voltage_infoEPc+0x190>)
 80009a2:	f001 fb5f 	bl	8002064 <print>
		sprintf(buffer, " - V(max) = %i mV || V(min) = %i", MAX_V, MIN_V);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	691a      	ldr	r2, [r3, #16]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009b0:	491e      	ldr	r1, [pc, #120]	@ (8000a2c <_ZN7BMS_MOD12voltage_infoEPc+0x194>)
 80009b2:	6838      	ldr	r0, [r7, #0]
 80009b4:	f00b fcaa 	bl	800c30c <siprintf>
		print(buffer);
 80009b8:	6838      	ldr	r0, [r7, #0]
 80009ba:	f001 fb53 	bl	8002064 <print>
	}
	sprintf(buffer, "- BALANCING V = %i mV", BALANCING_V);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009c4:	461a      	mov	r2, r3
 80009c6:	491a      	ldr	r1, [pc, #104]	@ (8000a30 <_ZN7BMS_MOD12voltage_infoEPc+0x198>)
 80009c8:	6838      	ldr	r0, [r7, #0]
 80009ca:	f00b fc9f 	bl	800c30c <siprintf>
	print(buffer);
 80009ce:	6838      	ldr	r0, [r7, #0]
 80009d0:	f001 fb48 	bl	8002064 <print>

	sprintf(buffer, "- STACK VOLTAGE = %i V", voltage_acum / 1000);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009da:	4a16      	ldr	r2, [pc, #88]	@ (8000a34 <_ZN7BMS_MOD12voltage_infoEPc+0x19c>)
 80009dc:	fb82 1203 	smull	r1, r2, r2, r3
 80009e0:	1192      	asrs	r2, r2, #6
 80009e2:	17db      	asrs	r3, r3, #31
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	4913      	ldr	r1, [pc, #76]	@ (8000a38 <_ZN7BMS_MOD12voltage_infoEPc+0x1a0>)
 80009ea:	6838      	ldr	r0, [r7, #0]
 80009ec:	f00b fc8e 	bl	800c30c <siprintf>
	print(buffer);
 80009f0:	6838      	ldr	r0, [r7, #0]
 80009f2:	f001 fb37 	bl	8002064 <print>
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	0800cc64 	.word	0x0800cc64
 8000a04:	0800cc80 	.word	0x0800cc80
 8000a08:	0800cc90 	.word	0x0800cc90
 8000a0c:	0800cca8 	.word	0x0800cca8
 8000a10:	0800ccbc 	.word	0x0800ccbc
 8000a14:	0800ccd0 	.word	0x0800ccd0
 8000a18:	0800cce4 	.word	0x0800cce4
 8000a1c:	0800ccf8 	.word	0x0800ccf8
 8000a20:	0800cd10 	.word	0x0800cd10
 8000a24:	0800cd20 	.word	0x0800cd20
 8000a28:	0800cd28 	.word	0x0800cd28
 8000a2c:	0800cd2c 	.word	0x0800cd2c
 8000a30:	0800cd50 	.word	0x0800cd50
 8000a34:	10624dd3 	.word	0x10624dd3
 8000a38:	0800cd68 	.word	0x0800cd68

08000a3c <_ZN7BMS_MOD16temperature_infoEPc>:

// ********************************************************************************************************
// **Function name:           info
// **Descriptions:            Function for printing the class data
// **********************************************************************************************************
void BMS_MOD::temperature_info(char *buffer) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
	if (getUARTState() == HAL_UART_STATE_READY) //Send the message just if there is a serial por connected
 8000a46:	f001 fb67 	bl	8002118 <getUARTState>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b20      	cmp	r3, #32
 8000a4e:	bf0c      	ite	eq
 8000a50:	2301      	moveq	r3, #1
 8000a52:	2300      	movne	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d063      	beq.n	8000b22 <_ZN7BMS_MOD16temperature_infoEPc+0xe6>
	{
		print((char*) "\n***********************");
 8000a5a:	4834      	ldr	r0, [pc, #208]	@ (8000b2c <_ZN7BMS_MOD16temperature_infoEPc+0xf0>)
 8000a5c:	f001 fb02 	bl	8002064 <print>
		print((char*) "     Temperatures");
 8000a60:	4833      	ldr	r0, [pc, #204]	@ (8000b30 <_ZN7BMS_MOD16temperature_infoEPc+0xf4>)
 8000a62:	f001 faff 	bl	8002064 <print>
		print((char*) "***********************");
 8000a66:	4833      	ldr	r0, [pc, #204]	@ (8000b34 <_ZN7BMS_MOD16temperature_infoEPc+0xf8>)
 8000a68:	f001 fafc 	bl	8002064 <print>
		sprintf(buffer, " - ERROR:     %i", error_temp);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000a72:	461a      	mov	r2, r3
 8000a74:	4930      	ldr	r1, [pc, #192]	@ (8000b38 <_ZN7BMS_MOD16temperature_infoEPc+0xfc>)
 8000a76:	6838      	ldr	r0, [r7, #0]
 8000a78:	f00b fc48 	bl	800c30c <siprintf>
		print(buffer);
 8000a7c:	6838      	ldr	r0, [r7, #0]
 8000a7e:	f001 faf1 	bl	8002064 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID + 20);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3314      	adds	r3, #20
 8000a88:	461a      	mov	r2, r3
 8000a8a:	492c      	ldr	r1, [pc, #176]	@ (8000b3c <_ZN7BMS_MOD16temperature_infoEPc+0x100>)
 8000a8c:	6838      	ldr	r0, [r7, #0]
 8000a8e:	f00b fc3d 	bl	800c30c <siprintf>
		print(buffer);
 8000a92:	6838      	ldr	r0, [r7, #0]
 8000a94:	f001 fae6 	bl	8002064 <print>
		sprintf(buffer, " - MAX T =    %i ºC", MAX_T);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4927      	ldr	r1, [pc, #156]	@ (8000b40 <_ZN7BMS_MOD16temperature_infoEPc+0x104>)
 8000aa2:	6838      	ldr	r0, [r7, #0]
 8000aa4:	f00b fc32 	bl	800c30c <siprintf>
		print(buffer);
 8000aa8:	6838      	ldr	r0, [r7, #0]
 8000aaa:	f001 fadb 	bl	8002064 <print>
		sprintf(buffer, " - MIN T =    %i ºC", MIN_T);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4923      	ldr	r1, [pc, #140]	@ (8000b44 <_ZN7BMS_MOD16temperature_infoEPc+0x108>)
 8000ab8:	6838      	ldr	r0, [r7, #0]
 8000aba:	f00b fc27 	bl	800c30c <siprintf>
		print(buffer);
 8000abe:	6838      	ldr	r0, [r7, #0]
 8000ac0:	f001 fad0 	bl	8002064 <print>
		sprintf(buffer, " - LIM T =    %i ºC", LIMIT_MAX_T);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	491f      	ldr	r1, [pc, #124]	@ (8000b48 <_ZN7BMS_MOD16temperature_infoEPc+0x10c>)
 8000acc:	6838      	ldr	r0, [r7, #0]
 8000ace:	f00b fc1d 	bl	800c30c <siprintf>
		print((char*) "-----------------------");
 8000ad2:	481e      	ldr	r0, [pc, #120]	@ (8000b4c <_ZN7BMS_MOD16temperature_infoEPc+0x110>)
 8000ad4:	f001 fac6 	bl	8002064 <print>
		sprintf(buffer, "Temperatures (ºC): [%i", cellTemperature[0]);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ade:	461a      	mov	r2, r3
 8000ae0:	491b      	ldr	r1, [pc, #108]	@ (8000b50 <_ZN7BMS_MOD16temperature_infoEPc+0x114>)
 8000ae2:	6838      	ldr	r0, [r7, #0]
 8000ae4:	f00b fc12 	bl	800c30c <siprintf>
		printnl(buffer);
 8000ae8:	6838      	ldr	r0, [r7, #0]
 8000aea:	f001 fad9 	bl	80020a0 <printnl>
		for (int i = 1; i < 38; i++) {
 8000aee:	2301      	movs	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	e010      	b.n	8000b16 <_ZN7BMS_MOD16temperature_infoEPc+0xda>
			sprintf(buffer, ", %i", cellTemperature[i]);
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	333c      	adds	r3, #60	@ 0x3c
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4914      	ldr	r1, [pc, #80]	@ (8000b54 <_ZN7BMS_MOD16temperature_infoEPc+0x118>)
 8000b04:	6838      	ldr	r0, [r7, #0]
 8000b06:	f00b fc01 	bl	800c30c <siprintf>
			printnl(buffer);
 8000b0a:	6838      	ldr	r0, [r7, #0]
 8000b0c:	f001 fac8 	bl	80020a0 <printnl>
		for (int i = 1; i < 38; i++) {
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	3301      	adds	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2b25      	cmp	r3, #37	@ 0x25
 8000b1a:	ddeb      	ble.n	8000af4 <_ZN7BMS_MOD16temperature_infoEPc+0xb8>
		}
		print((char*) "]");
 8000b1c:	480e      	ldr	r0, [pc, #56]	@ (8000b58 <_ZN7BMS_MOD16temperature_infoEPc+0x11c>)
 8000b1e:	f001 faa1 	bl	8002064 <print>

	}
}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	0800cc64 	.word	0x0800cc64
 8000b30:	0800cd80 	.word	0x0800cd80
 8000b34:	0800cc90 	.word	0x0800cc90
 8000b38:	0800cca8 	.word	0x0800cca8
 8000b3c:	0800ccbc 	.word	0x0800ccbc
 8000b40:	0800cd94 	.word	0x0800cd94
 8000b44:	0800cdac 	.word	0x0800cdac
 8000b48:	0800cdc4 	.word	0x0800cdc4
 8000b4c:	0800ccf8 	.word	0x0800ccf8
 8000b50:	0800cddc 	.word	0x0800cddc
 8000b54:	0800cd20 	.word	0x0800cd20
 8000b58:	0800cd28 	.word	0x0800cd28

08000b5c <_ZN7BMS_MOD5parseEmPhm>:

/*********************************************************************************************************
 ** Function name:           parse
 ** Descriptions:            Function for parsing the received data via CAN protocol
 *********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	603b      	str	r3, [r7, #0]
	if (id > CANID && id < CANID + 30) {
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	f240 8113 	bls.w	8000d9c <_ZN7BMS_MOD5parseEmPhm+0x240>
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	331e      	adds	r3, #30
 8000b7c:	68ba      	ldr	r2, [r7, #8]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	f080 810c 	bcs.w	8000d9c <_ZN7BMS_MOD5parseEmPhm+0x240>
		int m = id % CANID;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b8e:	fb01 f202 	mul.w	r2, r1, r2
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	617b      	str	r3, [r7, #20]
		int pos = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
		if (m >= 1 && m <= 5) {
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f340 8088 	ble.w	8000cb2 <_ZN7BMS_MOD5parseEmPhm+0x156>
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	2b05      	cmp	r3, #5
 8000ba6:	f300 8084 	bgt.w	8000cb2 <_ZN7BMS_MOD5parseEmPhm+0x156>
			time_lim_received_volts = t + TIME_LIM_RECV_VOLTS;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	6a1a      	ldr	r2, [r3, #32]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	441a      	add	r2, r3
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	639a      	str	r2, [r3, #56]	@ 0x38

			for (int i = 0; i < 4; i++) {
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bba:	e03c      	b.n	8000c36 <_ZN7BMS_MOD5parseEmPhm+0xda>
				pos = (m - 1) * 4 + i;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bc4:	4413      	add	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
				if (pos >= 19)
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	2b12      	cmp	r3, #18
 8000bcc:	dc37      	bgt.n	8000c3e <_ZN7BMS_MOD5parseEmPhm+0xe2>
					break;

				cellVoltagemV[pos] = (buf[2 * i] << 8) | buf[2 * i + 1];
 8000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	021b      	lsls	r3, r3, #8
 8000bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bde:	0052      	lsls	r2, r2, #1
 8000be0:	3201      	adds	r2, #1
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	440a      	add	r2, r1
 8000be6:	7812      	ldrb	r2, [r2, #0]
 8000be8:	ea43 0102 	orr.w	r1, r3, r2
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	322a      	adds	r2, #42	@ 0x2a
 8000bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				 //error_volt = BMS_OK;
				 } else {
				 flag_error_volt[pos] = 0;
				 }*/

				if ((cellVoltagemV[pos] > LIMIT_MAX_V) && pos < NUM_CELLS) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	322a      	adds	r2, #42	@ 0x2a
 8000bfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dd13      	ble.n	8000c30 <_ZN7BMS_MOD5parseEmPhm+0xd4>
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000c0e:	461a      	mov	r2, r3
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4293      	cmp	r3, r2
 8000c14:	da0c      	bge.n	8000c30 <_ZN7BMS_MOD5parseEmPhm+0xd4>
					flag_error_volt[pos]++;
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	3314      	adds	r3, #20
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	68f9      	ldr	r1, [r7, #12]
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	3314      	adds	r3, #20
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	605a      	str	r2, [r3, #4]
			for (int i = 0; i < 4; i++) {
 8000c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c32:	3301      	adds	r3, #1
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	ddbf      	ble.n	8000bbc <_ZN7BMS_MOD5parseEmPhm+0x60>
 8000c3c:	e000      	b.n	8000c40 <_ZN7BMS_MOD5parseEmPhm+0xe4>
					break;
 8000c3e:	bf00      	nop
					//} else {
					//flag_error_volt[pos] = 0;
				}
			}

			MAX_V = cellVoltagemV[0];
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	611a      	str	r2, [r3, #16]
			MIN_V = cellVoltagemV[0];
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			for (int i = 1; i < 19; i++) {
 8000c56:	2301      	movs	r3, #1
 8000c58:	623b      	str	r3, [r7, #32]
 8000c5a:	e025      	b.n	8000ca8 <_ZN7BMS_MOD5parseEmPhm+0x14c>
				if (cellVoltagemV[i] > MAX_V)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6a3a      	ldr	r2, [r7, #32]
 8000c60:	322a      	adds	r2, #42	@ 0x2a
 8000c62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	dd07      	ble.n	8000c7e <_ZN7BMS_MOD5parseEmPhm+0x122>
					MAX_V = cellVoltagemV[i];
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6a3a      	ldr	r2, [r7, #32]
 8000c72:	322a      	adds	r2, #42	@ 0x2a
 8000c74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	e011      	b.n	8000ca2 <_ZN7BMS_MOD5parseEmPhm+0x146>
				else if (cellVoltagemV[i] < MIN_V)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	6a3a      	ldr	r2, [r7, #32]
 8000c82:	322a      	adds	r2, #42	@ 0x2a
 8000c84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	da07      	bge.n	8000ca2 <_ZN7BMS_MOD5parseEmPhm+0x146>
					MIN_V = cellVoltagemV[i];
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6a3a      	ldr	r2, [r7, #32]
 8000c96:	322a      	adds	r2, #42	@ 0x2a
 8000c98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			for (int i = 1; i < 19; i++) {
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	623b      	str	r3, [r7, #32]
 8000ca8:	6a3b      	ldr	r3, [r7, #32]
 8000caa:	2b12      	cmp	r3, #18
 8000cac:	ddd6      	ble.n	8000c5c <_ZN7BMS_MOD5parseEmPhm+0x100>
			}

			return true;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e075      	b.n	8000d9e <_ZN7BMS_MOD5parseEmPhm+0x242>

		} else if (m >= 21 && m <= 25) {
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	2b14      	cmp	r3, #20
 8000cb6:	dd71      	ble.n	8000d9c <_ZN7BMS_MOD5parseEmPhm+0x240>
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	2b19      	cmp	r3, #25
 8000cbc:	dc6e      	bgt.n	8000d9c <_ZN7BMS_MOD5parseEmPhm+0x240>
			// m = 21 → packet 0, m = 25 → packet 4
			time_lim_received_temps = t + TIME_LIM_RECV_TEMPS;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	441a      	add	r2, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	645a      	str	r2, [r3, #68]	@ 0x44
			if (flag_charger == 1)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d104      	bne.n	8000cde <_ZN7BMS_MOD5parseEmPhm+0x182>
				module_send_message_CAN1(id, buf, 8);
 8000cd4:	2208      	movs	r2, #8
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	68b8      	ldr	r0, [r7, #8]
 8000cda:	f001 f961 	bl	8001fa0 <module_send_message_CAN1>

			for (int i = 0; i < 8; i++) {
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	e016      	b.n	8000d12 <_ZN7BMS_MOD5parseEmPhm+0x1b6>
				pos = (m - 21) * 8 + i;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	3b15      	subs	r3, #21
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	69fa      	ldr	r2, [r7, #28]
 8000cec:	4413      	add	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
				if (pos >= 38)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	2b25      	cmp	r3, #37	@ 0x25
 8000cf4:	dc11      	bgt.n	8000d1a <_ZN7BMS_MOD5parseEmPhm+0x1be>
					break;

				cellTemperature[pos] = buf[i];
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	333c      	adds	r3, #60	@ 0x3c
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	6059      	str	r1, [r3, #4]
			for (int i = 0; i < 8; i++) {
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	61fb      	str	r3, [r7, #28]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	2b07      	cmp	r3, #7
 8000d16:	dde5      	ble.n	8000ce4 <_ZN7BMS_MOD5parseEmPhm+0x188>
 8000d18:	e000      	b.n	8000d1c <_ZN7BMS_MOD5parseEmPhm+0x1c0>
					break;
 8000d1a:	bf00      	nop
				//if (cellTemperature[pos] > LIMIT_MAX_T)
				//	error_temp = BMS_ERROR_TEMP;

			}

			MAX_T = cellTemperature[0];
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
			MIN_T = cellTemperature[0];
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			for (int i = 0; i < 38; i++) {
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	e02b      	b.n	8000d92 <_ZN7BMS_MOD5parseEmPhm+0x236>
				if (cellTemperature[i] > MAX_T)
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	333c      	adds	r3, #60	@ 0x3c
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dd09      	ble.n	8000d64 <_ZN7BMS_MOD5parseEmPhm+0x208>
					MAX_T = cellTemperature[i];
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	333c      	adds	r3, #60	@ 0x3c
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8000d62:	e013      	b.n	8000d8c <_ZN7BMS_MOD5parseEmPhm+0x230>
				else if (cellTemperature[i] < MIN_T)
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	333c      	adds	r3, #60	@ 0x3c
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000d76:	429a      	cmp	r2, r3
 8000d78:	da08      	bge.n	8000d8c <_ZN7BMS_MOD5parseEmPhm+0x230>
					MIN_T = cellTemperature[i];
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	333c      	adds	r3, #60	@ 0x3c
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			for (int i = 0; i < 38; i++) {
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2b25      	cmp	r3, #37	@ 0x25
 8000d96:	ddd0      	ble.n	8000d3a <_ZN7BMS_MOD5parseEmPhm+0x1de>
			}

			return true;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e000      	b.n	8000d9e <_ZN7BMS_MOD5parseEmPhm+0x242>
			error_temp = 0;
		}*/

	}

	return false;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3728      	adds	r7, #40	@ 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_ZN7BMS_MOD13query_voltageEmPc>:

/*********************************************************************************************************
 ** Function name:           query_voltage
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/
int BMS_MOD::query_voltage(uint32_t time, char *buffer) {
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
	// Shunt voltage in milivolts

	if (get_state() == charge) {
 8000db2:	f001 f9e1 	bl	8002178 <_Z9get_statev>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	bf0c      	ite	eq
 8000dbc:	2301      	moveq	r3, #1
 8000dbe:	2300      	movne	r3, #0
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d107      	bne.n	8000dd6 <_ZN7BMS_MOD13query_voltageEmPc+0x30>

	} else {

		//Don't do anything

		message_balancing[0] = 0;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		message_balancing[1] = 0;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
	}

	if (time > time_lim_sent_volts) {
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d91e      	bls.n	8000e1e <_ZN7BMS_MOD13query_voltageEmPc+0x78>
		time_lim_sent_volts += TIME_LIM_SEND_VOLTS;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	441a      	add	r2, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	635a      	str	r2, [r3, #52]	@ 0x34
		if (CANID != 0x00) { //It keeps sending 0x00 and dont know where
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d013      	beq.n	8000e1e <_ZN7BMS_MOD13query_voltageEmPc+0x78>
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6818      	ldr	r0, [r3, #0]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	3348      	adds	r3, #72	@ 0x48
 8000dfe:	2202      	movs	r2, #2
 8000e00:	4619      	mov	r1, r3
 8000e02:	f001 f90f 	bl	8002024 <module_send_message_CAN2>
 8000e06:	4603      	mov	r3, r0
					!= HAL_OK) {
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf14      	ite	ne
 8000e0c:	2301      	movne	r3, #1
 8000e0e:	2300      	moveq	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <_ZN7BMS_MOD13query_voltageEmPc+0x78>
				error_volt = BMS_ERROR_COMMUNICATION;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			}
		}

	}

	if (time > time_lim_received_volts) {
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d904      	bls.n	8000e32 <_ZN7BMS_MOD13query_voltageEmPc+0x8c>

		error_volt = BMS_ERROR_COMMUNICATION;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8000e30:	e003      	b.n	8000e3a <_ZN7BMS_MOD13query_voltageEmPc+0x94>
	}
	else{
		error_volt = BMS_OK;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	}

	if (TIME_LIM_PLOT_VOLTS > 0 && time > time_lim_plotted_volts) {
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00f      	beq.n	8000e62 <_ZN7BMS_MOD13query_voltageEmPc+0xbc>
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d90a      	bls.n	8000e62 <_ZN7BMS_MOD13query_voltageEmPc+0xbc>
		time_lim_plotted_volts += TIME_LIM_PLOT_VOLTS;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	441a      	add	r2, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	631a      	str	r2, [r3, #48]	@ 0x30
		voltage_info(buffer);
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f7ff fd1b 	bl	8000898 <_ZN7BMS_MOD12voltage_infoEPc>
	}

	for (int i = 0; i < NUM_CELLS; i++) {
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	e00e      	b.n	8000e86 <_ZN7BMS_MOD13query_voltageEmPc+0xe0>
		voltage_acum += cellVoltagemV[i];
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6979      	ldr	r1, [r7, #20]
 8000e72:	312a      	adds	r1, #42	@ 0x2a
 8000e74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e78:	441a      	add	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	for (int i = 0; i < NUM_CELLS; i++) {
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	3301      	adds	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	4293      	cmp	r3, r2
 8000e92:	dbe9      	blt.n	8000e68 <_ZN7BMS_MOD13query_voltageEmPc+0xc2>
	}
	return error_volt;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <_ZN7BMS_MOD17query_temperatureEmPc>:
/*********************************************************************************************************
 ** Function name:           query_temperature
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/

int BMS_MOD::query_temperature(uint32_t time, char *buffer) {
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b084      	sub	sp, #16
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
// Function for performing a correct behavior
	if (time > time_lim_sent_temps) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE TEMPERATURES
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d912      	bls.n	8000ede <_ZN7BMS_MOD17query_temperatureEmPc+0x3c>
		time_lim_sent_temps += TIME_LIM_SEND_TEMPS;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec0:	441a      	add	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	641a      	str	r2, [r3, #64]	@ 0x40

		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f103 0014 	add.w	r0, r3, #20
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	334a      	adds	r3, #74	@ 0x4a
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f001 f8a5 	bl	8002024 <module_send_message_CAN2>
 8000eda:	4603      	mov	r3, r0
				!= HAL_OK) {
 8000edc:	2b00      	cmp	r3, #0
			//error_temp = BMS_ERROR_TEMP; // If the message is not sended then, error
		}
	}

	if (time_lim_sent_temps > 0 && time > time_lim_received_temps
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <_ZN7BMS_MOD17query_temperatureEmPc+0x4c>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	429a      	cmp	r2, r3
			&& time - time_lim_received_temps > TIME_LIM_RECV_TEMPS) {
		//error_temp = BMS_ERROR_COMMUNICATION;
	}

	if (TIME_LIM_PLOT_TEMPS > 0 && time > time_lim_plotted_temps) {
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00f      	beq.n	8000f16 <_ZN7BMS_MOD17query_temperatureEmPc+0x74>
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d90a      	bls.n	8000f16 <_ZN7BMS_MOD17query_temperatureEmPc+0x74>
		time_lim_plotted_temps += TIME_LIM_PLOT_TEMPS;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f08:	441a      	add	r2, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	63da      	str	r2, [r3, #60]	@ 0x3c
		temperature_info(buffer);
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f7ff fd93 	bl	8000a3c <_ZN7BMS_MOD16temperature_infoEPc>
	}

	return error_temp;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0

}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2201      	movs	r2, #1
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2202      	movs	r2, #2
 8000f48:	731a      	strb	r2, [r3, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	611a      	str	r2, [r3, #16]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f56:	615a      	str	r2, [r3, #20]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2264      	movs	r2, #100	@ 0x64
 8000f5c:	619a      	str	r2, [r3, #24]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4a18      	ldr	r2, [pc, #96]	@ (8000fc4 <_ZN7CPU_MODC1Emmi+0xa0>)
 8000f62:	61da      	str	r2, [r3, #28]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	621a      	str	r2, [r3, #32]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	69da      	ldr	r2, [r3, #28]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2200      	movs	r2, #0
 8000f84:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6a1a      	ldr	r2, [r3, #32]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	441a      	add	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	441a      	add	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	441a      	add	r2, r3
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	000f4240 	.word	0x000f4240

08000fc8 <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fdc:	d131      	bne.n	8001042 <_ZN7CPU_MOD5parseEmPhm+0x7a>
        error = CPU_OK;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	69da      	ldr	r2, [r3, #28]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	441a      	add	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	7812      	ldrb	r2, [r2, #0]
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800100a:	dd18      	ble.n	800103e <_ZN7CPU_MOD5parseEmPhm+0x76>
            error = CPU_BUS_LINE_OK;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2202      	movs	r2, #2
 8001010:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	330c      	adds	r3, #12
 800101a:	2201      	movs	r2, #1
 800101c:	4619      	mov	r1, r3
 800101e:	f000 ffbf 	bl	8001fa0 <module_send_message_CAN1>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf14      	ite	ne
 8001028:	2301      	movne	r3, #1
 800102a:	2300      	moveq	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d005      	beq.n	800103e <_ZN7CPU_MOD5parseEmPhm+0x76>
                error = CPU_ERROR_COMMUNICATION;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2201      	movs	r2, #1
 8001036:	609a      	str	r2, [r3, #8]
                print((char*)"error message");
 8001038:	4804      	ldr	r0, [pc, #16]	@ (800104c <_ZN7CPU_MOD5parseEmPhm+0x84>)
 800103a:	f001 f813 	bl	8002064 <print>
            }

        }
        return true;
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <_ZN7CPU_MOD5parseEmPhm+0x7c>
    }
    return false;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	0800cedc 	.word	0x0800cedc

08001050 <_ZN7CPU_MOD5queryEmPc>:

// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function to check if i need to send a mesage new mesage and the received mesajes interval are within the limits
// ********************************************************************************************************
int CPU_MOD::query(uint32_t time, char* buffer) {
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
	// Function for performing a correct behaivour
    if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE BMS
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	429a      	cmp	r2, r3
 8001064:	d906      	bls.n	8001074 <_ZN7CPU_MOD5queryEmPc+0x24>
        time_lim_sended += TIME_LIM_SEND;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	441a      	add	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (time > time_lim_received)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	429a      	cmp	r2, r3
 800107c:	d902      	bls.n	8001084 <_ZN7CPU_MOD5queryEmPc+0x34>
        error = CPU_ERROR_COMMUNICATION; ///////Cheking if everything is alright each time
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2201      	movs	r2, #1
 8001082:	609a      	str	r2, [r3, #8]

    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00b      	beq.n	80010a4 <_ZN7CPU_MOD5queryEmPc+0x54>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	429a      	cmp	r2, r3
 8001094:	d906      	bls.n	80010a4 <_ZN7CPU_MOD5queryEmPc+0x54>
        time_lim_plotted += TIME_LIM_PLOT;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6a1a      	ldr	r2, [r3, #32]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	441a      	add	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	621a      	str	r2, [r3, #32]
        //info(buffer);
    }
    return error;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	689b      	ldr	r3, [r3, #8]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_ZN7CPU_MOD11updateStateEi>:

void CPU_MOD::updateState(int s) {
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	731a      	strb	r2, [r3, #12]
    current_state = s;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	611a      	str	r2, [r3, #16]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX)
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2200      	movs	r2, #0
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2200      	movs	r2, #0
 80010f4:	721a      	strb	r2, [r3, #8]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	725a      	strb	r2, [r3, #9]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001120:	621a      	str	r2, [r3, #32]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	22fa      	movs	r2, #250	@ 0xfa
 8001126:	625a      	str	r2, [r3, #36]	@ 0x24
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2232      	movs	r2, #50	@ 0x32
 800112c:	629a      	str	r2, [r3, #40]	@ 0x28
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2232      	movs	r2, #50	@ 0x32
 8001132:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2200      	movs	r2, #0
 8001138:	631a      	str	r2, [r3, #48]	@ 0x30
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2200      	movs	r2, #0
 800113e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	639a      	str	r2, [r3, #56]	@ 0x38
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2200      	movs	r2, #0
 8001150:	641a      	str	r2, [r3, #64]	@ 0x40
{
    CANID = ID;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	605a      	str	r2, [r3, #4]
    C_MAX = _C_MAX;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
    flag_error_current = 1;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2201      	movs	r2, #1
 8001162:	61da      	str	r2, [r3, #28]
}
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4618      	mov	r0, r3
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	0000      	movs	r0, r0
 8001174:	0000      	movs	r0, r0
	...

08001178 <_ZN11Current_MOD5queryEiPc>:
// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char* buffer)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08c      	sub	sp, #48	@ 0x30
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
    error = Current_OK;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2200      	movs	r2, #0
 8001188:	631a      	str	r2, [r3, #48]	@ 0x30
    //printValue(Current);
    Current=(2.5-VoltageV)/0.0057; //Sensitivity is 5,7 mv/A
    */

    int Current1,Current2,Current3,Current4,Current5,Current6,Current7;
    Current1 = readAnalogValue();
 800118a:	f000 ffcf 	bl	800212c <readAnalogValue>
 800118e:	eef0 7a40 	vmov.f32	s15, s0
 8001192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001196:	ee17 3a90 	vmov	r3, s15
 800119a:	62bb      	str	r3, [r7, #40]	@ 0x28
    //HAL_Delay(3);
    Current2 = readAnalogValue();
 800119c:	f000 ffc6 	bl	800212c <readAnalogValue>
 80011a0:	eef0 7a40 	vmov.f32	s15, s0
 80011a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a8:	ee17 3a90 	vmov	r3, s15
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
    //HAL_Delay(3);
    Current3 = readAnalogValue();
 80011ae:	f000 ffbd 	bl	800212c <readAnalogValue>
 80011b2:	eef0 7a40 	vmov.f32	s15, s0
 80011b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ba:	ee17 3a90 	vmov	r3, s15
 80011be:	623b      	str	r3, [r7, #32]
    //HAL_Delay(3);
    Current4 = readAnalogValue();
 80011c0:	f000 ffb4 	bl	800212c <readAnalogValue>
 80011c4:	eef0 7a40 	vmov.f32	s15, s0
 80011c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011cc:	ee17 3a90 	vmov	r3, s15
 80011d0:	61fb      	str	r3, [r7, #28]
    //HAL_Delay(3);
    Current5 = readAnalogValue();
 80011d2:	f000 ffab 	bl	800212c <readAnalogValue>
 80011d6:	eef0 7a40 	vmov.f32	s15, s0
 80011da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011de:	ee17 3a90 	vmov	r3, s15
 80011e2:	61bb      	str	r3, [r7, #24]
    //HAL_Delay(3);
    Current6 = readAnalogValue();
 80011e4:	f000 ffa2 	bl	800212c <readAnalogValue>
 80011e8:	eef0 7a40 	vmov.f32	s15, s0
 80011ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f0:	ee17 3a90 	vmov	r3, s15
 80011f4:	617b      	str	r3, [r7, #20]
    //HAL_Delay(3);
    Current7 = readAnalogValue();
 80011f6:	f000 ff99 	bl	800212c <readAnalogValue>
 80011fa:	eef0 7a40 	vmov.f32	s15, s0
 80011fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001202:	ee17 3a90 	vmov	r3, s15
 8001206:	613b      	str	r3, [r7, #16]
    //HAL_Delay(3);

    Current = (Current1+Current2+Current3+Current4+Current5+Current6+Current7)/7;
 8001208:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120c:	441a      	add	r2, r3
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	441a      	add	r2, r3
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	441a      	add	r2, r3
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	441a      	add	r2, r3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	441a      	add	r2, r3
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4413      	add	r3, r2
 8001222:	4a63      	ldr	r2, [pc, #396]	@ (80013b0 <_ZN11Current_MOD5queryEiPc+0x238>)
 8001224:	fb82 1203 	smull	r1, r2, r2, r3
 8001228:	441a      	add	r2, r3
 800122a:	1092      	asrs	r2, r2, #2
 800122c:	17db      	asrs	r3, r3, #31
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	63da      	str	r2, [r3, #60]	@ 0x3c

    Current = 0.22727 * Current - 489.455 + 0.5;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001240:	ed9f 6b55 	vldr	d6, [pc, #340]	@ 8001398 <_ZN11Current_MOD5queryEiPc+0x220>
 8001244:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001248:	ed9f 6b55 	vldr	d6, [pc, #340]	@ 80013a0 <_ZN11Current_MOD5queryEiPc+0x228>
 800124c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001250:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001254:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001258:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800125c:	ee17 2a90 	vmov	r2, s15
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	63da      	str	r2, [r3, #60]	@ 0x3c

    printValue(Current);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001268:	4618      	mov	r0, r3
 800126a:	f000 ff37 	bl	80020dc <printValue>
    //printValue(Current);

    if(Current > C_MAX*0.8 && Current < C_MAX)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001272:	ee07 3a90 	vmov	s15, r3
 8001276:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001286:	ed9f 5b48 	vldr	d5, [pc, #288]	@ 80013a8 <_ZN11Current_MOD5queryEiPc+0x230>
 800128a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800128e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001296:	dd11      	ble.n	80012bc <_ZN11Current_MOD5queryEiPc+0x144>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	da0b      	bge.n	80012bc <_ZN11Current_MOD5queryEiPc+0x144>
    {
        if(flag_error_current == 0) module_send_message_NoExtId_CAN1(0x500,message,1); //If current between 80 and 100% of maximun, sends alert
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d107      	bne.n	80012bc <_ZN11Current_MOD5queryEiPc+0x144>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	3308      	adds	r3, #8
 80012b0:	2201      	movs	r2, #1
 80012b2:	4619      	mov	r1, r3
 80012b4:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80012b8:	f000 fe94 	bl	8001fe4 <module_send_message_NoExtId_CAN1>
    }

    if (Current > C_MAX)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	dd18      	ble.n	80012fa <_ZN11Current_MOD5queryEiPc+0x182>
    {
        if (flag_error_current == 1) {
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d107      	bne.n	80012e0 <_ZN11Current_MOD5queryEiPc+0x168>
        	module_send_message_NoExtId_CAN1(0x501, message, 2); //If current over maximun, sends alert
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3308      	adds	r3, #8
 80012d4:	2202      	movs	r2, #2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f240 5001 	movw	r0, #1281	@ 0x501
 80012dc:	f000 fe82 	bl	8001fe4 <module_send_message_NoExtId_CAN1>
        }

        flag_error_current++;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	61da      	str	r2, [r3, #28]

        if (flag_charger != 1 || flag_charger == 1) //Only cut the AMS if accu not connected to charger, during charging the current control is on charger
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d119      	bne.n	8001326 <_ZN11Current_MOD5queryEiPc+0x1ae>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	e015      	b.n	8001326 <_ZN11Current_MOD5queryEiPc+0x1ae>
            }
        }
    }
    else
    {
        if (flag_error_current != 0)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00e      	beq.n	8001320 <_ZN11Current_MOD5queryEiPc+0x1a8>
		for (int i = 0; i < 5; i++)
 8001302:	2300      	movs	r3, #0
 8001304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001306:	e008      	b.n	800131a <_ZN11Current_MOD5queryEiPc+0x1a2>
		{
			module_send_message_NoExtId_CAN1(0x502, 0, 2); //If current normal, sends green flag
 8001308:	2202      	movs	r2, #2
 800130a:	2100      	movs	r1, #0
 800130c:	f240 5002 	movw	r0, #1282	@ 0x502
 8001310:	f000 fe68 	bl	8001fe4 <module_send_message_NoExtId_CAN1>
		for (int i = 0; i < 5; i++)
 8001314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001316:	3301      	adds	r3, #1
 8001318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800131a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800131c:	2b04      	cmp	r3, #4
 800131e:	ddf3      	ble.n	8001308 <_ZN11Current_MOD5queryEiPc+0x190>
		}
        flag_error_current = 0;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
    }


    if (time > time_lim_sended)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	429a      	cmp	r2, r3
 800132e:	dd16      	ble.n	800135e <_ZN11Current_MOD5queryEiPc+0x1e6>
    {
        time_lim_sended += TIME_LIM_SEND;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001338:	441a      	add	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	62da      	str	r2, [r3, #44]	@ 0x2c
        message[0] = 0;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	721a      	strb	r2, [r3, #8]
        message[1] = Current & 0xFF;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001348:	b2da      	uxtb	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	725a      	strb	r2, [r3, #9]
        module_send_message_NoExtId_CAN1(CANID, message, 2); //Sends current through CAN each interval of ms
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6858      	ldr	r0, [r3, #4]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	3308      	adds	r3, #8
 8001356:	2202      	movs	r2, #2
 8001358:	4619      	mov	r1, r3
 800135a:	f000 fe43 	bl	8001fe4 <module_send_message_NoExtId_CAN1>
    }


    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	2b00      	cmp	r3, #0
 8001364:	dd0f      	ble.n	8001386 <_ZN11Current_MOD5queryEiPc+0x20e>
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	429a      	cmp	r2, r3
 800136e:	dd0a      	ble.n	8001386 <_ZN11Current_MOD5queryEiPc+0x20e>
    {
        time_lim_plotted += TIME_LIM_PLOT;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	441a      	add	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	629a      	str	r2, [r3, #40]	@ 0x28
        info(buffer);
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f000 f817 	bl	80013b4 <_ZN11Current_MOD4infoEPc>

    }

    
    return error;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 800138a:	4618      	mov	r0, r3
 800138c:	3730      	adds	r7, #48	@ 0x30
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	f3af 8000 	nop.w
 8001398:	f0ae5365 	.word	0xf0ae5365
 800139c:	3fcd172e 	.word	0x3fcd172e
 80013a0:	ae147ae1 	.word	0xae147ae1
 80013a4:	407e9747 	.word	0x407e9747
 80013a8:	9999999a 	.word	0x9999999a
 80013ac:	3fe99999 	.word	0x3fe99999
 80013b0:	92492493 	.word	0x92492493

080013b4 <_ZN11Current_MOD4infoEPc>:

// ********************************************************************************************************
// **Function name:           info
// **Descriptions:            Function for printing the class data
// **********************************************************************************************************
void Current_MOD::info(char* buffer) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
    if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 80013be:	f000 feab 	bl	8002118 <getUARTState>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b20      	cmp	r3, #32
 80013c6:	bf0c      	ite	eq
 80013c8:	2301      	moveq	r3, #1
 80013ca:	2300      	movne	r3, #0
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d043      	beq.n	800145a <_ZN11Current_MOD4infoEPc+0xa6>
		sprintf(buffer, "\n***********************\n");
 80013d2:	4924      	ldr	r1, [pc, #144]	@ (8001464 <_ZN11Current_MOD4infoEPc+0xb0>)
 80013d4:	6838      	ldr	r0, [r7, #0]
 80013d6:	f00a ff99 	bl	800c30c <siprintf>
		print(buffer);
 80013da:	6838      	ldr	r0, [r7, #0]
 80013dc:	f000 fe42 	bl	8002064 <print>
		sprintf(buffer, "         Current\n");
 80013e0:	4921      	ldr	r1, [pc, #132]	@ (8001468 <_ZN11Current_MOD4infoEPc+0xb4>)
 80013e2:	6838      	ldr	r0, [r7, #0]
 80013e4:	f00a ff92 	bl	800c30c <siprintf>
		print(buffer);
 80013e8:	6838      	ldr	r0, [r7, #0]
 80013ea:	f000 fe3b 	bl	8002064 <print>
		sprintf(buffer, "***********************\n");
 80013ee:	491f      	ldr	r1, [pc, #124]	@ (800146c <_ZN11Current_MOD4infoEPc+0xb8>)
 80013f0:	6838      	ldr	r0, [r7, #0]
 80013f2:	f00a ff8b 	bl	800c30c <siprintf>
		print(buffer);
 80013f6:	6838      	ldr	r0, [r7, #0]
 80013f8:	f000 fe34 	bl	8002064 <print>
		sprintf(buffer, " - ERROR:     %i\n", error);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001400:	461a      	mov	r2, r3
 8001402:	491b      	ldr	r1, [pc, #108]	@ (8001470 <_ZN11Current_MOD4infoEPc+0xbc>)
 8001404:	6838      	ldr	r0, [r7, #0]
 8001406:	f00a ff81 	bl	800c30c <siprintf>
		print(buffer);
 800140a:	6838      	ldr	r0, [r7, #0]
 800140c:	f000 fe2a 	bl	8002064 <print>
		sprintf(buffer, " - CAN ID:    0x%lx\n", CANID);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	461a      	mov	r2, r3
 8001416:	4917      	ldr	r1, [pc, #92]	@ (8001474 <_ZN11Current_MOD4infoEPc+0xc0>)
 8001418:	6838      	ldr	r0, [r7, #0]
 800141a:	f00a ff77 	bl	800c30c <siprintf>
		print(buffer);
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f000 fe20 	bl	8002064 <print>
		sprintf(buffer, " - LIM C =    %i A\n", C_MAX);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4913      	ldr	r1, [pc, #76]	@ (8001478 <_ZN11Current_MOD4infoEPc+0xc4>)
 800142c:	6838      	ldr	r0, [r7, #0]
 800142e:	f00a ff6d 	bl	800c30c <siprintf>
		print(buffer);
 8001432:	6838      	ldr	r0, [r7, #0]
 8001434:	f000 fe16 	bl	8002064 <print>
		sprintf(buffer, "-----------------------\n");
 8001438:	4910      	ldr	r1, [pc, #64]	@ (800147c <_ZN11Current_MOD4infoEPc+0xc8>)
 800143a:	6838      	ldr	r0, [r7, #0]
 800143c:	f00a ff66 	bl	800c30c <siprintf>
		print(buffer);
 8001440:	6838      	ldr	r0, [r7, #0]
 8001442:	f000 fe0f 	bl	8002064 <print>
		sprintf(buffer, "Current (A): %i\n", Current);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800144a:	461a      	mov	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	@ (8001480 <_ZN11Current_MOD4infoEPc+0xcc>)
 800144e:	6838      	ldr	r0, [r7, #0]
 8001450:	f00a ff5c 	bl	800c30c <siprintf>
		print(buffer);
 8001454:	6838      	ldr	r0, [r7, #0]
 8001456:	f000 fe05 	bl	8002064 <print>

    }
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	0800ceec 	.word	0x0800ceec
 8001468:	0800cf08 	.word	0x0800cf08
 800146c:	0800cf1c 	.word	0x0800cf1c
 8001470:	0800cf38 	.word	0x0800cf38
 8001474:	0800cf4c 	.word	0x0800cf4c
 8001478:	0800cf64 	.word	0x0800cf64
 800147c:	0800cf78 	.word	0x0800cf78
 8001480:	0800cf94 	.word	0x0800cf94

08001484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b085      	sub	sp, #20
 8001488:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148a:	f001 fd31 	bl	8002ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148e:	f000 f8a5 	bl	80015dc <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001492:	f000 f91f 	bl	80016d4 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001496:	f000 fc5f 	bl	8001d58 <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 800149a:	f000 fae5 	bl	8001a68 <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 800149e:	f000 fa59 	bl	8001954 <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 80014a2:	f000 fbf9 	bl	8001c98 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 80014a6:	f000 f949 	bl	800173c <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 80014aa:	f000 f9d9 	bl	8001860 <_ZL12MX_ADC3_Initv>
  MX_TIM17_Init();
 80014ae:	f000 fb65 	bl	8001b7c <_ZL13MX_TIM17_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80014b2:	2100      	movs	r1, #0
 80014b4:	483e      	ldr	r0, [pc, #248]	@ (80015b0 <main+0x12c>)
 80014b6:	f008 fe41 	bl	800a13c <HAL_TIM_PWM_Start>



  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 80014ba:	483e      	ldr	r0, [pc, #248]	@ (80015b4 <main+0x130>)
 80014bc:	f004 f8ac 	bl	8005618 <HAL_FDCAN_Start>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	bf0c      	ite	eq
 80014c6:	2301      	moveq	r3, #1
 80014c8:	2300      	movne	r3, #0
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <main+0x52>
	  print((char*)"CAN_ACU iniciado");
 80014d0:	4839      	ldr	r0, [pc, #228]	@ (80015b8 <main+0x134>)
 80014d2:	f000 fdc7 	bl	8002064 <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 80014d6:	2200      	movs	r2, #0
 80014d8:	2101      	movs	r1, #1
 80014da:	4836      	ldr	r0, [pc, #216]	@ (80015b4 <main+0x130>)
 80014dc:	f004 fa8e 	bl	80059fc <HAL_FDCAN_ActivateNotification>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	bf0c      	ite	eq
 80014e6:	2301      	moveq	r3, #1
 80014e8:	2300      	movne	r3, #0
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <main+0x72>
  {
	  print((char*)"CAN_ACU notification");
 80014f0:	4832      	ldr	r0, [pc, #200]	@ (80015bc <main+0x138>)
 80014f2:	f000 fdb7 	bl	8002064 <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 80014f6:	4832      	ldr	r0, [pc, #200]	@ (80015c0 <main+0x13c>)
 80014f8:	f004 f88e 	bl	8005618 <HAL_FDCAN_Start>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	bf0c      	ite	eq
 8001502:	2301      	moveq	r3, #1
 8001504:	2300      	movne	r3, #0
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <main+0x8e>
	  print((char*)"CAN_BMS iniciado");
 800150c:	482d      	ldr	r0, [pc, #180]	@ (80015c4 <main+0x140>)
 800150e:	f000 fda9 	bl	8002064 <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 8001512:	482d      	ldr	r0, [pc, #180]	@ (80015c8 <main+0x144>)
 8001514:	f002 faac 	bl	8003a70 <HAL_ADC_Start>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	bf0c      	ite	eq
 800151e:	2301      	moveq	r3, #1
 8001520:	2300      	movne	r3, #0
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <main+0xaa>
	  print((char*)"ADC iniciado");
 8001528:	4828      	ldr	r0, [pc, #160]	@ (80015cc <main+0x148>)
 800152a:	f000 fd9b 	bl	8002064 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 800152e:	f000 fe2f 	bl	8002190 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 8001532:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <main+0x14c>)
 8001534:	4a27      	ldr	r2, [pc, #156]	@ (80015d4 <main+0x150>)
 8001536:	2140      	movs	r1, #64	@ 0x40
 8001538:	4821      	ldr	r0, [pc, #132]	@ (80015c0 <main+0x13c>)
 800153a:	f004 f8f3 	bl	8005724 <HAL_FDCAN_GetRxMessage>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf0c      	ite	eq
 8001544:	2301      	moveq	r3, #1
 8001546:	2300      	movne	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0ef      	beq.n	800152e <main+0xaa>

		  msg_bms.id = RxHeader_bms.Identifier;
 800154e:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <main+0x150>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a21      	ldr	r2, [pc, #132]	@ (80015d8 <main+0x154>)
 8001554:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 8001556:	4b1f      	ldr	r3, [pc, #124]	@ (80015d4 <main+0x150>)
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <main+0x154>)
 800155e:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	e00c      	b.n	8001580 <main+0xfc>
 8001566:	4a1a      	ldr	r2, [pc, #104]	@ (80015d0 <main+0x14c>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	7819      	ldrb	r1, [r3, #0]
 800156e:	4a1a      	ldr	r2, [pc, #104]	@ (80015d8 <main+0x154>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4413      	add	r3, r2
 8001574:	3305      	adds	r3, #5
 8001576:	460a      	mov	r2, r1
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3301      	adds	r3, #1
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b07      	cmp	r3, #7
 8001584:	ddef      	ble.n	8001566 <main+0xe2>
		  msg_bms.bus = 2;
 8001586:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <main+0x154>)
 8001588:	2202      	movs	r2, #2
 800158a:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 800158c:	f001 fd36 	bl	8002ffc <HAL_GetTick>
 8001590:	4603      	mov	r3, r0
 8001592:	4a11      	ldr	r2, [pc, #68]	@ (80015d8 <main+0x154>)
 8001594:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <main+0x154>)
 8001598:	466c      	mov	r4, sp
 800159a:	f103 0210 	add.w	r2, r3, #16
 800159e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015a2:	e884 0003 	stmia.w	r4, {r0, r1}
 80015a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a8:	f001 f864 	bl	8002674 <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80015ac:	e7bf      	b.n	800152e <main+0xaa>
 80015ae:	bf00      	nop
 80015b0:	240002a4 	.word	0x240002a4
 80015b4:	24000164 	.word	0x24000164
 80015b8:	0800cfa8 	.word	0x0800cfa8
 80015bc:	0800cfbc 	.word	0x0800cfbc
 80015c0:	24000204 	.word	0x24000204
 80015c4:	0800cfd4 	.word	0x0800cfd4
 80015c8:	240000f4 	.word	0x240000f4
 80015cc:	0800cfe8 	.word	0x0800cfe8
 80015d0:	2400041c 	.word	0x2400041c
 80015d4:	240003f4 	.word	0x240003f4
 80015d8:	24000488 	.word	0x24000488

080015dc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b09c      	sub	sp, #112	@ 0x70
 80015e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e6:	224c      	movs	r2, #76	@ 0x4c
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f00a feb0 	bl	800c350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2220      	movs	r2, #32
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f00a feaa 	bl	800c350 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80015fc:	2002      	movs	r0, #2
 80015fe:	f005 f95f 	bl	80068c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001602:	2300      	movs	r3, #0
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	4b32      	ldr	r3, [pc, #200]	@ (80016d0 <_Z18SystemClock_Configv+0xf4>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	4a31      	ldr	r2, [pc, #196]	@ (80016d0 <_Z18SystemClock_Configv+0xf4>)
 800160c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001610:	6193      	str	r3, [r2, #24]
 8001612:	4b2f      	ldr	r3, [pc, #188]	@ (80016d0 <_Z18SystemClock_Configv+0xf4>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800161e:	bf00      	nop
 8001620:	4b2b      	ldr	r3, [pc, #172]	@ (80016d0 <_Z18SystemClock_Configv+0xf4>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800162c:	bf14      	ite	ne
 800162e:	2301      	movne	r3, #1
 8001630:	2300      	moveq	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f3      	bne.n	8001620 <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001638:	2301      	movs	r3, #1
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800163c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001640:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001642:	2302      	movs	r3, #2
 8001644:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001646:	2302      	movs	r3, #2
 8001648:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800164a:	2302      	movs	r3, #2
 800164c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800164e:	232c      	movs	r3, #44	@ 0x2c
 8001650:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001652:	2301      	movs	r3, #1
 8001654:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001656:	2304      	movs	r3, #4
 8001658:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800165a:	2302      	movs	r3, #2
 800165c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800165e:	230c      	movs	r3, #12
 8001660:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001662:	2300      	movs	r3, #0
 8001664:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800166e:	4618      	mov	r0, r3
 8001670:	f005 f960 	bl	8006934 <HAL_RCC_OscConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	bf14      	ite	ne
 800167a:	2301      	movne	r3, #1
 800167c:	2300      	moveq	r3, #0
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8001684:	f000 fd72 	bl	800216c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001688:	233f      	movs	r3, #63	@ 0x3f
 800168a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800168c:	2303      	movs	r3, #3
 800168e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001694:	2308      	movs	r3, #8
 8001696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001698:	2340      	movs	r3, #64	@ 0x40
 800169a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800169c:	2340      	movs	r3, #64	@ 0x40
 800169e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016a6:	2340      	movs	r3, #64	@ 0x40
 80016a8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2103      	movs	r1, #3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f005 fd1a 	bl	80070e8 <HAL_RCC_ClockConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	bf14      	ite	ne
 80016ba:	2301      	movne	r3, #1
 80016bc:	2300      	moveq	r3, #0
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 80016c4:	f000 fd52 	bl	800216c <Error_Handler>
  }
}
 80016c8:	bf00      	nop
 80016ca:	3770      	adds	r7, #112	@ 0x70
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	58024800 	.word	0x58024800

080016d4 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b0ae      	sub	sp, #184	@ 0xb8
 80016d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016da:	463b      	mov	r3, r7
 80016dc:	22b8      	movs	r2, #184	@ 0xb8
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f00a fe35 	bl	800c350 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016e6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80016f2:	2302      	movs	r3, #2
 80016f4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80016f6:	2310      	movs	r3, #16
 80016f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80016fa:	2302      	movs	r3, #2
 80016fc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80016fe:	2302      	movs	r3, #2
 8001700:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001702:	2302      	movs	r3, #2
 8001704:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001706:	23c0      	movs	r3, #192	@ 0xc0
 8001708:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001712:	2300      	movs	r3, #0
 8001714:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001718:	463b      	mov	r3, r7
 800171a:	4618      	mov	r0, r3
 800171c:	f006 f870 	bl	8007800 <HAL_RCCEx_PeriphCLKConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	bf14      	ite	ne
 8001726:	2301      	movne	r3, #1
 8001728:	2300      	moveq	r3, #0
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 8001730:	f000 fd1c 	bl	800216c <Error_Handler>
  }
}
 8001734:	bf00      	nop
 8001736:	37b8      	adds	r7, #184	@ 0xb8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08c      	sub	sp, #48	@ 0x30
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800174e:	463b      	mov	r3, r7
 8001750:	2224      	movs	r2, #36	@ 0x24
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f00a fdfb 	bl	800c350 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800175a:	4b3e      	ldr	r3, [pc, #248]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 800175c:	4a3e      	ldr	r2, [pc, #248]	@ (8001858 <_ZL12MX_ADC1_Initv+0x11c>)
 800175e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001760:	4b3c      	ldr	r3, [pc, #240]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 8001762:	2200      	movs	r2, #0
 8001764:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001766:	4b3b      	ldr	r3, [pc, #236]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 8001768:	2208      	movs	r2, #8
 800176a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800176c:	4b39      	ldr	r3, [pc, #228]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001772:	4b38      	ldr	r3, [pc, #224]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 8001774:	2204      	movs	r2, #4
 8001776:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001778:	4b36      	ldr	r3, [pc, #216]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 800177a:	2200      	movs	r2, #0
 800177c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800177e:	4b35      	ldr	r3, [pc, #212]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 8001780:	2200      	movs	r2, #0
 8001782:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001784:	4b33      	ldr	r3, [pc, #204]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 8001786:	2201      	movs	r2, #1
 8001788:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800178a:	4b32      	ldr	r3, [pc, #200]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001792:	4b30      	ldr	r3, [pc, #192]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 8001794:	2200      	movs	r2, #0
 8001796:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001798:	4b2e      	ldr	r3, [pc, #184]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 800179a:	2200      	movs	r2, #0
 800179c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800179e:	4b2d      	ldr	r3, [pc, #180]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80017aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = ENABLE;
 80017b0:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 64;
 80017b8:	4b26      	ldr	r3, [pc, #152]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 80017ba:	2240      	movs	r2, #64	@ 0x40
 80017bc:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 80017be:	4b25      	ldr	r3, [pc, #148]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 80017c0:	22c0      	movs	r2, #192	@ 0xc0
 80017c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80017c4:	4b23      	ldr	r3, [pc, #140]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80017ca:	4b22      	ldr	r3, [pc, #136]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017d0:	4820      	ldr	r0, [pc, #128]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 80017d2:	f001 ff45 	bl	8003660 <HAL_ADC_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf14      	ite	ne
 80017dc:	2301      	movne	r3, #1
 80017de:	2300      	moveq	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <_ZL12MX_ADC1_Initv+0xae>
  {
    Error_Handler();
 80017e6:	f000 fcc1 	bl	800216c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f2:	4619      	mov	r1, r3
 80017f4:	4817      	ldr	r0, [pc, #92]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 80017f6:	f003 fac9 	bl	8004d8c <HAL_ADCEx_MultiModeConfigChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf14      	ite	ne
 8001800:	2301      	movne	r3, #1
 8001802:	2300      	moveq	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <_ZL12MX_ADC1_Initv+0xd2>
  {
    Error_Handler();
 800180a:	f000 fcaf 	bl	800216c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800180e:	4b13      	ldr	r3, [pc, #76]	@ (800185c <_ZL12MX_ADC1_Initv+0x120>)
 8001810:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001812:	2306      	movs	r3, #6
 8001814:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800181a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800181e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001820:	2304      	movs	r3, #4
 8001822:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800182e:	463b      	mov	r3, r7
 8001830:	4619      	mov	r1, r3
 8001832:	4808      	ldr	r0, [pc, #32]	@ (8001854 <_ZL12MX_ADC1_Initv+0x118>)
 8001834:	f002 fb1c 	bl	8003e70 <HAL_ADC_ConfigChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	bf14      	ite	ne
 800183e:	2301      	movne	r3, #1
 8001840:	2300      	moveq	r3, #0
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <_ZL12MX_ADC1_Initv+0x110>
  {
    Error_Handler();
 8001848:	f000 fc90 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	3730      	adds	r7, #48	@ 0x30
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	24000084 	.word	0x24000084
 8001858:	40022000 	.word	0x40022000
 800185c:	08600004 	.word	0x08600004

08001860 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	@ 0x28
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2224      	movs	r2, #36	@ 0x24
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f00a fd6f 	bl	800c350 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001872:	4b35      	ldr	r3, [pc, #212]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 8001874:	4a35      	ldr	r2, [pc, #212]	@ (800194c <_ZL12MX_ADC3_Initv+0xec>)
 8001876:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001878:	4b33      	ldr	r3, [pc, #204]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 800187a:	2200      	movs	r2, #0
 800187c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 800187e:	4b32      	ldr	r3, [pc, #200]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 8001880:	220c      	movs	r2, #12
 8001882:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001884:	4b30      	ldr	r3, [pc, #192]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800188a:	4b2f      	ldr	r3, [pc, #188]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001890:	4b2d      	ldr	r3, [pc, #180]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 8001892:	2204      	movs	r2, #4
 8001894:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001896:	4b2c      	ldr	r3, [pc, #176]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 8001898:	2200      	movs	r2, #0
 800189a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800189c:	4b2a      	ldr	r3, [pc, #168]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80018a2:	4b29      	ldr	r3, [pc, #164]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018a8:	4b27      	ldr	r3, [pc, #156]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018b0:	4b25      	ldr	r3, [pc, #148]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018b6:	4b24      	ldr	r3, [pc, #144]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80018bc:	4b22      	ldr	r3, [pc, #136]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80018c4:	4b20      	ldr	r3, [pc, #128]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80018ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80018d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80018dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 80018e4:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80018ea:	4817      	ldr	r0, [pc, #92]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 80018ec:	f001 feb8 	bl	8003660 <HAL_ADC_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	bf14      	ite	ne
 80018f6:	2301      	movne	r3, #1
 80018f8:	2300      	moveq	r3, #0
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 8001900:	f000 fc34 	bl	800216c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001904:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <_ZL12MX_ADC3_Initv+0xf0>)
 8001906:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001908:	2306      	movs	r3, #6
 800190a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001910:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001914:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001916:	2304      	movs	r3, #4
 8001918:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	4619      	mov	r1, r3
 8001926:	4808      	ldr	r0, [pc, #32]	@ (8001948 <_ZL12MX_ADC3_Initv+0xe8>)
 8001928:	f002 faa2 	bl	8003e70 <HAL_ADC_ConfigChannel>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	bf14      	ite	ne
 8001932:	2301      	movne	r3, #1
 8001934:	2300      	moveq	r3, #0
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 800193c:	f000 fc16 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	@ 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	240000f4 	.word	0x240000f4
 800194c:	58026000 	.word	0x58026000
 8001950:	1d500080 	.word	0x1d500080

08001954 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800195a:	4b41      	ldr	r3, [pc, #260]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800195c:	4a41      	ldr	r2, [pc, #260]	@ (8001a64 <_ZL14MX_FDCAN1_Initv+0x110>)
 800195e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001960:	4b3f      	ldr	r3, [pc, #252]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001962:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001966:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001968:	4b3d      	ldr	r3, [pc, #244]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800196e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001970:	2200      	movs	r2, #0
 8001972:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001974:	4b3a      	ldr	r3, [pc, #232]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001976:	2200      	movs	r2, #0
 8001978:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800197a:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800197c:	2200      	movs	r2, #0
 800197e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 8001980:	4b37      	ldr	r3, [pc, #220]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001982:	2203      	movs	r2, #3
 8001984:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001986:	4b36      	ldr	r3, [pc, #216]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001988:	2201      	movs	r2, #1
 800198a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 800198c:	4b34      	ldr	r3, [pc, #208]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800198e:	220a      	movs	r2, #10
 8001990:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8001992:	4b33      	ldr	r3, [pc, #204]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001994:	2205      	movs	r2, #5
 8001996:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001998:	4b31      	ldr	r3, [pc, #196]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800199a:	2201      	movs	r2, #1
 800199c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800199e:	4b30      	ldr	r3, [pc, #192]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80019a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80019aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80019b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80019b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 80019bc:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019be:	2205      	movs	r2, #5
 80019c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 80019c2:	4b27      	ldr	r3, [pc, #156]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019c4:	2220      	movs	r2, #32
 80019c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80019c8:	4b25      	ldr	r3, [pc, #148]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019ca:	2204      	movs	r2, #4
 80019cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 80019ce:	4b24      	ldr	r3, [pc, #144]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019d0:	2220      	movs	r2, #32
 80019d2:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80019d4:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019d6:	2204      	movs	r2, #4
 80019d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 80019da:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019dc:	2201      	movs	r2, #1
 80019de:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80019e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019e2:	2204      	movs	r2, #4
 80019e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 80019e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 80019ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019ee:	2220      	movs	r2, #32
 80019f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80019f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019f4:	2220      	movs	r2, #32
 80019f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001a00:	2204      	movs	r2, #4
 8001a02:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001a04:	4816      	ldr	r0, [pc, #88]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001a06:	f003 fbb3 	bl	8005170 <HAL_FDCAN_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	bf14      	ite	ne
 8001a10:	2301      	movne	r3, #1
 8001a12:	2300      	moveq	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 8001a1a:	f000 fba7 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001a1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a22:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001a38:	463b      	mov	r3, r7
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4808      	ldr	r0, [pc, #32]	@ (8001a60 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001a3e:	f003 fd75 	bl	800552c <HAL_FDCAN_ConfigFilter>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf14      	ite	ne
 8001a48:	2301      	movne	r3, #1
 8001a4a:	2300      	moveq	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 8001a52:	f000 fb8b 	bl	800216c <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	24000164 	.word	0x24000164
 8001a64:	4000a000 	.word	0x4000a000

08001a68 <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001a6e:	4b41      	ldr	r3, [pc, #260]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a70:	4a41      	ldr	r2, [pc, #260]	@ (8001b78 <_ZL14MX_FDCAN2_Initv+0x110>)
 8001a72:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001a74:	4b3f      	ldr	r3, [pc, #252]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a7a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001a7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001a82:	4b3c      	ldr	r3, [pc, #240]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001a88:	4b3a      	ldr	r3, [pc, #232]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001a8e:	4b39      	ldr	r3, [pc, #228]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 3;
 8001a94:	4b37      	ldr	r3, [pc, #220]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a96:	2203      	movs	r2, #3
 8001a98:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001a9a:	4b36      	ldr	r3, [pc, #216]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 8001aa0:	4b34      	ldr	r3, [pc, #208]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001aa2:	220a      	movs	r2, #10
 8001aa4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8001aa6:	4b33      	ldr	r3, [pc, #204]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001aa8:	2205      	movs	r2, #5
 8001aaa:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001aac:	4b31      	ldr	r3, [pc, #196]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001ab2:	4b30      	ldr	r3, [pc, #192]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001abe:	4b2d      	ldr	r3, [pc, #180]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001aca:	4b2a      	ldr	r3, [pc, #168]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 8001ad0:	4b28      	ldr	r3, [pc, #160]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ad2:	2205      	movs	r2, #5
 8001ad4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 8001ad6:	4b27      	ldr	r3, [pc, #156]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ad8:	2220      	movs	r2, #32
 8001ada:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001adc:	4b25      	ldr	r3, [pc, #148]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ade:	2204      	movs	r2, #4
 8001ae0:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 8001ae2:	4b24      	ldr	r3, [pc, #144]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001ae8:	4b22      	ldr	r3, [pc, #136]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001aea:	2204      	movs	r2, #4
 8001aec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 8001aee:	4b21      	ldr	r3, [pc, #132]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001af4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001af6:	2204      	movs	r2, #4
 8001af8:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 8001afa:	4b1e      	ldr	r3, [pc, #120]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 8001b00:	4b1c      	ldr	r3, [pc, #112]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001b02:	2220      	movs	r2, #32
 8001b04:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 8001b06:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001b08:	2220      	movs	r2, #32
 8001b0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b0c:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001b12:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001b14:	2204      	movs	r2, #4
 8001b16:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001b18:	4816      	ldr	r0, [pc, #88]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001b1a:	f003 fb29 	bl	8005170 <HAL_FDCAN_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf14      	ite	ne
 8001b24:	2301      	movne	r3, #1
 8001b26:	2300      	moveq	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 8001b2e:	f000 fb1d 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001b32:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b36:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001b40:	2301      	movs	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 8001b44:	2310      	movs	r3, #16
 8001b46:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 8001b48:	2310      	movs	r3, #16
 8001b4a:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4808      	ldr	r0, [pc, #32]	@ (8001b74 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001b52:	f003 fceb 	bl	800552c <HAL_FDCAN_ConfigFilter>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	bf14      	ite	ne
 8001b5c:	2301      	movne	r3, #1
 8001b5e:	2300      	moveq	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 8001b66:	f000 fb01 	bl	800216c <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 8001b6a:	bf00      	nop
 8001b6c:	3720      	adds	r7, #32
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	24000204 	.word	0x24000204
 8001b78:	4000a400 	.word	0x4000a400

08001b7c <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b094      	sub	sp, #80	@ 0x50
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b82:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
 8001b90:	611a      	str	r2, [r3, #16]
 8001b92:	615a      	str	r2, [r3, #20]
 8001b94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b96:	463b      	mov	r3, r7
 8001b98:	2234      	movs	r2, #52	@ 0x34
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f00a fbd7 	bl	800c350 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001ba2:	4b3b      	ldr	r3, [pc, #236]	@ (8001c90 <_ZL13MX_TIM17_Initv+0x114>)
 8001ba4:	4a3b      	ldr	r2, [pc, #236]	@ (8001c94 <_ZL13MX_TIM17_Initv+0x118>)
 8001ba6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001ba8:	4b39      	ldr	r3, [pc, #228]	@ (8001c90 <_ZL13MX_TIM17_Initv+0x114>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bae:	4b38      	ldr	r3, [pc, #224]	@ (8001c90 <_ZL13MX_TIM17_Initv+0x114>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10559;
 8001bb4:	4b36      	ldr	r3, [pc, #216]	@ (8001c90 <_ZL13MX_TIM17_Initv+0x114>)
 8001bb6:	f642 123f 	movw	r2, #10559	@ 0x293f
 8001bba:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbc:	4b34      	ldr	r3, [pc, #208]	@ (8001c90 <_ZL13MX_TIM17_Initv+0x114>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001bc2:	4b33      	ldr	r3, [pc, #204]	@ (8001c90 <_ZL13MX_TIM17_Initv+0x114>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bc8:	4b31      	ldr	r3, [pc, #196]	@ (8001c90 <_ZL13MX_TIM17_Initv+0x114>)
 8001bca:	2280      	movs	r2, #128	@ 0x80
 8001bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001bce:	4830      	ldr	r0, [pc, #192]	@ (8001c90 <_ZL13MX_TIM17_Initv+0x114>)
 8001bd0:	f008 f9fc 	bl	8009fcc <HAL_TIM_Base_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	bf14      	ite	ne
 8001bda:	2301      	movne	r3, #1
 8001bdc:	2300      	moveq	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <_ZL13MX_TIM17_Initv+0x6c>
  {
    Error_Handler();
 8001be4:	f000 fac2 	bl	800216c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001be8:	4829      	ldr	r0, [pc, #164]	@ (8001c90 <_ZL13MX_TIM17_Initv+0x114>)
 8001bea:	f008 fa46 	bl	800a07a <HAL_TIM_PWM_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bf14      	ite	ne
 8001bf4:	2301      	movne	r3, #1
 8001bf6:	2300      	moveq	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <_ZL13MX_TIM17_Initv+0x86>
  {
    Error_Handler();
 8001bfe:	f000 fab5 	bl	800216c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c02:	2360      	movs	r3, #96	@ 0x60
 8001c04:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c22:	2200      	movs	r2, #0
 8001c24:	4619      	mov	r1, r3
 8001c26:	481a      	ldr	r0, [pc, #104]	@ (8001c90 <_ZL13MX_TIM17_Initv+0x114>)
 8001c28:	f008 fba4 	bl	800a374 <HAL_TIM_PWM_ConfigChannel>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	bf14      	ite	ne
 8001c32:	2301      	movne	r3, #1
 8001c34:	2300      	moveq	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <_ZL13MX_TIM17_Initv+0xc4>
  {
    Error_Handler();
 8001c3c:	f000 fa96 	bl	800216c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001c62:	463b      	mov	r3, r7
 8001c64:	4619      	mov	r1, r3
 8001c66:	480a      	ldr	r0, [pc, #40]	@ (8001c90 <_ZL13MX_TIM17_Initv+0x114>)
 8001c68:	f009 f840 	bl	800acec <HAL_TIMEx_ConfigBreakDeadTime>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf14      	ite	ne
 8001c72:	2301      	movne	r3, #1
 8001c74:	2300      	moveq	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <_ZL13MX_TIM17_Initv+0x104>
  {
    Error_Handler();
 8001c7c:	f000 fa76 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001c80:	4803      	ldr	r0, [pc, #12]	@ (8001c90 <_ZL13MX_TIM17_Initv+0x114>)
 8001c82:	f000 ff7f 	bl	8002b84 <HAL_TIM_MspPostInit>

}
 8001c86:	bf00      	nop
 8001c88:	3750      	adds	r7, #80	@ 0x50
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	240002a4 	.word	0x240002a4
 8001c94:	40014800 	.word	0x40014800

08001c98 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001d50 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d54 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d50 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001ca4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001caa:	4b29      	ldr	r3, [pc, #164]	@ (8001d50 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb0:	4b27      	ldr	r3, [pc, #156]	@ (8001d50 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cb6:	4b26      	ldr	r3, [pc, #152]	@ (8001d50 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cbc:	4b24      	ldr	r3, [pc, #144]	@ (8001d50 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc2:	4b23      	ldr	r3, [pc, #140]	@ (8001d50 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc8:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cce:	4b20      	ldr	r3, [pc, #128]	@ (8001d50 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d50 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cda:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ce0:	481b      	ldr	r0, [pc, #108]	@ (8001d50 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001ce2:	f009 f88f 	bl	800ae04 <HAL_UART_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001cf6:	f000 fa39 	bl	800216c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4814      	ldr	r0, [pc, #80]	@ (8001d50 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cfe:	f00a fa3a 	bl	800c176 <HAL_UARTEx_SetTxFifoThreshold>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf14      	ite	ne
 8001d08:	2301      	movne	r3, #1
 8001d0a:	2300      	moveq	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8001d12:	f000 fa2b 	bl	800216c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d16:	2100      	movs	r1, #0
 8001d18:	480d      	ldr	r0, [pc, #52]	@ (8001d50 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001d1a:	f00a fa6a 	bl	800c1f2 <HAL_UARTEx_SetRxFifoThreshold>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf14      	ite	ne
 8001d24:	2301      	movne	r3, #1
 8001d26:	2300      	moveq	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001d2e:	f000 fa1d 	bl	800216c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d32:	4807      	ldr	r0, [pc, #28]	@ (8001d50 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001d34:	f00a f9e6 	bl	800c104 <HAL_UARTEx_DisableFifoMode>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf14      	ite	ne
 8001d3e:	2301      	movne	r3, #1
 8001d40:	2300      	moveq	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001d48:	f000 fa10 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	240002f0 	.word	0x240002f0
 8001d54:	40004400 	.word	0x40004400

08001d58 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08c      	sub	sp, #48	@ 0x30
 8001d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5e:	f107 031c 	add.w	r3, r7, #28
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d6e:	4b57      	ldr	r3, [pc, #348]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d74:	4a55      	ldr	r2, [pc, #340]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001d76:	f043 0320 	orr.w	r3, r3, #32
 8001d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d7e:	4b53      	ldr	r3, [pc, #332]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d84:	f003 0320 	and.w	r3, r3, #32
 8001d88:	61bb      	str	r3, [r7, #24]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d8c:	4b4f      	ldr	r3, [pc, #316]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d92:	4a4e      	ldr	r2, [pc, #312]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	4b48      	ldr	r3, [pc, #288]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db0:	4a46      	ldr	r2, [pc, #280]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dba:	4b44      	ldr	r3, [pc, #272]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dc8:	4b40      	ldr	r3, [pc, #256]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dce:	4a3f      	ldr	r2, [pc, #252]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001dd0:	f043 0310 	orr.w	r3, r3, #16
 8001dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd8:	4b3c      	ldr	r3, [pc, #240]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	4b39      	ldr	r3, [pc, #228]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dec:	4a37      	ldr	r2, [pc, #220]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001dee:	f043 0302 	orr.w	r3, r3, #2
 8001df2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001df6:	4b35      	ldr	r3, [pc, #212]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e04:	4b31      	ldr	r3, [pc, #196]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e0a:	4a30      	ldr	r2, [pc, #192]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001e0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e14:	4b2d      	ldr	r3, [pc, #180]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e22:	4b2a      	ldr	r3, [pc, #168]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e28:	4a28      	ldr	r2, [pc, #160]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001e2a:	f043 0308 	orr.w	r3, r3, #8
 8001e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e32:	4b26      	ldr	r3, [pc, #152]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x174>)
 8001e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 8001e40:	2200      	movs	r2, #0
 8001e42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e46:	4822      	ldr	r0, [pc, #136]	@ (8001ed0 <_ZL12MX_GPIO_Initv+0x178>)
 8001e48:	f004 fd20 	bl	800688c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2138      	movs	r1, #56	@ 0x38
 8001e50:	4820      	ldr	r0, [pc, #128]	@ (8001ed4 <_ZL12MX_GPIO_Initv+0x17c>)
 8001e52:	f004 fd1b 	bl	800688c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 8001e56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4818      	ldr	r0, [pc, #96]	@ (8001ed0 <_ZL12MX_GPIO_Initv+0x178>)
 8001e70:	f004 fb4c 	bl	800650c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 8001e74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	4813      	ldr	r0, [pc, #76]	@ (8001ed8 <_ZL12MX_GPIO_Initv+0x180>)
 8001e8a:	f004 fb3f 	bl	800650c <HAL_GPIO_Init>

  /*Configure GPIO pin : Charge_Button_Pin */
  GPIO_InitStruct.Pin = Charge_Button_Pin;
 8001e8e:	2380      	movs	r3, #128	@ 0x80
 8001e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Charge_Button_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480e      	ldr	r0, [pc, #56]	@ (8001edc <_ZL12MX_GPIO_Initv+0x184>)
 8001ea2:	f004 fb33 	bl	800650c <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 8001ea6:	2338      	movs	r3, #56	@ 0x38
 8001ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4805      	ldr	r0, [pc, #20]	@ (8001ed4 <_ZL12MX_GPIO_Initv+0x17c>)
 8001ebe:	f004 fb25 	bl	800650c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ec2:	bf00      	nop
 8001ec4:	3730      	adds	r7, #48	@ 0x30
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	58024400 	.word	0x58024400
 8001ed0:	58021400 	.word	0x58021400
 8001ed4:	58020c00 	.word	0x58020c00
 8001ed8:	58021000 	.word	0x58021000
 8001edc:	58021800 	.word	0x58021800

08001ee0 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d04b      	beq.n	8001f8c <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 8001ef4:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001ef6:	4a28      	ldr	r2, [pc, #160]	@ (8001f98 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001ef8:	2140      	movs	r1, #64	@ 0x40
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f003 fc12 	bl	8005724 <HAL_FDCAN_GetRxMessage>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	bf0c      	ite	eq
 8001f06:	2301      	moveq	r3, #1
 8001f08:	2300      	movne	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d02e      	beq.n	8001f6e <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 8001f10:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a21      	ldr	r2, [pc, #132]	@ (8001f9c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f16:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001f18:	4b1f      	ldr	r3, [pc, #124]	@ (8001f98 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f9c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f20:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	e00c      	b.n	8001f42 <HAL_FDCAN_RxFifo0Callback+0x62>
 8001f28:	4a1a      	ldr	r2, [pc, #104]	@ (8001f94 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	7819      	ldrb	r1, [r3, #0]
 8001f30:	4a1a      	ldr	r2, [pc, #104]	@ (8001f9c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4413      	add	r3, r2
 8001f36:	3305      	adds	r3, #5
 8001f38:	460a      	mov	r2, r1
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b07      	cmp	r3, #7
 8001f46:	ddef      	ble.n	8001f28 <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001f48:	4b14      	ldr	r3, [pc, #80]	@ (8001f9c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 8001f4e:	f001 f855 	bl	8002ffc <HAL_GetTick>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4a11      	ldr	r2, [pc, #68]	@ (8001f9c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f56:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 8001f58:	4b10      	ldr	r3, [pc, #64]	@ (8001f9c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f5a:	466c      	mov	r4, sp
 8001f5c:	f103 0210 	add.w	r2, r3, #16
 8001f60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f64:	e884 0003 	stmia.w	r4, {r0, r1}
 8001f68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f6a:	f000 fb83 	bl	8002674 <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2101      	movs	r1, #1
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f003 fd42 	bl	80059fc <HAL_FDCAN_ActivateNotification>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf14      	ite	ne
 8001f7e:	2301      	movne	r3, #1
 8001f80:	2300      	moveq	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 8001f88:	f000 f8f0 	bl	800216c <Error_Handler>
    }
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd90      	pop	{r4, r7, pc}
 8001f94:	2400041c 	.word	0x2400041c
 8001f98:	240003cc 	.word	0x240003cc
 8001f9c:	240004a0 	.word	0x240004a0

08001fa0 <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	4613      	mov	r3, r2
 8001fac:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001fae:	4a0b      	ldr	r2, [pc, #44]	@ (8001fdc <module_send_message_CAN1+0x3c>)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 8001fb4:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <module_send_message_CAN1+0x3c>)
 8001fb6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fba:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	4a07      	ldr	r2, [pc, #28]	@ (8001fdc <module_send_message_CAN1+0x3c>)
 8001fc0:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	4905      	ldr	r1, [pc, #20]	@ (8001fdc <module_send_message_CAN1+0x3c>)
 8001fc6:	4806      	ldr	r0, [pc, #24]	@ (8001fe0 <module_send_message_CAN1+0x40>)
 8001fc8:	f003 fb51 	bl	800566e <HAL_FDCAN_AddMessageToTxFifoQ>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	75fb      	strb	r3, [r7, #23]

	return status;
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	24000384 	.word	0x24000384
 8001fe0:	24000164 	.word	0x24000164

08001fe4 <module_send_message_NoExtId_CAN1>:

//NO extended ID
HAL_StatusTypeDef module_send_message_NoExtId_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800201c <module_send_message_NoExtId_CAN1+0x38>)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_STANDARD_ID;
 8001ff8:	4b08      	ldr	r3, [pc, #32]	@ (800201c <module_send_message_NoExtId_CAN1+0x38>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	4a06      	ldr	r2, [pc, #24]	@ (800201c <module_send_message_NoExtId_CAN1+0x38>)
 8002002:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	4905      	ldr	r1, [pc, #20]	@ (800201c <module_send_message_NoExtId_CAN1+0x38>)
 8002008:	4805      	ldr	r0, [pc, #20]	@ (8002020 <module_send_message_NoExtId_CAN1+0x3c>)
 800200a:	f003 fb30 	bl	800566e <HAL_FDCAN_AddMessageToTxFifoQ>
 800200e:	4603      	mov	r3, r0
 8002010:	75fb      	strb	r3, [r7, #23]

	return status;
 8002012:	7dfb      	ldrb	r3, [r7, #23]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	24000384 	.word	0x24000384
 8002020:	24000164 	.word	0x24000164

08002024 <module_send_message_CAN2>:

HAL_StatusTypeDef module_send_message_CAN2(uint32_t id, uint8_t* data, uint8_t length) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	4613      	mov	r3, r2
 8002030:	71fb      	strb	r3, [r7, #7]
	TxHeader_bms.Identifier = id;
 8002032:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <module_send_message_CAN2+0x38>)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6013      	str	r3, [r2, #0]
	TxHeader_bms.IdType = FDCAN_STANDARD_ID;
 8002038:	4b08      	ldr	r3, [pc, #32]	@ (800205c <module_send_message_CAN2+0x38>)
 800203a:	2200      	movs	r2, #0
 800203c:	605a      	str	r2, [r3, #4]
	TxHeader_bms.DataLength = length;
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	4a06      	ldr	r2, [pc, #24]	@ (800205c <module_send_message_CAN2+0x38>)
 8002042:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	4905      	ldr	r1, [pc, #20]	@ (800205c <module_send_message_CAN2+0x38>)
 8002048:	4805      	ldr	r0, [pc, #20]	@ (8002060 <module_send_message_CAN2+0x3c>)
 800204a:	f003 fb10 	bl	800566e <HAL_FDCAN_AddMessageToTxFifoQ>
 800204e:	4603      	mov	r3, r0
 8002050:	75fb      	strb	r3, [r7, #23]

	return status;
 8002052:	7dfb      	ldrb	r3, [r7, #23]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	240003a8 	.word	0x240003a8
 8002060:	24000204 	.word	0x24000204

08002064 <print>:

void print(char uart_buffer[]){
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4909      	ldr	r1, [pc, #36]	@ (8002094 <print+0x30>)
 8002070:	4809      	ldr	r0, [pc, #36]	@ (8002098 <print+0x34>)
 8002072:	f00a f94b 	bl	800c30c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8002076:	4808      	ldr	r0, [pc, #32]	@ (8002098 <print+0x34>)
 8002078:	f7fe f94a 	bl	8000310 <strlen>
 800207c:	4603      	mov	r3, r0
 800207e:	b29a      	uxth	r2, r3
 8002080:	f04f 33ff 	mov.w	r3, #4294967295
 8002084:	4904      	ldr	r1, [pc, #16]	@ (8002098 <print+0x34>)
 8002086:	4805      	ldr	r0, [pc, #20]	@ (800209c <print+0x38>)
 8002088:	f008 ff0c 	bl	800aea4 <HAL_UART_Transmit>
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	0800cff8 	.word	0x0800cff8
 8002098:	24000424 	.word	0x24000424
 800209c:	240002f0 	.word	0x240002f0

080020a0 <printnl>:

void printnl(char uart_buffer[]){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s", uart_buffer);
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4909      	ldr	r1, [pc, #36]	@ (80020d0 <printnl+0x30>)
 80020ac:	4809      	ldr	r0, [pc, #36]	@ (80020d4 <printnl+0x34>)
 80020ae:	f00a f92d 	bl	800c30c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 80020b2:	4808      	ldr	r0, [pc, #32]	@ (80020d4 <printnl+0x34>)
 80020b4:	f7fe f92c 	bl	8000310 <strlen>
 80020b8:	4603      	mov	r3, r0
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
 80020c0:	4904      	ldr	r1, [pc, #16]	@ (80020d4 <printnl+0x34>)
 80020c2:	4805      	ldr	r0, [pc, #20]	@ (80020d8 <printnl+0x38>)
 80020c4:	f008 feee 	bl	800aea4 <HAL_UART_Transmit>
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	0800d000 	.word	0x0800d000
 80020d4:	24000424 	.word	0x24000424
 80020d8:	240002f0 	.word	0x240002f0

080020dc <printValue>:

void printValue(int value){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	4909      	ldr	r1, [pc, #36]	@ (800210c <printValue+0x30>)
 80020e8:	4809      	ldr	r0, [pc, #36]	@ (8002110 <printValue+0x34>)
 80020ea:	f00a f90f 	bl	800c30c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 80020ee:	4808      	ldr	r0, [pc, #32]	@ (8002110 <printValue+0x34>)
 80020f0:	f7fe f90e 	bl	8000310 <strlen>
 80020f4:	4603      	mov	r3, r0
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
 80020fc:	4904      	ldr	r1, [pc, #16]	@ (8002110 <printValue+0x34>)
 80020fe:	4805      	ldr	r0, [pc, #20]	@ (8002114 <printValue+0x38>)
 8002100:	f008 fed0 	bl	800aea4 <HAL_UART_Transmit>
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	0800d004 	.word	0x0800d004
 8002110:	24000424 	.word	0x24000424
 8002114:	240002f0 	.word	0x240002f0

08002118 <getUARTState>:

HAL_UART_StateTypeDef getUARTState(){
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&huart2);
 800211c:	4802      	ldr	r0, [pc, #8]	@ (8002128 <getUARTState+0x10>)
 800211e:	f008 ff4f 	bl	800afc0 <HAL_UART_GetState>
 8002122:	4603      	mov	r3, r0
}
 8002124:	4618      	mov	r0, r3
 8002126:	bd80      	pop	{r7, pc}
 8002128:	240002f0 	.word	0x240002f0

0800212c <readAnalogValue>:
	HAL_ADC_Stop(&hadc1);
	printValue(current);
	return current;
}

float readAnalogValue(void){
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
	analogValue = HAL_ADC_GetValue(&hadc3);
	HAL_ADC_Stop(&hadc3);
	return analogValue;*/


	HAL_ADC_Start(&hadc1);
 8002132:	480d      	ldr	r0, [pc, #52]	@ (8002168 <readAnalogValue+0x3c>)
 8002134:	f001 fc9c 	bl	8003a70 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002138:	f04f 31ff 	mov.w	r1, #4294967295
 800213c:	480a      	ldr	r0, [pc, #40]	@ (8002168 <readAnalogValue+0x3c>)
 800213e:	f001 fd95 	bl	8003c6c <HAL_ADC_PollForConversion>

	uint16_t adc_value;
	int current;

	adc_value = HAL_ADC_GetValue(&hadc1);
 8002142:	4809      	ldr	r0, [pc, #36]	@ (8002168 <readAnalogValue+0x3c>)
 8002144:	f001 fe86 	bl	8003e54 <HAL_ADC_GetValue>
 8002148:	4603      	mov	r3, r0
 800214a:	80fb      	strh	r3, [r7, #6]
	//valor minimo = 2100

	HAL_ADC_Stop(&hadc1);
 800214c:	4806      	ldr	r0, [pc, #24]	@ (8002168 <readAnalogValue+0x3c>)
 800214e:	f001 fd59 	bl	8003c04 <HAL_ADC_Stop>
	return adc_value;
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	ee07 3a90 	vmov	s15, r3
 8002158:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800215c:	eeb0 0a67 	vmov.f32	s0, s15
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	24000084 	.word	0x24000084

0800216c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002170:	b672      	cpsid	i
}
 8002172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <Error_Handler+0x8>

08002178 <_Z9get_statev>:
/*********************************************************************************************************
 ** Function name:           get_state
 ** Descriptions:            get the current state
 *********************************************************************************************************/

STATE get_state() {
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
    return state;
 800217c:	4b03      	ldr	r3, [pc, #12]	@ (800218c <_Z9get_statev+0x14>)
 800217e:	781b      	ldrb	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	24000d08 	.word	0x24000d08

08002190 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 8002190:	b580      	push	{r7, lr}
 8002192:	b08e      	sub	sp, #56	@ 0x38
 8002194:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 8002196:	2300      	movs	r3, #0
 8002198:	637b      	str	r3, [r7, #52]	@ 0x34
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 800219a:	2300      	movs	r3, #0
 800219c:	633b      	str	r3, [r7, #48]	@ 0x30
	int state_precharge = 0; // 0 means open, 1 closed
 800219e:	2300      	movs	r3, #0
 80021a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 80021a2:	2301      	movs	r3, #1
 80021a4:	61fb      	str	r3, [r7, #28]
	int flag_current = Current_ERROR_Comunication;
 80021a6:	2302      	movs	r3, #2
 80021a8:	61bb      	str	r3, [r7, #24]


	int gpio_charge = HAL_GPIO_ReadPin(Charge_Button_GPIO_Port, Charge_Button_Pin); // pull-up: 1 = charge started
 80021aa:	2180      	movs	r1, #128	@ 0x80
 80021ac:	48a7      	ldr	r0, [pc, #668]	@ (800244c <_Z12select_statev+0x2bc>)
 80021ae:	f004 fb55 	bl	800685c <HAL_GPIO_ReadPin>
 80021b2:	4603      	mov	r3, r0
 80021b4:	617b      	str	r3, [r7, #20]
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 80021b6:	f000 ff21 	bl	8002ffc <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]
	int time_s = HAL_GetTick();
 80021bc:	f000 ff1e 	bl	8002ffc <HAL_GetTick>
 80021c0:	4603      	mov	r3, r0
 80021c2:	60fb      	str	r3, [r7, #12]



	CPU.voltage_acum = 0; // For precharge
 80021c4:	4ba2      	ldr	r3, [pc, #648]	@ (8002450 <_Z12select_statev+0x2c0>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	62da      	str	r2, [r3, #44]	@ 0x2c


	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 80021ca:	4ba2      	ldr	r3, [pc, #648]	@ (8002454 <_Z12select_statev+0x2c4>)
 80021cc:	f241 0268 	movw	r2, #4200	@ 0x1068
 80021d0:	601a      	str	r2, [r3, #0]
	MAX_T = 0;
 80021d2:	4ba1      	ldr	r3, [pc, #644]	@ (8002458 <_Z12select_statev+0x2c8>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 80021d8:	2300      	movs	r3, #0
 80021da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021dc:	e094      	b.n	8002308 <_Z12select_statev+0x178>
		BMS[i].voltage_acum = 0;// For precharge
 80021de:	4a9f      	ldr	r2, [pc, #636]	@ (800245c <_Z12select_statev+0x2cc>)
 80021e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e2:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3388      	adds	r3, #136	@ 0x88
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]


		if (BMS[i].query_voltage(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
 80021f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f4:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 80021f8:	fb02 f303 	mul.w	r3, r2, r3
 80021fc:	4a97      	ldr	r2, [pc, #604]	@ (800245c <_Z12select_statev+0x2cc>)
 80021fe:	4413      	add	r3, r2
 8002200:	4a97      	ldr	r2, [pc, #604]	@ (8002460 <_Z12select_statev+0x2d0>)
 8002202:	6939      	ldr	r1, [r7, #16]
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fdce 	bl	8000da6 <_ZN7BMS_MOD13query_voltageEmPc>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
		{
			//state = error;
			//flag_ams_ok = 0;
		}

		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 800220e:	4b90      	ldr	r3, [pc, #576]	@ (8002450 <_Z12select_statev+0x2c0>)
 8002210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002212:	4992      	ldr	r1, [pc, #584]	@ (800245c <_Z12select_statev+0x2cc>)
 8002214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002216:	f44f 70c6 	mov.w	r0, #396	@ 0x18c
 800221a:	fb00 f303 	mul.w	r3, r0, r3
 800221e:	440b      	add	r3, r1
 8002220:	3388      	adds	r3, #136	@ 0x88
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4413      	add	r3, r2
 8002226:	4a8a      	ldr	r2, [pc, #552]	@ (8002450 <_Z12select_statev+0x2c0>)
 8002228:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 800222a:	4a8c      	ldr	r2, [pc, #560]	@ (800245c <_Z12select_statev+0x2cc>)
 800222c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800222e:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	338c      	adds	r3, #140	@ 0x8c
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b85      	ldr	r3, [pc, #532]	@ (8002454 <_Z12select_statev+0x2c4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	da0a      	bge.n	800225a <_Z12select_statev+0xca>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 8002244:	4a85      	ldr	r2, [pc, #532]	@ (800245c <_Z12select_statev+0x2cc>)
 8002246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002248:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	4413      	add	r3, r2
 8002252:	338c      	adds	r3, #140	@ 0x8c
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a7f      	ldr	r2, [pc, #508]	@ (8002454 <_Z12select_statev+0x2c4>)
 8002258:	6013      	str	r3, [r2, #0]

		int current_value = readAnalogValue();
 800225a:	f7ff ff67 	bl	800212c <readAnalogValue>
 800225e:	eef0 7a40 	vmov.f32	s15, s0
 8002262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002266:	ee17 3a90 	vmov	r3, s15
 800226a:	607b      	str	r3, [r7, #4]
		//printValue(current_value);
		if(MIN_V == 0 || current_value < 50 || BMS[i].query_voltage(time, buffer) != BMS_OK){
 800226c:	4b79      	ldr	r3, [pc, #484]	@ (8002454 <_Z12select_statev+0x2c4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d011      	beq.n	8002298 <_Z12select_statev+0x108>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b31      	cmp	r3, #49	@ 0x31
 8002278:	dd0e      	ble.n	8002298 <_Z12select_statev+0x108>
 800227a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227c:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8002280:	fb02 f303 	mul.w	r3, r2, r3
 8002284:	4a75      	ldr	r2, [pc, #468]	@ (800245c <_Z12select_statev+0x2cc>)
 8002286:	4413      	add	r3, r2
 8002288:	4a75      	ldr	r2, [pc, #468]	@ (8002460 <_Z12select_statev+0x2d0>)
 800228a:	6939      	ldr	r1, [r7, #16]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe fd8a 	bl	8000da6 <_ZN7BMS_MOD13query_voltageEmPc>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <_Z12select_statev+0x10c>
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <_Z12select_statev+0x10e>
 800229c:	2300      	movs	r3, #0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <_Z12select_statev+0x120>
			flag_ams_ok = 0;
 80022a2:	4b70      	ldr	r3, [pc, #448]	@ (8002464 <_Z12select_statev+0x2d4>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
			state = error;
 80022a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002468 <_Z12select_statev+0x2d8>)
 80022aa:	2205      	movs	r2, #5
 80022ac:	701a      	strb	r2, [r3, #0]
 80022ae:	e002      	b.n	80022b6 <_Z12select_statev+0x126>
			//printValue(MIN_V);
			//printValue(current_value);
			//printValue(BMS[i].query_voltage(time, buffer));
		}
		else{
			flag_ams_ok = 1;
 80022b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002464 <_Z12select_statev+0x2d4>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]
		}

		if (BMS[i].query_temperature(time, buffer) != Temperatures_OK){
 80022b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b8:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 80022bc:	fb02 f303 	mul.w	r3, r2, r3
 80022c0:	4a66      	ldr	r2, [pc, #408]	@ (800245c <_Z12select_statev+0x2cc>)
 80022c2:	4413      	add	r3, r2
 80022c4:	4a66      	ldr	r2, [pc, #408]	@ (8002460 <_Z12select_statev+0x2d0>)
 80022c6:	6939      	ldr	r1, [r7, #16]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe fdea 	bl	8000ea2 <_ZN7BMS_MOD17query_temperatureEmPc>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
			//state = error; DESCOMENTA
		}

		if (BMS[i].MAX_T > MAX_T)
 80022d2:	4a62      	ldr	r2, [pc, #392]	@ (800245c <_Z12select_statev+0x2cc>)
 80022d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d6:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80022da:	fb01 f303 	mul.w	r3, r1, r3
 80022de:	4413      	add	r3, r2
 80022e0:	339c      	adds	r3, #156	@ 0x9c
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b5c      	ldr	r3, [pc, #368]	@ (8002458 <_Z12select_statev+0x2c8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	dd0a      	ble.n	8002302 <_Z12select_statev+0x172>
			MAX_T = BMS[i].MAX_T;
 80022ec:	4a5b      	ldr	r2, [pc, #364]	@ (800245c <_Z12select_statev+0x2cc>)
 80022ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f0:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	339c      	adds	r3, #156	@ 0x9c
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a56      	ldr	r2, [pc, #344]	@ (8002458 <_Z12select_statev+0x2c8>)
 8002300:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 8002302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002304:	3301      	adds	r3, #1
 8002306:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002308:	4b58      	ldr	r3, [pc, #352]	@ (800246c <_Z12select_statev+0x2dc>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800230e:	429a      	cmp	r2, r3
 8002310:	f6ff af65 	blt.w	80021de <_Z12select_statev+0x4e>
	}

	if (time_s > time_sending_minV + 500) {
 8002314:	4b56      	ldr	r3, [pc, #344]	@ (8002470 <_Z12select_statev+0x2e0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	429a      	cmp	r2, r3
 8002320:	dd23      	ble.n	800236a <_Z12select_statev+0x1da>
		message_MINV[1] = MIN_V & 0xFF;
 8002322:	4b4c      	ldr	r3, [pc, #304]	@ (8002454 <_Z12select_statev+0x2c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	4b52      	ldr	r3, [pc, #328]	@ (8002474 <_Z12select_statev+0x2e4>)
 800232a:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 800232c:	4b49      	ldr	r3, [pc, #292]	@ (8002454 <_Z12select_statev+0x2c4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	121b      	asrs	r3, r3, #8
 8002332:	b2da      	uxtb	r2, r3
 8002334:	4b4f      	ldr	r3, [pc, #316]	@ (8002474 <_Z12select_statev+0x2e4>)
 8002336:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 8002338:	4b48      	ldr	r3, [pc, #288]	@ (800245c <_Z12select_statev+0x2cc>)
 800233a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800233e:	2b01      	cmp	r3, #1
 8002340:	d010      	beq.n	8002364 <_Z12select_statev+0x1d4>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 8002342:	2202      	movs	r2, #2
 8002344:	494b      	ldr	r1, [pc, #300]	@ (8002474 <_Z12select_statev+0x2e4>)
 8002346:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800234a:	f7ff fe29 	bl	8001fa0 <module_send_message_CAN1>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <_Z12select_statev+0x1d4>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 800235e:	4846      	ldr	r0, [pc, #280]	@ (8002478 <_Z12select_statev+0x2e8>)
 8002360:	f7ff fe80 	bl	8002064 <print>
		}
		time_sending_minV = time_s;
 8002364:	4a42      	ldr	r2, [pc, #264]	@ (8002470 <_Z12select_statev+0x2e0>)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24
 800236e:	e00d      	b.n	800238c <_Z12select_statev+0x1fc>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 8002370:	4b38      	ldr	r3, [pc, #224]	@ (8002454 <_Z12select_statev+0x2c4>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4939      	ldr	r1, [pc, #228]	@ (800245c <_Z12select_statev+0x2cc>)
 8002376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002378:	f44f 70c6 	mov.w	r0, #396	@ 0x18c
 800237c:	fb00 f303 	mul.w	r3, r0, r3
 8002380:	440b      	add	r3, r1
 8002382:	3390      	adds	r3, #144	@ 0x90
 8002384:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	3301      	adds	r3, #1
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
 800238c:	4b37      	ldr	r3, [pc, #220]	@ (800246c <_Z12select_statev+0x2dc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002392:	429a      	cmp	r2, r3
 8002394:	dbec      	blt.n	8002370 <_Z12select_statev+0x1e0>

	}



	flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
 8002396:	4a32      	ldr	r2, [pc, #200]	@ (8002460 <_Z12select_statev+0x2d0>)
 8002398:	6939      	ldr	r1, [r7, #16]
 800239a:	482d      	ldr	r0, [pc, #180]	@ (8002450 <_Z12select_statev+0x2c0>)
 800239c:	f7fe fe58 	bl	8001050 <_ZN7CPU_MOD5queryEmPc>
 80023a0:	61f8      	str	r0, [r7, #28]
	//flag_cpu = CPU_OK;

	flag_current = current.query(time, buffer); //asking current how is it
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002460 <_Z12select_statev+0x2d0>)
 80023a6:	4619      	mov	r1, r3
 80023a8:	4834      	ldr	r0, [pc, #208]	@ (800247c <_Z12select_statev+0x2ec>)
 80023aa:	f7fe fee5 	bl	8001178 <_ZN11Current_MOD5queryEiPc>
 80023ae:	61b8      	str	r0, [r7, #24]
	print((char*)"voltage acu");
	printValue(CPU.voltage_acum);
	print((char*)"dc bus");
	printValue(CPU.DC_BUS);*/
	//printValue(state);
	switch (state) {
 80023b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002468 <_Z12select_statev+0x2d8>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	f200 810d 	bhi.w	80025d4 <_Z12select_statev+0x444>
 80023ba:	a201      	add	r2, pc, #4	@ (adr r2, 80023c0 <_Z12select_statev+0x230>)
 80023bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c0:	080023d9 	.word	0x080023d9
 80023c4:	0800241b 	.word	0x0800241b
 80023c8:	08002489 	.word	0x08002489
 80023cc:	080024c5 	.word	0x080024c5
 80023d0:	08002515 	.word	0x08002515
 80023d4:	0800254f 	.word	0x0800254f
	case start:
		state_air_n = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_DISCONNECTED);
 80023e4:	2102      	movs	r1, #2
 80023e6:	481a      	ldr	r0, [pc, #104]	@ (8002450 <_Z12select_statev+0x2c0>)
 80023e8:	f7fe fe64 	bl	80010b4 <_ZN7CPU_MOD11updateStateEi>
		fan_speed = 0;
 80023ec:	4b24      	ldr	r3, [pc, #144]	@ (8002480 <_Z12select_statev+0x2f0>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 80023f2:	4b23      	ldr	r3, [pc, #140]	@ (8002480 <_Z12select_statev+0x2f0>)
 80023f4:	881a      	ldrh	r2, [r3, #0]
 80023f6:	4b23      	ldr	r3, [pc, #140]	@ (8002484 <_Z12select_statev+0x2f4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	635a      	str	r2, [r3, #52]	@ 0x34
		if(gpio_charge == GPIO_PIN_SET){
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d103      	bne.n	800240a <_Z12select_statev+0x27a>
			state = charge;
 8002402:	4b19      	ldr	r3, [pc, #100]	@ (8002468 <_Z12select_statev+0x2d8>)
 8002404:	2204      	movs	r2, #4
 8002406:	701a      	strb	r2, [r3, #0]
		}
		else if (flag_cpu != CPU_ERROR_COMMUNICATION)
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
		break;
 8002408:	e0dd      	b.n	80025c6 <_Z12select_statev+0x436>
		else if (flag_cpu != CPU_ERROR_COMMUNICATION)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	2b01      	cmp	r3, #1
 800240e:	f000 80da 	beq.w	80025c6 <_Z12select_statev+0x436>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 8002412:	4b15      	ldr	r3, [pc, #84]	@ (8002468 <_Z12select_statev+0x2d8>)
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
		break;
 8002418:	e0d5      	b.n	80025c6 <_Z12select_statev+0x436>
	case precharge:
		state_air_n = 1;
 800241a:	2301      	movs	r3, #1
 800241c:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 1;
 8002422:	2301      	movs	r3, #1
 8002424:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_PRECHARGE);
 8002426:	2101      	movs	r1, #1
 8002428:	4809      	ldr	r0, [pc, #36]	@ (8002450 <_Z12select_statev+0x2c0>)
 800242a:	f7fe fe43 	bl	80010b4 <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu == CPU_OK) {
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d103      	bne.n	800243c <_Z12select_statev+0x2ac>
			state = transition;
 8002434:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <_Z12select_statev+0x2d8>)
 8002436:	2202      	movs	r2, #2
 8002438:	701a      	strb	r2, [r3, #0]
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
			state = error;
		 //else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
		break;
 800243a:	e0c6      	b.n	80025ca <_Z12select_statev+0x43a>
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	2b01      	cmp	r3, #1
 8002440:	f040 80c3 	bne.w	80025ca <_Z12select_statev+0x43a>
			state = error;
 8002444:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <_Z12select_statev+0x2d8>)
 8002446:	2205      	movs	r2, #5
 8002448:	701a      	strb	r2, [r3, #0]
		break;
 800244a:	e0be      	b.n	80025ca <_Z12select_statev+0x43a>
 800244c:	58021800 	.word	0x58021800
 8002450:	24000c84 	.word	0x24000c84
 8002454:	24000004 	.word	0x24000004
 8002458:	24000c74 	.word	0x24000c74
 800245c:	240004b8 	.word	0x240004b8
 8002460:	24000d0c 	.word	0x24000d0c
 8002464:	24000cc0 	.word	0x24000cc0
 8002468:	24000d08 	.word	0x24000d08
 800246c:	24000000 	.word	0x24000000
 8002470:	24000c7c 	.word	0x24000c7c
 8002474:	24000c78 	.word	0x24000c78
 8002478:	0800d00c 	.word	0x0800d00c
 800247c:	24000cc4 	.word	0x24000cc4
 8002480:	24000c80 	.word	0x24000c80
 8002484:	240002a4 	.word	0x240002a4
	case transition:
		state_air_n = 1;
 8002488:	2301      	movs	r3, #1
 800248a:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 1;
 8002490:	2301      	movs	r3, #1
 8002492:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_PRECHARGE);
 8002494:	2101      	movs	r1, #1
 8002496:	4868      	ldr	r0, [pc, #416]	@ (8002638 <_Z12select_statev+0x4a8>)
 8002498:	f7fe fe0c 	bl	80010b4 <_ZN7CPU_MOD11updateStateEi>
		//if (((CPU.voltage_acum)) * 0.7 < CPU.DC_BUS){
		printValue(CPU.DC_BUS);
 800249c:	4b66      	ldr	r3, [pc, #408]	@ (8002638 <_Z12select_statev+0x4a8>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fe1b 	bl	80020dc <printValue>
		if(CPU.DC_BUS > 200 && 	CPU.DC_BUS <500){
 80024a6:	4b64      	ldr	r3, [pc, #400]	@ (8002638 <_Z12select_statev+0x4a8>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80024ac:	f340 808f 	ble.w	80025ce <_Z12select_statev+0x43e>
 80024b0:	4b61      	ldr	r3, [pc, #388]	@ (8002638 <_Z12select_statev+0x4a8>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80024b8:	f280 8089 	bge.w	80025ce <_Z12select_statev+0x43e>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 80024bc:	4b5f      	ldr	r3, [pc, #380]	@ (800263c <_Z12select_statev+0x4ac>)
 80024be:	2203      	movs	r2, #3
 80024c0:	701a      	strb	r2, [r3, #0]
		//}else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
		 //else if(flag_current != Current_OK) state = error;
		}
		break;
 80024c2:	e084      	b.n	80025ce <_Z12select_statev+0x43e>
	case run:
		state_air_n = 1;
 80024c4:	2301      	movs	r3, #1
 80024c6:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 1;
 80024c8:	2301      	movs	r3, #1
 80024ca:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 1;
 80024cc:	2301      	movs	r3, #1
 80024ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_POWER);
 80024d0:	2100      	movs	r1, #0
 80024d2:	4859      	ldr	r0, [pc, #356]	@ (8002638 <_Z12select_statev+0x4a8>)
 80024d4:	f7fe fdee 	bl	80010b4 <_ZN7CPU_MOD11updateStateEi>
		print((char*)"run");
 80024d8:	4859      	ldr	r0, [pc, #356]	@ (8002640 <_Z12select_statev+0x4b0>)
 80024da:	f7ff fdc3 	bl	8002064 <print>
		fan_speed = (FAN_TIMER_ARR * 75) / 100;
 80024de:	4b59      	ldr	r3, [pc, #356]	@ (8002644 <_Z12select_statev+0x4b4>)
 80024e0:	f641 62ef 	movw	r2, #7919	@ 0x1eef
 80024e4:	801a      	strh	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 80024e6:	4b57      	ldr	r3, [pc, #348]	@ (8002644 <_Z12select_statev+0x4b4>)
 80024e8:	881a      	ldrh	r2, [r3, #0]
 80024ea:	4b57      	ldr	r3, [pc, #348]	@ (8002648 <_Z12select_statev+0x4b8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	635a      	str	r2, [r3, #52]	@ 0x34

		if ((flag_cpu == CPU_ERROR_COMMUNICATION) && (flag_charger == 1)){
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d106      	bne.n	8002504 <_Z12select_statev+0x374>
 80024f6:	4b55      	ldr	r3, [pc, #340]	@ (800264c <_Z12select_statev+0x4bc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d102      	bne.n	8002504 <_Z12select_statev+0x374>
			//state = error; //If I disconnect the charger, error
			print((char*)"CPU");
 80024fe:	4854      	ldr	r0, [pc, #336]	@ (8002650 <_Z12select_statev+0x4c0>)
 8002500:	f7ff fdb0 	bl	8002064 <print>
		}
		if (flag_current != Current_OK){
			//state = error; //If current is too high, error
		}
		if(HAL_GPIO_ReadPin(DIGITAL1_GPIO_Port, DIGITAL1_Pin) == GPIO_PIN_RESET){ //SDC IO
 8002504:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002508:	4852      	ldr	r0, [pc, #328]	@ (8002654 <_Z12select_statev+0x4c4>)
 800250a:	f004 f9a7 	bl	800685c <HAL_GPIO_ReadPin>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
			//state = error;
			//print((char*)"DIGITAL");
		}
		break;
 8002512:	e05f      	b.n	80025d4 <_Z12select_statev+0x444>

	case charge: {
		state_air_n = 1;
 8002514:	2301      	movs	r3, #1
 8002516:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 1;
 8002518:	2301      	movs	r3, #1
 800251a:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 1;
 800251c:	2301      	movs	r3, #1
 800251e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_CHARGING);
 8002520:	2104      	movs	r1, #4
 8002522:	4845      	ldr	r0, [pc, #276]	@ (8002638 <_Z12select_statev+0x4a8>)
 8002524:	f7fe fdc6 	bl	80010b4 <_ZN7CPU_MOD11updateStateEi>


		fan_speed = (FAN_TIMER_ARR * 40) / 100;
 8002528:	4b46      	ldr	r3, [pc, #280]	@ (8002644 <_Z12select_statev+0x4b4>)
 800252a:	f241 027f 	movw	r2, #4223	@ 0x107f
 800252e:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 8002530:	4b44      	ldr	r3, [pc, #272]	@ (8002644 <_Z12select_statev+0x4b4>)
 8002532:	881a      	ldrh	r2, [r3, #0]
 8002534:	4b44      	ldr	r3, [pc, #272]	@ (8002648 <_Z12select_statev+0x4b8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	635a      	str	r2, [r3, #52]	@ 0x34
				state = error; //Charge has been interrupted
		} else {
			charge_current_error_counter = 0;
		}*/

		if (gpio_charge == GPIO_PIN_RESET){
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d148      	bne.n	80025d2 <_Z12select_statev+0x442>
			state = start;
 8002540:	4b3e      	ldr	r3, [pc, #248]	@ (800263c <_Z12select_statev+0x4ac>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
			charge_current_error_counter = 0;
 8002546:	4b44      	ldr	r3, [pc, #272]	@ (8002658 <_Z12select_statev+0x4c8>)
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
		}


		break;
 800254c:	e041      	b.n	80025d2 <_Z12select_statev+0x442>
	}

	case error:
		state_air_n = 0; //All relés closed
 800254e:	2300      	movs	r3, #0
 8002550:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_ERROR);
 800255a:	2103      	movs	r1, #3
 800255c:	4836      	ldr	r0, [pc, #216]	@ (8002638 <_Z12select_statev+0x4a8>)
 800255e:	f7fe fda9 	bl	80010b4 <_ZN7CPU_MOD11updateStateEi>
		int current_value = readAnalogValue();
 8002562:	f7ff fde3 	bl	800212c <readAnalogValue>
 8002566:	eef0 7a40 	vmov.f32	s15, s0
 800256a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800256e:	ee17 3a90 	vmov	r3, s15
 8002572:	60bb      	str	r3, [r7, #8]
		for (int i = 0; i < BMS_N; i++) {
 8002574:	2300      	movs	r3, #0
 8002576:	623b      	str	r3, [r7, #32]
 8002578:	e017      	b.n	80025aa <_Z12select_statev+0x41a>
			if(MIN_V != 0 && current_value > 50 && BMS[i].error_volt == BMS_OK){
 800257a:	4b38      	ldr	r3, [pc, #224]	@ (800265c <_Z12select_statev+0x4cc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d010      	beq.n	80025a4 <_Z12select_statev+0x414>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b32      	cmp	r3, #50	@ 0x32
 8002586:	dd0d      	ble.n	80025a4 <_Z12select_statev+0x414>
 8002588:	4a35      	ldr	r2, [pc, #212]	@ (8002660 <_Z12select_statev+0x4d0>)
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	4413      	add	r3, r2
 8002596:	33a4      	adds	r3, #164	@ 0xa4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d102      	bne.n	80025a4 <_Z12select_statev+0x414>
				state = start;
 800259e:	4b27      	ldr	r3, [pc, #156]	@ (800263c <_Z12select_statev+0x4ac>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < BMS_N; i++) {
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	3301      	adds	r3, #1
 80025a8:	623b      	str	r3, [r7, #32]
 80025aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002664 <_Z12select_statev+0x4d4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a3a      	ldr	r2, [r7, #32]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	dbe2      	blt.n	800257a <_Z12select_statev+0x3ea>
			}
		}

		fan_speed = 0;
 80025b4:	4b23      	ldr	r3, [pc, #140]	@ (8002644 <_Z12select_statev+0x4b4>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 80025ba:	4b22      	ldr	r3, [pc, #136]	@ (8002644 <_Z12select_statev+0x4b4>)
 80025bc:	881a      	ldrh	r2, [r3, #0]
 80025be:	4b22      	ldr	r3, [pc, #136]	@ (8002648 <_Z12select_statev+0x4b8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 80025c4:	e006      	b.n	80025d4 <_Z12select_statev+0x444>
		break;
 80025c6:	bf00      	nop
 80025c8:	e004      	b.n	80025d4 <_Z12select_statev+0x444>
		break;
 80025ca:	bf00      	nop
 80025cc:	e002      	b.n	80025d4 <_Z12select_statev+0x444>
		break;
 80025ce:	bf00      	nop
 80025d0:	e000      	b.n	80025d4 <_Z12select_statev+0x444>
		break;
 80025d2:	bf00      	nop
	 sprintf(buffer, " - STATE:     %i\n", state);
	 print(buffer);
	 sprintf(buffer, "***********************\n");
	 print(buffer);*/
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
			flag_ams_ok ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80025d4:	4b24      	ldr	r3, [pc, #144]	@ (8002668 <_Z12select_statev+0x4d8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <_Z12select_statev+0x450>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <_Z12select_statev+0x452>
 80025e0:	2300      	movs	r3, #0
 80025e2:	461a      	mov	r2, r3
 80025e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025e8:	4820      	ldr	r0, [pc, #128]	@ (800266c <_Z12select_statev+0x4dc>)
 80025ea:	f004 f94f 	bl	800688c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 80025ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <_Z12select_statev+0x468>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <_Z12select_statev+0x46a>
 80025f8:	2300      	movs	r3, #0
 80025fa:	461a      	mov	r2, r3
 80025fc:	2108      	movs	r1, #8
 80025fe:	481c      	ldr	r0, [pc, #112]	@ (8002670 <_Z12select_statev+0x4e0>)
 8002600:	f004 f944 	bl	800688c <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 8002604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <_Z12select_statev+0x47e>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <_Z12select_statev+0x480>
 800260e:	2300      	movs	r3, #0
 8002610:	461a      	mov	r2, r3
 8002612:	2110      	movs	r1, #16
 8002614:	4816      	ldr	r0, [pc, #88]	@ (8002670 <_Z12select_statev+0x4e0>)
 8002616:	f004 f939 	bl	800688c <HAL_GPIO_WritePin>
			state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 800261a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <_Z12select_statev+0x494>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <_Z12select_statev+0x496>
 8002624:	2300      	movs	r3, #0
 8002626:	461a      	mov	r2, r3
 8002628:	2120      	movs	r1, #32
 800262a:	4811      	ldr	r0, [pc, #68]	@ (8002670 <_Z12select_statev+0x4e0>)
 800262c:	f004 f92e 	bl	800688c <HAL_GPIO_WritePin>





}
 8002630:	bf00      	nop
 8002632:	3738      	adds	r7, #56	@ 0x38
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	24000c84 	.word	0x24000c84
 800263c:	24000d08 	.word	0x24000d08
 8002640:	0800d02c 	.word	0x0800d02c
 8002644:	24000c80 	.word	0x24000c80
 8002648:	240002a4 	.word	0x240002a4
 800264c:	24000cb8 	.word	0x24000cb8
 8002650:	0800d030 	.word	0x0800d030
 8002654:	58021000 	.word	0x58021000
 8002658:	24000cbc 	.word	0x24000cbc
 800265c:	24000004 	.word	0x24000004
 8002660:	240004b8 	.word	0x240004b8
 8002664:	24000000 	.word	0x24000000
 8002668:	24000cc0 	.word	0x24000cc0
 800266c:	58021400 	.word	0x58021400
 8002670:	58020c00 	.word	0x58020c00

08002674 <_Z11parse_state6CANMsg>:

/*********************************************************************************************************
 ** Function name:           parse_state
 ** Descriptions:            Function for analysing the data from the CAN
 *********************************************************************************************************/
void parse_state(CANMsg data) {
 8002674:	b084      	sub	sp, #16
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	f107 0c18 	add.w	ip, r7, #24
 8002680:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t time = HAL_GetTick();
 8002684:	f000 fcba 	bl	8002ffc <HAL_GetTick>
 8002688:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 800268a:	2300      	movs	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < BMS_N; i++) {
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	e017      	b.n	80026c4 <_Z11parse_state6CANMsg+0x50>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], time); //Checking if the message received is for  BMS
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 800269a:	fb02 f303 	mul.w	r3, r2, r3
 800269e:	4a25      	ldr	r2, [pc, #148]	@ (8002734 <_Z11parse_state6CANMsg+0xc0>)
 80026a0:	1898      	adds	r0, r3, r2
 80026a2:	69b9      	ldr	r1, [r7, #24]
 80026a4:	f107 021d 	add.w	r2, r7, #29
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f7fe fa57 	bl	8000b5c <_ZN7BMS_MOD5parseEmPhm>
 80026ae:	4603      	mov	r3, r0
 80026b0:	73fb      	strb	r3, [r7, #15]
		if (flag_bms)
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <_Z11parse_state6CANMsg+0x4a>
			i = BMS_N;
 80026b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002738 <_Z11parse_state6CANMsg+0xc4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < BMS_N; i++) {
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	3301      	adds	r3, #1
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002738 <_Z11parse_state6CANMsg+0xc4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	dbe2      	blt.n	8002694 <_Z11parse_state6CANMsg+0x20>
	}

	if (!flag_bms) {
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	f083 0301 	eor.w	r3, r3, #1
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d025      	beq.n	8002726 <_Z11parse_state6CANMsg+0xb2>
		if (CPU.parse(data.id, &data.buf[0], time))
 80026da:	69b9      	ldr	r1, [r7, #24]
 80026dc:	f107 021d 	add.w	r2, r7, #29
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4816      	ldr	r0, [pc, #88]	@ (800273c <_Z11parse_state6CANMsg+0xc8>)
 80026e4:	f7fe fc70 	bl	8000fc8 <_ZN7CPU_MOD5parseEmPhm>
			;                       //Cheking if message is for CPU
		if (data.id == 419385575) //If message from this direction received, it is because the charger is connected and the accu is for charging
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	4a15      	ldr	r2, [pc, #84]	@ (8002740 <_Z11parse_state6CANMsg+0xcc>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d11a      	bne.n	8002726 <_Z11parse_state6CANMsg+0xb2>
				{
			for (int i = 0; i < BMS_N; i++) {
 80026f0:	2300      	movs	r3, #0
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	e00c      	b.n	8002710 <_Z11parse_state6CANMsg+0x9c>
				BMS[i].flag_charger = 1;
 80026f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002734 <_Z11parse_state6CANMsg+0xc0>)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	3394      	adds	r3, #148	@ 0x94
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3301      	adds	r3, #1
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <_Z11parse_state6CANMsg+0xc4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	429a      	cmp	r2, r3
 8002718:	dbed      	blt.n	80026f6 <_Z11parse_state6CANMsg+0x82>
			}

			current.flag_charger = 1;
 800271a:	4b0a      	ldr	r3, [pc, #40]	@ (8002744 <_Z11parse_state6CANMsg+0xd0>)
 800271c:	2201      	movs	r2, #1
 800271e:	639a      	str	r2, [r3, #56]	@ 0x38
			flag_charger = 1;
 8002720:	4b09      	ldr	r3, [pc, #36]	@ (8002748 <_Z11parse_state6CANMsg+0xd4>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002730:	b004      	add	sp, #16
 8002732:	4770      	bx	lr
 8002734:	240004b8 	.word	0x240004b8
 8002738:	24000000 	.word	0x24000000
 800273c:	24000c84 	.word	0x24000c84
 8002740:	18ff50e7 	.word	0x18ff50e7
 8002744:	24000cc4 	.word	0x24000cc4
 8002748:	24000cb8 	.word	0x24000cb8

0800274c <_Z41__static_initialization_and_destruction_0v>:
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b087      	sub	sp, #28
 8002750:	af06      	add	r7, sp, #24
		};
 8002752:	4c40      	ldr	r4, [pc, #256]	@ (8002854 <_Z41__static_initialization_and_destruction_0v+0x108>)
 8002754:	2369      	movs	r3, #105	@ 0x69
 8002756:	9304      	str	r3, [sp, #16]
 8002758:	2332      	movs	r3, #50	@ 0x32
 800275a:	9303      	str	r3, [sp, #12]
 800275c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002760:	9302      	str	r3, [sp, #8]
 8002762:	2313      	movs	r3, #19
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	233c      	movs	r3, #60	@ 0x3c
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800276e:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002772:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002776:	4620      	mov	r0, r4
 8002778:	f7fd ffb8 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 800277c:	f504 74c6 	add.w	r4, r4, #396	@ 0x18c
 8002780:	23cd      	movs	r3, #205	@ 0xcd
 8002782:	9304      	str	r3, [sp, #16]
 8002784:	2364      	movs	r3, #100	@ 0x64
 8002786:	9303      	str	r3, [sp, #12]
 8002788:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800278c:	9302      	str	r3, [sp, #8]
 800278e:	2313      	movs	r3, #19
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	233c      	movs	r3, #60	@ 0x3c
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800279a:	f241 0268 	movw	r2, #4200	@ 0x1068
 800279e:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7fd ffa2 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80027a8:	f504 74c6 	add.w	r4, r4, #396	@ 0x18c
 80027ac:	f240 1331 	movw	r3, #305	@ 0x131
 80027b0:	9304      	str	r3, [sp, #16]
 80027b2:	2396      	movs	r3, #150	@ 0x96
 80027b4:	9303      	str	r3, [sp, #12]
 80027b6:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80027ba:	9302      	str	r3, [sp, #8]
 80027bc:	2313      	movs	r3, #19
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	233c      	movs	r3, #60	@ 0x3c
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80027c8:	f241 0268 	movw	r2, #4200	@ 0x1068
 80027cc:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80027d0:	4620      	mov	r0, r4
 80027d2:	f7fd ff8b 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80027d6:	f504 74c6 	add.w	r4, r4, #396	@ 0x18c
 80027da:	f240 1395 	movw	r3, #405	@ 0x195
 80027de:	9304      	str	r3, [sp, #16]
 80027e0:	23c8      	movs	r3, #200	@ 0xc8
 80027e2:	9303      	str	r3, [sp, #12]
 80027e4:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80027e8:	9302      	str	r3, [sp, #8]
 80027ea:	2313      	movs	r3, #19
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	233c      	movs	r3, #60	@ 0x3c
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80027f6:	f241 0268 	movw	r2, #4200	@ 0x1068
 80027fa:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 80027fe:	4620      	mov	r0, r4
 8002800:	f7fd ff74 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8002804:	f504 70c6 	add.w	r0, r4, #396	@ 0x18c
 8002808:	f240 13f9 	movw	r3, #505	@ 0x1f9
 800280c:	9304      	str	r3, [sp, #16]
 800280e:	23fa      	movs	r3, #250	@ 0xfa
 8002810:	9303      	str	r3, [sp, #12]
 8002812:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002816:	9302      	str	r3, [sp, #8]
 8002818:	2313      	movs	r3, #19
 800281a:	9301      	str	r3, [sp, #4]
 800281c:	233c      	movs	r3, #60	@ 0x3c
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002824:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002828:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 800282c:	f7fd ff5e 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 8002830:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002834:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002838:	2120      	movs	r1, #32
 800283a:	4807      	ldr	r0, [pc, #28]	@ (8002858 <_Z41__static_initialization_and_destruction_0v+0x10c>)
 800283c:	f7fe fb72 	bl	8000f24 <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 8002840:	22c8      	movs	r2, #200	@ 0xc8
 8002842:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002846:	4805      	ldr	r0, [pc, #20]	@ (800285c <_Z41__static_initialization_and_destruction_0v+0x110>)
 8002848:	f7fe fc46 	bl	80010d8 <_ZN11Current_MODC1Emi>
}
 800284c:	bf00      	nop
 800284e:	3704      	adds	r7, #4
 8002850:	46bd      	mov	sp, r7
 8002852:	bd90      	pop	{r4, r7, pc}
 8002854:	240004b8 	.word	0x240004b8
 8002858:	24000c84 	.word	0x24000c84
 800285c:	24000cc4 	.word	0x24000cc4

08002860 <_GLOBAL__sub_I_BMS>:
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
 8002864:	f7ff ff72 	bl	800274c <_Z41__static_initialization_and_destruction_0v>
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002872:	4b0a      	ldr	r3, [pc, #40]	@ (800289c <HAL_MspInit+0x30>)
 8002874:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002878:	4a08      	ldr	r2, [pc, #32]	@ (800289c <HAL_MspInit+0x30>)
 800287a:	f043 0302 	orr.w	r3, r3, #2
 800287e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002882:	4b06      	ldr	r3, [pc, #24]	@ (800289c <HAL_MspInit+0x30>)
 8002884:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	58024400 	.word	0x58024400

080028a0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08c      	sub	sp, #48	@ 0x30
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	f107 031c 	add.w	r3, r7, #28
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a31      	ldr	r2, [pc, #196]	@ (8002984 <HAL_ADC_MspInit+0xe4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d12b      	bne.n	800291a <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80028c2:	4b31      	ldr	r3, [pc, #196]	@ (8002988 <HAL_ADC_MspInit+0xe8>)
 80028c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80028c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002988 <HAL_ADC_MspInit+0xe8>)
 80028ca:	f043 0320 	orr.w	r3, r3, #32
 80028ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80028d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002988 <HAL_ADC_MspInit+0xe8>)
 80028d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028e0:	4b29      	ldr	r3, [pc, #164]	@ (8002988 <HAL_ADC_MspInit+0xe8>)
 80028e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028e6:	4a28      	ldr	r2, [pc, #160]	@ (8002988 <HAL_ADC_MspInit+0xe8>)
 80028e8:	f043 0320 	orr.w	r3, r3, #32
 80028ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028f0:	4b25      	ldr	r3, [pc, #148]	@ (8002988 <HAL_ADC_MspInit+0xe8>)
 80028f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80028fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002904:	2303      	movs	r3, #3
 8002906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800290c:	f107 031c 	add.w	r3, r7, #28
 8002910:	4619      	mov	r1, r3
 8002912:	481e      	ldr	r0, [pc, #120]	@ (800298c <HAL_ADC_MspInit+0xec>)
 8002914:	f003 fdfa 	bl	800650c <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002918:	e02f      	b.n	800297a <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1c      	ldr	r2, [pc, #112]	@ (8002990 <HAL_ADC_MspInit+0xf0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d12a      	bne.n	800297a <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002924:	4b18      	ldr	r3, [pc, #96]	@ (8002988 <HAL_ADC_MspInit+0xe8>)
 8002926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800292a:	4a17      	ldr	r2, [pc, #92]	@ (8002988 <HAL_ADC_MspInit+0xe8>)
 800292c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002934:	4b14      	ldr	r3, [pc, #80]	@ (8002988 <HAL_ADC_MspInit+0xe8>)
 8002936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800293a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002942:	4b11      	ldr	r3, [pc, #68]	@ (8002988 <HAL_ADC_MspInit+0xe8>)
 8002944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002948:	4a0f      	ldr	r2, [pc, #60]	@ (8002988 <HAL_ADC_MspInit+0xe8>)
 800294a:	f043 0320 	orr.w	r3, r3, #32
 800294e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002952:	4b0d      	ldr	r3, [pc, #52]	@ (8002988 <HAL_ADC_MspInit+0xe8>)
 8002954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002960:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002966:	2303      	movs	r3, #3
 8002968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800296e:	f107 031c 	add.w	r3, r7, #28
 8002972:	4619      	mov	r1, r3
 8002974:	4805      	ldr	r0, [pc, #20]	@ (800298c <HAL_ADC_MspInit+0xec>)
 8002976:	f003 fdc9 	bl	800650c <HAL_GPIO_Init>
}
 800297a:	bf00      	nop
 800297c:	3730      	adds	r7, #48	@ 0x30
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40022000 	.word	0x40022000
 8002988:	58024400 	.word	0x58024400
 800298c:	58021400 	.word	0x58021400
 8002990:	58026000 	.word	0x58026000

08002994 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b0ba      	sub	sp, #232	@ 0xe8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029ac:	f107 0318 	add.w	r3, r7, #24
 80029b0:	22b8      	movs	r2, #184	@ 0xb8
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f009 fccb 	bl	800c350 <memset>
  if(hfdcan->Instance==FDCAN1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a5a      	ldr	r2, [pc, #360]	@ (8002b28 <HAL_FDCAN_MspInit+0x194>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d157      	bne.n	8002a74 <HAL_FDCAN_MspInit+0xe0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80029c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029d6:	f107 0318 	add.w	r3, r7, #24
 80029da:	4618      	mov	r0, r3
 80029dc:	f004 ff10 	bl	8007800 <HAL_RCCEx_PeriphCLKConfig>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80029e6:	f7ff fbc1 	bl	800216c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80029ea:	4b50      	ldr	r3, [pc, #320]	@ (8002b2c <HAL_FDCAN_MspInit+0x198>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	3301      	adds	r3, #1
 80029f0:	4a4e      	ldr	r2, [pc, #312]	@ (8002b2c <HAL_FDCAN_MspInit+0x198>)
 80029f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80029f4:	4b4d      	ldr	r3, [pc, #308]	@ (8002b2c <HAL_FDCAN_MspInit+0x198>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d10e      	bne.n	8002a1a <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80029fc:	4b4c      	ldr	r3, [pc, #304]	@ (8002b30 <HAL_FDCAN_MspInit+0x19c>)
 80029fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002a02:	4a4b      	ldr	r2, [pc, #300]	@ (8002b30 <HAL_FDCAN_MspInit+0x19c>)
 8002a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a08:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002a0c:	4b48      	ldr	r3, [pc, #288]	@ (8002b30 <HAL_FDCAN_MspInit+0x19c>)
 8002a0e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a1a:	4b45      	ldr	r3, [pc, #276]	@ (8002b30 <HAL_FDCAN_MspInit+0x19c>)
 8002a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a20:	4a43      	ldr	r2, [pc, #268]	@ (8002b30 <HAL_FDCAN_MspInit+0x19c>)
 8002a22:	f043 0308 	orr.w	r3, r3, #8
 8002a26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a2a:	4b41      	ldr	r3, [pc, #260]	@ (8002b30 <HAL_FDCAN_MspInit+0x19c>)
 8002a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002a50:	2309      	movs	r3, #9
 8002a52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a56:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4835      	ldr	r0, [pc, #212]	@ (8002b34 <HAL_FDCAN_MspInit+0x1a0>)
 8002a5e:	f003 fd55 	bl	800650c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2100      	movs	r1, #0
 8002a66:	2013      	movs	r0, #19
 8002a68:	f002 fb4d 	bl	8005106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002a6c:	2013      	movs	r0, #19
 8002a6e:	f002 fb64 	bl	800513a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002a72:	e054      	b.n	8002b1e <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a2f      	ldr	r2, [pc, #188]	@ (8002b38 <HAL_FDCAN_MspInit+0x1a4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d14f      	bne.n	8002b1e <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002a7e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a90:	f107 0318 	add.w	r3, r7, #24
 8002a94:	4618      	mov	r0, r3
 8002a96:	f004 feb3 	bl	8007800 <HAL_RCCEx_PeriphCLKConfig>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002aa0:	f7ff fb64 	bl	800216c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002aa4:	4b21      	ldr	r3, [pc, #132]	@ (8002b2c <HAL_FDCAN_MspInit+0x198>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	4a20      	ldr	r2, [pc, #128]	@ (8002b2c <HAL_FDCAN_MspInit+0x198>)
 8002aac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002aae:	4b1f      	ldr	r3, [pc, #124]	@ (8002b2c <HAL_FDCAN_MspInit+0x198>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d10e      	bne.n	8002ad4 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b30 <HAL_FDCAN_MspInit+0x19c>)
 8002ab8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002abc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b30 <HAL_FDCAN_MspInit+0x19c>)
 8002abe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac2:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b30 <HAL_FDCAN_MspInit+0x19c>)
 8002ac8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad4:	4b16      	ldr	r3, [pc, #88]	@ (8002b30 <HAL_FDCAN_MspInit+0x19c>)
 8002ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ada:	4a15      	ldr	r2, [pc, #84]	@ (8002b30 <HAL_FDCAN_MspInit+0x19c>)
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ae4:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <HAL_FDCAN_MspInit+0x19c>)
 8002ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002af2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002af6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002b0c:	2309      	movs	r3, #9
 8002b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b12:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b16:	4619      	mov	r1, r3
 8002b18:	4808      	ldr	r0, [pc, #32]	@ (8002b3c <HAL_FDCAN_MspInit+0x1a8>)
 8002b1a:	f003 fcf7 	bl	800650c <HAL_GPIO_Init>
}
 8002b1e:	bf00      	nop
 8002b20:	37e8      	adds	r7, #232	@ 0xe8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	4000a000 	.word	0x4000a000
 8002b2c:	24000d5c 	.word	0x24000d5c
 8002b30:	58024400 	.word	0x58024400
 8002b34:	58020c00 	.word	0x58020c00
 8002b38:	4000a400 	.word	0x4000a400
 8002b3c:	58020400 	.word	0x58020400

08002b40 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b7c <HAL_TIM_Base_MspInit+0x3c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d10e      	bne.n	8002b70 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002b52:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <HAL_TIM_Base_MspInit+0x40>)
 8002b54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b58:	4a09      	ldr	r2, [pc, #36]	@ (8002b80 <HAL_TIM_Base_MspInit+0x40>)
 8002b5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b62:	4b07      	ldr	r3, [pc, #28]	@ (8002b80 <HAL_TIM_Base_MspInit+0x40>)
 8002b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	40014800 	.word	0x40014800
 8002b80:	58024400 	.word	0x58024400

08002b84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 030c 	add.w	r3, r7, #12
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a13      	ldr	r2, [pc, #76]	@ (8002bf0 <HAL_TIM_MspPostInit+0x6c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d11f      	bne.n	8002be6 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba6:	4b13      	ldr	r3, [pc, #76]	@ (8002bf4 <HAL_TIM_MspPostInit+0x70>)
 8002ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bac:	4a11      	ldr	r2, [pc, #68]	@ (8002bf4 <HAL_TIM_MspPostInit+0x70>)
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf4 <HAL_TIM_MspPostInit+0x70>)
 8002bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PB9     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bda:	f107 030c 	add.w	r3, r7, #12
 8002bde:	4619      	mov	r1, r3
 8002be0:	4805      	ldr	r0, [pc, #20]	@ (8002bf8 <HAL_TIM_MspPostInit+0x74>)
 8002be2:	f003 fc93 	bl	800650c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002be6:	bf00      	nop
 8002be8:	3720      	adds	r7, #32
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40014800 	.word	0x40014800
 8002bf4:	58024400 	.word	0x58024400
 8002bf8:	58020400 	.word	0x58020400

08002bfc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b0b8      	sub	sp, #224	@ 0xe0
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c14:	f107 0310 	add.w	r3, r7, #16
 8002c18:	22b8      	movs	r2, #184	@ 0xb8
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f009 fb97 	bl	800c350 <memset>
  if(huart->Instance==USART2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a26      	ldr	r2, [pc, #152]	@ (8002cc0 <HAL_UART_MspInit+0xc4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d145      	bne.n	8002cb8 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c2c:	f04f 0202 	mov.w	r2, #2
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c3e:	f107 0310 	add.w	r3, r7, #16
 8002c42:	4618      	mov	r0, r3
 8002c44:	f004 fddc 	bl	8007800 <HAL_RCCEx_PeriphCLKConfig>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002c4e:	f7ff fa8d 	bl	800216c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c52:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc4 <HAL_UART_MspInit+0xc8>)
 8002c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c58:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc4 <HAL_UART_MspInit+0xc8>)
 8002c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002c62:	4b18      	ldr	r3, [pc, #96]	@ (8002cc4 <HAL_UART_MspInit+0xc8>)
 8002c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c70:	4b14      	ldr	r3, [pc, #80]	@ (8002cc4 <HAL_UART_MspInit+0xc8>)
 8002c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c76:	4a13      	ldr	r2, [pc, #76]	@ (8002cc4 <HAL_UART_MspInit+0xc8>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c80:	4b10      	ldr	r3, [pc, #64]	@ (8002cc4 <HAL_UART_MspInit+0xc8>)
 8002c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c8e:	230c      	movs	r3, #12
 8002c90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c94:	2302      	movs	r3, #2
 8002c96:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ca6:	2307      	movs	r3, #7
 8002ca8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cac:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4805      	ldr	r0, [pc, #20]	@ (8002cc8 <HAL_UART_MspInit+0xcc>)
 8002cb4:	f003 fc2a 	bl	800650c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002cb8:	bf00      	nop
 8002cba:	37e0      	adds	r7, #224	@ 0xe0
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40004400 	.word	0x40004400
 8002cc4:	58024400 	.word	0x58024400
 8002cc8:	58020000 	.word	0x58020000

08002ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <NMI_Handler+0x4>

08002cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <HardFault_Handler+0x4>

08002cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce0:	bf00      	nop
 8002ce2:	e7fd      	b.n	8002ce0 <MemManage_Handler+0x4>

08002ce4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ce8:	bf00      	nop
 8002cea:	e7fd      	b.n	8002ce8 <BusFault_Handler+0x4>

08002cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf0:	bf00      	nop
 8002cf2:	e7fd      	b.n	8002cf0 <UsageFault_Handler+0x4>

08002cf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d22:	f000 f957 	bl	8002fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002d30:	4802      	ldr	r0, [pc, #8]	@ (8002d3c <FDCAN1_IT0_IRQHandler+0x10>)
 8002d32:	f002 fedd 	bl	8005af0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	24000164 	.word	0x24000164

08002d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d48:	4a14      	ldr	r2, [pc, #80]	@ (8002d9c <_sbrk+0x5c>)
 8002d4a:	4b15      	ldr	r3, [pc, #84]	@ (8002da0 <_sbrk+0x60>)
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d54:	4b13      	ldr	r3, [pc, #76]	@ (8002da4 <_sbrk+0x64>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d102      	bne.n	8002d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d5c:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <_sbrk+0x64>)
 8002d5e:	4a12      	ldr	r2, [pc, #72]	@ (8002da8 <_sbrk+0x68>)
 8002d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d62:	4b10      	ldr	r3, [pc, #64]	@ (8002da4 <_sbrk+0x64>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d207      	bcs.n	8002d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d70:	f009 faf6 	bl	800c360 <__errno>
 8002d74:	4603      	mov	r3, r0
 8002d76:	220c      	movs	r2, #12
 8002d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7e:	e009      	b.n	8002d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d80:	4b08      	ldr	r3, [pc, #32]	@ (8002da4 <_sbrk+0x64>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d86:	4b07      	ldr	r3, [pc, #28]	@ (8002da4 <_sbrk+0x64>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	4a05      	ldr	r2, [pc, #20]	@ (8002da4 <_sbrk+0x64>)
 8002d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d92:	68fb      	ldr	r3, [r7, #12]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	24050000 	.word	0x24050000
 8002da0:	00000400 	.word	0x00000400
 8002da4:	24000d60 	.word	0x24000d60
 8002da8:	24000eb0 	.word	0x24000eb0

08002dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002db0:	4b32      	ldr	r3, [pc, #200]	@ (8002e7c <SystemInit+0xd0>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db6:	4a31      	ldr	r2, [pc, #196]	@ (8002e7c <SystemInit+0xd0>)
 8002db8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002dc0:	4b2f      	ldr	r3, [pc, #188]	@ (8002e80 <SystemInit+0xd4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	2b06      	cmp	r3, #6
 8002dca:	d807      	bhi.n	8002ddc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002dcc:	4b2c      	ldr	r3, [pc, #176]	@ (8002e80 <SystemInit+0xd4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f023 030f 	bic.w	r3, r3, #15
 8002dd4:	4a2a      	ldr	r2, [pc, #168]	@ (8002e80 <SystemInit+0xd4>)
 8002dd6:	f043 0307 	orr.w	r3, r3, #7
 8002dda:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ddc:	4b29      	ldr	r3, [pc, #164]	@ (8002e84 <SystemInit+0xd8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a28      	ldr	r2, [pc, #160]	@ (8002e84 <SystemInit+0xd8>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002de8:	4b26      	ldr	r3, [pc, #152]	@ (8002e84 <SystemInit+0xd8>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002dee:	4b25      	ldr	r3, [pc, #148]	@ (8002e84 <SystemInit+0xd8>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	4924      	ldr	r1, [pc, #144]	@ (8002e84 <SystemInit+0xd8>)
 8002df4:	4b24      	ldr	r3, [pc, #144]	@ (8002e88 <SystemInit+0xdc>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002dfa:	4b21      	ldr	r3, [pc, #132]	@ (8002e80 <SystemInit+0xd4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e06:	4b1e      	ldr	r3, [pc, #120]	@ (8002e80 <SystemInit+0xd4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 030f 	bic.w	r3, r3, #15
 8002e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002e80 <SystemInit+0xd4>)
 8002e10:	f043 0307 	orr.w	r3, r3, #7
 8002e14:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002e16:	4b1b      	ldr	r3, [pc, #108]	@ (8002e84 <SystemInit+0xd8>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002e1c:	4b19      	ldr	r3, [pc, #100]	@ (8002e84 <SystemInit+0xd8>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002e22:	4b18      	ldr	r3, [pc, #96]	@ (8002e84 <SystemInit+0xd8>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002e28:	4b16      	ldr	r3, [pc, #88]	@ (8002e84 <SystemInit+0xd8>)
 8002e2a:	4a18      	ldr	r2, [pc, #96]	@ (8002e8c <SystemInit+0xe0>)
 8002e2c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002e2e:	4b15      	ldr	r3, [pc, #84]	@ (8002e84 <SystemInit+0xd8>)
 8002e30:	4a17      	ldr	r2, [pc, #92]	@ (8002e90 <SystemInit+0xe4>)
 8002e32:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002e34:	4b13      	ldr	r3, [pc, #76]	@ (8002e84 <SystemInit+0xd8>)
 8002e36:	4a17      	ldr	r2, [pc, #92]	@ (8002e94 <SystemInit+0xe8>)
 8002e38:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e3a:	4b12      	ldr	r3, [pc, #72]	@ (8002e84 <SystemInit+0xd8>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002e40:	4b10      	ldr	r3, [pc, #64]	@ (8002e84 <SystemInit+0xd8>)
 8002e42:	4a14      	ldr	r2, [pc, #80]	@ (8002e94 <SystemInit+0xe8>)
 8002e44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e46:	4b0f      	ldr	r3, [pc, #60]	@ (8002e84 <SystemInit+0xd8>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e84 <SystemInit+0xd8>)
 8002e4e:	4a11      	ldr	r2, [pc, #68]	@ (8002e94 <SystemInit+0xe8>)
 8002e50:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002e52:	4b0c      	ldr	r3, [pc, #48]	@ (8002e84 <SystemInit+0xd8>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e58:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <SystemInit+0xd8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a09      	ldr	r2, [pc, #36]	@ (8002e84 <SystemInit+0xd8>)
 8002e5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e64:	4b07      	ldr	r3, [pc, #28]	@ (8002e84 <SystemInit+0xd8>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <SystemInit+0xec>)
 8002e6c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002e70:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e72:	bf00      	nop
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000ed00 	.word	0xe000ed00
 8002e80:	52002000 	.word	0x52002000
 8002e84:	58024400 	.word	0x58024400
 8002e88:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e8c:	02020200 	.word	0x02020200
 8002e90:	01ff0000 	.word	0x01ff0000
 8002e94:	01010280 	.word	0x01010280
 8002e98:	52004000 	.word	0x52004000

08002e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ed4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ea0:	f7ff ff84 	bl	8002dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ea4:	480c      	ldr	r0, [pc, #48]	@ (8002ed8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ea6:	490d      	ldr	r1, [pc, #52]	@ (8002edc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eac:	e002      	b.n	8002eb4 <LoopCopyDataInit>

08002eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eb2:	3304      	adds	r3, #4

08002eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eb8:	d3f9      	bcc.n	8002eae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ebc:	4c0a      	ldr	r4, [pc, #40]	@ (8002ee8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ec0:	e001      	b.n	8002ec6 <LoopFillZerobss>

08002ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ec2:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 8002ec4:	3204      	adds	r2, #4

08002ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ec8:	d3fb      	bcc.n	8002ec2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eca:	f009 fa4f 	bl	800c36c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ece:	f7fe fad9 	bl	8001484 <main>
  bx  lr
 8002ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ed4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002ed8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002edc:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 8002ee0:	0800d110 	.word	0x0800d110
  ldr r2, =_sbss
 8002ee4:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 8002ee8:	24000eb0 	.word	0x24000eb0

08002eec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eec:	e7fe      	b.n	8002eec <ADC3_IRQHandler>
	...

08002ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ef6:	2003      	movs	r0, #3
 8002ef8:	f002 f8fa 	bl	80050f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002efc:	f004 faaa 	bl	8007454 <HAL_RCC_GetSysClockFreq>
 8002f00:	4602      	mov	r2, r0
 8002f02:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <HAL_Init+0x68>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	0a1b      	lsrs	r3, r3, #8
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	4913      	ldr	r1, [pc, #76]	@ (8002f5c <HAL_Init+0x6c>)
 8002f0e:	5ccb      	ldrb	r3, [r1, r3]
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
 8002f18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002f58 <HAL_Init+0x68>)
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	4a0e      	ldr	r2, [pc, #56]	@ (8002f5c <HAL_Init+0x6c>)
 8002f24:	5cd3      	ldrb	r3, [r2, r3]
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f30:	4a0b      	ldr	r2, [pc, #44]	@ (8002f60 <HAL_Init+0x70>)
 8002f32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f34:	4a0b      	ldr	r2, [pc, #44]	@ (8002f64 <HAL_Init+0x74>)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f3a:	200f      	movs	r0, #15
 8002f3c:	f000 f814 	bl	8002f68 <HAL_InitTick>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e002      	b.n	8002f50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f4a:	f7ff fc8f 	bl	800286c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	58024400 	.word	0x58024400
 8002f5c:	0800d080 	.word	0x0800d080
 8002f60:	2400000c 	.word	0x2400000c
 8002f64:	24000008 	.word	0x24000008

08002f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f70:	4b15      	ldr	r3, [pc, #84]	@ (8002fc8 <HAL_InitTick+0x60>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e021      	b.n	8002fc0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f7c:	4b13      	ldr	r3, [pc, #76]	@ (8002fcc <HAL_InitTick+0x64>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <HAL_InitTick+0x60>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	4619      	mov	r1, r3
 8002f86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f92:	4618      	mov	r0, r3
 8002f94:	f002 f8df 	bl	8005156 <HAL_SYSTICK_Config>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e00e      	b.n	8002fc0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b0f      	cmp	r3, #15
 8002fa6:	d80a      	bhi.n	8002fbe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb0:	f002 f8a9 	bl	8005106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fb4:	4a06      	ldr	r2, [pc, #24]	@ (8002fd0 <HAL_InitTick+0x68>)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	e000      	b.n	8002fc0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	24000014 	.word	0x24000014
 8002fcc:	24000008 	.word	0x24000008
 8002fd0:	24000010 	.word	0x24000010

08002fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fd8:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <HAL_IncTick+0x20>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <HAL_IncTick+0x24>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	4a04      	ldr	r2, [pc, #16]	@ (8002ff8 <HAL_IncTick+0x24>)
 8002fe6:	6013      	str	r3, [r2, #0]
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	24000014 	.word	0x24000014
 8002ff8:	24000d64 	.word	0x24000d64

08002ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8003000:	4b03      	ldr	r3, [pc, #12]	@ (8003010 <HAL_GetTick+0x14>)
 8003002:	681b      	ldr	r3, [r3, #0]
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	24000d64 	.word	0x24000d64

08003014 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	609a      	str	r2, [r3, #8]
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	609a      	str	r2, [r3, #8]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a18      	ldr	r2, [pc, #96]	@ (80030ec <LL_ADC_SetChannelPreselection+0x70>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d027      	beq.n	80030de <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003094:	2b00      	cmp	r3, #0
 8003096:	d107      	bne.n	80030a8 <LL_ADC_SetChannelPreselection+0x2c>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	0e9b      	lsrs	r3, r3, #26
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2201      	movs	r2, #1
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	e015      	b.n	80030d4 <LL_ADC_SetChannelPreselection+0x58>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	fa93 f3a3 	rbit	r3, r3
 80030b2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 80030be:	2320      	movs	r3, #32
 80030c0:	e003      	b.n	80030ca <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	fab3 f383 	clz	r3, r3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	2201      	movs	r2, #1
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	69d2      	ldr	r2, [r2, #28]
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 80030de:	bf00      	nop
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	58026000 	.word	0x58026000

080030f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3360      	adds	r3, #96	@ 0x60
 8003102:	461a      	mov	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4a10      	ldr	r2, [pc, #64]	@ (8003150 <LL_ADC_SetOffset+0x60>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d10b      	bne.n	800312c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	4313      	orrs	r3, r2
 8003122:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800312a:	e00b      	b.n	8003144 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	430b      	orrs	r3, r1
 800313e:	431a      	orrs	r2, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	601a      	str	r2, [r3, #0]
}
 8003144:	bf00      	nop
 8003146:	371c      	adds	r7, #28
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	58026000 	.word	0x58026000

08003154 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3360      	adds	r3, #96	@ 0x60
 8003162:	461a      	mov	r2, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003174:	4618      	mov	r0, r3
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	611a      	str	r2, [r3, #16]
}
 80031a6:	bf00      	nop
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4a0c      	ldr	r2, [pc, #48]	@ (80031f4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00e      	beq.n	80031e6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3360      	adds	r3, #96	@ 0x60
 80031cc:	461a      	mov	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	431a      	orrs	r2, r3
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	601a      	str	r2, [r3, #0]
  }
}
 80031e6:	bf00      	nop
 80031e8:	371c      	adds	r7, #28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	58026000 	.word	0x58026000

080031f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4a0c      	ldr	r2, [pc, #48]	@ (8003238 <LL_ADC_SetOffsetSaturation+0x40>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d10e      	bne.n	800322a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3360      	adds	r3, #96	@ 0x60
 8003210:	461a      	mov	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	431a      	orrs	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800322a:	bf00      	nop
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	58026000 	.word	0x58026000

0800323c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4a0c      	ldr	r2, [pc, #48]	@ (800327c <LL_ADC_SetOffsetSign+0x40>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d10e      	bne.n	800326e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	3360      	adds	r3, #96	@ 0x60
 8003254:	461a      	mov	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	431a      	orrs	r2, r3
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	58026000 	.word	0x58026000

08003280 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3360      	adds	r3, #96	@ 0x60
 8003290:	461a      	mov	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4a0c      	ldr	r2, [pc, #48]	@ (80032d0 <LL_ADC_SetOffsetState+0x50>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d108      	bne.n	80032b4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80032b2:	e007      	b.n	80032c4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	431a      	orrs	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	601a      	str	r2, [r3, #0]
}
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	58026000 	.word	0x58026000

080032d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b087      	sub	sp, #28
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	3330      	adds	r3, #48	@ 0x30
 800330a:	461a      	mov	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	0a1b      	lsrs	r3, r3, #8
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	4413      	add	r3, r2
 8003318:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	211f      	movs	r1, #31
 8003326:	fa01 f303 	lsl.w	r3, r1, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	401a      	ands	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	0e9b      	lsrs	r3, r3, #26
 8003332:	f003 011f 	and.w	r1, r3, #31
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	fa01 f303 	lsl.w	r3, r1, r3
 8003340:	431a      	orrs	r2, r3
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003346:	bf00      	nop
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003352:	b480      	push	{r7}
 8003354:	b087      	sub	sp, #28
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3314      	adds	r3, #20
 8003362:	461a      	mov	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	0e5b      	lsrs	r3, r3, #25
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	4413      	add	r3, r2
 8003370:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	0d1b      	lsrs	r3, r3, #20
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	2107      	movs	r1, #7
 8003380:	fa01 f303 	lsl.w	r3, r1, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	401a      	ands	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	0d1b      	lsrs	r3, r3, #20
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	431a      	orrs	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800339c:	bf00      	nop
 800339e:	371c      	adds	r7, #28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003420 <LL_ADC_SetChannelSingleDiff+0x78>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d115      	bne.n	80033e8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033c8:	43db      	mvns	r3, r3
 80033ca:	401a      	ands	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f003 0318 	and.w	r3, r3, #24
 80033d2:	4914      	ldr	r1, [pc, #80]	@ (8003424 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80033d4:	40d9      	lsrs	r1, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	400b      	ands	r3, r1
 80033da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033de:	431a      	orrs	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80033e6:	e014      	b.n	8003412 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033f4:	43db      	mvns	r3, r3
 80033f6:	401a      	ands	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f003 0318 	and.w	r3, r3, #24
 80033fe:	4909      	ldr	r1, [pc, #36]	@ (8003424 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003400:	40d9      	lsrs	r1, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	400b      	ands	r3, r1
 8003406:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800340a:	431a      	orrs	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	58026000 	.word	0x58026000
 8003424:	000fffff 	.word	0x000fffff

08003428 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 031f 	and.w	r3, r3, #31
}
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003454:	4618      	mov	r0, r3
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	4b04      	ldr	r3, [pc, #16]	@ (8003480 <LL_ADC_DisableDeepPowerDown+0x20>)
 800346e:	4013      	ands	r3, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6093      	str	r3, [r2, #8]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	5fffffc0 	.word	0x5fffffc0

08003484 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003494:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003498:	d101      	bne.n	800349e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	4b05      	ldr	r3, [pc, #20]	@ (80034d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	6fffffc0 	.word	0x6fffffc0

080034d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034e8:	d101      	bne.n	80034ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	4b05      	ldr	r3, [pc, #20]	@ (8003520 <LL_ADC_Enable+0x24>)
 800350a:	4013      	ands	r3, r2
 800350c:	f043 0201 	orr.w	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	7fffffc0 	.word	0x7fffffc0

08003524 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	4b05      	ldr	r3, [pc, #20]	@ (8003548 <LL_ADC_Disable+0x24>)
 8003532:	4013      	ands	r3, r2
 8003534:	f043 0202 	orr.w	r2, r3, #2
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	7fffffc0 	.word	0x7fffffc0

0800354c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <LL_ADC_IsEnabled+0x18>
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <LL_ADC_IsEnabled+0x1a>
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b02      	cmp	r3, #2
 8003584:	d101      	bne.n	800358a <LL_ADC_IsDisableOngoing+0x18>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <LL_ADC_IsDisableOngoing+0x1a>
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	4b05      	ldr	r3, [pc, #20]	@ (80035bc <LL_ADC_REG_StartConversion+0x24>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	f043 0204 	orr.w	r2, r3, #4
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	7fffffc0 	.word	0x7fffffc0

080035c0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <LL_ADC_REG_StopConversion+0x24>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	f043 0210 	orr.w	r2, r3, #16
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	7fffffc0 	.word	0x7fffffc0

080035e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d101      	bne.n	8003600 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <LL_ADC_INJ_StopConversion+0x24>)
 800361e:	4013      	ands	r3, r2
 8003620:	f043 0220 	orr.w	r2, r3, #32
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	7fffffc0 	.word	0x7fffffc0

08003638 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b08      	cmp	r3, #8
 800364a:	d101      	bne.n	8003650 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003660:	b590      	push	{r4, r7, lr}
 8003662:	b089      	sub	sp, #36	@ 0x24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800366c:	2300      	movs	r3, #0
 800366e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e1ee      	b.n	8003a58 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003684:	2b00      	cmp	r3, #0
 8003686:	d109      	bne.n	800369c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff f909 	bl	80028a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff feef 	bl	8003484 <LL_ADC_IsDeepPowerDownEnabled>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d004      	beq.n	80036b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fed5 	bl	8003460 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff ff0a 	bl	80034d4 <LL_ADC_IsInternalRegulatorEnabled>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d114      	bne.n	80036f0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff feee 	bl	80034ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036d0:	4b8e      	ldr	r3, [pc, #568]	@ (800390c <HAL_ADC_Init+0x2ac>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	099b      	lsrs	r3, r3, #6
 80036d6:	4a8e      	ldr	r2, [pc, #568]	@ (8003910 <HAL_ADC_Init+0x2b0>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	099b      	lsrs	r3, r3, #6
 80036de:	3301      	adds	r3, #1
 80036e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036e2:	e002      	b.n	80036ea <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f9      	bne.n	80036e4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff feed 	bl	80034d4 <LL_ADC_IsInternalRegulatorEnabled>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10d      	bne.n	800371c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003704:	f043 0210 	orr.w	r2, r3, #16
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003710:	f043 0201 	orr.w	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff ff61 	bl	80035e8 <LL_ADC_REG_IsConversionOngoing>
 8003726:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b00      	cmp	r3, #0
 8003732:	f040 8188 	bne.w	8003a46 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b00      	cmp	r3, #0
 800373a:	f040 8184 	bne.w	8003a46 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003742:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003746:	f043 0202 	orr.w	r2, r3, #2
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff fefa 	bl	800354c <LL_ADC_IsEnabled>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d136      	bne.n	80037cc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a6c      	ldr	r2, [pc, #432]	@ (8003914 <HAL_ADC_Init+0x2b4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d004      	beq.n	8003772 <HAL_ADC_Init+0x112>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a6a      	ldr	r2, [pc, #424]	@ (8003918 <HAL_ADC_Init+0x2b8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d10e      	bne.n	8003790 <HAL_ADC_Init+0x130>
 8003772:	4868      	ldr	r0, [pc, #416]	@ (8003914 <HAL_ADC_Init+0x2b4>)
 8003774:	f7ff feea 	bl	800354c <LL_ADC_IsEnabled>
 8003778:	4604      	mov	r4, r0
 800377a:	4867      	ldr	r0, [pc, #412]	@ (8003918 <HAL_ADC_Init+0x2b8>)
 800377c:	f7ff fee6 	bl	800354c <LL_ADC_IsEnabled>
 8003780:	4603      	mov	r3, r0
 8003782:	4323      	orrs	r3, r4
 8003784:	2b00      	cmp	r3, #0
 8003786:	bf0c      	ite	eq
 8003788:	2301      	moveq	r3, #1
 800378a:	2300      	movne	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	e008      	b.n	80037a2 <HAL_ADC_Init+0x142>
 8003790:	4862      	ldr	r0, [pc, #392]	@ (800391c <HAL_ADC_Init+0x2bc>)
 8003792:	f7ff fedb 	bl	800354c <LL_ADC_IsEnabled>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	bf0c      	ite	eq
 800379c:	2301      	moveq	r3, #1
 800379e:	2300      	movne	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d012      	beq.n	80037cc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a5a      	ldr	r2, [pc, #360]	@ (8003914 <HAL_ADC_Init+0x2b4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d004      	beq.n	80037ba <HAL_ADC_Init+0x15a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a58      	ldr	r2, [pc, #352]	@ (8003918 <HAL_ADC_Init+0x2b8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d101      	bne.n	80037be <HAL_ADC_Init+0x15e>
 80037ba:	4a59      	ldr	r2, [pc, #356]	@ (8003920 <HAL_ADC_Init+0x2c0>)
 80037bc:	e000      	b.n	80037c0 <HAL_ADC_Init+0x160>
 80037be:	4a59      	ldr	r2, [pc, #356]	@ (8003924 <HAL_ADC_Init+0x2c4>)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4619      	mov	r1, r3
 80037c6:	4610      	mov	r0, r2
 80037c8:	f7ff fc24 	bl	8003014 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a52      	ldr	r2, [pc, #328]	@ (800391c <HAL_ADC_Init+0x2bc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d129      	bne.n	800382a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	7e5b      	ldrb	r3, [r3, #25]
 80037da:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80037e0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80037e6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d013      	beq.n	8003818 <HAL_ADC_Init+0x1b8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b0c      	cmp	r3, #12
 80037f6:	d00d      	beq.n	8003814 <HAL_ADC_Init+0x1b4>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b1c      	cmp	r3, #28
 80037fe:	d007      	beq.n	8003810 <HAL_ADC_Init+0x1b0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b18      	cmp	r3, #24
 8003806:	d101      	bne.n	800380c <HAL_ADC_Init+0x1ac>
 8003808:	2318      	movs	r3, #24
 800380a:	e006      	b.n	800381a <HAL_ADC_Init+0x1ba>
 800380c:	2300      	movs	r3, #0
 800380e:	e004      	b.n	800381a <HAL_ADC_Init+0x1ba>
 8003810:	2310      	movs	r3, #16
 8003812:	e002      	b.n	800381a <HAL_ADC_Init+0x1ba>
 8003814:	2308      	movs	r3, #8
 8003816:	e000      	b.n	800381a <HAL_ADC_Init+0x1ba>
 8003818:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800381a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003822:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	e00e      	b.n	8003848 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	7e5b      	ldrb	r3, [r3, #25]
 800382e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003834:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800383a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003842:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d106      	bne.n	8003860 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	3b01      	subs	r3, #1
 8003858:	045b      	lsls	r3, r3, #17
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4313      	orrs	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	d009      	beq.n	800387c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003874:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a26      	ldr	r2, [pc, #152]	@ (800391c <HAL_ADC_Init+0x2bc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d115      	bne.n	80038b2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	4b26      	ldr	r3, [pc, #152]	@ (8003928 <HAL_ADC_Init+0x2c8>)
 800388e:	4013      	ands	r3, r2
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6812      	ldr	r2, [r2, #0]
 8003894:	69b9      	ldr	r1, [r7, #24]
 8003896:	430b      	orrs	r3, r1
 8003898:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	611a      	str	r2, [r3, #16]
 80038b0:	e009      	b.n	80038c6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	4b1c      	ldr	r3, [pc, #112]	@ (800392c <HAL_ADC_Init+0x2cc>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	69b9      	ldr	r1, [r7, #24]
 80038c2:	430b      	orrs	r3, r1
 80038c4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fe8c 	bl	80035e8 <LL_ADC_REG_IsConversionOngoing>
 80038d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff feae 	bl	8003638 <LL_ADC_INJ_IsConversionOngoing>
 80038dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f040 808e 	bne.w	8003a02 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f040 808a 	bne.w	8003a02 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a0a      	ldr	r2, [pc, #40]	@ (800391c <HAL_ADC_Init+0x2bc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d11b      	bne.n	8003930 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	7e1b      	ldrb	r3, [r3, #24]
 80038fc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003904:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	e018      	b.n	800393e <HAL_ADC_Init+0x2de>
 800390c:	24000008 	.word	0x24000008
 8003910:	053e2d63 	.word	0x053e2d63
 8003914:	40022000 	.word	0x40022000
 8003918:	40022100 	.word	0x40022100
 800391c:	58026000 	.word	0x58026000
 8003920:	40022300 	.word	0x40022300
 8003924:	58026300 	.word	0x58026300
 8003928:	fff04007 	.word	0xfff04007
 800392c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	7e1b      	ldrb	r3, [r3, #24]
 8003934:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	4b46      	ldr	r3, [pc, #280]	@ (8003a60 <HAL_ADC_Init+0x400>)
 8003946:	4013      	ands	r3, r2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	69b9      	ldr	r1, [r7, #24]
 800394e:	430b      	orrs	r3, r1
 8003950:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003958:	2b01      	cmp	r3, #1
 800395a:	d137      	bne.n	80039cc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003960:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a3f      	ldr	r2, [pc, #252]	@ (8003a64 <HAL_ADC_Init+0x404>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d116      	bne.n	800399a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	4b3d      	ldr	r3, [pc, #244]	@ (8003a68 <HAL_ADC_Init+0x408>)
 8003974:	4013      	ands	r3, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800397e:	4311      	orrs	r1, r2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003984:	4311      	orrs	r1, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800398a:	430a      	orrs	r2, r1
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	611a      	str	r2, [r3, #16]
 8003998:	e020      	b.n	80039dc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	4b32      	ldr	r3, [pc, #200]	@ (8003a6c <HAL_ADC_Init+0x40c>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80039a8:	3a01      	subs	r2, #1
 80039aa:	0411      	lsls	r1, r2, #16
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80039b0:	4311      	orrs	r1, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039b6:	4311      	orrs	r1, r2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80039bc:	430a      	orrs	r2, r1
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0201 	orr.w	r2, r2, #1
 80039c8:	611a      	str	r2, [r3, #16]
 80039ca:	e007      	b.n	80039dc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003a64 <HAL_ADC_Init+0x404>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d002      	beq.n	8003a02 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f001 f8b1 	bl	8004b64 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d10c      	bne.n	8003a24 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a10:	f023 010f 	bic.w	r1, r3, #15
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	1e5a      	subs	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a22:	e007      	b.n	8003a34 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 020f 	bic.w	r2, r2, #15
 8003a32:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a38:	f023 0303 	bic.w	r3, r3, #3
 8003a3c:	f043 0201 	orr.w	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a44:	e007      	b.n	8003a56 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a4a:	f043 0210 	orr.w	r2, r3, #16
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a56:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3724      	adds	r7, #36	@ 0x24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd90      	pop	{r4, r7, pc}
 8003a60:	ffffbffc 	.word	0xffffbffc
 8003a64:	58026000 	.word	0x58026000
 8003a68:	fc00f81f 	.word	0xfc00f81f
 8003a6c:	fc00f81e 	.word	0xfc00f81e

08003a70 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a5c      	ldr	r2, [pc, #368]	@ (8003bf0 <HAL_ADC_Start+0x180>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d004      	beq.n	8003a8c <HAL_ADC_Start+0x1c>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a5b      	ldr	r2, [pc, #364]	@ (8003bf4 <HAL_ADC_Start+0x184>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d101      	bne.n	8003a90 <HAL_ADC_Start+0x20>
 8003a8c:	4b5a      	ldr	r3, [pc, #360]	@ (8003bf8 <HAL_ADC_Start+0x188>)
 8003a8e:	e000      	b.n	8003a92 <HAL_ADC_Start+0x22>
 8003a90:	4b5a      	ldr	r3, [pc, #360]	@ (8003bfc <HAL_ADC_Start+0x18c>)
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fcc8 	bl	8003428 <LL_ADC_GetMultimode>
 8003a98:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fda2 	bl	80035e8 <LL_ADC_REG_IsConversionOngoing>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f040 809a 	bne.w	8003be0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_ADC_Start+0x4a>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e095      	b.n	8003be6 <HAL_ADC_Start+0x176>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 ff64 	bl	8004990 <ADC_Enable>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f040 8081 	bne.w	8003bd6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ad8:	4b49      	ldr	r3, [pc, #292]	@ (8003c00 <HAL_ADC_Start+0x190>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a42      	ldr	r2, [pc, #264]	@ (8003bf4 <HAL_ADC_Start+0x184>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d002      	beq.n	8003af4 <HAL_ADC_Start+0x84>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	e000      	b.n	8003af6 <HAL_ADC_Start+0x86>
 8003af4:	4b3e      	ldr	r3, [pc, #248]	@ (8003bf0 <HAL_ADC_Start+0x180>)
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d002      	beq.n	8003b04 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d105      	bne.n	8003b10 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b1c:	d106      	bne.n	8003b2c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b22:	f023 0206 	bic.w	r2, r3, #6
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	665a      	str	r2, [r3, #100]	@ 0x64
 8003b2a:	e002      	b.n	8003b32 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	221c      	movs	r2, #28
 8003b38:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf4 <HAL_ADC_Start+0x184>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d002      	beq.n	8003b52 <HAL_ADC_Start+0xe2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	e000      	b.n	8003b54 <HAL_ADC_Start+0xe4>
 8003b52:	4b27      	ldr	r3, [pc, #156]	@ (8003bf0 <HAL_ADC_Start+0x180>)
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d008      	beq.n	8003b6e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	2b05      	cmp	r3, #5
 8003b66:	d002      	beq.n	8003b6e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2b09      	cmp	r3, #9
 8003b6c:	d114      	bne.n	8003b98 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b80:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b84:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fd01 	bl	8003598 <LL_ADC_REG_StartConversion>
 8003b96:	e025      	b.n	8003be4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a12      	ldr	r2, [pc, #72]	@ (8003bf4 <HAL_ADC_Start+0x184>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d002      	beq.n	8003bb4 <HAL_ADC_Start+0x144>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	e000      	b.n	8003bb6 <HAL_ADC_Start+0x146>
 8003bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf0 <HAL_ADC_Start+0x180>)
 8003bb6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00f      	beq.n	8003be4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003bcc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	661a      	str	r2, [r3, #96]	@ 0x60
 8003bd4:	e006      	b.n	8003be4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003bde:	e001      	b.n	8003be4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
 8003be2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40022000 	.word	0x40022000
 8003bf4:	40022100 	.word	0x40022100
 8003bf8:	40022300 	.word	0x40022300
 8003bfc:	58026300 	.word	0x58026300
 8003c00:	fffff0fe 	.word	0xfffff0fe

08003c04 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_ADC_Stop+0x16>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e021      	b.n	8003c5e <HAL_ADC_Stop+0x5a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003c22:	2103      	movs	r1, #3
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fdf7 	bl	8004818 <ADC_ConversionStop>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10f      	bne.n	8003c54 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 ff35 	bl	8004aa4 <ADC_Disable>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d107      	bne.n	8003c54 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c48:	4b07      	ldr	r3, [pc, #28]	@ (8003c68 <HAL_ADC_Stop+0x64>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	f043 0201 	orr.w	r2, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	ffffeefe 	.word	0xffffeefe

08003c6c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a72      	ldr	r2, [pc, #456]	@ (8003e44 <HAL_ADC_PollForConversion+0x1d8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_ADC_PollForConversion+0x1e>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a70      	ldr	r2, [pc, #448]	@ (8003e48 <HAL_ADC_PollForConversion+0x1dc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d101      	bne.n	8003c8e <HAL_ADC_PollForConversion+0x22>
 8003c8a:	4b70      	ldr	r3, [pc, #448]	@ (8003e4c <HAL_ADC_PollForConversion+0x1e0>)
 8003c8c:	e000      	b.n	8003c90 <HAL_ADC_PollForConversion+0x24>
 8003c8e:	4b70      	ldr	r3, [pc, #448]	@ (8003e50 <HAL_ADC_PollForConversion+0x1e4>)
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fbc9 	bl	8003428 <LL_ADC_GetMultimode>
 8003c96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d102      	bne.n	8003ca6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003ca0:	2308      	movs	r3, #8
 8003ca2:	61fb      	str	r3, [r7, #28]
 8003ca4:	e037      	b.n	8003d16 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d002      	beq.n	8003cb8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b09      	cmp	r3, #9
 8003cb6:	d111      	bne.n	8003cdc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cca:	f043 0220 	orr.w	r2, r3, #32
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e0b1      	b.n	8003e3a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003cd6:	2304      	movs	r3, #4
 8003cd8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003cda:	e01c      	b.n	8003d16 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a58      	ldr	r2, [pc, #352]	@ (8003e44 <HAL_ADC_PollForConversion+0x1d8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d004      	beq.n	8003cf0 <HAL_ADC_PollForConversion+0x84>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a57      	ldr	r2, [pc, #348]	@ (8003e48 <HAL_ADC_PollForConversion+0x1dc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d101      	bne.n	8003cf4 <HAL_ADC_PollForConversion+0x88>
 8003cf0:	4b56      	ldr	r3, [pc, #344]	@ (8003e4c <HAL_ADC_PollForConversion+0x1e0>)
 8003cf2:	e000      	b.n	8003cf6 <HAL_ADC_PollForConversion+0x8a>
 8003cf4:	4b56      	ldr	r3, [pc, #344]	@ (8003e50 <HAL_ADC_PollForConversion+0x1e4>)
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff fba4 	bl	8003444 <LL_ADC_GetMultiDMATransfer>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d06:	f043 0220 	orr.w	r2, r3, #32
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e093      	b.n	8003e3a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003d12:	2304      	movs	r3, #4
 8003d14:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003d16:	f7ff f971 	bl	8002ffc <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d1c:	e021      	b.n	8003d62 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d24:	d01d      	beq.n	8003d62 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003d26:	f7ff f969 	bl	8002ffc <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d302      	bcc.n	8003d3c <HAL_ADC_PollForConversion+0xd0>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d112      	bne.n	8003d62 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10b      	bne.n	8003d62 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d4e:	f043 0204 	orr.w	r2, r3, #4
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e06b      	b.n	8003e3a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0d6      	beq.n	8003d1e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff faa7 	bl	80032d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d01c      	beq.n	8003dc6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	7e5b      	ldrb	r3, [r3, #25]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d118      	bne.n	8003dc6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d111      	bne.n	8003dc6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d105      	bne.n	8003dc6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dbe:	f043 0201 	orr.w	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1f      	ldr	r2, [pc, #124]	@ (8003e48 <HAL_ADC_PollForConversion+0x1dc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d002      	beq.n	8003dd6 <HAL_ADC_PollForConversion+0x16a>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	e000      	b.n	8003dd8 <HAL_ADC_PollForConversion+0x16c>
 8003dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e44 <HAL_ADC_PollForConversion+0x1d8>)
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d008      	beq.n	8003df2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	d002      	beq.n	8003df2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2b09      	cmp	r3, #9
 8003df0:	d104      	bne.n	8003dfc <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	e00c      	b.n	8003e16 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a11      	ldr	r2, [pc, #68]	@ (8003e48 <HAL_ADC_PollForConversion+0x1dc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d002      	beq.n	8003e0c <HAL_ADC_PollForConversion+0x1a0>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	e000      	b.n	8003e0e <HAL_ADC_PollForConversion+0x1a2>
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003e44 <HAL_ADC_PollForConversion+0x1d8>)
 8003e0e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d104      	bne.n	8003e26 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2208      	movs	r2, #8
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	e008      	b.n	8003e38 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d103      	bne.n	8003e38 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	220c      	movs	r2, #12
 8003e36:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40022000 	.word	0x40022000
 8003e48:	40022100 	.word	0x40022100
 8003e4c:	40022300 	.word	0x40022300
 8003e50:	58026300 	.word	0x58026300

08003e54 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b0a5      	sub	sp, #148	@ 0x94
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e8a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4aa4      	ldr	r2, [pc, #656]	@ (8004124 <HAL_ADC_ConfigChannel+0x2b4>)
 8003e92:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d102      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x34>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	f000 bca2 	b.w	80047e8 <HAL_ADC_ConfigChannel+0x978>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff fb99 	bl	80035e8 <LL_ADC_REG_IsConversionOngoing>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f040 8486 	bne.w	80047ca <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	db31      	blt.n	8003f2a <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a97      	ldr	r2, [pc, #604]	@ (8004128 <HAL_ADC_ConfigChannel+0x2b8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d02c      	beq.n	8003f2a <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d108      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x7e>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	0e9b      	lsrs	r3, r3, #26
 8003ee2:	f003 031f 	and.w	r3, r3, #31
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	e016      	b.n	8003f1c <HAL_ADC_ConfigChannel+0xac>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ef6:	fa93 f3a3 	rbit	r3, r3
 8003efa:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003efc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003efe:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003f00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8003f06:	2320      	movs	r3, #32
 8003f08:	e003      	b.n	8003f12 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8003f0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f0c:	fab3 f383 	clz	r3, r3
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	2201      	movs	r2, #1
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	69d1      	ldr	r1, [r2, #28]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	430b      	orrs	r3, r1
 8003f28:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6859      	ldr	r1, [r3, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f7ff f9df 	bl	80032fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff fb51 	bl	80035e8 <LL_ADC_REG_IsConversionOngoing>
 8003f46:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff fb72 	bl	8003638 <LL_ADC_INJ_IsConversionOngoing>
 8003f54:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f040 824a 	bne.w	80043f6 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f040 8245 	bne.w	80043f6 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	6819      	ldr	r1, [r3, #0]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	f7ff f9ea 	bl	8003352 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a69      	ldr	r2, [pc, #420]	@ (8004128 <HAL_ADC_ConfigChannel+0x2b8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d10d      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	695a      	ldr	r2, [r3, #20]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	08db      	lsrs	r3, r3, #3
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fa2:	e032      	b.n	800400a <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003fa4:	4b61      	ldr	r3, [pc, #388]	@ (800412c <HAL_ADC_ConfigChannel+0x2bc>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003fac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fb0:	d10b      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x15a>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	089b      	lsrs	r3, r3, #2
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	e01d      	b.n	8004006 <HAL_ADC_ConfigChannel+0x196>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10b      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x180>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	089b      	lsrs	r3, r3, #2
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	e00a      	b.n	8004006 <HAL_ADC_ConfigChannel+0x196>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	089b      	lsrs	r3, r3, #2
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b04      	cmp	r3, #4
 8004010:	d048      	beq.n	80040a4 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6919      	ldr	r1, [r3, #16]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004022:	f7ff f865 	bl	80030f0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a3f      	ldr	r2, [pc, #252]	@ (8004128 <HAL_ADC_ConfigChannel+0x2b8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d119      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	6919      	ldr	r1, [r3, #16]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	461a      	mov	r2, r3
 800403e:	f7ff f8fd 	bl	800323c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6919      	ldr	r1, [r3, #16]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d102      	bne.n	800405a <HAL_ADC_ConfigChannel+0x1ea>
 8004054:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004058:	e000      	b.n	800405c <HAL_ADC_ConfigChannel+0x1ec>
 800405a:	2300      	movs	r3, #0
 800405c:	461a      	mov	r2, r3
 800405e:	f7ff f8cb 	bl	80031f8 <LL_ADC_SetOffsetSaturation>
 8004062:	e1c8      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	6919      	ldr	r1, [r3, #16]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004072:	2b01      	cmp	r3, #1
 8004074:	d102      	bne.n	800407c <HAL_ADC_ConfigChannel+0x20c>
 8004076:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800407a:	e000      	b.n	800407e <HAL_ADC_ConfigChannel+0x20e>
 800407c:	2300      	movs	r3, #0
 800407e:	461a      	mov	r2, r3
 8004080:	f7ff f898 	bl	80031b4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	6919      	ldr	r1, [r3, #16]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	7e1b      	ldrb	r3, [r3, #24]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d102      	bne.n	800409a <HAL_ADC_ConfigChannel+0x22a>
 8004094:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004098:	e000      	b.n	800409c <HAL_ADC_ConfigChannel+0x22c>
 800409a:	2300      	movs	r3, #0
 800409c:	461a      	mov	r2, r3
 800409e:	f7ff f86f 	bl	8003180 <LL_ADC_SetDataRightShift>
 80040a2:	e1a8      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004128 <HAL_ADC_ConfigChannel+0x2b8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	f040 815b 	bne.w	8004366 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2100      	movs	r1, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff f84c 	bl	8003154 <LL_ADC_GetOffsetChannel>
 80040bc:	4603      	mov	r3, r0
 80040be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10a      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x26c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2100      	movs	r1, #0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff f841 	bl	8003154 <LL_ADC_GetOffsetChannel>
 80040d2:	4603      	mov	r3, r0
 80040d4:	0e9b      	lsrs	r3, r3, #26
 80040d6:	f003 021f 	and.w	r2, r3, #31
 80040da:	e017      	b.n	800410c <HAL_ADC_ConfigChannel+0x29c>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2100      	movs	r1, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff f836 	bl	8003154 <LL_ADC_GetOffsetChannel>
 80040e8:	4603      	mov	r3, r0
 80040ea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040ee:	fa93 f3a3 	rbit	r3, r3
 80040f2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80040f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80040f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80040fe:	2320      	movs	r3, #32
 8004100:	e003      	b.n	800410a <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8004102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004104:	fab3 f383 	clz	r3, r3
 8004108:	b2db      	uxtb	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10b      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x2c0>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	0e9b      	lsrs	r3, r3, #26
 800411e:	f003 031f 	and.w	r3, r3, #31
 8004122:	e017      	b.n	8004154 <HAL_ADC_ConfigChannel+0x2e4>
 8004124:	47ff0000 	.word	0x47ff0000
 8004128:	58026000 	.word	0x58026000
 800412c:	5c001000 	.word	0x5c001000
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800413e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004140:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004142:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8004148:	2320      	movs	r3, #32
 800414a:	e003      	b.n	8004154 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800414c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	429a      	cmp	r2, r3
 8004156:	d106      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2200      	movs	r2, #0
 800415e:	2100      	movs	r1, #0
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff f88d 	bl	8003280 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2101      	movs	r1, #1
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe fff1 	bl	8003154 <LL_ADC_GetOffsetChannel>
 8004172:	4603      	mov	r3, r0
 8004174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x322>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2101      	movs	r1, #1
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe ffe6 	bl	8003154 <LL_ADC_GetOffsetChannel>
 8004188:	4603      	mov	r3, r0
 800418a:	0e9b      	lsrs	r3, r3, #26
 800418c:	f003 021f 	and.w	r2, r3, #31
 8004190:	e017      	b.n	80041c2 <HAL_ADC_ConfigChannel+0x352>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2101      	movs	r1, #1
 8004198:	4618      	mov	r0, r3
 800419a:	f7fe ffdb 	bl	8003154 <LL_ADC_GetOffsetChannel>
 800419e:	4603      	mov	r3, r0
 80041a0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041a4:	fa93 f3a3 	rbit	r3, r3
 80041a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80041aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041ac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80041ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 80041b4:	2320      	movs	r3, #32
 80041b6:	e003      	b.n	80041c0 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 80041b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ba:	fab3 f383 	clz	r3, r3
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d105      	bne.n	80041da <HAL_ADC_ConfigChannel+0x36a>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	0e9b      	lsrs	r3, r3, #26
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	e011      	b.n	80041fe <HAL_ADC_ConfigChannel+0x38e>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041e2:	fa93 f3a3 	rbit	r3, r3
 80041e6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80041e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80041ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80041f2:	2320      	movs	r3, #32
 80041f4:	e003      	b.n	80041fe <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80041f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041f8:	fab3 f383 	clz	r3, r3
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	429a      	cmp	r2, r3
 8004200:	d106      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2200      	movs	r2, #0
 8004208:	2101      	movs	r1, #1
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff f838 	bl	8003280 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2102      	movs	r1, #2
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe ff9c 	bl	8003154 <LL_ADC_GetOffsetChannel>
 800421c:	4603      	mov	r3, r0
 800421e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <HAL_ADC_ConfigChannel+0x3cc>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2102      	movs	r1, #2
 800422c:	4618      	mov	r0, r3
 800422e:	f7fe ff91 	bl	8003154 <LL_ADC_GetOffsetChannel>
 8004232:	4603      	mov	r3, r0
 8004234:	0e9b      	lsrs	r3, r3, #26
 8004236:	f003 021f 	and.w	r2, r3, #31
 800423a:	e017      	b.n	800426c <HAL_ADC_ConfigChannel+0x3fc>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2102      	movs	r1, #2
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe ff86 	bl	8003154 <LL_ADC_GetOffsetChannel>
 8004248:	4603      	mov	r3, r0
 800424a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424e:	fa93 f3a3 	rbit	r3, r3
 8004252:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004256:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800425e:	2320      	movs	r3, #32
 8004260:	e003      	b.n	800426a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004264:	fab3 f383 	clz	r3, r3
 8004268:	b2db      	uxtb	r3, r3
 800426a:	461a      	mov	r2, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004274:	2b00      	cmp	r3, #0
 8004276:	d105      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x414>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	0e9b      	lsrs	r3, r3, #26
 800427e:	f003 031f 	and.w	r3, r3, #31
 8004282:	e011      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x438>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800428c:	fa93 f3a3 	rbit	r3, r3
 8004290:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004294:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800429c:	2320      	movs	r3, #32
 800429e:	e003      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80042a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a2:	fab3 f383 	clz	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d106      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2200      	movs	r2, #0
 80042b2:	2102      	movs	r1, #2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fe ffe3 	bl	8003280 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2103      	movs	r1, #3
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fe ff47 	bl	8003154 <LL_ADC_GetOffsetChannel>
 80042c6:	4603      	mov	r3, r0
 80042c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10a      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x476>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2103      	movs	r1, #3
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe ff3c 	bl	8003154 <LL_ADC_GetOffsetChannel>
 80042dc:	4603      	mov	r3, r0
 80042de:	0e9b      	lsrs	r3, r3, #26
 80042e0:	f003 021f 	and.w	r2, r3, #31
 80042e4:	e017      	b.n	8004316 <HAL_ADC_ConfigChannel+0x4a6>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2103      	movs	r1, #3
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fe ff31 	bl	8003154 <LL_ADC_GetOffsetChannel>
 80042f2:	4603      	mov	r3, r0
 80042f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	fa93 f3a3 	rbit	r3, r3
 80042fc:	61fb      	str	r3, [r7, #28]
  return result;
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004308:	2320      	movs	r3, #32
 800430a:	e003      	b.n	8004314 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	fab3 f383 	clz	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800431e:	2b00      	cmp	r3, #0
 8004320:	d105      	bne.n	800432e <HAL_ADC_ConfigChannel+0x4be>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	0e9b      	lsrs	r3, r3, #26
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	e011      	b.n	8004352 <HAL_ADC_ConfigChannel+0x4e2>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	fa93 f3a3 	rbit	r3, r3
 800433a:	613b      	str	r3, [r7, #16]
  return result;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8004346:	2320      	movs	r3, #32
 8004348:	e003      	b.n	8004352 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	fab3 f383 	clz	r3, r3
 8004350:	b2db      	uxtb	r3, r3
 8004352:	429a      	cmp	r2, r3
 8004354:	d14f      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2200      	movs	r2, #0
 800435c:	2103      	movs	r1, #3
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe ff8e 	bl	8003280 <LL_ADC_SetOffsetState>
 8004364:	e047      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800436c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	069b      	lsls	r3, r3, #26
 8004376:	429a      	cmp	r2, r3
 8004378:	d107      	bne.n	800438a <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004388:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004390:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	069b      	lsls	r3, r3, #26
 800439a:	429a      	cmp	r2, r3
 800439c:	d107      	bne.n	80043ae <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80043ac:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	069b      	lsls	r3, r3, #26
 80043be:	429a      	cmp	r2, r3
 80043c0:	d107      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80043d0:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	069b      	lsls	r3, r3, #26
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d107      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80043f4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff f8a6 	bl	800354c <LL_ADC_IsEnabled>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	f040 81ea 	bne.w	80047dc <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	6819      	ldr	r1, [r3, #0]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	461a      	mov	r2, r3
 8004416:	f7fe ffc7 	bl	80033a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	4a7a      	ldr	r2, [pc, #488]	@ (8004608 <HAL_ADC_ConfigChannel+0x798>)
 8004420:	4293      	cmp	r3, r2
 8004422:	f040 80e0 	bne.w	80045e6 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4977      	ldr	r1, [pc, #476]	@ (800460c <HAL_ADC_ConfigChannel+0x79c>)
 8004430:	428b      	cmp	r3, r1
 8004432:	d147      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x654>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4975      	ldr	r1, [pc, #468]	@ (8004610 <HAL_ADC_ConfigChannel+0x7a0>)
 800443a:	428b      	cmp	r3, r1
 800443c:	d040      	beq.n	80044c0 <HAL_ADC_ConfigChannel+0x650>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4974      	ldr	r1, [pc, #464]	@ (8004614 <HAL_ADC_ConfigChannel+0x7a4>)
 8004444:	428b      	cmp	r3, r1
 8004446:	d039      	beq.n	80044bc <HAL_ADC_ConfigChannel+0x64c>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4972      	ldr	r1, [pc, #456]	@ (8004618 <HAL_ADC_ConfigChannel+0x7a8>)
 800444e:	428b      	cmp	r3, r1
 8004450:	d032      	beq.n	80044b8 <HAL_ADC_ConfigChannel+0x648>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4971      	ldr	r1, [pc, #452]	@ (800461c <HAL_ADC_ConfigChannel+0x7ac>)
 8004458:	428b      	cmp	r3, r1
 800445a:	d02b      	beq.n	80044b4 <HAL_ADC_ConfigChannel+0x644>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	496f      	ldr	r1, [pc, #444]	@ (8004620 <HAL_ADC_ConfigChannel+0x7b0>)
 8004462:	428b      	cmp	r3, r1
 8004464:	d024      	beq.n	80044b0 <HAL_ADC_ConfigChannel+0x640>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	496e      	ldr	r1, [pc, #440]	@ (8004624 <HAL_ADC_ConfigChannel+0x7b4>)
 800446c:	428b      	cmp	r3, r1
 800446e:	d01d      	beq.n	80044ac <HAL_ADC_ConfigChannel+0x63c>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	496c      	ldr	r1, [pc, #432]	@ (8004628 <HAL_ADC_ConfigChannel+0x7b8>)
 8004476:	428b      	cmp	r3, r1
 8004478:	d016      	beq.n	80044a8 <HAL_ADC_ConfigChannel+0x638>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	496b      	ldr	r1, [pc, #428]	@ (800462c <HAL_ADC_ConfigChannel+0x7bc>)
 8004480:	428b      	cmp	r3, r1
 8004482:	d00f      	beq.n	80044a4 <HAL_ADC_ConfigChannel+0x634>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4969      	ldr	r1, [pc, #420]	@ (8004630 <HAL_ADC_ConfigChannel+0x7c0>)
 800448a:	428b      	cmp	r3, r1
 800448c:	d008      	beq.n	80044a0 <HAL_ADC_ConfigChannel+0x630>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4968      	ldr	r1, [pc, #416]	@ (8004634 <HAL_ADC_ConfigChannel+0x7c4>)
 8004494:	428b      	cmp	r3, r1
 8004496:	d101      	bne.n	800449c <HAL_ADC_ConfigChannel+0x62c>
 8004498:	4b67      	ldr	r3, [pc, #412]	@ (8004638 <HAL_ADC_ConfigChannel+0x7c8>)
 800449a:	e0a0      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 800449c:	2300      	movs	r3, #0
 800449e:	e09e      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80044a0:	4b66      	ldr	r3, [pc, #408]	@ (800463c <HAL_ADC_ConfigChannel+0x7cc>)
 80044a2:	e09c      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80044a4:	4b66      	ldr	r3, [pc, #408]	@ (8004640 <HAL_ADC_ConfigChannel+0x7d0>)
 80044a6:	e09a      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80044a8:	4b60      	ldr	r3, [pc, #384]	@ (800462c <HAL_ADC_ConfigChannel+0x7bc>)
 80044aa:	e098      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80044ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004628 <HAL_ADC_ConfigChannel+0x7b8>)
 80044ae:	e096      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80044b0:	4b64      	ldr	r3, [pc, #400]	@ (8004644 <HAL_ADC_ConfigChannel+0x7d4>)
 80044b2:	e094      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80044b4:	4b64      	ldr	r3, [pc, #400]	@ (8004648 <HAL_ADC_ConfigChannel+0x7d8>)
 80044b6:	e092      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80044b8:	4b64      	ldr	r3, [pc, #400]	@ (800464c <HAL_ADC_ConfigChannel+0x7dc>)
 80044ba:	e090      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80044bc:	4b64      	ldr	r3, [pc, #400]	@ (8004650 <HAL_ADC_ConfigChannel+0x7e0>)
 80044be:	e08e      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e08c      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4962      	ldr	r1, [pc, #392]	@ (8004654 <HAL_ADC_ConfigChannel+0x7e4>)
 80044ca:	428b      	cmp	r3, r1
 80044cc:	d140      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x6e0>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	494f      	ldr	r1, [pc, #316]	@ (8004610 <HAL_ADC_ConfigChannel+0x7a0>)
 80044d4:	428b      	cmp	r3, r1
 80044d6:	d039      	beq.n	800454c <HAL_ADC_ConfigChannel+0x6dc>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	494d      	ldr	r1, [pc, #308]	@ (8004614 <HAL_ADC_ConfigChannel+0x7a4>)
 80044de:	428b      	cmp	r3, r1
 80044e0:	d032      	beq.n	8004548 <HAL_ADC_ConfigChannel+0x6d8>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	494c      	ldr	r1, [pc, #304]	@ (8004618 <HAL_ADC_ConfigChannel+0x7a8>)
 80044e8:	428b      	cmp	r3, r1
 80044ea:	d02b      	beq.n	8004544 <HAL_ADC_ConfigChannel+0x6d4>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	494a      	ldr	r1, [pc, #296]	@ (800461c <HAL_ADC_ConfigChannel+0x7ac>)
 80044f2:	428b      	cmp	r3, r1
 80044f4:	d024      	beq.n	8004540 <HAL_ADC_ConfigChannel+0x6d0>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4949      	ldr	r1, [pc, #292]	@ (8004620 <HAL_ADC_ConfigChannel+0x7b0>)
 80044fc:	428b      	cmp	r3, r1
 80044fe:	d01d      	beq.n	800453c <HAL_ADC_ConfigChannel+0x6cc>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4947      	ldr	r1, [pc, #284]	@ (8004624 <HAL_ADC_ConfigChannel+0x7b4>)
 8004506:	428b      	cmp	r3, r1
 8004508:	d016      	beq.n	8004538 <HAL_ADC_ConfigChannel+0x6c8>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4946      	ldr	r1, [pc, #280]	@ (8004628 <HAL_ADC_ConfigChannel+0x7b8>)
 8004510:	428b      	cmp	r3, r1
 8004512:	d00f      	beq.n	8004534 <HAL_ADC_ConfigChannel+0x6c4>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4944      	ldr	r1, [pc, #272]	@ (800462c <HAL_ADC_ConfigChannel+0x7bc>)
 800451a:	428b      	cmp	r3, r1
 800451c:	d008      	beq.n	8004530 <HAL_ADC_ConfigChannel+0x6c0>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4944      	ldr	r1, [pc, #272]	@ (8004634 <HAL_ADC_ConfigChannel+0x7c4>)
 8004524:	428b      	cmp	r3, r1
 8004526:	d101      	bne.n	800452c <HAL_ADC_ConfigChannel+0x6bc>
 8004528:	4b43      	ldr	r3, [pc, #268]	@ (8004638 <HAL_ADC_ConfigChannel+0x7c8>)
 800452a:	e058      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 800452c:	2300      	movs	r3, #0
 800452e:	e056      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 8004530:	4b43      	ldr	r3, [pc, #268]	@ (8004640 <HAL_ADC_ConfigChannel+0x7d0>)
 8004532:	e054      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 8004534:	4b3d      	ldr	r3, [pc, #244]	@ (800462c <HAL_ADC_ConfigChannel+0x7bc>)
 8004536:	e052      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 8004538:	4b3b      	ldr	r3, [pc, #236]	@ (8004628 <HAL_ADC_ConfigChannel+0x7b8>)
 800453a:	e050      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 800453c:	4b41      	ldr	r3, [pc, #260]	@ (8004644 <HAL_ADC_ConfigChannel+0x7d4>)
 800453e:	e04e      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 8004540:	4b41      	ldr	r3, [pc, #260]	@ (8004648 <HAL_ADC_ConfigChannel+0x7d8>)
 8004542:	e04c      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 8004544:	4b41      	ldr	r3, [pc, #260]	@ (800464c <HAL_ADC_ConfigChannel+0x7dc>)
 8004546:	e04a      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 8004548:	4b41      	ldr	r3, [pc, #260]	@ (8004650 <HAL_ADC_ConfigChannel+0x7e0>)
 800454a:	e048      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 800454c:	2301      	movs	r3, #1
 800454e:	e046      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4940      	ldr	r1, [pc, #256]	@ (8004658 <HAL_ADC_ConfigChannel+0x7e8>)
 8004556:	428b      	cmp	r3, r1
 8004558:	d140      	bne.n	80045dc <HAL_ADC_ConfigChannel+0x76c>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	492c      	ldr	r1, [pc, #176]	@ (8004610 <HAL_ADC_ConfigChannel+0x7a0>)
 8004560:	428b      	cmp	r3, r1
 8004562:	d039      	beq.n	80045d8 <HAL_ADC_ConfigChannel+0x768>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	492a      	ldr	r1, [pc, #168]	@ (8004614 <HAL_ADC_ConfigChannel+0x7a4>)
 800456a:	428b      	cmp	r3, r1
 800456c:	d032      	beq.n	80045d4 <HAL_ADC_ConfigChannel+0x764>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4929      	ldr	r1, [pc, #164]	@ (8004618 <HAL_ADC_ConfigChannel+0x7a8>)
 8004574:	428b      	cmp	r3, r1
 8004576:	d02b      	beq.n	80045d0 <HAL_ADC_ConfigChannel+0x760>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4927      	ldr	r1, [pc, #156]	@ (800461c <HAL_ADC_ConfigChannel+0x7ac>)
 800457e:	428b      	cmp	r3, r1
 8004580:	d024      	beq.n	80045cc <HAL_ADC_ConfigChannel+0x75c>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4926      	ldr	r1, [pc, #152]	@ (8004620 <HAL_ADC_ConfigChannel+0x7b0>)
 8004588:	428b      	cmp	r3, r1
 800458a:	d01d      	beq.n	80045c8 <HAL_ADC_ConfigChannel+0x758>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4924      	ldr	r1, [pc, #144]	@ (8004624 <HAL_ADC_ConfigChannel+0x7b4>)
 8004592:	428b      	cmp	r3, r1
 8004594:	d016      	beq.n	80045c4 <HAL_ADC_ConfigChannel+0x754>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4923      	ldr	r1, [pc, #140]	@ (8004628 <HAL_ADC_ConfigChannel+0x7b8>)
 800459c:	428b      	cmp	r3, r1
 800459e:	d00f      	beq.n	80045c0 <HAL_ADC_ConfigChannel+0x750>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4926      	ldr	r1, [pc, #152]	@ (8004640 <HAL_ADC_ConfigChannel+0x7d0>)
 80045a6:	428b      	cmp	r3, r1
 80045a8:	d008      	beq.n	80045bc <HAL_ADC_ConfigChannel+0x74c>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	492b      	ldr	r1, [pc, #172]	@ (800465c <HAL_ADC_ConfigChannel+0x7ec>)
 80045b0:	428b      	cmp	r3, r1
 80045b2:	d101      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x748>
 80045b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004660 <HAL_ADC_ConfigChannel+0x7f0>)
 80045b6:	e012      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80045b8:	2300      	movs	r3, #0
 80045ba:	e010      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80045bc:	4b27      	ldr	r3, [pc, #156]	@ (800465c <HAL_ADC_ConfigChannel+0x7ec>)
 80045be:	e00e      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80045c0:	4b1a      	ldr	r3, [pc, #104]	@ (800462c <HAL_ADC_ConfigChannel+0x7bc>)
 80045c2:	e00c      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80045c4:	4b18      	ldr	r3, [pc, #96]	@ (8004628 <HAL_ADC_ConfigChannel+0x7b8>)
 80045c6:	e00a      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80045c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004644 <HAL_ADC_ConfigChannel+0x7d4>)
 80045ca:	e008      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80045cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004648 <HAL_ADC_ConfigChannel+0x7d8>)
 80045ce:	e006      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80045d0:	4b1e      	ldr	r3, [pc, #120]	@ (800464c <HAL_ADC_ConfigChannel+0x7dc>)
 80045d2:	e004      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80045d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004650 <HAL_ADC_ConfigChannel+0x7e0>)
 80045d6:	e002      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80045d8:	2301      	movs	r3, #1
 80045da:	e000      	b.n	80045de <HAL_ADC_ConfigChannel+0x76e>
 80045dc:	2300      	movs	r3, #0
 80045de:	4619      	mov	r1, r3
 80045e0:	4610      	mov	r0, r2
 80045e2:	f7fe fd4b 	bl	800307c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f280 80f6 	bge.w	80047dc <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a05      	ldr	r2, [pc, #20]	@ (800460c <HAL_ADC_ConfigChannel+0x79c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d004      	beq.n	8004604 <HAL_ADC_ConfigChannel+0x794>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a15      	ldr	r2, [pc, #84]	@ (8004654 <HAL_ADC_ConfigChannel+0x7e4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d131      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x7f8>
 8004604:	4b17      	ldr	r3, [pc, #92]	@ (8004664 <HAL_ADC_ConfigChannel+0x7f4>)
 8004606:	e030      	b.n	800466a <HAL_ADC_ConfigChannel+0x7fa>
 8004608:	47ff0000 	.word	0x47ff0000
 800460c:	40022000 	.word	0x40022000
 8004610:	04300002 	.word	0x04300002
 8004614:	08600004 	.word	0x08600004
 8004618:	0c900008 	.word	0x0c900008
 800461c:	10c00010 	.word	0x10c00010
 8004620:	14f00020 	.word	0x14f00020
 8004624:	2a000400 	.word	0x2a000400
 8004628:	2e300800 	.word	0x2e300800
 800462c:	32601000 	.word	0x32601000
 8004630:	43210000 	.word	0x43210000
 8004634:	4b840000 	.word	0x4b840000
 8004638:	4fb80000 	.word	0x4fb80000
 800463c:	47520000 	.word	0x47520000
 8004640:	36902000 	.word	0x36902000
 8004644:	25b00200 	.word	0x25b00200
 8004648:	21800100 	.word	0x21800100
 800464c:	1d500080 	.word	0x1d500080
 8004650:	19200040 	.word	0x19200040
 8004654:	40022100 	.word	0x40022100
 8004658:	58026000 	.word	0x58026000
 800465c:	3ac04000 	.word	0x3ac04000
 8004660:	3ef08000 	.word	0x3ef08000
 8004664:	40022300 	.word	0x40022300
 8004668:	4b61      	ldr	r3, [pc, #388]	@ (80047f0 <HAL_ADC_ConfigChannel+0x980>)
 800466a:	4618      	mov	r0, r3
 800466c:	f7fe fcf8 	bl	8003060 <LL_ADC_GetCommonPathInternalCh>
 8004670:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a5f      	ldr	r2, [pc, #380]	@ (80047f4 <HAL_ADC_ConfigChannel+0x984>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d004      	beq.n	8004686 <HAL_ADC_ConfigChannel+0x816>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a5d      	ldr	r2, [pc, #372]	@ (80047f8 <HAL_ADC_ConfigChannel+0x988>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d10e      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x834>
 8004686:	485b      	ldr	r0, [pc, #364]	@ (80047f4 <HAL_ADC_ConfigChannel+0x984>)
 8004688:	f7fe ff60 	bl	800354c <LL_ADC_IsEnabled>
 800468c:	4604      	mov	r4, r0
 800468e:	485a      	ldr	r0, [pc, #360]	@ (80047f8 <HAL_ADC_ConfigChannel+0x988>)
 8004690:	f7fe ff5c 	bl	800354c <LL_ADC_IsEnabled>
 8004694:	4603      	mov	r3, r0
 8004696:	4323      	orrs	r3, r4
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf0c      	ite	eq
 800469c:	2301      	moveq	r3, #1
 800469e:	2300      	movne	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	e008      	b.n	80046b6 <HAL_ADC_ConfigChannel+0x846>
 80046a4:	4855      	ldr	r0, [pc, #340]	@ (80047fc <HAL_ADC_ConfigChannel+0x98c>)
 80046a6:	f7fe ff51 	bl	800354c <LL_ADC_IsEnabled>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	bf0c      	ite	eq
 80046b0:	2301      	moveq	r3, #1
 80046b2:	2300      	movne	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d07d      	beq.n	80047b6 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a50      	ldr	r2, [pc, #320]	@ (8004800 <HAL_ADC_ConfigChannel+0x990>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d130      	bne.n	8004726 <HAL_ADC_ConfigChannel+0x8b6>
 80046c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d12b      	bne.n	8004726 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a4a      	ldr	r2, [pc, #296]	@ (80047fc <HAL_ADC_ConfigChannel+0x98c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	f040 8081 	bne.w	80047dc <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a45      	ldr	r2, [pc, #276]	@ (80047f4 <HAL_ADC_ConfigChannel+0x984>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d004      	beq.n	80046ee <HAL_ADC_ConfigChannel+0x87e>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a43      	ldr	r2, [pc, #268]	@ (80047f8 <HAL_ADC_ConfigChannel+0x988>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d101      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x882>
 80046ee:	4a45      	ldr	r2, [pc, #276]	@ (8004804 <HAL_ADC_ConfigChannel+0x994>)
 80046f0:	e000      	b.n	80046f4 <HAL_ADC_ConfigChannel+0x884>
 80046f2:	4a3f      	ldr	r2, [pc, #252]	@ (80047f0 <HAL_ADC_ConfigChannel+0x980>)
 80046f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046fa:	4619      	mov	r1, r3
 80046fc:	4610      	mov	r0, r2
 80046fe:	f7fe fc9c 	bl	800303a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004702:	4b41      	ldr	r3, [pc, #260]	@ (8004808 <HAL_ADC_ConfigChannel+0x998>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	099b      	lsrs	r3, r3, #6
 8004708:	4a40      	ldr	r2, [pc, #256]	@ (800480c <HAL_ADC_ConfigChannel+0x99c>)
 800470a:	fba2 2303 	umull	r2, r3, r2, r3
 800470e:	099b      	lsrs	r3, r3, #6
 8004710:	3301      	adds	r3, #1
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004716:	e002      	b.n	800471e <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3b01      	subs	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f9      	bne.n	8004718 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004724:	e05a      	b.n	80047dc <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a39      	ldr	r2, [pc, #228]	@ (8004810 <HAL_ADC_ConfigChannel+0x9a0>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d11e      	bne.n	800476e <HAL_ADC_ConfigChannel+0x8fe>
 8004730:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004732:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d119      	bne.n	800476e <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a2f      	ldr	r2, [pc, #188]	@ (80047fc <HAL_ADC_ConfigChannel+0x98c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d14b      	bne.n	80047dc <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a2a      	ldr	r2, [pc, #168]	@ (80047f4 <HAL_ADC_ConfigChannel+0x984>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <HAL_ADC_ConfigChannel+0x8e8>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a29      	ldr	r2, [pc, #164]	@ (80047f8 <HAL_ADC_ConfigChannel+0x988>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d101      	bne.n	800475c <HAL_ADC_ConfigChannel+0x8ec>
 8004758:	4a2a      	ldr	r2, [pc, #168]	@ (8004804 <HAL_ADC_ConfigChannel+0x994>)
 800475a:	e000      	b.n	800475e <HAL_ADC_ConfigChannel+0x8ee>
 800475c:	4a24      	ldr	r2, [pc, #144]	@ (80047f0 <HAL_ADC_ConfigChannel+0x980>)
 800475e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004760:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004764:	4619      	mov	r1, r3
 8004766:	4610      	mov	r0, r2
 8004768:	f7fe fc67 	bl	800303a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800476c:	e036      	b.n	80047dc <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a28      	ldr	r2, [pc, #160]	@ (8004814 <HAL_ADC_ConfigChannel+0x9a4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d131      	bne.n	80047dc <HAL_ADC_ConfigChannel+0x96c>
 8004778:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800477a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d12c      	bne.n	80047dc <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1d      	ldr	r2, [pc, #116]	@ (80047fc <HAL_ADC_ConfigChannel+0x98c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d127      	bne.n	80047dc <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a18      	ldr	r2, [pc, #96]	@ (80047f4 <HAL_ADC_ConfigChannel+0x984>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d004      	beq.n	80047a0 <HAL_ADC_ConfigChannel+0x930>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a17      	ldr	r2, [pc, #92]	@ (80047f8 <HAL_ADC_ConfigChannel+0x988>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d101      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x934>
 80047a0:	4a18      	ldr	r2, [pc, #96]	@ (8004804 <HAL_ADC_ConfigChannel+0x994>)
 80047a2:	e000      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x936>
 80047a4:	4a12      	ldr	r2, [pc, #72]	@ (80047f0 <HAL_ADC_ConfigChannel+0x980>)
 80047a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f7fe fc43 	bl	800303a <LL_ADC_SetCommonPathInternalCh>
 80047b4:	e012      	b.n	80047dc <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ba:	f043 0220 	orr.w	r2, r3, #32
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80047c8:	e008      	b.n	80047dc <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ce:	f043 0220 	orr.w	r2, r3, #32
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80047e4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3794      	adds	r7, #148	@ 0x94
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd90      	pop	{r4, r7, pc}
 80047f0:	58026300 	.word	0x58026300
 80047f4:	40022000 	.word	0x40022000
 80047f8:	40022100 	.word	0x40022100
 80047fc:	58026000 	.word	0x58026000
 8004800:	c7520000 	.word	0xc7520000
 8004804:	40022300 	.word	0x40022300
 8004808:	24000008 	.word	0x24000008
 800480c:	053e2d63 	.word	0x053e2d63
 8004810:	c3210000 	.word	0xc3210000
 8004814:	cb840000 	.word	0xcb840000

08004818 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004822:	2300      	movs	r3, #0
 8004824:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f7fe feda 	bl	80035e8 <LL_ADC_REG_IsConversionOngoing>
 8004834:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f7fe fefc 	bl	8003638 <LL_ADC_INJ_IsConversionOngoing>
 8004840:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d103      	bne.n	8004850 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 8098 	beq.w	8004980 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d02a      	beq.n	80048b4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	7e5b      	ldrb	r3, [r3, #25]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d126      	bne.n	80048b4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	7e1b      	ldrb	r3, [r3, #24]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d122      	bne.n	80048b4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800486e:	2301      	movs	r3, #1
 8004870:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004872:	e014      	b.n	800489e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	4a45      	ldr	r2, [pc, #276]	@ (800498c <ADC_ConversionStop+0x174>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d90d      	bls.n	8004898 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004880:	f043 0210 	orr.w	r2, r3, #16
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800488c:	f043 0201 	orr.w	r2, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e074      	b.n	8004982 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	3301      	adds	r3, #1
 800489c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a8:	2b40      	cmp	r3, #64	@ 0x40
 80048aa:	d1e3      	bne.n	8004874 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2240      	movs	r2, #64	@ 0x40
 80048b2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d014      	beq.n	80048e4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fe fe92 	bl	80035e8 <LL_ADC_REG_IsConversionOngoing>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00c      	beq.n	80048e4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe fe4f 	bl	8003572 <LL_ADC_IsDisableOngoing>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d104      	bne.n	80048e4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fe fe6e 	bl	80035c0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d014      	beq.n	8004914 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fe fea2 	bl	8003638 <LL_ADC_INJ_IsConversionOngoing>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00c      	beq.n	8004914 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fe fe37 	bl	8003572 <LL_ADC_IsDisableOngoing>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d104      	bne.n	8004914 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f7fe fe7e 	bl	8003610 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d005      	beq.n	8004926 <ADC_ConversionStop+0x10e>
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	2b03      	cmp	r3, #3
 800491e:	d105      	bne.n	800492c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004920:	230c      	movs	r3, #12
 8004922:	617b      	str	r3, [r7, #20]
        break;
 8004924:	e005      	b.n	8004932 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004926:	2308      	movs	r3, #8
 8004928:	617b      	str	r3, [r7, #20]
        break;
 800492a:	e002      	b.n	8004932 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800492c:	2304      	movs	r3, #4
 800492e:	617b      	str	r3, [r7, #20]
        break;
 8004930:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004932:	f7fe fb63 	bl	8002ffc <HAL_GetTick>
 8004936:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004938:	e01b      	b.n	8004972 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800493a:	f7fe fb5f 	bl	8002ffc <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b05      	cmp	r3, #5
 8004946:	d914      	bls.n	8004972 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	4013      	ands	r3, r2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00d      	beq.n	8004972 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800495a:	f043 0210 	orr.w	r2, r3, #16
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004966:	f043 0201 	orr.w	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e007      	b.n	8004982 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	4013      	ands	r3, r2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1dc      	bne.n	800493a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	000cdbff 	.word	0x000cdbff

08004990 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f7fe fdd5 	bl	800354c <LL_ADC_IsEnabled>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d16e      	bne.n	8004a86 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	4b38      	ldr	r3, [pc, #224]	@ (8004a90 <ADC_Enable+0x100>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00d      	beq.n	80049d2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ba:	f043 0210 	orr.w	r2, r3, #16
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049c6:	f043 0201 	orr.w	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e05a      	b.n	8004a88 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fe fd90 	bl	80034fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049dc:	f7fe fb0e 	bl	8002ffc <HAL_GetTick>
 80049e0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a2b      	ldr	r2, [pc, #172]	@ (8004a94 <ADC_Enable+0x104>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d004      	beq.n	80049f6 <ADC_Enable+0x66>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a29      	ldr	r2, [pc, #164]	@ (8004a98 <ADC_Enable+0x108>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d101      	bne.n	80049fa <ADC_Enable+0x6a>
 80049f6:	4b29      	ldr	r3, [pc, #164]	@ (8004a9c <ADC_Enable+0x10c>)
 80049f8:	e000      	b.n	80049fc <ADC_Enable+0x6c>
 80049fa:	4b29      	ldr	r3, [pc, #164]	@ (8004aa0 <ADC_Enable+0x110>)
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fe fd13 	bl	8003428 <LL_ADC_GetMultimode>
 8004a02:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a23      	ldr	r2, [pc, #140]	@ (8004a98 <ADC_Enable+0x108>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d002      	beq.n	8004a14 <ADC_Enable+0x84>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	e000      	b.n	8004a16 <ADC_Enable+0x86>
 8004a14:	4b1f      	ldr	r3, [pc, #124]	@ (8004a94 <ADC_Enable+0x104>)
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d02c      	beq.n	8004a78 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d130      	bne.n	8004a86 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a24:	e028      	b.n	8004a78 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe fd8e 	bl	800354c <LL_ADC_IsEnabled>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d104      	bne.n	8004a40 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fe fd5e 	bl	80034fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a40:	f7fe fadc 	bl	8002ffc <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d914      	bls.n	8004a78 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d00d      	beq.n	8004a78 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a60:	f043 0210 	orr.w	r2, r3, #16
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a6c:	f043 0201 	orr.w	r2, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e007      	b.n	8004a88 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d1cf      	bne.n	8004a26 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	8000003f 	.word	0x8000003f
 8004a94:	40022000 	.word	0x40022000
 8004a98:	40022100 	.word	0x40022100
 8004a9c:	40022300 	.word	0x40022300
 8004aa0:	58026300 	.word	0x58026300

08004aa4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fe fd5e 	bl	8003572 <LL_ADC_IsDisableOngoing>
 8004ab6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fe fd45 	bl	800354c <LL_ADC_IsEnabled>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d047      	beq.n	8004b58 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d144      	bne.n	8004b58 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 030d 	and.w	r3, r3, #13
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d10c      	bne.n	8004af6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fe fd1f 	bl	8003524 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2203      	movs	r2, #3
 8004aec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004aee:	f7fe fa85 	bl	8002ffc <HAL_GetTick>
 8004af2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004af4:	e029      	b.n	8004b4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004afa:	f043 0210 	orr.w	r2, r3, #16
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b06:	f043 0201 	orr.w	r2, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e023      	b.n	8004b5a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b12:	f7fe fa73 	bl	8002ffc <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d914      	bls.n	8004b4a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00d      	beq.n	8004b4a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b32:	f043 0210 	orr.w	r2, r3, #16
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b3e:	f043 0201 	orr.w	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e007      	b.n	8004b5a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1dc      	bne.n	8004b12 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a6c      	ldr	r2, [pc, #432]	@ (8004d24 <ADC_ConfigureBoostMode+0x1c0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d004      	beq.n	8004b80 <ADC_ConfigureBoostMode+0x1c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a6b      	ldr	r2, [pc, #428]	@ (8004d28 <ADC_ConfigureBoostMode+0x1c4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d109      	bne.n	8004b94 <ADC_ConfigureBoostMode+0x30>
 8004b80:	4b6a      	ldr	r3, [pc, #424]	@ (8004d2c <ADC_ConfigureBoostMode+0x1c8>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bf14      	ite	ne
 8004b8c:	2301      	movne	r3, #1
 8004b8e:	2300      	moveq	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	e008      	b.n	8004ba6 <ADC_ConfigureBoostMode+0x42>
 8004b94:	4b66      	ldr	r3, [pc, #408]	@ (8004d30 <ADC_ConfigureBoostMode+0x1cc>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf14      	ite	ne
 8004ba0:	2301      	movne	r3, #1
 8004ba2:	2300      	moveq	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d01c      	beq.n	8004be4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004baa:	f002 fdcd 	bl	8007748 <HAL_RCC_GetHCLKFreq>
 8004bae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004bb8:	d010      	beq.n	8004bdc <ADC_ConfigureBoostMode+0x78>
 8004bba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004bbe:	d873      	bhi.n	8004ca8 <ADC_ConfigureBoostMode+0x144>
 8004bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bc4:	d002      	beq.n	8004bcc <ADC_ConfigureBoostMode+0x68>
 8004bc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bca:	d16d      	bne.n	8004ca8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	0c1b      	lsrs	r3, r3, #16
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd8:	60fb      	str	r3, [r7, #12]
        break;
 8004bda:	e068      	b.n	8004cae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	089b      	lsrs	r3, r3, #2
 8004be0:	60fb      	str	r3, [r7, #12]
        break;
 8004be2:	e064      	b.n	8004cae <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004be4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004be8:	f04f 0100 	mov.w	r1, #0
 8004bec:	f003 ffa8 	bl	8008b40 <HAL_RCCEx_GetPeriphCLKFreq>
 8004bf0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004bfa:	d051      	beq.n	8004ca0 <ADC_ConfigureBoostMode+0x13c>
 8004bfc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004c00:	d854      	bhi.n	8004cac <ADC_ConfigureBoostMode+0x148>
 8004c02:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004c06:	d047      	beq.n	8004c98 <ADC_ConfigureBoostMode+0x134>
 8004c08:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004c0c:	d84e      	bhi.n	8004cac <ADC_ConfigureBoostMode+0x148>
 8004c0e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004c12:	d03d      	beq.n	8004c90 <ADC_ConfigureBoostMode+0x12c>
 8004c14:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004c18:	d848      	bhi.n	8004cac <ADC_ConfigureBoostMode+0x148>
 8004c1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c1e:	d033      	beq.n	8004c88 <ADC_ConfigureBoostMode+0x124>
 8004c20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c24:	d842      	bhi.n	8004cac <ADC_ConfigureBoostMode+0x148>
 8004c26:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004c2a:	d029      	beq.n	8004c80 <ADC_ConfigureBoostMode+0x11c>
 8004c2c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004c30:	d83c      	bhi.n	8004cac <ADC_ConfigureBoostMode+0x148>
 8004c32:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004c36:	d01a      	beq.n	8004c6e <ADC_ConfigureBoostMode+0x10a>
 8004c38:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004c3c:	d836      	bhi.n	8004cac <ADC_ConfigureBoostMode+0x148>
 8004c3e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004c42:	d014      	beq.n	8004c6e <ADC_ConfigureBoostMode+0x10a>
 8004c44:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004c48:	d830      	bhi.n	8004cac <ADC_ConfigureBoostMode+0x148>
 8004c4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c4e:	d00e      	beq.n	8004c6e <ADC_ConfigureBoostMode+0x10a>
 8004c50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c54:	d82a      	bhi.n	8004cac <ADC_ConfigureBoostMode+0x148>
 8004c56:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004c5a:	d008      	beq.n	8004c6e <ADC_ConfigureBoostMode+0x10a>
 8004c5c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004c60:	d824      	bhi.n	8004cac <ADC_ConfigureBoostMode+0x148>
 8004c62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c66:	d002      	beq.n	8004c6e <ADC_ConfigureBoostMode+0x10a>
 8004c68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004c6c:	d11e      	bne.n	8004cac <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	0c9b      	lsrs	r3, r3, #18
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7c:	60fb      	str	r3, [r7, #12]
        break;
 8004c7e:	e016      	b.n	8004cae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	091b      	lsrs	r3, r3, #4
 8004c84:	60fb      	str	r3, [r7, #12]
        break;
 8004c86:	e012      	b.n	8004cae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	60fb      	str	r3, [r7, #12]
        break;
 8004c8e:	e00e      	b.n	8004cae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	099b      	lsrs	r3, r3, #6
 8004c94:	60fb      	str	r3, [r7, #12]
        break;
 8004c96:	e00a      	b.n	8004cae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	09db      	lsrs	r3, r3, #7
 8004c9c:	60fb      	str	r3, [r7, #12]
        break;
 8004c9e:	e006      	b.n	8004cae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	0a1b      	lsrs	r3, r3, #8
 8004ca4:	60fb      	str	r3, [r7, #12]
        break;
 8004ca6:	e002      	b.n	8004cae <ADC_ConfigureBoostMode+0x14a>
        break;
 8004ca8:	bf00      	nop
 8004caa:	e000      	b.n	8004cae <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004cac:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	085b      	lsrs	r3, r3, #1
 8004cb2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8004d34 <ADC_ConfigureBoostMode+0x1d0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d808      	bhi.n	8004cce <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004cca:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004ccc:	e025      	b.n	8004d1a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4a19      	ldr	r2, [pc, #100]	@ (8004d38 <ADC_ConfigureBoostMode+0x1d4>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d80a      	bhi.n	8004cec <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ce8:	609a      	str	r2, [r3, #8]
}
 8004cea:	e016      	b.n	8004d1a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4a13      	ldr	r2, [pc, #76]	@ (8004d3c <ADC_ConfigureBoostMode+0x1d8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d80a      	bhi.n	8004d0a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d06:	609a      	str	r2, [r3, #8]
}
 8004d08:	e007      	b.n	8004d1a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004d18:	609a      	str	r2, [r3, #8]
}
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	40022000 	.word	0x40022000
 8004d28:	40022100 	.word	0x40022100
 8004d2c:	40022300 	.word	0x40022300
 8004d30:	58026300 	.word	0x58026300
 8004d34:	005f5e10 	.word	0x005f5e10
 8004d38:	00bebc20 	.word	0x00bebc20
 8004d3c:	017d7840 	.word	0x017d7840

08004d40 <LL_ADC_IsEnabled>:
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <LL_ADC_IsEnabled+0x18>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <LL_ADC_IsEnabled+0x1a>
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <LL_ADC_REG_IsConversionOngoing>:
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d101      	bne.n	8004d7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004d8c:	b590      	push	{r4, r7, lr}
 8004d8e:	b0a3      	sub	sp, #140	@ 0x8c
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004da6:	2302      	movs	r3, #2
 8004da8:	e0c1      	b.n	8004f2e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004db2:	2300      	movs	r3, #0
 8004db4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a5e      	ldr	r2, [pc, #376]	@ (8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d102      	bne.n	8004dca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004dc4:	4b5d      	ldr	r3, [pc, #372]	@ (8004f3c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e001      	b.n	8004dce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dd8:	f043 0220 	orr.w	r2, r3, #32
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e0a0      	b.n	8004f2e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff ffb9 	bl	8004d66 <LL_ADC_REG_IsConversionOngoing>
 8004df4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7ff ffb2 	bl	8004d66 <LL_ADC_REG_IsConversionOngoing>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f040 8081 	bne.w	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004e0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d17c      	bne.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a48      	ldr	r2, [pc, #288]	@ (8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d004      	beq.n	8004e26 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a46      	ldr	r2, [pc, #280]	@ (8004f3c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d101      	bne.n	8004e2a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004e26:	4b46      	ldr	r3, [pc, #280]	@ (8004f40 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004e28:	e000      	b.n	8004e2c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004e2a:	4b46      	ldr	r3, [pc, #280]	@ (8004f44 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004e2c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d039      	beq.n	8004eaa <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004e36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	431a      	orrs	r2, r3
 8004e44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e46:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a3a      	ldr	r2, [pc, #232]	@ (8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d004      	beq.n	8004e5c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a39      	ldr	r2, [pc, #228]	@ (8004f3c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d10e      	bne.n	8004e7a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004e5c:	4836      	ldr	r0, [pc, #216]	@ (8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e5e:	f7ff ff6f 	bl	8004d40 <LL_ADC_IsEnabled>
 8004e62:	4604      	mov	r4, r0
 8004e64:	4835      	ldr	r0, [pc, #212]	@ (8004f3c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e66:	f7ff ff6b 	bl	8004d40 <LL_ADC_IsEnabled>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4323      	orrs	r3, r4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	bf0c      	ite	eq
 8004e72:	2301      	moveq	r3, #1
 8004e74:	2300      	movne	r3, #0
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	e008      	b.n	8004e8c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004e7a:	4833      	ldr	r0, [pc, #204]	@ (8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004e7c:	f7ff ff60 	bl	8004d40 <LL_ADC_IsEnabled>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	bf0c      	ite	eq
 8004e86:	2301      	moveq	r3, #1
 8004e88:	2300      	movne	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d047      	beq.n	8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004e90:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	4b2d      	ldr	r3, [pc, #180]	@ (8004f4c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	6811      	ldr	r1, [r2, #0]
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	6892      	ldr	r2, [r2, #8]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ea6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ea8:	e03a      	b.n	8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004eaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004eb2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004eb4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1f      	ldr	r2, [pc, #124]	@ (8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d004      	beq.n	8004eca <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f3c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d10e      	bne.n	8004ee8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004eca:	481b      	ldr	r0, [pc, #108]	@ (8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ecc:	f7ff ff38 	bl	8004d40 <LL_ADC_IsEnabled>
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	481a      	ldr	r0, [pc, #104]	@ (8004f3c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ed4:	f7ff ff34 	bl	8004d40 <LL_ADC_IsEnabled>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	4323      	orrs	r3, r4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	bf0c      	ite	eq
 8004ee0:	2301      	moveq	r3, #1
 8004ee2:	2300      	movne	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	e008      	b.n	8004efa <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004ee8:	4817      	ldr	r0, [pc, #92]	@ (8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004eea:	f7ff ff29 	bl	8004d40 <LL_ADC_IsEnabled>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	bf0c      	ite	eq
 8004ef4:	2301      	moveq	r3, #1
 8004ef6:	2300      	movne	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d010      	beq.n	8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004efe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	4b12      	ldr	r3, [pc, #72]	@ (8004f4c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004f08:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f0a:	e009      	b.n	8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f10:	f043 0220 	orr.w	r2, r3, #32
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004f1e:	e000      	b.n	8004f22 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004f2a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	378c      	adds	r7, #140	@ 0x8c
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd90      	pop	{r4, r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40022000 	.word	0x40022000
 8004f3c:	40022100 	.word	0x40022100
 8004f40:	40022300 	.word	0x40022300
 8004f44:	58026300 	.word	0x58026300
 8004f48:	58026000 	.word	0x58026000
 8004f4c:	fffff0e0 	.word	0xfffff0e0

08004f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f60:	4b0b      	ldr	r3, [pc, #44]	@ (8004f90 <__NVIC_SetPriorityGrouping+0x40>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f78:	4b06      	ldr	r3, [pc, #24]	@ (8004f94 <__NVIC_SetPriorityGrouping+0x44>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f7e:	4a04      	ldr	r2, [pc, #16]	@ (8004f90 <__NVIC_SetPriorityGrouping+0x40>)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	60d3      	str	r3, [r2, #12]
}
 8004f84:	bf00      	nop
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	e000ed00 	.word	0xe000ed00
 8004f94:	05fa0000 	.word	0x05fa0000

08004f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f9c:	4b04      	ldr	r3, [pc, #16]	@ (8004fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	0a1b      	lsrs	r3, r3, #8
 8004fa2:	f003 0307 	and.w	r3, r3, #7
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	e000ed00 	.word	0xe000ed00

08004fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	db0b      	blt.n	8004fde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	f003 021f 	and.w	r2, r3, #31
 8004fcc:	4907      	ldr	r1, [pc, #28]	@ (8004fec <__NVIC_EnableIRQ+0x38>)
 8004fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	2001      	movs	r0, #1
 8004fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8004fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	e000e100 	.word	0xe000e100

08004ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	6039      	str	r1, [r7, #0]
 8004ffa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ffc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005000:	2b00      	cmp	r3, #0
 8005002:	db0a      	blt.n	800501a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	b2da      	uxtb	r2, r3
 8005008:	490c      	ldr	r1, [pc, #48]	@ (800503c <__NVIC_SetPriority+0x4c>)
 800500a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800500e:	0112      	lsls	r2, r2, #4
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	440b      	add	r3, r1
 8005014:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005018:	e00a      	b.n	8005030 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	b2da      	uxtb	r2, r3
 800501e:	4908      	ldr	r1, [pc, #32]	@ (8005040 <__NVIC_SetPriority+0x50>)
 8005020:	88fb      	ldrh	r3, [r7, #6]
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	3b04      	subs	r3, #4
 8005028:	0112      	lsls	r2, r2, #4
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	440b      	add	r3, r1
 800502e:	761a      	strb	r2, [r3, #24]
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	e000e100 	.word	0xe000e100
 8005040:	e000ed00 	.word	0xe000ed00

08005044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005044:	b480      	push	{r7}
 8005046:	b089      	sub	sp, #36	@ 0x24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f1c3 0307 	rsb	r3, r3, #7
 800505e:	2b04      	cmp	r3, #4
 8005060:	bf28      	it	cs
 8005062:	2304      	movcs	r3, #4
 8005064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	3304      	adds	r3, #4
 800506a:	2b06      	cmp	r3, #6
 800506c:	d902      	bls.n	8005074 <NVIC_EncodePriority+0x30>
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	3b03      	subs	r3, #3
 8005072:	e000      	b.n	8005076 <NVIC_EncodePriority+0x32>
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005078:	f04f 32ff 	mov.w	r2, #4294967295
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	43da      	mvns	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	401a      	ands	r2, r3
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800508c:	f04f 31ff 	mov.w	r1, #4294967295
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	fa01 f303 	lsl.w	r3, r1, r3
 8005096:	43d9      	mvns	r1, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800509c:	4313      	orrs	r3, r2
         );
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3724      	adds	r7, #36	@ 0x24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
	...

080050ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050bc:	d301      	bcc.n	80050c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050be:	2301      	movs	r3, #1
 80050c0:	e00f      	b.n	80050e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050c2:	4a0a      	ldr	r2, [pc, #40]	@ (80050ec <SysTick_Config+0x40>)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050ca:	210f      	movs	r1, #15
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295
 80050d0:	f7ff ff8e 	bl	8004ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050d4:	4b05      	ldr	r3, [pc, #20]	@ (80050ec <SysTick_Config+0x40>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050da:	4b04      	ldr	r3, [pc, #16]	@ (80050ec <SysTick_Config+0x40>)
 80050dc:	2207      	movs	r2, #7
 80050de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	e000e010 	.word	0xe000e010

080050f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7ff ff29 	bl	8004f50 <__NVIC_SetPriorityGrouping>
}
 80050fe:	bf00      	nop
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b086      	sub	sp, #24
 800510a:	af00      	add	r7, sp, #0
 800510c:	4603      	mov	r3, r0
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	607a      	str	r2, [r7, #4]
 8005112:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005114:	f7ff ff40 	bl	8004f98 <__NVIC_GetPriorityGrouping>
 8005118:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	6978      	ldr	r0, [r7, #20]
 8005120:	f7ff ff90 	bl	8005044 <NVIC_EncodePriority>
 8005124:	4602      	mov	r2, r0
 8005126:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800512a:	4611      	mov	r1, r2
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff ff5f 	bl	8004ff0 <__NVIC_SetPriority>
}
 8005132:	bf00      	nop
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b082      	sub	sp, #8
 800513e:	af00      	add	r7, sp, #0
 8005140:	4603      	mov	r3, r0
 8005142:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff ff33 	bl	8004fb4 <__NVIC_EnableIRQ>
}
 800514e:	bf00      	nop
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7ff ffa4 	bl	80050ac <SysTick_Config>
 8005164:	4603      	mov	r3, r0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b098      	sub	sp, #96	@ 0x60
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005178:	4a84      	ldr	r2, [pc, #528]	@ (800538c <HAL_FDCAN_Init+0x21c>)
 800517a:	f107 030c 	add.w	r3, r7, #12
 800517e:	4611      	mov	r1, r2
 8005180:	224c      	movs	r2, #76	@ 0x4c
 8005182:	4618      	mov	r0, r3
 8005184:	f007 f918 	bl	800c3b8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e1c6      	b.n	8005520 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a7e      	ldr	r2, [pc, #504]	@ (8005390 <HAL_FDCAN_Init+0x220>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d106      	bne.n	80051aa <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80051a4:	461a      	mov	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fd fbe8 	bl	8002994 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0210 	bic.w	r2, r2, #16
 80051d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051d4:	f7fd ff12 	bl	8002ffc <HAL_GetTick>
 80051d8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80051da:	e014      	b.n	8005206 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80051dc:	f7fd ff0e 	bl	8002ffc <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b0a      	cmp	r3, #10
 80051e8:	d90d      	bls.n	8005206 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051f0:	f043 0201 	orr.w	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2203      	movs	r2, #3
 80051fe:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e18c      	b.n	8005520 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b08      	cmp	r3, #8
 8005212:	d0e3      	beq.n	80051dc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005224:	f7fd feea 	bl	8002ffc <HAL_GetTick>
 8005228:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800522a:	e014      	b.n	8005256 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800522c:	f7fd fee6 	bl	8002ffc <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b0a      	cmp	r3, #10
 8005238:	d90d      	bls.n	8005256 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005240:	f043 0201 	orr.w	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2203      	movs	r2, #3
 800524e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e164      	b.n	8005520 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0e3      	beq.n	800522c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0202 	orr.w	r2, r2, #2
 8005272:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	7c1b      	ldrb	r3, [r3, #16]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d108      	bne.n	800528e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699a      	ldr	r2, [r3, #24]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800528a:	619a      	str	r2, [r3, #24]
 800528c:	e007      	b.n	800529e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699a      	ldr	r2, [r3, #24]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800529c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	7c5b      	ldrb	r3, [r3, #17]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d108      	bne.n	80052b8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	699a      	ldr	r2, [r3, #24]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052b4:	619a      	str	r2, [r3, #24]
 80052b6:	e007      	b.n	80052c8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80052c6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	7c9b      	ldrb	r3, [r3, #18]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d108      	bne.n	80052e2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699a      	ldr	r2, [r3, #24]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80052de:	619a      	str	r2, [r3, #24]
 80052e0:	e007      	b.n	80052f2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699a      	ldr	r2, [r3, #24]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80052f0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699a      	ldr	r2, [r3, #24]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005316:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0210 	bic.w	r2, r2, #16
 8005326:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d108      	bne.n	8005342 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0204 	orr.w	r2, r2, #4
 800533e:	619a      	str	r2, [r3, #24]
 8005340:	e030      	b.n	80053a4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d02c      	beq.n	80053a4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d020      	beq.n	8005394 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699a      	ldr	r2, [r3, #24]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005360:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0210 	orr.w	r2, r2, #16
 8005370:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	2b03      	cmp	r3, #3
 8005378:	d114      	bne.n	80053a4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699a      	ldr	r2, [r3, #24]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f042 0220 	orr.w	r2, r2, #32
 8005388:	619a      	str	r2, [r3, #24]
 800538a:	e00b      	b.n	80053a4 <HAL_FDCAN_Init+0x234>
 800538c:	0800d034 	.word	0x0800d034
 8005390:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0220 	orr.w	r2, r2, #32
 80053a2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	3b01      	subs	r3, #1
 80053aa:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	3b01      	subs	r3, #1
 80053b2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80053b4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80053bc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80053cc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80053ce:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053d8:	d115      	bne.n	8005406 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053de:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e4:	3b01      	subs	r3, #1
 80053e6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80053e8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ee:	3b01      	subs	r3, #1
 80053f0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80053f2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fa:	3b01      	subs	r3, #1
 80053fc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005402:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005404:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800542c:	4413      	add	r3, r2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d011      	beq.n	8005456 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800543a:	f023 0107 	bic.w	r1, r3, #7
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	3360      	adds	r3, #96	@ 0x60
 8005446:	443b      	add	r3, r7
 8005448:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d011      	beq.n	8005482 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005466:	f023 0107 	bic.w	r1, r3, #7
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	3360      	adds	r3, #96	@ 0x60
 8005472:	443b      	add	r3, r7
 8005474:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005486:	2b00      	cmp	r3, #0
 8005488:	d012      	beq.n	80054b0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005492:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	3360      	adds	r3, #96	@ 0x60
 800549e:	443b      	add	r3, r7
 80054a0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80054a4:	011a      	lsls	r2, r3, #4
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d012      	beq.n	80054de <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80054c0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	3360      	adds	r3, #96	@ 0x60
 80054cc:	443b      	add	r3, r7
 80054ce:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80054d2:	021a      	lsls	r2, r3, #8
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a11      	ldr	r2, [pc, #68]	@ (8005528 <HAL_FDCAN_Init+0x3b8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d107      	bne.n	80054f8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f022 0203 	bic.w	r2, r2, #3
 80054f6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fdf7 	bl	8006104 <FDCAN_CalcultateRamBlockAddresses>
 8005516:	4603      	mov	r3, r0
 8005518:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 800551c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005520:	4618      	mov	r0, r3
 8005522:	3760      	adds	r7, #96	@ 0x60
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	4000a000 	.word	0x4000a000

0800552c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800553c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d002      	beq.n	800554a <HAL_FDCAN_ConfigFilter+0x1e>
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d157      	bne.n	80055fa <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d12b      	bne.n	80055aa <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2b07      	cmp	r3, #7
 8005558:	d10d      	bne.n	8005576 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8005566:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800556c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800556e:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	e00e      	b.n	8005594 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005582:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800558a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	e025      	b.n	80055f6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	075a      	lsls	r2, r3, #29
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	2b07      	cmp	r3, #7
 80055be:	d103      	bne.n	80055c8 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	e006      	b.n	80055d6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	079a      	lsls	r2, r3, #30
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	4413      	add	r3, r2
 80055e2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	3304      	adds	r3, #4
 80055ee:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	e008      	b.n	800560c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005600:	f043 0202 	orr.w	r2, r3, #2
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
  }
}
 800560c:	4618      	mov	r0, r3
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	d111      	bne.n	8005650 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0201 	bic.w	r2, r2, #1
 8005642:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800564c:	2300      	movs	r3, #0
 800564e:	e008      	b.n	8005662 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005656:	f043 0204 	orr.w	r2, r3, #4
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b086      	sub	sp, #24
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d141      	bne.n	800570a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800568e:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d109      	bne.n	80056aa <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800569c:	f043 0220 	orr.w	r2, r3, #32
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e038      	b.n	800571c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80056b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d009      	beq.n	80056ce <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e026      	b.n	800571c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80056d6:	0c1b      	lsrs	r3, r3, #16
 80056d8:	f003 031f 	and.w	r3, r3, #31
 80056dc:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 fe93 	bl	8006410 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2101      	movs	r1, #1
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	fa01 f202 	lsl.w	r2, r1, r2
 80056f6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80056fa:	2201      	movs	r2, #1
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	409a      	lsls	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	e008      	b.n	800571c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005710:	f043 0208 	orr.w	r2, r3, #8
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
  }
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005724:	b480      	push	{r7}
 8005726:	b08b      	sub	sp, #44	@ 0x2c
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
 8005730:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005732:	2300      	movs	r3, #0
 8005734:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800573c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800573e:	7efb      	ldrb	r3, [r7, #27]
 8005740:	2b02      	cmp	r3, #2
 8005742:	f040 8149 	bne.w	80059d8 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2b40      	cmp	r3, #64	@ 0x40
 800574a:	d14c      	bne.n	80057e6 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005754:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d109      	bne.n	8005770 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005762:	f043 0220 	orr.w	r2, r3, #32
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e13c      	b.n	80059ea <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800577c:	2b00      	cmp	r3, #0
 800577e:	d109      	bne.n	8005794 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005786:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e12a      	b.n	80059ea <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800579c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057a4:	d10a      	bne.n	80057bc <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80057ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057b6:	d101      	bne.n	80057bc <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80057b8:	2301      	movs	r3, #1
 80057ba:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057c4:	0a1b      	lsrs	r3, r3, #8
 80057c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	4413      	add	r3, r2
 80057ce:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d8:	69f9      	ldr	r1, [r7, #28]
 80057da:	fb01 f303 	mul.w	r3, r1, r3
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057e4:	e068      	b.n	80058b8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b41      	cmp	r3, #65	@ 0x41
 80057ea:	d14c      	bne.n	8005886 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057f4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d109      	bne.n	8005810 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005802:	f043 0220 	orr.w	r2, r3, #32
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e0ec      	b.n	80059ea <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800581c:	2b00      	cmp	r3, #0
 800581e:	d109      	bne.n	8005834 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005826:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e0da      	b.n	80059ea <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800583c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005840:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005844:	d10a      	bne.n	800585c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800584e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005852:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005856:	d101      	bne.n	800585c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005858:	2301      	movs	r3, #1
 800585a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005864:	0a1b      	lsrs	r3, r3, #8
 8005866:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	4413      	add	r3, r2
 800586e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005878:	69f9      	ldr	r1, [r7, #28]
 800587a:	fb01 f303 	mul.w	r3, r1, r3
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	627b      	str	r3, [r7, #36]	@ 0x24
 8005884:	e018      	b.n	80058b8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	429a      	cmp	r2, r3
 800588e:	d309      	bcc.n	80058a4 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005896:	f043 0220 	orr.w	r2, r3, #32
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e0a2      	b.n	80059ea <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ac:	68b9      	ldr	r1, [r7, #8]
 80058ae:	fb01 f303 	mul.w	r3, r1, r3
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80058b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d107      	bne.n	80058dc <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	0c9b      	lsrs	r3, r3, #18
 80058d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	e005      	b.n	80058e8 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80058e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80058f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	3304      	adds	r3, #4
 8005904:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	b29a      	uxth	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	0c1b      	lsrs	r3, r3, #16
 8005916:	f003 020f 	and.w	r2, r3, #15
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	0e1b      	lsrs	r3, r3, #24
 800593c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	0fda      	lsrs	r2, r3, #31
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	3304      	adds	r3, #4
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005958:	2300      	movs	r3, #0
 800595a:	623b      	str	r3, [r7, #32]
 800595c:	e00a      	b.n	8005974 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	441a      	add	r2, r3
 8005964:	6839      	ldr	r1, [r7, #0]
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	440b      	add	r3, r1
 800596a:	7812      	ldrb	r2, [r2, #0]
 800596c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	3301      	adds	r3, #1
 8005972:	623b      	str	r3, [r7, #32]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	4a1f      	ldr	r2, [pc, #124]	@ (80059f8 <HAL_FDCAN_GetRxMessage+0x2d4>)
 800597a:	5cd3      	ldrb	r3, [r2, r3]
 800597c:	461a      	mov	r2, r3
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	4293      	cmp	r3, r2
 8005982:	d3ec      	bcc.n	800595e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b40      	cmp	r3, #64	@ 0x40
 8005988:	d105      	bne.n	8005996 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69fa      	ldr	r2, [r7, #28]
 8005990:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005994:	e01e      	b.n	80059d4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b41      	cmp	r3, #65	@ 0x41
 800599a:	d105      	bne.n	80059a8 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69fa      	ldr	r2, [r7, #28]
 80059a2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80059a6:	e015      	b.n	80059d4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b1f      	cmp	r3, #31
 80059ac:	d808      	bhi.n	80059c0 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2101      	movs	r1, #1
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	fa01 f202 	lsl.w	r2, r1, r2
 80059ba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80059be:	e009      	b.n	80059d4 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f003 021f 	and.w	r2, r3, #31
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2101      	movs	r1, #1
 80059cc:	fa01 f202 	lsl.w	r2, r1, r2
 80059d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	e008      	b.n	80059ea <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059de:	f043 0208 	orr.w	r2, r3, #8
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
  }
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	372c      	adds	r7, #44	@ 0x2c
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	0800d090 	.word	0x0800d090

080059fc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005a0e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005a10:	7dfb      	ldrb	r3, [r7, #23]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d002      	beq.n	8005a1c <HAL_FDCAN_ActivateNotification+0x20>
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d155      	bne.n	8005ac8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	4013      	ands	r3, r2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d108      	bne.n	8005a3c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0201 	orr.w	r2, r2, #1
 8005a38:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a3a:	e014      	b.n	8005a66 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	4013      	ands	r3, r2
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d108      	bne.n	8005a5e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 0202 	orr.w	r2, r2, #2
 8005a5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a5c:	e003      	b.n	8005a66 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2203      	movs	r2, #3
 8005a64:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d009      	beq.n	8005a84 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d009      	beq.n	8005aa2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8005ae8 <HAL_FDCAN_ActivateNotification+0xec>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	6812      	ldr	r2, [r2, #0]
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8005aec <HAL_FDCAN_ActivateNotification+0xf0>)
 8005ab8:	695a      	ldr	r2, [r3, #20]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	0f9b      	lsrs	r3, r3, #30
 8005abe:	490b      	ldr	r1, [pc, #44]	@ (8005aec <HAL_FDCAN_ActivateNotification+0xf0>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e008      	b.n	8005ada <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ace:	f043 0202 	orr.w	r2, r3, #2
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
  }
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	371c      	adds	r7, #28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	3fcfffff 	.word	0x3fcfffff
 8005aec:	4000a800 	.word	0x4000a800

08005af0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b096      	sub	sp, #88	@ 0x58
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005af8:	4b9a      	ldr	r3, [pc, #616]	@ (8005d64 <HAL_FDCAN_IRQHandler+0x274>)
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	079b      	lsls	r3, r3, #30
 8005afe:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005b00:	4b98      	ldr	r3, [pc, #608]	@ (8005d64 <HAL_FDCAN_IRQHandler+0x274>)
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	079b      	lsls	r3, r3, #30
 8005b06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b08:	4013      	ands	r3, r2
 8005b0a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b12:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005b16:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b1e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005b20:	4013      	ands	r3, r2
 8005b22:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b2a:	f003 030f 	and.w	r3, r3, #15
 8005b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b38:	4013      	ands	r3, r2
 8005b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b50:	4013      	ands	r3, r2
 8005b52:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b5a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005b5e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b68:	4013      	ands	r3, r2
 8005b6a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b72:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005b76:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b80:	4013      	ands	r3, r2
 8005b82:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b92:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b96:	0a1b      	lsrs	r3, r3, #8
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d010      	beq.n	8005bc2 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba2:	0a1b      	lsrs	r3, r3, #8
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00a      	beq.n	8005bc2 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bb4:	651a      	str	r2, [r3, #80]	@ 0x50
 8005bb6:	4b6b      	ldr	r3, [pc, #428]	@ (8005d64 <HAL_FDCAN_IRQHandler+0x274>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fa54 	bl	800606a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bc4:	0a9b      	lsrs	r3, r3, #10
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d01d      	beq.n	8005c0a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd0:	0a9b      	lsrs	r3, r3, #10
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d017      	beq.n	8005c0a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005be2:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005bec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005bee:	4013      	ands	r3, r2
 8005bf0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005bfa:	651a      	str	r2, [r3, #80]	@ 0x50
 8005bfc:	4b59      	ldr	r3, [pc, #356]	@ (8005d64 <HAL_FDCAN_IRQHandler+0x274>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005c02:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fa07 	bl	8006018 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00d      	beq.n	8005c2c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c16:	4b54      	ldr	r3, [pc, #336]	@ (8005d68 <HAL_FDCAN_IRQHandler+0x278>)
 8005c18:	400b      	ands	r3, r1
 8005c1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c1c:	4a51      	ldr	r2, [pc, #324]	@ (8005d64 <HAL_FDCAN_IRQHandler+0x274>)
 8005c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c20:	0f9b      	lsrs	r3, r3, #30
 8005c22:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005c24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f9c0 	bl	8005fac <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005c2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00d      	beq.n	8005c4e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c38:	4b4b      	ldr	r3, [pc, #300]	@ (8005d68 <HAL_FDCAN_IRQHandler+0x278>)
 8005c3a:	400b      	ands	r3, r1
 8005c3c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c3e:	4a49      	ldr	r2, [pc, #292]	@ (8005d64 <HAL_FDCAN_IRQHandler+0x274>)
 8005c40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c42:	0f9b      	lsrs	r3, r3, #30
 8005c44:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005c46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f9ba 	bl	8005fc2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00d      	beq.n	8005c70 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005c5a:	4b43      	ldr	r3, [pc, #268]	@ (8005d68 <HAL_FDCAN_IRQHandler+0x278>)
 8005c5c:	400b      	ands	r3, r1
 8005c5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c60:	4a40      	ldr	r2, [pc, #256]	@ (8005d64 <HAL_FDCAN_IRQHandler+0x274>)
 8005c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c64:	0f9b      	lsrs	r3, r3, #30
 8005c66:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005c68:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7fc f938 	bl	8001ee0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005c70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00d      	beq.n	8005c92 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8005d68 <HAL_FDCAN_IRQHandler+0x278>)
 8005c7e:	400b      	ands	r3, r1
 8005c80:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c82:	4a38      	ldr	r2, [pc, #224]	@ (8005d64 <HAL_FDCAN_IRQHandler+0x274>)
 8005c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c86:	0f9b      	lsrs	r3, r3, #30
 8005c88:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005c8a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f9a3 	bl	8005fd8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c94:	0adb      	lsrs	r3, r3, #11
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d010      	beq.n	8005cc0 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca0:	0adb      	lsrs	r3, r3, #11
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cb2:	651a      	str	r2, [r3, #80]	@ 0x50
 8005cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8005d64 <HAL_FDCAN_IRQHandler+0x274>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f997 	bl	8005fee <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cc2:	0a5b      	lsrs	r3, r3, #9
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01d      	beq.n	8005d08 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cce:	0a5b      	lsrs	r3, r3, #9
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d017      	beq.n	8005d08 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ce0:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cec:	4013      	ands	r3, r2
 8005cee:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cf8:	651a      	str	r2, [r3, #80]	@ 0x50
 8005cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8005d64 <HAL_FDCAN_IRQHandler+0x274>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005d00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f97d 	bl	8006002 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d0a:	0cdb      	lsrs	r3, r3, #19
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d010      	beq.n	8005d36 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d16:	0cdb      	lsrs	r3, r3, #19
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00a      	beq.n	8005d36 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005d28:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8005d64 <HAL_FDCAN_IRQHandler+0x274>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f97c 	bl	800602e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d38:	0c1b      	lsrs	r3, r3, #16
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d016      	beq.n	8005d70 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d44:	0c1b      	lsrs	r3, r3, #16
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d010      	beq.n	8005d70 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005d56:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d58:	4b02      	ldr	r3, [pc, #8]	@ (8005d64 <HAL_FDCAN_IRQHandler+0x274>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	e004      	b.n	8005d6c <HAL_FDCAN_IRQHandler+0x27c>
 8005d62:	bf00      	nop
 8005d64:	4000a800 	.word	0x4000a800
 8005d68:	3fcfffff 	.word	0x3fcfffff
 8005d6c:	f000 f969 	bl	8006042 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d72:	0c9b      	lsrs	r3, r3, #18
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d010      	beq.n	8005d9e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7e:	0c9b      	lsrs	r3, r3, #18
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005d90:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d92:	4b83      	ldr	r3, [pc, #524]	@ (8005fa0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f95c 	bl	8006056 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005da0:	0c5b      	lsrs	r3, r3, #17
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d015      	beq.n	8005dd6 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dac:	0c5b      	lsrs	r3, r3, #17
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00f      	beq.n	8005dd6 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005dbe:	651a      	str	r2, [r3, #80]	@ 0x50
 8005dc0:	4b77      	ldr	r3, [pc, #476]	@ (8005fa0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005dcc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00d      	beq.n	8005df8 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005de2:	4b70      	ldr	r3, [pc, #448]	@ (8005fa4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005de4:	400b      	ands	r3, r1
 8005de6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005de8:	4a6d      	ldr	r2, [pc, #436]	@ (8005fa0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005dea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dec:	0f9b      	lsrs	r3, r3, #30
 8005dee:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005df0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f94d 	bl	8006092 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d011      	beq.n	8005e22 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e04:	4b67      	ldr	r3, [pc, #412]	@ (8005fa4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005e06:	400b      	ands	r3, r1
 8005e08:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e0a:	4a65      	ldr	r2, [pc, #404]	@ (8005fa0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e0e:	0f9b      	lsrs	r3, r3, #30
 8005e10:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a60      	ldr	r2, [pc, #384]	@ (8005fa8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	f040 80ac 	bne.w	8005f86 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f003 0303 	and.w	r3, r3, #3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 80a4 	beq.w	8005f86 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	f003 030f 	and.w	r3, r3, #15
 8005e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e52:	4013      	ands	r3, r2
 8005e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e60:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005e78:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e82:	4013      	ands	r3, r2
 8005e84:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005e90:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e98:	6a3a      	ldr	r2, [r7, #32]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005ea8:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebc:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d007      	beq.n	8005edc <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ed2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005ed4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f8e6 	bl	80060a8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d007      	beq.n	8005ef2 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ee8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005eea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f8e6 	bl	80060be <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	099b      	lsrs	r3, r3, #6
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01a      	beq.n	8005f34 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	099b      	lsrs	r3, r3, #6
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d014      	beq.n	8005f34 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f10:	0c1b      	lsrs	r3, r3, #16
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f20:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2240      	movs	r2, #64	@ 0x40
 8005f28:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	6939      	ldr	r1, [r7, #16]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f8d0 	bl	80060d4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d007      	beq.n	8005f4a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f40:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005f42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f8d1 	bl	80060ec <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00b      	beq.n	8005f68 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	6a3a      	ldr	r2, [r7, #32]
 8005f56:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	431a      	orrs	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00b      	beq.n	8005f86 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d002      	beq.n	8005f96 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f874 	bl	800607e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005f96:	bf00      	nop
 8005f98:	3758      	adds	r7, #88	@ 0x58
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	4000a800 	.word	0x4000a800
 8005fa4:	3fcfffff 	.word	0x3fcfffff
 8005fa8:	4000a000 	.word	0x4000a000

08005fac <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005fe2:	bf00      	nop
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80060b2:	bf00      	nop
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
	...

08006104 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006110:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800611a:	4ba7      	ldr	r3, [pc, #668]	@ (80063b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800611c:	4013      	ands	r3, r2
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	0091      	lsls	r1, r2, #2
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	6812      	ldr	r2, [r2, #0]
 8006126:	430b      	orrs	r3, r1
 8006128:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006134:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800613c:	041a      	lsls	r2, r3, #16
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	4413      	add	r3, r2
 8006150:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800615a:	4b97      	ldr	r3, [pc, #604]	@ (80063b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800615c:	4013      	ands	r3, r2
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	0091      	lsls	r1, r2, #2
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6812      	ldr	r2, [r2, #0]
 8006166:	430b      	orrs	r3, r1
 8006168:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006174:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800617c:	041a      	lsls	r2, r3, #16
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	4413      	add	r3, r2
 8006192:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800619c:	4b86      	ldr	r3, [pc, #536]	@ (80063b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800619e:	4013      	ands	r3, r2
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	0091      	lsls	r1, r2, #2
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6812      	ldr	r2, [r2, #0]
 80061a8:	430b      	orrs	r3, r1
 80061aa:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80061b6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061be:	041a      	lsls	r2, r3, #16
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80061d2:	fb02 f303 	mul.w	r3, r2, r3
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	4413      	add	r3, r2
 80061da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80061e4:	4b74      	ldr	r3, [pc, #464]	@ (80063b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061e6:	4013      	ands	r3, r2
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	0091      	lsls	r1, r2, #2
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6812      	ldr	r2, [r2, #0]
 80061f0:	430b      	orrs	r3, r1
 80061f2:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80061fe:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006206:	041a      	lsls	r2, r3, #16
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800621a:	fb02 f303 	mul.w	r3, r2, r3
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	4413      	add	r3, r2
 8006222:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800622c:	4b62      	ldr	r3, [pc, #392]	@ (80063b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800622e:	4013      	ands	r3, r2
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	0091      	lsls	r1, r2, #2
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6812      	ldr	r2, [r2, #0]
 8006238:	430b      	orrs	r3, r1
 800623a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006246:	fb02 f303 	mul.w	r3, r2, r3
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	4413      	add	r3, r2
 800624e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006258:	4b57      	ldr	r3, [pc, #348]	@ (80063b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800625a:	4013      	ands	r3, r2
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	0091      	lsls	r1, r2, #2
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6812      	ldr	r2, [r2, #0]
 8006264:	430b      	orrs	r3, r1
 8006266:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006272:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800627a:	041a      	lsls	r2, r3, #16
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	4413      	add	r3, r2
 8006290:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800629a:	4b47      	ldr	r3, [pc, #284]	@ (80063b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800629c:	4013      	ands	r3, r2
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	0091      	lsls	r1, r2, #2
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6812      	ldr	r2, [r2, #0]
 80062a6:	430b      	orrs	r3, r1
 80062a8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80062b4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062bc:	041a      	lsls	r2, r3, #16
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80062d0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062d8:	061a      	lsls	r2, r3, #24
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062e8:	4b34      	ldr	r3, [pc, #208]	@ (80063bc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80062ea:	4413      	add	r3, r2
 80062ec:	009a      	lsls	r2, r3, #2
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	441a      	add	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800630a:	00db      	lsls	r3, r3, #3
 800630c:	441a      	add	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800631e:	fb01 f303 	mul.w	r3, r1, r3
 8006322:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006324:	441a      	add	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8006336:	fb01 f303 	mul.w	r3, r1, r3
 800633a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800633c:	441a      	add	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800634e:	fb01 f303 	mul.w	r3, r1, r3
 8006352:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006354:	441a      	add	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	441a      	add	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800637e:	fb01 f303 	mul.w	r3, r1, r3
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	441a      	add	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800639a:	fb01 f303 	mul.w	r3, r1, r3
 800639e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80063a0:	441a      	add	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ae:	4a04      	ldr	r2, [pc, #16]	@ (80063c0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d915      	bls.n	80063e0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80063b4:	e006      	b.n	80063c4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80063b6:	bf00      	nop
 80063b8:	ffff0003 	.word	0xffff0003
 80063bc:	10002b00 	.word	0x10002b00
 80063c0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063ca:	f043 0220 	orr.w	r2, r3, #32
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2203      	movs	r2, #3
 80063d8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e010      	b.n	8006402 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063e4:	60fb      	str	r3, [r7, #12]
 80063e6:	e005      	b.n	80063f4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3304      	adds	r3, #4
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d3f3      	bcc.n	80063e8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop

08006410 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006410:	b480      	push	{r7}
 8006412:	b089      	sub	sp, #36	@ 0x24
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10a      	bne.n	800643c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800642e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006436:	4313      	orrs	r3, r2
 8006438:	61fb      	str	r3, [r7, #28]
 800643a:	e00a      	b.n	8006452 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006444:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800644a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800644c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006450:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800645c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006462:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006468:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006470:	4313      	orrs	r3, r2
 8006472:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	fb01 f303 	mul.w	r3, r1, r3
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	69fa      	ldr	r2, [r7, #28]
 800648e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	3304      	adds	r3, #4
 8006494:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	3304      	adds	r3, #4
 80064a0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80064a2:	2300      	movs	r3, #0
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	e020      	b.n	80064ea <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	3303      	adds	r3, #3
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	4413      	add	r3, r2
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	3302      	adds	r3, #2
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	440b      	add	r3, r1
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80064c0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	3301      	adds	r3, #1
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	440b      	add	r3, r1
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80064ce:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	440a      	add	r2, r1
 80064d6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80064d8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	3304      	adds	r3, #4
 80064e2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	3304      	adds	r3, #4
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	4a06      	ldr	r2, [pc, #24]	@ (8006508 <FDCAN_CopyMessageToRAM+0xf8>)
 80064f0:	5cd3      	ldrb	r3, [r2, r3]
 80064f2:	461a      	mov	r2, r3
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d3d6      	bcc.n	80064a8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80064fa:	bf00      	nop
 80064fc:	bf00      	nop
 80064fe:	3724      	adds	r7, #36	@ 0x24
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	0800d090 	.word	0x0800d090

0800650c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800650c:	b480      	push	{r7}
 800650e:	b089      	sub	sp, #36	@ 0x24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006516:	2300      	movs	r3, #0
 8006518:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800651a:	4b86      	ldr	r3, [pc, #536]	@ (8006734 <HAL_GPIO_Init+0x228>)
 800651c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800651e:	e18c      	b.n	800683a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	2101      	movs	r1, #1
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	fa01 f303 	lsl.w	r3, r1, r3
 800652c:	4013      	ands	r3, r2
 800652e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 817e 	beq.w	8006834 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f003 0303 	and.w	r3, r3, #3
 8006540:	2b01      	cmp	r3, #1
 8006542:	d005      	beq.n	8006550 <HAL_GPIO_Init+0x44>
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f003 0303 	and.w	r3, r3, #3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d130      	bne.n	80065b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	2203      	movs	r2, #3
 800655c:	fa02 f303 	lsl.w	r3, r2, r3
 8006560:	43db      	mvns	r3, r3
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	4013      	ands	r3, r2
 8006566:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	4313      	orrs	r3, r2
 8006578:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006586:	2201      	movs	r2, #1
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	fa02 f303 	lsl.w	r3, r2, r3
 800658e:	43db      	mvns	r3, r3
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	4013      	ands	r3, r2
 8006594:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	091b      	lsrs	r3, r3, #4
 800659c:	f003 0201 	and.w	r2, r3, #1
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	fa02 f303 	lsl.w	r3, r2, r3
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f003 0303 	and.w	r3, r3, #3
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d017      	beq.n	80065ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	2203      	movs	r2, #3
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	43db      	mvns	r3, r3
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	4013      	ands	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d123      	bne.n	8006642 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	08da      	lsrs	r2, r3, #3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3208      	adds	r2, #8
 8006602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006606:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f003 0307 	and.w	r3, r3, #7
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	220f      	movs	r2, #15
 8006612:	fa02 f303 	lsl.w	r3, r2, r3
 8006616:	43db      	mvns	r3, r3
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	4013      	ands	r3, r2
 800661c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	691a      	ldr	r2, [r3, #16]
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	4313      	orrs	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	08da      	lsrs	r2, r3, #3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3208      	adds	r2, #8
 800663c:	69b9      	ldr	r1, [r7, #24]
 800663e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	2203      	movs	r2, #3
 800664e:	fa02 f303 	lsl.w	r3, r2, r3
 8006652:	43db      	mvns	r3, r3
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	4013      	ands	r3, r2
 8006658:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f003 0203 	and.w	r2, r3, #3
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	4313      	orrs	r3, r2
 800666e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 80d8 	beq.w	8006834 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006684:	4b2c      	ldr	r3, [pc, #176]	@ (8006738 <HAL_GPIO_Init+0x22c>)
 8006686:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800668a:	4a2b      	ldr	r2, [pc, #172]	@ (8006738 <HAL_GPIO_Init+0x22c>)
 800668c:	f043 0302 	orr.w	r3, r3, #2
 8006690:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006694:	4b28      	ldr	r3, [pc, #160]	@ (8006738 <HAL_GPIO_Init+0x22c>)
 8006696:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066a2:	4a26      	ldr	r2, [pc, #152]	@ (800673c <HAL_GPIO_Init+0x230>)
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	089b      	lsrs	r3, r3, #2
 80066a8:	3302      	adds	r3, #2
 80066aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	220f      	movs	r2, #15
 80066ba:	fa02 f303 	lsl.w	r3, r2, r3
 80066be:	43db      	mvns	r3, r3
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	4013      	ands	r3, r2
 80066c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006740 <HAL_GPIO_Init+0x234>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d04a      	beq.n	8006764 <HAL_GPIO_Init+0x258>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006744 <HAL_GPIO_Init+0x238>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d02b      	beq.n	800672e <HAL_GPIO_Init+0x222>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006748 <HAL_GPIO_Init+0x23c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d025      	beq.n	800672a <HAL_GPIO_Init+0x21e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a1a      	ldr	r2, [pc, #104]	@ (800674c <HAL_GPIO_Init+0x240>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d01f      	beq.n	8006726 <HAL_GPIO_Init+0x21a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a19      	ldr	r2, [pc, #100]	@ (8006750 <HAL_GPIO_Init+0x244>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d019      	beq.n	8006722 <HAL_GPIO_Init+0x216>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a18      	ldr	r2, [pc, #96]	@ (8006754 <HAL_GPIO_Init+0x248>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d013      	beq.n	800671e <HAL_GPIO_Init+0x212>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a17      	ldr	r2, [pc, #92]	@ (8006758 <HAL_GPIO_Init+0x24c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d00d      	beq.n	800671a <HAL_GPIO_Init+0x20e>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a16      	ldr	r2, [pc, #88]	@ (800675c <HAL_GPIO_Init+0x250>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d007      	beq.n	8006716 <HAL_GPIO_Init+0x20a>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a15      	ldr	r2, [pc, #84]	@ (8006760 <HAL_GPIO_Init+0x254>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d101      	bne.n	8006712 <HAL_GPIO_Init+0x206>
 800670e:	2309      	movs	r3, #9
 8006710:	e029      	b.n	8006766 <HAL_GPIO_Init+0x25a>
 8006712:	230a      	movs	r3, #10
 8006714:	e027      	b.n	8006766 <HAL_GPIO_Init+0x25a>
 8006716:	2307      	movs	r3, #7
 8006718:	e025      	b.n	8006766 <HAL_GPIO_Init+0x25a>
 800671a:	2306      	movs	r3, #6
 800671c:	e023      	b.n	8006766 <HAL_GPIO_Init+0x25a>
 800671e:	2305      	movs	r3, #5
 8006720:	e021      	b.n	8006766 <HAL_GPIO_Init+0x25a>
 8006722:	2304      	movs	r3, #4
 8006724:	e01f      	b.n	8006766 <HAL_GPIO_Init+0x25a>
 8006726:	2303      	movs	r3, #3
 8006728:	e01d      	b.n	8006766 <HAL_GPIO_Init+0x25a>
 800672a:	2302      	movs	r3, #2
 800672c:	e01b      	b.n	8006766 <HAL_GPIO_Init+0x25a>
 800672e:	2301      	movs	r3, #1
 8006730:	e019      	b.n	8006766 <HAL_GPIO_Init+0x25a>
 8006732:	bf00      	nop
 8006734:	58000080 	.word	0x58000080
 8006738:	58024400 	.word	0x58024400
 800673c:	58000400 	.word	0x58000400
 8006740:	58020000 	.word	0x58020000
 8006744:	58020400 	.word	0x58020400
 8006748:	58020800 	.word	0x58020800
 800674c:	58020c00 	.word	0x58020c00
 8006750:	58021000 	.word	0x58021000
 8006754:	58021400 	.word	0x58021400
 8006758:	58021800 	.word	0x58021800
 800675c:	58021c00 	.word	0x58021c00
 8006760:	58022400 	.word	0x58022400
 8006764:	2300      	movs	r3, #0
 8006766:	69fa      	ldr	r2, [r7, #28]
 8006768:	f002 0203 	and.w	r2, r2, #3
 800676c:	0092      	lsls	r2, r2, #2
 800676e:	4093      	lsls	r3, r2
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	4313      	orrs	r3, r2
 8006774:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006776:	4938      	ldr	r1, [pc, #224]	@ (8006858 <HAL_GPIO_Init+0x34c>)
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	089b      	lsrs	r3, r3, #2
 800677c:	3302      	adds	r3, #2
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	43db      	mvns	r3, r3
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	4013      	ands	r3, r2
 8006794:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80067aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80067b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	43db      	mvns	r3, r3
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	4013      	ands	r3, r2
 80067c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80067d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	43db      	mvns	r3, r3
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	4013      	ands	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	4313      	orrs	r3, r2
 8006802:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	69ba      	ldr	r2, [r7, #24]
 8006808:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	43db      	mvns	r3, r3
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	4013      	ands	r3, r2
 8006818:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	3301      	adds	r3, #1
 8006838:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	fa22 f303 	lsr.w	r3, r2, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	f47f ae6b 	bne.w	8006520 <HAL_GPIO_Init+0x14>
  }
}
 800684a:	bf00      	nop
 800684c:	bf00      	nop
 800684e:	3724      	adds	r7, #36	@ 0x24
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	58000400 	.word	0x58000400

0800685c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	887b      	ldrh	r3, [r7, #2]
 800686e:	4013      	ands	r3, r2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006874:	2301      	movs	r3, #1
 8006876:	73fb      	strb	r3, [r7, #15]
 8006878:	e001      	b.n	800687e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800687a:	2300      	movs	r3, #0
 800687c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800687e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	807b      	strh	r3, [r7, #2]
 8006898:	4613      	mov	r3, r2
 800689a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800689c:	787b      	ldrb	r3, [r7, #1]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80068a2:	887a      	ldrh	r2, [r7, #2]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80068a8:	e003      	b.n	80068b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80068aa:	887b      	ldrh	r3, [r7, #2]
 80068ac:	041a      	lsls	r2, r3, #16
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	619a      	str	r2, [r3, #24]
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
	...

080068c0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80068c8:	4b19      	ldr	r3, [pc, #100]	@ (8006930 <HAL_PWREx_ConfigSupply+0x70>)
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b04      	cmp	r3, #4
 80068d2:	d00a      	beq.n	80068ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80068d4:	4b16      	ldr	r3, [pc, #88]	@ (8006930 <HAL_PWREx_ConfigSupply+0x70>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d001      	beq.n	80068e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e01f      	b.n	8006926 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	e01d      	b.n	8006926 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80068ea:	4b11      	ldr	r3, [pc, #68]	@ (8006930 <HAL_PWREx_ConfigSupply+0x70>)
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f023 0207 	bic.w	r2, r3, #7
 80068f2:	490f      	ldr	r1, [pc, #60]	@ (8006930 <HAL_PWREx_ConfigSupply+0x70>)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80068fa:	f7fc fb7f 	bl	8002ffc <HAL_GetTick>
 80068fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006900:	e009      	b.n	8006916 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006902:	f7fc fb7b 	bl	8002ffc <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006910:	d901      	bls.n	8006916 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e007      	b.n	8006926 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006916:	4b06      	ldr	r3, [pc, #24]	@ (8006930 <HAL_PWREx_ConfigSupply+0x70>)
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800691e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006922:	d1ee      	bne.n	8006902 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	58024800 	.word	0x58024800

08006934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b08c      	sub	sp, #48	@ 0x30
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e3c8      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 8087 	beq.w	8006a62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006954:	4b88      	ldr	r3, [pc, #544]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800695c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800695e:	4b86      	ldr	r3, [pc, #536]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006962:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006966:	2b10      	cmp	r3, #16
 8006968:	d007      	beq.n	800697a <HAL_RCC_OscConfig+0x46>
 800696a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696c:	2b18      	cmp	r3, #24
 800696e:	d110      	bne.n	8006992 <HAL_RCC_OscConfig+0x5e>
 8006970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d10b      	bne.n	8006992 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800697a:	4b7f      	ldr	r3, [pc, #508]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d06c      	beq.n	8006a60 <HAL_RCC_OscConfig+0x12c>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d168      	bne.n	8006a60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e3a2      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800699a:	d106      	bne.n	80069aa <HAL_RCC_OscConfig+0x76>
 800699c:	4b76      	ldr	r3, [pc, #472]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a75      	ldr	r2, [pc, #468]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 80069a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	e02e      	b.n	8006a08 <HAL_RCC_OscConfig+0xd4>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10c      	bne.n	80069cc <HAL_RCC_OscConfig+0x98>
 80069b2:	4b71      	ldr	r3, [pc, #452]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a70      	ldr	r2, [pc, #448]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 80069b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	4b6e      	ldr	r3, [pc, #440]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a6d      	ldr	r2, [pc, #436]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 80069c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	e01d      	b.n	8006a08 <HAL_RCC_OscConfig+0xd4>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069d4:	d10c      	bne.n	80069f0 <HAL_RCC_OscConfig+0xbc>
 80069d6:	4b68      	ldr	r3, [pc, #416]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a67      	ldr	r2, [pc, #412]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 80069dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	4b65      	ldr	r3, [pc, #404]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a64      	ldr	r2, [pc, #400]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 80069e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	e00b      	b.n	8006a08 <HAL_RCC_OscConfig+0xd4>
 80069f0:	4b61      	ldr	r3, [pc, #388]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a60      	ldr	r2, [pc, #384]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 80069f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	4b5e      	ldr	r3, [pc, #376]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a5d      	ldr	r2, [pc, #372]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006a02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d013      	beq.n	8006a38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a10:	f7fc faf4 	bl	8002ffc <HAL_GetTick>
 8006a14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a18:	f7fc faf0 	bl	8002ffc <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b64      	cmp	r3, #100	@ 0x64
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e356      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a2a:	4b53      	ldr	r3, [pc, #332]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0f0      	beq.n	8006a18 <HAL_RCC_OscConfig+0xe4>
 8006a36:	e014      	b.n	8006a62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a38:	f7fc fae0 	bl	8002ffc <HAL_GetTick>
 8006a3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a40:	f7fc fadc 	bl	8002ffc <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b64      	cmp	r3, #100	@ 0x64
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e342      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a52:	4b49      	ldr	r3, [pc, #292]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f0      	bne.n	8006a40 <HAL_RCC_OscConfig+0x10c>
 8006a5e:	e000      	b.n	8006a62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f000 808c 	beq.w	8006b88 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a70:	4b41      	ldr	r3, [pc, #260]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a78:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d007      	beq.n	8006a96 <HAL_RCC_OscConfig+0x162>
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	2b18      	cmp	r3, #24
 8006a8a:	d137      	bne.n	8006afc <HAL_RCC_OscConfig+0x1c8>
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	f003 0303 	and.w	r3, r3, #3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d132      	bne.n	8006afc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a96:	4b38      	ldr	r3, [pc, #224]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d005      	beq.n	8006aae <HAL_RCC_OscConfig+0x17a>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e314      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006aae:	4b32      	ldr	r3, [pc, #200]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f023 0219 	bic.w	r2, r3, #25
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	492f      	ldr	r1, [pc, #188]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac0:	f7fc fa9c 	bl	8002ffc <HAL_GetTick>
 8006ac4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ac6:	e008      	b.n	8006ada <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ac8:	f7fc fa98 	bl	8002ffc <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e2fe      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ada:	4b27      	ldr	r3, [pc, #156]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0304 	and.w	r3, r3, #4
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0f0      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae6:	4b24      	ldr	r3, [pc, #144]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	061b      	lsls	r3, r3, #24
 8006af4:	4920      	ldr	r1, [pc, #128]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006afa:	e045      	b.n	8006b88 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d026      	beq.n	8006b52 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b04:	4b1c      	ldr	r3, [pc, #112]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f023 0219 	bic.w	r2, r3, #25
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	4919      	ldr	r1, [pc, #100]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b16:	f7fc fa71 	bl	8002ffc <HAL_GetTick>
 8006b1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b1c:	e008      	b.n	8006b30 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b1e:	f7fc fa6d 	bl	8002ffc <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d901      	bls.n	8006b30 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e2d3      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b30:	4b11      	ldr	r3, [pc, #68]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d0f0      	beq.n	8006b1e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	061b      	lsls	r3, r3, #24
 8006b4a:	490b      	ldr	r1, [pc, #44]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	604b      	str	r3, [r1, #4]
 8006b50:	e01a      	b.n	8006b88 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b52:	4b09      	ldr	r3, [pc, #36]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a08      	ldr	r2, [pc, #32]	@ (8006b78 <HAL_RCC_OscConfig+0x244>)
 8006b58:	f023 0301 	bic.w	r3, r3, #1
 8006b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5e:	f7fc fa4d 	bl	8002ffc <HAL_GetTick>
 8006b62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b64:	e00a      	b.n	8006b7c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b66:	f7fc fa49 	bl	8002ffc <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d903      	bls.n	8006b7c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e2af      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
 8006b78:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b7c:	4b96      	ldr	r3, [pc, #600]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1ee      	bne.n	8006b66 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0310 	and.w	r3, r3, #16
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d06a      	beq.n	8006c6a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b94:	4b90      	ldr	r3, [pc, #576]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b9c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b9e:	4b8e      	ldr	r3, [pc, #568]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d007      	beq.n	8006bba <HAL_RCC_OscConfig+0x286>
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	2b18      	cmp	r3, #24
 8006bae:	d11b      	bne.n	8006be8 <HAL_RCC_OscConfig+0x2b4>
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f003 0303 	and.w	r3, r3, #3
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d116      	bne.n	8006be8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bba:	4b87      	ldr	r3, [pc, #540]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d005      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x29e>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	2b80      	cmp	r3, #128	@ 0x80
 8006bcc:	d001      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e282      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bd2:	4b81      	ldr	r3, [pc, #516]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	061b      	lsls	r3, r3, #24
 8006be0:	497d      	ldr	r1, [pc, #500]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006be6:	e040      	b.n	8006c6a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d023      	beq.n	8006c38 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006bf0:	4b79      	ldr	r3, [pc, #484]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a78      	ldr	r2, [pc, #480]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bfc:	f7fc f9fe 	bl	8002ffc <HAL_GetTick>
 8006c00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c02:	e008      	b.n	8006c16 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c04:	f7fc f9fa 	bl	8002ffc <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e260      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c16:	4b70      	ldr	r3, [pc, #448]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0f0      	beq.n	8006c04 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c22:	4b6d      	ldr	r3, [pc, #436]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	061b      	lsls	r3, r3, #24
 8006c30:	4969      	ldr	r1, [pc, #420]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60cb      	str	r3, [r1, #12]
 8006c36:	e018      	b.n	8006c6a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006c38:	4b67      	ldr	r3, [pc, #412]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a66      	ldr	r2, [pc, #408]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006c3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c44:	f7fc f9da 	bl	8002ffc <HAL_GetTick>
 8006c48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c4c:	f7fc f9d6 	bl	8002ffc <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e23c      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c5e:	4b5e      	ldr	r3, [pc, #376]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1f0      	bne.n	8006c4c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0308 	and.w	r3, r3, #8
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d036      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d019      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c7e:	4b56      	ldr	r3, [pc, #344]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c82:	4a55      	ldr	r2, [pc, #340]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006c84:	f043 0301 	orr.w	r3, r3, #1
 8006c88:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c8a:	f7fc f9b7 	bl	8002ffc <HAL_GetTick>
 8006c8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c90:	e008      	b.n	8006ca4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c92:	f7fc f9b3 	bl	8002ffc <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e219      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ca4:	4b4c      	ldr	r3, [pc, #304]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006ca6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0f0      	beq.n	8006c92 <HAL_RCC_OscConfig+0x35e>
 8006cb0:	e018      	b.n	8006ce4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cb2:	4b49      	ldr	r3, [pc, #292]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cb6:	4a48      	ldr	r2, [pc, #288]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006cb8:	f023 0301 	bic.w	r3, r3, #1
 8006cbc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cbe:	f7fc f99d 	bl	8002ffc <HAL_GetTick>
 8006cc2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cc4:	e008      	b.n	8006cd8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cc6:	f7fc f999 	bl	8002ffc <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d901      	bls.n	8006cd8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e1ff      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cd8:	4b3f      	ldr	r3, [pc, #252]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1f0      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0320 	and.w	r3, r3, #32
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d036      	beq.n	8006d5e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d019      	beq.n	8006d2c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006cf8:	4b37      	ldr	r3, [pc, #220]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a36      	ldr	r2, [pc, #216]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006cfe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006d02:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d04:	f7fc f97a 	bl	8002ffc <HAL_GetTick>
 8006d08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d0a:	e008      	b.n	8006d1e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d0c:	f7fc f976 	bl	8002ffc <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e1dc      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d0f0      	beq.n	8006d0c <HAL_RCC_OscConfig+0x3d8>
 8006d2a:	e018      	b.n	8006d5e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a29      	ldr	r2, [pc, #164]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006d32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d38:	f7fc f960 	bl	8002ffc <HAL_GetTick>
 8006d3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d3e:	e008      	b.n	8006d52 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d40:	f7fc f95c 	bl	8002ffc <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d901      	bls.n	8006d52 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e1c2      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d52:	4b21      	ldr	r3, [pc, #132]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1f0      	bne.n	8006d40 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0304 	and.w	r3, r3, #4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 8086 	beq.w	8006e78 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8006ddc <HAL_RCC_OscConfig+0x4a8>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a1a      	ldr	r2, [pc, #104]	@ (8006ddc <HAL_RCC_OscConfig+0x4a8>)
 8006d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d78:	f7fc f940 	bl	8002ffc <HAL_GetTick>
 8006d7c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d7e:	e008      	b.n	8006d92 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d80:	f7fc f93c 	bl	8002ffc <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b64      	cmp	r3, #100	@ 0x64
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e1a2      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d92:	4b12      	ldr	r3, [pc, #72]	@ (8006ddc <HAL_RCC_OscConfig+0x4a8>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d0f0      	beq.n	8006d80 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d106      	bne.n	8006db4 <HAL_RCC_OscConfig+0x480>
 8006da6:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006daa:	4a0b      	ldr	r2, [pc, #44]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006dac:	f043 0301 	orr.w	r3, r3, #1
 8006db0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006db2:	e032      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e6>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d111      	bne.n	8006de0 <HAL_RCC_OscConfig+0x4ac>
 8006dbc:	4b06      	ldr	r3, [pc, #24]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc0:	4a05      	ldr	r2, [pc, #20]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006dc2:	f023 0301 	bic.w	r3, r3, #1
 8006dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dc8:	4b03      	ldr	r3, [pc, #12]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dcc:	4a02      	ldr	r2, [pc, #8]	@ (8006dd8 <HAL_RCC_OscConfig+0x4a4>)
 8006dce:	f023 0304 	bic.w	r3, r3, #4
 8006dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dd4:	e021      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e6>
 8006dd6:	bf00      	nop
 8006dd8:	58024400 	.word	0x58024400
 8006ddc:	58024800 	.word	0x58024800
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	2b05      	cmp	r3, #5
 8006de6:	d10c      	bne.n	8006e02 <HAL_RCC_OscConfig+0x4ce>
 8006de8:	4b83      	ldr	r3, [pc, #524]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dec:	4a82      	ldr	r2, [pc, #520]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006dee:	f043 0304 	orr.w	r3, r3, #4
 8006df2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006df4:	4b80      	ldr	r3, [pc, #512]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006df8:	4a7f      	ldr	r2, [pc, #508]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006dfa:	f043 0301 	orr.w	r3, r3, #1
 8006dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e00:	e00b      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e6>
 8006e02:	4b7d      	ldr	r3, [pc, #500]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e06:	4a7c      	ldr	r2, [pc, #496]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006e08:	f023 0301 	bic.w	r3, r3, #1
 8006e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e0e:	4b7a      	ldr	r3, [pc, #488]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e12:	4a79      	ldr	r2, [pc, #484]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006e14:	f023 0304 	bic.w	r3, r3, #4
 8006e18:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d015      	beq.n	8006e4e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e22:	f7fc f8eb 	bl	8002ffc <HAL_GetTick>
 8006e26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e28:	e00a      	b.n	8006e40 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e2a:	f7fc f8e7 	bl	8002ffc <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d901      	bls.n	8006e40 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e14b      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e40:	4b6d      	ldr	r3, [pc, #436]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d0ee      	beq.n	8006e2a <HAL_RCC_OscConfig+0x4f6>
 8006e4c:	e014      	b.n	8006e78 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e4e:	f7fc f8d5 	bl	8002ffc <HAL_GetTick>
 8006e52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e54:	e00a      	b.n	8006e6c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e56:	f7fc f8d1 	bl	8002ffc <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d901      	bls.n	8006e6c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e135      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e6c:	4b62      	ldr	r3, [pc, #392]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1ee      	bne.n	8006e56 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 812a 	beq.w	80070d6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006e82:	4b5d      	ldr	r3, [pc, #372]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e8a:	2b18      	cmp	r3, #24
 8006e8c:	f000 80ba 	beq.w	8007004 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	f040 8095 	bne.w	8006fc4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e9a:	4b57      	ldr	r3, [pc, #348]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a56      	ldr	r2, [pc, #344]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006ea0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea6:	f7fc f8a9 	bl	8002ffc <HAL_GetTick>
 8006eaa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006eac:	e008      	b.n	8006ec0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eae:	f7fc f8a5 	bl	8002ffc <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d901      	bls.n	8006ec0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e10b      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ec0:	4b4d      	ldr	r3, [pc, #308]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1f0      	bne.n	8006eae <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ecc:	4b4a      	ldr	r3, [pc, #296]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006ece:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8006ffc <HAL_RCC_OscConfig+0x6c8>)
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006edc:	0112      	lsls	r2, r2, #4
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	4945      	ldr	r1, [pc, #276]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eea:	3b01      	subs	r3, #1
 8006eec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	025b      	lsls	r3, r3, #9
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f00:	3b01      	subs	r3, #1
 8006f02:	041b      	lsls	r3, r3, #16
 8006f04:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	061b      	lsls	r3, r3, #24
 8006f12:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f16:	4938      	ldr	r1, [pc, #224]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006f1c:	4b36      	ldr	r3, [pc, #216]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f20:	4a35      	ldr	r2, [pc, #212]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f22:	f023 0301 	bic.w	r3, r3, #1
 8006f26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f28:	4b33      	ldr	r3, [pc, #204]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f2c:	4b34      	ldr	r3, [pc, #208]	@ (8007000 <HAL_RCC_OscConfig+0x6cc>)
 8006f2e:	4013      	ands	r3, r2
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006f34:	00d2      	lsls	r2, r2, #3
 8006f36:	4930      	ldr	r1, [pc, #192]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f40:	f023 020c 	bic.w	r2, r3, #12
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f48:	492b      	ldr	r1, [pc, #172]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f52:	f023 0202 	bic.w	r2, r3, #2
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f5a:	4927      	ldr	r1, [pc, #156]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f60:	4b25      	ldr	r3, [pc, #148]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f64:	4a24      	ldr	r2, [pc, #144]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6c:	4b22      	ldr	r3, [pc, #136]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f70:	4a21      	ldr	r2, [pc, #132]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f78:	4b1f      	ldr	r3, [pc, #124]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7c:	4a1e      	ldr	r2, [pc, #120]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006f84:	4b1c      	ldr	r3, [pc, #112]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f88:	4a1b      	ldr	r2, [pc, #108]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f8a:	f043 0301 	orr.w	r3, r3, #1
 8006f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f90:	4b19      	ldr	r3, [pc, #100]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a18      	ldr	r2, [pc, #96]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006f96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f9c:	f7fc f82e 	bl	8002ffc <HAL_GetTick>
 8006fa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fa4:	f7fc f82a 	bl	8002ffc <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e090      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fb6:	4b10      	ldr	r3, [pc, #64]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0f0      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x670>
 8006fc2:	e088      	b.n	80070d6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006fca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd0:	f7fc f814 	bl	8002ffc <HAL_GetTick>
 8006fd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fd6:	e008      	b.n	8006fea <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fd8:	f7fc f810 	bl	8002ffc <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d901      	bls.n	8006fea <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e076      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fea:	4b03      	ldr	r3, [pc, #12]	@ (8006ff8 <HAL_RCC_OscConfig+0x6c4>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1f0      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x6a4>
 8006ff6:	e06e      	b.n	80070d6 <HAL_RCC_OscConfig+0x7a2>
 8006ff8:	58024400 	.word	0x58024400
 8006ffc:	fffffc0c 	.word	0xfffffc0c
 8007000:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007004:	4b36      	ldr	r3, [pc, #216]	@ (80070e0 <HAL_RCC_OscConfig+0x7ac>)
 8007006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007008:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800700a:	4b35      	ldr	r3, [pc, #212]	@ (80070e0 <HAL_RCC_OscConfig+0x7ac>)
 800700c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800700e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007014:	2b01      	cmp	r3, #1
 8007016:	d031      	beq.n	800707c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f003 0203 	and.w	r2, r3, #3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007022:	429a      	cmp	r2, r3
 8007024:	d12a      	bne.n	800707c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	091b      	lsrs	r3, r3, #4
 800702a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007032:	429a      	cmp	r2, r3
 8007034:	d122      	bne.n	800707c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007040:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007042:	429a      	cmp	r2, r3
 8007044:	d11a      	bne.n	800707c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	0a5b      	lsrs	r3, r3, #9
 800704a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007052:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007054:	429a      	cmp	r2, r3
 8007056:	d111      	bne.n	800707c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	0c1b      	lsrs	r3, r3, #16
 800705c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007064:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007066:	429a      	cmp	r2, r3
 8007068:	d108      	bne.n	800707c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	0e1b      	lsrs	r3, r3, #24
 800706e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007076:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007078:	429a      	cmp	r2, r3
 800707a:	d001      	beq.n	8007080 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e02b      	b.n	80070d8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007080:	4b17      	ldr	r3, [pc, #92]	@ (80070e0 <HAL_RCC_OscConfig+0x7ac>)
 8007082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007084:	08db      	lsrs	r3, r3, #3
 8007086:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800708a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	429a      	cmp	r2, r3
 8007094:	d01f      	beq.n	80070d6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007096:	4b12      	ldr	r3, [pc, #72]	@ (80070e0 <HAL_RCC_OscConfig+0x7ac>)
 8007098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709a:	4a11      	ldr	r2, [pc, #68]	@ (80070e0 <HAL_RCC_OscConfig+0x7ac>)
 800709c:	f023 0301 	bic.w	r3, r3, #1
 80070a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80070a2:	f7fb ffab 	bl	8002ffc <HAL_GetTick>
 80070a6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80070a8:	bf00      	nop
 80070aa:	f7fb ffa7 	bl	8002ffc <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d0f9      	beq.n	80070aa <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80070b6:	4b0a      	ldr	r3, [pc, #40]	@ (80070e0 <HAL_RCC_OscConfig+0x7ac>)
 80070b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070ba:	4b0a      	ldr	r3, [pc, #40]	@ (80070e4 <HAL_RCC_OscConfig+0x7b0>)
 80070bc:	4013      	ands	r3, r2
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80070c2:	00d2      	lsls	r2, r2, #3
 80070c4:	4906      	ldr	r1, [pc, #24]	@ (80070e0 <HAL_RCC_OscConfig+0x7ac>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80070ca:	4b05      	ldr	r3, [pc, #20]	@ (80070e0 <HAL_RCC_OscConfig+0x7ac>)
 80070cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ce:	4a04      	ldr	r2, [pc, #16]	@ (80070e0 <HAL_RCC_OscConfig+0x7ac>)
 80070d0:	f043 0301 	orr.w	r3, r3, #1
 80070d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3730      	adds	r7, #48	@ 0x30
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	58024400 	.word	0x58024400
 80070e4:	ffff0007 	.word	0xffff0007

080070e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e19c      	b.n	8007436 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070fc:	4b8a      	ldr	r3, [pc, #552]	@ (8007328 <HAL_RCC_ClockConfig+0x240>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d910      	bls.n	800712c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800710a:	4b87      	ldr	r3, [pc, #540]	@ (8007328 <HAL_RCC_ClockConfig+0x240>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f023 020f 	bic.w	r2, r3, #15
 8007112:	4985      	ldr	r1, [pc, #532]	@ (8007328 <HAL_RCC_ClockConfig+0x240>)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	4313      	orrs	r3, r2
 8007118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800711a:	4b83      	ldr	r3, [pc, #524]	@ (8007328 <HAL_RCC_ClockConfig+0x240>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	429a      	cmp	r2, r3
 8007126:	d001      	beq.n	800712c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e184      	b.n	8007436 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0304 	and.w	r3, r3, #4
 8007134:	2b00      	cmp	r3, #0
 8007136:	d010      	beq.n	800715a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691a      	ldr	r2, [r3, #16]
 800713c:	4b7b      	ldr	r3, [pc, #492]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007144:	429a      	cmp	r2, r3
 8007146:	d908      	bls.n	800715a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007148:	4b78      	ldr	r3, [pc, #480]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	4975      	ldr	r1, [pc, #468]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 8007156:	4313      	orrs	r3, r2
 8007158:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0308 	and.w	r3, r3, #8
 8007162:	2b00      	cmp	r3, #0
 8007164:	d010      	beq.n	8007188 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	695a      	ldr	r2, [r3, #20]
 800716a:	4b70      	ldr	r3, [pc, #448]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007172:	429a      	cmp	r2, r3
 8007174:	d908      	bls.n	8007188 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007176:	4b6d      	ldr	r3, [pc, #436]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	496a      	ldr	r1, [pc, #424]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 8007184:	4313      	orrs	r3, r2
 8007186:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0310 	and.w	r3, r3, #16
 8007190:	2b00      	cmp	r3, #0
 8007192:	d010      	beq.n	80071b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	699a      	ldr	r2, [r3, #24]
 8007198:	4b64      	ldr	r3, [pc, #400]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d908      	bls.n	80071b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80071a4:	4b61      	ldr	r3, [pc, #388]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 80071a6:	69db      	ldr	r3, [r3, #28]
 80071a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	495e      	ldr	r1, [pc, #376]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0320 	and.w	r3, r3, #32
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d010      	beq.n	80071e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69da      	ldr	r2, [r3, #28]
 80071c6:	4b59      	ldr	r3, [pc, #356]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d908      	bls.n	80071e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80071d2:	4b56      	ldr	r3, [pc, #344]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	4953      	ldr	r1, [pc, #332]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0302 	and.w	r3, r3, #2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d010      	beq.n	8007212 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	4b4d      	ldr	r3, [pc, #308]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	f003 030f 	and.w	r3, r3, #15
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d908      	bls.n	8007212 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007200:	4b4a      	ldr	r3, [pc, #296]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	f023 020f 	bic.w	r2, r3, #15
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	4947      	ldr	r1, [pc, #284]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 800720e:	4313      	orrs	r3, r2
 8007210:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d055      	beq.n	80072ca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800721e:	4b43      	ldr	r3, [pc, #268]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	4940      	ldr	r1, [pc, #256]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 800722c:	4313      	orrs	r3, r2
 800722e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	2b02      	cmp	r3, #2
 8007236:	d107      	bne.n	8007248 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007238:	4b3c      	ldr	r3, [pc, #240]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d121      	bne.n	8007288 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e0f6      	b.n	8007436 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	2b03      	cmp	r3, #3
 800724e:	d107      	bne.n	8007260 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007250:	4b36      	ldr	r3, [pc, #216]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d115      	bne.n	8007288 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e0ea      	b.n	8007436 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d107      	bne.n	8007278 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007268:	4b30      	ldr	r3, [pc, #192]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007270:	2b00      	cmp	r3, #0
 8007272:	d109      	bne.n	8007288 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e0de      	b.n	8007436 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007278:	4b2c      	ldr	r3, [pc, #176]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0304 	and.w	r3, r3, #4
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e0d6      	b.n	8007436 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007288:	4b28      	ldr	r3, [pc, #160]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f023 0207 	bic.w	r2, r3, #7
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	4925      	ldr	r1, [pc, #148]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 8007296:	4313      	orrs	r3, r2
 8007298:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800729a:	f7fb feaf 	bl	8002ffc <HAL_GetTick>
 800729e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072a0:	e00a      	b.n	80072b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072a2:	f7fb feab 	bl	8002ffc <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d901      	bls.n	80072b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e0be      	b.n	8007436 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072b8:	4b1c      	ldr	r3, [pc, #112]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d1eb      	bne.n	80072a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d010      	beq.n	80072f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68da      	ldr	r2, [r3, #12]
 80072da:	4b14      	ldr	r3, [pc, #80]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	f003 030f 	and.w	r3, r3, #15
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d208      	bcs.n	80072f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072e6:	4b11      	ldr	r3, [pc, #68]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	f023 020f 	bic.w	r2, r3, #15
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	490e      	ldr	r1, [pc, #56]	@ (800732c <HAL_RCC_ClockConfig+0x244>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007328 <HAL_RCC_ClockConfig+0x240>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 030f 	and.w	r3, r3, #15
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d214      	bcs.n	8007330 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007306:	4b08      	ldr	r3, [pc, #32]	@ (8007328 <HAL_RCC_ClockConfig+0x240>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f023 020f 	bic.w	r2, r3, #15
 800730e:	4906      	ldr	r1, [pc, #24]	@ (8007328 <HAL_RCC_ClockConfig+0x240>)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	4313      	orrs	r3, r2
 8007314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007316:	4b04      	ldr	r3, [pc, #16]	@ (8007328 <HAL_RCC_ClockConfig+0x240>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 030f 	and.w	r3, r3, #15
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d005      	beq.n	8007330 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e086      	b.n	8007436 <HAL_RCC_ClockConfig+0x34e>
 8007328:	52002000 	.word	0x52002000
 800732c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b00      	cmp	r3, #0
 800733a:	d010      	beq.n	800735e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	691a      	ldr	r2, [r3, #16]
 8007340:	4b3f      	ldr	r3, [pc, #252]	@ (8007440 <HAL_RCC_ClockConfig+0x358>)
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007348:	429a      	cmp	r2, r3
 800734a:	d208      	bcs.n	800735e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800734c:	4b3c      	ldr	r3, [pc, #240]	@ (8007440 <HAL_RCC_ClockConfig+0x358>)
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	4939      	ldr	r1, [pc, #228]	@ (8007440 <HAL_RCC_ClockConfig+0x358>)
 800735a:	4313      	orrs	r3, r2
 800735c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0308 	and.w	r3, r3, #8
 8007366:	2b00      	cmp	r3, #0
 8007368:	d010      	beq.n	800738c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	695a      	ldr	r2, [r3, #20]
 800736e:	4b34      	ldr	r3, [pc, #208]	@ (8007440 <HAL_RCC_ClockConfig+0x358>)
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007376:	429a      	cmp	r2, r3
 8007378:	d208      	bcs.n	800738c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800737a:	4b31      	ldr	r3, [pc, #196]	@ (8007440 <HAL_RCC_ClockConfig+0x358>)
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	492e      	ldr	r1, [pc, #184]	@ (8007440 <HAL_RCC_ClockConfig+0x358>)
 8007388:	4313      	orrs	r3, r2
 800738a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0310 	and.w	r3, r3, #16
 8007394:	2b00      	cmp	r3, #0
 8007396:	d010      	beq.n	80073ba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	699a      	ldr	r2, [r3, #24]
 800739c:	4b28      	ldr	r3, [pc, #160]	@ (8007440 <HAL_RCC_ClockConfig+0x358>)
 800739e:	69db      	ldr	r3, [r3, #28]
 80073a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d208      	bcs.n	80073ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073a8:	4b25      	ldr	r3, [pc, #148]	@ (8007440 <HAL_RCC_ClockConfig+0x358>)
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	4922      	ldr	r1, [pc, #136]	@ (8007440 <HAL_RCC_ClockConfig+0x358>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0320 	and.w	r3, r3, #32
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d010      	beq.n	80073e8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	69da      	ldr	r2, [r3, #28]
 80073ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007440 <HAL_RCC_ClockConfig+0x358>)
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d208      	bcs.n	80073e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80073d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007440 <HAL_RCC_ClockConfig+0x358>)
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	4917      	ldr	r1, [pc, #92]	@ (8007440 <HAL_RCC_ClockConfig+0x358>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80073e8:	f000 f834 	bl	8007454 <HAL_RCC_GetSysClockFreq>
 80073ec:	4602      	mov	r2, r0
 80073ee:	4b14      	ldr	r3, [pc, #80]	@ (8007440 <HAL_RCC_ClockConfig+0x358>)
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	0a1b      	lsrs	r3, r3, #8
 80073f4:	f003 030f 	and.w	r3, r3, #15
 80073f8:	4912      	ldr	r1, [pc, #72]	@ (8007444 <HAL_RCC_ClockConfig+0x35c>)
 80073fa:	5ccb      	ldrb	r3, [r1, r3]
 80073fc:	f003 031f 	and.w	r3, r3, #31
 8007400:	fa22 f303 	lsr.w	r3, r2, r3
 8007404:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007406:	4b0e      	ldr	r3, [pc, #56]	@ (8007440 <HAL_RCC_ClockConfig+0x358>)
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	4a0d      	ldr	r2, [pc, #52]	@ (8007444 <HAL_RCC_ClockConfig+0x35c>)
 8007410:	5cd3      	ldrb	r3, [r2, r3]
 8007412:	f003 031f 	and.w	r3, r3, #31
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	fa22 f303 	lsr.w	r3, r2, r3
 800741c:	4a0a      	ldr	r2, [pc, #40]	@ (8007448 <HAL_RCC_ClockConfig+0x360>)
 800741e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007420:	4a0a      	ldr	r2, [pc, #40]	@ (800744c <HAL_RCC_ClockConfig+0x364>)
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007426:	4b0a      	ldr	r3, [pc, #40]	@ (8007450 <HAL_RCC_ClockConfig+0x368>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4618      	mov	r0, r3
 800742c:	f7fb fd9c 	bl	8002f68 <HAL_InitTick>
 8007430:	4603      	mov	r3, r0
 8007432:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007434:	7bfb      	ldrb	r3, [r7, #15]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	58024400 	.word	0x58024400
 8007444:	0800d080 	.word	0x0800d080
 8007448:	2400000c 	.word	0x2400000c
 800744c:	24000008 	.word	0x24000008
 8007450:	24000010 	.word	0x24000010

08007454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007454:	b480      	push	{r7}
 8007456:	b089      	sub	sp, #36	@ 0x24
 8007458:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800745a:	4bb3      	ldr	r3, [pc, #716]	@ (8007728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007462:	2b18      	cmp	r3, #24
 8007464:	f200 8155 	bhi.w	8007712 <HAL_RCC_GetSysClockFreq+0x2be>
 8007468:	a201      	add	r2, pc, #4	@ (adr r2, 8007470 <HAL_RCC_GetSysClockFreq+0x1c>)
 800746a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746e:	bf00      	nop
 8007470:	080074d5 	.word	0x080074d5
 8007474:	08007713 	.word	0x08007713
 8007478:	08007713 	.word	0x08007713
 800747c:	08007713 	.word	0x08007713
 8007480:	08007713 	.word	0x08007713
 8007484:	08007713 	.word	0x08007713
 8007488:	08007713 	.word	0x08007713
 800748c:	08007713 	.word	0x08007713
 8007490:	080074fb 	.word	0x080074fb
 8007494:	08007713 	.word	0x08007713
 8007498:	08007713 	.word	0x08007713
 800749c:	08007713 	.word	0x08007713
 80074a0:	08007713 	.word	0x08007713
 80074a4:	08007713 	.word	0x08007713
 80074a8:	08007713 	.word	0x08007713
 80074ac:	08007713 	.word	0x08007713
 80074b0:	08007501 	.word	0x08007501
 80074b4:	08007713 	.word	0x08007713
 80074b8:	08007713 	.word	0x08007713
 80074bc:	08007713 	.word	0x08007713
 80074c0:	08007713 	.word	0x08007713
 80074c4:	08007713 	.word	0x08007713
 80074c8:	08007713 	.word	0x08007713
 80074cc:	08007713 	.word	0x08007713
 80074d0:	08007507 	.word	0x08007507
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074d4:	4b94      	ldr	r3, [pc, #592]	@ (8007728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0320 	and.w	r3, r3, #32
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d009      	beq.n	80074f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074e0:	4b91      	ldr	r3, [pc, #580]	@ (8007728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	08db      	lsrs	r3, r3, #3
 80074e6:	f003 0303 	and.w	r3, r3, #3
 80074ea:	4a90      	ldr	r2, [pc, #576]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074ec:	fa22 f303 	lsr.w	r3, r2, r3
 80074f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80074f2:	e111      	b.n	8007718 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80074f4:	4b8d      	ldr	r3, [pc, #564]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074f6:	61bb      	str	r3, [r7, #24]
      break;
 80074f8:	e10e      	b.n	8007718 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80074fa:	4b8d      	ldr	r3, [pc, #564]	@ (8007730 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80074fc:	61bb      	str	r3, [r7, #24]
      break;
 80074fe:	e10b      	b.n	8007718 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007500:	4b8c      	ldr	r3, [pc, #560]	@ (8007734 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007502:	61bb      	str	r3, [r7, #24]
      break;
 8007504:	e108      	b.n	8007718 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007506:	4b88      	ldr	r3, [pc, #544]	@ (8007728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750a:	f003 0303 	and.w	r3, r3, #3
 800750e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007510:	4b85      	ldr	r3, [pc, #532]	@ (8007728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007514:	091b      	lsrs	r3, r3, #4
 8007516:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800751a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800751c:	4b82      	ldr	r3, [pc, #520]	@ (8007728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800751e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007526:	4b80      	ldr	r3, [pc, #512]	@ (8007728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800752a:	08db      	lsrs	r3, r3, #3
 800752c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	fb02 f303 	mul.w	r3, r2, r3
 8007536:	ee07 3a90 	vmov	s15, r3
 800753a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 80e1 	beq.w	800770c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2b02      	cmp	r3, #2
 800754e:	f000 8083 	beq.w	8007658 <HAL_RCC_GetSysClockFreq+0x204>
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2b02      	cmp	r3, #2
 8007556:	f200 80a1 	bhi.w	800769c <HAL_RCC_GetSysClockFreq+0x248>
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d003      	beq.n	8007568 <HAL_RCC_GetSysClockFreq+0x114>
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d056      	beq.n	8007614 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007566:	e099      	b.n	800769c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007568:	4b6f      	ldr	r3, [pc, #444]	@ (8007728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0320 	and.w	r3, r3, #32
 8007570:	2b00      	cmp	r3, #0
 8007572:	d02d      	beq.n	80075d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007574:	4b6c      	ldr	r3, [pc, #432]	@ (8007728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	08db      	lsrs	r3, r3, #3
 800757a:	f003 0303 	and.w	r3, r3, #3
 800757e:	4a6b      	ldr	r2, [pc, #428]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007580:	fa22 f303 	lsr.w	r3, r2, r3
 8007584:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	ee07 3a90 	vmov	s15, r3
 800758c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	ee07 3a90 	vmov	s15, r3
 8007596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759e:	4b62      	ldr	r3, [pc, #392]	@ (8007728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80075b2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007738 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80075ce:	e087      	b.n	80076e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800773c <HAL_RCC_GetSysClockFreq+0x2e8>
 80075de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e2:	4b51      	ldr	r3, [pc, #324]	@ (8007728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80075f6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007738 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007602:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800760a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007612:	e065      	b.n	80076e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007740 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007626:	4b40      	ldr	r3, [pc, #256]	@ (8007728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800762a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007636:	ed97 6a02 	vldr	s12, [r7, #8]
 800763a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007738 <HAL_RCC_GetSysClockFreq+0x2e4>
 800763e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800764a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800764e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007652:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007656:	e043      	b.n	80076e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007662:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007744 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800766a:	4b2f      	ldr	r3, [pc, #188]	@ (8007728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800766c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800767a:	ed97 6a02 	vldr	s12, [r7, #8]
 800767e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007738 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800768a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800768e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007696:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800769a:	e021      	b.n	80076e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007740 <HAL_RCC_GetSysClockFreq+0x2ec>
 80076aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b6:	ee07 3a90 	vmov	s15, r3
 80076ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076be:	ed97 6a02 	vldr	s12, [r7, #8]
 80076c2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007738 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80076e0:	4b11      	ldr	r3, [pc, #68]	@ (8007728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e4:	0a5b      	lsrs	r3, r3, #9
 80076e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076ea:	3301      	adds	r3, #1
 80076ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	ee07 3a90 	vmov	s15, r3
 80076f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80076fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007704:	ee17 3a90 	vmov	r3, s15
 8007708:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800770a:	e005      	b.n	8007718 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	61bb      	str	r3, [r7, #24]
      break;
 8007710:	e002      	b.n	8007718 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007712:	4b07      	ldr	r3, [pc, #28]	@ (8007730 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007714:	61bb      	str	r3, [r7, #24]
      break;
 8007716:	bf00      	nop
  }

  return sysclockfreq;
 8007718:	69bb      	ldr	r3, [r7, #24]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3724      	adds	r7, #36	@ 0x24
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	58024400 	.word	0x58024400
 800772c:	03d09000 	.word	0x03d09000
 8007730:	003d0900 	.word	0x003d0900
 8007734:	016e3600 	.word	0x016e3600
 8007738:	46000000 	.word	0x46000000
 800773c:	4c742400 	.word	0x4c742400
 8007740:	4a742400 	.word	0x4a742400
 8007744:	4bb71b00 	.word	0x4bb71b00

08007748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800774e:	f7ff fe81 	bl	8007454 <HAL_RCC_GetSysClockFreq>
 8007752:	4602      	mov	r2, r0
 8007754:	4b10      	ldr	r3, [pc, #64]	@ (8007798 <HAL_RCC_GetHCLKFreq+0x50>)
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	0a1b      	lsrs	r3, r3, #8
 800775a:	f003 030f 	and.w	r3, r3, #15
 800775e:	490f      	ldr	r1, [pc, #60]	@ (800779c <HAL_RCC_GetHCLKFreq+0x54>)
 8007760:	5ccb      	ldrb	r3, [r1, r3]
 8007762:	f003 031f 	and.w	r3, r3, #31
 8007766:	fa22 f303 	lsr.w	r3, r2, r3
 800776a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800776c:	4b0a      	ldr	r3, [pc, #40]	@ (8007798 <HAL_RCC_GetHCLKFreq+0x50>)
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	f003 030f 	and.w	r3, r3, #15
 8007774:	4a09      	ldr	r2, [pc, #36]	@ (800779c <HAL_RCC_GetHCLKFreq+0x54>)
 8007776:	5cd3      	ldrb	r3, [r2, r3]
 8007778:	f003 031f 	and.w	r3, r3, #31
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	fa22 f303 	lsr.w	r3, r2, r3
 8007782:	4a07      	ldr	r2, [pc, #28]	@ (80077a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007784:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007786:	4a07      	ldr	r2, [pc, #28]	@ (80077a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800778c:	4b04      	ldr	r3, [pc, #16]	@ (80077a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800778e:	681b      	ldr	r3, [r3, #0]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	58024400 	.word	0x58024400
 800779c:	0800d080 	.word	0x0800d080
 80077a0:	2400000c 	.word	0x2400000c
 80077a4:	24000008 	.word	0x24000008

080077a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80077ac:	f7ff ffcc 	bl	8007748 <HAL_RCC_GetHCLKFreq>
 80077b0:	4602      	mov	r2, r0
 80077b2:	4b06      	ldr	r3, [pc, #24]	@ (80077cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	091b      	lsrs	r3, r3, #4
 80077b8:	f003 0307 	and.w	r3, r3, #7
 80077bc:	4904      	ldr	r1, [pc, #16]	@ (80077d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80077be:	5ccb      	ldrb	r3, [r1, r3]
 80077c0:	f003 031f 	and.w	r3, r3, #31
 80077c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	58024400 	.word	0x58024400
 80077d0:	0800d080 	.word	0x0800d080

080077d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80077d8:	f7ff ffb6 	bl	8007748 <HAL_RCC_GetHCLKFreq>
 80077dc:	4602      	mov	r2, r0
 80077de:	4b06      	ldr	r3, [pc, #24]	@ (80077f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	0a1b      	lsrs	r3, r3, #8
 80077e4:	f003 0307 	and.w	r3, r3, #7
 80077e8:	4904      	ldr	r1, [pc, #16]	@ (80077fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80077ea:	5ccb      	ldrb	r3, [r1, r3]
 80077ec:	f003 031f 	and.w	r3, r3, #31
 80077f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	58024400 	.word	0x58024400
 80077fc:	0800d080 	.word	0x0800d080

08007800 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007804:	b0c6      	sub	sp, #280	@ 0x118
 8007806:	af00      	add	r7, sp, #0
 8007808:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800780c:	2300      	movs	r3, #0
 800780e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007812:	2300      	movs	r3, #0
 8007814:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007820:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007824:	2500      	movs	r5, #0
 8007826:	ea54 0305 	orrs.w	r3, r4, r5
 800782a:	d049      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800782c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007830:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007832:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007836:	d02f      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007838:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800783c:	d828      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800783e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007842:	d01a      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007844:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007848:	d822      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800784e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007852:	d007      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007854:	e01c      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007856:	4bab      	ldr	r3, [pc, #684]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785a:	4aaa      	ldr	r2, [pc, #680]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800785c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007860:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007862:	e01a      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007868:	3308      	adds	r3, #8
 800786a:	2102      	movs	r1, #2
 800786c:	4618      	mov	r0, r3
 800786e:	f002 fa49 	bl	8009d04 <RCCEx_PLL2_Config>
 8007872:	4603      	mov	r3, r0
 8007874:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007878:	e00f      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800787a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787e:	3328      	adds	r3, #40	@ 0x28
 8007880:	2102      	movs	r1, #2
 8007882:	4618      	mov	r0, r3
 8007884:	f002 faf0 	bl	8009e68 <RCCEx_PLL3_Config>
 8007888:	4603      	mov	r3, r0
 800788a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800788e:	e004      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007896:	e000      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800789a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10a      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80078a2:	4b98      	ldr	r3, [pc, #608]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80078a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80078aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078b0:	4a94      	ldr	r2, [pc, #592]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80078b2:	430b      	orrs	r3, r1
 80078b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80078b6:	e003      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80078c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80078cc:	f04f 0900 	mov.w	r9, #0
 80078d0:	ea58 0309 	orrs.w	r3, r8, r9
 80078d4:	d047      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80078d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078dc:	2b04      	cmp	r3, #4
 80078de:	d82a      	bhi.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80078e0:	a201      	add	r2, pc, #4	@ (adr r2, 80078e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80078e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e6:	bf00      	nop
 80078e8:	080078fd 	.word	0x080078fd
 80078ec:	0800790b 	.word	0x0800790b
 80078f0:	08007921 	.word	0x08007921
 80078f4:	0800793f 	.word	0x0800793f
 80078f8:	0800793f 	.word	0x0800793f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078fc:	4b81      	ldr	r3, [pc, #516]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80078fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007900:	4a80      	ldr	r2, [pc, #512]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007906:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007908:	e01a      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800790a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790e:	3308      	adds	r3, #8
 8007910:	2100      	movs	r1, #0
 8007912:	4618      	mov	r0, r3
 8007914:	f002 f9f6 	bl	8009d04 <RCCEx_PLL2_Config>
 8007918:	4603      	mov	r3, r0
 800791a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800791e:	e00f      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007924:	3328      	adds	r3, #40	@ 0x28
 8007926:	2100      	movs	r1, #0
 8007928:	4618      	mov	r0, r3
 800792a:	f002 fa9d 	bl	8009e68 <RCCEx_PLL3_Config>
 800792e:	4603      	mov	r3, r0
 8007930:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007934:	e004      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800793c:	e000      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800793e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007940:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10a      	bne.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007948:	4b6e      	ldr	r3, [pc, #440]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800794a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800794c:	f023 0107 	bic.w	r1, r3, #7
 8007950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007956:	4a6b      	ldr	r2, [pc, #428]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007958:	430b      	orrs	r3, r1
 800795a:	6513      	str	r3, [r2, #80]	@ 0x50
 800795c:	e003      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800795e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007962:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800796a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007972:	f04f 0b00 	mov.w	fp, #0
 8007976:	ea5a 030b 	orrs.w	r3, sl, fp
 800797a:	d05b      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800797c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007980:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007984:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007988:	d03b      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800798a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800798e:	d834      	bhi.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007990:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007994:	d037      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007996:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800799a:	d82e      	bhi.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800799c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80079a0:	d033      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80079a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80079a6:	d828      	bhi.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80079a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079ac:	d01a      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80079ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079b2:	d822      	bhi.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d003      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80079b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079bc:	d007      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80079be:	e01c      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079c0:	4b50      	ldr	r3, [pc, #320]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80079c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c4:	4a4f      	ldr	r2, [pc, #316]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80079c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079cc:	e01e      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d2:	3308      	adds	r3, #8
 80079d4:	2100      	movs	r1, #0
 80079d6:	4618      	mov	r0, r3
 80079d8:	f002 f994 	bl	8009d04 <RCCEx_PLL2_Config>
 80079dc:	4603      	mov	r3, r0
 80079de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80079e2:	e013      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e8:	3328      	adds	r3, #40	@ 0x28
 80079ea:	2100      	movs	r1, #0
 80079ec:	4618      	mov	r0, r3
 80079ee:	f002 fa3b 	bl	8009e68 <RCCEx_PLL3_Config>
 80079f2:	4603      	mov	r3, r0
 80079f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079f8:	e008      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a00:	e004      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007a02:	bf00      	nop
 8007a04:	e002      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007a06:	bf00      	nop
 8007a08:	e000      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10b      	bne.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007a14:	4b3b      	ldr	r3, [pc, #236]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a18:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007a24:	4a37      	ldr	r2, [pc, #220]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007a26:	430b      	orrs	r3, r1
 8007a28:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a2a:	e003      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007a40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007a44:	2300      	movs	r3, #0
 8007a46:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007a4a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4313      	orrs	r3, r2
 8007a52:	d05d      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007a5c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007a60:	d03b      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007a62:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007a66:	d834      	bhi.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007a68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a6c:	d037      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007a6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a72:	d82e      	bhi.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007a74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007a78:	d033      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007a7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007a7e:	d828      	bhi.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007a80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a84:	d01a      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007a86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a8a:	d822      	bhi.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007a90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a94:	d007      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007a96:	e01c      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a98:	4b1a      	ldr	r3, [pc, #104]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9c:	4a19      	ldr	r2, [pc, #100]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007aa4:	e01e      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aaa:	3308      	adds	r3, #8
 8007aac:	2100      	movs	r1, #0
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f002 f928 	bl	8009d04 <RCCEx_PLL2_Config>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007aba:	e013      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac0:	3328      	adds	r3, #40	@ 0x28
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f002 f9cf 	bl	8009e68 <RCCEx_PLL3_Config>
 8007aca:	4603      	mov	r3, r0
 8007acc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ad0:	e008      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ad8:	e004      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007ada:	bf00      	nop
 8007adc:	e002      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007ade:	bf00      	nop
 8007ae0:	e000      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10d      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007aec:	4b05      	ldr	r3, [pc, #20]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007af0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007afc:	4a01      	ldr	r2, [pc, #4]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007afe:	430b      	orrs	r3, r1
 8007b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b02:	e005      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007b04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007b1c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b20:	2300      	movs	r3, #0
 8007b22:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007b26:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	d03a      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b36:	2b30      	cmp	r3, #48	@ 0x30
 8007b38:	d01f      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007b3a:	2b30      	cmp	r3, #48	@ 0x30
 8007b3c:	d819      	bhi.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	d00c      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007b42:	2b20      	cmp	r3, #32
 8007b44:	d815      	bhi.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d019      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007b4a:	2b10      	cmp	r3, #16
 8007b4c:	d111      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b4e:	4baa      	ldr	r3, [pc, #680]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b52:	4aa9      	ldr	r2, [pc, #676]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007b5a:	e011      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b60:	3308      	adds	r3, #8
 8007b62:	2102      	movs	r1, #2
 8007b64:	4618      	mov	r0, r3
 8007b66:	f002 f8cd 	bl	8009d04 <RCCEx_PLL2_Config>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007b70:	e006      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b78:	e002      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007b7a:	bf00      	nop
 8007b7c:	e000      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10a      	bne.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007b88:	4b9b      	ldr	r3, [pc, #620]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b8c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b96:	4a98      	ldr	r2, [pc, #608]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b98:	430b      	orrs	r3, r1
 8007b9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b9c:	e003      	b.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ba2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007bb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007bbc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	d051      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bd0:	d035      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007bd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bd6:	d82e      	bhi.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007bd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007bdc:	d031      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007bde:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007be2:	d828      	bhi.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007be8:	d01a      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bee:	d822      	bhi.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007bf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bf8:	d007      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007bfa:	e01c      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bfc:	4b7e      	ldr	r3, [pc, #504]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c00:	4a7d      	ldr	r2, [pc, #500]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007c08:	e01c      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0e:	3308      	adds	r3, #8
 8007c10:	2100      	movs	r1, #0
 8007c12:	4618      	mov	r0, r3
 8007c14:	f002 f876 	bl	8009d04 <RCCEx_PLL2_Config>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007c1e:	e011      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c24:	3328      	adds	r3, #40	@ 0x28
 8007c26:	2100      	movs	r1, #0
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f002 f91d 	bl	8009e68 <RCCEx_PLL3_Config>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007c34:	e006      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c3c:	e002      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007c3e:	bf00      	nop
 8007c40:	e000      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10a      	bne.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007c4c:	4b6a      	ldr	r3, [pc, #424]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c50:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c5a:	4a67      	ldr	r2, [pc, #412]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c5c:	430b      	orrs	r3, r1
 8007c5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c60:	e003      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007c76:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c80:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4313      	orrs	r3, r2
 8007c88:	d053      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c94:	d033      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007c96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c9a:	d82c      	bhi.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007c9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ca0:	d02f      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007ca2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ca6:	d826      	bhi.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007ca8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007cac:	d02b      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007cae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007cb2:	d820      	bhi.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007cb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cb8:	d012      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007cba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cbe:	d81a      	bhi.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d022      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cc8:	d115      	bne.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cce:	3308      	adds	r3, #8
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f002 f816 	bl	8009d04 <RCCEx_PLL2_Config>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007cde:	e015      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce4:	3328      	adds	r3, #40	@ 0x28
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f002 f8bd 	bl	8009e68 <RCCEx_PLL3_Config>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007cf4:	e00a      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007cfc:	e006      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007cfe:	bf00      	nop
 8007d00:	e004      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007d02:	bf00      	nop
 8007d04:	e002      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007d06:	bf00      	nop
 8007d08:	e000      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10a      	bne.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007d14:	4b38      	ldr	r3, [pc, #224]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d18:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d22:	4a35      	ldr	r2, [pc, #212]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d24:	430b      	orrs	r3, r1
 8007d26:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d28:	e003      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d42:	2300      	movs	r3, #0
 8007d44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007d48:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	d058      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d5e:	d033      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d64:	d82c      	bhi.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d6a:	d02f      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d70:	d826      	bhi.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007d72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d76:	d02b      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007d78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d7c:	d820      	bhi.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007d7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d82:	d012      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007d84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d88:	d81a      	bhi.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d022      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007d8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d92:	d115      	bne.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d98:	3308      	adds	r3, #8
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f001 ffb1 	bl	8009d04 <RCCEx_PLL2_Config>
 8007da2:	4603      	mov	r3, r0
 8007da4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007da8:	e015      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dae:	3328      	adds	r3, #40	@ 0x28
 8007db0:	2101      	movs	r1, #1
 8007db2:	4618      	mov	r0, r3
 8007db4:	f002 f858 	bl	8009e68 <RCCEx_PLL3_Config>
 8007db8:	4603      	mov	r3, r0
 8007dba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007dbe:	e00a      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007dc6:	e006      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007dc8:	bf00      	nop
 8007dca:	e004      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007dcc:	bf00      	nop
 8007dce:	e002      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007dd0:	bf00      	nop
 8007dd2:	e000      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10e      	bne.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007dde:	4b06      	ldr	r3, [pc, #24]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007de2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007dee:	4a02      	ldr	r2, [pc, #8]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007df0:	430b      	orrs	r3, r1
 8007df2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007df4:	e006      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007df6:	bf00      	nop
 8007df8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007e10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e14:	2300      	movs	r3, #0
 8007e16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007e1a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4313      	orrs	r3, r2
 8007e22:	d037      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e2e:	d00e      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007e30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e34:	d816      	bhi.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d018      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007e3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e3e:	d111      	bne.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e40:	4bc4      	ldr	r3, [pc, #784]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e44:	4ac3      	ldr	r2, [pc, #780]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007e4c:	e00f      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e52:	3308      	adds	r3, #8
 8007e54:	2101      	movs	r1, #1
 8007e56:	4618      	mov	r0, r3
 8007e58:	f001 ff54 	bl	8009d04 <RCCEx_PLL2_Config>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007e62:	e004      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e6a:	e000      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10a      	bne.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e76:	4bb7      	ldr	r3, [pc, #732]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e7a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e84:	4ab3      	ldr	r2, [pc, #716]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e86:	430b      	orrs	r3, r1
 8007e88:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e8a:	e003      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007ea0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007eaa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007eae:	460b      	mov	r3, r1
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	d039      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d81c      	bhi.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec4:	08007f01 	.word	0x08007f01
 8007ec8:	08007ed5 	.word	0x08007ed5
 8007ecc:	08007ee3 	.word	0x08007ee3
 8007ed0:	08007f01 	.word	0x08007f01
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ed4:	4b9f      	ldr	r3, [pc, #636]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed8:	4a9e      	ldr	r2, [pc, #632]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ee0:	e00f      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee6:	3308      	adds	r3, #8
 8007ee8:	2102      	movs	r1, #2
 8007eea:	4618      	mov	r0, r3
 8007eec:	f001 ff0a 	bl	8009d04 <RCCEx_PLL2_Config>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ef6:	e004      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007efe:	e000      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10a      	bne.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007f0a:	4b92      	ldr	r3, [pc, #584]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f0e:	f023 0103 	bic.w	r1, r3, #3
 8007f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f18:	4a8e      	ldr	r2, [pc, #568]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f1a:	430b      	orrs	r3, r1
 8007f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f1e:	e003      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007f34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f38:	2300      	movs	r3, #0
 8007f3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f3e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4313      	orrs	r3, r2
 8007f46:	f000 8099 	beq.w	800807c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f4a:	4b83      	ldr	r3, [pc, #524]	@ (8008158 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a82      	ldr	r2, [pc, #520]	@ (8008158 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f56:	f7fb f851 	bl	8002ffc <HAL_GetTick>
 8007f5a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f5e:	e00b      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f60:	f7fb f84c 	bl	8002ffc <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	2b64      	cmp	r3, #100	@ 0x64
 8007f6e:	d903      	bls.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f76:	e005      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f78:	4b77      	ldr	r3, [pc, #476]	@ (8008158 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d0ed      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007f84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d173      	bne.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007f8c:	4b71      	ldr	r3, [pc, #452]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f8e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007f98:	4053      	eors	r3, r2
 8007f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d015      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007fa2:	4b6c      	ldr	r3, [pc, #432]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007faa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007fae:	4b69      	ldr	r3, [pc, #420]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fb2:	4a68      	ldr	r2, [pc, #416]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fb8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007fba:	4b66      	ldr	r3, [pc, #408]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fbe:	4a65      	ldr	r2, [pc, #404]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fc4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007fc6:	4a63      	ldr	r2, [pc, #396]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fcc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fda:	d118      	bne.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fdc:	f7fb f80e 	bl	8002ffc <HAL_GetTick>
 8007fe0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fe4:	e00d      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fe6:	f7fb f809 	bl	8002ffc <HAL_GetTick>
 8007fea:	4602      	mov	r2, r0
 8007fec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007ff0:	1ad2      	subs	r2, r2, r3
 8007ff2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d903      	bls.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8008000:	e005      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008002:	4b54      	ldr	r3, [pc, #336]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008006:	f003 0302 	and.w	r3, r3, #2
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0eb      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800800e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008012:	2b00      	cmp	r3, #0
 8008014:	d129      	bne.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800801a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800801e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008022:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008026:	d10e      	bne.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008028:	4b4a      	ldr	r3, [pc, #296]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008034:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008038:	091a      	lsrs	r2, r3, #4
 800803a:	4b48      	ldr	r3, [pc, #288]	@ (800815c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800803c:	4013      	ands	r3, r2
 800803e:	4a45      	ldr	r2, [pc, #276]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008040:	430b      	orrs	r3, r1
 8008042:	6113      	str	r3, [r2, #16]
 8008044:	e005      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008046:	4b43      	ldr	r3, [pc, #268]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	4a42      	ldr	r2, [pc, #264]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800804c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008050:	6113      	str	r3, [r2, #16]
 8008052:	4b40      	ldr	r3, [pc, #256]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008054:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800805a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800805e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008062:	4a3c      	ldr	r2, [pc, #240]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008064:	430b      	orrs	r3, r1
 8008066:	6713      	str	r3, [r2, #112]	@ 0x70
 8008068:	e008      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800806a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800806e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8008072:	e003      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008078:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800807c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	f002 0301 	and.w	r3, r2, #1
 8008088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800808c:	2300      	movs	r3, #0
 800808e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008092:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008096:	460b      	mov	r3, r1
 8008098:	4313      	orrs	r3, r2
 800809a:	f000 808f 	beq.w	80081bc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800809e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080a4:	2b28      	cmp	r3, #40	@ 0x28
 80080a6:	d871      	bhi.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80080a8:	a201      	add	r2, pc, #4	@ (adr r2, 80080b0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80080aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ae:	bf00      	nop
 80080b0:	08008195 	.word	0x08008195
 80080b4:	0800818d 	.word	0x0800818d
 80080b8:	0800818d 	.word	0x0800818d
 80080bc:	0800818d 	.word	0x0800818d
 80080c0:	0800818d 	.word	0x0800818d
 80080c4:	0800818d 	.word	0x0800818d
 80080c8:	0800818d 	.word	0x0800818d
 80080cc:	0800818d 	.word	0x0800818d
 80080d0:	08008161 	.word	0x08008161
 80080d4:	0800818d 	.word	0x0800818d
 80080d8:	0800818d 	.word	0x0800818d
 80080dc:	0800818d 	.word	0x0800818d
 80080e0:	0800818d 	.word	0x0800818d
 80080e4:	0800818d 	.word	0x0800818d
 80080e8:	0800818d 	.word	0x0800818d
 80080ec:	0800818d 	.word	0x0800818d
 80080f0:	08008177 	.word	0x08008177
 80080f4:	0800818d 	.word	0x0800818d
 80080f8:	0800818d 	.word	0x0800818d
 80080fc:	0800818d 	.word	0x0800818d
 8008100:	0800818d 	.word	0x0800818d
 8008104:	0800818d 	.word	0x0800818d
 8008108:	0800818d 	.word	0x0800818d
 800810c:	0800818d 	.word	0x0800818d
 8008110:	08008195 	.word	0x08008195
 8008114:	0800818d 	.word	0x0800818d
 8008118:	0800818d 	.word	0x0800818d
 800811c:	0800818d 	.word	0x0800818d
 8008120:	0800818d 	.word	0x0800818d
 8008124:	0800818d 	.word	0x0800818d
 8008128:	0800818d 	.word	0x0800818d
 800812c:	0800818d 	.word	0x0800818d
 8008130:	08008195 	.word	0x08008195
 8008134:	0800818d 	.word	0x0800818d
 8008138:	0800818d 	.word	0x0800818d
 800813c:	0800818d 	.word	0x0800818d
 8008140:	0800818d 	.word	0x0800818d
 8008144:	0800818d 	.word	0x0800818d
 8008148:	0800818d 	.word	0x0800818d
 800814c:	0800818d 	.word	0x0800818d
 8008150:	08008195 	.word	0x08008195
 8008154:	58024400 	.word	0x58024400
 8008158:	58024800 	.word	0x58024800
 800815c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008164:	3308      	adds	r3, #8
 8008166:	2101      	movs	r1, #1
 8008168:	4618      	mov	r0, r3
 800816a:	f001 fdcb 	bl	8009d04 <RCCEx_PLL2_Config>
 800816e:	4603      	mov	r3, r0
 8008170:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008174:	e00f      	b.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800817a:	3328      	adds	r3, #40	@ 0x28
 800817c:	2101      	movs	r1, #1
 800817e:	4618      	mov	r0, r3
 8008180:	f001 fe72 	bl	8009e68 <RCCEx_PLL3_Config>
 8008184:	4603      	mov	r3, r0
 8008186:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800818a:	e004      	b.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008192:	e000      	b.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008196:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10a      	bne.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800819e:	4bbf      	ldr	r3, [pc, #764]	@ (800849c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80081a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80081a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081ac:	4abb      	ldr	r2, [pc, #748]	@ (800849c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80081ae:	430b      	orrs	r3, r1
 80081b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80081b2:	e003      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80081bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c4:	f002 0302 	and.w	r3, r2, #2
 80081c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081cc:	2300      	movs	r3, #0
 80081ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4313      	orrs	r3, r2
 80081da:	d041      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80081dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081e2:	2b05      	cmp	r3, #5
 80081e4:	d824      	bhi.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80081e6:	a201      	add	r2, pc, #4	@ (adr r2, 80081ec <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80081e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ec:	08008239 	.word	0x08008239
 80081f0:	08008205 	.word	0x08008205
 80081f4:	0800821b 	.word	0x0800821b
 80081f8:	08008239 	.word	0x08008239
 80081fc:	08008239 	.word	0x08008239
 8008200:	08008239 	.word	0x08008239
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008208:	3308      	adds	r3, #8
 800820a:	2101      	movs	r1, #1
 800820c:	4618      	mov	r0, r3
 800820e:	f001 fd79 	bl	8009d04 <RCCEx_PLL2_Config>
 8008212:	4603      	mov	r3, r0
 8008214:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008218:	e00f      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800821a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800821e:	3328      	adds	r3, #40	@ 0x28
 8008220:	2101      	movs	r1, #1
 8008222:	4618      	mov	r0, r3
 8008224:	f001 fe20 	bl	8009e68 <RCCEx_PLL3_Config>
 8008228:	4603      	mov	r3, r0
 800822a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800822e:	e004      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008236:	e000      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800823a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10a      	bne.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008242:	4b96      	ldr	r3, [pc, #600]	@ (800849c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008246:	f023 0107 	bic.w	r1, r3, #7
 800824a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800824e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008250:	4a92      	ldr	r2, [pc, #584]	@ (800849c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008252:	430b      	orrs	r3, r1
 8008254:	6553      	str	r3, [r2, #84]	@ 0x54
 8008256:	e003      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008258:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800825c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008268:	f002 0304 	and.w	r3, r2, #4
 800826c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008270:	2300      	movs	r3, #0
 8008272:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008276:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800827a:	460b      	mov	r3, r1
 800827c:	4313      	orrs	r3, r2
 800827e:	d044      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008288:	2b05      	cmp	r3, #5
 800828a:	d825      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800828c:	a201      	add	r2, pc, #4	@ (adr r2, 8008294 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800828e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008292:	bf00      	nop
 8008294:	080082e1 	.word	0x080082e1
 8008298:	080082ad 	.word	0x080082ad
 800829c:	080082c3 	.word	0x080082c3
 80082a0:	080082e1 	.word	0x080082e1
 80082a4:	080082e1 	.word	0x080082e1
 80082a8:	080082e1 	.word	0x080082e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b0:	3308      	adds	r3, #8
 80082b2:	2101      	movs	r1, #1
 80082b4:	4618      	mov	r0, r3
 80082b6:	f001 fd25 	bl	8009d04 <RCCEx_PLL2_Config>
 80082ba:	4603      	mov	r3, r0
 80082bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80082c0:	e00f      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082c6:	3328      	adds	r3, #40	@ 0x28
 80082c8:	2101      	movs	r1, #1
 80082ca:	4618      	mov	r0, r3
 80082cc:	f001 fdcc 	bl	8009e68 <RCCEx_PLL3_Config>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80082d6:	e004      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80082de:	e000      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80082e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d10b      	bne.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082ea:	4b6c      	ldr	r3, [pc, #432]	@ (800849c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80082ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082ee:	f023 0107 	bic.w	r1, r3, #7
 80082f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082fa:	4a68      	ldr	r2, [pc, #416]	@ (800849c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80082fc:	430b      	orrs	r3, r1
 80082fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8008300:	e003      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008302:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008306:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800830a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800830e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008312:	f002 0320 	and.w	r3, r2, #32
 8008316:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800831a:	2300      	movs	r3, #0
 800831c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008320:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008324:	460b      	mov	r3, r1
 8008326:	4313      	orrs	r3, r2
 8008328:	d055      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800832a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800832e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008332:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008336:	d033      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008338:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800833c:	d82c      	bhi.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800833e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008342:	d02f      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008348:	d826      	bhi.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800834a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800834e:	d02b      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008350:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008354:	d820      	bhi.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800835a:	d012      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800835c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008360:	d81a      	bhi.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008362:	2b00      	cmp	r3, #0
 8008364:	d022      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008366:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800836a:	d115      	bne.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800836c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008370:	3308      	adds	r3, #8
 8008372:	2100      	movs	r1, #0
 8008374:	4618      	mov	r0, r3
 8008376:	f001 fcc5 	bl	8009d04 <RCCEx_PLL2_Config>
 800837a:	4603      	mov	r3, r0
 800837c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008380:	e015      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008386:	3328      	adds	r3, #40	@ 0x28
 8008388:	2102      	movs	r1, #2
 800838a:	4618      	mov	r0, r3
 800838c:	f001 fd6c 	bl	8009e68 <RCCEx_PLL3_Config>
 8008390:	4603      	mov	r3, r0
 8008392:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008396:	e00a      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800839e:	e006      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80083a0:	bf00      	nop
 80083a2:	e004      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80083a4:	bf00      	nop
 80083a6:	e002      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80083a8:	bf00      	nop
 80083aa:	e000      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80083ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10b      	bne.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083b6:	4b39      	ldr	r3, [pc, #228]	@ (800849c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80083b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80083be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083c6:	4a35      	ldr	r2, [pc, #212]	@ (800849c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80083c8:	430b      	orrs	r3, r1
 80083ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80083cc:	e003      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80083d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80083e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80083e6:	2300      	movs	r3, #0
 80083e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80083ec:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80083f0:	460b      	mov	r3, r1
 80083f2:	4313      	orrs	r3, r2
 80083f4:	d058      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80083f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083fe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008402:	d033      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008404:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008408:	d82c      	bhi.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800840a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800840e:	d02f      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008410:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008414:	d826      	bhi.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008416:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800841a:	d02b      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800841c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008420:	d820      	bhi.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008422:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008426:	d012      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008428:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800842c:	d81a      	bhi.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800842e:	2b00      	cmp	r3, #0
 8008430:	d022      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008436:	d115      	bne.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800843c:	3308      	adds	r3, #8
 800843e:	2100      	movs	r1, #0
 8008440:	4618      	mov	r0, r3
 8008442:	f001 fc5f 	bl	8009d04 <RCCEx_PLL2_Config>
 8008446:	4603      	mov	r3, r0
 8008448:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800844c:	e015      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800844e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008452:	3328      	adds	r3, #40	@ 0x28
 8008454:	2102      	movs	r1, #2
 8008456:	4618      	mov	r0, r3
 8008458:	f001 fd06 	bl	8009e68 <RCCEx_PLL3_Config>
 800845c:	4603      	mov	r3, r0
 800845e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008462:	e00a      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800846a:	e006      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800846c:	bf00      	nop
 800846e:	e004      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008470:	bf00      	nop
 8008472:	e002      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008474:	bf00      	nop
 8008476:	e000      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800847a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10e      	bne.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008482:	4b06      	ldr	r3, [pc, #24]	@ (800849c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008486:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800848a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800848e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008492:	4a02      	ldr	r2, [pc, #8]	@ (800849c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008494:	430b      	orrs	r3, r1
 8008496:	6593      	str	r3, [r2, #88]	@ 0x58
 8008498:	e006      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800849a:	bf00      	nop
 800849c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80084a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80084b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80084b8:	2300      	movs	r3, #0
 80084ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80084be:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80084c2:	460b      	mov	r3, r1
 80084c4:	4313      	orrs	r3, r2
 80084c6:	d055      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80084c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80084d0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80084d4:	d033      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80084d6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80084da:	d82c      	bhi.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80084dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084e0:	d02f      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80084e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084e6:	d826      	bhi.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80084e8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80084ec:	d02b      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80084ee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80084f2:	d820      	bhi.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80084f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084f8:	d012      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80084fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084fe:	d81a      	bhi.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008500:	2b00      	cmp	r3, #0
 8008502:	d022      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008508:	d115      	bne.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800850a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800850e:	3308      	adds	r3, #8
 8008510:	2100      	movs	r1, #0
 8008512:	4618      	mov	r0, r3
 8008514:	f001 fbf6 	bl	8009d04 <RCCEx_PLL2_Config>
 8008518:	4603      	mov	r3, r0
 800851a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800851e:	e015      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008524:	3328      	adds	r3, #40	@ 0x28
 8008526:	2102      	movs	r1, #2
 8008528:	4618      	mov	r0, r3
 800852a:	f001 fc9d 	bl	8009e68 <RCCEx_PLL3_Config>
 800852e:	4603      	mov	r3, r0
 8008530:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008534:	e00a      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800853c:	e006      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800853e:	bf00      	nop
 8008540:	e004      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008542:	bf00      	nop
 8008544:	e002      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008546:	bf00      	nop
 8008548:	e000      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800854a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800854c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10b      	bne.n	800856c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008554:	4ba0      	ldr	r3, [pc, #640]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008558:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800855c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008560:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008564:	4a9c      	ldr	r2, [pc, #624]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008566:	430b      	orrs	r3, r1
 8008568:	6593      	str	r3, [r2, #88]	@ 0x58
 800856a:	e003      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800856c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008570:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	f002 0308 	and.w	r3, r2, #8
 8008580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008584:	2300      	movs	r3, #0
 8008586:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800858a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800858e:	460b      	mov	r3, r1
 8008590:	4313      	orrs	r3, r2
 8008592:	d01e      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800859c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085a0:	d10c      	bne.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80085a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a6:	3328      	adds	r3, #40	@ 0x28
 80085a8:	2102      	movs	r1, #2
 80085aa:	4618      	mov	r0, r3
 80085ac:	f001 fc5c 	bl	8009e68 <RCCEx_PLL3_Config>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d002      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80085bc:	4b86      	ldr	r3, [pc, #536]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80085be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085c0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80085c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085cc:	4a82      	ldr	r2, [pc, #520]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80085ce:	430b      	orrs	r3, r1
 80085d0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80085d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085da:	f002 0310 	and.w	r3, r2, #16
 80085de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085e2:	2300      	movs	r3, #0
 80085e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085e8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80085ec:	460b      	mov	r3, r1
 80085ee:	4313      	orrs	r3, r2
 80085f0:	d01e      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80085f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085fe:	d10c      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008604:	3328      	adds	r3, #40	@ 0x28
 8008606:	2102      	movs	r1, #2
 8008608:	4618      	mov	r0, r3
 800860a:	f001 fc2d 	bl	8009e68 <RCCEx_PLL3_Config>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d002      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800861a:	4b6f      	ldr	r3, [pc, #444]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800861c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800861e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800862a:	4a6b      	ldr	r2, [pc, #428]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800862c:	430b      	orrs	r3, r1
 800862e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008638:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800863c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800863e:	2300      	movs	r3, #0
 8008640:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008642:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008646:	460b      	mov	r3, r1
 8008648:	4313      	orrs	r3, r2
 800864a:	d03e      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800864c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008650:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008654:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008658:	d022      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800865a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800865e:	d81b      	bhi.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008660:	2b00      	cmp	r3, #0
 8008662:	d003      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008668:	d00b      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800866a:	e015      	b.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800866c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008670:	3308      	adds	r3, #8
 8008672:	2100      	movs	r1, #0
 8008674:	4618      	mov	r0, r3
 8008676:	f001 fb45 	bl	8009d04 <RCCEx_PLL2_Config>
 800867a:	4603      	mov	r3, r0
 800867c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008680:	e00f      	b.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008686:	3328      	adds	r3, #40	@ 0x28
 8008688:	2102      	movs	r1, #2
 800868a:	4618      	mov	r0, r3
 800868c:	f001 fbec 	bl	8009e68 <RCCEx_PLL3_Config>
 8008690:	4603      	mov	r3, r0
 8008692:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008696:	e004      	b.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800869e:	e000      	b.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80086a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10b      	bne.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80086aa:	4b4b      	ldr	r3, [pc, #300]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80086ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80086b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086ba:	4a47      	ldr	r2, [pc, #284]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80086bc:	430b      	orrs	r3, r1
 80086be:	6593      	str	r3, [r2, #88]	@ 0x58
 80086c0:	e003      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80086ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80086d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80086d8:	2300      	movs	r3, #0
 80086da:	677b      	str	r3, [r7, #116]	@ 0x74
 80086dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80086e0:	460b      	mov	r3, r1
 80086e2:	4313      	orrs	r3, r2
 80086e4:	d03b      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80086e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80086f2:	d01f      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80086f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80086f8:	d818      	bhi.n	800872c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80086fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086fe:	d003      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008700:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008704:	d007      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008706:	e011      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008708:	4b33      	ldr	r3, [pc, #204]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800870a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800870c:	4a32      	ldr	r2, [pc, #200]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800870e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008714:	e00f      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800871a:	3328      	adds	r3, #40	@ 0x28
 800871c:	2101      	movs	r1, #1
 800871e:	4618      	mov	r0, r3
 8008720:	f001 fba2 	bl	8009e68 <RCCEx_PLL3_Config>
 8008724:	4603      	mov	r3, r0
 8008726:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800872a:	e004      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008732:	e000      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008736:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10b      	bne.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800873e:	4b26      	ldr	r3, [pc, #152]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008742:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800874a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800874e:	4a22      	ldr	r2, [pc, #136]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008750:	430b      	orrs	r3, r1
 8008752:	6553      	str	r3, [r2, #84]	@ 0x54
 8008754:	e003      	b.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008756:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800875a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800875e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008766:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800876a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800876c:	2300      	movs	r3, #0
 800876e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008770:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008774:	460b      	mov	r3, r1
 8008776:	4313      	orrs	r3, r2
 8008778:	d034      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800877a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800877e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008780:	2b00      	cmp	r3, #0
 8008782:	d003      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008788:	d007      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800878a:	e011      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800878c:	4b12      	ldr	r3, [pc, #72]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800878e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008790:	4a11      	ldr	r2, [pc, #68]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008796:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008798:	e00e      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800879a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800879e:	3308      	adds	r3, #8
 80087a0:	2102      	movs	r1, #2
 80087a2:	4618      	mov	r0, r3
 80087a4:	f001 faae 	bl	8009d04 <RCCEx_PLL2_Config>
 80087a8:	4603      	mov	r3, r0
 80087aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80087ae:	e003      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80087b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10d      	bne.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80087c0:	4b05      	ldr	r3, [pc, #20]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80087c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80087c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087ce:	4a02      	ldr	r2, [pc, #8]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80087d0:	430b      	orrs	r3, r1
 80087d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80087d4:	e006      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80087d6:	bf00      	nop
 80087d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80087e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ec:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80087f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80087f2:	2300      	movs	r3, #0
 80087f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80087f6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80087fa:	460b      	mov	r3, r1
 80087fc:	4313      	orrs	r3, r2
 80087fe:	d00c      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008804:	3328      	adds	r3, #40	@ 0x28
 8008806:	2102      	movs	r1, #2
 8008808:	4618      	mov	r0, r3
 800880a:	f001 fb2d 	bl	8009e68 <RCCEx_PLL3_Config>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d002      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800881a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800881e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008822:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008826:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008828:	2300      	movs	r3, #0
 800882a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800882c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008830:	460b      	mov	r3, r1
 8008832:	4313      	orrs	r3, r2
 8008834:	d036      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800883a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800883c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008840:	d018      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008842:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008846:	d811      	bhi.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800884c:	d014      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800884e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008852:	d80b      	bhi.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008854:	2b00      	cmp	r3, #0
 8008856:	d011      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800885c:	d106      	bne.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800885e:	4bb7      	ldr	r3, [pc, #732]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008862:	4ab6      	ldr	r2, [pc, #728]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008868:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800886a:	e008      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008872:	e004      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008874:	bf00      	nop
 8008876:	e002      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008878:	bf00      	nop
 800887a:	e000      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800887c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800887e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10a      	bne.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008886:	4bad      	ldr	r3, [pc, #692]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800888a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800888e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008892:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008894:	4aa9      	ldr	r2, [pc, #676]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008896:	430b      	orrs	r3, r1
 8008898:	6553      	str	r3, [r2, #84]	@ 0x54
 800889a:	e003      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800889c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80088a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80088b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80088b2:	2300      	movs	r3, #0
 80088b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80088b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80088ba:	460b      	mov	r3, r1
 80088bc:	4313      	orrs	r3, r2
 80088be:	d009      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80088c0:	4b9e      	ldr	r3, [pc, #632]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80088c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80088c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088ce:	4a9b      	ldr	r2, [pc, #620]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80088d0:	430b      	orrs	r3, r1
 80088d2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80088d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088dc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80088e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088e2:	2300      	movs	r3, #0
 80088e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088e6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80088ea:	460b      	mov	r3, r1
 80088ec:	4313      	orrs	r3, r2
 80088ee:	d009      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80088f0:	4b92      	ldr	r3, [pc, #584]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80088f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088f4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80088f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088fe:	4a8f      	ldr	r2, [pc, #572]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008900:	430b      	orrs	r3, r1
 8008902:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008910:	643b      	str	r3, [r7, #64]	@ 0x40
 8008912:	2300      	movs	r3, #0
 8008914:	647b      	str	r3, [r7, #68]	@ 0x44
 8008916:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800891a:	460b      	mov	r3, r1
 800891c:	4313      	orrs	r3, r2
 800891e:	d00e      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008920:	4b86      	ldr	r3, [pc, #536]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	4a85      	ldr	r2, [pc, #532]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008926:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800892a:	6113      	str	r3, [r2, #16]
 800892c:	4b83      	ldr	r3, [pc, #524]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800892e:	6919      	ldr	r1, [r3, #16]
 8008930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008934:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008938:	4a80      	ldr	r2, [pc, #512]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800893a:	430b      	orrs	r3, r1
 800893c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800893e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800894a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800894c:	2300      	movs	r3, #0
 800894e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008950:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008954:	460b      	mov	r3, r1
 8008956:	4313      	orrs	r3, r2
 8008958:	d009      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800895a:	4b78      	ldr	r3, [pc, #480]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800895c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800895e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008968:	4a74      	ldr	r2, [pc, #464]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800896a:	430b      	orrs	r3, r1
 800896c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800896e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800897a:	633b      	str	r3, [r7, #48]	@ 0x30
 800897c:	2300      	movs	r3, #0
 800897e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008980:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008984:	460b      	mov	r3, r1
 8008986:	4313      	orrs	r3, r2
 8008988:	d00a      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800898a:	4b6c      	ldr	r3, [pc, #432]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800898c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800898e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800899a:	4a68      	ldr	r2, [pc, #416]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800899c:	430b      	orrs	r3, r1
 800899e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80089a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a8:	2100      	movs	r1, #0
 80089aa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80089ac:	f003 0301 	and.w	r3, r3, #1
 80089b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089b2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80089b6:	460b      	mov	r3, r1
 80089b8:	4313      	orrs	r3, r2
 80089ba:	d011      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089c0:	3308      	adds	r3, #8
 80089c2:	2100      	movs	r1, #0
 80089c4:	4618      	mov	r0, r3
 80089c6:	f001 f99d 	bl	8009d04 <RCCEx_PLL2_Config>
 80089ca:	4603      	mov	r3, r0
 80089cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80089d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80089e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e8:	2100      	movs	r1, #0
 80089ea:	6239      	str	r1, [r7, #32]
 80089ec:	f003 0302 	and.w	r3, r3, #2
 80089f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80089f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80089f6:	460b      	mov	r3, r1
 80089f8:	4313      	orrs	r3, r2
 80089fa:	d011      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a00:	3308      	adds	r3, #8
 8008a02:	2101      	movs	r1, #1
 8008a04:	4618      	mov	r0, r3
 8008a06:	f001 f97d 	bl	8009d04 <RCCEx_PLL2_Config>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008a10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	2100      	movs	r1, #0
 8008a2a:	61b9      	str	r1, [r7, #24]
 8008a2c:	f003 0304 	and.w	r3, r3, #4
 8008a30:	61fb      	str	r3, [r7, #28]
 8008a32:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008a36:	460b      	mov	r3, r1
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	d011      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a40:	3308      	adds	r3, #8
 8008a42:	2102      	movs	r1, #2
 8008a44:	4618      	mov	r0, r3
 8008a46:	f001 f95d 	bl	8009d04 <RCCEx_PLL2_Config>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008a50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d003      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	6139      	str	r1, [r7, #16]
 8008a6c:	f003 0308 	and.w	r3, r3, #8
 8008a70:	617b      	str	r3, [r7, #20]
 8008a72:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008a76:	460b      	mov	r3, r1
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	d011      	beq.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a80:	3328      	adds	r3, #40	@ 0x28
 8008a82:	2100      	movs	r1, #0
 8008a84:	4618      	mov	r0, r3
 8008a86:	f001 f9ef 	bl	8009e68 <RCCEx_PLL3_Config>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008a90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d003      	beq.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	60b9      	str	r1, [r7, #8]
 8008aac:	f003 0310 	and.w	r3, r3, #16
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	d011      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ac0:	3328      	adds	r3, #40	@ 0x28
 8008ac2:	2101      	movs	r1, #1
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f001 f9cf 	bl	8009e68 <RCCEx_PLL3_Config>
 8008aca:	4603      	mov	r3, r0
 8008acc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008ad0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d003      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008adc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae8:	2100      	movs	r1, #0
 8008aea:	6039      	str	r1, [r7, #0]
 8008aec:	f003 0320 	and.w	r3, r3, #32
 8008af0:	607b      	str	r3, [r7, #4]
 8008af2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008af6:	460b      	mov	r3, r1
 8008af8:	4313      	orrs	r3, r2
 8008afa:	d011      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b00:	3328      	adds	r3, #40	@ 0x28
 8008b02:	2102      	movs	r1, #2
 8008b04:	4618      	mov	r0, r3
 8008b06:	f001 f9af 	bl	8009e68 <RCCEx_PLL3_Config>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008b10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d003      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008b20:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	e000      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008b34:	46bd      	mov	sp, r7
 8008b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b3a:	bf00      	nop
 8008b3c:	58024400 	.word	0x58024400

08008b40 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b090      	sub	sp, #64	@ 0x40
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b4e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008b52:	430b      	orrs	r3, r1
 8008b54:	f040 8094 	bne.w	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008b58:	4b9b      	ldr	r3, [pc, #620]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b5c:	f003 0307 	and.w	r3, r3, #7
 8008b60:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	f200 8087 	bhi.w	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b70:	08008b85 	.word	0x08008b85
 8008b74:	08008bad 	.word	0x08008bad
 8008b78:	08008bd5 	.word	0x08008bd5
 8008b7c:	08008c71 	.word	0x08008c71
 8008b80:	08008bfd 	.word	0x08008bfd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b84:	4b90      	ldr	r3, [pc, #576]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b90:	d108      	bne.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 ff62 	bl	8009a60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ba0:	f000 bc93 	b.w	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ba8:	f000 bc8f 	b.w	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bac:	4b86      	ldr	r3, [pc, #536]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bb8:	d108      	bne.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bba:	f107 0318 	add.w	r3, r7, #24
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 fca6 	bl	8009510 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bc8:	f000 bc7f 	b.w	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bd0:	f000 bc7b 	b.w	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bd4:	4b7c      	ldr	r3, [pc, #496]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008be0:	d108      	bne.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008be2:	f107 030c 	add.w	r3, r7, #12
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 fde6 	bl	80097b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bf0:	f000 bc6b 	b.w	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf8:	f000 bc67 	b.w	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bfc:	4b72      	ldr	r3, [pc, #456]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c04:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c06:	4b70      	ldr	r3, [pc, #448]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0304 	and.w	r3, r3, #4
 8008c0e:	2b04      	cmp	r3, #4
 8008c10:	d10c      	bne.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d109      	bne.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c18:	4b6b      	ldr	r3, [pc, #428]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	08db      	lsrs	r3, r3, #3
 8008c1e:	f003 0303 	and.w	r3, r3, #3
 8008c22:	4a6a      	ldr	r2, [pc, #424]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008c24:	fa22 f303 	lsr.w	r3, r2, r3
 8008c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c2a:	e01f      	b.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c2c:	4b66      	ldr	r3, [pc, #408]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c38:	d106      	bne.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c40:	d102      	bne.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c42:	4b63      	ldr	r3, [pc, #396]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c46:	e011      	b.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c48:	4b5f      	ldr	r3, [pc, #380]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c54:	d106      	bne.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c5c:	d102      	bne.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c5e:	4b5d      	ldr	r3, [pc, #372]	@ (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c62:	e003      	b.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c68:	f000 bc2f 	b.w	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c6c:	f000 bc2d 	b.w	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c70:	4b59      	ldr	r3, [pc, #356]	@ (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c74:	f000 bc29 	b.w	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c7c:	f000 bc25 	b.w	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c84:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008c88:	430b      	orrs	r3, r1
 8008c8a:	f040 80a7 	bne.w	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008c8e:	4b4e      	ldr	r3, [pc, #312]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c92:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008c96:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008c9e:	d054      	beq.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ca6:	f200 808b 	bhi.w	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008cb0:	f000 8083 	beq.w	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008cba:	f200 8081 	bhi.w	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cc4:	d02f      	beq.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ccc:	d878      	bhi.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d004      	beq.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cda:	d012      	beq.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008cdc:	e070      	b.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cde:	4b3a      	ldr	r3, [pc, #232]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ce6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cea:	d107      	bne.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 feb5 	bl	8009a60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cfa:	e3e6      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d00:	e3e3      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d02:	4b31      	ldr	r3, [pc, #196]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d0e:	d107      	bne.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d10:	f107 0318 	add.w	r3, r7, #24
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 fbfb 	bl	8009510 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d1e:	e3d4      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d20:	2300      	movs	r3, #0
 8008d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d24:	e3d1      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d26:	4b28      	ldr	r3, [pc, #160]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d32:	d107      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d34:	f107 030c 	add.w	r3, r7, #12
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 fd3d 	bl	80097b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d42:	e3c2      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d44:	2300      	movs	r3, #0
 8008d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d48:	e3bf      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d52:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d54:	4b1c      	ldr	r3, [pc, #112]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0304 	and.w	r3, r3, #4
 8008d5c:	2b04      	cmp	r3, #4
 8008d5e:	d10c      	bne.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d109      	bne.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d66:	4b18      	ldr	r3, [pc, #96]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	08db      	lsrs	r3, r3, #3
 8008d6c:	f003 0303 	and.w	r3, r3, #3
 8008d70:	4a16      	ldr	r2, [pc, #88]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008d72:	fa22 f303 	lsr.w	r3, r2, r3
 8008d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d78:	e01e      	b.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d7a:	4b13      	ldr	r3, [pc, #76]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d86:	d106      	bne.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d8e:	d102      	bne.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d90:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d94:	e010      	b.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d96:	4b0c      	ldr	r3, [pc, #48]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008da2:	d106      	bne.n	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008da6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008daa:	d102      	bne.n	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008dac:	4b09      	ldr	r3, [pc, #36]	@ (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008db0:	e002      	b.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008db2:	2300      	movs	r3, #0
 8008db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008db6:	e388      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008db8:	e387      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008dba:	4b07      	ldr	r3, [pc, #28]	@ (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dbe:	e384      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dc4:	e381      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008dc6:	bf00      	nop
 8008dc8:	58024400 	.word	0x58024400
 8008dcc:	03d09000 	.word	0x03d09000
 8008dd0:	003d0900 	.word	0x003d0900
 8008dd4:	016e3600 	.word	0x016e3600
 8008dd8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008de0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008de4:	430b      	orrs	r3, r1
 8008de6:	f040 809c 	bne.w	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008dea:	4b9e      	ldr	r3, [pc, #632]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dee:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008df2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008dfa:	d054      	beq.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e02:	f200 808b 	bhi.w	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e0c:	f000 8083 	beq.w	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e12:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e16:	f200 8081 	bhi.w	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e20:	d02f      	beq.n	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e28:	d878      	bhi.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d004      	beq.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e36:	d012      	beq.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008e38:	e070      	b.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e3a:	4b8a      	ldr	r3, [pc, #552]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e46:	d107      	bne.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 fe07 	bl	8009a60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e56:	e338      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e5c:	e335      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e5e:	4b81      	ldr	r3, [pc, #516]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e6a:	d107      	bne.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e6c:	f107 0318 	add.w	r3, r7, #24
 8008e70:	4618      	mov	r0, r3
 8008e72:	f000 fb4d 	bl	8009510 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e7a:	e326      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e80:	e323      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e82:	4b78      	ldr	r3, [pc, #480]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e8e:	d107      	bne.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e90:	f107 030c 	add.w	r3, r7, #12
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 fc8f 	bl	80097b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e9e:	e314      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ea4:	e311      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ea6:	4b6f      	ldr	r3, [pc, #444]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eaa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008eae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008eb0:	4b6c      	ldr	r3, [pc, #432]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0304 	and.w	r3, r3, #4
 8008eb8:	2b04      	cmp	r3, #4
 8008eba:	d10c      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d109      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ec2:	4b68      	ldr	r3, [pc, #416]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	08db      	lsrs	r3, r3, #3
 8008ec8:	f003 0303 	and.w	r3, r3, #3
 8008ecc:	4a66      	ldr	r2, [pc, #408]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008ece:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ed4:	e01e      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ed6:	4b63      	ldr	r3, [pc, #396]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ee2:	d106      	bne.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ee6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008eea:	d102      	bne.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008eec:	4b5f      	ldr	r3, [pc, #380]	@ (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ef0:	e010      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ef2:	4b5c      	ldr	r3, [pc, #368]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008efa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008efe:	d106      	bne.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f06:	d102      	bne.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f08:	4b59      	ldr	r3, [pc, #356]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f0c:	e002      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008f12:	e2da      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f14:	e2d9      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f16:	4b57      	ldr	r3, [pc, #348]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f1a:	e2d6      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f20:	e2d3      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f26:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008f2a:	430b      	orrs	r3, r1
 8008f2c:	f040 80a7 	bne.w	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008f30:	4b4c      	ldr	r3, [pc, #304]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f34:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008f38:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f40:	d055      	beq.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f48:	f200 8096 	bhi.w	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f52:	f000 8084 	beq.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f5c:	f200 808c 	bhi.w	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f66:	d030      	beq.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f6e:	f200 8083 	bhi.w	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d004      	beq.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f7e:	d012      	beq.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008f80:	e07a      	b.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f82:	4b38      	ldr	r3, [pc, #224]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f8e:	d107      	bne.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f94:	4618      	mov	r0, r3
 8008f96:	f000 fd63 	bl	8009a60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f9e:	e294      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fa4:	e291      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fa6:	4b2f      	ldr	r3, [pc, #188]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fb2:	d107      	bne.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fb4:	f107 0318 	add.w	r3, r7, #24
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 faa9 	bl	8009510 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fc2:	e282      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fc8:	e27f      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fca:	4b26      	ldr	r3, [pc, #152]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fd6:	d107      	bne.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fd8:	f107 030c 	add.w	r3, r7, #12
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 fbeb 	bl	80097b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fe6:	e270      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fec:	e26d      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008fee:	4b1d      	ldr	r3, [pc, #116]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ff2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ff6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 0304 	and.w	r3, r3, #4
 8009000:	2b04      	cmp	r3, #4
 8009002:	d10c      	bne.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009006:	2b00      	cmp	r3, #0
 8009008:	d109      	bne.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800900a:	4b16      	ldr	r3, [pc, #88]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	08db      	lsrs	r3, r3, #3
 8009010:	f003 0303 	and.w	r3, r3, #3
 8009014:	4a14      	ldr	r2, [pc, #80]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009016:	fa22 f303 	lsr.w	r3, r2, r3
 800901a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800901c:	e01e      	b.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800901e:	4b11      	ldr	r3, [pc, #68]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800902a:	d106      	bne.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800902c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800902e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009032:	d102      	bne.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009034:	4b0d      	ldr	r3, [pc, #52]	@ (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009038:	e010      	b.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800903a:	4b0a      	ldr	r3, [pc, #40]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009042:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009046:	d106      	bne.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800904a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800904e:	d102      	bne.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009050:	4b07      	ldr	r3, [pc, #28]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009054:	e002      	b.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009056:	2300      	movs	r3, #0
 8009058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800905a:	e236      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800905c:	e235      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800905e:	4b05      	ldr	r3, [pc, #20]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009062:	e232      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009064:	58024400 	.word	0x58024400
 8009068:	03d09000 	.word	0x03d09000
 800906c:	003d0900 	.word	0x003d0900
 8009070:	016e3600 	.word	0x016e3600
 8009074:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009078:	2300      	movs	r3, #0
 800907a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800907c:	e225      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800907e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009082:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009086:	430b      	orrs	r3, r1
 8009088:	f040 8085 	bne.w	8009196 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800908c:	4b9c      	ldr	r3, [pc, #624]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800908e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009090:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009094:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009098:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800909c:	d06b      	beq.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800909e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090a4:	d874      	bhi.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80090a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80090ac:	d056      	beq.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80090ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80090b4:	d86c      	bhi.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80090b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80090bc:	d03b      	beq.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80090be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80090c4:	d864      	bhi.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80090c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090cc:	d021      	beq.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80090ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090d4:	d85c      	bhi.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80090d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d004      	beq.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80090dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090e2:	d004      	beq.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80090e4:	e054      	b.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80090e6:	f7fe fb5f 	bl	80077a8 <HAL_RCC_GetPCLK1Freq>
 80090ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090ec:	e1ed      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090ee:	4b84      	ldr	r3, [pc, #528]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090fa:	d107      	bne.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090fc:	f107 0318 	add.w	r3, r7, #24
 8009100:	4618      	mov	r0, r3
 8009102:	f000 fa05 	bl	8009510 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800910a:	e1de      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800910c:	2300      	movs	r3, #0
 800910e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009110:	e1db      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009112:	4b7b      	ldr	r3, [pc, #492]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800911a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800911e:	d107      	bne.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009120:	f107 030c 	add.w	r3, r7, #12
 8009124:	4618      	mov	r0, r3
 8009126:	f000 fb47 	bl	80097b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800912e:	e1cc      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009130:	2300      	movs	r3, #0
 8009132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009134:	e1c9      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009136:	4b72      	ldr	r3, [pc, #456]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 0304 	and.w	r3, r3, #4
 800913e:	2b04      	cmp	r3, #4
 8009140:	d109      	bne.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009142:	4b6f      	ldr	r3, [pc, #444]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	08db      	lsrs	r3, r3, #3
 8009148:	f003 0303 	and.w	r3, r3, #3
 800914c:	4a6d      	ldr	r2, [pc, #436]	@ (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800914e:	fa22 f303 	lsr.w	r3, r2, r3
 8009152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009154:	e1b9      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800915a:	e1b6      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800915c:	4b68      	ldr	r3, [pc, #416]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009168:	d102      	bne.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800916a:	4b67      	ldr	r3, [pc, #412]	@ (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800916c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800916e:	e1ac      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009170:	2300      	movs	r3, #0
 8009172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009174:	e1a9      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009176:	4b62      	ldr	r3, [pc, #392]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800917e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009182:	d102      	bne.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8009184:	4b61      	ldr	r3, [pc, #388]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009188:	e19f      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800918a:	2300      	movs	r3, #0
 800918c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800918e:	e19c      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009190:	2300      	movs	r3, #0
 8009192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009194:	e199      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009196:	e9d7 2300 	ldrd	r2, r3, [r7]
 800919a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800919e:	430b      	orrs	r3, r1
 80091a0:	d173      	bne.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80091a2:	4b57      	ldr	r3, [pc, #348]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80091a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80091aa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80091ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091b2:	d02f      	beq.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80091b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091ba:	d863      	bhi.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80091bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d004      	beq.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80091c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091c8:	d012      	beq.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80091ca:	e05b      	b.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091cc:	4b4c      	ldr	r3, [pc, #304]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091d8:	d107      	bne.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091da:	f107 0318 	add.w	r3, r7, #24
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 f996 	bl	8009510 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091e8:	e16f      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ee:	e16c      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091f0:	4b43      	ldr	r3, [pc, #268]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091fc:	d107      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091fe:	f107 030c 	add.w	r3, r7, #12
 8009202:	4618      	mov	r0, r3
 8009204:	f000 fad8 	bl	80097b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800920c:	e15d      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800920e:	2300      	movs	r3, #0
 8009210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009212:	e15a      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009214:	4b3a      	ldr	r3, [pc, #232]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009218:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800921c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800921e:	4b38      	ldr	r3, [pc, #224]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 0304 	and.w	r3, r3, #4
 8009226:	2b04      	cmp	r3, #4
 8009228:	d10c      	bne.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800922a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800922c:	2b00      	cmp	r3, #0
 800922e:	d109      	bne.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009230:	4b33      	ldr	r3, [pc, #204]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	08db      	lsrs	r3, r3, #3
 8009236:	f003 0303 	and.w	r3, r3, #3
 800923a:	4a32      	ldr	r2, [pc, #200]	@ (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800923c:	fa22 f303 	lsr.w	r3, r2, r3
 8009240:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009242:	e01e      	b.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009244:	4b2e      	ldr	r3, [pc, #184]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800924c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009250:	d106      	bne.n	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8009252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009254:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009258:	d102      	bne.n	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800925a:	4b2b      	ldr	r3, [pc, #172]	@ (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800925c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800925e:	e010      	b.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009260:	4b27      	ldr	r3, [pc, #156]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009268:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800926c:	d106      	bne.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800926e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009274:	d102      	bne.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009276:	4b25      	ldr	r3, [pc, #148]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009278:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800927a:	e002      	b.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009280:	e123      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009282:	e122      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009284:	2300      	movs	r3, #0
 8009286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009288:	e11f      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800928a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800928e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009292:	430b      	orrs	r3, r1
 8009294:	d13c      	bne.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009296:	4b1a      	ldr	r3, [pc, #104]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800929a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800929e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80092a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d004      	beq.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80092a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092ac:	d012      	beq.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80092ae:	e023      	b.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092b0:	4b13      	ldr	r3, [pc, #76]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092bc:	d107      	bne.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 fbcc 	bl	8009a60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092cc:	e0fd      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092ce:	2300      	movs	r3, #0
 80092d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092d2:	e0fa      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092e0:	d107      	bne.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092e2:	f107 0318 	add.w	r3, r7, #24
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 f912 	bl	8009510 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092f0:	e0eb      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092f6:	e0e8      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092fc:	e0e5      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80092fe:	bf00      	nop
 8009300:	58024400 	.word	0x58024400
 8009304:	03d09000 	.word	0x03d09000
 8009308:	003d0900 	.word	0x003d0900
 800930c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009314:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009318:	430b      	orrs	r3, r1
 800931a:	f040 8085 	bne.w	8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800931e:	4b6d      	ldr	r3, [pc, #436]	@ (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009322:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009326:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800932a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800932e:	d06b      	beq.n	8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8009330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009332:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009336:	d874      	bhi.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800933e:	d056      	beq.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8009340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009346:	d86c      	bhi.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800934e:	d03b      	beq.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8009350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009352:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009356:	d864      	bhi.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800935e:	d021      	beq.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8009360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009366:	d85c      	bhi.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936a:	2b00      	cmp	r3, #0
 800936c:	d004      	beq.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800936e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009370:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009374:	d004      	beq.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8009376:	e054      	b.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009378:	f000 f8b4 	bl	80094e4 <HAL_RCCEx_GetD3PCLK1Freq>
 800937c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800937e:	e0a4      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009380:	4b54      	ldr	r3, [pc, #336]	@ (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009388:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800938c:	d107      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800938e:	f107 0318 	add.w	r3, r7, #24
 8009392:	4618      	mov	r0, r3
 8009394:	f000 f8bc 	bl	8009510 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800939c:	e095      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800939e:	2300      	movs	r3, #0
 80093a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093a2:	e092      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093a4:	4b4b      	ldr	r3, [pc, #300]	@ (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093b0:	d107      	bne.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093b2:	f107 030c 	add.w	r3, r7, #12
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 f9fe 	bl	80097b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093c0:	e083      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093c2:	2300      	movs	r3, #0
 80093c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c6:	e080      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80093c8:	4b42      	ldr	r3, [pc, #264]	@ (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0304 	and.w	r3, r3, #4
 80093d0:	2b04      	cmp	r3, #4
 80093d2:	d109      	bne.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093d4:	4b3f      	ldr	r3, [pc, #252]	@ (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	08db      	lsrs	r3, r3, #3
 80093da:	f003 0303 	and.w	r3, r3, #3
 80093de:	4a3e      	ldr	r2, [pc, #248]	@ (80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80093e0:	fa22 f303 	lsr.w	r3, r2, r3
 80093e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093e6:	e070      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093e8:	2300      	movs	r3, #0
 80093ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ec:	e06d      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80093ee:	4b39      	ldr	r3, [pc, #228]	@ (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093fa:	d102      	bne.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80093fc:	4b37      	ldr	r3, [pc, #220]	@ (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80093fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009400:	e063      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009402:	2300      	movs	r3, #0
 8009404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009406:	e060      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009408:	4b32      	ldr	r3, [pc, #200]	@ (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009410:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009414:	d102      	bne.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8009416:	4b32      	ldr	r3, [pc, #200]	@ (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800941a:	e056      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800941c:	2300      	movs	r3, #0
 800941e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009420:	e053      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009422:	2300      	movs	r3, #0
 8009424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009426:	e050      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800942c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009430:	430b      	orrs	r3, r1
 8009432:	d148      	bne.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009434:	4b27      	ldr	r3, [pc, #156]	@ (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009438:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800943c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800943e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009444:	d02a      	beq.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800944c:	d838      	bhi.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800944e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009450:	2b00      	cmp	r3, #0
 8009452:	d004      	beq.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009456:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800945a:	d00d      	beq.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800945c:	e030      	b.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800945e:	4b1d      	ldr	r3, [pc, #116]	@ (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009466:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800946a:	d102      	bne.n	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800946c:	4b1c      	ldr	r3, [pc, #112]	@ (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800946e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009470:	e02b      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009472:	2300      	movs	r3, #0
 8009474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009476:	e028      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009478:	4b16      	ldr	r3, [pc, #88]	@ (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009480:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009484:	d107      	bne.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800948a:	4618      	mov	r0, r3
 800948c:	f000 fae8 	bl	8009a60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009494:	e019      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800949a:	e016      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800949c:	4b0d      	ldr	r3, [pc, #52]	@ (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094a8:	d107      	bne.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094aa:	f107 0318 	add.w	r3, r7, #24
 80094ae:	4618      	mov	r0, r3
 80094b0:	f000 f82e 	bl	8009510 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094b8:	e007      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094ba:	2300      	movs	r3, #0
 80094bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094be:	e004      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80094c0:	2300      	movs	r3, #0
 80094c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094c4:	e001      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80094c6:	2300      	movs	r3, #0
 80094c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80094ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3740      	adds	r7, #64	@ 0x40
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	58024400 	.word	0x58024400
 80094d8:	03d09000 	.word	0x03d09000
 80094dc:	003d0900 	.word	0x003d0900
 80094e0:	016e3600 	.word	0x016e3600

080094e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80094e8:	f7fe f92e 	bl	8007748 <HAL_RCC_GetHCLKFreq>
 80094ec:	4602      	mov	r2, r0
 80094ee:	4b06      	ldr	r3, [pc, #24]	@ (8009508 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80094f0:	6a1b      	ldr	r3, [r3, #32]
 80094f2:	091b      	lsrs	r3, r3, #4
 80094f4:	f003 0307 	and.w	r3, r3, #7
 80094f8:	4904      	ldr	r1, [pc, #16]	@ (800950c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80094fa:	5ccb      	ldrb	r3, [r1, r3]
 80094fc:	f003 031f 	and.w	r3, r3, #31
 8009500:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009504:	4618      	mov	r0, r3
 8009506:	bd80      	pop	{r7, pc}
 8009508:	58024400 	.word	0x58024400
 800950c:	0800d080 	.word	0x0800d080

08009510 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009510:	b480      	push	{r7}
 8009512:	b089      	sub	sp, #36	@ 0x24
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009518:	4ba1      	ldr	r3, [pc, #644]	@ (80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800951a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800951c:	f003 0303 	and.w	r3, r3, #3
 8009520:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009522:	4b9f      	ldr	r3, [pc, #636]	@ (80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009526:	0b1b      	lsrs	r3, r3, #12
 8009528:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800952c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800952e:	4b9c      	ldr	r3, [pc, #624]	@ (80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009532:	091b      	lsrs	r3, r3, #4
 8009534:	f003 0301 	and.w	r3, r3, #1
 8009538:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800953a:	4b99      	ldr	r3, [pc, #612]	@ (80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800953c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800953e:	08db      	lsrs	r3, r3, #3
 8009540:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009544:	693a      	ldr	r2, [r7, #16]
 8009546:	fb02 f303 	mul.w	r3, r2, r3
 800954a:	ee07 3a90 	vmov	s15, r3
 800954e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009552:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 8111 	beq.w	8009780 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	2b02      	cmp	r3, #2
 8009562:	f000 8083 	beq.w	800966c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	2b02      	cmp	r3, #2
 800956a:	f200 80a1 	bhi.w	80096b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d003      	beq.n	800957c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d056      	beq.n	8009628 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800957a:	e099      	b.n	80096b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800957c:	4b88      	ldr	r3, [pc, #544]	@ (80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 0320 	and.w	r3, r3, #32
 8009584:	2b00      	cmp	r3, #0
 8009586:	d02d      	beq.n	80095e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009588:	4b85      	ldr	r3, [pc, #532]	@ (80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	08db      	lsrs	r3, r3, #3
 800958e:	f003 0303 	and.w	r3, r3, #3
 8009592:	4a84      	ldr	r2, [pc, #528]	@ (80097a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009594:	fa22 f303 	lsr.w	r3, r2, r3
 8009598:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	ee07 3a90 	vmov	s15, r3
 80095a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	ee07 3a90 	vmov	s15, r3
 80095aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095b2:	4b7b      	ldr	r3, [pc, #492]	@ (80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ba:	ee07 3a90 	vmov	s15, r3
 80095be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80095c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80097a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095e2:	e087      	b.n	80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	ee07 3a90 	vmov	s15, r3
 80095ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80097ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80095f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095f6:	4b6a      	ldr	r3, [pc, #424]	@ (80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095fe:	ee07 3a90 	vmov	s15, r3
 8009602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009606:	ed97 6a03 	vldr	s12, [r7, #12]
 800960a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80097a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800960e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800961a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800961e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009626:	e065      	b.n	80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	ee07 3a90 	vmov	s15, r3
 800962e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009632:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80097b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800963a:	4b59      	ldr	r3, [pc, #356]	@ (80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800963c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800963e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800964a:	ed97 6a03 	vldr	s12, [r7, #12]
 800964e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80097a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800965a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800965e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009666:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800966a:	e043      	b.n	80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	ee07 3a90 	vmov	s15, r3
 8009672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009676:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80097b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800967a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800967e:	4b48      	ldr	r3, [pc, #288]	@ (80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009686:	ee07 3a90 	vmov	s15, r3
 800968a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800968e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009692:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80097a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800969a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800969e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096ae:	e021      	b.n	80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	ee07 3a90 	vmov	s15, r3
 80096b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80097b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096c2:	4b37      	ldr	r3, [pc, #220]	@ (80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ca:	ee07 3a90 	vmov	s15, r3
 80096ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80097a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80096f4:	4b2a      	ldr	r3, [pc, #168]	@ (80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f8:	0a5b      	lsrs	r3, r3, #9
 80096fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096fe:	ee07 3a90 	vmov	s15, r3
 8009702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009706:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800970a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800970e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800971a:	ee17 2a90 	vmov	r2, s15
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009722:	4b1f      	ldr	r3, [pc, #124]	@ (80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009726:	0c1b      	lsrs	r3, r3, #16
 8009728:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800972c:	ee07 3a90 	vmov	s15, r3
 8009730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009734:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009738:	ee37 7a87 	vadd.f32	s14, s15, s14
 800973c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009748:	ee17 2a90 	vmov	r2, s15
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009750:	4b13      	ldr	r3, [pc, #76]	@ (80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009754:	0e1b      	lsrs	r3, r3, #24
 8009756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800975a:	ee07 3a90 	vmov	s15, r3
 800975e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009762:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009766:	ee37 7a87 	vadd.f32	s14, s15, s14
 800976a:	edd7 6a07 	vldr	s13, [r7, #28]
 800976e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009776:	ee17 2a90 	vmov	r2, s15
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800977e:	e008      	b.n	8009792 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	609a      	str	r2, [r3, #8]
}
 8009792:	bf00      	nop
 8009794:	3724      	adds	r7, #36	@ 0x24
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	58024400 	.word	0x58024400
 80097a4:	03d09000 	.word	0x03d09000
 80097a8:	46000000 	.word	0x46000000
 80097ac:	4c742400 	.word	0x4c742400
 80097b0:	4a742400 	.word	0x4a742400
 80097b4:	4bb71b00 	.word	0x4bb71b00

080097b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b089      	sub	sp, #36	@ 0x24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097c0:	4ba1      	ldr	r3, [pc, #644]	@ (8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c4:	f003 0303 	and.w	r3, r3, #3
 80097c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80097ca:	4b9f      	ldr	r3, [pc, #636]	@ (8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ce:	0d1b      	lsrs	r3, r3, #20
 80097d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80097d6:	4b9c      	ldr	r3, [pc, #624]	@ (8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097da:	0a1b      	lsrs	r3, r3, #8
 80097dc:	f003 0301 	and.w	r3, r3, #1
 80097e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80097e2:	4b99      	ldr	r3, [pc, #612]	@ (8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097e6:	08db      	lsrs	r3, r3, #3
 80097e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	fb02 f303 	mul.w	r3, r2, r3
 80097f2:	ee07 3a90 	vmov	s15, r3
 80097f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	2b00      	cmp	r3, #0
 8009802:	f000 8111 	beq.w	8009a28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	2b02      	cmp	r3, #2
 800980a:	f000 8083 	beq.w	8009914 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	2b02      	cmp	r3, #2
 8009812:	f200 80a1 	bhi.w	8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d003      	beq.n	8009824 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	2b01      	cmp	r3, #1
 8009820:	d056      	beq.n	80098d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009822:	e099      	b.n	8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009824:	4b88      	ldr	r3, [pc, #544]	@ (8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0320 	and.w	r3, r3, #32
 800982c:	2b00      	cmp	r3, #0
 800982e:	d02d      	beq.n	800988c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009830:	4b85      	ldr	r3, [pc, #532]	@ (8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	08db      	lsrs	r3, r3, #3
 8009836:	f003 0303 	and.w	r3, r3, #3
 800983a:	4a84      	ldr	r2, [pc, #528]	@ (8009a4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800983c:	fa22 f303 	lsr.w	r3, r2, r3
 8009840:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	ee07 3a90 	vmov	s15, r3
 8009848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	ee07 3a90 	vmov	s15, r3
 8009852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800985a:	4b7b      	ldr	r3, [pc, #492]	@ (8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800985c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800985e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009862:	ee07 3a90 	vmov	s15, r3
 8009866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800986a:	ed97 6a03 	vldr	s12, [r7, #12]
 800986e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009a50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800987a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800987e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009886:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800988a:	e087      	b.n	800999c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	ee07 3a90 	vmov	s15, r3
 8009892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009896:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800989a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800989e:	4b6a      	ldr	r3, [pc, #424]	@ (8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a6:	ee07 3a90 	vmov	s15, r3
 80098aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80098b2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009a50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098ce:	e065      	b.n	800999c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	ee07 3a90 	vmov	s15, r3
 80098d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098da:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009a58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80098de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098e2:	4b59      	ldr	r3, [pc, #356]	@ (8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ea:	ee07 3a90 	vmov	s15, r3
 80098ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80098f6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009a50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800990a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800990e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009912:	e043      	b.n	800999c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	ee07 3a90 	vmov	s15, r3
 800991a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009a5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009926:	4b48      	ldr	r3, [pc, #288]	@ (8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800992a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800992e:	ee07 3a90 	vmov	s15, r3
 8009932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009936:	ed97 6a03 	vldr	s12, [r7, #12]
 800993a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009a50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800993e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800994a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800994e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009956:	e021      	b.n	800999c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	ee07 3a90 	vmov	s15, r3
 800995e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009962:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009a58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800996a:	4b37      	ldr	r3, [pc, #220]	@ (8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800996c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800996e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009972:	ee07 3a90 	vmov	s15, r3
 8009976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800997a:	ed97 6a03 	vldr	s12, [r7, #12]
 800997e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009a50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800998a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800998e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800999a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800999c:	4b2a      	ldr	r3, [pc, #168]	@ (8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800999e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099a0:	0a5b      	lsrs	r3, r3, #9
 80099a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099a6:	ee07 3a90 	vmov	s15, r3
 80099aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80099ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099c2:	ee17 2a90 	vmov	r2, s15
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80099ca:	4b1f      	ldr	r3, [pc, #124]	@ (8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ce:	0c1b      	lsrs	r3, r3, #16
 80099d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099d4:	ee07 3a90 	vmov	s15, r3
 80099d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80099e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099f0:	ee17 2a90 	vmov	r2, s15
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80099f8:	4b13      	ldr	r3, [pc, #76]	@ (8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099fc:	0e1b      	lsrs	r3, r3, #24
 80099fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a02:	ee07 3a90 	vmov	s15, r3
 8009a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a12:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a1e:	ee17 2a90 	vmov	r2, s15
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009a26:	e008      	b.n	8009a3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	609a      	str	r2, [r3, #8]
}
 8009a3a:	bf00      	nop
 8009a3c:	3724      	adds	r7, #36	@ 0x24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	58024400 	.word	0x58024400
 8009a4c:	03d09000 	.word	0x03d09000
 8009a50:	46000000 	.word	0x46000000
 8009a54:	4c742400 	.word	0x4c742400
 8009a58:	4a742400 	.word	0x4a742400
 8009a5c:	4bb71b00 	.word	0x4bb71b00

08009a60 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b089      	sub	sp, #36	@ 0x24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a68:	4ba0      	ldr	r3, [pc, #640]	@ (8009cec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a6c:	f003 0303 	and.w	r3, r3, #3
 8009a70:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009a72:	4b9e      	ldr	r3, [pc, #632]	@ (8009cec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a76:	091b      	lsrs	r3, r3, #4
 8009a78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a7c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009a7e:	4b9b      	ldr	r3, [pc, #620]	@ (8009cec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a82:	f003 0301 	and.w	r3, r3, #1
 8009a86:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009a88:	4b98      	ldr	r3, [pc, #608]	@ (8009cec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a8c:	08db      	lsrs	r3, r3, #3
 8009a8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	fb02 f303 	mul.w	r3, r2, r3
 8009a98:	ee07 3a90 	vmov	s15, r3
 8009a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f000 8111 	beq.w	8009cce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	f000 8083 	beq.w	8009bba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	f200 80a1 	bhi.w	8009bfe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d003      	beq.n	8009aca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d056      	beq.n	8009b76 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009ac8:	e099      	b.n	8009bfe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009aca:	4b88      	ldr	r3, [pc, #544]	@ (8009cec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f003 0320 	and.w	r3, r3, #32
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d02d      	beq.n	8009b32 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ad6:	4b85      	ldr	r3, [pc, #532]	@ (8009cec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	08db      	lsrs	r3, r3, #3
 8009adc:	f003 0303 	and.w	r3, r3, #3
 8009ae0:	4a83      	ldr	r2, [pc, #524]	@ (8009cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ae6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	ee07 3a90 	vmov	s15, r3
 8009aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	ee07 3a90 	vmov	s15, r3
 8009af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009afc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b00:	4b7a      	ldr	r3, [pc, #488]	@ (8009cec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b08:	ee07 3a90 	vmov	s15, r3
 8009b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b10:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b14:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b2c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b30:	e087      	b.n	8009c42 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	ee07 3a90 	vmov	s15, r3
 8009b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009b40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b44:	4b69      	ldr	r3, [pc, #420]	@ (8009cec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4c:	ee07 3a90 	vmov	s15, r3
 8009b50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b54:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b58:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b74:	e065      	b.n	8009c42 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	ee07 3a90 	vmov	s15, r3
 8009b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b80:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009cfc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009b84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b88:	4b58      	ldr	r3, [pc, #352]	@ (8009cec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b90:	ee07 3a90 	vmov	s15, r3
 8009b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b98:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b9c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ba0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ba8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bb8:	e043      	b.n	8009c42 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	ee07 3a90 	vmov	s15, r3
 8009bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009d00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009bc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bcc:	4b47      	ldr	r3, [pc, #284]	@ (8009cec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd4:	ee07 3a90 	vmov	s15, r3
 8009bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009be0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009be4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bfc:	e021      	b.n	8009c42 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	ee07 3a90 	vmov	s15, r3
 8009c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c08:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c10:	4b36      	ldr	r3, [pc, #216]	@ (8009cec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c18:	ee07 3a90 	vmov	s15, r3
 8009c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c20:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c24:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c40:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009c42:	4b2a      	ldr	r3, [pc, #168]	@ (8009cec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c46:	0a5b      	lsrs	r3, r3, #9
 8009c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c4c:	ee07 3a90 	vmov	s15, r3
 8009c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c68:	ee17 2a90 	vmov	r2, s15
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009c70:	4b1e      	ldr	r3, [pc, #120]	@ (8009cec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c74:	0c1b      	lsrs	r3, r3, #16
 8009c76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c7a:	ee07 3a90 	vmov	s15, r3
 8009c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c96:	ee17 2a90 	vmov	r2, s15
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009c9e:	4b13      	ldr	r3, [pc, #76]	@ (8009cec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ca2:	0e1b      	lsrs	r3, r3, #24
 8009ca4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ca8:	ee07 3a90 	vmov	s15, r3
 8009cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cc4:	ee17 2a90 	vmov	r2, s15
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009ccc:	e008      	b.n	8009ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	609a      	str	r2, [r3, #8]
}
 8009ce0:	bf00      	nop
 8009ce2:	3724      	adds	r7, #36	@ 0x24
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	58024400 	.word	0x58024400
 8009cf0:	03d09000 	.word	0x03d09000
 8009cf4:	46000000 	.word	0x46000000
 8009cf8:	4c742400 	.word	0x4c742400
 8009cfc:	4a742400 	.word	0x4a742400
 8009d00:	4bb71b00 	.word	0x4bb71b00

08009d04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d12:	4b53      	ldr	r3, [pc, #332]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d16:	f003 0303 	and.w	r3, r3, #3
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d101      	bne.n	8009d22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e099      	b.n	8009e56 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009d22:	4b4f      	ldr	r3, [pc, #316]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a4e      	ldr	r2, [pc, #312]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009d28:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d2e:	f7f9 f965 	bl	8002ffc <HAL_GetTick>
 8009d32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d34:	e008      	b.n	8009d48 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009d36:	f7f9 f961 	bl	8002ffc <HAL_GetTick>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d901      	bls.n	8009d48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d44:	2303      	movs	r3, #3
 8009d46:	e086      	b.n	8009e56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d48:	4b45      	ldr	r3, [pc, #276]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1f0      	bne.n	8009d36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009d54:	4b42      	ldr	r3, [pc, #264]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d58:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	031b      	lsls	r3, r3, #12
 8009d62:	493f      	ldr	r1, [pc, #252]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009d64:	4313      	orrs	r3, r2
 8009d66:	628b      	str	r3, [r1, #40]	@ 0x28
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	3b01      	subs	r3, #1
 8009d78:	025b      	lsls	r3, r3, #9
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	431a      	orrs	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	3b01      	subs	r3, #1
 8009d84:	041b      	lsls	r3, r3, #16
 8009d86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009d8a:	431a      	orrs	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	3b01      	subs	r3, #1
 8009d92:	061b      	lsls	r3, r3, #24
 8009d94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009d98:	4931      	ldr	r1, [pc, #196]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009d9e:	4b30      	ldr	r3, [pc, #192]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009da2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	492d      	ldr	r1, [pc, #180]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009dac:	4313      	orrs	r3, r2
 8009dae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009db0:	4b2b      	ldr	r3, [pc, #172]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009db4:	f023 0220 	bic.w	r2, r3, #32
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	699b      	ldr	r3, [r3, #24]
 8009dbc:	4928      	ldr	r1, [pc, #160]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009dc2:	4b27      	ldr	r3, [pc, #156]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc6:	4a26      	ldr	r2, [pc, #152]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009dc8:	f023 0310 	bic.w	r3, r3, #16
 8009dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009dce:	4b24      	ldr	r3, [pc, #144]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009dd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009dd2:	4b24      	ldr	r3, [pc, #144]	@ (8009e64 <RCCEx_PLL2_Config+0x160>)
 8009dd4:	4013      	ands	r3, r2
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	69d2      	ldr	r2, [r2, #28]
 8009dda:	00d2      	lsls	r2, r2, #3
 8009ddc:	4920      	ldr	r1, [pc, #128]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009dde:	4313      	orrs	r3, r2
 8009de0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009de2:	4b1f      	ldr	r3, [pc, #124]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de6:	4a1e      	ldr	r2, [pc, #120]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009de8:	f043 0310 	orr.w	r3, r3, #16
 8009dec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d106      	bne.n	8009e02 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009df4:	4b1a      	ldr	r3, [pc, #104]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df8:	4a19      	ldr	r2, [pc, #100]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009dfa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009dfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009e00:	e00f      	b.n	8009e22 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d106      	bne.n	8009e16 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009e08:	4b15      	ldr	r3, [pc, #84]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e0c:	4a14      	ldr	r2, [pc, #80]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009e0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009e14:	e005      	b.n	8009e22 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009e16:	4b12      	ldr	r3, [pc, #72]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e1a:	4a11      	ldr	r2, [pc, #68]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009e1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009e20:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009e22:	4b0f      	ldr	r3, [pc, #60]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a0e      	ldr	r2, [pc, #56]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009e28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009e2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e2e:	f7f9 f8e5 	bl	8002ffc <HAL_GetTick>
 8009e32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e34:	e008      	b.n	8009e48 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009e36:	f7f9 f8e1 	bl	8002ffc <HAL_GetTick>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d901      	bls.n	8009e48 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e006      	b.n	8009e56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e48:	4b05      	ldr	r3, [pc, #20]	@ (8009e60 <RCCEx_PLL2_Config+0x15c>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d0f0      	beq.n	8009e36 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	58024400 	.word	0x58024400
 8009e64:	ffff0007 	.word	0xffff0007

08009e68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e76:	4b53      	ldr	r3, [pc, #332]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e7a:	f003 0303 	and.w	r3, r3, #3
 8009e7e:	2b03      	cmp	r3, #3
 8009e80:	d101      	bne.n	8009e86 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e099      	b.n	8009fba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009e86:	4b4f      	ldr	r3, [pc, #316]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a4e      	ldr	r2, [pc, #312]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009e8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e92:	f7f9 f8b3 	bl	8002ffc <HAL_GetTick>
 8009e96:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e98:	e008      	b.n	8009eac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009e9a:	f7f9 f8af 	bl	8002ffc <HAL_GetTick>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d901      	bls.n	8009eac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	e086      	b.n	8009fba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009eac:	4b45      	ldr	r3, [pc, #276]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1f0      	bne.n	8009e9a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009eb8:	4b42      	ldr	r3, [pc, #264]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ebc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	051b      	lsls	r3, r3, #20
 8009ec6:	493f      	ldr	r1, [pc, #252]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	628b      	str	r3, [r1, #40]	@ 0x28
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	3b01      	subs	r3, #1
 8009edc:	025b      	lsls	r3, r3, #9
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	431a      	orrs	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	041b      	lsls	r3, r3, #16
 8009eea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009eee:	431a      	orrs	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	691b      	ldr	r3, [r3, #16]
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	061b      	lsls	r3, r3, #24
 8009ef8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009efc:	4931      	ldr	r1, [pc, #196]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009efe:	4313      	orrs	r3, r2
 8009f00:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f02:	4b30      	ldr	r3, [pc, #192]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	492d      	ldr	r1, [pc, #180]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009f10:	4313      	orrs	r3, r2
 8009f12:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009f14:	4b2b      	ldr	r3, [pc, #172]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f18:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	4928      	ldr	r1, [pc, #160]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009f22:	4313      	orrs	r3, r2
 8009f24:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009f26:	4b27      	ldr	r3, [pc, #156]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f2a:	4a26      	ldr	r2, [pc, #152]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009f32:	4b24      	ldr	r3, [pc, #144]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009f34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f36:	4b24      	ldr	r3, [pc, #144]	@ (8009fc8 <RCCEx_PLL3_Config+0x160>)
 8009f38:	4013      	ands	r3, r2
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	69d2      	ldr	r2, [r2, #28]
 8009f3e:	00d2      	lsls	r2, r2, #3
 8009f40:	4920      	ldr	r1, [pc, #128]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009f42:	4313      	orrs	r3, r2
 8009f44:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009f46:	4b1f      	ldr	r3, [pc, #124]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d106      	bne.n	8009f66 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009f58:	4b1a      	ldr	r3, [pc, #104]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f5c:	4a19      	ldr	r2, [pc, #100]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009f5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009f62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009f64:	e00f      	b.n	8009f86 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d106      	bne.n	8009f7a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009f6c:	4b15      	ldr	r3, [pc, #84]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f70:	4a14      	ldr	r2, [pc, #80]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009f72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009f76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009f78:	e005      	b.n	8009f86 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009f7a:	4b12      	ldr	r3, [pc, #72]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f7e:	4a11      	ldr	r2, [pc, #68]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009f80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009f84:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009f86:	4b0f      	ldr	r3, [pc, #60]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a0e      	ldr	r2, [pc, #56]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f92:	f7f9 f833 	bl	8002ffc <HAL_GetTick>
 8009f96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f98:	e008      	b.n	8009fac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009f9a:	f7f9 f82f 	bl	8002ffc <HAL_GetTick>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d901      	bls.n	8009fac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	e006      	b.n	8009fba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009fac:	4b05      	ldr	r3, [pc, #20]	@ (8009fc4 <RCCEx_PLL3_Config+0x15c>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d0f0      	beq.n	8009f9a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	58024400 	.word	0x58024400
 8009fc8:	ffff0007 	.word	0xffff0007

08009fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d101      	bne.n	8009fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e049      	b.n	800a072 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d106      	bne.n	8009ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f7f8 fda4 	bl	8002b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2202      	movs	r2, #2
 8009ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	3304      	adds	r3, #4
 800a008:	4619      	mov	r1, r3
 800a00a:	4610      	mov	r0, r2
 800a00c:	f000 fac6 	bl	800a59c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b082      	sub	sp, #8
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e049      	b.n	800a120 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a092:	b2db      	uxtb	r3, r3
 800a094:	2b00      	cmp	r3, #0
 800a096:	d106      	bne.n	800a0a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f841 	bl	800a128 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2202      	movs	r2, #2
 800a0aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	f000 fa6f 	bl	800a59c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d109      	bne.n	800a160 <HAL_TIM_PWM_Start+0x24>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b01      	cmp	r3, #1
 800a156:	bf14      	ite	ne
 800a158:	2301      	movne	r3, #1
 800a15a:	2300      	moveq	r3, #0
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	e03c      	b.n	800a1da <HAL_TIM_PWM_Start+0x9e>
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	2b04      	cmp	r3, #4
 800a164:	d109      	bne.n	800a17a <HAL_TIM_PWM_Start+0x3e>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	2b01      	cmp	r3, #1
 800a170:	bf14      	ite	ne
 800a172:	2301      	movne	r3, #1
 800a174:	2300      	moveq	r3, #0
 800a176:	b2db      	uxtb	r3, r3
 800a178:	e02f      	b.n	800a1da <HAL_TIM_PWM_Start+0x9e>
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	2b08      	cmp	r3, #8
 800a17e:	d109      	bne.n	800a194 <HAL_TIM_PWM_Start+0x58>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a186:	b2db      	uxtb	r3, r3
 800a188:	2b01      	cmp	r3, #1
 800a18a:	bf14      	ite	ne
 800a18c:	2301      	movne	r3, #1
 800a18e:	2300      	moveq	r3, #0
 800a190:	b2db      	uxtb	r3, r3
 800a192:	e022      	b.n	800a1da <HAL_TIM_PWM_Start+0x9e>
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	2b0c      	cmp	r3, #12
 800a198:	d109      	bne.n	800a1ae <HAL_TIM_PWM_Start+0x72>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	bf14      	ite	ne
 800a1a6:	2301      	movne	r3, #1
 800a1a8:	2300      	moveq	r3, #0
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	e015      	b.n	800a1da <HAL_TIM_PWM_Start+0x9e>
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	2b10      	cmp	r3, #16
 800a1b2:	d109      	bne.n	800a1c8 <HAL_TIM_PWM_Start+0x8c>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	bf14      	ite	ne
 800a1c0:	2301      	movne	r3, #1
 800a1c2:	2300      	moveq	r3, #0
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	e008      	b.n	800a1da <HAL_TIM_PWM_Start+0x9e>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	bf14      	ite	ne
 800a1d4:	2301      	movne	r3, #1
 800a1d6:	2300      	moveq	r3, #0
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e0ab      	b.n	800a33a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d104      	bne.n	800a1f2 <HAL_TIM_PWM_Start+0xb6>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1f0:	e023      	b.n	800a23a <HAL_TIM_PWM_Start+0xfe>
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	2b04      	cmp	r3, #4
 800a1f6:	d104      	bne.n	800a202 <HAL_TIM_PWM_Start+0xc6>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a200:	e01b      	b.n	800a23a <HAL_TIM_PWM_Start+0xfe>
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	2b08      	cmp	r3, #8
 800a206:	d104      	bne.n	800a212 <HAL_TIM_PWM_Start+0xd6>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2202      	movs	r2, #2
 800a20c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a210:	e013      	b.n	800a23a <HAL_TIM_PWM_Start+0xfe>
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	2b0c      	cmp	r3, #12
 800a216:	d104      	bne.n	800a222 <HAL_TIM_PWM_Start+0xe6>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2202      	movs	r2, #2
 800a21c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a220:	e00b      	b.n	800a23a <HAL_TIM_PWM_Start+0xfe>
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2b10      	cmp	r3, #16
 800a226:	d104      	bne.n	800a232 <HAL_TIM_PWM_Start+0xf6>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2202      	movs	r2, #2
 800a22c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a230:	e003      	b.n	800a23a <HAL_TIM_PWM_Start+0xfe>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2202      	movs	r2, #2
 800a236:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2201      	movs	r2, #1
 800a240:	6839      	ldr	r1, [r7, #0]
 800a242:	4618      	mov	r0, r3
 800a244:	f000 fd2c 	bl	800aca0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a3d      	ldr	r2, [pc, #244]	@ (800a344 <HAL_TIM_PWM_Start+0x208>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d013      	beq.n	800a27a <HAL_TIM_PWM_Start+0x13e>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a3c      	ldr	r2, [pc, #240]	@ (800a348 <HAL_TIM_PWM_Start+0x20c>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d00e      	beq.n	800a27a <HAL_TIM_PWM_Start+0x13e>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a3a      	ldr	r2, [pc, #232]	@ (800a34c <HAL_TIM_PWM_Start+0x210>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d009      	beq.n	800a27a <HAL_TIM_PWM_Start+0x13e>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a39      	ldr	r2, [pc, #228]	@ (800a350 <HAL_TIM_PWM_Start+0x214>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d004      	beq.n	800a27a <HAL_TIM_PWM_Start+0x13e>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a37      	ldr	r2, [pc, #220]	@ (800a354 <HAL_TIM_PWM_Start+0x218>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d101      	bne.n	800a27e <HAL_TIM_PWM_Start+0x142>
 800a27a:	2301      	movs	r3, #1
 800a27c:	e000      	b.n	800a280 <HAL_TIM_PWM_Start+0x144>
 800a27e:	2300      	movs	r3, #0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d007      	beq.n	800a294 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a292:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a2a      	ldr	r2, [pc, #168]	@ (800a344 <HAL_TIM_PWM_Start+0x208>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d02c      	beq.n	800a2f8 <HAL_TIM_PWM_Start+0x1bc>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2a6:	d027      	beq.n	800a2f8 <HAL_TIM_PWM_Start+0x1bc>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a2a      	ldr	r2, [pc, #168]	@ (800a358 <HAL_TIM_PWM_Start+0x21c>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d022      	beq.n	800a2f8 <HAL_TIM_PWM_Start+0x1bc>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a29      	ldr	r2, [pc, #164]	@ (800a35c <HAL_TIM_PWM_Start+0x220>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d01d      	beq.n	800a2f8 <HAL_TIM_PWM_Start+0x1bc>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a27      	ldr	r2, [pc, #156]	@ (800a360 <HAL_TIM_PWM_Start+0x224>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d018      	beq.n	800a2f8 <HAL_TIM_PWM_Start+0x1bc>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a1f      	ldr	r2, [pc, #124]	@ (800a348 <HAL_TIM_PWM_Start+0x20c>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d013      	beq.n	800a2f8 <HAL_TIM_PWM_Start+0x1bc>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a23      	ldr	r2, [pc, #140]	@ (800a364 <HAL_TIM_PWM_Start+0x228>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d00e      	beq.n	800a2f8 <HAL_TIM_PWM_Start+0x1bc>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a1b      	ldr	r2, [pc, #108]	@ (800a34c <HAL_TIM_PWM_Start+0x210>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d009      	beq.n	800a2f8 <HAL_TIM_PWM_Start+0x1bc>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a1f      	ldr	r2, [pc, #124]	@ (800a368 <HAL_TIM_PWM_Start+0x22c>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d004      	beq.n	800a2f8 <HAL_TIM_PWM_Start+0x1bc>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a1e      	ldr	r2, [pc, #120]	@ (800a36c <HAL_TIM_PWM_Start+0x230>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d115      	bne.n	800a324 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	689a      	ldr	r2, [r3, #8]
 800a2fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a370 <HAL_TIM_PWM_Start+0x234>)
 800a300:	4013      	ands	r3, r2
 800a302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2b06      	cmp	r3, #6
 800a308:	d015      	beq.n	800a336 <HAL_TIM_PWM_Start+0x1fa>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a310:	d011      	beq.n	800a336 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f042 0201 	orr.w	r2, r2, #1
 800a320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a322:	e008      	b.n	800a336 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f042 0201 	orr.w	r2, r2, #1
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	e000      	b.n	800a338 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a336:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	40010000 	.word	0x40010000
 800a348:	40010400 	.word	0x40010400
 800a34c:	40014000 	.word	0x40014000
 800a350:	40014400 	.word	0x40014400
 800a354:	40014800 	.word	0x40014800
 800a358:	40000400 	.word	0x40000400
 800a35c:	40000800 	.word	0x40000800
 800a360:	40000c00 	.word	0x40000c00
 800a364:	40001800 	.word	0x40001800
 800a368:	4000e000 	.word	0x4000e000
 800a36c:	4000e400 	.word	0x4000e400
 800a370:	00010007 	.word	0x00010007

0800a374 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a380:	2300      	movs	r3, #0
 800a382:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d101      	bne.n	800a392 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a38e:	2302      	movs	r3, #2
 800a390:	e0ff      	b.n	800a592 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2201      	movs	r2, #1
 800a396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b14      	cmp	r3, #20
 800a39e:	f200 80f0 	bhi.w	800a582 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a3a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a3a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a8:	0800a3fd 	.word	0x0800a3fd
 800a3ac:	0800a583 	.word	0x0800a583
 800a3b0:	0800a583 	.word	0x0800a583
 800a3b4:	0800a583 	.word	0x0800a583
 800a3b8:	0800a43d 	.word	0x0800a43d
 800a3bc:	0800a583 	.word	0x0800a583
 800a3c0:	0800a583 	.word	0x0800a583
 800a3c4:	0800a583 	.word	0x0800a583
 800a3c8:	0800a47f 	.word	0x0800a47f
 800a3cc:	0800a583 	.word	0x0800a583
 800a3d0:	0800a583 	.word	0x0800a583
 800a3d4:	0800a583 	.word	0x0800a583
 800a3d8:	0800a4bf 	.word	0x0800a4bf
 800a3dc:	0800a583 	.word	0x0800a583
 800a3e0:	0800a583 	.word	0x0800a583
 800a3e4:	0800a583 	.word	0x0800a583
 800a3e8:	0800a501 	.word	0x0800a501
 800a3ec:	0800a583 	.word	0x0800a583
 800a3f0:	0800a583 	.word	0x0800a583
 800a3f4:	0800a583 	.word	0x0800a583
 800a3f8:	0800a541 	.word	0x0800a541
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68b9      	ldr	r1, [r7, #8]
 800a402:	4618      	mov	r0, r3
 800a404:	f000 f976 	bl	800a6f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	699a      	ldr	r2, [r3, #24]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f042 0208 	orr.w	r2, r2, #8
 800a416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	699a      	ldr	r2, [r3, #24]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f022 0204 	bic.w	r2, r2, #4
 800a426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6999      	ldr	r1, [r3, #24]
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	691a      	ldr	r2, [r3, #16]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	430a      	orrs	r2, r1
 800a438:	619a      	str	r2, [r3, #24]
      break;
 800a43a:	e0a5      	b.n	800a588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	68b9      	ldr	r1, [r7, #8]
 800a442:	4618      	mov	r0, r3
 800a444:	f000 f9e6 	bl	800a814 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	699a      	ldr	r2, [r3, #24]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	699a      	ldr	r2, [r3, #24]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6999      	ldr	r1, [r3, #24]
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	021a      	lsls	r2, r3, #8
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	430a      	orrs	r2, r1
 800a47a:	619a      	str	r2, [r3, #24]
      break;
 800a47c:	e084      	b.n	800a588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68b9      	ldr	r1, [r7, #8]
 800a484:	4618      	mov	r0, r3
 800a486:	f000 fa4f 	bl	800a928 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	69da      	ldr	r2, [r3, #28]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f042 0208 	orr.w	r2, r2, #8
 800a498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	69da      	ldr	r2, [r3, #28]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f022 0204 	bic.w	r2, r2, #4
 800a4a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	69d9      	ldr	r1, [r3, #28]
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	691a      	ldr	r2, [r3, #16]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	430a      	orrs	r2, r1
 800a4ba:	61da      	str	r2, [r3, #28]
      break;
 800a4bc:	e064      	b.n	800a588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68b9      	ldr	r1, [r7, #8]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f000 fab7 	bl	800aa38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	69da      	ldr	r2, [r3, #28]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a4d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	69da      	ldr	r2, [r3, #28]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a4e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	69d9      	ldr	r1, [r3, #28]
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	021a      	lsls	r2, r3, #8
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	430a      	orrs	r2, r1
 800a4fc:	61da      	str	r2, [r3, #28]
      break;
 800a4fe:	e043      	b.n	800a588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68b9      	ldr	r1, [r7, #8]
 800a506:	4618      	mov	r0, r3
 800a508:	f000 fb00 	bl	800ab0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f042 0208 	orr.w	r2, r2, #8
 800a51a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f022 0204 	bic.w	r2, r2, #4
 800a52a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	691a      	ldr	r2, [r3, #16]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	430a      	orrs	r2, r1
 800a53c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a53e:	e023      	b.n	800a588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68b9      	ldr	r1, [r7, #8]
 800a546:	4618      	mov	r0, r3
 800a548:	f000 fb44 	bl	800abd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a55a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a56a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	691b      	ldr	r3, [r3, #16]
 800a576:	021a      	lsls	r2, r3, #8
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	430a      	orrs	r2, r1
 800a57e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a580:	e002      	b.n	800a588 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	75fb      	strb	r3, [r7, #23]
      break;
 800a586:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a590:	7dfb      	ldrb	r3, [r7, #23]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3718      	adds	r7, #24
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop

0800a59c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a47      	ldr	r2, [pc, #284]	@ (800a6cc <TIM_Base_SetConfig+0x130>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d013      	beq.n	800a5dc <TIM_Base_SetConfig+0x40>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5ba:	d00f      	beq.n	800a5dc <TIM_Base_SetConfig+0x40>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a44      	ldr	r2, [pc, #272]	@ (800a6d0 <TIM_Base_SetConfig+0x134>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d00b      	beq.n	800a5dc <TIM_Base_SetConfig+0x40>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a43      	ldr	r2, [pc, #268]	@ (800a6d4 <TIM_Base_SetConfig+0x138>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d007      	beq.n	800a5dc <TIM_Base_SetConfig+0x40>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a42      	ldr	r2, [pc, #264]	@ (800a6d8 <TIM_Base_SetConfig+0x13c>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d003      	beq.n	800a5dc <TIM_Base_SetConfig+0x40>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a41      	ldr	r2, [pc, #260]	@ (800a6dc <TIM_Base_SetConfig+0x140>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d108      	bne.n	800a5ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4a36      	ldr	r2, [pc, #216]	@ (800a6cc <TIM_Base_SetConfig+0x130>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d027      	beq.n	800a646 <TIM_Base_SetConfig+0xaa>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5fc:	d023      	beq.n	800a646 <TIM_Base_SetConfig+0xaa>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	4a33      	ldr	r2, [pc, #204]	@ (800a6d0 <TIM_Base_SetConfig+0x134>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d01f      	beq.n	800a646 <TIM_Base_SetConfig+0xaa>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4a32      	ldr	r2, [pc, #200]	@ (800a6d4 <TIM_Base_SetConfig+0x138>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d01b      	beq.n	800a646 <TIM_Base_SetConfig+0xaa>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a31      	ldr	r2, [pc, #196]	@ (800a6d8 <TIM_Base_SetConfig+0x13c>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d017      	beq.n	800a646 <TIM_Base_SetConfig+0xaa>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a30      	ldr	r2, [pc, #192]	@ (800a6dc <TIM_Base_SetConfig+0x140>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d013      	beq.n	800a646 <TIM_Base_SetConfig+0xaa>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a2f      	ldr	r2, [pc, #188]	@ (800a6e0 <TIM_Base_SetConfig+0x144>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d00f      	beq.n	800a646 <TIM_Base_SetConfig+0xaa>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a2e      	ldr	r2, [pc, #184]	@ (800a6e4 <TIM_Base_SetConfig+0x148>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d00b      	beq.n	800a646 <TIM_Base_SetConfig+0xaa>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a2d      	ldr	r2, [pc, #180]	@ (800a6e8 <TIM_Base_SetConfig+0x14c>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d007      	beq.n	800a646 <TIM_Base_SetConfig+0xaa>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a2c      	ldr	r2, [pc, #176]	@ (800a6ec <TIM_Base_SetConfig+0x150>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d003      	beq.n	800a646 <TIM_Base_SetConfig+0xaa>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a2b      	ldr	r2, [pc, #172]	@ (800a6f0 <TIM_Base_SetConfig+0x154>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d108      	bne.n	800a658 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a64c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	68fa      	ldr	r2, [r7, #12]
 800a654:	4313      	orrs	r3, r2
 800a656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	695b      	ldr	r3, [r3, #20]
 800a662:	4313      	orrs	r3, r2
 800a664:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	689a      	ldr	r2, [r3, #8]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a14      	ldr	r2, [pc, #80]	@ (800a6cc <TIM_Base_SetConfig+0x130>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d00f      	beq.n	800a69e <TIM_Base_SetConfig+0x102>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4a16      	ldr	r2, [pc, #88]	@ (800a6dc <TIM_Base_SetConfig+0x140>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d00b      	beq.n	800a69e <TIM_Base_SetConfig+0x102>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a15      	ldr	r2, [pc, #84]	@ (800a6e0 <TIM_Base_SetConfig+0x144>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d007      	beq.n	800a69e <TIM_Base_SetConfig+0x102>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a14      	ldr	r2, [pc, #80]	@ (800a6e4 <TIM_Base_SetConfig+0x148>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d003      	beq.n	800a69e <TIM_Base_SetConfig+0x102>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4a13      	ldr	r2, [pc, #76]	@ (800a6e8 <TIM_Base_SetConfig+0x14c>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d103      	bne.n	800a6a6 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	691a      	ldr	r2, [r3, #16]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f043 0204 	orr.w	r2, r3, #4
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	601a      	str	r2, [r3, #0]
}
 800a6be:	bf00      	nop
 800a6c0:	3714      	adds	r7, #20
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop
 800a6cc:	40010000 	.word	0x40010000
 800a6d0:	40000400 	.word	0x40000400
 800a6d4:	40000800 	.word	0x40000800
 800a6d8:	40000c00 	.word	0x40000c00
 800a6dc:	40010400 	.word	0x40010400
 800a6e0:	40014000 	.word	0x40014000
 800a6e4:	40014400 	.word	0x40014400
 800a6e8:	40014800 	.word	0x40014800
 800a6ec:	4000e000 	.word	0x4000e000
 800a6f0:	4000e400 	.word	0x4000e400

0800a6f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b087      	sub	sp, #28
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a1b      	ldr	r3, [r3, #32]
 800a702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a1b      	ldr	r3, [r3, #32]
 800a708:	f023 0201 	bic.w	r2, r3, #1
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	699b      	ldr	r3, [r3, #24]
 800a71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	4b37      	ldr	r3, [pc, #220]	@ (800a7fc <TIM_OC1_SetConfig+0x108>)
 800a720:	4013      	ands	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f023 0303 	bic.w	r3, r3, #3
 800a72a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	4313      	orrs	r3, r2
 800a734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	f023 0302 	bic.w	r3, r3, #2
 800a73c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	697a      	ldr	r2, [r7, #20]
 800a744:	4313      	orrs	r3, r2
 800a746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a2d      	ldr	r2, [pc, #180]	@ (800a800 <TIM_OC1_SetConfig+0x10c>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d00f      	beq.n	800a770 <TIM_OC1_SetConfig+0x7c>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a2c      	ldr	r2, [pc, #176]	@ (800a804 <TIM_OC1_SetConfig+0x110>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d00b      	beq.n	800a770 <TIM_OC1_SetConfig+0x7c>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a2b      	ldr	r2, [pc, #172]	@ (800a808 <TIM_OC1_SetConfig+0x114>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d007      	beq.n	800a770 <TIM_OC1_SetConfig+0x7c>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a2a      	ldr	r2, [pc, #168]	@ (800a80c <TIM_OC1_SetConfig+0x118>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d003      	beq.n	800a770 <TIM_OC1_SetConfig+0x7c>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a29      	ldr	r2, [pc, #164]	@ (800a810 <TIM_OC1_SetConfig+0x11c>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d10c      	bne.n	800a78a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	f023 0308 	bic.w	r3, r3, #8
 800a776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	4313      	orrs	r3, r2
 800a780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	f023 0304 	bic.w	r3, r3, #4
 800a788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a1c      	ldr	r2, [pc, #112]	@ (800a800 <TIM_OC1_SetConfig+0x10c>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d00f      	beq.n	800a7b2 <TIM_OC1_SetConfig+0xbe>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a1b      	ldr	r2, [pc, #108]	@ (800a804 <TIM_OC1_SetConfig+0x110>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d00b      	beq.n	800a7b2 <TIM_OC1_SetConfig+0xbe>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a1a      	ldr	r2, [pc, #104]	@ (800a808 <TIM_OC1_SetConfig+0x114>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d007      	beq.n	800a7b2 <TIM_OC1_SetConfig+0xbe>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a19      	ldr	r2, [pc, #100]	@ (800a80c <TIM_OC1_SetConfig+0x118>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d003      	beq.n	800a7b2 <TIM_OC1_SetConfig+0xbe>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a18      	ldr	r2, [pc, #96]	@ (800a810 <TIM_OC1_SetConfig+0x11c>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d111      	bne.n	800a7d6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a7c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	693a      	ldr	r2, [r7, #16]
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	693a      	ldr	r2, [r7, #16]
 800a7da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	68fa      	ldr	r2, [r7, #12]
 800a7e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	685a      	ldr	r2, [r3, #4]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	697a      	ldr	r2, [r7, #20]
 800a7ee:	621a      	str	r2, [r3, #32]
}
 800a7f0:	bf00      	nop
 800a7f2:	371c      	adds	r7, #28
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr
 800a7fc:	fffeff8f 	.word	0xfffeff8f
 800a800:	40010000 	.word	0x40010000
 800a804:	40010400 	.word	0x40010400
 800a808:	40014000 	.word	0x40014000
 800a80c:	40014400 	.word	0x40014400
 800a810:	40014800 	.word	0x40014800

0800a814 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a814:	b480      	push	{r7}
 800a816:	b087      	sub	sp, #28
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a1b      	ldr	r3, [r3, #32]
 800a822:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a1b      	ldr	r3, [r3, #32]
 800a828:	f023 0210 	bic.w	r2, r3, #16
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	4b34      	ldr	r3, [pc, #208]	@ (800a910 <TIM_OC2_SetConfig+0xfc>)
 800a840:	4013      	ands	r3, r2
 800a842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a84a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	021b      	lsls	r3, r3, #8
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	4313      	orrs	r3, r2
 800a856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	f023 0320 	bic.w	r3, r3, #32
 800a85e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	011b      	lsls	r3, r3, #4
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	4313      	orrs	r3, r2
 800a86a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a29      	ldr	r2, [pc, #164]	@ (800a914 <TIM_OC2_SetConfig+0x100>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d003      	beq.n	800a87c <TIM_OC2_SetConfig+0x68>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4a28      	ldr	r2, [pc, #160]	@ (800a918 <TIM_OC2_SetConfig+0x104>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d10d      	bne.n	800a898 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	011b      	lsls	r3, r3, #4
 800a88a:	697a      	ldr	r2, [r7, #20]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a896:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a1e      	ldr	r2, [pc, #120]	@ (800a914 <TIM_OC2_SetConfig+0x100>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d00f      	beq.n	800a8c0 <TIM_OC2_SetConfig+0xac>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4a1d      	ldr	r2, [pc, #116]	@ (800a918 <TIM_OC2_SetConfig+0x104>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d00b      	beq.n	800a8c0 <TIM_OC2_SetConfig+0xac>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a1c      	ldr	r2, [pc, #112]	@ (800a91c <TIM_OC2_SetConfig+0x108>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d007      	beq.n	800a8c0 <TIM_OC2_SetConfig+0xac>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	4a1b      	ldr	r2, [pc, #108]	@ (800a920 <TIM_OC2_SetConfig+0x10c>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d003      	beq.n	800a8c0 <TIM_OC2_SetConfig+0xac>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a1a      	ldr	r2, [pc, #104]	@ (800a924 <TIM_OC2_SetConfig+0x110>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d113      	bne.n	800a8e8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a8c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a8ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	695b      	ldr	r3, [r3, #20]
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	693a      	ldr	r2, [r7, #16]
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	699b      	ldr	r3, [r3, #24]
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	693a      	ldr	r2, [r7, #16]
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	693a      	ldr	r2, [r7, #16]
 800a8ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	685a      	ldr	r2, [r3, #4]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	697a      	ldr	r2, [r7, #20]
 800a900:	621a      	str	r2, [r3, #32]
}
 800a902:	bf00      	nop
 800a904:	371c      	adds	r7, #28
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop
 800a910:	feff8fff 	.word	0xfeff8fff
 800a914:	40010000 	.word	0x40010000
 800a918:	40010400 	.word	0x40010400
 800a91c:	40014000 	.word	0x40014000
 800a920:	40014400 	.word	0x40014400
 800a924:	40014800 	.word	0x40014800

0800a928 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a928:	b480      	push	{r7}
 800a92a:	b087      	sub	sp, #28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a1b      	ldr	r3, [r3, #32]
 800a93c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	4b33      	ldr	r3, [pc, #204]	@ (800aa20 <TIM_OC3_SetConfig+0xf8>)
 800a954:	4013      	ands	r3, r2
 800a956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f023 0303 	bic.w	r3, r3, #3
 800a95e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	4313      	orrs	r3, r2
 800a968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	021b      	lsls	r3, r3, #8
 800a978:	697a      	ldr	r2, [r7, #20]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4a28      	ldr	r2, [pc, #160]	@ (800aa24 <TIM_OC3_SetConfig+0xfc>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d003      	beq.n	800a98e <TIM_OC3_SetConfig+0x66>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	4a27      	ldr	r2, [pc, #156]	@ (800aa28 <TIM_OC3_SetConfig+0x100>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d10d      	bne.n	800a9aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	021b      	lsls	r3, r3, #8
 800a99c:	697a      	ldr	r2, [r7, #20]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a9a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4a1d      	ldr	r2, [pc, #116]	@ (800aa24 <TIM_OC3_SetConfig+0xfc>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d00f      	beq.n	800a9d2 <TIM_OC3_SetConfig+0xaa>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4a1c      	ldr	r2, [pc, #112]	@ (800aa28 <TIM_OC3_SetConfig+0x100>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d00b      	beq.n	800a9d2 <TIM_OC3_SetConfig+0xaa>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4a1b      	ldr	r2, [pc, #108]	@ (800aa2c <TIM_OC3_SetConfig+0x104>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d007      	beq.n	800a9d2 <TIM_OC3_SetConfig+0xaa>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4a1a      	ldr	r2, [pc, #104]	@ (800aa30 <TIM_OC3_SetConfig+0x108>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d003      	beq.n	800a9d2 <TIM_OC3_SetConfig+0xaa>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a19      	ldr	r2, [pc, #100]	@ (800aa34 <TIM_OC3_SetConfig+0x10c>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d113      	bne.n	800a9fa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a9e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	695b      	ldr	r3, [r3, #20]
 800a9e6:	011b      	lsls	r3, r3, #4
 800a9e8:	693a      	ldr	r2, [r7, #16]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	699b      	ldr	r3, [r3, #24]
 800a9f2:	011b      	lsls	r3, r3, #4
 800a9f4:	693a      	ldr	r2, [r7, #16]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	693a      	ldr	r2, [r7, #16]
 800a9fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	685a      	ldr	r2, [r3, #4]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	621a      	str	r2, [r3, #32]
}
 800aa14:	bf00      	nop
 800aa16:	371c      	adds	r7, #28
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr
 800aa20:	fffeff8f 	.word	0xfffeff8f
 800aa24:	40010000 	.word	0x40010000
 800aa28:	40010400 	.word	0x40010400
 800aa2c:	40014000 	.word	0x40014000
 800aa30:	40014400 	.word	0x40014400
 800aa34:	40014800 	.word	0x40014800

0800aa38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b087      	sub	sp, #28
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a1b      	ldr	r3, [r3, #32]
 800aa46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a1b      	ldr	r3, [r3, #32]
 800aa4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	69db      	ldr	r3, [r3, #28]
 800aa5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	4b24      	ldr	r3, [pc, #144]	@ (800aaf4 <TIM_OC4_SetConfig+0xbc>)
 800aa64:	4013      	ands	r3, r2
 800aa66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	021b      	lsls	r3, r3, #8
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	031b      	lsls	r3, r3, #12
 800aa8a:	693a      	ldr	r2, [r7, #16]
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a19      	ldr	r2, [pc, #100]	@ (800aaf8 <TIM_OC4_SetConfig+0xc0>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d00f      	beq.n	800aab8 <TIM_OC4_SetConfig+0x80>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a18      	ldr	r2, [pc, #96]	@ (800aafc <TIM_OC4_SetConfig+0xc4>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d00b      	beq.n	800aab8 <TIM_OC4_SetConfig+0x80>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a17      	ldr	r2, [pc, #92]	@ (800ab00 <TIM_OC4_SetConfig+0xc8>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d007      	beq.n	800aab8 <TIM_OC4_SetConfig+0x80>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a16      	ldr	r2, [pc, #88]	@ (800ab04 <TIM_OC4_SetConfig+0xcc>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d003      	beq.n	800aab8 <TIM_OC4_SetConfig+0x80>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a15      	ldr	r2, [pc, #84]	@ (800ab08 <TIM_OC4_SetConfig+0xd0>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d109      	bne.n	800aacc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aabe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	695b      	ldr	r3, [r3, #20]
 800aac4:	019b      	lsls	r3, r3, #6
 800aac6:	697a      	ldr	r2, [r7, #20]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	697a      	ldr	r2, [r7, #20]
 800aad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	685a      	ldr	r2, [r3, #4]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	693a      	ldr	r2, [r7, #16]
 800aae4:	621a      	str	r2, [r3, #32]
}
 800aae6:	bf00      	nop
 800aae8:	371c      	adds	r7, #28
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	feff8fff 	.word	0xfeff8fff
 800aaf8:	40010000 	.word	0x40010000
 800aafc:	40010400 	.word	0x40010400
 800ab00:	40014000 	.word	0x40014000
 800ab04:	40014400 	.word	0x40014400
 800ab08:	40014800 	.word	0x40014800

0800ab0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b087      	sub	sp, #28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a1b      	ldr	r3, [r3, #32]
 800ab1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a1b      	ldr	r3, [r3, #32]
 800ab20:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	4b21      	ldr	r3, [pc, #132]	@ (800abbc <TIM_OC5_SetConfig+0xb0>)
 800ab38:	4013      	ands	r3, r2
 800ab3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	4313      	orrs	r3, r2
 800ab44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ab4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	041b      	lsls	r3, r3, #16
 800ab54:	693a      	ldr	r2, [r7, #16]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a18      	ldr	r2, [pc, #96]	@ (800abc0 <TIM_OC5_SetConfig+0xb4>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d00f      	beq.n	800ab82 <TIM_OC5_SetConfig+0x76>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a17      	ldr	r2, [pc, #92]	@ (800abc4 <TIM_OC5_SetConfig+0xb8>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d00b      	beq.n	800ab82 <TIM_OC5_SetConfig+0x76>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a16      	ldr	r2, [pc, #88]	@ (800abc8 <TIM_OC5_SetConfig+0xbc>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d007      	beq.n	800ab82 <TIM_OC5_SetConfig+0x76>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a15      	ldr	r2, [pc, #84]	@ (800abcc <TIM_OC5_SetConfig+0xc0>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d003      	beq.n	800ab82 <TIM_OC5_SetConfig+0x76>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a14      	ldr	r2, [pc, #80]	@ (800abd0 <TIM_OC5_SetConfig+0xc4>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d109      	bne.n	800ab96 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	695b      	ldr	r3, [r3, #20]
 800ab8e:	021b      	lsls	r3, r3, #8
 800ab90:	697a      	ldr	r2, [r7, #20]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	697a      	ldr	r2, [r7, #20]
 800ab9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	685a      	ldr	r2, [r3, #4]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	693a      	ldr	r2, [r7, #16]
 800abae:	621a      	str	r2, [r3, #32]
}
 800abb0:	bf00      	nop
 800abb2:	371c      	adds	r7, #28
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	fffeff8f 	.word	0xfffeff8f
 800abc0:	40010000 	.word	0x40010000
 800abc4:	40010400 	.word	0x40010400
 800abc8:	40014000 	.word	0x40014000
 800abcc:	40014400 	.word	0x40014400
 800abd0:	40014800 	.word	0x40014800

0800abd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b087      	sub	sp, #28
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6a1b      	ldr	r3, [r3, #32]
 800abe2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6a1b      	ldr	r3, [r3, #32]
 800abe8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	4b22      	ldr	r3, [pc, #136]	@ (800ac88 <TIM_OC6_SetConfig+0xb4>)
 800ac00:	4013      	ands	r3, r2
 800ac02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	021b      	lsls	r3, r3, #8
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ac16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	051b      	lsls	r3, r3, #20
 800ac1e:	693a      	ldr	r2, [r7, #16]
 800ac20:	4313      	orrs	r3, r2
 800ac22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a19      	ldr	r2, [pc, #100]	@ (800ac8c <TIM_OC6_SetConfig+0xb8>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d00f      	beq.n	800ac4c <TIM_OC6_SetConfig+0x78>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4a18      	ldr	r2, [pc, #96]	@ (800ac90 <TIM_OC6_SetConfig+0xbc>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d00b      	beq.n	800ac4c <TIM_OC6_SetConfig+0x78>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4a17      	ldr	r2, [pc, #92]	@ (800ac94 <TIM_OC6_SetConfig+0xc0>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d007      	beq.n	800ac4c <TIM_OC6_SetConfig+0x78>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a16      	ldr	r2, [pc, #88]	@ (800ac98 <TIM_OC6_SetConfig+0xc4>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d003      	beq.n	800ac4c <TIM_OC6_SetConfig+0x78>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a15      	ldr	r2, [pc, #84]	@ (800ac9c <TIM_OC6_SetConfig+0xc8>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d109      	bne.n	800ac60 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ac52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	029b      	lsls	r3, r3, #10
 800ac5a:	697a      	ldr	r2, [r7, #20]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	697a      	ldr	r2, [r7, #20]
 800ac64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	685a      	ldr	r2, [r3, #4]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	693a      	ldr	r2, [r7, #16]
 800ac78:	621a      	str	r2, [r3, #32]
}
 800ac7a:	bf00      	nop
 800ac7c:	371c      	adds	r7, #28
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	feff8fff 	.word	0xfeff8fff
 800ac8c:	40010000 	.word	0x40010000
 800ac90:	40010400 	.word	0x40010400
 800ac94:	40014000 	.word	0x40014000
 800ac98:	40014400 	.word	0x40014400
 800ac9c:	40014800 	.word	0x40014800

0800aca0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b087      	sub	sp, #28
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	f003 031f 	and.w	r3, r3, #31
 800acb2:	2201      	movs	r2, #1
 800acb4:	fa02 f303 	lsl.w	r3, r2, r3
 800acb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6a1a      	ldr	r2, [r3, #32]
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	43db      	mvns	r3, r3
 800acc2:	401a      	ands	r2, r3
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6a1a      	ldr	r2, [r3, #32]
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	f003 031f 	and.w	r3, r3, #31
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	fa01 f303 	lsl.w	r3, r1, r3
 800acd8:	431a      	orrs	r2, r3
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	621a      	str	r2, [r3, #32]
}
 800acde:	bf00      	nop
 800ace0:	371c      	adds	r7, #28
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
	...

0800acec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800acf6:	2300      	movs	r3, #0
 800acf8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d101      	bne.n	800ad08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ad04:	2302      	movs	r3, #2
 800ad06:	e073      	b.n	800adf0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4313      	orrs	r3, r2
 800ad46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	691b      	ldr	r3, [r3, #16]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	695b      	ldr	r3, [r3, #20]
 800ad60:	4313      	orrs	r3, r2
 800ad62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	699b      	ldr	r3, [r3, #24]
 800ad7c:	041b      	lsls	r3, r3, #16
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	69db      	ldr	r3, [r3, #28]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a19      	ldr	r2, [pc, #100]	@ (800adfc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d004      	beq.n	800ada4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a18      	ldr	r2, [pc, #96]	@ (800ae00 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d11c      	bne.n	800adde <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adae:	051b      	lsls	r3, r3, #20
 800adb0:	4313      	orrs	r3, r2
 800adb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adcc:	4313      	orrs	r3, r2
 800adce:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adda:	4313      	orrs	r3, r2
 800addc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3714      	adds	r7, #20
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr
 800adfc:	40010000 	.word	0x40010000
 800ae00:	40010400 	.word	0x40010400

0800ae04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d101      	bne.n	800ae16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e042      	b.n	800ae9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d106      	bne.n	800ae2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7f7 fee7 	bl	8002bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2224      	movs	r2, #36	@ 0x24
 800ae32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f022 0201 	bic.w	r2, r2, #1
 800ae44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d002      	beq.n	800ae54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 ff38 	bl	800bcc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f8c9 	bl	800afec <UART_SetConfig>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d101      	bne.n	800ae64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ae60:	2301      	movs	r3, #1
 800ae62:	e01b      	b.n	800ae9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	685a      	ldr	r2, [r3, #4]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ae72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	689a      	ldr	r2, [r3, #8]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ae82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f042 0201 	orr.w	r2, r2, #1
 800ae92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 ffb7 	bl	800be08 <UART_CheckIdleState>
 800ae9a:	4603      	mov	r3, r0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b08a      	sub	sp, #40	@ 0x28
 800aea8:	af02      	add	r7, sp, #8
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	603b      	str	r3, [r7, #0]
 800aeb0:	4613      	mov	r3, r2
 800aeb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aeba:	2b20      	cmp	r3, #32
 800aebc:	d17b      	bne.n	800afb6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d002      	beq.n	800aeca <HAL_UART_Transmit+0x26>
 800aec4:	88fb      	ldrh	r3, [r7, #6]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d101      	bne.n	800aece <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800aeca:	2301      	movs	r3, #1
 800aecc:	e074      	b.n	800afb8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2221      	movs	r2, #33	@ 0x21
 800aeda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aede:	f7f8 f88d 	bl	8002ffc <HAL_GetTick>
 800aee2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	88fa      	ldrh	r2, [r7, #6]
 800aee8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	88fa      	ldrh	r2, [r7, #6]
 800aef0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aefc:	d108      	bne.n	800af10 <HAL_UART_Transmit+0x6c>
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d104      	bne.n	800af10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800af06:	2300      	movs	r3, #0
 800af08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	61bb      	str	r3, [r7, #24]
 800af0e:	e003      	b.n	800af18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af14:	2300      	movs	r3, #0
 800af16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800af18:	e030      	b.n	800af7c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	2200      	movs	r2, #0
 800af22:	2180      	movs	r1, #128	@ 0x80
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f001 f819 	bl	800bf5c <UART_WaitOnFlagUntilTimeout>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d005      	beq.n	800af3c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2220      	movs	r2, #32
 800af34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800af38:	2303      	movs	r3, #3
 800af3a:	e03d      	b.n	800afb8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10b      	bne.n	800af5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	881b      	ldrh	r3, [r3, #0]
 800af46:	461a      	mov	r2, r3
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af50:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	3302      	adds	r3, #2
 800af56:	61bb      	str	r3, [r7, #24]
 800af58:	e007      	b.n	800af6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	781a      	ldrb	r2, [r3, #0]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	3301      	adds	r3, #1
 800af68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800af70:	b29b      	uxth	r3, r3
 800af72:	3b01      	subs	r3, #1
 800af74:	b29a      	uxth	r2, r3
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800af82:	b29b      	uxth	r3, r3
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1c8      	bne.n	800af1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	9300      	str	r3, [sp, #0]
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	2200      	movs	r2, #0
 800af90:	2140      	movs	r1, #64	@ 0x40
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f000 ffe2 	bl	800bf5c <UART_WaitOnFlagUntilTimeout>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d005      	beq.n	800afaa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2220      	movs	r2, #32
 800afa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800afa6:	2303      	movs	r3, #3
 800afa8:	e006      	b.n	800afb8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2220      	movs	r2, #32
 800afae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	e000      	b.n	800afb8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800afb6:	2302      	movs	r3, #2
  }
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3720      	adds	r7, #32
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afce:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afd6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	4313      	orrs	r3, r2
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3714      	adds	r7, #20
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr
	...

0800afec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aff0:	b092      	sub	sp, #72	@ 0x48
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aff6:	2300      	movs	r3, #0
 800aff8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	689a      	ldr	r2, [r3, #8]
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	431a      	orrs	r2, r3
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	695b      	ldr	r3, [r3, #20]
 800b00a:	431a      	orrs	r2, r3
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	69db      	ldr	r3, [r3, #28]
 800b010:	4313      	orrs	r3, r2
 800b012:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	4bbe      	ldr	r3, [pc, #760]	@ (800b314 <UART_SetConfig+0x328>)
 800b01c:	4013      	ands	r3, r2
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	6812      	ldr	r2, [r2, #0]
 800b022:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b024:	430b      	orrs	r3, r1
 800b026:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	68da      	ldr	r2, [r3, #12]
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	430a      	orrs	r2, r1
 800b03c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	699b      	ldr	r3, [r3, #24]
 800b042:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4ab3      	ldr	r2, [pc, #716]	@ (800b318 <UART_SetConfig+0x32c>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d004      	beq.n	800b058 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b054:	4313      	orrs	r3, r2
 800b056:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	689a      	ldr	r2, [r3, #8]
 800b05e:	4baf      	ldr	r3, [pc, #700]	@ (800b31c <UART_SetConfig+0x330>)
 800b060:	4013      	ands	r3, r2
 800b062:	697a      	ldr	r2, [r7, #20]
 800b064:	6812      	ldr	r2, [r2, #0]
 800b066:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b068:	430b      	orrs	r3, r1
 800b06a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b072:	f023 010f 	bic.w	r1, r3, #15
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	430a      	orrs	r2, r1
 800b080:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4aa6      	ldr	r2, [pc, #664]	@ (800b320 <UART_SetConfig+0x334>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d177      	bne.n	800b17c <UART_SetConfig+0x190>
 800b08c:	4ba5      	ldr	r3, [pc, #660]	@ (800b324 <UART_SetConfig+0x338>)
 800b08e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b090:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b094:	2b28      	cmp	r3, #40	@ 0x28
 800b096:	d86d      	bhi.n	800b174 <UART_SetConfig+0x188>
 800b098:	a201      	add	r2, pc, #4	@ (adr r2, 800b0a0 <UART_SetConfig+0xb4>)
 800b09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b09e:	bf00      	nop
 800b0a0:	0800b145 	.word	0x0800b145
 800b0a4:	0800b175 	.word	0x0800b175
 800b0a8:	0800b175 	.word	0x0800b175
 800b0ac:	0800b175 	.word	0x0800b175
 800b0b0:	0800b175 	.word	0x0800b175
 800b0b4:	0800b175 	.word	0x0800b175
 800b0b8:	0800b175 	.word	0x0800b175
 800b0bc:	0800b175 	.word	0x0800b175
 800b0c0:	0800b14d 	.word	0x0800b14d
 800b0c4:	0800b175 	.word	0x0800b175
 800b0c8:	0800b175 	.word	0x0800b175
 800b0cc:	0800b175 	.word	0x0800b175
 800b0d0:	0800b175 	.word	0x0800b175
 800b0d4:	0800b175 	.word	0x0800b175
 800b0d8:	0800b175 	.word	0x0800b175
 800b0dc:	0800b175 	.word	0x0800b175
 800b0e0:	0800b155 	.word	0x0800b155
 800b0e4:	0800b175 	.word	0x0800b175
 800b0e8:	0800b175 	.word	0x0800b175
 800b0ec:	0800b175 	.word	0x0800b175
 800b0f0:	0800b175 	.word	0x0800b175
 800b0f4:	0800b175 	.word	0x0800b175
 800b0f8:	0800b175 	.word	0x0800b175
 800b0fc:	0800b175 	.word	0x0800b175
 800b100:	0800b15d 	.word	0x0800b15d
 800b104:	0800b175 	.word	0x0800b175
 800b108:	0800b175 	.word	0x0800b175
 800b10c:	0800b175 	.word	0x0800b175
 800b110:	0800b175 	.word	0x0800b175
 800b114:	0800b175 	.word	0x0800b175
 800b118:	0800b175 	.word	0x0800b175
 800b11c:	0800b175 	.word	0x0800b175
 800b120:	0800b165 	.word	0x0800b165
 800b124:	0800b175 	.word	0x0800b175
 800b128:	0800b175 	.word	0x0800b175
 800b12c:	0800b175 	.word	0x0800b175
 800b130:	0800b175 	.word	0x0800b175
 800b134:	0800b175 	.word	0x0800b175
 800b138:	0800b175 	.word	0x0800b175
 800b13c:	0800b175 	.word	0x0800b175
 800b140:	0800b16d 	.word	0x0800b16d
 800b144:	2301      	movs	r3, #1
 800b146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b14a:	e326      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b14c:	2304      	movs	r3, #4
 800b14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b152:	e322      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b154:	2308      	movs	r3, #8
 800b156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b15a:	e31e      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b15c:	2310      	movs	r3, #16
 800b15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b162:	e31a      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b164:	2320      	movs	r3, #32
 800b166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b16a:	e316      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b16c:	2340      	movs	r3, #64	@ 0x40
 800b16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b172:	e312      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b174:	2380      	movs	r3, #128	@ 0x80
 800b176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b17a:	e30e      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a69      	ldr	r2, [pc, #420]	@ (800b328 <UART_SetConfig+0x33c>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d130      	bne.n	800b1e8 <UART_SetConfig+0x1fc>
 800b186:	4b67      	ldr	r3, [pc, #412]	@ (800b324 <UART_SetConfig+0x338>)
 800b188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b18a:	f003 0307 	and.w	r3, r3, #7
 800b18e:	2b05      	cmp	r3, #5
 800b190:	d826      	bhi.n	800b1e0 <UART_SetConfig+0x1f4>
 800b192:	a201      	add	r2, pc, #4	@ (adr r2, 800b198 <UART_SetConfig+0x1ac>)
 800b194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b198:	0800b1b1 	.word	0x0800b1b1
 800b19c:	0800b1b9 	.word	0x0800b1b9
 800b1a0:	0800b1c1 	.word	0x0800b1c1
 800b1a4:	0800b1c9 	.word	0x0800b1c9
 800b1a8:	0800b1d1 	.word	0x0800b1d1
 800b1ac:	0800b1d9 	.word	0x0800b1d9
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1b6:	e2f0      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b1b8:	2304      	movs	r3, #4
 800b1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1be:	e2ec      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b1c0:	2308      	movs	r3, #8
 800b1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1c6:	e2e8      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b1c8:	2310      	movs	r3, #16
 800b1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ce:	e2e4      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b1d0:	2320      	movs	r3, #32
 800b1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1d6:	e2e0      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b1d8:	2340      	movs	r3, #64	@ 0x40
 800b1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1de:	e2dc      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b1e0:	2380      	movs	r3, #128	@ 0x80
 800b1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1e6:	e2d8      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a4f      	ldr	r2, [pc, #316]	@ (800b32c <UART_SetConfig+0x340>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d130      	bne.n	800b254 <UART_SetConfig+0x268>
 800b1f2:	4b4c      	ldr	r3, [pc, #304]	@ (800b324 <UART_SetConfig+0x338>)
 800b1f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1f6:	f003 0307 	and.w	r3, r3, #7
 800b1fa:	2b05      	cmp	r3, #5
 800b1fc:	d826      	bhi.n	800b24c <UART_SetConfig+0x260>
 800b1fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b204 <UART_SetConfig+0x218>)
 800b200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b204:	0800b21d 	.word	0x0800b21d
 800b208:	0800b225 	.word	0x0800b225
 800b20c:	0800b22d 	.word	0x0800b22d
 800b210:	0800b235 	.word	0x0800b235
 800b214:	0800b23d 	.word	0x0800b23d
 800b218:	0800b245 	.word	0x0800b245
 800b21c:	2300      	movs	r3, #0
 800b21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b222:	e2ba      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b224:	2304      	movs	r3, #4
 800b226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b22a:	e2b6      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b22c:	2308      	movs	r3, #8
 800b22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b232:	e2b2      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b234:	2310      	movs	r3, #16
 800b236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b23a:	e2ae      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b23c:	2320      	movs	r3, #32
 800b23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b242:	e2aa      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b244:	2340      	movs	r3, #64	@ 0x40
 800b246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b24a:	e2a6      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b24c:	2380      	movs	r3, #128	@ 0x80
 800b24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b252:	e2a2      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a35      	ldr	r2, [pc, #212]	@ (800b330 <UART_SetConfig+0x344>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d130      	bne.n	800b2c0 <UART_SetConfig+0x2d4>
 800b25e:	4b31      	ldr	r3, [pc, #196]	@ (800b324 <UART_SetConfig+0x338>)
 800b260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b262:	f003 0307 	and.w	r3, r3, #7
 800b266:	2b05      	cmp	r3, #5
 800b268:	d826      	bhi.n	800b2b8 <UART_SetConfig+0x2cc>
 800b26a:	a201      	add	r2, pc, #4	@ (adr r2, 800b270 <UART_SetConfig+0x284>)
 800b26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b270:	0800b289 	.word	0x0800b289
 800b274:	0800b291 	.word	0x0800b291
 800b278:	0800b299 	.word	0x0800b299
 800b27c:	0800b2a1 	.word	0x0800b2a1
 800b280:	0800b2a9 	.word	0x0800b2a9
 800b284:	0800b2b1 	.word	0x0800b2b1
 800b288:	2300      	movs	r3, #0
 800b28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b28e:	e284      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b290:	2304      	movs	r3, #4
 800b292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b296:	e280      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b298:	2308      	movs	r3, #8
 800b29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b29e:	e27c      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b2a0:	2310      	movs	r3, #16
 800b2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2a6:	e278      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b2a8:	2320      	movs	r3, #32
 800b2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ae:	e274      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b2b0:	2340      	movs	r3, #64	@ 0x40
 800b2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2b6:	e270      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b2b8:	2380      	movs	r3, #128	@ 0x80
 800b2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2be:	e26c      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a1b      	ldr	r2, [pc, #108]	@ (800b334 <UART_SetConfig+0x348>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d142      	bne.n	800b350 <UART_SetConfig+0x364>
 800b2ca:	4b16      	ldr	r3, [pc, #88]	@ (800b324 <UART_SetConfig+0x338>)
 800b2cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2ce:	f003 0307 	and.w	r3, r3, #7
 800b2d2:	2b05      	cmp	r3, #5
 800b2d4:	d838      	bhi.n	800b348 <UART_SetConfig+0x35c>
 800b2d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b2dc <UART_SetConfig+0x2f0>)
 800b2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2dc:	0800b2f5 	.word	0x0800b2f5
 800b2e0:	0800b2fd 	.word	0x0800b2fd
 800b2e4:	0800b305 	.word	0x0800b305
 800b2e8:	0800b30d 	.word	0x0800b30d
 800b2ec:	0800b339 	.word	0x0800b339
 800b2f0:	0800b341 	.word	0x0800b341
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2fa:	e24e      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b2fc:	2304      	movs	r3, #4
 800b2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b302:	e24a      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b304:	2308      	movs	r3, #8
 800b306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b30a:	e246      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b30c:	2310      	movs	r3, #16
 800b30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b312:	e242      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b314:	cfff69f3 	.word	0xcfff69f3
 800b318:	58000c00 	.word	0x58000c00
 800b31c:	11fff4ff 	.word	0x11fff4ff
 800b320:	40011000 	.word	0x40011000
 800b324:	58024400 	.word	0x58024400
 800b328:	40004400 	.word	0x40004400
 800b32c:	40004800 	.word	0x40004800
 800b330:	40004c00 	.word	0x40004c00
 800b334:	40005000 	.word	0x40005000
 800b338:	2320      	movs	r3, #32
 800b33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b33e:	e22c      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b340:	2340      	movs	r3, #64	@ 0x40
 800b342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b346:	e228      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b348:	2380      	movs	r3, #128	@ 0x80
 800b34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b34e:	e224      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4ab1      	ldr	r2, [pc, #708]	@ (800b61c <UART_SetConfig+0x630>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d176      	bne.n	800b448 <UART_SetConfig+0x45c>
 800b35a:	4bb1      	ldr	r3, [pc, #708]	@ (800b620 <UART_SetConfig+0x634>)
 800b35c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b35e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b362:	2b28      	cmp	r3, #40	@ 0x28
 800b364:	d86c      	bhi.n	800b440 <UART_SetConfig+0x454>
 800b366:	a201      	add	r2, pc, #4	@ (adr r2, 800b36c <UART_SetConfig+0x380>)
 800b368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36c:	0800b411 	.word	0x0800b411
 800b370:	0800b441 	.word	0x0800b441
 800b374:	0800b441 	.word	0x0800b441
 800b378:	0800b441 	.word	0x0800b441
 800b37c:	0800b441 	.word	0x0800b441
 800b380:	0800b441 	.word	0x0800b441
 800b384:	0800b441 	.word	0x0800b441
 800b388:	0800b441 	.word	0x0800b441
 800b38c:	0800b419 	.word	0x0800b419
 800b390:	0800b441 	.word	0x0800b441
 800b394:	0800b441 	.word	0x0800b441
 800b398:	0800b441 	.word	0x0800b441
 800b39c:	0800b441 	.word	0x0800b441
 800b3a0:	0800b441 	.word	0x0800b441
 800b3a4:	0800b441 	.word	0x0800b441
 800b3a8:	0800b441 	.word	0x0800b441
 800b3ac:	0800b421 	.word	0x0800b421
 800b3b0:	0800b441 	.word	0x0800b441
 800b3b4:	0800b441 	.word	0x0800b441
 800b3b8:	0800b441 	.word	0x0800b441
 800b3bc:	0800b441 	.word	0x0800b441
 800b3c0:	0800b441 	.word	0x0800b441
 800b3c4:	0800b441 	.word	0x0800b441
 800b3c8:	0800b441 	.word	0x0800b441
 800b3cc:	0800b429 	.word	0x0800b429
 800b3d0:	0800b441 	.word	0x0800b441
 800b3d4:	0800b441 	.word	0x0800b441
 800b3d8:	0800b441 	.word	0x0800b441
 800b3dc:	0800b441 	.word	0x0800b441
 800b3e0:	0800b441 	.word	0x0800b441
 800b3e4:	0800b441 	.word	0x0800b441
 800b3e8:	0800b441 	.word	0x0800b441
 800b3ec:	0800b431 	.word	0x0800b431
 800b3f0:	0800b441 	.word	0x0800b441
 800b3f4:	0800b441 	.word	0x0800b441
 800b3f8:	0800b441 	.word	0x0800b441
 800b3fc:	0800b441 	.word	0x0800b441
 800b400:	0800b441 	.word	0x0800b441
 800b404:	0800b441 	.word	0x0800b441
 800b408:	0800b441 	.word	0x0800b441
 800b40c:	0800b439 	.word	0x0800b439
 800b410:	2301      	movs	r3, #1
 800b412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b416:	e1c0      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b418:	2304      	movs	r3, #4
 800b41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b41e:	e1bc      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b420:	2308      	movs	r3, #8
 800b422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b426:	e1b8      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b428:	2310      	movs	r3, #16
 800b42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b42e:	e1b4      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b430:	2320      	movs	r3, #32
 800b432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b436:	e1b0      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b438:	2340      	movs	r3, #64	@ 0x40
 800b43a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b43e:	e1ac      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b440:	2380      	movs	r3, #128	@ 0x80
 800b442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b446:	e1a8      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a75      	ldr	r2, [pc, #468]	@ (800b624 <UART_SetConfig+0x638>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d130      	bne.n	800b4b4 <UART_SetConfig+0x4c8>
 800b452:	4b73      	ldr	r3, [pc, #460]	@ (800b620 <UART_SetConfig+0x634>)
 800b454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b456:	f003 0307 	and.w	r3, r3, #7
 800b45a:	2b05      	cmp	r3, #5
 800b45c:	d826      	bhi.n	800b4ac <UART_SetConfig+0x4c0>
 800b45e:	a201      	add	r2, pc, #4	@ (adr r2, 800b464 <UART_SetConfig+0x478>)
 800b460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b464:	0800b47d 	.word	0x0800b47d
 800b468:	0800b485 	.word	0x0800b485
 800b46c:	0800b48d 	.word	0x0800b48d
 800b470:	0800b495 	.word	0x0800b495
 800b474:	0800b49d 	.word	0x0800b49d
 800b478:	0800b4a5 	.word	0x0800b4a5
 800b47c:	2300      	movs	r3, #0
 800b47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b482:	e18a      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b484:	2304      	movs	r3, #4
 800b486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b48a:	e186      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b48c:	2308      	movs	r3, #8
 800b48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b492:	e182      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b494:	2310      	movs	r3, #16
 800b496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b49a:	e17e      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b49c:	2320      	movs	r3, #32
 800b49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4a2:	e17a      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b4a4:	2340      	movs	r3, #64	@ 0x40
 800b4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4aa:	e176      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b4ac:	2380      	movs	r3, #128	@ 0x80
 800b4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4b2:	e172      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a5b      	ldr	r2, [pc, #364]	@ (800b628 <UART_SetConfig+0x63c>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d130      	bne.n	800b520 <UART_SetConfig+0x534>
 800b4be:	4b58      	ldr	r3, [pc, #352]	@ (800b620 <UART_SetConfig+0x634>)
 800b4c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4c2:	f003 0307 	and.w	r3, r3, #7
 800b4c6:	2b05      	cmp	r3, #5
 800b4c8:	d826      	bhi.n	800b518 <UART_SetConfig+0x52c>
 800b4ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b4d0 <UART_SetConfig+0x4e4>)
 800b4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d0:	0800b4e9 	.word	0x0800b4e9
 800b4d4:	0800b4f1 	.word	0x0800b4f1
 800b4d8:	0800b4f9 	.word	0x0800b4f9
 800b4dc:	0800b501 	.word	0x0800b501
 800b4e0:	0800b509 	.word	0x0800b509
 800b4e4:	0800b511 	.word	0x0800b511
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ee:	e154      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b4f0:	2304      	movs	r3, #4
 800b4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4f6:	e150      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b4f8:	2308      	movs	r3, #8
 800b4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4fe:	e14c      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b500:	2310      	movs	r3, #16
 800b502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b506:	e148      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b508:	2320      	movs	r3, #32
 800b50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b50e:	e144      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b510:	2340      	movs	r3, #64	@ 0x40
 800b512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b516:	e140      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b518:	2380      	movs	r3, #128	@ 0x80
 800b51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b51e:	e13c      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a41      	ldr	r2, [pc, #260]	@ (800b62c <UART_SetConfig+0x640>)
 800b526:	4293      	cmp	r3, r2
 800b528:	f040 8082 	bne.w	800b630 <UART_SetConfig+0x644>
 800b52c:	4b3c      	ldr	r3, [pc, #240]	@ (800b620 <UART_SetConfig+0x634>)
 800b52e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b530:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b534:	2b28      	cmp	r3, #40	@ 0x28
 800b536:	d86d      	bhi.n	800b614 <UART_SetConfig+0x628>
 800b538:	a201      	add	r2, pc, #4	@ (adr r2, 800b540 <UART_SetConfig+0x554>)
 800b53a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b53e:	bf00      	nop
 800b540:	0800b5e5 	.word	0x0800b5e5
 800b544:	0800b615 	.word	0x0800b615
 800b548:	0800b615 	.word	0x0800b615
 800b54c:	0800b615 	.word	0x0800b615
 800b550:	0800b615 	.word	0x0800b615
 800b554:	0800b615 	.word	0x0800b615
 800b558:	0800b615 	.word	0x0800b615
 800b55c:	0800b615 	.word	0x0800b615
 800b560:	0800b5ed 	.word	0x0800b5ed
 800b564:	0800b615 	.word	0x0800b615
 800b568:	0800b615 	.word	0x0800b615
 800b56c:	0800b615 	.word	0x0800b615
 800b570:	0800b615 	.word	0x0800b615
 800b574:	0800b615 	.word	0x0800b615
 800b578:	0800b615 	.word	0x0800b615
 800b57c:	0800b615 	.word	0x0800b615
 800b580:	0800b5f5 	.word	0x0800b5f5
 800b584:	0800b615 	.word	0x0800b615
 800b588:	0800b615 	.word	0x0800b615
 800b58c:	0800b615 	.word	0x0800b615
 800b590:	0800b615 	.word	0x0800b615
 800b594:	0800b615 	.word	0x0800b615
 800b598:	0800b615 	.word	0x0800b615
 800b59c:	0800b615 	.word	0x0800b615
 800b5a0:	0800b5fd 	.word	0x0800b5fd
 800b5a4:	0800b615 	.word	0x0800b615
 800b5a8:	0800b615 	.word	0x0800b615
 800b5ac:	0800b615 	.word	0x0800b615
 800b5b0:	0800b615 	.word	0x0800b615
 800b5b4:	0800b615 	.word	0x0800b615
 800b5b8:	0800b615 	.word	0x0800b615
 800b5bc:	0800b615 	.word	0x0800b615
 800b5c0:	0800b605 	.word	0x0800b605
 800b5c4:	0800b615 	.word	0x0800b615
 800b5c8:	0800b615 	.word	0x0800b615
 800b5cc:	0800b615 	.word	0x0800b615
 800b5d0:	0800b615 	.word	0x0800b615
 800b5d4:	0800b615 	.word	0x0800b615
 800b5d8:	0800b615 	.word	0x0800b615
 800b5dc:	0800b615 	.word	0x0800b615
 800b5e0:	0800b60d 	.word	0x0800b60d
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ea:	e0d6      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b5ec:	2304      	movs	r3, #4
 800b5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5f2:	e0d2      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b5f4:	2308      	movs	r3, #8
 800b5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5fa:	e0ce      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b5fc:	2310      	movs	r3, #16
 800b5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b602:	e0ca      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b604:	2320      	movs	r3, #32
 800b606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b60a:	e0c6      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b60c:	2340      	movs	r3, #64	@ 0x40
 800b60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b612:	e0c2      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b614:	2380      	movs	r3, #128	@ 0x80
 800b616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b61a:	e0be      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b61c:	40011400 	.word	0x40011400
 800b620:	58024400 	.word	0x58024400
 800b624:	40007800 	.word	0x40007800
 800b628:	40007c00 	.word	0x40007c00
 800b62c:	40011800 	.word	0x40011800
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4aad      	ldr	r2, [pc, #692]	@ (800b8ec <UART_SetConfig+0x900>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d176      	bne.n	800b728 <UART_SetConfig+0x73c>
 800b63a:	4bad      	ldr	r3, [pc, #692]	@ (800b8f0 <UART_SetConfig+0x904>)
 800b63c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b63e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b642:	2b28      	cmp	r3, #40	@ 0x28
 800b644:	d86c      	bhi.n	800b720 <UART_SetConfig+0x734>
 800b646:	a201      	add	r2, pc, #4	@ (adr r2, 800b64c <UART_SetConfig+0x660>)
 800b648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b64c:	0800b6f1 	.word	0x0800b6f1
 800b650:	0800b721 	.word	0x0800b721
 800b654:	0800b721 	.word	0x0800b721
 800b658:	0800b721 	.word	0x0800b721
 800b65c:	0800b721 	.word	0x0800b721
 800b660:	0800b721 	.word	0x0800b721
 800b664:	0800b721 	.word	0x0800b721
 800b668:	0800b721 	.word	0x0800b721
 800b66c:	0800b6f9 	.word	0x0800b6f9
 800b670:	0800b721 	.word	0x0800b721
 800b674:	0800b721 	.word	0x0800b721
 800b678:	0800b721 	.word	0x0800b721
 800b67c:	0800b721 	.word	0x0800b721
 800b680:	0800b721 	.word	0x0800b721
 800b684:	0800b721 	.word	0x0800b721
 800b688:	0800b721 	.word	0x0800b721
 800b68c:	0800b701 	.word	0x0800b701
 800b690:	0800b721 	.word	0x0800b721
 800b694:	0800b721 	.word	0x0800b721
 800b698:	0800b721 	.word	0x0800b721
 800b69c:	0800b721 	.word	0x0800b721
 800b6a0:	0800b721 	.word	0x0800b721
 800b6a4:	0800b721 	.word	0x0800b721
 800b6a8:	0800b721 	.word	0x0800b721
 800b6ac:	0800b709 	.word	0x0800b709
 800b6b0:	0800b721 	.word	0x0800b721
 800b6b4:	0800b721 	.word	0x0800b721
 800b6b8:	0800b721 	.word	0x0800b721
 800b6bc:	0800b721 	.word	0x0800b721
 800b6c0:	0800b721 	.word	0x0800b721
 800b6c4:	0800b721 	.word	0x0800b721
 800b6c8:	0800b721 	.word	0x0800b721
 800b6cc:	0800b711 	.word	0x0800b711
 800b6d0:	0800b721 	.word	0x0800b721
 800b6d4:	0800b721 	.word	0x0800b721
 800b6d8:	0800b721 	.word	0x0800b721
 800b6dc:	0800b721 	.word	0x0800b721
 800b6e0:	0800b721 	.word	0x0800b721
 800b6e4:	0800b721 	.word	0x0800b721
 800b6e8:	0800b721 	.word	0x0800b721
 800b6ec:	0800b719 	.word	0x0800b719
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6f6:	e050      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b6f8:	2304      	movs	r3, #4
 800b6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6fe:	e04c      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b700:	2308      	movs	r3, #8
 800b702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b706:	e048      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b708:	2310      	movs	r3, #16
 800b70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b70e:	e044      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b710:	2320      	movs	r3, #32
 800b712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b716:	e040      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b718:	2340      	movs	r3, #64	@ 0x40
 800b71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b71e:	e03c      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b720:	2380      	movs	r3, #128	@ 0x80
 800b722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b726:	e038      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a71      	ldr	r2, [pc, #452]	@ (800b8f4 <UART_SetConfig+0x908>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d130      	bne.n	800b794 <UART_SetConfig+0x7a8>
 800b732:	4b6f      	ldr	r3, [pc, #444]	@ (800b8f0 <UART_SetConfig+0x904>)
 800b734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b736:	f003 0307 	and.w	r3, r3, #7
 800b73a:	2b05      	cmp	r3, #5
 800b73c:	d826      	bhi.n	800b78c <UART_SetConfig+0x7a0>
 800b73e:	a201      	add	r2, pc, #4	@ (adr r2, 800b744 <UART_SetConfig+0x758>)
 800b740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b744:	0800b75d 	.word	0x0800b75d
 800b748:	0800b765 	.word	0x0800b765
 800b74c:	0800b76d 	.word	0x0800b76d
 800b750:	0800b775 	.word	0x0800b775
 800b754:	0800b77d 	.word	0x0800b77d
 800b758:	0800b785 	.word	0x0800b785
 800b75c:	2302      	movs	r3, #2
 800b75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b762:	e01a      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b764:	2304      	movs	r3, #4
 800b766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b76a:	e016      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b76c:	2308      	movs	r3, #8
 800b76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b772:	e012      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b774:	2310      	movs	r3, #16
 800b776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b77a:	e00e      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b77c:	2320      	movs	r3, #32
 800b77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b782:	e00a      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b784:	2340      	movs	r3, #64	@ 0x40
 800b786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b78a:	e006      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b78c:	2380      	movs	r3, #128	@ 0x80
 800b78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b792:	e002      	b.n	800b79a <UART_SetConfig+0x7ae>
 800b794:	2380      	movs	r3, #128	@ 0x80
 800b796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a55      	ldr	r2, [pc, #340]	@ (800b8f4 <UART_SetConfig+0x908>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	f040 80f8 	bne.w	800b996 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b7a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b7aa:	2b20      	cmp	r3, #32
 800b7ac:	dc46      	bgt.n	800b83c <UART_SetConfig+0x850>
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	db75      	blt.n	800b89e <UART_SetConfig+0x8b2>
 800b7b2:	3b02      	subs	r3, #2
 800b7b4:	2b1e      	cmp	r3, #30
 800b7b6:	d872      	bhi.n	800b89e <UART_SetConfig+0x8b2>
 800b7b8:	a201      	add	r2, pc, #4	@ (adr r2, 800b7c0 <UART_SetConfig+0x7d4>)
 800b7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7be:	bf00      	nop
 800b7c0:	0800b843 	.word	0x0800b843
 800b7c4:	0800b89f 	.word	0x0800b89f
 800b7c8:	0800b84b 	.word	0x0800b84b
 800b7cc:	0800b89f 	.word	0x0800b89f
 800b7d0:	0800b89f 	.word	0x0800b89f
 800b7d4:	0800b89f 	.word	0x0800b89f
 800b7d8:	0800b85b 	.word	0x0800b85b
 800b7dc:	0800b89f 	.word	0x0800b89f
 800b7e0:	0800b89f 	.word	0x0800b89f
 800b7e4:	0800b89f 	.word	0x0800b89f
 800b7e8:	0800b89f 	.word	0x0800b89f
 800b7ec:	0800b89f 	.word	0x0800b89f
 800b7f0:	0800b89f 	.word	0x0800b89f
 800b7f4:	0800b89f 	.word	0x0800b89f
 800b7f8:	0800b86b 	.word	0x0800b86b
 800b7fc:	0800b89f 	.word	0x0800b89f
 800b800:	0800b89f 	.word	0x0800b89f
 800b804:	0800b89f 	.word	0x0800b89f
 800b808:	0800b89f 	.word	0x0800b89f
 800b80c:	0800b89f 	.word	0x0800b89f
 800b810:	0800b89f 	.word	0x0800b89f
 800b814:	0800b89f 	.word	0x0800b89f
 800b818:	0800b89f 	.word	0x0800b89f
 800b81c:	0800b89f 	.word	0x0800b89f
 800b820:	0800b89f 	.word	0x0800b89f
 800b824:	0800b89f 	.word	0x0800b89f
 800b828:	0800b89f 	.word	0x0800b89f
 800b82c:	0800b89f 	.word	0x0800b89f
 800b830:	0800b89f 	.word	0x0800b89f
 800b834:	0800b89f 	.word	0x0800b89f
 800b838:	0800b891 	.word	0x0800b891
 800b83c:	2b40      	cmp	r3, #64	@ 0x40
 800b83e:	d02a      	beq.n	800b896 <UART_SetConfig+0x8aa>
 800b840:	e02d      	b.n	800b89e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b842:	f7fd fe4f 	bl	80094e4 <HAL_RCCEx_GetD3PCLK1Freq>
 800b846:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b848:	e02f      	b.n	800b8aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b84a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fd fe5e 	bl	8009510 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b858:	e027      	b.n	800b8aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b85a:	f107 0318 	add.w	r3, r7, #24
 800b85e:	4618      	mov	r0, r3
 800b860:	f7fd ffaa 	bl	80097b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b864:	69fb      	ldr	r3, [r7, #28]
 800b866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b868:	e01f      	b.n	800b8aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b86a:	4b21      	ldr	r3, [pc, #132]	@ (800b8f0 <UART_SetConfig+0x904>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f003 0320 	and.w	r3, r3, #32
 800b872:	2b00      	cmp	r3, #0
 800b874:	d009      	beq.n	800b88a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b876:	4b1e      	ldr	r3, [pc, #120]	@ (800b8f0 <UART_SetConfig+0x904>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	08db      	lsrs	r3, r3, #3
 800b87c:	f003 0303 	and.w	r3, r3, #3
 800b880:	4a1d      	ldr	r2, [pc, #116]	@ (800b8f8 <UART_SetConfig+0x90c>)
 800b882:	fa22 f303 	lsr.w	r3, r2, r3
 800b886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b888:	e00f      	b.n	800b8aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b88a:	4b1b      	ldr	r3, [pc, #108]	@ (800b8f8 <UART_SetConfig+0x90c>)
 800b88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b88e:	e00c      	b.n	800b8aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b890:	4b1a      	ldr	r3, [pc, #104]	@ (800b8fc <UART_SetConfig+0x910>)
 800b892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b894:	e009      	b.n	800b8aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b89c:	e005      	b.n	800b8aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b8a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b8aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f000 81ee 	beq.w	800bc8e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8b6:	4a12      	ldr	r2, [pc, #72]	@ (800b900 <UART_SetConfig+0x914>)
 800b8b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8bc:	461a      	mov	r2, r3
 800b8be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8c4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	685a      	ldr	r2, [r3, #4]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	005b      	lsls	r3, r3, #1
 800b8ce:	4413      	add	r3, r2
 800b8d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d305      	bcc.n	800b8e2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d910      	bls.n	800b904 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b8e8:	e1d1      	b.n	800bc8e <UART_SetConfig+0xca2>
 800b8ea:	bf00      	nop
 800b8ec:	40011c00 	.word	0x40011c00
 800b8f0:	58024400 	.word	0x58024400
 800b8f4:	58000c00 	.word	0x58000c00
 800b8f8:	03d09000 	.word	0x03d09000
 800b8fc:	003d0900 	.word	0x003d0900
 800b900:	0800d0a0 	.word	0x0800d0a0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b906:	2200      	movs	r2, #0
 800b908:	60bb      	str	r3, [r7, #8]
 800b90a:	60fa      	str	r2, [r7, #12]
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b910:	4ac0      	ldr	r2, [pc, #768]	@ (800bc14 <UART_SetConfig+0xc28>)
 800b912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b916:	b29b      	uxth	r3, r3
 800b918:	2200      	movs	r2, #0
 800b91a:	603b      	str	r3, [r7, #0]
 800b91c:	607a      	str	r2, [r7, #4]
 800b91e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b922:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b926:	f7f4 fd4b 	bl	80003c0 <__aeabi_uldivmod>
 800b92a:	4602      	mov	r2, r0
 800b92c:	460b      	mov	r3, r1
 800b92e:	4610      	mov	r0, r2
 800b930:	4619      	mov	r1, r3
 800b932:	f04f 0200 	mov.w	r2, #0
 800b936:	f04f 0300 	mov.w	r3, #0
 800b93a:	020b      	lsls	r3, r1, #8
 800b93c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b940:	0202      	lsls	r2, r0, #8
 800b942:	6979      	ldr	r1, [r7, #20]
 800b944:	6849      	ldr	r1, [r1, #4]
 800b946:	0849      	lsrs	r1, r1, #1
 800b948:	2000      	movs	r0, #0
 800b94a:	460c      	mov	r4, r1
 800b94c:	4605      	mov	r5, r0
 800b94e:	eb12 0804 	adds.w	r8, r2, r4
 800b952:	eb43 0905 	adc.w	r9, r3, r5
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	469a      	mov	sl, r3
 800b95e:	4693      	mov	fp, r2
 800b960:	4652      	mov	r2, sl
 800b962:	465b      	mov	r3, fp
 800b964:	4640      	mov	r0, r8
 800b966:	4649      	mov	r1, r9
 800b968:	f7f4 fd2a 	bl	80003c0 <__aeabi_uldivmod>
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	4613      	mov	r3, r2
 800b972:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b976:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b97a:	d308      	bcc.n	800b98e <UART_SetConfig+0x9a2>
 800b97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b97e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b982:	d204      	bcs.n	800b98e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b98a:	60da      	str	r2, [r3, #12]
 800b98c:	e17f      	b.n	800bc8e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b994:	e17b      	b.n	800bc8e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	69db      	ldr	r3, [r3, #28]
 800b99a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b99e:	f040 80bd 	bne.w	800bb1c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b9a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b9a6:	2b20      	cmp	r3, #32
 800b9a8:	dc48      	bgt.n	800ba3c <UART_SetConfig+0xa50>
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	db7b      	blt.n	800baa6 <UART_SetConfig+0xaba>
 800b9ae:	2b20      	cmp	r3, #32
 800b9b0:	d879      	bhi.n	800baa6 <UART_SetConfig+0xaba>
 800b9b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b9b8 <UART_SetConfig+0x9cc>)
 800b9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b8:	0800ba43 	.word	0x0800ba43
 800b9bc:	0800ba4b 	.word	0x0800ba4b
 800b9c0:	0800baa7 	.word	0x0800baa7
 800b9c4:	0800baa7 	.word	0x0800baa7
 800b9c8:	0800ba53 	.word	0x0800ba53
 800b9cc:	0800baa7 	.word	0x0800baa7
 800b9d0:	0800baa7 	.word	0x0800baa7
 800b9d4:	0800baa7 	.word	0x0800baa7
 800b9d8:	0800ba63 	.word	0x0800ba63
 800b9dc:	0800baa7 	.word	0x0800baa7
 800b9e0:	0800baa7 	.word	0x0800baa7
 800b9e4:	0800baa7 	.word	0x0800baa7
 800b9e8:	0800baa7 	.word	0x0800baa7
 800b9ec:	0800baa7 	.word	0x0800baa7
 800b9f0:	0800baa7 	.word	0x0800baa7
 800b9f4:	0800baa7 	.word	0x0800baa7
 800b9f8:	0800ba73 	.word	0x0800ba73
 800b9fc:	0800baa7 	.word	0x0800baa7
 800ba00:	0800baa7 	.word	0x0800baa7
 800ba04:	0800baa7 	.word	0x0800baa7
 800ba08:	0800baa7 	.word	0x0800baa7
 800ba0c:	0800baa7 	.word	0x0800baa7
 800ba10:	0800baa7 	.word	0x0800baa7
 800ba14:	0800baa7 	.word	0x0800baa7
 800ba18:	0800baa7 	.word	0x0800baa7
 800ba1c:	0800baa7 	.word	0x0800baa7
 800ba20:	0800baa7 	.word	0x0800baa7
 800ba24:	0800baa7 	.word	0x0800baa7
 800ba28:	0800baa7 	.word	0x0800baa7
 800ba2c:	0800baa7 	.word	0x0800baa7
 800ba30:	0800baa7 	.word	0x0800baa7
 800ba34:	0800baa7 	.word	0x0800baa7
 800ba38:	0800ba99 	.word	0x0800ba99
 800ba3c:	2b40      	cmp	r3, #64	@ 0x40
 800ba3e:	d02e      	beq.n	800ba9e <UART_SetConfig+0xab2>
 800ba40:	e031      	b.n	800baa6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba42:	f7fb feb1 	bl	80077a8 <HAL_RCC_GetPCLK1Freq>
 800ba46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba48:	e033      	b.n	800bab2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba4a:	f7fb fec3 	bl	80077d4 <HAL_RCC_GetPCLK2Freq>
 800ba4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba50:	e02f      	b.n	800bab2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7fd fd5a 	bl	8009510 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba60:	e027      	b.n	800bab2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba62:	f107 0318 	add.w	r3, r7, #24
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7fd fea6 	bl	80097b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba70:	e01f      	b.n	800bab2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba72:	4b69      	ldr	r3, [pc, #420]	@ (800bc18 <UART_SetConfig+0xc2c>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f003 0320 	and.w	r3, r3, #32
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d009      	beq.n	800ba92 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba7e:	4b66      	ldr	r3, [pc, #408]	@ (800bc18 <UART_SetConfig+0xc2c>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	08db      	lsrs	r3, r3, #3
 800ba84:	f003 0303 	and.w	r3, r3, #3
 800ba88:	4a64      	ldr	r2, [pc, #400]	@ (800bc1c <UART_SetConfig+0xc30>)
 800ba8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba90:	e00f      	b.n	800bab2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ba92:	4b62      	ldr	r3, [pc, #392]	@ (800bc1c <UART_SetConfig+0xc30>)
 800ba94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba96:	e00c      	b.n	800bab2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba98:	4b61      	ldr	r3, [pc, #388]	@ (800bc20 <UART_SetConfig+0xc34>)
 800ba9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba9c:	e009      	b.n	800bab2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800baa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baa4:	e005      	b.n	800bab2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800baa6:	2300      	movs	r3, #0
 800baa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bab0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f000 80ea 	beq.w	800bc8e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800babe:	4a55      	ldr	r2, [pc, #340]	@ (800bc14 <UART_SetConfig+0xc28>)
 800bac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bac4:	461a      	mov	r2, r3
 800bac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bac8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bacc:	005a      	lsls	r2, r3, #1
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	085b      	lsrs	r3, r3, #1
 800bad4:	441a      	add	r2, r3
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	fbb2 f3f3 	udiv	r3, r2, r3
 800bade:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae2:	2b0f      	cmp	r3, #15
 800bae4:	d916      	bls.n	800bb14 <UART_SetConfig+0xb28>
 800bae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800baec:	d212      	bcs.n	800bb14 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800baee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	f023 030f 	bic.w	r3, r3, #15
 800baf6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800baf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafa:	085b      	lsrs	r3, r3, #1
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	f003 0307 	and.w	r3, r3, #7
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bb06:	4313      	orrs	r3, r2
 800bb08:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bb10:	60da      	str	r2, [r3, #12]
 800bb12:	e0bc      	b.n	800bc8e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bb14:	2301      	movs	r3, #1
 800bb16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bb1a:	e0b8      	b.n	800bc8e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb1c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bb20:	2b20      	cmp	r3, #32
 800bb22:	dc4b      	bgt.n	800bbbc <UART_SetConfig+0xbd0>
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f2c0 8087 	blt.w	800bc38 <UART_SetConfig+0xc4c>
 800bb2a:	2b20      	cmp	r3, #32
 800bb2c:	f200 8084 	bhi.w	800bc38 <UART_SetConfig+0xc4c>
 800bb30:	a201      	add	r2, pc, #4	@ (adr r2, 800bb38 <UART_SetConfig+0xb4c>)
 800bb32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb36:	bf00      	nop
 800bb38:	0800bbc3 	.word	0x0800bbc3
 800bb3c:	0800bbcb 	.word	0x0800bbcb
 800bb40:	0800bc39 	.word	0x0800bc39
 800bb44:	0800bc39 	.word	0x0800bc39
 800bb48:	0800bbd3 	.word	0x0800bbd3
 800bb4c:	0800bc39 	.word	0x0800bc39
 800bb50:	0800bc39 	.word	0x0800bc39
 800bb54:	0800bc39 	.word	0x0800bc39
 800bb58:	0800bbe3 	.word	0x0800bbe3
 800bb5c:	0800bc39 	.word	0x0800bc39
 800bb60:	0800bc39 	.word	0x0800bc39
 800bb64:	0800bc39 	.word	0x0800bc39
 800bb68:	0800bc39 	.word	0x0800bc39
 800bb6c:	0800bc39 	.word	0x0800bc39
 800bb70:	0800bc39 	.word	0x0800bc39
 800bb74:	0800bc39 	.word	0x0800bc39
 800bb78:	0800bbf3 	.word	0x0800bbf3
 800bb7c:	0800bc39 	.word	0x0800bc39
 800bb80:	0800bc39 	.word	0x0800bc39
 800bb84:	0800bc39 	.word	0x0800bc39
 800bb88:	0800bc39 	.word	0x0800bc39
 800bb8c:	0800bc39 	.word	0x0800bc39
 800bb90:	0800bc39 	.word	0x0800bc39
 800bb94:	0800bc39 	.word	0x0800bc39
 800bb98:	0800bc39 	.word	0x0800bc39
 800bb9c:	0800bc39 	.word	0x0800bc39
 800bba0:	0800bc39 	.word	0x0800bc39
 800bba4:	0800bc39 	.word	0x0800bc39
 800bba8:	0800bc39 	.word	0x0800bc39
 800bbac:	0800bc39 	.word	0x0800bc39
 800bbb0:	0800bc39 	.word	0x0800bc39
 800bbb4:	0800bc39 	.word	0x0800bc39
 800bbb8:	0800bc2b 	.word	0x0800bc2b
 800bbbc:	2b40      	cmp	r3, #64	@ 0x40
 800bbbe:	d037      	beq.n	800bc30 <UART_SetConfig+0xc44>
 800bbc0:	e03a      	b.n	800bc38 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbc2:	f7fb fdf1 	bl	80077a8 <HAL_RCC_GetPCLK1Freq>
 800bbc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bbc8:	e03c      	b.n	800bc44 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbca:	f7fb fe03 	bl	80077d4 <HAL_RCC_GetPCLK2Freq>
 800bbce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bbd0:	e038      	b.n	800bc44 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fd fc9a 	bl	8009510 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bbdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbe0:	e030      	b.n	800bc44 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbe2:	f107 0318 	add.w	r3, r7, #24
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7fd fde6 	bl	80097b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbf0:	e028      	b.n	800bc44 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbf2:	4b09      	ldr	r3, [pc, #36]	@ (800bc18 <UART_SetConfig+0xc2c>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f003 0320 	and.w	r3, r3, #32
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d012      	beq.n	800bc24 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bbfe:	4b06      	ldr	r3, [pc, #24]	@ (800bc18 <UART_SetConfig+0xc2c>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	08db      	lsrs	r3, r3, #3
 800bc04:	f003 0303 	and.w	r3, r3, #3
 800bc08:	4a04      	ldr	r2, [pc, #16]	@ (800bc1c <UART_SetConfig+0xc30>)
 800bc0a:	fa22 f303 	lsr.w	r3, r2, r3
 800bc0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc10:	e018      	b.n	800bc44 <UART_SetConfig+0xc58>
 800bc12:	bf00      	nop
 800bc14:	0800d0a0 	.word	0x0800d0a0
 800bc18:	58024400 	.word	0x58024400
 800bc1c:	03d09000 	.word	0x03d09000
 800bc20:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800bc24:	4b24      	ldr	r3, [pc, #144]	@ (800bcb8 <UART_SetConfig+0xccc>)
 800bc26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc28:	e00c      	b.n	800bc44 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc2a:	4b24      	ldr	r3, [pc, #144]	@ (800bcbc <UART_SetConfig+0xcd0>)
 800bc2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc2e:	e009      	b.n	800bc44 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc36:	e005      	b.n	800bc44 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bc42:	bf00      	nop
    }

    if (pclk != 0U)
 800bc44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d021      	beq.n	800bc8e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc4e:	4a1c      	ldr	r2, [pc, #112]	@ (800bcc0 <UART_SetConfig+0xcd4>)
 800bc50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc54:	461a      	mov	r2, r3
 800bc56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc58:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	085b      	lsrs	r3, r3, #1
 800bc62:	441a      	add	r2, r3
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc70:	2b0f      	cmp	r3, #15
 800bc72:	d909      	bls.n	800bc88 <UART_SetConfig+0xc9c>
 800bc74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc7a:	d205      	bcs.n	800bc88 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	60da      	str	r2, [r3, #12]
 800bc86:	e002      	b.n	800bc8e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	2201      	movs	r2, #1
 800bc92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	2200      	movs	r2, #0
 800bca2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	2200      	movs	r2, #0
 800bca8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bcaa:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3748      	adds	r7, #72	@ 0x48
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcb8:	03d09000 	.word	0x03d09000
 800bcbc:	003d0900 	.word	0x003d0900
 800bcc0:	0800d0a0 	.word	0x0800d0a0

0800bcc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd0:	f003 0308 	and.w	r3, r3, #8
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00a      	beq.n	800bcee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	430a      	orrs	r2, r1
 800bcec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcf2:	f003 0301 	and.w	r3, r3, #1
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d00a      	beq.n	800bd10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	430a      	orrs	r2, r1
 800bd0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd14:	f003 0302 	and.w	r3, r3, #2
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00a      	beq.n	800bd32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	430a      	orrs	r2, r1
 800bd30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd36:	f003 0304 	and.w	r3, r3, #4
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00a      	beq.n	800bd54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	430a      	orrs	r2, r1
 800bd52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd58:	f003 0310 	and.w	r3, r3, #16
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00a      	beq.n	800bd76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	430a      	orrs	r2, r1
 800bd74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd7a:	f003 0320 	and.w	r3, r3, #32
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00a      	beq.n	800bd98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	430a      	orrs	r2, r1
 800bd96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d01a      	beq.n	800bdda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	430a      	orrs	r2, r1
 800bdb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdc2:	d10a      	bne.n	800bdda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	430a      	orrs	r2, r1
 800bdd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00a      	beq.n	800bdfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	430a      	orrs	r2, r1
 800bdfa:	605a      	str	r2, [r3, #4]
  }
}
 800bdfc:	bf00      	nop
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b098      	sub	sp, #96	@ 0x60
 800be0c:	af02      	add	r7, sp, #8
 800be0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be18:	f7f7 f8f0 	bl	8002ffc <HAL_GetTick>
 800be1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f003 0308 	and.w	r3, r3, #8
 800be28:	2b08      	cmp	r3, #8
 800be2a:	d12f      	bne.n	800be8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be34:	2200      	movs	r2, #0
 800be36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f88e 	bl	800bf5c <UART_WaitOnFlagUntilTimeout>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d022      	beq.n	800be8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be4e:	e853 3f00 	ldrex	r3, [r3]
 800be52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be5a:	653b      	str	r3, [r7, #80]	@ 0x50
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	461a      	mov	r2, r3
 800be62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be64:	647b      	str	r3, [r7, #68]	@ 0x44
 800be66:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be6c:	e841 2300 	strex	r3, r2, [r1]
 800be70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1e6      	bne.n	800be46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2220      	movs	r2, #32
 800be7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be88:	2303      	movs	r3, #3
 800be8a:	e063      	b.n	800bf54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f003 0304 	and.w	r3, r3, #4
 800be96:	2b04      	cmp	r3, #4
 800be98:	d149      	bne.n	800bf2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bea2:	2200      	movs	r2, #0
 800bea4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 f857 	bl	800bf5c <UART_WaitOnFlagUntilTimeout>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d03c      	beq.n	800bf2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bebc:	e853 3f00 	ldrex	r3, [r3]
 800bec0:	623b      	str	r3, [r7, #32]
   return(result);
 800bec2:	6a3b      	ldr	r3, [r7, #32]
 800bec4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	461a      	mov	r2, r3
 800bed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bed2:	633b      	str	r3, [r7, #48]	@ 0x30
 800bed4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800beda:	e841 2300 	strex	r3, r2, [r1]
 800bede:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1e6      	bne.n	800beb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	3308      	adds	r3, #8
 800beec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	e853 3f00 	ldrex	r3, [r3]
 800bef4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f023 0301 	bic.w	r3, r3, #1
 800befc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	3308      	adds	r3, #8
 800bf04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf06:	61fa      	str	r2, [r7, #28]
 800bf08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0a:	69b9      	ldr	r1, [r7, #24]
 800bf0c:	69fa      	ldr	r2, [r7, #28]
 800bf0e:	e841 2300 	strex	r3, r2, [r1]
 800bf12:	617b      	str	r3, [r7, #20]
   return(result);
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1e5      	bne.n	800bee6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2220      	movs	r2, #32
 800bf1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf2a:	2303      	movs	r3, #3
 800bf2c:	e012      	b.n	800bf54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2220      	movs	r2, #32
 800bf32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2220      	movs	r2, #32
 800bf3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3758      	adds	r7, #88	@ 0x58
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	603b      	str	r3, [r7, #0]
 800bf68:	4613      	mov	r3, r2
 800bf6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf6c:	e04f      	b.n	800c00e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf74:	d04b      	beq.n	800c00e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf76:	f7f7 f841 	bl	8002ffc <HAL_GetTick>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	69ba      	ldr	r2, [r7, #24]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d302      	bcc.n	800bf8c <UART_WaitOnFlagUntilTimeout+0x30>
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d101      	bne.n	800bf90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	e04e      	b.n	800c02e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f003 0304 	and.w	r3, r3, #4
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d037      	beq.n	800c00e <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	2b80      	cmp	r3, #128	@ 0x80
 800bfa2:	d034      	beq.n	800c00e <UART_WaitOnFlagUntilTimeout+0xb2>
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	2b40      	cmp	r3, #64	@ 0x40
 800bfa8:	d031      	beq.n	800c00e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	69db      	ldr	r3, [r3, #28]
 800bfb0:	f003 0308 	and.w	r3, r3, #8
 800bfb4:	2b08      	cmp	r3, #8
 800bfb6:	d110      	bne.n	800bfda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2208      	movs	r2, #8
 800bfbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f000 f839 	bl	800c038 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2208      	movs	r2, #8
 800bfca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e029      	b.n	800c02e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	69db      	ldr	r3, [r3, #28]
 800bfe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bfe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bfe8:	d111      	bne.n	800c00e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f000 f81f 	bl	800c038 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2220      	movs	r2, #32
 800bffe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2200      	movs	r2, #0
 800c006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c00a:	2303      	movs	r3, #3
 800c00c:	e00f      	b.n	800c02e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	69da      	ldr	r2, [r3, #28]
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	4013      	ands	r3, r2
 800c018:	68ba      	ldr	r2, [r7, #8]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	bf0c      	ite	eq
 800c01e:	2301      	moveq	r3, #1
 800c020:	2300      	movne	r3, #0
 800c022:	b2db      	uxtb	r3, r3
 800c024:	461a      	mov	r2, r3
 800c026:	79fb      	ldrb	r3, [r7, #7]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d0a0      	beq.n	800bf6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
	...

0800c038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c038:	b480      	push	{r7}
 800c03a:	b095      	sub	sp, #84	@ 0x54
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c048:	e853 3f00 	ldrex	r3, [r3]
 800c04c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c050:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c054:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	461a      	mov	r2, r3
 800c05c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c05e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c060:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c062:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c064:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c066:	e841 2300 	strex	r3, r2, [r1]
 800c06a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1e6      	bne.n	800c040 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	3308      	adds	r3, #8
 800c078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c07a:	6a3b      	ldr	r3, [r7, #32]
 800c07c:	e853 3f00 	ldrex	r3, [r3]
 800c080:	61fb      	str	r3, [r7, #28]
   return(result);
 800c082:	69fa      	ldr	r2, [r7, #28]
 800c084:	4b1e      	ldr	r3, [pc, #120]	@ (800c100 <UART_EndRxTransfer+0xc8>)
 800c086:	4013      	ands	r3, r2
 800c088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	3308      	adds	r3, #8
 800c090:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c094:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c096:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c09a:	e841 2300 	strex	r3, r2, [r1]
 800c09e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1e5      	bne.n	800c072 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d118      	bne.n	800c0e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	e853 3f00 	ldrex	r3, [r3]
 800c0ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	f023 0310 	bic.w	r3, r3, #16
 800c0c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0cc:	61bb      	str	r3, [r7, #24]
 800c0ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d0:	6979      	ldr	r1, [r7, #20]
 800c0d2:	69ba      	ldr	r2, [r7, #24]
 800c0d4:	e841 2300 	strex	r3, r2, [r1]
 800c0d8:	613b      	str	r3, [r7, #16]
   return(result);
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d1e6      	bne.n	800c0ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2220      	movs	r2, #32
 800c0e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c0f4:	bf00      	nop
 800c0f6:	3754      	adds	r7, #84	@ 0x54
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr
 800c100:	effffffe 	.word	0xeffffffe

0800c104 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c104:	b480      	push	{r7}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c112:	2b01      	cmp	r3, #1
 800c114:	d101      	bne.n	800c11a <HAL_UARTEx_DisableFifoMode+0x16>
 800c116:	2302      	movs	r3, #2
 800c118:	e027      	b.n	800c16a <HAL_UARTEx_DisableFifoMode+0x66>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2201      	movs	r2, #1
 800c11e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2224      	movs	r2, #36	@ 0x24
 800c126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f022 0201 	bic.w	r2, r2, #1
 800c140:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c148:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2200      	movs	r2, #0
 800c14e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2220      	movs	r2, #32
 800c15c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c168:	2300      	movs	r3, #0
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3714      	adds	r7, #20
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr

0800c176 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b084      	sub	sp, #16
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
 800c17e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c186:	2b01      	cmp	r3, #1
 800c188:	d101      	bne.n	800c18e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c18a:	2302      	movs	r3, #2
 800c18c:	e02d      	b.n	800c1ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2201      	movs	r2, #1
 800c192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2224      	movs	r2, #36	@ 0x24
 800c19a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	681a      	ldr	r2, [r3, #0]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f022 0201 	bic.w	r2, r2, #1
 800c1b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	683a      	ldr	r2, [r7, #0]
 800c1c6:	430a      	orrs	r2, r1
 800c1c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 f850 	bl	800c270 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	68fa      	ldr	r2, [r7, #12]
 800c1d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2220      	movs	r2, #32
 800c1dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c1e8:	2300      	movs	r3, #0
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b084      	sub	sp, #16
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
 800c1fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c202:	2b01      	cmp	r3, #1
 800c204:	d101      	bne.n	800c20a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c206:	2302      	movs	r3, #2
 800c208:	e02d      	b.n	800c266 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2224      	movs	r2, #36	@ 0x24
 800c216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f022 0201 	bic.w	r2, r2, #1
 800c230:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	689b      	ldr	r3, [r3, #8]
 800c238:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	683a      	ldr	r2, [r7, #0]
 800c242:	430a      	orrs	r2, r1
 800c244:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 f812 	bl	800c270 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	68fa      	ldr	r2, [r7, #12]
 800c252:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2220      	movs	r2, #32
 800c258:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2200      	movs	r2, #0
 800c260:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c264:	2300      	movs	r3, #0
}
 800c266:	4618      	mov	r0, r3
 800c268:	3710      	adds	r7, #16
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
	...

0800c270 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c270:	b480      	push	{r7}
 800c272:	b085      	sub	sp, #20
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d108      	bne.n	800c292 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2201      	movs	r2, #1
 800c284:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2201      	movs	r2, #1
 800c28c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c290:	e031      	b.n	800c2f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c292:	2310      	movs	r3, #16
 800c294:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c296:	2310      	movs	r3, #16
 800c298:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	689b      	ldr	r3, [r3, #8]
 800c2a0:	0e5b      	lsrs	r3, r3, #25
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	f003 0307 	and.w	r3, r3, #7
 800c2a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	0f5b      	lsrs	r3, r3, #29
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	f003 0307 	and.w	r3, r3, #7
 800c2b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c2ba:	7bbb      	ldrb	r3, [r7, #14]
 800c2bc:	7b3a      	ldrb	r2, [r7, #12]
 800c2be:	4911      	ldr	r1, [pc, #68]	@ (800c304 <UARTEx_SetNbDataToProcess+0x94>)
 800c2c0:	5c8a      	ldrb	r2, [r1, r2]
 800c2c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c2c6:	7b3a      	ldrb	r2, [r7, #12]
 800c2c8:	490f      	ldr	r1, [pc, #60]	@ (800c308 <UARTEx_SetNbDataToProcess+0x98>)
 800c2ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c2cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c2d8:	7bfb      	ldrb	r3, [r7, #15]
 800c2da:	7b7a      	ldrb	r2, [r7, #13]
 800c2dc:	4909      	ldr	r1, [pc, #36]	@ (800c304 <UARTEx_SetNbDataToProcess+0x94>)
 800c2de:	5c8a      	ldrb	r2, [r1, r2]
 800c2e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c2e4:	7b7a      	ldrb	r2, [r7, #13]
 800c2e6:	4908      	ldr	r1, [pc, #32]	@ (800c308 <UARTEx_SetNbDataToProcess+0x98>)
 800c2e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c2ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c2f6:	bf00      	nop
 800c2f8:	3714      	adds	r7, #20
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr
 800c302:	bf00      	nop
 800c304:	0800d0b8 	.word	0x0800d0b8
 800c308:	0800d0c0 	.word	0x0800d0c0

0800c30c <siprintf>:
 800c30c:	b40e      	push	{r1, r2, r3}
 800c30e:	b510      	push	{r4, lr}
 800c310:	b09d      	sub	sp, #116	@ 0x74
 800c312:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c314:	9002      	str	r0, [sp, #8]
 800c316:	9006      	str	r0, [sp, #24]
 800c318:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c31c:	480a      	ldr	r0, [pc, #40]	@ (800c348 <siprintf+0x3c>)
 800c31e:	9107      	str	r1, [sp, #28]
 800c320:	9104      	str	r1, [sp, #16]
 800c322:	490a      	ldr	r1, [pc, #40]	@ (800c34c <siprintf+0x40>)
 800c324:	f853 2b04 	ldr.w	r2, [r3], #4
 800c328:	9105      	str	r1, [sp, #20]
 800c32a:	2400      	movs	r4, #0
 800c32c:	a902      	add	r1, sp, #8
 800c32e:	6800      	ldr	r0, [r0, #0]
 800c330:	9301      	str	r3, [sp, #4]
 800c332:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c334:	f000 f9a2 	bl	800c67c <_svfiprintf_r>
 800c338:	9b02      	ldr	r3, [sp, #8]
 800c33a:	701c      	strb	r4, [r3, #0]
 800c33c:	b01d      	add	sp, #116	@ 0x74
 800c33e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c342:	b003      	add	sp, #12
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop
 800c348:	24000018 	.word	0x24000018
 800c34c:	ffff0208 	.word	0xffff0208

0800c350 <memset>:
 800c350:	4402      	add	r2, r0
 800c352:	4603      	mov	r3, r0
 800c354:	4293      	cmp	r3, r2
 800c356:	d100      	bne.n	800c35a <memset+0xa>
 800c358:	4770      	bx	lr
 800c35a:	f803 1b01 	strb.w	r1, [r3], #1
 800c35e:	e7f9      	b.n	800c354 <memset+0x4>

0800c360 <__errno>:
 800c360:	4b01      	ldr	r3, [pc, #4]	@ (800c368 <__errno+0x8>)
 800c362:	6818      	ldr	r0, [r3, #0]
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop
 800c368:	24000018 	.word	0x24000018

0800c36c <__libc_init_array>:
 800c36c:	b570      	push	{r4, r5, r6, lr}
 800c36e:	4d0d      	ldr	r5, [pc, #52]	@ (800c3a4 <__libc_init_array+0x38>)
 800c370:	4c0d      	ldr	r4, [pc, #52]	@ (800c3a8 <__libc_init_array+0x3c>)
 800c372:	1b64      	subs	r4, r4, r5
 800c374:	10a4      	asrs	r4, r4, #2
 800c376:	2600      	movs	r6, #0
 800c378:	42a6      	cmp	r6, r4
 800c37a:	d109      	bne.n	800c390 <__libc_init_array+0x24>
 800c37c:	4d0b      	ldr	r5, [pc, #44]	@ (800c3ac <__libc_init_array+0x40>)
 800c37e:	4c0c      	ldr	r4, [pc, #48]	@ (800c3b0 <__libc_init_array+0x44>)
 800c380:	f000 fc64 	bl	800cc4c <_init>
 800c384:	1b64      	subs	r4, r4, r5
 800c386:	10a4      	asrs	r4, r4, #2
 800c388:	2600      	movs	r6, #0
 800c38a:	42a6      	cmp	r6, r4
 800c38c:	d105      	bne.n	800c39a <__libc_init_array+0x2e>
 800c38e:	bd70      	pop	{r4, r5, r6, pc}
 800c390:	f855 3b04 	ldr.w	r3, [r5], #4
 800c394:	4798      	blx	r3
 800c396:	3601      	adds	r6, #1
 800c398:	e7ee      	b.n	800c378 <__libc_init_array+0xc>
 800c39a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c39e:	4798      	blx	r3
 800c3a0:	3601      	adds	r6, #1
 800c3a2:	e7f2      	b.n	800c38a <__libc_init_array+0x1e>
 800c3a4:	0800d104 	.word	0x0800d104
 800c3a8:	0800d104 	.word	0x0800d104
 800c3ac:	0800d104 	.word	0x0800d104
 800c3b0:	0800d10c 	.word	0x0800d10c

0800c3b4 <__retarget_lock_acquire_recursive>:
 800c3b4:	4770      	bx	lr

0800c3b6 <__retarget_lock_release_recursive>:
 800c3b6:	4770      	bx	lr

0800c3b8 <memcpy>:
 800c3b8:	440a      	add	r2, r1
 800c3ba:	4291      	cmp	r1, r2
 800c3bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3c0:	d100      	bne.n	800c3c4 <memcpy+0xc>
 800c3c2:	4770      	bx	lr
 800c3c4:	b510      	push	{r4, lr}
 800c3c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3ce:	4291      	cmp	r1, r2
 800c3d0:	d1f9      	bne.n	800c3c6 <memcpy+0xe>
 800c3d2:	bd10      	pop	{r4, pc}

0800c3d4 <_free_r>:
 800c3d4:	b538      	push	{r3, r4, r5, lr}
 800c3d6:	4605      	mov	r5, r0
 800c3d8:	2900      	cmp	r1, #0
 800c3da:	d041      	beq.n	800c460 <_free_r+0x8c>
 800c3dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3e0:	1f0c      	subs	r4, r1, #4
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	bfb8      	it	lt
 800c3e6:	18e4      	addlt	r4, r4, r3
 800c3e8:	f000 f8e0 	bl	800c5ac <__malloc_lock>
 800c3ec:	4a1d      	ldr	r2, [pc, #116]	@ (800c464 <_free_r+0x90>)
 800c3ee:	6813      	ldr	r3, [r2, #0]
 800c3f0:	b933      	cbnz	r3, 800c400 <_free_r+0x2c>
 800c3f2:	6063      	str	r3, [r4, #4]
 800c3f4:	6014      	str	r4, [r2, #0]
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3fc:	f000 b8dc 	b.w	800c5b8 <__malloc_unlock>
 800c400:	42a3      	cmp	r3, r4
 800c402:	d908      	bls.n	800c416 <_free_r+0x42>
 800c404:	6820      	ldr	r0, [r4, #0]
 800c406:	1821      	adds	r1, r4, r0
 800c408:	428b      	cmp	r3, r1
 800c40a:	bf01      	itttt	eq
 800c40c:	6819      	ldreq	r1, [r3, #0]
 800c40e:	685b      	ldreq	r3, [r3, #4]
 800c410:	1809      	addeq	r1, r1, r0
 800c412:	6021      	streq	r1, [r4, #0]
 800c414:	e7ed      	b.n	800c3f2 <_free_r+0x1e>
 800c416:	461a      	mov	r2, r3
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	b10b      	cbz	r3, 800c420 <_free_r+0x4c>
 800c41c:	42a3      	cmp	r3, r4
 800c41e:	d9fa      	bls.n	800c416 <_free_r+0x42>
 800c420:	6811      	ldr	r1, [r2, #0]
 800c422:	1850      	adds	r0, r2, r1
 800c424:	42a0      	cmp	r0, r4
 800c426:	d10b      	bne.n	800c440 <_free_r+0x6c>
 800c428:	6820      	ldr	r0, [r4, #0]
 800c42a:	4401      	add	r1, r0
 800c42c:	1850      	adds	r0, r2, r1
 800c42e:	4283      	cmp	r3, r0
 800c430:	6011      	str	r1, [r2, #0]
 800c432:	d1e0      	bne.n	800c3f6 <_free_r+0x22>
 800c434:	6818      	ldr	r0, [r3, #0]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	6053      	str	r3, [r2, #4]
 800c43a:	4408      	add	r0, r1
 800c43c:	6010      	str	r0, [r2, #0]
 800c43e:	e7da      	b.n	800c3f6 <_free_r+0x22>
 800c440:	d902      	bls.n	800c448 <_free_r+0x74>
 800c442:	230c      	movs	r3, #12
 800c444:	602b      	str	r3, [r5, #0]
 800c446:	e7d6      	b.n	800c3f6 <_free_r+0x22>
 800c448:	6820      	ldr	r0, [r4, #0]
 800c44a:	1821      	adds	r1, r4, r0
 800c44c:	428b      	cmp	r3, r1
 800c44e:	bf04      	itt	eq
 800c450:	6819      	ldreq	r1, [r3, #0]
 800c452:	685b      	ldreq	r3, [r3, #4]
 800c454:	6063      	str	r3, [r4, #4]
 800c456:	bf04      	itt	eq
 800c458:	1809      	addeq	r1, r1, r0
 800c45a:	6021      	streq	r1, [r4, #0]
 800c45c:	6054      	str	r4, [r2, #4]
 800c45e:	e7ca      	b.n	800c3f6 <_free_r+0x22>
 800c460:	bd38      	pop	{r3, r4, r5, pc}
 800c462:	bf00      	nop
 800c464:	24000eac 	.word	0x24000eac

0800c468 <sbrk_aligned>:
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	4e0f      	ldr	r6, [pc, #60]	@ (800c4a8 <sbrk_aligned+0x40>)
 800c46c:	460c      	mov	r4, r1
 800c46e:	6831      	ldr	r1, [r6, #0]
 800c470:	4605      	mov	r5, r0
 800c472:	b911      	cbnz	r1, 800c47a <sbrk_aligned+0x12>
 800c474:	f000 fba4 	bl	800cbc0 <_sbrk_r>
 800c478:	6030      	str	r0, [r6, #0]
 800c47a:	4621      	mov	r1, r4
 800c47c:	4628      	mov	r0, r5
 800c47e:	f000 fb9f 	bl	800cbc0 <_sbrk_r>
 800c482:	1c43      	adds	r3, r0, #1
 800c484:	d103      	bne.n	800c48e <sbrk_aligned+0x26>
 800c486:	f04f 34ff 	mov.w	r4, #4294967295
 800c48a:	4620      	mov	r0, r4
 800c48c:	bd70      	pop	{r4, r5, r6, pc}
 800c48e:	1cc4      	adds	r4, r0, #3
 800c490:	f024 0403 	bic.w	r4, r4, #3
 800c494:	42a0      	cmp	r0, r4
 800c496:	d0f8      	beq.n	800c48a <sbrk_aligned+0x22>
 800c498:	1a21      	subs	r1, r4, r0
 800c49a:	4628      	mov	r0, r5
 800c49c:	f000 fb90 	bl	800cbc0 <_sbrk_r>
 800c4a0:	3001      	adds	r0, #1
 800c4a2:	d1f2      	bne.n	800c48a <sbrk_aligned+0x22>
 800c4a4:	e7ef      	b.n	800c486 <sbrk_aligned+0x1e>
 800c4a6:	bf00      	nop
 800c4a8:	24000ea8 	.word	0x24000ea8

0800c4ac <_malloc_r>:
 800c4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4b0:	1ccd      	adds	r5, r1, #3
 800c4b2:	f025 0503 	bic.w	r5, r5, #3
 800c4b6:	3508      	adds	r5, #8
 800c4b8:	2d0c      	cmp	r5, #12
 800c4ba:	bf38      	it	cc
 800c4bc:	250c      	movcc	r5, #12
 800c4be:	2d00      	cmp	r5, #0
 800c4c0:	4606      	mov	r6, r0
 800c4c2:	db01      	blt.n	800c4c8 <_malloc_r+0x1c>
 800c4c4:	42a9      	cmp	r1, r5
 800c4c6:	d904      	bls.n	800c4d2 <_malloc_r+0x26>
 800c4c8:	230c      	movs	r3, #12
 800c4ca:	6033      	str	r3, [r6, #0]
 800c4cc:	2000      	movs	r0, #0
 800c4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c5a8 <_malloc_r+0xfc>
 800c4d6:	f000 f869 	bl	800c5ac <__malloc_lock>
 800c4da:	f8d8 3000 	ldr.w	r3, [r8]
 800c4de:	461c      	mov	r4, r3
 800c4e0:	bb44      	cbnz	r4, 800c534 <_malloc_r+0x88>
 800c4e2:	4629      	mov	r1, r5
 800c4e4:	4630      	mov	r0, r6
 800c4e6:	f7ff ffbf 	bl	800c468 <sbrk_aligned>
 800c4ea:	1c43      	adds	r3, r0, #1
 800c4ec:	4604      	mov	r4, r0
 800c4ee:	d158      	bne.n	800c5a2 <_malloc_r+0xf6>
 800c4f0:	f8d8 4000 	ldr.w	r4, [r8]
 800c4f4:	4627      	mov	r7, r4
 800c4f6:	2f00      	cmp	r7, #0
 800c4f8:	d143      	bne.n	800c582 <_malloc_r+0xd6>
 800c4fa:	2c00      	cmp	r4, #0
 800c4fc:	d04b      	beq.n	800c596 <_malloc_r+0xea>
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	4639      	mov	r1, r7
 800c502:	4630      	mov	r0, r6
 800c504:	eb04 0903 	add.w	r9, r4, r3
 800c508:	f000 fb5a 	bl	800cbc0 <_sbrk_r>
 800c50c:	4581      	cmp	r9, r0
 800c50e:	d142      	bne.n	800c596 <_malloc_r+0xea>
 800c510:	6821      	ldr	r1, [r4, #0]
 800c512:	1a6d      	subs	r5, r5, r1
 800c514:	4629      	mov	r1, r5
 800c516:	4630      	mov	r0, r6
 800c518:	f7ff ffa6 	bl	800c468 <sbrk_aligned>
 800c51c:	3001      	adds	r0, #1
 800c51e:	d03a      	beq.n	800c596 <_malloc_r+0xea>
 800c520:	6823      	ldr	r3, [r4, #0]
 800c522:	442b      	add	r3, r5
 800c524:	6023      	str	r3, [r4, #0]
 800c526:	f8d8 3000 	ldr.w	r3, [r8]
 800c52a:	685a      	ldr	r2, [r3, #4]
 800c52c:	bb62      	cbnz	r2, 800c588 <_malloc_r+0xdc>
 800c52e:	f8c8 7000 	str.w	r7, [r8]
 800c532:	e00f      	b.n	800c554 <_malloc_r+0xa8>
 800c534:	6822      	ldr	r2, [r4, #0]
 800c536:	1b52      	subs	r2, r2, r5
 800c538:	d420      	bmi.n	800c57c <_malloc_r+0xd0>
 800c53a:	2a0b      	cmp	r2, #11
 800c53c:	d917      	bls.n	800c56e <_malloc_r+0xc2>
 800c53e:	1961      	adds	r1, r4, r5
 800c540:	42a3      	cmp	r3, r4
 800c542:	6025      	str	r5, [r4, #0]
 800c544:	bf18      	it	ne
 800c546:	6059      	strne	r1, [r3, #4]
 800c548:	6863      	ldr	r3, [r4, #4]
 800c54a:	bf08      	it	eq
 800c54c:	f8c8 1000 	streq.w	r1, [r8]
 800c550:	5162      	str	r2, [r4, r5]
 800c552:	604b      	str	r3, [r1, #4]
 800c554:	4630      	mov	r0, r6
 800c556:	f000 f82f 	bl	800c5b8 <__malloc_unlock>
 800c55a:	f104 000b 	add.w	r0, r4, #11
 800c55e:	1d23      	adds	r3, r4, #4
 800c560:	f020 0007 	bic.w	r0, r0, #7
 800c564:	1ac2      	subs	r2, r0, r3
 800c566:	bf1c      	itt	ne
 800c568:	1a1b      	subne	r3, r3, r0
 800c56a:	50a3      	strne	r3, [r4, r2]
 800c56c:	e7af      	b.n	800c4ce <_malloc_r+0x22>
 800c56e:	6862      	ldr	r2, [r4, #4]
 800c570:	42a3      	cmp	r3, r4
 800c572:	bf0c      	ite	eq
 800c574:	f8c8 2000 	streq.w	r2, [r8]
 800c578:	605a      	strne	r2, [r3, #4]
 800c57a:	e7eb      	b.n	800c554 <_malloc_r+0xa8>
 800c57c:	4623      	mov	r3, r4
 800c57e:	6864      	ldr	r4, [r4, #4]
 800c580:	e7ae      	b.n	800c4e0 <_malloc_r+0x34>
 800c582:	463c      	mov	r4, r7
 800c584:	687f      	ldr	r7, [r7, #4]
 800c586:	e7b6      	b.n	800c4f6 <_malloc_r+0x4a>
 800c588:	461a      	mov	r2, r3
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	42a3      	cmp	r3, r4
 800c58e:	d1fb      	bne.n	800c588 <_malloc_r+0xdc>
 800c590:	2300      	movs	r3, #0
 800c592:	6053      	str	r3, [r2, #4]
 800c594:	e7de      	b.n	800c554 <_malloc_r+0xa8>
 800c596:	230c      	movs	r3, #12
 800c598:	6033      	str	r3, [r6, #0]
 800c59a:	4630      	mov	r0, r6
 800c59c:	f000 f80c 	bl	800c5b8 <__malloc_unlock>
 800c5a0:	e794      	b.n	800c4cc <_malloc_r+0x20>
 800c5a2:	6005      	str	r5, [r0, #0]
 800c5a4:	e7d6      	b.n	800c554 <_malloc_r+0xa8>
 800c5a6:	bf00      	nop
 800c5a8:	24000eac 	.word	0x24000eac

0800c5ac <__malloc_lock>:
 800c5ac:	4801      	ldr	r0, [pc, #4]	@ (800c5b4 <__malloc_lock+0x8>)
 800c5ae:	f7ff bf01 	b.w	800c3b4 <__retarget_lock_acquire_recursive>
 800c5b2:	bf00      	nop
 800c5b4:	24000ea4 	.word	0x24000ea4

0800c5b8 <__malloc_unlock>:
 800c5b8:	4801      	ldr	r0, [pc, #4]	@ (800c5c0 <__malloc_unlock+0x8>)
 800c5ba:	f7ff befc 	b.w	800c3b6 <__retarget_lock_release_recursive>
 800c5be:	bf00      	nop
 800c5c0:	24000ea4 	.word	0x24000ea4

0800c5c4 <__ssputs_r>:
 800c5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5c8:	688e      	ldr	r6, [r1, #8]
 800c5ca:	461f      	mov	r7, r3
 800c5cc:	42be      	cmp	r6, r7
 800c5ce:	680b      	ldr	r3, [r1, #0]
 800c5d0:	4682      	mov	sl, r0
 800c5d2:	460c      	mov	r4, r1
 800c5d4:	4690      	mov	r8, r2
 800c5d6:	d82d      	bhi.n	800c634 <__ssputs_r+0x70>
 800c5d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c5dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c5e0:	d026      	beq.n	800c630 <__ssputs_r+0x6c>
 800c5e2:	6965      	ldr	r5, [r4, #20]
 800c5e4:	6909      	ldr	r1, [r1, #16]
 800c5e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5ea:	eba3 0901 	sub.w	r9, r3, r1
 800c5ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5f2:	1c7b      	adds	r3, r7, #1
 800c5f4:	444b      	add	r3, r9
 800c5f6:	106d      	asrs	r5, r5, #1
 800c5f8:	429d      	cmp	r5, r3
 800c5fa:	bf38      	it	cc
 800c5fc:	461d      	movcc	r5, r3
 800c5fe:	0553      	lsls	r3, r2, #21
 800c600:	d527      	bpl.n	800c652 <__ssputs_r+0x8e>
 800c602:	4629      	mov	r1, r5
 800c604:	f7ff ff52 	bl	800c4ac <_malloc_r>
 800c608:	4606      	mov	r6, r0
 800c60a:	b360      	cbz	r0, 800c666 <__ssputs_r+0xa2>
 800c60c:	6921      	ldr	r1, [r4, #16]
 800c60e:	464a      	mov	r2, r9
 800c610:	f7ff fed2 	bl	800c3b8 <memcpy>
 800c614:	89a3      	ldrh	r3, [r4, #12]
 800c616:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c61a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c61e:	81a3      	strh	r3, [r4, #12]
 800c620:	6126      	str	r6, [r4, #16]
 800c622:	6165      	str	r5, [r4, #20]
 800c624:	444e      	add	r6, r9
 800c626:	eba5 0509 	sub.w	r5, r5, r9
 800c62a:	6026      	str	r6, [r4, #0]
 800c62c:	60a5      	str	r5, [r4, #8]
 800c62e:	463e      	mov	r6, r7
 800c630:	42be      	cmp	r6, r7
 800c632:	d900      	bls.n	800c636 <__ssputs_r+0x72>
 800c634:	463e      	mov	r6, r7
 800c636:	6820      	ldr	r0, [r4, #0]
 800c638:	4632      	mov	r2, r6
 800c63a:	4641      	mov	r1, r8
 800c63c:	f000 faa6 	bl	800cb8c <memmove>
 800c640:	68a3      	ldr	r3, [r4, #8]
 800c642:	1b9b      	subs	r3, r3, r6
 800c644:	60a3      	str	r3, [r4, #8]
 800c646:	6823      	ldr	r3, [r4, #0]
 800c648:	4433      	add	r3, r6
 800c64a:	6023      	str	r3, [r4, #0]
 800c64c:	2000      	movs	r0, #0
 800c64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c652:	462a      	mov	r2, r5
 800c654:	f000 fac4 	bl	800cbe0 <_realloc_r>
 800c658:	4606      	mov	r6, r0
 800c65a:	2800      	cmp	r0, #0
 800c65c:	d1e0      	bne.n	800c620 <__ssputs_r+0x5c>
 800c65e:	6921      	ldr	r1, [r4, #16]
 800c660:	4650      	mov	r0, sl
 800c662:	f7ff feb7 	bl	800c3d4 <_free_r>
 800c666:	230c      	movs	r3, #12
 800c668:	f8ca 3000 	str.w	r3, [sl]
 800c66c:	89a3      	ldrh	r3, [r4, #12]
 800c66e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c672:	81a3      	strh	r3, [r4, #12]
 800c674:	f04f 30ff 	mov.w	r0, #4294967295
 800c678:	e7e9      	b.n	800c64e <__ssputs_r+0x8a>
	...

0800c67c <_svfiprintf_r>:
 800c67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c680:	4698      	mov	r8, r3
 800c682:	898b      	ldrh	r3, [r1, #12]
 800c684:	061b      	lsls	r3, r3, #24
 800c686:	b09d      	sub	sp, #116	@ 0x74
 800c688:	4607      	mov	r7, r0
 800c68a:	460d      	mov	r5, r1
 800c68c:	4614      	mov	r4, r2
 800c68e:	d510      	bpl.n	800c6b2 <_svfiprintf_r+0x36>
 800c690:	690b      	ldr	r3, [r1, #16]
 800c692:	b973      	cbnz	r3, 800c6b2 <_svfiprintf_r+0x36>
 800c694:	2140      	movs	r1, #64	@ 0x40
 800c696:	f7ff ff09 	bl	800c4ac <_malloc_r>
 800c69a:	6028      	str	r0, [r5, #0]
 800c69c:	6128      	str	r0, [r5, #16]
 800c69e:	b930      	cbnz	r0, 800c6ae <_svfiprintf_r+0x32>
 800c6a0:	230c      	movs	r3, #12
 800c6a2:	603b      	str	r3, [r7, #0]
 800c6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a8:	b01d      	add	sp, #116	@ 0x74
 800c6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ae:	2340      	movs	r3, #64	@ 0x40
 800c6b0:	616b      	str	r3, [r5, #20]
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6b6:	2320      	movs	r3, #32
 800c6b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c6bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6c0:	2330      	movs	r3, #48	@ 0x30
 800c6c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c860 <_svfiprintf_r+0x1e4>
 800c6c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c6ca:	f04f 0901 	mov.w	r9, #1
 800c6ce:	4623      	mov	r3, r4
 800c6d0:	469a      	mov	sl, r3
 800c6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6d6:	b10a      	cbz	r2, 800c6dc <_svfiprintf_r+0x60>
 800c6d8:	2a25      	cmp	r2, #37	@ 0x25
 800c6da:	d1f9      	bne.n	800c6d0 <_svfiprintf_r+0x54>
 800c6dc:	ebba 0b04 	subs.w	fp, sl, r4
 800c6e0:	d00b      	beq.n	800c6fa <_svfiprintf_r+0x7e>
 800c6e2:	465b      	mov	r3, fp
 800c6e4:	4622      	mov	r2, r4
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	4638      	mov	r0, r7
 800c6ea:	f7ff ff6b 	bl	800c5c4 <__ssputs_r>
 800c6ee:	3001      	adds	r0, #1
 800c6f0:	f000 80a7 	beq.w	800c842 <_svfiprintf_r+0x1c6>
 800c6f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6f6:	445a      	add	r2, fp
 800c6f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f000 809f 	beq.w	800c842 <_svfiprintf_r+0x1c6>
 800c704:	2300      	movs	r3, #0
 800c706:	f04f 32ff 	mov.w	r2, #4294967295
 800c70a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c70e:	f10a 0a01 	add.w	sl, sl, #1
 800c712:	9304      	str	r3, [sp, #16]
 800c714:	9307      	str	r3, [sp, #28]
 800c716:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c71a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c71c:	4654      	mov	r4, sl
 800c71e:	2205      	movs	r2, #5
 800c720:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c724:	484e      	ldr	r0, [pc, #312]	@ (800c860 <_svfiprintf_r+0x1e4>)
 800c726:	f7f3 fdfb 	bl	8000320 <memchr>
 800c72a:	9a04      	ldr	r2, [sp, #16]
 800c72c:	b9d8      	cbnz	r0, 800c766 <_svfiprintf_r+0xea>
 800c72e:	06d0      	lsls	r0, r2, #27
 800c730:	bf44      	itt	mi
 800c732:	2320      	movmi	r3, #32
 800c734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c738:	0711      	lsls	r1, r2, #28
 800c73a:	bf44      	itt	mi
 800c73c:	232b      	movmi	r3, #43	@ 0x2b
 800c73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c742:	f89a 3000 	ldrb.w	r3, [sl]
 800c746:	2b2a      	cmp	r3, #42	@ 0x2a
 800c748:	d015      	beq.n	800c776 <_svfiprintf_r+0xfa>
 800c74a:	9a07      	ldr	r2, [sp, #28]
 800c74c:	4654      	mov	r4, sl
 800c74e:	2000      	movs	r0, #0
 800c750:	f04f 0c0a 	mov.w	ip, #10
 800c754:	4621      	mov	r1, r4
 800c756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c75a:	3b30      	subs	r3, #48	@ 0x30
 800c75c:	2b09      	cmp	r3, #9
 800c75e:	d94b      	bls.n	800c7f8 <_svfiprintf_r+0x17c>
 800c760:	b1b0      	cbz	r0, 800c790 <_svfiprintf_r+0x114>
 800c762:	9207      	str	r2, [sp, #28]
 800c764:	e014      	b.n	800c790 <_svfiprintf_r+0x114>
 800c766:	eba0 0308 	sub.w	r3, r0, r8
 800c76a:	fa09 f303 	lsl.w	r3, r9, r3
 800c76e:	4313      	orrs	r3, r2
 800c770:	9304      	str	r3, [sp, #16]
 800c772:	46a2      	mov	sl, r4
 800c774:	e7d2      	b.n	800c71c <_svfiprintf_r+0xa0>
 800c776:	9b03      	ldr	r3, [sp, #12]
 800c778:	1d19      	adds	r1, r3, #4
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	9103      	str	r1, [sp, #12]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	bfbb      	ittet	lt
 800c782:	425b      	neglt	r3, r3
 800c784:	f042 0202 	orrlt.w	r2, r2, #2
 800c788:	9307      	strge	r3, [sp, #28]
 800c78a:	9307      	strlt	r3, [sp, #28]
 800c78c:	bfb8      	it	lt
 800c78e:	9204      	strlt	r2, [sp, #16]
 800c790:	7823      	ldrb	r3, [r4, #0]
 800c792:	2b2e      	cmp	r3, #46	@ 0x2e
 800c794:	d10a      	bne.n	800c7ac <_svfiprintf_r+0x130>
 800c796:	7863      	ldrb	r3, [r4, #1]
 800c798:	2b2a      	cmp	r3, #42	@ 0x2a
 800c79a:	d132      	bne.n	800c802 <_svfiprintf_r+0x186>
 800c79c:	9b03      	ldr	r3, [sp, #12]
 800c79e:	1d1a      	adds	r2, r3, #4
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	9203      	str	r2, [sp, #12]
 800c7a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7a8:	3402      	adds	r4, #2
 800c7aa:	9305      	str	r3, [sp, #20]
 800c7ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c870 <_svfiprintf_r+0x1f4>
 800c7b0:	7821      	ldrb	r1, [r4, #0]
 800c7b2:	2203      	movs	r2, #3
 800c7b4:	4650      	mov	r0, sl
 800c7b6:	f7f3 fdb3 	bl	8000320 <memchr>
 800c7ba:	b138      	cbz	r0, 800c7cc <_svfiprintf_r+0x150>
 800c7bc:	9b04      	ldr	r3, [sp, #16]
 800c7be:	eba0 000a 	sub.w	r0, r0, sl
 800c7c2:	2240      	movs	r2, #64	@ 0x40
 800c7c4:	4082      	lsls	r2, r0
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	3401      	adds	r4, #1
 800c7ca:	9304      	str	r3, [sp, #16]
 800c7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d0:	4824      	ldr	r0, [pc, #144]	@ (800c864 <_svfiprintf_r+0x1e8>)
 800c7d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c7d6:	2206      	movs	r2, #6
 800c7d8:	f7f3 fda2 	bl	8000320 <memchr>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d036      	beq.n	800c84e <_svfiprintf_r+0x1d2>
 800c7e0:	4b21      	ldr	r3, [pc, #132]	@ (800c868 <_svfiprintf_r+0x1ec>)
 800c7e2:	bb1b      	cbnz	r3, 800c82c <_svfiprintf_r+0x1b0>
 800c7e4:	9b03      	ldr	r3, [sp, #12]
 800c7e6:	3307      	adds	r3, #7
 800c7e8:	f023 0307 	bic.w	r3, r3, #7
 800c7ec:	3308      	adds	r3, #8
 800c7ee:	9303      	str	r3, [sp, #12]
 800c7f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7f2:	4433      	add	r3, r6
 800c7f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7f6:	e76a      	b.n	800c6ce <_svfiprintf_r+0x52>
 800c7f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7fc:	460c      	mov	r4, r1
 800c7fe:	2001      	movs	r0, #1
 800c800:	e7a8      	b.n	800c754 <_svfiprintf_r+0xd8>
 800c802:	2300      	movs	r3, #0
 800c804:	3401      	adds	r4, #1
 800c806:	9305      	str	r3, [sp, #20]
 800c808:	4619      	mov	r1, r3
 800c80a:	f04f 0c0a 	mov.w	ip, #10
 800c80e:	4620      	mov	r0, r4
 800c810:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c814:	3a30      	subs	r2, #48	@ 0x30
 800c816:	2a09      	cmp	r2, #9
 800c818:	d903      	bls.n	800c822 <_svfiprintf_r+0x1a6>
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d0c6      	beq.n	800c7ac <_svfiprintf_r+0x130>
 800c81e:	9105      	str	r1, [sp, #20]
 800c820:	e7c4      	b.n	800c7ac <_svfiprintf_r+0x130>
 800c822:	fb0c 2101 	mla	r1, ip, r1, r2
 800c826:	4604      	mov	r4, r0
 800c828:	2301      	movs	r3, #1
 800c82a:	e7f0      	b.n	800c80e <_svfiprintf_r+0x192>
 800c82c:	ab03      	add	r3, sp, #12
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	462a      	mov	r2, r5
 800c832:	4b0e      	ldr	r3, [pc, #56]	@ (800c86c <_svfiprintf_r+0x1f0>)
 800c834:	a904      	add	r1, sp, #16
 800c836:	4638      	mov	r0, r7
 800c838:	f3af 8000 	nop.w
 800c83c:	1c42      	adds	r2, r0, #1
 800c83e:	4606      	mov	r6, r0
 800c840:	d1d6      	bne.n	800c7f0 <_svfiprintf_r+0x174>
 800c842:	89ab      	ldrh	r3, [r5, #12]
 800c844:	065b      	lsls	r3, r3, #25
 800c846:	f53f af2d 	bmi.w	800c6a4 <_svfiprintf_r+0x28>
 800c84a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c84c:	e72c      	b.n	800c6a8 <_svfiprintf_r+0x2c>
 800c84e:	ab03      	add	r3, sp, #12
 800c850:	9300      	str	r3, [sp, #0]
 800c852:	462a      	mov	r2, r5
 800c854:	4b05      	ldr	r3, [pc, #20]	@ (800c86c <_svfiprintf_r+0x1f0>)
 800c856:	a904      	add	r1, sp, #16
 800c858:	4638      	mov	r0, r7
 800c85a:	f000 f879 	bl	800c950 <_printf_i>
 800c85e:	e7ed      	b.n	800c83c <_svfiprintf_r+0x1c0>
 800c860:	0800d0c8 	.word	0x0800d0c8
 800c864:	0800d0d2 	.word	0x0800d0d2
 800c868:	00000000 	.word	0x00000000
 800c86c:	0800c5c5 	.word	0x0800c5c5
 800c870:	0800d0ce 	.word	0x0800d0ce

0800c874 <_printf_common>:
 800c874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c878:	4616      	mov	r6, r2
 800c87a:	4698      	mov	r8, r3
 800c87c:	688a      	ldr	r2, [r1, #8]
 800c87e:	690b      	ldr	r3, [r1, #16]
 800c880:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c884:	4293      	cmp	r3, r2
 800c886:	bfb8      	it	lt
 800c888:	4613      	movlt	r3, r2
 800c88a:	6033      	str	r3, [r6, #0]
 800c88c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c890:	4607      	mov	r7, r0
 800c892:	460c      	mov	r4, r1
 800c894:	b10a      	cbz	r2, 800c89a <_printf_common+0x26>
 800c896:	3301      	adds	r3, #1
 800c898:	6033      	str	r3, [r6, #0]
 800c89a:	6823      	ldr	r3, [r4, #0]
 800c89c:	0699      	lsls	r1, r3, #26
 800c89e:	bf42      	ittt	mi
 800c8a0:	6833      	ldrmi	r3, [r6, #0]
 800c8a2:	3302      	addmi	r3, #2
 800c8a4:	6033      	strmi	r3, [r6, #0]
 800c8a6:	6825      	ldr	r5, [r4, #0]
 800c8a8:	f015 0506 	ands.w	r5, r5, #6
 800c8ac:	d106      	bne.n	800c8bc <_printf_common+0x48>
 800c8ae:	f104 0a19 	add.w	sl, r4, #25
 800c8b2:	68e3      	ldr	r3, [r4, #12]
 800c8b4:	6832      	ldr	r2, [r6, #0]
 800c8b6:	1a9b      	subs	r3, r3, r2
 800c8b8:	42ab      	cmp	r3, r5
 800c8ba:	dc26      	bgt.n	800c90a <_printf_common+0x96>
 800c8bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c8c0:	6822      	ldr	r2, [r4, #0]
 800c8c2:	3b00      	subs	r3, #0
 800c8c4:	bf18      	it	ne
 800c8c6:	2301      	movne	r3, #1
 800c8c8:	0692      	lsls	r2, r2, #26
 800c8ca:	d42b      	bmi.n	800c924 <_printf_common+0xb0>
 800c8cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c8d0:	4641      	mov	r1, r8
 800c8d2:	4638      	mov	r0, r7
 800c8d4:	47c8      	blx	r9
 800c8d6:	3001      	adds	r0, #1
 800c8d8:	d01e      	beq.n	800c918 <_printf_common+0xa4>
 800c8da:	6823      	ldr	r3, [r4, #0]
 800c8dc:	6922      	ldr	r2, [r4, #16]
 800c8de:	f003 0306 	and.w	r3, r3, #6
 800c8e2:	2b04      	cmp	r3, #4
 800c8e4:	bf02      	ittt	eq
 800c8e6:	68e5      	ldreq	r5, [r4, #12]
 800c8e8:	6833      	ldreq	r3, [r6, #0]
 800c8ea:	1aed      	subeq	r5, r5, r3
 800c8ec:	68a3      	ldr	r3, [r4, #8]
 800c8ee:	bf0c      	ite	eq
 800c8f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8f4:	2500      	movne	r5, #0
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	bfc4      	itt	gt
 800c8fa:	1a9b      	subgt	r3, r3, r2
 800c8fc:	18ed      	addgt	r5, r5, r3
 800c8fe:	2600      	movs	r6, #0
 800c900:	341a      	adds	r4, #26
 800c902:	42b5      	cmp	r5, r6
 800c904:	d11a      	bne.n	800c93c <_printf_common+0xc8>
 800c906:	2000      	movs	r0, #0
 800c908:	e008      	b.n	800c91c <_printf_common+0xa8>
 800c90a:	2301      	movs	r3, #1
 800c90c:	4652      	mov	r2, sl
 800c90e:	4641      	mov	r1, r8
 800c910:	4638      	mov	r0, r7
 800c912:	47c8      	blx	r9
 800c914:	3001      	adds	r0, #1
 800c916:	d103      	bne.n	800c920 <_printf_common+0xac>
 800c918:	f04f 30ff 	mov.w	r0, #4294967295
 800c91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c920:	3501      	adds	r5, #1
 800c922:	e7c6      	b.n	800c8b2 <_printf_common+0x3e>
 800c924:	18e1      	adds	r1, r4, r3
 800c926:	1c5a      	adds	r2, r3, #1
 800c928:	2030      	movs	r0, #48	@ 0x30
 800c92a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c92e:	4422      	add	r2, r4
 800c930:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c934:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c938:	3302      	adds	r3, #2
 800c93a:	e7c7      	b.n	800c8cc <_printf_common+0x58>
 800c93c:	2301      	movs	r3, #1
 800c93e:	4622      	mov	r2, r4
 800c940:	4641      	mov	r1, r8
 800c942:	4638      	mov	r0, r7
 800c944:	47c8      	blx	r9
 800c946:	3001      	adds	r0, #1
 800c948:	d0e6      	beq.n	800c918 <_printf_common+0xa4>
 800c94a:	3601      	adds	r6, #1
 800c94c:	e7d9      	b.n	800c902 <_printf_common+0x8e>
	...

0800c950 <_printf_i>:
 800c950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c954:	7e0f      	ldrb	r7, [r1, #24]
 800c956:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c958:	2f78      	cmp	r7, #120	@ 0x78
 800c95a:	4691      	mov	r9, r2
 800c95c:	4680      	mov	r8, r0
 800c95e:	460c      	mov	r4, r1
 800c960:	469a      	mov	sl, r3
 800c962:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c966:	d807      	bhi.n	800c978 <_printf_i+0x28>
 800c968:	2f62      	cmp	r7, #98	@ 0x62
 800c96a:	d80a      	bhi.n	800c982 <_printf_i+0x32>
 800c96c:	2f00      	cmp	r7, #0
 800c96e:	f000 80d1 	beq.w	800cb14 <_printf_i+0x1c4>
 800c972:	2f58      	cmp	r7, #88	@ 0x58
 800c974:	f000 80b8 	beq.w	800cae8 <_printf_i+0x198>
 800c978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c97c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c980:	e03a      	b.n	800c9f8 <_printf_i+0xa8>
 800c982:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c986:	2b15      	cmp	r3, #21
 800c988:	d8f6      	bhi.n	800c978 <_printf_i+0x28>
 800c98a:	a101      	add	r1, pc, #4	@ (adr r1, 800c990 <_printf_i+0x40>)
 800c98c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c990:	0800c9e9 	.word	0x0800c9e9
 800c994:	0800c9fd 	.word	0x0800c9fd
 800c998:	0800c979 	.word	0x0800c979
 800c99c:	0800c979 	.word	0x0800c979
 800c9a0:	0800c979 	.word	0x0800c979
 800c9a4:	0800c979 	.word	0x0800c979
 800c9a8:	0800c9fd 	.word	0x0800c9fd
 800c9ac:	0800c979 	.word	0x0800c979
 800c9b0:	0800c979 	.word	0x0800c979
 800c9b4:	0800c979 	.word	0x0800c979
 800c9b8:	0800c979 	.word	0x0800c979
 800c9bc:	0800cafb 	.word	0x0800cafb
 800c9c0:	0800ca27 	.word	0x0800ca27
 800c9c4:	0800cab5 	.word	0x0800cab5
 800c9c8:	0800c979 	.word	0x0800c979
 800c9cc:	0800c979 	.word	0x0800c979
 800c9d0:	0800cb1d 	.word	0x0800cb1d
 800c9d4:	0800c979 	.word	0x0800c979
 800c9d8:	0800ca27 	.word	0x0800ca27
 800c9dc:	0800c979 	.word	0x0800c979
 800c9e0:	0800c979 	.word	0x0800c979
 800c9e4:	0800cabd 	.word	0x0800cabd
 800c9e8:	6833      	ldr	r3, [r6, #0]
 800c9ea:	1d1a      	adds	r2, r3, #4
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	6032      	str	r2, [r6, #0]
 800c9f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c9f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	e09c      	b.n	800cb36 <_printf_i+0x1e6>
 800c9fc:	6833      	ldr	r3, [r6, #0]
 800c9fe:	6820      	ldr	r0, [r4, #0]
 800ca00:	1d19      	adds	r1, r3, #4
 800ca02:	6031      	str	r1, [r6, #0]
 800ca04:	0606      	lsls	r6, r0, #24
 800ca06:	d501      	bpl.n	800ca0c <_printf_i+0xbc>
 800ca08:	681d      	ldr	r5, [r3, #0]
 800ca0a:	e003      	b.n	800ca14 <_printf_i+0xc4>
 800ca0c:	0645      	lsls	r5, r0, #25
 800ca0e:	d5fb      	bpl.n	800ca08 <_printf_i+0xb8>
 800ca10:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ca14:	2d00      	cmp	r5, #0
 800ca16:	da03      	bge.n	800ca20 <_printf_i+0xd0>
 800ca18:	232d      	movs	r3, #45	@ 0x2d
 800ca1a:	426d      	negs	r5, r5
 800ca1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca20:	4858      	ldr	r0, [pc, #352]	@ (800cb84 <_printf_i+0x234>)
 800ca22:	230a      	movs	r3, #10
 800ca24:	e011      	b.n	800ca4a <_printf_i+0xfa>
 800ca26:	6821      	ldr	r1, [r4, #0]
 800ca28:	6833      	ldr	r3, [r6, #0]
 800ca2a:	0608      	lsls	r0, r1, #24
 800ca2c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ca30:	d402      	bmi.n	800ca38 <_printf_i+0xe8>
 800ca32:	0649      	lsls	r1, r1, #25
 800ca34:	bf48      	it	mi
 800ca36:	b2ad      	uxthmi	r5, r5
 800ca38:	2f6f      	cmp	r7, #111	@ 0x6f
 800ca3a:	4852      	ldr	r0, [pc, #328]	@ (800cb84 <_printf_i+0x234>)
 800ca3c:	6033      	str	r3, [r6, #0]
 800ca3e:	bf14      	ite	ne
 800ca40:	230a      	movne	r3, #10
 800ca42:	2308      	moveq	r3, #8
 800ca44:	2100      	movs	r1, #0
 800ca46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ca4a:	6866      	ldr	r6, [r4, #4]
 800ca4c:	60a6      	str	r6, [r4, #8]
 800ca4e:	2e00      	cmp	r6, #0
 800ca50:	db05      	blt.n	800ca5e <_printf_i+0x10e>
 800ca52:	6821      	ldr	r1, [r4, #0]
 800ca54:	432e      	orrs	r6, r5
 800ca56:	f021 0104 	bic.w	r1, r1, #4
 800ca5a:	6021      	str	r1, [r4, #0]
 800ca5c:	d04b      	beq.n	800caf6 <_printf_i+0x1a6>
 800ca5e:	4616      	mov	r6, r2
 800ca60:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca64:	fb03 5711 	mls	r7, r3, r1, r5
 800ca68:	5dc7      	ldrb	r7, [r0, r7]
 800ca6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca6e:	462f      	mov	r7, r5
 800ca70:	42bb      	cmp	r3, r7
 800ca72:	460d      	mov	r5, r1
 800ca74:	d9f4      	bls.n	800ca60 <_printf_i+0x110>
 800ca76:	2b08      	cmp	r3, #8
 800ca78:	d10b      	bne.n	800ca92 <_printf_i+0x142>
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	07df      	lsls	r7, r3, #31
 800ca7e:	d508      	bpl.n	800ca92 <_printf_i+0x142>
 800ca80:	6923      	ldr	r3, [r4, #16]
 800ca82:	6861      	ldr	r1, [r4, #4]
 800ca84:	4299      	cmp	r1, r3
 800ca86:	bfde      	ittt	le
 800ca88:	2330      	movle	r3, #48	@ 0x30
 800ca8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca92:	1b92      	subs	r2, r2, r6
 800ca94:	6122      	str	r2, [r4, #16]
 800ca96:	f8cd a000 	str.w	sl, [sp]
 800ca9a:	464b      	mov	r3, r9
 800ca9c:	aa03      	add	r2, sp, #12
 800ca9e:	4621      	mov	r1, r4
 800caa0:	4640      	mov	r0, r8
 800caa2:	f7ff fee7 	bl	800c874 <_printf_common>
 800caa6:	3001      	adds	r0, #1
 800caa8:	d14a      	bne.n	800cb40 <_printf_i+0x1f0>
 800caaa:	f04f 30ff 	mov.w	r0, #4294967295
 800caae:	b004      	add	sp, #16
 800cab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cab4:	6823      	ldr	r3, [r4, #0]
 800cab6:	f043 0320 	orr.w	r3, r3, #32
 800caba:	6023      	str	r3, [r4, #0]
 800cabc:	4832      	ldr	r0, [pc, #200]	@ (800cb88 <_printf_i+0x238>)
 800cabe:	2778      	movs	r7, #120	@ 0x78
 800cac0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cac4:	6823      	ldr	r3, [r4, #0]
 800cac6:	6831      	ldr	r1, [r6, #0]
 800cac8:	061f      	lsls	r7, r3, #24
 800caca:	f851 5b04 	ldr.w	r5, [r1], #4
 800cace:	d402      	bmi.n	800cad6 <_printf_i+0x186>
 800cad0:	065f      	lsls	r7, r3, #25
 800cad2:	bf48      	it	mi
 800cad4:	b2ad      	uxthmi	r5, r5
 800cad6:	6031      	str	r1, [r6, #0]
 800cad8:	07d9      	lsls	r1, r3, #31
 800cada:	bf44      	itt	mi
 800cadc:	f043 0320 	orrmi.w	r3, r3, #32
 800cae0:	6023      	strmi	r3, [r4, #0]
 800cae2:	b11d      	cbz	r5, 800caec <_printf_i+0x19c>
 800cae4:	2310      	movs	r3, #16
 800cae6:	e7ad      	b.n	800ca44 <_printf_i+0xf4>
 800cae8:	4826      	ldr	r0, [pc, #152]	@ (800cb84 <_printf_i+0x234>)
 800caea:	e7e9      	b.n	800cac0 <_printf_i+0x170>
 800caec:	6823      	ldr	r3, [r4, #0]
 800caee:	f023 0320 	bic.w	r3, r3, #32
 800caf2:	6023      	str	r3, [r4, #0]
 800caf4:	e7f6      	b.n	800cae4 <_printf_i+0x194>
 800caf6:	4616      	mov	r6, r2
 800caf8:	e7bd      	b.n	800ca76 <_printf_i+0x126>
 800cafa:	6833      	ldr	r3, [r6, #0]
 800cafc:	6825      	ldr	r5, [r4, #0]
 800cafe:	6961      	ldr	r1, [r4, #20]
 800cb00:	1d18      	adds	r0, r3, #4
 800cb02:	6030      	str	r0, [r6, #0]
 800cb04:	062e      	lsls	r6, r5, #24
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	d501      	bpl.n	800cb0e <_printf_i+0x1be>
 800cb0a:	6019      	str	r1, [r3, #0]
 800cb0c:	e002      	b.n	800cb14 <_printf_i+0x1c4>
 800cb0e:	0668      	lsls	r0, r5, #25
 800cb10:	d5fb      	bpl.n	800cb0a <_printf_i+0x1ba>
 800cb12:	8019      	strh	r1, [r3, #0]
 800cb14:	2300      	movs	r3, #0
 800cb16:	6123      	str	r3, [r4, #16]
 800cb18:	4616      	mov	r6, r2
 800cb1a:	e7bc      	b.n	800ca96 <_printf_i+0x146>
 800cb1c:	6833      	ldr	r3, [r6, #0]
 800cb1e:	1d1a      	adds	r2, r3, #4
 800cb20:	6032      	str	r2, [r6, #0]
 800cb22:	681e      	ldr	r6, [r3, #0]
 800cb24:	6862      	ldr	r2, [r4, #4]
 800cb26:	2100      	movs	r1, #0
 800cb28:	4630      	mov	r0, r6
 800cb2a:	f7f3 fbf9 	bl	8000320 <memchr>
 800cb2e:	b108      	cbz	r0, 800cb34 <_printf_i+0x1e4>
 800cb30:	1b80      	subs	r0, r0, r6
 800cb32:	6060      	str	r0, [r4, #4]
 800cb34:	6863      	ldr	r3, [r4, #4]
 800cb36:	6123      	str	r3, [r4, #16]
 800cb38:	2300      	movs	r3, #0
 800cb3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb3e:	e7aa      	b.n	800ca96 <_printf_i+0x146>
 800cb40:	6923      	ldr	r3, [r4, #16]
 800cb42:	4632      	mov	r2, r6
 800cb44:	4649      	mov	r1, r9
 800cb46:	4640      	mov	r0, r8
 800cb48:	47d0      	blx	sl
 800cb4a:	3001      	adds	r0, #1
 800cb4c:	d0ad      	beq.n	800caaa <_printf_i+0x15a>
 800cb4e:	6823      	ldr	r3, [r4, #0]
 800cb50:	079b      	lsls	r3, r3, #30
 800cb52:	d413      	bmi.n	800cb7c <_printf_i+0x22c>
 800cb54:	68e0      	ldr	r0, [r4, #12]
 800cb56:	9b03      	ldr	r3, [sp, #12]
 800cb58:	4298      	cmp	r0, r3
 800cb5a:	bfb8      	it	lt
 800cb5c:	4618      	movlt	r0, r3
 800cb5e:	e7a6      	b.n	800caae <_printf_i+0x15e>
 800cb60:	2301      	movs	r3, #1
 800cb62:	4632      	mov	r2, r6
 800cb64:	4649      	mov	r1, r9
 800cb66:	4640      	mov	r0, r8
 800cb68:	47d0      	blx	sl
 800cb6a:	3001      	adds	r0, #1
 800cb6c:	d09d      	beq.n	800caaa <_printf_i+0x15a>
 800cb6e:	3501      	adds	r5, #1
 800cb70:	68e3      	ldr	r3, [r4, #12]
 800cb72:	9903      	ldr	r1, [sp, #12]
 800cb74:	1a5b      	subs	r3, r3, r1
 800cb76:	42ab      	cmp	r3, r5
 800cb78:	dcf2      	bgt.n	800cb60 <_printf_i+0x210>
 800cb7a:	e7eb      	b.n	800cb54 <_printf_i+0x204>
 800cb7c:	2500      	movs	r5, #0
 800cb7e:	f104 0619 	add.w	r6, r4, #25
 800cb82:	e7f5      	b.n	800cb70 <_printf_i+0x220>
 800cb84:	0800d0d9 	.word	0x0800d0d9
 800cb88:	0800d0ea 	.word	0x0800d0ea

0800cb8c <memmove>:
 800cb8c:	4288      	cmp	r0, r1
 800cb8e:	b510      	push	{r4, lr}
 800cb90:	eb01 0402 	add.w	r4, r1, r2
 800cb94:	d902      	bls.n	800cb9c <memmove+0x10>
 800cb96:	4284      	cmp	r4, r0
 800cb98:	4623      	mov	r3, r4
 800cb9a:	d807      	bhi.n	800cbac <memmove+0x20>
 800cb9c:	1e43      	subs	r3, r0, #1
 800cb9e:	42a1      	cmp	r1, r4
 800cba0:	d008      	beq.n	800cbb4 <memmove+0x28>
 800cba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbaa:	e7f8      	b.n	800cb9e <memmove+0x12>
 800cbac:	4402      	add	r2, r0
 800cbae:	4601      	mov	r1, r0
 800cbb0:	428a      	cmp	r2, r1
 800cbb2:	d100      	bne.n	800cbb6 <memmove+0x2a>
 800cbb4:	bd10      	pop	{r4, pc}
 800cbb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cbbe:	e7f7      	b.n	800cbb0 <memmove+0x24>

0800cbc0 <_sbrk_r>:
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	4d06      	ldr	r5, [pc, #24]	@ (800cbdc <_sbrk_r+0x1c>)
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	4604      	mov	r4, r0
 800cbc8:	4608      	mov	r0, r1
 800cbca:	602b      	str	r3, [r5, #0]
 800cbcc:	f7f6 f8b8 	bl	8002d40 <_sbrk>
 800cbd0:	1c43      	adds	r3, r0, #1
 800cbd2:	d102      	bne.n	800cbda <_sbrk_r+0x1a>
 800cbd4:	682b      	ldr	r3, [r5, #0]
 800cbd6:	b103      	cbz	r3, 800cbda <_sbrk_r+0x1a>
 800cbd8:	6023      	str	r3, [r4, #0]
 800cbda:	bd38      	pop	{r3, r4, r5, pc}
 800cbdc:	24000ea0 	.word	0x24000ea0

0800cbe0 <_realloc_r>:
 800cbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe4:	4607      	mov	r7, r0
 800cbe6:	4614      	mov	r4, r2
 800cbe8:	460d      	mov	r5, r1
 800cbea:	b921      	cbnz	r1, 800cbf6 <_realloc_r+0x16>
 800cbec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbf0:	4611      	mov	r1, r2
 800cbf2:	f7ff bc5b 	b.w	800c4ac <_malloc_r>
 800cbf6:	b92a      	cbnz	r2, 800cc04 <_realloc_r+0x24>
 800cbf8:	f7ff fbec 	bl	800c3d4 <_free_r>
 800cbfc:	4625      	mov	r5, r4
 800cbfe:	4628      	mov	r0, r5
 800cc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc04:	f000 f81a 	bl	800cc3c <_malloc_usable_size_r>
 800cc08:	4284      	cmp	r4, r0
 800cc0a:	4606      	mov	r6, r0
 800cc0c:	d802      	bhi.n	800cc14 <_realloc_r+0x34>
 800cc0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc12:	d8f4      	bhi.n	800cbfe <_realloc_r+0x1e>
 800cc14:	4621      	mov	r1, r4
 800cc16:	4638      	mov	r0, r7
 800cc18:	f7ff fc48 	bl	800c4ac <_malloc_r>
 800cc1c:	4680      	mov	r8, r0
 800cc1e:	b908      	cbnz	r0, 800cc24 <_realloc_r+0x44>
 800cc20:	4645      	mov	r5, r8
 800cc22:	e7ec      	b.n	800cbfe <_realloc_r+0x1e>
 800cc24:	42b4      	cmp	r4, r6
 800cc26:	4622      	mov	r2, r4
 800cc28:	4629      	mov	r1, r5
 800cc2a:	bf28      	it	cs
 800cc2c:	4632      	movcs	r2, r6
 800cc2e:	f7ff fbc3 	bl	800c3b8 <memcpy>
 800cc32:	4629      	mov	r1, r5
 800cc34:	4638      	mov	r0, r7
 800cc36:	f7ff fbcd 	bl	800c3d4 <_free_r>
 800cc3a:	e7f1      	b.n	800cc20 <_realloc_r+0x40>

0800cc3c <_malloc_usable_size_r>:
 800cc3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc40:	1f18      	subs	r0, r3, #4
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	bfbc      	itt	lt
 800cc46:	580b      	ldrlt	r3, [r1, r0]
 800cc48:	18c0      	addlt	r0, r0, r3
 800cc4a:	4770      	bx	lr

0800cc4c <_init>:
 800cc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4e:	bf00      	nop
 800cc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc52:	bc08      	pop	{r3}
 800cc54:	469e      	mov	lr, r3
 800cc56:	4770      	bx	lr

0800cc58 <_fini>:
 800cc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5a:	bf00      	nop
 800cc5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc5e:	bc08      	pop	{r3}
 800cc60:	469e      	mov	lr, r3
 800cc62:	4770      	bx	lr
