
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca30  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800cd00  0800cd00  0000dd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d1c8  0800d1c8  0000e1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800d1d0  0800d1d0  0000e1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d1d8  0800d1d8  0000e1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0800d1dc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e4c  2400006c  0800d248  0000f06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000eb8  0800d248  0000feb8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027070  00000000  00000000  0000f09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c46  00000000  00000000  0003610a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001928  00000000  00000000  00039d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013a7  00000000  00000000  0003b678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b7cc  00000000  00000000  0003ca1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020e42  00000000  00000000  000781eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017628b  00000000  00000000  0009902d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020f2b8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000734c  00000000  00000000  0020f2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000042  00000000  00000000  00216648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800cce8 	.word	0x0800cce8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0800cce8 	.word	0x0800cce8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <_ZN7BMS_MODC1Emiiihjii>:
/*********************************************************************************************************
 ** Function name:           BMS_MOD
 ** Descriptions:            Initialization function of teh class
 *********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT,
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
		uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG_V, int _LAG_T) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2200      	movs	r2, #0
 800071e:	751a      	strb	r2, [r3, #20]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000726:	619a      	str	r2, [r3, #24]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	22fa      	movs	r2, #250	@ 0xfa
 800072c:	61da      	str	r2, [r3, #28]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000734:	621a      	str	r2, [r3, #32]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800073c:	625a      	str	r2, [r3, #36]	@ 0x24
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000744:	629a      	str	r2, [r3, #40]	@ 0x28
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	699a      	ldr	r2, [r3, #24]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	6a1a      	ldr	r2, [r3, #32]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	639a      	str	r2, [r3, #56]	@ 0x38
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2200      	movs	r2, #0
 8000770:	641a      	str	r2, [r3, #64]	@ 0x40
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	645a      	str	r2, [r3, #68]	@ 0x44
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2200      	movs	r2, #0
 800077e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2200      	movs	r2, #0
 800078e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2200      	movs	r2, #0
 8000796:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2213      	movs	r2, #19
 800079e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	220a      	movs	r2, #10
 80007a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3354      	adds	r3, #84	@ 0x54
 80007ac:	2230      	movs	r2, #48	@ 0x30
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f00b fe1b 	bl	800c3ec <memset>
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2200      	movs	r2, #0
 80007ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2200      	movs	r2, #0
 80007c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2200      	movs	r2, #0
 80007ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f241 0268 	movw	r2, #4200	@ 0x1068
 80007d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2200      	movs	r2, #0
 80007dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2200      	movs	r2, #0
 80007e4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2200      	movs	r2, #0
 80007ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2200      	movs	r2, #0
 80007f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2200      	movs	r2, #0
 80007fc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	33a8      	adds	r3, #168	@ 0xa8
 8000804:	224c      	movs	r2, #76	@ 0x4c
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f00b fdef 	bl	800c3ec <memset>
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	33f4      	adds	r3, #244	@ 0xf4
 8000812:	2298      	movs	r2, #152	@ 0x98
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f00b fde8 	bl	800c3ec <memset>
	CANID = _ID;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	601a      	str	r2, [r3, #0]
	LIMIT_MAX_V = _MAXV;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	605a      	str	r2, [r3, #4]
	LIMIT_MIN_V = _MINV;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	683a      	ldr	r2, [r7, #0]
 800082c:	609a      	str	r2, [r3, #8]
	LIMIT_MAX_T = _MAXT;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	6a3a      	ldr	r2, [r7, #32]
 8000832:	60da      	str	r2, [r3, #12]
	NUM_CELLS = _NUMCELLS;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800083a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

	uint32_t now = HAL_GetTick();
 800083e:	f002 fc07 	bl	8003050 <HAL_GetTick>
 8000842:	6178      	str	r0, [r7, #20]

	time_lim_plotted_volts = now + _LAG_V;
 8000844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	441a      	add	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	631a      	str	r2, [r3, #48]	@ 0x30
	time_lim_sent_volts = now + _LAG_V;
 800084e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	441a      	add	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	635a      	str	r2, [r3, #52]	@ 0x34
	time_lim_received_volts = now + TIME_LIM_RECV_VOLTS + _LAG_V;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	6a1a      	ldr	r2, [r3, #32]
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	441a      	add	r2, r3
 8000860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000862:	441a      	add	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	639a      	str	r2, [r3, #56]	@ 0x38

	time_lim_plotted_temps = now + _LAG_T;
 8000868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	441a      	add	r2, r3
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	63da      	str	r2, [r3, #60]	@ 0x3c
	time_lim_sent_temps = now + _LAG_T;
 8000872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	441a      	add	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	641a      	str	r2, [r3, #64]	@ 0x40
	time_lim_received_temps = now + TIME_LIM_RECV_TEMPS + _LAG_T;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	441a      	add	r2, r3
 8000884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000886:	441a      	add	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	645a      	str	r2, [r3, #68]	@ 0x44
}
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	4618      	mov	r0, r3
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <_ZN7BMS_MOD12voltage_infoEPc>:

/*********************************************************************************************************
 ** Function name:           info
 ** Descriptions:            Function for printing the class data
 *********************************************************************************************************/
void BMS_MOD::voltage_info(char *buffer) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 80008a2:	f001 fc29 	bl	80020f8 <getUARTState>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b20      	cmp	r3, #32
 80008aa:	bf0c      	ite	eq
 80008ac:	2301      	moveq	r3, #1
 80008ae:	2300      	movne	r3, #0
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 8083 	beq.w	80009be <_ZN7BMS_MOD12voltage_infoEPc+0x126>
		print((char*) "\n***********************");
 80008b8:	4851      	ldr	r0, [pc, #324]	@ (8000a00 <_ZN7BMS_MOD12voltage_infoEPc+0x168>)
 80008ba:	f001 fbc3 	bl	8002044 <print>
		print((char*) "         BMS");
 80008be:	4851      	ldr	r0, [pc, #324]	@ (8000a04 <_ZN7BMS_MOD12voltage_infoEPc+0x16c>)
 80008c0:	f001 fbc0 	bl	8002044 <print>
		print((char*) "***********************");
 80008c4:	4850      	ldr	r0, [pc, #320]	@ (8000a08 <_ZN7BMS_MOD12voltage_infoEPc+0x170>)
 80008c6:	f001 fbbd 	bl	8002044 <print>
		sprintf(buffer, " - ERROR:     %i", error_volt);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80008d0:	461a      	mov	r2, r3
 80008d2:	494e      	ldr	r1, [pc, #312]	@ (8000a0c <_ZN7BMS_MOD12voltage_infoEPc+0x174>)
 80008d4:	6838      	ldr	r0, [r7, #0]
 80008d6:	f00b fd67 	bl	800c3a8 <siprintf>
		print(buffer);
 80008da:	6838      	ldr	r0, [r7, #0]
 80008dc:	f001 fbb2 	bl	8002044 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	494a      	ldr	r1, [pc, #296]	@ (8000a10 <_ZN7BMS_MOD12voltage_infoEPc+0x178>)
 80008e8:	6838      	ldr	r0, [r7, #0]
 80008ea:	f00b fd5d 	bl	800c3a8 <siprintf>
		print(buffer);
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	f001 fba8 	bl	8002044 <print>
		sprintf(buffer, " - MAX V =    %i mV", MAX_V);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	691b      	ldr	r3, [r3, #16]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4946      	ldr	r1, [pc, #280]	@ (8000a14 <_ZN7BMS_MOD12voltage_infoEPc+0x17c>)
 80008fc:	6838      	ldr	r0, [r7, #0]
 80008fe:	f00b fd53 	bl	800c3a8 <siprintf>
		print(buffer);
 8000902:	6838      	ldr	r0, [r7, #0]
 8000904:	f001 fb9e 	bl	8002044 <print>
		sprintf(buffer, " - MIN V =    %i mV", MIN_V);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800090e:	461a      	mov	r2, r3
 8000910:	4941      	ldr	r1, [pc, #260]	@ (8000a18 <_ZN7BMS_MOD12voltage_infoEPc+0x180>)
 8000912:	6838      	ldr	r0, [r7, #0]
 8000914:	f00b fd48 	bl	800c3a8 <siprintf>
		print(buffer);
 8000918:	6838      	ldr	r0, [r7, #0]
 800091a:	f001 fb93 	bl	8002044 <print>
		print((char*) "-----------------------");
 800091e:	483f      	ldr	r0, [pc, #252]	@ (8000a1c <_ZN7BMS_MOD12voltage_infoEPc+0x184>)
 8000920:	f001 fb90 	bl	8002044 <print>
		sprintf(buffer, "VOLTS (mV): [%i", cellVoltagemV[0]);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800092a:	461a      	mov	r2, r3
 800092c:	493c      	ldr	r1, [pc, #240]	@ (8000a20 <_ZN7BMS_MOD12voltage_infoEPc+0x188>)
 800092e:	6838      	ldr	r0, [r7, #0]
 8000930:	f00b fd3a 	bl	800c3a8 <siprintf>
		printnl(buffer);
 8000934:	6838      	ldr	r0, [r7, #0]
 8000936:	f001 fba3 	bl	8002080 <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	e00f      	b.n	8000960 <_ZN7BMS_MOD12voltage_infoEPc+0xc8>
			sprintf(buffer, ", %i", cellVoltagemV[i]);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	322a      	adds	r2, #42	@ 0x2a
 8000946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094a:	461a      	mov	r2, r3
 800094c:	4935      	ldr	r1, [pc, #212]	@ (8000a24 <_ZN7BMS_MOD12voltage_infoEPc+0x18c>)
 800094e:	6838      	ldr	r0, [r7, #0]
 8000950:	f00b fd2a 	bl	800c3a8 <siprintf>
			printnl(buffer);
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f001 fb93 	bl	8002080 <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3301      	adds	r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000966:	461a      	mov	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4293      	cmp	r3, r2
 800096c:	dbe8      	blt.n	8000940 <_ZN7BMS_MOD12voltage_infoEPc+0xa8>
		}

		for (int i = 0; i < NUM_CELLS; i++) {
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	e00e      	b.n	8000992 <_ZN7BMS_MOD12voltage_infoEPc+0xfa>
			voltage_acum += cellVoltagemV[i];
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	312a      	adds	r1, #42	@ 0x2a
 8000980:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000984:	441a      	add	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		for (int i = 0; i < NUM_CELLS; i++) {
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	3301      	adds	r3, #1
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000998:	461a      	mov	r2, r3
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	4293      	cmp	r3, r2
 800099e:	dbe9      	blt.n	8000974 <_ZN7BMS_MOD12voltage_infoEPc+0xdc>
		}

		print((char*) "]");
 80009a0:	4821      	ldr	r0, [pc, #132]	@ (8000a28 <_ZN7BMS_MOD12voltage_infoEPc+0x190>)
 80009a2:	f001 fb4f 	bl	8002044 <print>
		sprintf(buffer, " - V(max) = %i mV || V(min) = %i", MAX_V, MIN_V);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	691a      	ldr	r2, [r3, #16]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009b0:	491e      	ldr	r1, [pc, #120]	@ (8000a2c <_ZN7BMS_MOD12voltage_infoEPc+0x194>)
 80009b2:	6838      	ldr	r0, [r7, #0]
 80009b4:	f00b fcf8 	bl	800c3a8 <siprintf>
		print(buffer);
 80009b8:	6838      	ldr	r0, [r7, #0]
 80009ba:	f001 fb43 	bl	8002044 <print>
	}
	sprintf(buffer, "- BALANCING V = %i mV", BALANCING_V);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009c4:	461a      	mov	r2, r3
 80009c6:	491a      	ldr	r1, [pc, #104]	@ (8000a30 <_ZN7BMS_MOD12voltage_infoEPc+0x198>)
 80009c8:	6838      	ldr	r0, [r7, #0]
 80009ca:	f00b fced 	bl	800c3a8 <siprintf>
	print(buffer);
 80009ce:	6838      	ldr	r0, [r7, #0]
 80009d0:	f001 fb38 	bl	8002044 <print>

	sprintf(buffer, "- STACK VOLTAGE = %i V", voltage_acum / 1000);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009da:	4a16      	ldr	r2, [pc, #88]	@ (8000a34 <_ZN7BMS_MOD12voltage_infoEPc+0x19c>)
 80009dc:	fb82 1203 	smull	r1, r2, r2, r3
 80009e0:	1192      	asrs	r2, r2, #6
 80009e2:	17db      	asrs	r3, r3, #31
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	4913      	ldr	r1, [pc, #76]	@ (8000a38 <_ZN7BMS_MOD12voltage_infoEPc+0x1a0>)
 80009ea:	6838      	ldr	r0, [r7, #0]
 80009ec:	f00b fcdc 	bl	800c3a8 <siprintf>
	print(buffer);
 80009f0:	6838      	ldr	r0, [r7, #0]
 80009f2:	f001 fb27 	bl	8002044 <print>
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	0800cd00 	.word	0x0800cd00
 8000a04:	0800cd1c 	.word	0x0800cd1c
 8000a08:	0800cd2c 	.word	0x0800cd2c
 8000a0c:	0800cd44 	.word	0x0800cd44
 8000a10:	0800cd58 	.word	0x0800cd58
 8000a14:	0800cd6c 	.word	0x0800cd6c
 8000a18:	0800cd80 	.word	0x0800cd80
 8000a1c:	0800cd94 	.word	0x0800cd94
 8000a20:	0800cdac 	.word	0x0800cdac
 8000a24:	0800cdbc 	.word	0x0800cdbc
 8000a28:	0800cdc4 	.word	0x0800cdc4
 8000a2c:	0800cdc8 	.word	0x0800cdc8
 8000a30:	0800cdec 	.word	0x0800cdec
 8000a34:	10624dd3 	.word	0x10624dd3
 8000a38:	0800ce04 	.word	0x0800ce04

08000a3c <_ZN7BMS_MOD16temperature_infoEPc>:

// ********************************************************************************************************
// **Function name:           info
// **Descriptions:            Function for printing the class data
// **********************************************************************************************************
void BMS_MOD::temperature_info(char *buffer) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
	if (getUARTState() == HAL_UART_STATE_READY) //Send the message just if there is a serial por connected
 8000a46:	f001 fb57 	bl	80020f8 <getUARTState>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b20      	cmp	r3, #32
 8000a4e:	bf0c      	ite	eq
 8000a50:	2301      	moveq	r3, #1
 8000a52:	2300      	movne	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d063      	beq.n	8000b22 <_ZN7BMS_MOD16temperature_infoEPc+0xe6>
	{
		print((char*) "\n***********************");
 8000a5a:	4834      	ldr	r0, [pc, #208]	@ (8000b2c <_ZN7BMS_MOD16temperature_infoEPc+0xf0>)
 8000a5c:	f001 faf2 	bl	8002044 <print>
		print((char*) "     Temperatures");
 8000a60:	4833      	ldr	r0, [pc, #204]	@ (8000b30 <_ZN7BMS_MOD16temperature_infoEPc+0xf4>)
 8000a62:	f001 faef 	bl	8002044 <print>
		print((char*) "***********************");
 8000a66:	4833      	ldr	r0, [pc, #204]	@ (8000b34 <_ZN7BMS_MOD16temperature_infoEPc+0xf8>)
 8000a68:	f001 faec 	bl	8002044 <print>
		sprintf(buffer, " - ERROR:     %i", error_temp);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000a72:	461a      	mov	r2, r3
 8000a74:	4930      	ldr	r1, [pc, #192]	@ (8000b38 <_ZN7BMS_MOD16temperature_infoEPc+0xfc>)
 8000a76:	6838      	ldr	r0, [r7, #0]
 8000a78:	f00b fc96 	bl	800c3a8 <siprintf>
		print(buffer);
 8000a7c:	6838      	ldr	r0, [r7, #0]
 8000a7e:	f001 fae1 	bl	8002044 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID + 20);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3314      	adds	r3, #20
 8000a88:	461a      	mov	r2, r3
 8000a8a:	492c      	ldr	r1, [pc, #176]	@ (8000b3c <_ZN7BMS_MOD16temperature_infoEPc+0x100>)
 8000a8c:	6838      	ldr	r0, [r7, #0]
 8000a8e:	f00b fc8b 	bl	800c3a8 <siprintf>
		print(buffer);
 8000a92:	6838      	ldr	r0, [r7, #0]
 8000a94:	f001 fad6 	bl	8002044 <print>
		sprintf(buffer, " - MAX T =    %i ºC", MAX_T);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4927      	ldr	r1, [pc, #156]	@ (8000b40 <_ZN7BMS_MOD16temperature_infoEPc+0x104>)
 8000aa2:	6838      	ldr	r0, [r7, #0]
 8000aa4:	f00b fc80 	bl	800c3a8 <siprintf>
		print(buffer);
 8000aa8:	6838      	ldr	r0, [r7, #0]
 8000aaa:	f001 facb 	bl	8002044 <print>
		sprintf(buffer, " - MIN T =    %i ºC", MIN_T);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4923      	ldr	r1, [pc, #140]	@ (8000b44 <_ZN7BMS_MOD16temperature_infoEPc+0x108>)
 8000ab8:	6838      	ldr	r0, [r7, #0]
 8000aba:	f00b fc75 	bl	800c3a8 <siprintf>
		print(buffer);
 8000abe:	6838      	ldr	r0, [r7, #0]
 8000ac0:	f001 fac0 	bl	8002044 <print>
		sprintf(buffer, " - LIM T =    %i ºC", LIMIT_MAX_T);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	491f      	ldr	r1, [pc, #124]	@ (8000b48 <_ZN7BMS_MOD16temperature_infoEPc+0x10c>)
 8000acc:	6838      	ldr	r0, [r7, #0]
 8000ace:	f00b fc6b 	bl	800c3a8 <siprintf>
		print((char*) "-----------------------");
 8000ad2:	481e      	ldr	r0, [pc, #120]	@ (8000b4c <_ZN7BMS_MOD16temperature_infoEPc+0x110>)
 8000ad4:	f001 fab6 	bl	8002044 <print>
		sprintf(buffer, "Temperatures (ºC): [%i", cellTemperature[0]);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ade:	461a      	mov	r2, r3
 8000ae0:	491b      	ldr	r1, [pc, #108]	@ (8000b50 <_ZN7BMS_MOD16temperature_infoEPc+0x114>)
 8000ae2:	6838      	ldr	r0, [r7, #0]
 8000ae4:	f00b fc60 	bl	800c3a8 <siprintf>
		printnl(buffer);
 8000ae8:	6838      	ldr	r0, [r7, #0]
 8000aea:	f001 fac9 	bl	8002080 <printnl>
		for (int i = 1; i < 38; i++) {
 8000aee:	2301      	movs	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	e010      	b.n	8000b16 <_ZN7BMS_MOD16temperature_infoEPc+0xda>
			sprintf(buffer, ", %i", cellTemperature[i]);
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	333c      	adds	r3, #60	@ 0x3c
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4914      	ldr	r1, [pc, #80]	@ (8000b54 <_ZN7BMS_MOD16temperature_infoEPc+0x118>)
 8000b04:	6838      	ldr	r0, [r7, #0]
 8000b06:	f00b fc4f 	bl	800c3a8 <siprintf>
			printnl(buffer);
 8000b0a:	6838      	ldr	r0, [r7, #0]
 8000b0c:	f001 fab8 	bl	8002080 <printnl>
		for (int i = 1; i < 38; i++) {
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	3301      	adds	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2b25      	cmp	r3, #37	@ 0x25
 8000b1a:	ddeb      	ble.n	8000af4 <_ZN7BMS_MOD16temperature_infoEPc+0xb8>
		}
		print((char*) "]");
 8000b1c:	480e      	ldr	r0, [pc, #56]	@ (8000b58 <_ZN7BMS_MOD16temperature_infoEPc+0x11c>)
 8000b1e:	f001 fa91 	bl	8002044 <print>

	}
}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	0800cd00 	.word	0x0800cd00
 8000b30:	0800ce1c 	.word	0x0800ce1c
 8000b34:	0800cd2c 	.word	0x0800cd2c
 8000b38:	0800cd44 	.word	0x0800cd44
 8000b3c:	0800cd58 	.word	0x0800cd58
 8000b40:	0800ce30 	.word	0x0800ce30
 8000b44:	0800ce48 	.word	0x0800ce48
 8000b48:	0800ce60 	.word	0x0800ce60
 8000b4c:	0800cd94 	.word	0x0800cd94
 8000b50:	0800ce78 	.word	0x0800ce78
 8000b54:	0800cdbc 	.word	0x0800cdbc
 8000b58:	0800cdc4 	.word	0x0800cdc4

08000b5c <_ZN7BMS_MOD5parseEmPhm>:

/*********************************************************************************************************
 ** Function name:           parse
 ** Descriptions:            Function for parsing the received data via CAN protocol
 *********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	603b      	str	r3, [r7, #0]
	if (id > CANID && id < CANID + 30) {
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	f240 8113 	bls.w	8000d9c <_ZN7BMS_MOD5parseEmPhm+0x240>
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	331e      	adds	r3, #30
 8000b7c:	68ba      	ldr	r2, [r7, #8]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	f080 810c 	bcs.w	8000d9c <_ZN7BMS_MOD5parseEmPhm+0x240>
		int m = id % CANID;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b8e:	fb01 f202 	mul.w	r2, r1, r2
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	617b      	str	r3, [r7, #20]
		int pos = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
		if (m >= 1 && m <= 5) {
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f340 8088 	ble.w	8000cb2 <_ZN7BMS_MOD5parseEmPhm+0x156>
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	2b05      	cmp	r3, #5
 8000ba6:	f300 8084 	bgt.w	8000cb2 <_ZN7BMS_MOD5parseEmPhm+0x156>
			time_lim_received_volts = t + TIME_LIM_RECV_VOLTS;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	6a1a      	ldr	r2, [r3, #32]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	441a      	add	r2, r3
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	639a      	str	r2, [r3, #56]	@ 0x38

			for (int i = 0; i < 4; i++) {
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bba:	e03c      	b.n	8000c36 <_ZN7BMS_MOD5parseEmPhm+0xda>
				pos = (m - 1) * 4 + i;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bc4:	4413      	add	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
				if (pos >= 19)
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	2b12      	cmp	r3, #18
 8000bcc:	dc37      	bgt.n	8000c3e <_ZN7BMS_MOD5parseEmPhm+0xe2>
					break;

				cellVoltagemV[pos] = (buf[2 * i] << 8) | buf[2 * i + 1];
 8000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	021b      	lsls	r3, r3, #8
 8000bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bde:	0052      	lsls	r2, r2, #1
 8000be0:	3201      	adds	r2, #1
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	440a      	add	r2, r1
 8000be6:	7812      	ldrb	r2, [r2, #0]
 8000be8:	ea43 0102 	orr.w	r1, r3, r2
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	322a      	adds	r2, #42	@ 0x2a
 8000bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				 //error_volt = BMS_OK;
				 } else {
				 flag_error_volt[pos] = 0;
				 }*/

				if ((cellVoltagemV[pos] > LIMIT_MAX_V) && pos < NUM_CELLS) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	322a      	adds	r2, #42	@ 0x2a
 8000bfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dd13      	ble.n	8000c30 <_ZN7BMS_MOD5parseEmPhm+0xd4>
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000c0e:	461a      	mov	r2, r3
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4293      	cmp	r3, r2
 8000c14:	da0c      	bge.n	8000c30 <_ZN7BMS_MOD5parseEmPhm+0xd4>
					flag_error_volt[pos]++;
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	3314      	adds	r3, #20
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	68f9      	ldr	r1, [r7, #12]
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	3314      	adds	r3, #20
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	605a      	str	r2, [r3, #4]
			for (int i = 0; i < 4; i++) {
 8000c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c32:	3301      	adds	r3, #1
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	ddbf      	ble.n	8000bbc <_ZN7BMS_MOD5parseEmPhm+0x60>
 8000c3c:	e000      	b.n	8000c40 <_ZN7BMS_MOD5parseEmPhm+0xe4>
					break;
 8000c3e:	bf00      	nop
					//} else {
					//flag_error_volt[pos] = 0;
				}
			}

			MAX_V = cellVoltagemV[0];
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	611a      	str	r2, [r3, #16]
			MIN_V = cellVoltagemV[0];
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			for (int i = 1; i < 19; i++) {
 8000c56:	2301      	movs	r3, #1
 8000c58:	623b      	str	r3, [r7, #32]
 8000c5a:	e025      	b.n	8000ca8 <_ZN7BMS_MOD5parseEmPhm+0x14c>
				if (cellVoltagemV[i] > MAX_V)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6a3a      	ldr	r2, [r7, #32]
 8000c60:	322a      	adds	r2, #42	@ 0x2a
 8000c62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	dd07      	ble.n	8000c7e <_ZN7BMS_MOD5parseEmPhm+0x122>
					MAX_V = cellVoltagemV[i];
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6a3a      	ldr	r2, [r7, #32]
 8000c72:	322a      	adds	r2, #42	@ 0x2a
 8000c74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	e011      	b.n	8000ca2 <_ZN7BMS_MOD5parseEmPhm+0x146>
				else if (cellVoltagemV[i] < MIN_V)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	6a3a      	ldr	r2, [r7, #32]
 8000c82:	322a      	adds	r2, #42	@ 0x2a
 8000c84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	da07      	bge.n	8000ca2 <_ZN7BMS_MOD5parseEmPhm+0x146>
					MIN_V = cellVoltagemV[i];
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6a3a      	ldr	r2, [r7, #32]
 8000c96:	322a      	adds	r2, #42	@ 0x2a
 8000c98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			for (int i = 1; i < 19; i++) {
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	623b      	str	r3, [r7, #32]
 8000ca8:	6a3b      	ldr	r3, [r7, #32]
 8000caa:	2b12      	cmp	r3, #18
 8000cac:	ddd6      	ble.n	8000c5c <_ZN7BMS_MOD5parseEmPhm+0x100>
			}

			return true;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e075      	b.n	8000d9e <_ZN7BMS_MOD5parseEmPhm+0x242>

		} else if (m >= 21 && m <= 25) {
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	2b14      	cmp	r3, #20
 8000cb6:	dd71      	ble.n	8000d9c <_ZN7BMS_MOD5parseEmPhm+0x240>
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	2b19      	cmp	r3, #25
 8000cbc:	dc6e      	bgt.n	8000d9c <_ZN7BMS_MOD5parseEmPhm+0x240>
			// m = 21 → packet 0, m = 25 → packet 4
			time_lim_received_temps = t + TIME_LIM_RECV_TEMPS;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	441a      	add	r2, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	645a      	str	r2, [r3, #68]	@ 0x44
			if (flag_charger == 1)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d104      	bne.n	8000cde <_ZN7BMS_MOD5parseEmPhm+0x182>
				module_send_message_CAN1(id, buf, 8);
 8000cd4:	2208      	movs	r2, #8
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	68b8      	ldr	r0, [r7, #8]
 8000cda:	f001 f951 	bl	8001f80 <module_send_message_CAN1>

			for (int i = 0; i < 8; i++) {
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	e016      	b.n	8000d12 <_ZN7BMS_MOD5parseEmPhm+0x1b6>
				pos = (m - 21) * 8 + i;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	3b15      	subs	r3, #21
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	69fa      	ldr	r2, [r7, #28]
 8000cec:	4413      	add	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
				if (pos >= 38)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	2b25      	cmp	r3, #37	@ 0x25
 8000cf4:	dc11      	bgt.n	8000d1a <_ZN7BMS_MOD5parseEmPhm+0x1be>
					break;

				cellTemperature[pos] = buf[i];
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	333c      	adds	r3, #60	@ 0x3c
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	6059      	str	r1, [r3, #4]
			for (int i = 0; i < 8; i++) {
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	61fb      	str	r3, [r7, #28]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	2b07      	cmp	r3, #7
 8000d16:	dde5      	ble.n	8000ce4 <_ZN7BMS_MOD5parseEmPhm+0x188>
 8000d18:	e000      	b.n	8000d1c <_ZN7BMS_MOD5parseEmPhm+0x1c0>
					break;
 8000d1a:	bf00      	nop
				//if (cellTemperature[pos] > LIMIT_MAX_T)
				//	error_temp = BMS_ERROR_TEMP;

			}

			MAX_T = cellTemperature[0];
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
			MIN_T = cellTemperature[0];
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			for (int i = 0; i < 38; i++) {
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	e02b      	b.n	8000d92 <_ZN7BMS_MOD5parseEmPhm+0x236>
				if (cellTemperature[i] > MAX_T)
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	333c      	adds	r3, #60	@ 0x3c
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dd09      	ble.n	8000d64 <_ZN7BMS_MOD5parseEmPhm+0x208>
					MAX_T = cellTemperature[i];
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	333c      	adds	r3, #60	@ 0x3c
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8000d62:	e013      	b.n	8000d8c <_ZN7BMS_MOD5parseEmPhm+0x230>
				else if (cellTemperature[i] < MIN_T)
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	333c      	adds	r3, #60	@ 0x3c
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000d76:	429a      	cmp	r2, r3
 8000d78:	da08      	bge.n	8000d8c <_ZN7BMS_MOD5parseEmPhm+0x230>
					MIN_T = cellTemperature[i];
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	333c      	adds	r3, #60	@ 0x3c
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			for (int i = 0; i < 38; i++) {
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2b25      	cmp	r3, #37	@ 0x25
 8000d96:	ddd0      	ble.n	8000d3a <_ZN7BMS_MOD5parseEmPhm+0x1de>
			}

			return true;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e000      	b.n	8000d9e <_ZN7BMS_MOD5parseEmPhm+0x242>
			error_temp = 0;
		}*/

	}

	return false;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3728      	adds	r7, #40	@ 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_ZN7BMS_MOD13query_voltageEmPc>:

/*********************************************************************************************************
 ** Function name:           query_voltage
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/
int BMS_MOD::query_voltage(uint32_t time, char *buffer) {
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
	// Shunt voltage in milivolts

	if (get_state() == charge) {
 8000db2:	f001 f9d1 	bl	8002158 <_Z9get_statev>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	bf0c      	ite	eq
 8000dbc:	2301      	moveq	r3, #1
 8000dbe:	2300      	movne	r3, #0
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d107      	bne.n	8000dd6 <_ZN7BMS_MOD13query_voltageEmPc+0x30>

	} else {

		//Don't do anything

		message_balancing[0] = 0;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		message_balancing[1] = 0;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
	}

	if (time > time_lim_sent_volts) {
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d91e      	bls.n	8000e1e <_ZN7BMS_MOD13query_voltageEmPc+0x78>
		time_lim_sent_volts += TIME_LIM_SEND_VOLTS;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	441a      	add	r2, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	635a      	str	r2, [r3, #52]	@ 0x34
		if (CANID != 0x00) { //It keeps sending 0x00 and dont know where
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d013      	beq.n	8000e1e <_ZN7BMS_MOD13query_voltageEmPc+0x78>
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6818      	ldr	r0, [r3, #0]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	3348      	adds	r3, #72	@ 0x48
 8000dfe:	2202      	movs	r2, #2
 8000e00:	4619      	mov	r1, r3
 8000e02:	f001 f8ff 	bl	8002004 <module_send_message_CAN2>
 8000e06:	4603      	mov	r3, r0
					!= HAL_OK) {
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf14      	ite	ne
 8000e0c:	2301      	movne	r3, #1
 8000e0e:	2300      	moveq	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <_ZN7BMS_MOD13query_voltageEmPc+0x78>
				error_volt = BMS_ERROR_COMMUNICATION;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			}
		}

	}

	if (time > time_lim_received_volts) {
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d904      	bls.n	8000e32 <_ZN7BMS_MOD13query_voltageEmPc+0x8c>

		error_volt = BMS_ERROR_COMMUNICATION;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8000e30:	e003      	b.n	8000e3a <_ZN7BMS_MOD13query_voltageEmPc+0x94>
	}
	else{
		error_volt = BMS_OK;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	}

	if (TIME_LIM_PLOT_VOLTS > 0 && time > time_lim_plotted_volts) {
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00f      	beq.n	8000e62 <_ZN7BMS_MOD13query_voltageEmPc+0xbc>
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d90a      	bls.n	8000e62 <_ZN7BMS_MOD13query_voltageEmPc+0xbc>
		time_lim_plotted_volts += TIME_LIM_PLOT_VOLTS;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	441a      	add	r2, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	631a      	str	r2, [r3, #48]	@ 0x30
		voltage_info(buffer);
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f7ff fd1b 	bl	8000898 <_ZN7BMS_MOD12voltage_infoEPc>
	}

	for (int i = 0; i < NUM_CELLS; i++) {
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	e00e      	b.n	8000e86 <_ZN7BMS_MOD13query_voltageEmPc+0xe0>
		voltage_acum += cellVoltagemV[i];
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6979      	ldr	r1, [r7, #20]
 8000e72:	312a      	adds	r1, #42	@ 0x2a
 8000e74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e78:	441a      	add	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	for (int i = 0; i < NUM_CELLS; i++) {
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	3301      	adds	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	4293      	cmp	r3, r2
 8000e92:	dbe9      	blt.n	8000e68 <_ZN7BMS_MOD13query_voltageEmPc+0xc2>
	}
	return error_volt;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <_ZN7BMS_MOD17query_temperatureEmPc>:
/*********************************************************************************************************
 ** Function name:           query_temperature
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/

int BMS_MOD::query_temperature(uint32_t time, char *buffer) {
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b084      	sub	sp, #16
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
// Function for performing a correct behavior
	if (time > time_lim_sent_temps) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE TEMPERATURES
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d912      	bls.n	8000ede <_ZN7BMS_MOD17query_temperatureEmPc+0x3c>
		time_lim_sent_temps += TIME_LIM_SEND_TEMPS;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec0:	441a      	add	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	641a      	str	r2, [r3, #64]	@ 0x40

		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f103 0014 	add.w	r0, r3, #20
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	334a      	adds	r3, #74	@ 0x4a
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f001 f895 	bl	8002004 <module_send_message_CAN2>
 8000eda:	4603      	mov	r3, r0
				!= HAL_OK) {
 8000edc:	2b00      	cmp	r3, #0
			//error_temp = BMS_ERROR_TEMP; // If the message is not sended then, error
		}
	}

	if (time_lim_sent_temps > 0 && time > time_lim_received_temps
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <_ZN7BMS_MOD17query_temperatureEmPc+0x4c>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	429a      	cmp	r2, r3
			&& time - time_lim_received_temps > TIME_LIM_RECV_TEMPS) {
		//error_temp = BMS_ERROR_COMMUNICATION;
	}

	if (TIME_LIM_PLOT_TEMPS > 0 && time > time_lim_plotted_temps) {
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00f      	beq.n	8000f16 <_ZN7BMS_MOD17query_temperatureEmPc+0x74>
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d90a      	bls.n	8000f16 <_ZN7BMS_MOD17query_temperatureEmPc+0x74>
		time_lim_plotted_temps += TIME_LIM_PLOT_TEMPS;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f08:	441a      	add	r2, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	63da      	str	r2, [r3, #60]	@ 0x3c
		temperature_info(buffer);
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f7ff fd93 	bl	8000a3c <_ZN7BMS_MOD16temperature_infoEPc>
	}

	return error_temp;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0

}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2201      	movs	r2, #1
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2202      	movs	r2, #2
 8000f48:	731a      	strb	r2, [r3, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	611a      	str	r2, [r3, #16]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f56:	615a      	str	r2, [r3, #20]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2264      	movs	r2, #100	@ 0x64
 8000f5c:	619a      	str	r2, [r3, #24]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4a18      	ldr	r2, [pc, #96]	@ (8000fc4 <_ZN7CPU_MODC1Emmi+0xa0>)
 8000f62:	61da      	str	r2, [r3, #28]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	621a      	str	r2, [r3, #32]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	69da      	ldr	r2, [r3, #28]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2200      	movs	r2, #0
 8000f84:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6a1a      	ldr	r2, [r3, #32]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	441a      	add	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	441a      	add	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	441a      	add	r2, r3
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	000f4240 	.word	0x000f4240

08000fc8 <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fdc:	d12e      	bne.n	800103c <_ZN7CPU_MOD5parseEmPhm+0x74>
        error = CPU_OK;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	69da      	ldr	r2, [r3, #28]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	441a      	add	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	7812      	ldrb	r2, [r2, #0]
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800100a:	dd15      	ble.n	8001038 <_ZN7CPU_MOD5parseEmPhm+0x70>
            error = CPU_BUS_LINE_OK;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2202      	movs	r2, #2
 8001010:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	330c      	adds	r3, #12
 800101a:	2201      	movs	r2, #1
 800101c:	4619      	mov	r1, r3
 800101e:	f000 ffaf 	bl	8001f80 <module_send_message_CAN1>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf14      	ite	ne
 8001028:	2301      	movne	r3, #1
 800102a:	2300      	moveq	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <_ZN7CPU_MOD5parseEmPhm+0x70>
                //error = CPU_ERROR_COMMUNICATION;
                print((char*)"error message");
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <_ZN7CPU_MOD5parseEmPhm+0x80>)
 8001034:	f001 f806 	bl	8002044 <print>
            }

        }
        return true;
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <_ZN7CPU_MOD5parseEmPhm+0x76>
    }
    return false;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	0800cf78 	.word	0x0800cf78

0800104c <_ZN7CPU_MOD5queryEmPc>:

// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function to check if i need to send a mesage new mesage and the received mesajes interval are within the limits
// ********************************************************************************************************
int CPU_MOD::query(uint32_t time, char* buffer) {
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
	// Function for performing a correct behaivour
    if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE BMS
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	429a      	cmp	r2, r3
 8001060:	d906      	bls.n	8001070 <_ZN7CPU_MOD5queryEmPc+0x24>
        time_lim_sended += TIME_LIM_SEND;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	441a      	add	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (time > time_lim_received)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	429a      	cmp	r2, r3
 8001078:	d90f      	bls.n	800109a <_ZN7CPU_MOD5queryEmPc+0x4e>
        //error = CPU_ERROR_COMMUNICATION; ///////Cheking if everything is alright each time

    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00b      	beq.n	800109a <_ZN7CPU_MOD5queryEmPc+0x4e>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	429a      	cmp	r2, r3
 800108a:	d906      	bls.n	800109a <_ZN7CPU_MOD5queryEmPc+0x4e>
        time_lim_plotted += TIME_LIM_PLOT;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6a1a      	ldr	r2, [r3, #32]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	441a      	add	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	621a      	str	r2, [r3, #32]
        //info(buffer);
    }
    return error;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	689b      	ldr	r3, [r3, #8]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_ZN7CPU_MOD11updateStateEi>:

void CPU_MOD::updateState(int s) {
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	731a      	strb	r2, [r3, #12]
    current_state = s;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	611a      	str	r2, [r3, #16]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX)
 80010ce:	b480      	push	{r7}
 80010d0:	b085      	sub	sp, #20
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2200      	movs	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2200      	movs	r2, #0
 80010ea:	721a      	strb	r2, [r3, #8]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2200      	movs	r2, #0
 80010f0:	725a      	strb	r2, [r3, #9]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001116:	621a      	str	r2, [r3, #32]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	22fa      	movs	r2, #250	@ 0xfa
 800111c:	625a      	str	r2, [r3, #36]	@ 0x24
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2232      	movs	r2, #50	@ 0x32
 8001122:	629a      	str	r2, [r3, #40]	@ 0x28
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2232      	movs	r2, #50	@ 0x32
 8001128:	62da      	str	r2, [r3, #44]	@ 0x2c
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	635a      	str	r2, [r3, #52]	@ 0x34
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	639a      	str	r2, [r3, #56]	@ 0x38
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2200      	movs	r2, #0
 8001140:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2200      	movs	r2, #0
 8001146:	641a      	str	r2, [r3, #64]	@ 0x40
{
    CANID = ID;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	605a      	str	r2, [r3, #4]
    C_MAX = _C_MAX;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	601a      	str	r2, [r3, #0]
    flag_error_current = 1;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2201      	movs	r2, #1
 8001158:	61da      	str	r2, [r3, #28]
}
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_ZN11Current_MOD5queryEiPc>:
// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char* buffer)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08c      	sub	sp, #48	@ 0x30
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
    error = Current_OK;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2200      	movs	r2, #0
 8001178:	631a      	str	r2, [r3, #48]	@ 0x30
    //printValue(Current);
    Current=(2.5-VoltageV)/0.0057; //Sensitivity is 5,7 mv/A
    */

    int Current1,Current2,Current3,Current4,Current5,Current6,Current7;
    Current1 = readAnalogValue();
 800117a:	f000 ffc7 	bl	800210c <readAnalogValue>
 800117e:	eef0 7a40 	vmov.f32	s15, s0
 8001182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001186:	ee17 3a90 	vmov	r3, s15
 800118a:	62bb      	str	r3, [r7, #40]	@ 0x28
    //HAL_Delay(3);
    Current2 = readAnalogValue();
 800118c:	f000 ffbe 	bl	800210c <readAnalogValue>
 8001190:	eef0 7a40 	vmov.f32	s15, s0
 8001194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001198:	ee17 3a90 	vmov	r3, s15
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
    //HAL_Delay(3);
    Current3 = readAnalogValue();
 800119e:	f000 ffb5 	bl	800210c <readAnalogValue>
 80011a2:	eef0 7a40 	vmov.f32	s15, s0
 80011a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011aa:	ee17 3a90 	vmov	r3, s15
 80011ae:	623b      	str	r3, [r7, #32]
    //HAL_Delay(3);
    Current4 = readAnalogValue();
 80011b0:	f000 ffac 	bl	800210c <readAnalogValue>
 80011b4:	eef0 7a40 	vmov.f32	s15, s0
 80011b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011bc:	ee17 3a90 	vmov	r3, s15
 80011c0:	61fb      	str	r3, [r7, #28]
    //HAL_Delay(3);
    Current5 = readAnalogValue();
 80011c2:	f000 ffa3 	bl	800210c <readAnalogValue>
 80011c6:	eef0 7a40 	vmov.f32	s15, s0
 80011ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ce:	ee17 3a90 	vmov	r3, s15
 80011d2:	61bb      	str	r3, [r7, #24]
    //HAL_Delay(3);
    Current6 = readAnalogValue();
 80011d4:	f000 ff9a 	bl	800210c <readAnalogValue>
 80011d8:	eef0 7a40 	vmov.f32	s15, s0
 80011dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e0:	ee17 3a90 	vmov	r3, s15
 80011e4:	617b      	str	r3, [r7, #20]
    //HAL_Delay(3);
    Current7 = readAnalogValue();
 80011e6:	f000 ff91 	bl	800210c <readAnalogValue>
 80011ea:	eef0 7a40 	vmov.f32	s15, s0
 80011ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f2:	ee17 3a90 	vmov	r3, s15
 80011f6:	613b      	str	r3, [r7, #16]
    //HAL_Delay(3);

    Current = (Current1+Current2+Current3+Current4+Current5+Current6+Current7)/7;
 80011f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fc:	441a      	add	r2, r3
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	441a      	add	r2, r3
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	441a      	add	r2, r3
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	441a      	add	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	441a      	add	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4413      	add	r3, r2
 8001212:	4a5f      	ldr	r2, [pc, #380]	@ (8001390 <_ZN11Current_MOD5queryEiPc+0x228>)
 8001214:	fb82 1203 	smull	r1, r2, r2, r3
 8001218:	441a      	add	r2, r3
 800121a:	1092      	asrs	r2, r2, #2
 800121c:	17db      	asrs	r3, r3, #31
 800121e:	1ad2      	subs	r2, r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	63da      	str	r2, [r3, #60]	@ 0x3c

    Current = 0.22727 * Current - 489.455 + 0.5;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001230:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8001378 <_ZN11Current_MOD5queryEiPc+0x210>
 8001234:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001238:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8001380 <_ZN11Current_MOD5queryEiPc+0x218>
 800123c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001240:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001244:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001248:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800124c:	ee17 2a90 	vmov	r2, s15
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	63da      	str	r2, [r3, #60]	@ 0x3c

    //printValue(Current);
    //printValue(Current);

    if(Current > C_MAX*0.8 && Current < C_MAX)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800126c:	ed9f 5b46 	vldr	d5, [pc, #280]	@ 8001388 <_ZN11Current_MOD5queryEiPc+0x220>
 8001270:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001274:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127c:	dd11      	ble.n	80012a2 <_ZN11Current_MOD5queryEiPc+0x13a>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	da0b      	bge.n	80012a2 <_ZN11Current_MOD5queryEiPc+0x13a>
    {
        if(flag_error_current == 0) module_send_message_NoExtId_CAN1(0x500,message,1); //If current between 80 and 100% of maximun, sends alert
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d107      	bne.n	80012a2 <_ZN11Current_MOD5queryEiPc+0x13a>
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3308      	adds	r3, #8
 8001296:	2201      	movs	r2, #1
 8001298:	4619      	mov	r1, r3
 800129a:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800129e:	f000 fe91 	bl	8001fc4 <module_send_message_NoExtId_CAN1>
    }

    if (Current > C_MAX)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	dd18      	ble.n	80012e0 <_ZN11Current_MOD5queryEiPc+0x178>
    {
        if (flag_error_current == 1) {
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d107      	bne.n	80012c6 <_ZN11Current_MOD5queryEiPc+0x15e>
        	module_send_message_NoExtId_CAN1(0x501, message, 2); //If current over maximun, sends alert
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3308      	adds	r3, #8
 80012ba:	2202      	movs	r2, #2
 80012bc:	4619      	mov	r1, r3
 80012be:	f240 5001 	movw	r0, #1281	@ 0x501
 80012c2:	f000 fe7f 	bl	8001fc4 <module_send_message_NoExtId_CAN1>
        }

        flag_error_current++;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	61da      	str	r2, [r3, #28]

        if (flag_charger != 1 || flag_charger == 1) //Only cut the AMS if accu not connected to charger, during charging the current control is on charger
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d119      	bne.n	800130c <_ZN11Current_MOD5queryEiPc+0x1a4>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012dc:	2b01      	cmp	r3, #1
 80012de:	e015      	b.n	800130c <_ZN11Current_MOD5queryEiPc+0x1a4>
            }
        }
    }
    else
    {
        if (flag_error_current != 0)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00e      	beq.n	8001306 <_ZN11Current_MOD5queryEiPc+0x19e>
		for (int i = 0; i < 5; i++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ec:	e008      	b.n	8001300 <_ZN11Current_MOD5queryEiPc+0x198>
		{
			module_send_message_NoExtId_CAN1(0x502, 0, 2); //If current normal, sends green flag
 80012ee:	2202      	movs	r2, #2
 80012f0:	2100      	movs	r1, #0
 80012f2:	f240 5002 	movw	r0, #1282	@ 0x502
 80012f6:	f000 fe65 	bl	8001fc4 <module_send_message_NoExtId_CAN1>
		for (int i = 0; i < 5; i++)
 80012fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012fc:	3301      	adds	r3, #1
 80012fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001302:	2b04      	cmp	r3, #4
 8001304:	ddf3      	ble.n	80012ee <_ZN11Current_MOD5queryEiPc+0x186>
		}
        flag_error_current = 0;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
    }


    if (time > time_lim_sended)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	429a      	cmp	r2, r3
 8001314:	dd16      	ble.n	8001344 <_ZN11Current_MOD5queryEiPc+0x1dc>
    {
        time_lim_sended += TIME_LIM_SEND;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131e:	441a      	add	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	62da      	str	r2, [r3, #44]	@ 0x2c
        message[0] = 0;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2200      	movs	r2, #0
 8001328:	721a      	strb	r2, [r3, #8]
        message[1] = Current & 0xFF;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800132e:	b2da      	uxtb	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	725a      	strb	r2, [r3, #9]
        module_send_message_NoExtId_CAN1(CANID, message, 2); //Sends current through CAN each interval of ms
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6858      	ldr	r0, [r3, #4]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3308      	adds	r3, #8
 800133c:	2202      	movs	r2, #2
 800133e:	4619      	mov	r1, r3
 8001340:	f000 fe40 	bl	8001fc4 <module_send_message_NoExtId_CAN1>
    }


    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	2b00      	cmp	r3, #0
 800134a:	dd0f      	ble.n	800136c <_ZN11Current_MOD5queryEiPc+0x204>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	429a      	cmp	r2, r3
 8001354:	dd0a      	ble.n	800136c <_ZN11Current_MOD5queryEiPc+0x204>
    {
        time_lim_plotted += TIME_LIM_PLOT;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	441a      	add	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	629a      	str	r2, [r3, #40]	@ 0x28
        info(buffer);
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f000 f814 	bl	8001394 <_ZN11Current_MOD4infoEPc>

    }

    
    return error;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 8001370:	4618      	mov	r0, r3
 8001372:	3730      	adds	r7, #48	@ 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	f0ae5365 	.word	0xf0ae5365
 800137c:	3fcd172e 	.word	0x3fcd172e
 8001380:	ae147ae1 	.word	0xae147ae1
 8001384:	407e9747 	.word	0x407e9747
 8001388:	9999999a 	.word	0x9999999a
 800138c:	3fe99999 	.word	0x3fe99999
 8001390:	92492493 	.word	0x92492493

08001394 <_ZN11Current_MOD4infoEPc>:

// ********************************************************************************************************
// **Function name:           info
// **Descriptions:            Function for printing the class data
// **********************************************************************************************************
void Current_MOD::info(char* buffer) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
    if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 800139e:	f000 feab 	bl	80020f8 <getUARTState>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b20      	cmp	r3, #32
 80013a6:	bf0c      	ite	eq
 80013a8:	2301      	moveq	r3, #1
 80013aa:	2300      	movne	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d043      	beq.n	800143a <_ZN11Current_MOD4infoEPc+0xa6>
		sprintf(buffer, "\n***********************\n");
 80013b2:	4924      	ldr	r1, [pc, #144]	@ (8001444 <_ZN11Current_MOD4infoEPc+0xb0>)
 80013b4:	6838      	ldr	r0, [r7, #0]
 80013b6:	f00a fff7 	bl	800c3a8 <siprintf>
		print(buffer);
 80013ba:	6838      	ldr	r0, [r7, #0]
 80013bc:	f000 fe42 	bl	8002044 <print>
		sprintf(buffer, "         Current\n");
 80013c0:	4921      	ldr	r1, [pc, #132]	@ (8001448 <_ZN11Current_MOD4infoEPc+0xb4>)
 80013c2:	6838      	ldr	r0, [r7, #0]
 80013c4:	f00a fff0 	bl	800c3a8 <siprintf>
		print(buffer);
 80013c8:	6838      	ldr	r0, [r7, #0]
 80013ca:	f000 fe3b 	bl	8002044 <print>
		sprintf(buffer, "***********************\n");
 80013ce:	491f      	ldr	r1, [pc, #124]	@ (800144c <_ZN11Current_MOD4infoEPc+0xb8>)
 80013d0:	6838      	ldr	r0, [r7, #0]
 80013d2:	f00a ffe9 	bl	800c3a8 <siprintf>
		print(buffer);
 80013d6:	6838      	ldr	r0, [r7, #0]
 80013d8:	f000 fe34 	bl	8002044 <print>
		sprintf(buffer, " - ERROR:     %i\n", error);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e0:	461a      	mov	r2, r3
 80013e2:	491b      	ldr	r1, [pc, #108]	@ (8001450 <_ZN11Current_MOD4infoEPc+0xbc>)
 80013e4:	6838      	ldr	r0, [r7, #0]
 80013e6:	f00a ffdf 	bl	800c3a8 <siprintf>
		print(buffer);
 80013ea:	6838      	ldr	r0, [r7, #0]
 80013ec:	f000 fe2a 	bl	8002044 <print>
		sprintf(buffer, " - CAN ID:    0x%lx\n", CANID);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4917      	ldr	r1, [pc, #92]	@ (8001454 <_ZN11Current_MOD4infoEPc+0xc0>)
 80013f8:	6838      	ldr	r0, [r7, #0]
 80013fa:	f00a ffd5 	bl	800c3a8 <siprintf>
		print(buffer);
 80013fe:	6838      	ldr	r0, [r7, #0]
 8001400:	f000 fe20 	bl	8002044 <print>
		sprintf(buffer, " - LIM C =    %i A\n", C_MAX);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4913      	ldr	r1, [pc, #76]	@ (8001458 <_ZN11Current_MOD4infoEPc+0xc4>)
 800140c:	6838      	ldr	r0, [r7, #0]
 800140e:	f00a ffcb 	bl	800c3a8 <siprintf>
		print(buffer);
 8001412:	6838      	ldr	r0, [r7, #0]
 8001414:	f000 fe16 	bl	8002044 <print>
		sprintf(buffer, "-----------------------\n");
 8001418:	4910      	ldr	r1, [pc, #64]	@ (800145c <_ZN11Current_MOD4infoEPc+0xc8>)
 800141a:	6838      	ldr	r0, [r7, #0]
 800141c:	f00a ffc4 	bl	800c3a8 <siprintf>
		print(buffer);
 8001420:	6838      	ldr	r0, [r7, #0]
 8001422:	f000 fe0f 	bl	8002044 <print>
		sprintf(buffer, "Current (A): %i\n", Current);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800142a:	461a      	mov	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	@ (8001460 <_ZN11Current_MOD4infoEPc+0xcc>)
 800142e:	6838      	ldr	r0, [r7, #0]
 8001430:	f00a ffba 	bl	800c3a8 <siprintf>
		print(buffer);
 8001434:	6838      	ldr	r0, [r7, #0]
 8001436:	f000 fe05 	bl	8002044 <print>

    }
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	0800cf88 	.word	0x0800cf88
 8001448:	0800cfa4 	.word	0x0800cfa4
 800144c:	0800cfb8 	.word	0x0800cfb8
 8001450:	0800cfd4 	.word	0x0800cfd4
 8001454:	0800cfe8 	.word	0x0800cfe8
 8001458:	0800d000 	.word	0x0800d000
 800145c:	0800d014 	.word	0x0800d014
 8001460:	0800d030 	.word	0x0800d030

08001464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b085      	sub	sp, #20
 8001468:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146a:	f001 fd6b 	bl	8002f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146e:	f000 f8a5 	bl	80015bc <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001472:	f000 f91f 	bl	80016b4 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001476:	f000 fc5f 	bl	8001d38 <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 800147a:	f000 fae5 	bl	8001a48 <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 800147e:	f000 fa59 	bl	8001934 <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 8001482:	f000 fbf9 	bl	8001c78 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8001486:	f000 f949 	bl	800171c <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 800148a:	f000 f9d9 	bl	8001840 <_ZL12MX_ADC3_Initv>
  MX_TIM17_Init();
 800148e:	f000 fb65 	bl	8001b5c <_ZL13MX_TIM17_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001492:	2100      	movs	r1, #0
 8001494:	483e      	ldr	r0, [pc, #248]	@ (8001590 <main+0x12c>)
 8001496:	f008 fe9f 	bl	800a1d8 <HAL_TIM_PWM_Start>



  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 800149a:	483e      	ldr	r0, [pc, #248]	@ (8001594 <main+0x130>)
 800149c:	f004 f90a 	bl	80056b4 <HAL_FDCAN_Start>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	bf0c      	ite	eq
 80014a6:	2301      	moveq	r3, #1
 80014a8:	2300      	movne	r3, #0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d002      	beq.n	80014b6 <main+0x52>
	  print((char*)"CAN_ACU iniciado");
 80014b0:	4839      	ldr	r0, [pc, #228]	@ (8001598 <main+0x134>)
 80014b2:	f000 fdc7 	bl	8002044 <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 80014b6:	2200      	movs	r2, #0
 80014b8:	2101      	movs	r1, #1
 80014ba:	4836      	ldr	r0, [pc, #216]	@ (8001594 <main+0x130>)
 80014bc:	f004 faec 	bl	8005a98 <HAL_FDCAN_ActivateNotification>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	bf0c      	ite	eq
 80014c6:	2301      	moveq	r3, #1
 80014c8:	2300      	movne	r3, #0
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <main+0x72>
  {
	  print((char*)"CAN_ACU notification");
 80014d0:	4832      	ldr	r0, [pc, #200]	@ (800159c <main+0x138>)
 80014d2:	f000 fdb7 	bl	8002044 <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 80014d6:	4832      	ldr	r0, [pc, #200]	@ (80015a0 <main+0x13c>)
 80014d8:	f004 f8ec 	bl	80056b4 <HAL_FDCAN_Start>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bf0c      	ite	eq
 80014e2:	2301      	moveq	r3, #1
 80014e4:	2300      	movne	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <main+0x8e>
	  print((char*)"CAN_BMS iniciado");
 80014ec:	482d      	ldr	r0, [pc, #180]	@ (80015a4 <main+0x140>)
 80014ee:	f000 fda9 	bl	8002044 <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 80014f2:	482d      	ldr	r0, [pc, #180]	@ (80015a8 <main+0x144>)
 80014f4:	f002 fb0a 	bl	8003b0c <HAL_ADC_Start>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	bf0c      	ite	eq
 80014fe:	2301      	moveq	r3, #1
 8001500:	2300      	movne	r3, #0
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <main+0xaa>
	  print((char*)"ADC iniciado");
 8001508:	4828      	ldr	r0, [pc, #160]	@ (80015ac <main+0x148>)
 800150a:	f000 fd9b 	bl	8002044 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 800150e:	f000 fe2f 	bl	8002170 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 8001512:	4b27      	ldr	r3, [pc, #156]	@ (80015b0 <main+0x14c>)
 8001514:	4a27      	ldr	r2, [pc, #156]	@ (80015b4 <main+0x150>)
 8001516:	2140      	movs	r1, #64	@ 0x40
 8001518:	4821      	ldr	r0, [pc, #132]	@ (80015a0 <main+0x13c>)
 800151a:	f004 f951 	bl	80057c0 <HAL_FDCAN_GetRxMessage>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf0c      	ite	eq
 8001524:	2301      	moveq	r3, #1
 8001526:	2300      	movne	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0ef      	beq.n	800150e <main+0xaa>

		  msg_bms.id = RxHeader_bms.Identifier;
 800152e:	4b21      	ldr	r3, [pc, #132]	@ (80015b4 <main+0x150>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a21      	ldr	r2, [pc, #132]	@ (80015b8 <main+0x154>)
 8001534:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 8001536:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <main+0x150>)
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <main+0x154>)
 800153e:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	e00c      	b.n	8001560 <main+0xfc>
 8001546:	4a1a      	ldr	r2, [pc, #104]	@ (80015b0 <main+0x14c>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	7819      	ldrb	r1, [r3, #0]
 800154e:	4a1a      	ldr	r2, [pc, #104]	@ (80015b8 <main+0x154>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	3305      	adds	r3, #5
 8001556:	460a      	mov	r2, r1
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3301      	adds	r3, #1
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b07      	cmp	r3, #7
 8001564:	ddef      	ble.n	8001546 <main+0xe2>
		  msg_bms.bus = 2;
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <main+0x154>)
 8001568:	2202      	movs	r2, #2
 800156a:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 800156c:	f001 fd70 	bl	8003050 <HAL_GetTick>
 8001570:	4603      	mov	r3, r0
 8001572:	4a11      	ldr	r2, [pc, #68]	@ (80015b8 <main+0x154>)
 8001574:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <main+0x154>)
 8001578:	466c      	mov	r4, sp
 800157a:	f103 0210 	add.w	r2, r3, #16
 800157e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001582:	e884 0003 	stmia.w	r4, {r0, r1}
 8001586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001588:	f001 f88a 	bl	80026a0 <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800158c:	e7bf      	b.n	800150e <main+0xaa>
 800158e:	bf00      	nop
 8001590:	240002a8 	.word	0x240002a8
 8001594:	24000168 	.word	0x24000168
 8001598:	0800d044 	.word	0x0800d044
 800159c:	0800d058 	.word	0x0800d058
 80015a0:	24000208 	.word	0x24000208
 80015a4:	0800d070 	.word	0x0800d070
 80015a8:	240000f8 	.word	0x240000f8
 80015ac:	0800d084 	.word	0x0800d084
 80015b0:	24000420 	.word	0x24000420
 80015b4:	240003f8 	.word	0x240003f8
 80015b8:	2400048c 	.word	0x2400048c

080015bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b09c      	sub	sp, #112	@ 0x70
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c6:	224c      	movs	r2, #76	@ 0x4c
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f00a ff0e 	bl	800c3ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	2220      	movs	r2, #32
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f00a ff08 	bl	800c3ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80015dc:	2002      	movs	r0, #2
 80015de:	f005 f9bd 	bl	800695c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	4b32      	ldr	r3, [pc, #200]	@ (80016b0 <_Z18SystemClock_Configv+0xf4>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	4a31      	ldr	r2, [pc, #196]	@ (80016b0 <_Z18SystemClock_Configv+0xf4>)
 80015ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015f0:	6193      	str	r3, [r2, #24]
 80015f2:	4b2f      	ldr	r3, [pc, #188]	@ (80016b0 <_Z18SystemClock_Configv+0xf4>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80015fe:	bf00      	nop
 8001600:	4b2b      	ldr	r3, [pc, #172]	@ (80016b0 <_Z18SystemClock_Configv+0xf4>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800160c:	bf14      	ite	ne
 800160e:	2301      	movne	r3, #1
 8001610:	2300      	moveq	r3, #0
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f3      	bne.n	8001600 <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001618:	2301      	movs	r3, #1
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800161c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001620:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001622:	2302      	movs	r3, #2
 8001624:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001626:	2302      	movs	r3, #2
 8001628:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800162a:	2302      	movs	r3, #2
 800162c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800162e:	232c      	movs	r3, #44	@ 0x2c
 8001630:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001632:	2301      	movs	r3, #1
 8001634:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001636:	2304      	movs	r3, #4
 8001638:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800163a:	2302      	movs	r3, #2
 800163c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800163e:	230c      	movs	r3, #12
 8001640:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001642:	2300      	movs	r3, #0
 8001644:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800164e:	4618      	mov	r0, r3
 8001650:	f005 f9be 	bl	80069d0 <HAL_RCC_OscConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	bf14      	ite	ne
 800165a:	2301      	movne	r3, #1
 800165c:	2300      	moveq	r3, #0
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8001664:	f000 fd72 	bl	800214c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001668:	233f      	movs	r3, #63	@ 0x3f
 800166a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166c:	2303      	movs	r3, #3
 800166e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001674:	2308      	movs	r3, #8
 8001676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001678:	2340      	movs	r3, #64	@ 0x40
 800167a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800167c:	2340      	movs	r3, #64	@ 0x40
 800167e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001680:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001684:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001686:	2340      	movs	r3, #64	@ 0x40
 8001688:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2103      	movs	r1, #3
 800168e:	4618      	mov	r0, r3
 8001690:	f005 fd78 	bl	8007184 <HAL_RCC_ClockConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	bf14      	ite	ne
 800169a:	2301      	movne	r3, #1
 800169c:	2300      	moveq	r3, #0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 80016a4:	f000 fd52 	bl	800214c <Error_Handler>
  }
}
 80016a8:	bf00      	nop
 80016aa:	3770      	adds	r7, #112	@ 0x70
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	58024800 	.word	0x58024800

080016b4 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b0ae      	sub	sp, #184	@ 0xb8
 80016b8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ba:	463b      	mov	r3, r7
 80016bc:	22b8      	movs	r2, #184	@ 0xb8
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f00a fe93 	bl	800c3ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016c6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80016d2:	2302      	movs	r3, #2
 80016d4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80016d6:	2310      	movs	r3, #16
 80016d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80016da:	2302      	movs	r3, #2
 80016dc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80016de:	2302      	movs	r3, #2
 80016e0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80016e6:	23c0      	movs	r3, #192	@ 0xc0
 80016e8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016f8:	463b      	mov	r3, r7
 80016fa:	4618      	mov	r0, r3
 80016fc:	f006 f8ce 	bl	800789c <HAL_RCCEx_PeriphCLKConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	bf14      	ite	ne
 8001706:	2301      	movne	r3, #1
 8001708:	2300      	moveq	r3, #0
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 8001710:	f000 fd1c 	bl	800214c <Error_Handler>
  }
}
 8001714:	bf00      	nop
 8001716:	37b8      	adds	r7, #184	@ 0xb8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08c      	sub	sp, #48	@ 0x30
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800172e:	463b      	mov	r3, r7
 8001730:	2224      	movs	r2, #36	@ 0x24
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f00a fe59 	bl	800c3ec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800173a:	4b3e      	ldr	r3, [pc, #248]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 800173c:	4a3e      	ldr	r2, [pc, #248]	@ (8001838 <_ZL12MX_ADC1_Initv+0x11c>)
 800173e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001740:	4b3c      	ldr	r3, [pc, #240]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001742:	2200      	movs	r2, #0
 8001744:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001746:	4b3b      	ldr	r3, [pc, #236]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001748:	2208      	movs	r2, #8
 800174a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800174c:	4b39      	ldr	r3, [pc, #228]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001752:	4b38      	ldr	r3, [pc, #224]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001754:	2204      	movs	r2, #4
 8001756:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001758:	4b36      	ldr	r3, [pc, #216]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 800175a:	2200      	movs	r2, #0
 800175c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800175e:	4b35      	ldr	r3, [pc, #212]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001760:	2200      	movs	r2, #0
 8001762:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001764:	4b33      	ldr	r3, [pc, #204]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001766:	2201      	movs	r2, #1
 8001768:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800176a:	4b32      	ldr	r3, [pc, #200]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001772:	4b30      	ldr	r3, [pc, #192]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001774:	2200      	movs	r2, #0
 8001776:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001778:	4b2e      	ldr	r3, [pc, #184]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 800177a:	2200      	movs	r2, #0
 800177c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800177e:	4b2d      	ldr	r3, [pc, #180]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001780:	2200      	movs	r2, #0
 8001782:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001784:	4b2b      	ldr	r3, [pc, #172]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001786:	2200      	movs	r2, #0
 8001788:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800178a:	4b2a      	ldr	r3, [pc, #168]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 800178c:	2200      	movs	r2, #0
 800178e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = ENABLE;
 8001790:	4b28      	ldr	r3, [pc, #160]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 64;
 8001798:	4b26      	ldr	r3, [pc, #152]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 800179a:	2240      	movs	r2, #64	@ 0x40
 800179c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 800179e:	4b25      	ldr	r3, [pc, #148]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 80017a0:	22c0      	movs	r2, #192	@ 0xc0
 80017a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80017a4:	4b23      	ldr	r3, [pc, #140]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80017aa:	4b22      	ldr	r3, [pc, #136]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017b0:	4820      	ldr	r0, [pc, #128]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 80017b2:	f001 ffa3 	bl	80036fc <HAL_ADC_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf14      	ite	ne
 80017bc:	2301      	movne	r3, #1
 80017be:	2300      	moveq	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <_ZL12MX_ADC1_Initv+0xae>
  {
    Error_Handler();
 80017c6:	f000 fcc1 	bl	800214c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d2:	4619      	mov	r1, r3
 80017d4:	4817      	ldr	r0, [pc, #92]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 80017d6:	f003 fb27 	bl	8004e28 <HAL_ADCEx_MultiModeConfigChannel>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	bf14      	ite	ne
 80017e0:	2301      	movne	r3, #1
 80017e2:	2300      	moveq	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <_ZL12MX_ADC1_Initv+0xd2>
  {
    Error_Handler();
 80017ea:	f000 fcaf 	bl	800214c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017ee:	4b13      	ldr	r3, [pc, #76]	@ (800183c <_ZL12MX_ADC1_Initv+0x120>)
 80017f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017f2:	2306      	movs	r3, #6
 80017f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017fa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80017fe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001800:	2304      	movs	r3, #4
 8001802:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800180e:	463b      	mov	r3, r7
 8001810:	4619      	mov	r1, r3
 8001812:	4808      	ldr	r0, [pc, #32]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001814:	f002 fb7a 	bl	8003f0c <HAL_ADC_ConfigChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	bf14      	ite	ne
 800181e:	2301      	movne	r3, #1
 8001820:	2300      	moveq	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <_ZL12MX_ADC1_Initv+0x110>
  {
    Error_Handler();
 8001828:	f000 fc90 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	3730      	adds	r7, #48	@ 0x30
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	24000088 	.word	0x24000088
 8001838:	40022000 	.word	0x40022000
 800183c:	08600004 	.word	0x08600004

08001840 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	@ 0x28
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2224      	movs	r2, #36	@ 0x24
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f00a fdcd 	bl	800c3ec <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001852:	4b35      	ldr	r3, [pc, #212]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 8001854:	4a35      	ldr	r2, [pc, #212]	@ (800192c <_ZL12MX_ADC3_Initv+0xec>)
 8001856:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001858:	4b33      	ldr	r3, [pc, #204]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 800185a:	2200      	movs	r2, #0
 800185c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 800185e:	4b32      	ldr	r3, [pc, #200]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 8001860:	220c      	movs	r2, #12
 8001862:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001864:	4b30      	ldr	r3, [pc, #192]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800186a:	4b2f      	ldr	r3, [pc, #188]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001870:	4b2d      	ldr	r3, [pc, #180]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 8001872:	2204      	movs	r2, #4
 8001874:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001876:	4b2c      	ldr	r3, [pc, #176]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 8001878:	2200      	movs	r2, #0
 800187a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800187c:	4b2a      	ldr	r3, [pc, #168]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 800187e:	2200      	movs	r2, #0
 8001880:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001882:	4b29      	ldr	r3, [pc, #164]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 8001884:	2201      	movs	r2, #1
 8001886:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001888:	4b27      	ldr	r3, [pc, #156]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001890:	4b25      	ldr	r3, [pc, #148]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 8001892:	2200      	movs	r2, #0
 8001894:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001896:	4b24      	ldr	r3, [pc, #144]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 8001898:	2200      	movs	r2, #0
 800189a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800189c:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80018a4:	4b20      	ldr	r3, [pc, #128]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80018aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80018b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80018bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 80018c4:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80018ca:	4817      	ldr	r0, [pc, #92]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 80018cc:	f001 ff16 	bl	80036fc <HAL_ADC_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bf14      	ite	ne
 80018d6:	2301      	movne	r3, #1
 80018d8:	2300      	moveq	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 80018e0:	f000 fc34 	bl	800214c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80018e4:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <_ZL12MX_ADC3_Initv+0xf0>)
 80018e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018e8:	2306      	movs	r3, #6
 80018ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018f0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80018f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018f6:	2304      	movs	r3, #4
 80018f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	4619      	mov	r1, r3
 8001906:	4808      	ldr	r0, [pc, #32]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 8001908:	f002 fb00 	bl	8003f0c <HAL_ADC_ConfigChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	bf14      	ite	ne
 8001912:	2301      	movne	r3, #1
 8001914:	2300      	moveq	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 800191c:	f000 fc16 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	3728      	adds	r7, #40	@ 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	240000f8 	.word	0x240000f8
 800192c:	58026000 	.word	0x58026000
 8001930:	1d500080 	.word	0x1d500080

08001934 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800193a:	4b41      	ldr	r3, [pc, #260]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800193c:	4a41      	ldr	r2, [pc, #260]	@ (8001a44 <_ZL14MX_FDCAN1_Initv+0x110>)
 800193e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001940:	4b3f      	ldr	r3, [pc, #252]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001942:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001946:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001948:	4b3d      	ldr	r3, [pc, #244]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800194e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001950:	2200      	movs	r2, #0
 8001952:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001954:	4b3a      	ldr	r3, [pc, #232]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001956:	2200      	movs	r2, #0
 8001958:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800195a:	4b39      	ldr	r3, [pc, #228]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800195c:	2200      	movs	r2, #0
 800195e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 8001960:	4b37      	ldr	r3, [pc, #220]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001962:	2203      	movs	r2, #3
 8001964:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001966:	4b36      	ldr	r3, [pc, #216]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001968:	2201      	movs	r2, #1
 800196a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 800196c:	4b34      	ldr	r3, [pc, #208]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800196e:	220a      	movs	r2, #10
 8001970:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8001972:	4b33      	ldr	r3, [pc, #204]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001974:	2205      	movs	r2, #5
 8001976:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001978:	4b31      	ldr	r3, [pc, #196]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800197a:	2201      	movs	r2, #1
 800197c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800197e:	4b30      	ldr	r3, [pc, #192]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001980:	2201      	movs	r2, #1
 8001982:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001984:	4b2e      	ldr	r3, [pc, #184]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001986:	2201      	movs	r2, #1
 8001988:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800198a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800198c:	2201      	movs	r2, #1
 800198e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001990:	4b2b      	ldr	r3, [pc, #172]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001992:	2200      	movs	r2, #0
 8001994:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001996:	4b2a      	ldr	r3, [pc, #168]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001998:	2200      	movs	r2, #0
 800199a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 800199c:	4b28      	ldr	r3, [pc, #160]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800199e:	2205      	movs	r2, #5
 80019a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 80019a2:	4b27      	ldr	r3, [pc, #156]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019a4:	2220      	movs	r2, #32
 80019a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80019a8:	4b25      	ldr	r3, [pc, #148]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019aa:	2204      	movs	r2, #4
 80019ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 80019ae:	4b24      	ldr	r3, [pc, #144]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019b0:	2220      	movs	r2, #32
 80019b2:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80019b4:	4b22      	ldr	r3, [pc, #136]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019b6:	2204      	movs	r2, #4
 80019b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 80019ba:	4b21      	ldr	r3, [pc, #132]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019bc:	2201      	movs	r2, #1
 80019be:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80019c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019c2:	2204      	movs	r2, #4
 80019c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 80019c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 80019cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019ce:	2220      	movs	r2, #32
 80019d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80019d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019d4:	2220      	movs	r2, #32
 80019d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80019d8:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80019de:	4b18      	ldr	r3, [pc, #96]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019e0:	2204      	movs	r2, #4
 80019e2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80019e4:	4816      	ldr	r0, [pc, #88]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019e6:	f003 fc11 	bl	800520c <HAL_FDCAN_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf14      	ite	ne
 80019f0:	2301      	movne	r3, #1
 80019f2:	2300      	moveq	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 80019fa:	f000 fba7 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80019fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a02:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001a18:	463b      	mov	r3, r7
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4808      	ldr	r0, [pc, #32]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001a1e:	f003 fdd3 	bl	80055c8 <HAL_FDCAN_ConfigFilter>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf14      	ite	ne
 8001a28:	2301      	movne	r3, #1
 8001a2a:	2300      	moveq	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 8001a32:	f000 fb8b 	bl	800214c <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	3720      	adds	r7, #32
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	24000168 	.word	0x24000168
 8001a44:	4000a000 	.word	0x4000a000

08001a48 <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001a4e:	4b41      	ldr	r3, [pc, #260]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a50:	4a41      	ldr	r2, [pc, #260]	@ (8001b58 <_ZL14MX_FDCAN2_Initv+0x110>)
 8001a52:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001a54:	4b3f      	ldr	r3, [pc, #252]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a5a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001a62:	4b3c      	ldr	r3, [pc, #240]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001a68:	4b3a      	ldr	r3, [pc, #232]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001a6e:	4b39      	ldr	r3, [pc, #228]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 3;
 8001a74:	4b37      	ldr	r3, [pc, #220]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a76:	2203      	movs	r2, #3
 8001a78:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001a7a:	4b36      	ldr	r3, [pc, #216]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 8001a80:	4b34      	ldr	r3, [pc, #208]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a82:	220a      	movs	r2, #10
 8001a84:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8001a86:	4b33      	ldr	r3, [pc, #204]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a88:	2205      	movs	r2, #5
 8001a8a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001a8c:	4b31      	ldr	r3, [pc, #196]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001a92:	4b30      	ldr	r3, [pc, #192]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001a98:	4b2e      	ldr	r3, [pc, #184]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 8001ab0:	4b28      	ldr	r3, [pc, #160]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ab2:	2205      	movs	r2, #5
 8001ab4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 8001ab6:	4b27      	ldr	r3, [pc, #156]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ab8:	2220      	movs	r2, #32
 8001aba:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001abc:	4b25      	ldr	r3, [pc, #148]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001abe:	2204      	movs	r2, #4
 8001ac0:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 8001ac2:	4b24      	ldr	r3, [pc, #144]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001ac8:	4b22      	ldr	r3, [pc, #136]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001aca:	2204      	movs	r2, #4
 8001acc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 8001ace:	4b21      	ldr	r3, [pc, #132]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 8001ada:	4b1e      	ldr	r3, [pc, #120]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ae8:	2220      	movs	r2, #32
 8001aea:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001aec:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001af2:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001af4:	2204      	movs	r2, #4
 8001af6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001af8:	4816      	ldr	r0, [pc, #88]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001afa:	f003 fb87 	bl	800520c <HAL_FDCAN_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf14      	ite	ne
 8001b04:	2301      	movne	r3, #1
 8001b06:	2300      	moveq	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 8001b0e:	f000 fb1d 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001b12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b16:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001b20:	2301      	movs	r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 8001b24:	2310      	movs	r3, #16
 8001b26:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 8001b28:	2310      	movs	r3, #16
 8001b2a:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4808      	ldr	r0, [pc, #32]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001b32:	f003 fd49 	bl	80055c8 <HAL_FDCAN_ConfigFilter>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bf14      	ite	ne
 8001b3c:	2301      	movne	r3, #1
 8001b3e:	2300      	moveq	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 8001b46:	f000 fb01 	bl	800214c <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 8001b4a:	bf00      	nop
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	24000208 	.word	0x24000208
 8001b58:	4000a400 	.word	0x4000a400

08001b5c <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b094      	sub	sp, #80	@ 0x50
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b62:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	611a      	str	r2, [r3, #16]
 8001b72:	615a      	str	r2, [r3, #20]
 8001b74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b76:	463b      	mov	r3, r7
 8001b78:	2234      	movs	r2, #52	@ 0x34
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f00a fc35 	bl	800c3ec <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001b82:	4b3b      	ldr	r3, [pc, #236]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001b84:	4a3b      	ldr	r2, [pc, #236]	@ (8001c74 <_ZL13MX_TIM17_Initv+0x118>)
 8001b86:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001b88:	4b39      	ldr	r3, [pc, #228]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8e:	4b38      	ldr	r3, [pc, #224]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10559;
 8001b94:	4b36      	ldr	r3, [pc, #216]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001b96:	f642 123f 	movw	r2, #10559	@ 0x293f
 8001b9a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9c:	4b34      	ldr	r3, [pc, #208]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001ba2:	4b33      	ldr	r3, [pc, #204]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ba8:	4b31      	ldr	r3, [pc, #196]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001baa:	2280      	movs	r2, #128	@ 0x80
 8001bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001bae:	4830      	ldr	r0, [pc, #192]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001bb0:	f008 fa5a 	bl	800a068 <HAL_TIM_Base_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bf14      	ite	ne
 8001bba:	2301      	movne	r3, #1
 8001bbc:	2300      	moveq	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <_ZL13MX_TIM17_Initv+0x6c>
  {
    Error_Handler();
 8001bc4:	f000 fac2 	bl	800214c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001bc8:	4829      	ldr	r0, [pc, #164]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001bca:	f008 faa4 	bl	800a116 <HAL_TIM_PWM_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf14      	ite	ne
 8001bd4:	2301      	movne	r3, #1
 8001bd6:	2300      	moveq	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <_ZL13MX_TIM17_Initv+0x86>
  {
    Error_Handler();
 8001bde:	f000 fab5 	bl	800214c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be2:	2360      	movs	r3, #96	@ 0x60
 8001be4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bea:	2300      	movs	r3, #0
 8001bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bfe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c02:	2200      	movs	r2, #0
 8001c04:	4619      	mov	r1, r3
 8001c06:	481a      	ldr	r0, [pc, #104]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001c08:	f008 fc02 	bl	800a410 <HAL_TIM_PWM_ConfigChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	bf14      	ite	ne
 8001c12:	2301      	movne	r3, #1
 8001c14:	2300      	moveq	r3, #0
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <_ZL13MX_TIM17_Initv+0xc4>
  {
    Error_Handler();
 8001c1c:	f000 fa96 	bl	800214c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001c42:	463b      	mov	r3, r7
 8001c44:	4619      	mov	r1, r3
 8001c46:	480a      	ldr	r0, [pc, #40]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001c48:	f009 f89e 	bl	800ad88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	bf14      	ite	ne
 8001c52:	2301      	movne	r3, #1
 8001c54:	2300      	moveq	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <_ZL13MX_TIM17_Initv+0x104>
  {
    Error_Handler();
 8001c5c:	f000 fa76 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001c60:	4803      	ldr	r0, [pc, #12]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001c62:	f000 ffb9 	bl	8002bd8 <HAL_TIM_MspPostInit>

}
 8001c66:	bf00      	nop
 8001c68:	3750      	adds	r7, #80	@ 0x50
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	240002a8 	.word	0x240002a8
 8001c74:	40014800 	.word	0x40014800

08001c78 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c7e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d34 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c82:	4b2b      	ldr	r3, [pc, #172]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	4b29      	ldr	r3, [pc, #164]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c90:	4b27      	ldr	r3, [pc, #156]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c96:	4b26      	ldr	r3, [pc, #152]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c9c:	4b24      	ldr	r3, [pc, #144]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca2:	4b23      	ldr	r3, [pc, #140]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca8:	4b21      	ldr	r3, [pc, #132]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cae:	4b20      	ldr	r3, [pc, #128]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cba:	4b1d      	ldr	r3, [pc, #116]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cc0:	481b      	ldr	r0, [pc, #108]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cc2:	f009 f8ed 	bl	800aea0 <HAL_UART_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bf14      	ite	ne
 8001ccc:	2301      	movne	r3, #1
 8001cce:	2300      	moveq	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001cd6:	f000 fa39 	bl	800214c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4814      	ldr	r0, [pc, #80]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cde:	f00a fa98 	bl	800c212 <HAL_UARTEx_SetTxFifoThreshold>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf14      	ite	ne
 8001ce8:	2301      	movne	r3, #1
 8001cea:	2300      	moveq	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8001cf2:	f000 fa2b 	bl	800214c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	480d      	ldr	r0, [pc, #52]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cfa:	f00a fac8 	bl	800c28e <HAL_UARTEx_SetRxFifoThreshold>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf14      	ite	ne
 8001d04:	2301      	movne	r3, #1
 8001d06:	2300      	moveq	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001d0e:	f000 fa1d 	bl	800214c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d12:	4807      	ldr	r0, [pc, #28]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001d14:	f00a fa44 	bl	800c1a0 <HAL_UARTEx_DisableFifoMode>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	bf14      	ite	ne
 8001d1e:	2301      	movne	r3, #1
 8001d20:	2300      	moveq	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001d28:	f000 fa10 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	240002f4 	.word	0x240002f4
 8001d34:	40004400 	.word	0x40004400

08001d38 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08c      	sub	sp, #48	@ 0x30
 8001d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3e:	f107 031c 	add.w	r3, r7, #28
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	60da      	str	r2, [r3, #12]
 8001d4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d4e:	4b57      	ldr	r3, [pc, #348]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d54:	4a55      	ldr	r2, [pc, #340]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001d56:	f043 0320 	orr.w	r3, r3, #32
 8001d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d5e:	4b53      	ldr	r3, [pc, #332]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d6c:	4b4f      	ldr	r3, [pc, #316]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d72:	4a4e      	ldr	r2, [pc, #312]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	4b48      	ldr	r3, [pc, #288]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d90:	4a46      	ldr	r2, [pc, #280]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d9a:	4b44      	ldr	r3, [pc, #272]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001da8:	4b40      	ldr	r3, [pc, #256]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dae:	4a3f      	ldr	r2, [pc, #252]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001db0:	f043 0310 	orr.w	r3, r3, #16
 8001db4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db8:	4b3c      	ldr	r3, [pc, #240]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	4b39      	ldr	r3, [pc, #228]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dcc:	4a37      	ldr	r2, [pc, #220]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001dce:	f043 0302 	orr.w	r3, r3, #2
 8001dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd6:	4b35      	ldr	r3, [pc, #212]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001de4:	4b31      	ldr	r3, [pc, #196]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dea:	4a30      	ldr	r2, [pc, #192]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001df0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001df4:	4b2d      	ldr	r3, [pc, #180]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e02:	4b2a      	ldr	r3, [pc, #168]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e08:	4a28      	ldr	r2, [pc, #160]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001e0a:	f043 0308 	orr.w	r3, r3, #8
 8001e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e12:	4b26      	ldr	r3, [pc, #152]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e26:	4822      	ldr	r0, [pc, #136]	@ (8001eb0 <_ZL12MX_GPIO_Initv+0x178>)
 8001e28:	f004 fd7e 	bl	8006928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2138      	movs	r1, #56	@ 0x38
 8001e30:	4820      	ldr	r0, [pc, #128]	@ (8001eb4 <_ZL12MX_GPIO_Initv+0x17c>)
 8001e32:	f004 fd79 	bl	8006928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 8001e36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4818      	ldr	r0, [pc, #96]	@ (8001eb0 <_ZL12MX_GPIO_Initv+0x178>)
 8001e50:	f004 fbaa 	bl	80065a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 8001e54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4619      	mov	r1, r3
 8001e68:	4813      	ldr	r0, [pc, #76]	@ (8001eb8 <_ZL12MX_GPIO_Initv+0x180>)
 8001e6a:	f004 fb9d 	bl	80065a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Charge_Button_Pin */
  GPIO_InitStruct.Pin = Charge_Button_Pin;
 8001e6e:	2380      	movs	r3, #128	@ 0x80
 8001e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Charge_Button_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	480e      	ldr	r0, [pc, #56]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x184>)
 8001e82:	f004 fb91 	bl	80065a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 8001e86:	2338      	movs	r3, #56	@ 0x38
 8001e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e96:	f107 031c 	add.w	r3, r7, #28
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4805      	ldr	r0, [pc, #20]	@ (8001eb4 <_ZL12MX_GPIO_Initv+0x17c>)
 8001e9e:	f004 fb83 	bl	80065a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ea2:	bf00      	nop
 8001ea4:	3730      	adds	r7, #48	@ 0x30
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	58024400 	.word	0x58024400
 8001eb0:	58021400 	.word	0x58021400
 8001eb4:	58020c00 	.word	0x58020c00
 8001eb8:	58021000 	.word	0x58021000
 8001ebc:	58021800 	.word	0x58021800

08001ec0 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d04b      	beq.n	8001f6c <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 8001ed4:	4b27      	ldr	r3, [pc, #156]	@ (8001f74 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001ed6:	4a28      	ldr	r2, [pc, #160]	@ (8001f78 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001ed8:	2140      	movs	r1, #64	@ 0x40
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f003 fc70 	bl	80057c0 <HAL_FDCAN_GetRxMessage>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	bf0c      	ite	eq
 8001ee6:	2301      	moveq	r3, #1
 8001ee8:	2300      	movne	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d02e      	beq.n	8001f4e <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 8001ef0:	4b21      	ldr	r3, [pc, #132]	@ (8001f78 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a21      	ldr	r2, [pc, #132]	@ (8001f7c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001ef6:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f78 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b1f      	ldr	r3, [pc, #124]	@ (8001f7c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f00:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	e00c      	b.n	8001f22 <HAL_FDCAN_RxFifo0Callback+0x62>
 8001f08:	4a1a      	ldr	r2, [pc, #104]	@ (8001f74 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	7819      	ldrb	r1, [r3, #0]
 8001f10:	4a1a      	ldr	r2, [pc, #104]	@ (8001f7c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4413      	add	r3, r2
 8001f16:	3305      	adds	r3, #5
 8001f18:	460a      	mov	r2, r1
 8001f1a:	701a      	strb	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b07      	cmp	r3, #7
 8001f26:	ddef      	ble.n	8001f08 <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001f28:	4b14      	ldr	r3, [pc, #80]	@ (8001f7c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 8001f2e:	f001 f88f 	bl	8003050 <HAL_GetTick>
 8001f32:	4603      	mov	r3, r0
 8001f34:	4a11      	ldr	r2, [pc, #68]	@ (8001f7c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f36:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 8001f38:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f3a:	466c      	mov	r4, sp
 8001f3c:	f103 0210 	add.w	r2, r3, #16
 8001f40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f44:	e884 0003 	stmia.w	r4, {r0, r1}
 8001f48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f4a:	f000 fba9 	bl	80026a0 <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2101      	movs	r1, #1
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f003 fda0 	bl	8005a98 <HAL_FDCAN_ActivateNotification>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	bf14      	ite	ne
 8001f5e:	2301      	movne	r3, #1
 8001f60:	2300      	moveq	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 8001f68:	f000 f8f0 	bl	800214c <Error_Handler>
    }
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd90      	pop	{r4, r7, pc}
 8001f74:	24000420 	.word	0x24000420
 8001f78:	240003d0 	.word	0x240003d0
 8001f7c:	240004a4 	.word	0x240004a4

08001f80 <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001fbc <module_send_message_CAN1+0x3c>)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 8001f94:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <module_send_message_CAN1+0x3c>)
 8001f96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f9a:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	4a07      	ldr	r2, [pc, #28]	@ (8001fbc <module_send_message_CAN1+0x3c>)
 8001fa0:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	4905      	ldr	r1, [pc, #20]	@ (8001fbc <module_send_message_CAN1+0x3c>)
 8001fa6:	4806      	ldr	r0, [pc, #24]	@ (8001fc0 <module_send_message_CAN1+0x40>)
 8001fa8:	f003 fbaf 	bl	800570a <HAL_FDCAN_AddMessageToTxFifoQ>
 8001fac:	4603      	mov	r3, r0
 8001fae:	75fb      	strb	r3, [r7, #23]

	return status;
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	24000388 	.word	0x24000388
 8001fc0:	24000168 	.word	0x24000168

08001fc4 <module_send_message_NoExtId_CAN1>:

//NO extended ID
HAL_StatusTypeDef module_send_message_NoExtId_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ffc <module_send_message_NoExtId_CAN1+0x38>)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_STANDARD_ID;
 8001fd8:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <module_send_message_NoExtId_CAN1+0x38>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	4a06      	ldr	r2, [pc, #24]	@ (8001ffc <module_send_message_NoExtId_CAN1+0x38>)
 8001fe2:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	4905      	ldr	r1, [pc, #20]	@ (8001ffc <module_send_message_NoExtId_CAN1+0x38>)
 8001fe8:	4805      	ldr	r0, [pc, #20]	@ (8002000 <module_send_message_NoExtId_CAN1+0x3c>)
 8001fea:	f003 fb8e 	bl	800570a <HAL_FDCAN_AddMessageToTxFifoQ>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	75fb      	strb	r3, [r7, #23]

	return status;
 8001ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	24000388 	.word	0x24000388
 8002000:	24000168 	.word	0x24000168

08002004 <module_send_message_CAN2>:

HAL_StatusTypeDef module_send_message_CAN2(uint32_t id, uint8_t* data, uint8_t length) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	4613      	mov	r3, r2
 8002010:	71fb      	strb	r3, [r7, #7]
	TxHeader_bms.Identifier = id;
 8002012:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <module_send_message_CAN2+0x38>)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6013      	str	r3, [r2, #0]
	TxHeader_bms.IdType = FDCAN_STANDARD_ID;
 8002018:	4b08      	ldr	r3, [pc, #32]	@ (800203c <module_send_message_CAN2+0x38>)
 800201a:	2200      	movs	r2, #0
 800201c:	605a      	str	r2, [r3, #4]
	TxHeader_bms.DataLength = length;
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	4a06      	ldr	r2, [pc, #24]	@ (800203c <module_send_message_CAN2+0x38>)
 8002022:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	4905      	ldr	r1, [pc, #20]	@ (800203c <module_send_message_CAN2+0x38>)
 8002028:	4805      	ldr	r0, [pc, #20]	@ (8002040 <module_send_message_CAN2+0x3c>)
 800202a:	f003 fb6e 	bl	800570a <HAL_FDCAN_AddMessageToTxFifoQ>
 800202e:	4603      	mov	r3, r0
 8002030:	75fb      	strb	r3, [r7, #23]

	return status;
 8002032:	7dfb      	ldrb	r3, [r7, #23]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	240003ac 	.word	0x240003ac
 8002040:	24000208 	.word	0x24000208

08002044 <print>:

void print(char uart_buffer[]){
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4909      	ldr	r1, [pc, #36]	@ (8002074 <print+0x30>)
 8002050:	4809      	ldr	r0, [pc, #36]	@ (8002078 <print+0x34>)
 8002052:	f00a f9a9 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8002056:	4808      	ldr	r0, [pc, #32]	@ (8002078 <print+0x34>)
 8002058:	f7fe f95a 	bl	8000310 <strlen>
 800205c:	4603      	mov	r3, r0
 800205e:	b29a      	uxth	r2, r3
 8002060:	f04f 33ff 	mov.w	r3, #4294967295
 8002064:	4904      	ldr	r1, [pc, #16]	@ (8002078 <print+0x34>)
 8002066:	4805      	ldr	r0, [pc, #20]	@ (800207c <print+0x38>)
 8002068:	f008 ff6a 	bl	800af40 <HAL_UART_Transmit>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	0800d094 	.word	0x0800d094
 8002078:	24000428 	.word	0x24000428
 800207c:	240002f4 	.word	0x240002f4

08002080 <printnl>:

void printnl(char uart_buffer[]){
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s", uart_buffer);
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	4909      	ldr	r1, [pc, #36]	@ (80020b0 <printnl+0x30>)
 800208c:	4809      	ldr	r0, [pc, #36]	@ (80020b4 <printnl+0x34>)
 800208e:	f00a f98b 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8002092:	4808      	ldr	r0, [pc, #32]	@ (80020b4 <printnl+0x34>)
 8002094:	f7fe f93c 	bl	8000310 <strlen>
 8002098:	4603      	mov	r3, r0
 800209a:	b29a      	uxth	r2, r3
 800209c:	f04f 33ff 	mov.w	r3, #4294967295
 80020a0:	4904      	ldr	r1, [pc, #16]	@ (80020b4 <printnl+0x34>)
 80020a2:	4805      	ldr	r0, [pc, #20]	@ (80020b8 <printnl+0x38>)
 80020a4:	f008 ff4c 	bl	800af40 <HAL_UART_Transmit>
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	0800d09c 	.word	0x0800d09c
 80020b4:	24000428 	.word	0x24000428
 80020b8:	240002f4 	.word	0x240002f4

080020bc <printValue>:

void printValue(int value){
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4909      	ldr	r1, [pc, #36]	@ (80020ec <printValue+0x30>)
 80020c8:	4809      	ldr	r0, [pc, #36]	@ (80020f0 <printValue+0x34>)
 80020ca:	f00a f96d 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 80020ce:	4808      	ldr	r0, [pc, #32]	@ (80020f0 <printValue+0x34>)
 80020d0:	f7fe f91e 	bl	8000310 <strlen>
 80020d4:	4603      	mov	r3, r0
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295
 80020dc:	4904      	ldr	r1, [pc, #16]	@ (80020f0 <printValue+0x34>)
 80020de:	4805      	ldr	r0, [pc, #20]	@ (80020f4 <printValue+0x38>)
 80020e0:	f008 ff2e 	bl	800af40 <HAL_UART_Transmit>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	0800d0a0 	.word	0x0800d0a0
 80020f0:	24000428 	.word	0x24000428
 80020f4:	240002f4 	.word	0x240002f4

080020f8 <getUARTState>:

HAL_UART_StateTypeDef getUARTState(){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&huart2);
 80020fc:	4802      	ldr	r0, [pc, #8]	@ (8002108 <getUARTState+0x10>)
 80020fe:	f008 ffad 	bl	800b05c <HAL_UART_GetState>
 8002102:	4603      	mov	r3, r0
}
 8002104:	4618      	mov	r0, r3
 8002106:	bd80      	pop	{r7, pc}
 8002108:	240002f4 	.word	0x240002f4

0800210c <readAnalogValue>:
	HAL_ADC_Stop(&hadc1);
	printValue(current);
	return current;
}

float readAnalogValue(void){
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
	analogValue = HAL_ADC_GetValue(&hadc3);
	HAL_ADC_Stop(&hadc3);
	return analogValue;*/


	HAL_ADC_Start(&hadc1);
 8002112:	480d      	ldr	r0, [pc, #52]	@ (8002148 <readAnalogValue+0x3c>)
 8002114:	f001 fcfa 	bl	8003b0c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	480a      	ldr	r0, [pc, #40]	@ (8002148 <readAnalogValue+0x3c>)
 800211e:	f001 fdf3 	bl	8003d08 <HAL_ADC_PollForConversion>

	uint16_t adc_value;
	int current;

	adc_value = HAL_ADC_GetValue(&hadc1);
 8002122:	4809      	ldr	r0, [pc, #36]	@ (8002148 <readAnalogValue+0x3c>)
 8002124:	f001 fee4 	bl	8003ef0 <HAL_ADC_GetValue>
 8002128:	4603      	mov	r3, r0
 800212a:	80fb      	strh	r3, [r7, #6]
	//valor minimo = 2100

	HAL_ADC_Stop(&hadc1);
 800212c:	4806      	ldr	r0, [pc, #24]	@ (8002148 <readAnalogValue+0x3c>)
 800212e:	f001 fdb7 	bl	8003ca0 <HAL_ADC_Stop>
	return adc_value;
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	ee07 3a90 	vmov	s15, r3
 8002138:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800213c:	eeb0 0a67 	vmov.f32	s0, s15
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	24000088 	.word	0x24000088

0800214c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002150:	b672      	cpsid	i
}
 8002152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <Error_Handler+0x8>

08002158 <_Z9get_statev>:
/*********************************************************************************************************
 ** Function name:           get_state
 ** Descriptions:            get the current state
 *********************************************************************************************************/

STATE get_state() {
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
    return state;
 800215c:	4b03      	ldr	r3, [pc, #12]	@ (800216c <_Z9get_statev+0x14>)
 800215e:	781b      	ldrb	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	24000d10 	.word	0x24000d10

08002170 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 8002170:	b580      	push	{r7, lr}
 8002172:	b08e      	sub	sp, #56	@ 0x38
 8002174:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 8002176:	2300      	movs	r3, #0
 8002178:	637b      	str	r3, [r7, #52]	@ 0x34
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 800217a:	2300      	movs	r3, #0
 800217c:	633b      	str	r3, [r7, #48]	@ 0x30
	int state_precharge = 0; // 0 means open, 1 closed
 800217e:	2300      	movs	r3, #0
 8002180:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 8002182:	2301      	movs	r3, #1
 8002184:	61fb      	str	r3, [r7, #28]
	int flag_current = Current_ERROR_Comunication;
 8002186:	2302      	movs	r3, #2
 8002188:	61bb      	str	r3, [r7, #24]


	int gpio_charge = HAL_GPIO_ReadPin(Charge_Button_GPIO_Port, Charge_Button_Pin); // pull-up: 1 = charge started
 800218a:	2180      	movs	r1, #128	@ 0x80
 800218c:	48a1      	ldr	r0, [pc, #644]	@ (8002414 <_Z12select_statev+0x2a4>)
 800218e:	f004 fbb3 	bl	80068f8 <HAL_GPIO_ReadPin>
 8002192:	4603      	mov	r3, r0
 8002194:	617b      	str	r3, [r7, #20]

	if (flag_first_time == 0){
 8002196:	4ba0      	ldr	r3, [pc, #640]	@ (8002418 <_Z12select_statev+0x2a8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <_Z12select_statev+0x3c>
		flag_first_time = 1;
 800219e:	4b9e      	ldr	r3, [pc, #632]	@ (8002418 <_Z12select_statev+0x2a8>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
		HAL_Delay(1000);
 80021a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021a8:	f000 ff5e 	bl	8003068 <HAL_Delay>
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 80021ac:	f000 ff50 	bl	8003050 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]
	int time_s = HAL_GetTick();
 80021b2:	f000 ff4d 	bl	8003050 <HAL_GetTick>
 80021b6:	4603      	mov	r3, r0
 80021b8:	60fb      	str	r3, [r7, #12]



	CPU.voltage_acum = 0; // For precharge
 80021ba:	4b98      	ldr	r3, [pc, #608]	@ (800241c <_Z12select_statev+0x2ac>)
 80021bc:	2200      	movs	r2, #0
 80021be:	62da      	str	r2, [r3, #44]	@ 0x2c


	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 80021c0:	4b97      	ldr	r3, [pc, #604]	@ (8002420 <_Z12select_statev+0x2b0>)
 80021c2:	f241 0268 	movw	r2, #4200	@ 0x1068
 80021c6:	601a      	str	r2, [r3, #0]
	MAX_T = 0;
 80021c8:	4b96      	ldr	r3, [pc, #600]	@ (8002424 <_Z12select_statev+0x2b4>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 80021ce:	2300      	movs	r3, #0
 80021d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021d2:	e08d      	b.n	80022f0 <_Z12select_statev+0x180>
		BMS[i].voltage_acum = 0;// For precharge
 80021d4:	4a94      	ldr	r2, [pc, #592]	@ (8002428 <_Z12select_statev+0x2b8>)
 80021d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d8:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	3388      	adds	r3, #136	@ 0x88
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]


		if (BMS[i].query_voltage(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
 80021e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ea:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
 80021f2:	4a8d      	ldr	r2, [pc, #564]	@ (8002428 <_Z12select_statev+0x2b8>)
 80021f4:	4413      	add	r3, r2
 80021f6:	4a8d      	ldr	r2, [pc, #564]	@ (800242c <_Z12select_statev+0x2bc>)
 80021f8:	6939      	ldr	r1, [r7, #16]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe fdd3 	bl	8000da6 <_ZN7BMS_MOD13query_voltageEmPc>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
		{
			//state = error;
			//flag_ams_ok = 0;
		}

		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 8002204:	4b85      	ldr	r3, [pc, #532]	@ (800241c <_Z12select_statev+0x2ac>)
 8002206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002208:	4987      	ldr	r1, [pc, #540]	@ (8002428 <_Z12select_statev+0x2b8>)
 800220a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220c:	f44f 70c6 	mov.w	r0, #396	@ 0x18c
 8002210:	fb00 f303 	mul.w	r3, r0, r3
 8002214:	440b      	add	r3, r1
 8002216:	3388      	adds	r3, #136	@ 0x88
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4413      	add	r3, r2
 800221c:	4a7f      	ldr	r2, [pc, #508]	@ (800241c <_Z12select_statev+0x2ac>)
 800221e:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 8002220:	4a81      	ldr	r2, [pc, #516]	@ (8002428 <_Z12select_statev+0x2b8>)
 8002222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002224:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	4413      	add	r3, r2
 800222e:	338c      	adds	r3, #140	@ 0x8c
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4b7b      	ldr	r3, [pc, #492]	@ (8002420 <_Z12select_statev+0x2b0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	da0a      	bge.n	8002250 <_Z12select_statev+0xe0>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 800223a:	4a7b      	ldr	r2, [pc, #492]	@ (8002428 <_Z12select_statev+0x2b8>)
 800223c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223e:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	338c      	adds	r3, #140	@ 0x8c
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a74      	ldr	r2, [pc, #464]	@ (8002420 <_Z12select_statev+0x2b0>)
 800224e:	6013      	str	r3, [r2, #0]

		int current_value = readAnalogValue();
 8002250:	f7ff ff5c 	bl	800210c <readAnalogValue>
 8002254:	eef0 7a40 	vmov.f32	s15, s0
 8002258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800225c:	ee17 3a90 	vmov	r3, s15
 8002260:	607b      	str	r3, [r7, #4]
		//printValue(current_value);
		if(MIN_V == 0 || current_value < 50 || BMS[i].query_voltage(time, buffer) != BMS_OK){
 8002262:	4b6f      	ldr	r3, [pc, #444]	@ (8002420 <_Z12select_statev+0x2b0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d011      	beq.n	800228e <_Z12select_statev+0x11e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b31      	cmp	r3, #49	@ 0x31
 800226e:	dd0e      	ble.n	800228e <_Z12select_statev+0x11e>
 8002270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002272:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	4a6b      	ldr	r2, [pc, #428]	@ (8002428 <_Z12select_statev+0x2b8>)
 800227c:	4413      	add	r3, r2
 800227e:	4a6b      	ldr	r2, [pc, #428]	@ (800242c <_Z12select_statev+0x2bc>)
 8002280:	6939      	ldr	r1, [r7, #16]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe fd8f 	bl	8000da6 <_ZN7BMS_MOD13query_voltageEmPc>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <_Z12select_statev+0x122>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <_Z12select_statev+0x124>
 8002292:	2300      	movs	r3, #0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <_Z12select_statev+0x12e>
			//printValue(MIN_V);
			//printValue(current_value);
			//printValue(BMS[i].query_voltage(time, buffer));
		}
		else{
			flag_ams_ok = 1;
 8002298:	4b65      	ldr	r3, [pc, #404]	@ (8002430 <_Z12select_statev+0x2c0>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]
		}

		if (BMS[i].query_temperature(time, buffer) != Temperatures_OK){
 800229e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a0:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 80022a4:	fb02 f303 	mul.w	r3, r2, r3
 80022a8:	4a5f      	ldr	r2, [pc, #380]	@ (8002428 <_Z12select_statev+0x2b8>)
 80022aa:	4413      	add	r3, r2
 80022ac:	4a5f      	ldr	r2, [pc, #380]	@ (800242c <_Z12select_statev+0x2bc>)
 80022ae:	6939      	ldr	r1, [r7, #16]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe fdf6 	bl	8000ea2 <_ZN7BMS_MOD17query_temperatureEmPc>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
			//state = error; DESCOMENTA
		}

		if (BMS[i].MAX_T > MAX_T)
 80022ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002428 <_Z12select_statev+0x2b8>)
 80022bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022be:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	339c      	adds	r3, #156	@ 0x9c
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b55      	ldr	r3, [pc, #340]	@ (8002424 <_Z12select_statev+0x2b4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	dd0a      	ble.n	80022ea <_Z12select_statev+0x17a>
			MAX_T = BMS[i].MAX_T;
 80022d4:	4a54      	ldr	r2, [pc, #336]	@ (8002428 <_Z12select_statev+0x2b8>)
 80022d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d8:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	339c      	adds	r3, #156	@ 0x9c
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a4f      	ldr	r2, [pc, #316]	@ (8002424 <_Z12select_statev+0x2b4>)
 80022e8:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 80022ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ec:	3301      	adds	r3, #1
 80022ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022f0:	4b50      	ldr	r3, [pc, #320]	@ (8002434 <_Z12select_statev+0x2c4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022f6:	429a      	cmp	r2, r3
 80022f8:	f6ff af6c 	blt.w	80021d4 <_Z12select_statev+0x64>
	}

	if (time_s > time_sending_minV + 500) {
 80022fc:	4b4e      	ldr	r3, [pc, #312]	@ (8002438 <_Z12select_statev+0x2c8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	429a      	cmp	r2, r3
 8002308:	dd23      	ble.n	8002352 <_Z12select_statev+0x1e2>
		message_MINV[1] = MIN_V & 0xFF;
 800230a:	4b45      	ldr	r3, [pc, #276]	@ (8002420 <_Z12select_statev+0x2b0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	b2da      	uxtb	r2, r3
 8002310:	4b4a      	ldr	r3, [pc, #296]	@ (800243c <_Z12select_statev+0x2cc>)
 8002312:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 8002314:	4b42      	ldr	r3, [pc, #264]	@ (8002420 <_Z12select_statev+0x2b0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	121b      	asrs	r3, r3, #8
 800231a:	b2da      	uxtb	r2, r3
 800231c:	4b47      	ldr	r3, [pc, #284]	@ (800243c <_Z12select_statev+0x2cc>)
 800231e:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 8002320:	4b41      	ldr	r3, [pc, #260]	@ (8002428 <_Z12select_statev+0x2b8>)
 8002322:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002326:	2b01      	cmp	r3, #1
 8002328:	d010      	beq.n	800234c <_Z12select_statev+0x1dc>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 800232a:	2202      	movs	r2, #2
 800232c:	4943      	ldr	r1, [pc, #268]	@ (800243c <_Z12select_statev+0x2cc>)
 800232e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002332:	f7ff fe25 	bl	8001f80 <module_send_message_CAN1>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	bf14      	ite	ne
 800233c:	2301      	movne	r3, #1
 800233e:	2300      	moveq	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <_Z12select_statev+0x1dc>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 8002346:	483e      	ldr	r0, [pc, #248]	@ (8002440 <_Z12select_statev+0x2d0>)
 8002348:	f7ff fe7c 	bl	8002044 <print>
		}
		time_sending_minV = time_s;
 800234c:	4a3a      	ldr	r2, [pc, #232]	@ (8002438 <_Z12select_statev+0x2c8>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	@ 0x24
 8002356:	e00d      	b.n	8002374 <_Z12select_statev+0x204>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 8002358:	4b31      	ldr	r3, [pc, #196]	@ (8002420 <_Z12select_statev+0x2b0>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4932      	ldr	r1, [pc, #200]	@ (8002428 <_Z12select_statev+0x2b8>)
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	f44f 70c6 	mov.w	r0, #396	@ 0x18c
 8002364:	fb00 f303 	mul.w	r3, r0, r3
 8002368:	440b      	add	r3, r1
 800236a:	3390      	adds	r3, #144	@ 0x90
 800236c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	3301      	adds	r3, #1
 8002372:	627b      	str	r3, [r7, #36]	@ 0x24
 8002374:	4b2f      	ldr	r3, [pc, #188]	@ (8002434 <_Z12select_statev+0x2c4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800237a:	429a      	cmp	r2, r3
 800237c:	dbec      	blt.n	8002358 <_Z12select_statev+0x1e8>

	}



	flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
 800237e:	4a2b      	ldr	r2, [pc, #172]	@ (800242c <_Z12select_statev+0x2bc>)
 8002380:	6939      	ldr	r1, [r7, #16]
 8002382:	4826      	ldr	r0, [pc, #152]	@ (800241c <_Z12select_statev+0x2ac>)
 8002384:	f7fe fe62 	bl	800104c <_ZN7CPU_MOD5queryEmPc>
 8002388:	61f8      	str	r0, [r7, #28]
	//flag_cpu = CPU_OK;

	flag_current = current.query(time, buffer); //asking current how is it
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4a27      	ldr	r2, [pc, #156]	@ (800242c <_Z12select_statev+0x2bc>)
 800238e:	4619      	mov	r1, r3
 8002390:	482c      	ldr	r0, [pc, #176]	@ (8002444 <_Z12select_statev+0x2d4>)
 8002392:	f7fe fee9 	bl	8001168 <_ZN11Current_MOD5queryEiPc>
 8002396:	61b8      	str	r0, [r7, #24]
	print((char*)"voltage acu");
	printValue(CPU.voltage_acum);
	print((char*)"dc bus");
	printValue(CPU.DC_BUS);*/
	//printValue(state);
	switch (state) {
 8002398:	4b2b      	ldr	r3, [pc, #172]	@ (8002448 <_Z12select_statev+0x2d8>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b05      	cmp	r3, #5
 800239e:	f200 810c 	bhi.w	80025ba <_Z12select_statev+0x44a>
 80023a2:	a201      	add	r2, pc, #4	@ (adr r2, 80023a8 <_Z12select_statev+0x238>)
 80023a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a8:	080023c1 	.word	0x080023c1
 80023ac:	080023f3 	.word	0x080023f3
 80023b0:	08002461 	.word	0x08002461
 80023b4:	08002493 	.word	0x08002493
 80023b8:	080024fb 	.word	0x080024fb
 80023bc:	08002535 	.word	0x08002535
	case start:
		CPU.updateState(CPU_DISCONNECTED);
 80023c0:	2102      	movs	r1, #2
 80023c2:	4816      	ldr	r0, [pc, #88]	@ (800241c <_Z12select_statev+0x2ac>)
 80023c4:	f7fe fe71 	bl	80010aa <_ZN7CPU_MOD11updateStateEi>
		fan_speed = 0;
 80023c8:	4b20      	ldr	r3, [pc, #128]	@ (800244c <_Z12select_statev+0x2dc>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 80023ce:	4b1f      	ldr	r3, [pc, #124]	@ (800244c <_Z12select_statev+0x2dc>)
 80023d0:	881a      	ldrh	r2, [r3, #0]
 80023d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002450 <_Z12select_statev+0x2e0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	635a      	str	r2, [r3, #52]	@ 0x34
		if(gpio_charge == GPIO_PIN_SET){
			//state = charge;
		}
		if (flag_cpu != CPU_ERROR_COMMUNICATION && flag_start_button == 1)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	f000 80e6 	beq.w	80025ac <_Z12select_statev+0x43c>
 80023e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002454 <_Z12select_statev+0x2e4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	f040 80e1 	bne.w	80025ac <_Z12select_statev+0x43c>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 80023ea:	4b17      	ldr	r3, [pc, #92]	@ (8002448 <_Z12select_statev+0x2d8>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
		break;
 80023f0:	e0dc      	b.n	80025ac <_Z12select_statev+0x43c>
	case precharge:
		state_air_n = 1;
 80023f2:	2301      	movs	r3, #1
 80023f4:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 1;
 80023fa:	2301      	movs	r3, #1
 80023fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_PRECHARGE);
 80023fe:	2101      	movs	r1, #1
 8002400:	4806      	ldr	r0, [pc, #24]	@ (800241c <_Z12select_statev+0x2ac>)
 8002402:	f7fe fe52 	bl	80010aa <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu == CPU_OK) {
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d125      	bne.n	8002458 <_Z12select_statev+0x2e8>
			state = transition;
 800240c:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <_Z12select_statev+0x2d8>)
 800240e:	2202      	movs	r2, #2
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	e025      	b.n	8002460 <_Z12select_statev+0x2f0>
 8002414:	58021800 	.word	0x58021800
 8002418:	24000cc4 	.word	0x24000cc4
 800241c:	24000c88 	.word	0x24000c88
 8002420:	24000004 	.word	0x24000004
 8002424:	24000c78 	.word	0x24000c78
 8002428:	240004bc 	.word	0x240004bc
 800242c:	24000d14 	.word	0x24000d14
 8002430:	24000008 	.word	0x24000008
 8002434:	24000000 	.word	0x24000000
 8002438:	24000c80 	.word	0x24000c80
 800243c:	24000c7c 	.word	0x24000c7c
 8002440:	0800d0a8 	.word	0x0800d0a8
 8002444:	24000ccc 	.word	0x24000ccc
 8002448:	24000d10 	.word	0x24000d10
 800244c:	24000c84 	.word	0x24000c84
 8002450:	240002a8 	.word	0x240002a8
 8002454:	24000cc8 	.word	0x24000cc8
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2b01      	cmp	r3, #1
 800245c:	f000 80a8 	beq.w	80025b0 <_Z12select_statev+0x440>
			//state = error;
		 //else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
		break;
	case transition:
		state_air_n = 1;
 8002460:	2301      	movs	r3, #1
 8002462:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 1;
 8002468:	2301      	movs	r3, #1
 800246a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_PRECHARGE);
 800246c:	2101      	movs	r1, #1
 800246e:	4879      	ldr	r0, [pc, #484]	@ (8002654 <_Z12select_statev+0x4e4>)
 8002470:	f7fe fe1b 	bl	80010aa <_ZN7CPU_MOD11updateStateEi>
		//if (((CPU.voltage_acum)) * 0.7 < CPU.DC_BUS){
		//printValue(CPU.DC_BUS);
		if(CPU.DC_BUS > 200 && 	CPU.DC_BUS < 500){
 8002474:	4b77      	ldr	r3, [pc, #476]	@ (8002654 <_Z12select_statev+0x4e4>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002478:	2bc8      	cmp	r3, #200	@ 0xc8
 800247a:	f340 809b 	ble.w	80025b4 <_Z12select_statev+0x444>
 800247e:	4b75      	ldr	r3, [pc, #468]	@ (8002654 <_Z12select_statev+0x4e4>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002486:	f280 8095 	bge.w	80025b4 <_Z12select_statev+0x444>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 800248a:	4b73      	ldr	r3, [pc, #460]	@ (8002658 <_Z12select_statev+0x4e8>)
 800248c:	2203      	movs	r2, #3
 800248e:	701a      	strb	r2, [r3, #0]
		//}else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
		 //else if(flag_current != Current_OK) state = error;
		}
		break;
 8002490:	e090      	b.n	80025b4 <_Z12select_statev+0x444>
	case run:
		state_air_n = 1;
 8002492:	2301      	movs	r3, #1
 8002494:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 1;
 8002496:	2301      	movs	r3, #1
 8002498:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 1;
 800249a:	2301      	movs	r3, #1
 800249c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_POWER);
 800249e:	2100      	movs	r1, #0
 80024a0:	486c      	ldr	r0, [pc, #432]	@ (8002654 <_Z12select_statev+0x4e4>)
 80024a2:	f7fe fe02 	bl	80010aa <_ZN7CPU_MOD11updateStateEi>
		//print((char*)"run");
		printValue(CPU.DC_BUS);
 80024a6:	4b6b      	ldr	r3, [pc, #428]	@ (8002654 <_Z12select_statev+0x4e4>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fe06 	bl	80020bc <printValue>
		flag_start_button = 0;
 80024b0:	4b6a      	ldr	r3, [pc, #424]	@ (800265c <_Z12select_statev+0x4ec>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
		if(CPU.DC_BUS < 60){
 80024b6:	4b67      	ldr	r3, [pc, #412]	@ (8002654 <_Z12select_statev+0x4e4>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	2b3b      	cmp	r3, #59	@ 0x3b
 80024bc:	dc02      	bgt.n	80024c4 <_Z12select_statev+0x354>
			state = start;
 80024be:	4b66      	ldr	r3, [pc, #408]	@ (8002658 <_Z12select_statev+0x4e8>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
		}
		fan_speed = (FAN_TIMER_ARR * 75) / 100;
 80024c4:	4b66      	ldr	r3, [pc, #408]	@ (8002660 <_Z12select_statev+0x4f0>)
 80024c6:	f641 62ef 	movw	r2, #7919	@ 0x1eef
 80024ca:	801a      	strh	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 80024cc:	4b64      	ldr	r3, [pc, #400]	@ (8002660 <_Z12select_statev+0x4f0>)
 80024ce:	881a      	ldrh	r2, [r3, #0]
 80024d0:	4b64      	ldr	r3, [pc, #400]	@ (8002664 <_Z12select_statev+0x4f4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	635a      	str	r2, [r3, #52]	@ 0x34

		if ((flag_cpu == CPU_ERROR_COMMUNICATION) && (flag_charger == 1)){
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d106      	bne.n	80024ea <_Z12select_statev+0x37a>
 80024dc:	4b62      	ldr	r3, [pc, #392]	@ (8002668 <_Z12select_statev+0x4f8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d102      	bne.n	80024ea <_Z12select_statev+0x37a>
			//state = error; //If I disconnect the charger, error
			print((char*)"CPU");
 80024e4:	4861      	ldr	r0, [pc, #388]	@ (800266c <_Z12select_statev+0x4fc>)
 80024e6:	f7ff fdad 	bl	8002044 <print>
		}
		if (flag_current != Current_OK){
			//state = error; //If current is too high, error
		}
		if(HAL_GPIO_ReadPin(DIGITAL1_GPIO_Port, DIGITAL1_Pin) == GPIO_PIN_RESET){ //SDC IO
 80024ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024ee:	4860      	ldr	r0, [pc, #384]	@ (8002670 <_Z12select_statev+0x500>)
 80024f0:	f004 fa02 	bl	80068f8 <HAL_GPIO_ReadPin>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
			//state = error;
			//print((char*)"DIGITAL");
		}
		break;
 80024f8:	e05f      	b.n	80025ba <_Z12select_statev+0x44a>

	case charge: {
		state_air_n = 1;
 80024fa:	2301      	movs	r3, #1
 80024fc:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 1;
 80024fe:	2301      	movs	r3, #1
 8002500:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_CHARGING);
 8002506:	2104      	movs	r1, #4
 8002508:	4852      	ldr	r0, [pc, #328]	@ (8002654 <_Z12select_statev+0x4e4>)
 800250a:	f7fe fdce 	bl	80010aa <_ZN7CPU_MOD11updateStateEi>


		fan_speed = (FAN_TIMER_ARR * 40) / 100;
 800250e:	4b54      	ldr	r3, [pc, #336]	@ (8002660 <_Z12select_statev+0x4f0>)
 8002510:	f241 027f 	movw	r2, #4223	@ 0x107f
 8002514:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 8002516:	4b52      	ldr	r3, [pc, #328]	@ (8002660 <_Z12select_statev+0x4f0>)
 8002518:	881a      	ldrh	r2, [r3, #0]
 800251a:	4b52      	ldr	r3, [pc, #328]	@ (8002664 <_Z12select_statev+0x4f4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	635a      	str	r2, [r3, #52]	@ 0x34
				state = error; //Charge has been interrupted
		} else {
			charge_current_error_counter = 0;
		}*/

		if (gpio_charge == GPIO_PIN_RESET){
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d148      	bne.n	80025b8 <_Z12select_statev+0x448>
			state = start;
 8002526:	4b4c      	ldr	r3, [pc, #304]	@ (8002658 <_Z12select_statev+0x4e8>)
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
			charge_current_error_counter = 0;
 800252c:	4b51      	ldr	r3, [pc, #324]	@ (8002674 <_Z12select_statev+0x504>)
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
		}


		break;
 8002532:	e041      	b.n	80025b8 <_Z12select_statev+0x448>
	}

	case error:
		state_air_n = 0; //All relés closed
 8002534:	2300      	movs	r3, #0
 8002536:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_ERROR);
 8002540:	2103      	movs	r1, #3
 8002542:	4844      	ldr	r0, [pc, #272]	@ (8002654 <_Z12select_statev+0x4e4>)
 8002544:	f7fe fdb1 	bl	80010aa <_ZN7CPU_MOD11updateStateEi>
		int current_value = readAnalogValue();
 8002548:	f7ff fde0 	bl	800210c <readAnalogValue>
 800254c:	eef0 7a40 	vmov.f32	s15, s0
 8002550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002554:	ee17 3a90 	vmov	r3, s15
 8002558:	60bb      	str	r3, [r7, #8]
		for (int i = 0; i < BMS_N; i++) {
 800255a:	2300      	movs	r3, #0
 800255c:	623b      	str	r3, [r7, #32]
 800255e:	e017      	b.n	8002590 <_Z12select_statev+0x420>
			if(MIN_V != 0 && current_value > 50 && BMS[i].error_volt == BMS_OK){
 8002560:	4b45      	ldr	r3, [pc, #276]	@ (8002678 <_Z12select_statev+0x508>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d010      	beq.n	800258a <_Z12select_statev+0x41a>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b32      	cmp	r3, #50	@ 0x32
 800256c:	dd0d      	ble.n	800258a <_Z12select_statev+0x41a>
 800256e:	4a43      	ldr	r2, [pc, #268]	@ (800267c <_Z12select_statev+0x50c>)
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	33a4      	adds	r3, #164	@ 0xa4
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d102      	bne.n	800258a <_Z12select_statev+0x41a>
				state = start;
 8002584:	4b34      	ldr	r3, [pc, #208]	@ (8002658 <_Z12select_statev+0x4e8>)
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < BMS_N; i++) {
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	3301      	adds	r3, #1
 800258e:	623b      	str	r3, [r7, #32]
 8002590:	4b3b      	ldr	r3, [pc, #236]	@ (8002680 <_Z12select_statev+0x510>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6a3a      	ldr	r2, [r7, #32]
 8002596:	429a      	cmp	r2, r3
 8002598:	dbe2      	blt.n	8002560 <_Z12select_statev+0x3f0>
			}
		}

		fan_speed = 0;
 800259a:	4b31      	ldr	r3, [pc, #196]	@ (8002660 <_Z12select_statev+0x4f0>)
 800259c:	2200      	movs	r2, #0
 800259e:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 80025a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002660 <_Z12select_statev+0x4f0>)
 80025a2:	881a      	ldrh	r2, [r3, #0]
 80025a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002664 <_Z12select_statev+0x4f4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 80025aa:	e006      	b.n	80025ba <_Z12select_statev+0x44a>
		break;
 80025ac:	bf00      	nop
 80025ae:	e004      	b.n	80025ba <_Z12select_statev+0x44a>
		break;
 80025b0:	bf00      	nop
 80025b2:	e002      	b.n	80025ba <_Z12select_statev+0x44a>
		break;
 80025b4:	bf00      	nop
 80025b6:	e000      	b.n	80025ba <_Z12select_statev+0x44a>
		break;
 80025b8:	bf00      	nop
	 sprintf(buffer, " - STATE:     %i\n", state);
	 print(buffer);
	 sprintf(buffer, "***********************\n");
	 print(buffer);*/
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
			flag_ams_ok ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80025ba:	4b32      	ldr	r3, [pc, #200]	@ (8002684 <_Z12select_statev+0x514>)
 80025bc:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <_Z12select_statev+0x456>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <_Z12select_statev+0x458>
 80025c6:	2300      	movs	r3, #0
 80025c8:	461a      	mov	r2, r3
 80025ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025ce:	482e      	ldr	r0, [pc, #184]	@ (8002688 <_Z12select_statev+0x518>)
 80025d0:	f004 f9aa 	bl	8006928 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 80025d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <_Z12select_statev+0x46e>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <_Z12select_statev+0x470>
 80025de:	2300      	movs	r3, #0
 80025e0:	461a      	mov	r2, r3
 80025e2:	2108      	movs	r1, #8
 80025e4:	4829      	ldr	r0, [pc, #164]	@ (800268c <_Z12select_statev+0x51c>)
 80025e6:	f004 f99f 	bl	8006928 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 80025ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <_Z12select_statev+0x484>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <_Z12select_statev+0x486>
 80025f4:	2300      	movs	r3, #0
 80025f6:	461a      	mov	r2, r3
 80025f8:	2110      	movs	r1, #16
 80025fa:	4824      	ldr	r0, [pc, #144]	@ (800268c <_Z12select_statev+0x51c>)
 80025fc:	f004 f994 	bl	8006928 <HAL_GPIO_WritePin>
			state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 8002600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <_Z12select_statev+0x49a>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <_Z12select_statev+0x49c>
 800260a:	2300      	movs	r3, #0
 800260c:	461a      	mov	r2, r3
 800260e:	2120      	movs	r1, #32
 8002610:	481e      	ldr	r0, [pc, #120]	@ (800268c <_Z12select_statev+0x51c>)
 8002612:	f004 f989 	bl	8006928 <HAL_GPIO_WritePin>
			state_precharge ? GPIO_PIN_SET : GPIO_PIN_RESET);
	if(1){
		printnl((char*)"State: ");
 8002616:	481e      	ldr	r0, [pc, #120]	@ (8002690 <_Z12select_statev+0x520>)
 8002618:	f7ff fd32 	bl	8002080 <printnl>
		printValue(state);
 800261c:	4b0e      	ldr	r3, [pc, #56]	@ (8002658 <_Z12select_statev+0x4e8>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fd4b 	bl	80020bc <printValue>
		printnl((char*)"State AIR+: ");
 8002626:	481b      	ldr	r0, [pc, #108]	@ (8002694 <_Z12select_statev+0x524>)
 8002628:	f7ff fd2a 	bl	8002080 <printnl>
		printValue(state_air_p);
 800262c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800262e:	f7ff fd45 	bl	80020bc <printValue>
		printnl((char*)"State AIR-: ");
 8002632:	4819      	ldr	r0, [pc, #100]	@ (8002698 <_Z12select_statev+0x528>)
 8002634:	f7ff fd24 	bl	8002080 <printnl>
		printValue(state_air_n);
 8002638:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800263a:	f7ff fd3f 	bl	80020bc <printValue>
		printnl((char*)"Relee Prec:");
 800263e:	4817      	ldr	r0, [pc, #92]	@ (800269c <_Z12select_statev+0x52c>)
 8002640:	f7ff fd1e 	bl	8002080 <printnl>
		printValue(state_precharge);
 8002644:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002646:	f7ff fd39 	bl	80020bc <printValue>





}
 800264a:	bf00      	nop
 800264c:	3738      	adds	r7, #56	@ 0x38
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	24000c88 	.word	0x24000c88
 8002658:	24000d10 	.word	0x24000d10
 800265c:	24000cc8 	.word	0x24000cc8
 8002660:	24000c84 	.word	0x24000c84
 8002664:	240002a8 	.word	0x240002a8
 8002668:	24000cbc 	.word	0x24000cbc
 800266c:	0800d0c8 	.word	0x0800d0c8
 8002670:	58021000 	.word	0x58021000
 8002674:	24000cc0 	.word	0x24000cc0
 8002678:	24000004 	.word	0x24000004
 800267c:	240004bc 	.word	0x240004bc
 8002680:	24000000 	.word	0x24000000
 8002684:	24000008 	.word	0x24000008
 8002688:	58021400 	.word	0x58021400
 800268c:	58020c00 	.word	0x58020c00
 8002690:	0800d0cc 	.word	0x0800d0cc
 8002694:	0800d0d4 	.word	0x0800d0d4
 8002698:	0800d0e4 	.word	0x0800d0e4
 800269c:	0800d0f4 	.word	0x0800d0f4

080026a0 <_Z11parse_state6CANMsg>:

/*********************************************************************************************************
 ** Function name:           parse_state
 ** Descriptions:            Function for analysing the data from the CAN
 *********************************************************************************************************/
void parse_state(CANMsg data) {
 80026a0:	b084      	sub	sp, #16
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	f107 0c18 	add.w	ip, r7, #24
 80026ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (data.id == 0x600){
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80026b6:	d102      	bne.n	80026be <_Z11parse_state6CANMsg+0x1e>
		flag_start_button = 1;
 80026b8:	4b32      	ldr	r3, [pc, #200]	@ (8002784 <_Z11parse_state6CANMsg+0xe4>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
	}

	if (data.id == 0x100){
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026c4:	d105      	bne.n	80026d2 <_Z11parse_state6CANMsg+0x32>
		CPU.DC_BUS = (int)((data.buf[1]<<8)|data.buf[0]); // This direction sends the voltage in DC_BUS
 80026c6:	7fbb      	ldrb	r3, [r7, #30]
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	7f7a      	ldrb	r2, [r7, #29]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	4a2e      	ldr	r2, [pc, #184]	@ (8002788 <_Z11parse_state6CANMsg+0xe8>)
 80026d0:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	uint32_t time = HAL_GetTick();
 80026d2:	f000 fcbd 	bl	8003050 <HAL_GetTick>
 80026d6:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < BMS_N; i++) {
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	e017      	b.n	8002712 <_Z11parse_state6CANMsg+0x72>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], time); //Checking if the message received is for  BMS
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 80026e8:	fb02 f303 	mul.w	r3, r2, r3
 80026ec:	4a27      	ldr	r2, [pc, #156]	@ (800278c <_Z11parse_state6CANMsg+0xec>)
 80026ee:	1898      	adds	r0, r3, r2
 80026f0:	69b9      	ldr	r1, [r7, #24]
 80026f2:	f107 021d 	add.w	r2, r7, #29
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	f7fe fa30 	bl	8000b5c <_ZN7BMS_MOD5parseEmPhm>
 80026fc:	4603      	mov	r3, r0
 80026fe:	73fb      	strb	r3, [r7, #15]
		if (flag_bms)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <_Z11parse_state6CANMsg+0x6c>
			i = BMS_N;
 8002706:	4b22      	ldr	r3, [pc, #136]	@ (8002790 <_Z11parse_state6CANMsg+0xf0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < BMS_N; i++) {
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	3301      	adds	r3, #1
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	4b1f      	ldr	r3, [pc, #124]	@ (8002790 <_Z11parse_state6CANMsg+0xf0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	429a      	cmp	r2, r3
 800271a:	dbe2      	blt.n	80026e2 <_Z11parse_state6CANMsg+0x42>
	}


	if (!flag_bms) {
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	f083 0301 	eor.w	r3, r3, #1
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d025      	beq.n	8002774 <_Z11parse_state6CANMsg+0xd4>
		if (CPU.parse(data.id, &data.buf[0], time))
 8002728:	69b9      	ldr	r1, [r7, #24]
 800272a:	f107 021d 	add.w	r2, r7, #29
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	4815      	ldr	r0, [pc, #84]	@ (8002788 <_Z11parse_state6CANMsg+0xe8>)
 8002732:	f7fe fc49 	bl	8000fc8 <_ZN7CPU_MOD5parseEmPhm>
			;                       //Cheking if message is for CPU
		if (data.id == 419385575) //If message from this direction received, it is because the charger is connected and the accu is for charging
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	4a16      	ldr	r2, [pc, #88]	@ (8002794 <_Z11parse_state6CANMsg+0xf4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d11a      	bne.n	8002774 <_Z11parse_state6CANMsg+0xd4>
				{
			for (int i = 0; i < BMS_N; i++) {
 800273e:	2300      	movs	r3, #0
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	e00c      	b.n	800275e <_Z11parse_state6CANMsg+0xbe>
				BMS[i].flag_charger = 1;
 8002744:	4a11      	ldr	r2, [pc, #68]	@ (800278c <_Z11parse_state6CANMsg+0xec>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	3394      	adds	r3, #148	@ 0x94
 8002754:	2201      	movs	r2, #1
 8002756:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3301      	adds	r3, #1
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <_Z11parse_state6CANMsg+0xf0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	429a      	cmp	r2, r3
 8002766:	dbed      	blt.n	8002744 <_Z11parse_state6CANMsg+0xa4>
			}

			current.flag_charger = 1;
 8002768:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <_Z11parse_state6CANMsg+0xf8>)
 800276a:	2201      	movs	r2, #1
 800276c:	639a      	str	r2, [r3, #56]	@ 0x38
			flag_charger = 1;
 800276e:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <_Z11parse_state6CANMsg+0xfc>)
 8002770:	2201      	movs	r2, #1
 8002772:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800277e:	b004      	add	sp, #16
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	24000cc8 	.word	0x24000cc8
 8002788:	24000c88 	.word	0x24000c88
 800278c:	240004bc 	.word	0x240004bc
 8002790:	24000000 	.word	0x24000000
 8002794:	18ff50e7 	.word	0x18ff50e7
 8002798:	24000ccc 	.word	0x24000ccc
 800279c:	24000cbc 	.word	0x24000cbc

080027a0 <_Z41__static_initialization_and_destruction_0v>:
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af06      	add	r7, sp, #24
		};
 80027a6:	4c40      	ldr	r4, [pc, #256]	@ (80028a8 <_Z41__static_initialization_and_destruction_0v+0x108>)
 80027a8:	2369      	movs	r3, #105	@ 0x69
 80027aa:	9304      	str	r3, [sp, #16]
 80027ac:	2332      	movs	r3, #50	@ 0x32
 80027ae:	9303      	str	r3, [sp, #12]
 80027b0:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80027b4:	9302      	str	r3, [sp, #8]
 80027b6:	2313      	movs	r3, #19
 80027b8:	9301      	str	r3, [sp, #4]
 80027ba:	233c      	movs	r3, #60	@ 0x3c
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80027c2:	f241 0268 	movw	r2, #4200	@ 0x1068
 80027c6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7fd ff8e 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80027d0:	f504 74c6 	add.w	r4, r4, #396	@ 0x18c
 80027d4:	23cd      	movs	r3, #205	@ 0xcd
 80027d6:	9304      	str	r3, [sp, #16]
 80027d8:	2364      	movs	r3, #100	@ 0x64
 80027da:	9303      	str	r3, [sp, #12]
 80027dc:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80027e0:	9302      	str	r3, [sp, #8]
 80027e2:	2313      	movs	r3, #19
 80027e4:	9301      	str	r3, [sp, #4]
 80027e6:	233c      	movs	r3, #60	@ 0x3c
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80027ee:	f241 0268 	movw	r2, #4200	@ 0x1068
 80027f2:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80027f6:	4620      	mov	r0, r4
 80027f8:	f7fd ff78 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80027fc:	f504 74c6 	add.w	r4, r4, #396	@ 0x18c
 8002800:	f240 1331 	movw	r3, #305	@ 0x131
 8002804:	9304      	str	r3, [sp, #16]
 8002806:	2396      	movs	r3, #150	@ 0x96
 8002808:	9303      	str	r3, [sp, #12]
 800280a:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800280e:	9302      	str	r3, [sp, #8]
 8002810:	2313      	movs	r3, #19
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	233c      	movs	r3, #60	@ 0x3c
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800281c:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002820:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8002824:	4620      	mov	r0, r4
 8002826:	f7fd ff61 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 800282a:	f504 74c6 	add.w	r4, r4, #396	@ 0x18c
 800282e:	f240 1395 	movw	r3, #405	@ 0x195
 8002832:	9304      	str	r3, [sp, #16]
 8002834:	23c8      	movs	r3, #200	@ 0xc8
 8002836:	9303      	str	r3, [sp, #12]
 8002838:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800283c:	9302      	str	r3, [sp, #8]
 800283e:	2313      	movs	r3, #19
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	233c      	movs	r3, #60	@ 0x3c
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800284a:	f241 0268 	movw	r2, #4200	@ 0x1068
 800284e:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8002852:	4620      	mov	r0, r4
 8002854:	f7fd ff4a 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8002858:	f504 70c6 	add.w	r0, r4, #396	@ 0x18c
 800285c:	f240 13f9 	movw	r3, #505	@ 0x1f9
 8002860:	9304      	str	r3, [sp, #16]
 8002862:	23fa      	movs	r3, #250	@ 0xfa
 8002864:	9303      	str	r3, [sp, #12]
 8002866:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800286a:	9302      	str	r3, [sp, #8]
 800286c:	2313      	movs	r3, #19
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	233c      	movs	r3, #60	@ 0x3c
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002878:	f241 0268 	movw	r2, #4200	@ 0x1068
 800287c:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8002880:	f7fd ff34 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 8002884:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002888:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800288c:	2120      	movs	r1, #32
 800288e:	4807      	ldr	r0, [pc, #28]	@ (80028ac <_Z41__static_initialization_and_destruction_0v+0x10c>)
 8002890:	f7fe fb48 	bl	8000f24 <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 8002894:	22c8      	movs	r2, #200	@ 0xc8
 8002896:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800289a:	4805      	ldr	r0, [pc, #20]	@ (80028b0 <_Z41__static_initialization_and_destruction_0v+0x110>)
 800289c:	f7fe fc17 	bl	80010ce <_ZN11Current_MODC1Emi>
}
 80028a0:	bf00      	nop
 80028a2:	3704      	adds	r7, #4
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd90      	pop	{r4, r7, pc}
 80028a8:	240004bc 	.word	0x240004bc
 80028ac:	24000c88 	.word	0x24000c88
 80028b0:	24000ccc 	.word	0x24000ccc

080028b4 <_GLOBAL__sub_I_BMS>:
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	f7ff ff72 	bl	80027a0 <_Z41__static_initialization_and_destruction_0v>
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c6:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <HAL_MspInit+0x30>)
 80028c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028cc:	4a08      	ldr	r2, [pc, #32]	@ (80028f0 <HAL_MspInit+0x30>)
 80028ce:	f043 0302 	orr.w	r3, r3, #2
 80028d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80028d6:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <HAL_MspInit+0x30>)
 80028d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	58024400 	.word	0x58024400

080028f4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08c      	sub	sp, #48	@ 0x30
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a31      	ldr	r2, [pc, #196]	@ (80029d8 <HAL_ADC_MspInit+0xe4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d12b      	bne.n	800296e <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002916:	4b31      	ldr	r3, [pc, #196]	@ (80029dc <HAL_ADC_MspInit+0xe8>)
 8002918:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800291c:	4a2f      	ldr	r2, [pc, #188]	@ (80029dc <HAL_ADC_MspInit+0xe8>)
 800291e:	f043 0320 	orr.w	r3, r3, #32
 8002922:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002926:	4b2d      	ldr	r3, [pc, #180]	@ (80029dc <HAL_ADC_MspInit+0xe8>)
 8002928:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002934:	4b29      	ldr	r3, [pc, #164]	@ (80029dc <HAL_ADC_MspInit+0xe8>)
 8002936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800293a:	4a28      	ldr	r2, [pc, #160]	@ (80029dc <HAL_ADC_MspInit+0xe8>)
 800293c:	f043 0320 	orr.w	r3, r3, #32
 8002940:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002944:	4b25      	ldr	r3, [pc, #148]	@ (80029dc <HAL_ADC_MspInit+0xe8>)
 8002946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002952:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002958:	2303      	movs	r3, #3
 800295a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	4619      	mov	r1, r3
 8002966:	481e      	ldr	r0, [pc, #120]	@ (80029e0 <HAL_ADC_MspInit+0xec>)
 8002968:	f003 fe1e 	bl	80065a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 800296c:	e02f      	b.n	80029ce <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1c      	ldr	r2, [pc, #112]	@ (80029e4 <HAL_ADC_MspInit+0xf0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d12a      	bne.n	80029ce <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002978:	4b18      	ldr	r3, [pc, #96]	@ (80029dc <HAL_ADC_MspInit+0xe8>)
 800297a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800297e:	4a17      	ldr	r2, [pc, #92]	@ (80029dc <HAL_ADC_MspInit+0xe8>)
 8002980:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002984:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002988:	4b14      	ldr	r3, [pc, #80]	@ (80029dc <HAL_ADC_MspInit+0xe8>)
 800298a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800298e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002996:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <HAL_ADC_MspInit+0xe8>)
 8002998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800299c:	4a0f      	ldr	r2, [pc, #60]	@ (80029dc <HAL_ADC_MspInit+0xe8>)
 800299e:	f043 0320 	orr.w	r3, r3, #32
 80029a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029a6:	4b0d      	ldr	r3, [pc, #52]	@ (80029dc <HAL_ADC_MspInit+0xe8>)
 80029a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029ba:	2303      	movs	r3, #3
 80029bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029c2:	f107 031c 	add.w	r3, r7, #28
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	@ (80029e0 <HAL_ADC_MspInit+0xec>)
 80029ca:	f003 fded 	bl	80065a8 <HAL_GPIO_Init>
}
 80029ce:	bf00      	nop
 80029d0:	3730      	adds	r7, #48	@ 0x30
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40022000 	.word	0x40022000
 80029dc:	58024400 	.word	0x58024400
 80029e0:	58021400 	.word	0x58021400
 80029e4:	58026000 	.word	0x58026000

080029e8 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b0ba      	sub	sp, #232	@ 0xe8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a00:	f107 0318 	add.w	r3, r7, #24
 8002a04:	22b8      	movs	r2, #184	@ 0xb8
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f009 fcef 	bl	800c3ec <memset>
  if(hfdcan->Instance==FDCAN1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a5a      	ldr	r2, [pc, #360]	@ (8002b7c <HAL_FDCAN_MspInit+0x194>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d157      	bne.n	8002ac8 <HAL_FDCAN_MspInit+0xe0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002a18:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a2a:	f107 0318 	add.w	r3, r7, #24
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f004 ff34 	bl	800789c <HAL_RCCEx_PeriphCLKConfig>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002a3a:	f7ff fb87 	bl	800214c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002a3e:	4b50      	ldr	r3, [pc, #320]	@ (8002b80 <HAL_FDCAN_MspInit+0x198>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	3301      	adds	r3, #1
 8002a44:	4a4e      	ldr	r2, [pc, #312]	@ (8002b80 <HAL_FDCAN_MspInit+0x198>)
 8002a46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002a48:	4b4d      	ldr	r3, [pc, #308]	@ (8002b80 <HAL_FDCAN_MspInit+0x198>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d10e      	bne.n	8002a6e <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002a50:	4b4c      	ldr	r3, [pc, #304]	@ (8002b84 <HAL_FDCAN_MspInit+0x19c>)
 8002a52:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002a56:	4a4b      	ldr	r2, [pc, #300]	@ (8002b84 <HAL_FDCAN_MspInit+0x19c>)
 8002a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a5c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002a60:	4b48      	ldr	r3, [pc, #288]	@ (8002b84 <HAL_FDCAN_MspInit+0x19c>)
 8002a62:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a6e:	4b45      	ldr	r3, [pc, #276]	@ (8002b84 <HAL_FDCAN_MspInit+0x19c>)
 8002a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a74:	4a43      	ldr	r2, [pc, #268]	@ (8002b84 <HAL_FDCAN_MspInit+0x19c>)
 8002a76:	f043 0308 	orr.w	r3, r3, #8
 8002a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a7e:	4b41      	ldr	r3, [pc, #260]	@ (8002b84 <HAL_FDCAN_MspInit+0x19c>)
 8002a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002aa4:	2309      	movs	r3, #9
 8002aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002aaa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4835      	ldr	r0, [pc, #212]	@ (8002b88 <HAL_FDCAN_MspInit+0x1a0>)
 8002ab2:	f003 fd79 	bl	80065a8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2100      	movs	r1, #0
 8002aba:	2013      	movs	r0, #19
 8002abc:	f002 fb71 	bl	80051a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002ac0:	2013      	movs	r0, #19
 8002ac2:	f002 fb88 	bl	80051d6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002ac6:	e054      	b.n	8002b72 <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a2f      	ldr	r2, [pc, #188]	@ (8002b8c <HAL_FDCAN_MspInit+0x1a4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d14f      	bne.n	8002b72 <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002ad2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ae4:	f107 0318 	add.w	r3, r7, #24
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f004 fed7 	bl	800789c <HAL_RCCEx_PeriphCLKConfig>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002af4:	f7ff fb2a 	bl	800214c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002af8:	4b21      	ldr	r3, [pc, #132]	@ (8002b80 <HAL_FDCAN_MspInit+0x198>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3301      	adds	r3, #1
 8002afe:	4a20      	ldr	r2, [pc, #128]	@ (8002b80 <HAL_FDCAN_MspInit+0x198>)
 8002b00:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002b02:	4b1f      	ldr	r3, [pc, #124]	@ (8002b80 <HAL_FDCAN_MspInit+0x198>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d10e      	bne.n	8002b28 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b84 <HAL_FDCAN_MspInit+0x19c>)
 8002b0c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002b10:	4a1c      	ldr	r2, [pc, #112]	@ (8002b84 <HAL_FDCAN_MspInit+0x19c>)
 8002b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b16:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b84 <HAL_FDCAN_MspInit+0x19c>)
 8002b1c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b28:	4b16      	ldr	r3, [pc, #88]	@ (8002b84 <HAL_FDCAN_MspInit+0x19c>)
 8002b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b2e:	4a15      	ldr	r2, [pc, #84]	@ (8002b84 <HAL_FDCAN_MspInit+0x19c>)
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b38:	4b12      	ldr	r3, [pc, #72]	@ (8002b84 <HAL_FDCAN_MspInit+0x19c>)
 8002b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002b46:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002b60:	2309      	movs	r3, #9
 8002b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b66:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4808      	ldr	r0, [pc, #32]	@ (8002b90 <HAL_FDCAN_MspInit+0x1a8>)
 8002b6e:	f003 fd1b 	bl	80065a8 <HAL_GPIO_Init>
}
 8002b72:	bf00      	nop
 8002b74:	37e8      	adds	r7, #232	@ 0xe8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	4000a000 	.word	0x4000a000
 8002b80:	24000d64 	.word	0x24000d64
 8002b84:	58024400 	.word	0x58024400
 8002b88:	58020c00 	.word	0x58020c00
 8002b8c:	4000a400 	.word	0x4000a400
 8002b90:	58020400 	.word	0x58020400

08002b94 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8002bd0 <HAL_TIM_Base_MspInit+0x3c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <HAL_TIM_Base_MspInit+0x40>)
 8002ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bac:	4a09      	ldr	r2, [pc, #36]	@ (8002bd4 <HAL_TIM_Base_MspInit+0x40>)
 8002bae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002bb6:	4b07      	ldr	r3, [pc, #28]	@ (8002bd4 <HAL_TIM_Base_MspInit+0x40>)
 8002bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	40014800 	.word	0x40014800
 8002bd4:	58024400 	.word	0x58024400

08002bd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 030c 	add.w	r3, r7, #12
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a13      	ldr	r2, [pc, #76]	@ (8002c44 <HAL_TIM_MspPostInit+0x6c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d11f      	bne.n	8002c3a <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfa:	4b13      	ldr	r3, [pc, #76]	@ (8002c48 <HAL_TIM_MspPostInit+0x70>)
 8002bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c00:	4a11      	ldr	r2, [pc, #68]	@ (8002c48 <HAL_TIM_MspPostInit+0x70>)
 8002c02:	f043 0302 	orr.w	r3, r3, #2
 8002c06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c48 <HAL_TIM_MspPostInit+0x70>)
 8002c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PB9     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2e:	f107 030c 	add.w	r3, r7, #12
 8002c32:	4619      	mov	r1, r3
 8002c34:	4805      	ldr	r0, [pc, #20]	@ (8002c4c <HAL_TIM_MspPostInit+0x74>)
 8002c36:	f003 fcb7 	bl	80065a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002c3a:	bf00      	nop
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40014800 	.word	0x40014800
 8002c48:	58024400 	.word	0x58024400
 8002c4c:	58020400 	.word	0x58020400

08002c50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b0b8      	sub	sp, #224	@ 0xe0
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c68:	f107 0310 	add.w	r3, r7, #16
 8002c6c:	22b8      	movs	r2, #184	@ 0xb8
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f009 fbbb 	bl	800c3ec <memset>
  if(huart->Instance==USART2)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a26      	ldr	r2, [pc, #152]	@ (8002d14 <HAL_UART_MspInit+0xc4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d145      	bne.n	8002d0c <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c80:	f04f 0202 	mov.w	r2, #2
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c92:	f107 0310 	add.w	r3, r7, #16
 8002c96:	4618      	mov	r0, r3
 8002c98:	f004 fe00 	bl	800789c <HAL_RCCEx_PeriphCLKConfig>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002ca2:	f7ff fa53 	bl	800214c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d18 <HAL_UART_MspInit+0xc8>)
 8002ca8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cac:	4a1a      	ldr	r2, [pc, #104]	@ (8002d18 <HAL_UART_MspInit+0xc8>)
 8002cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cb2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002cb6:	4b18      	ldr	r3, [pc, #96]	@ (8002d18 <HAL_UART_MspInit+0xc8>)
 8002cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc4:	4b14      	ldr	r3, [pc, #80]	@ (8002d18 <HAL_UART_MspInit+0xc8>)
 8002cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cca:	4a13      	ldr	r2, [pc, #76]	@ (8002d18 <HAL_UART_MspInit+0xc8>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002cd4:	4b10      	ldr	r3, [pc, #64]	@ (8002d18 <HAL_UART_MspInit+0xc8>)
 8002cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ce2:	230c      	movs	r3, #12
 8002ce4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cfa:	2307      	movs	r3, #7
 8002cfc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d00:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002d04:	4619      	mov	r1, r3
 8002d06:	4805      	ldr	r0, [pc, #20]	@ (8002d1c <HAL_UART_MspInit+0xcc>)
 8002d08:	f003 fc4e 	bl	80065a8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002d0c:	bf00      	nop
 8002d0e:	37e0      	adds	r7, #224	@ 0xe0
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40004400 	.word	0x40004400
 8002d18:	58024400 	.word	0x58024400
 8002d1c:	58020000 	.word	0x58020000

08002d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <NMI_Handler+0x4>

08002d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <HardFault_Handler+0x4>

08002d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d34:	bf00      	nop
 8002d36:	e7fd      	b.n	8002d34 <MemManage_Handler+0x4>

08002d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3c:	bf00      	nop
 8002d3e:	e7fd      	b.n	8002d3c <BusFault_Handler+0x4>

08002d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <UsageFault_Handler+0x4>

08002d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d76:	f000 f957 	bl	8003028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002d84:	4802      	ldr	r0, [pc, #8]	@ (8002d90 <FDCAN1_IT0_IRQHandler+0x10>)
 8002d86:	f002 ff01 	bl	8005b8c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	24000168 	.word	0x24000168

08002d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d9c:	4a14      	ldr	r2, [pc, #80]	@ (8002df0 <_sbrk+0x5c>)
 8002d9e:	4b15      	ldr	r3, [pc, #84]	@ (8002df4 <_sbrk+0x60>)
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002da8:	4b13      	ldr	r3, [pc, #76]	@ (8002df8 <_sbrk+0x64>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db0:	4b11      	ldr	r3, [pc, #68]	@ (8002df8 <_sbrk+0x64>)
 8002db2:	4a12      	ldr	r2, [pc, #72]	@ (8002dfc <_sbrk+0x68>)
 8002db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002db6:	4b10      	ldr	r3, [pc, #64]	@ (8002df8 <_sbrk+0x64>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d207      	bcs.n	8002dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dc4:	f009 fb1a 	bl	800c3fc <__errno>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	220c      	movs	r2, #12
 8002dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd2:	e009      	b.n	8002de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dd4:	4b08      	ldr	r3, [pc, #32]	@ (8002df8 <_sbrk+0x64>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dda:	4b07      	ldr	r3, [pc, #28]	@ (8002df8 <_sbrk+0x64>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	4a05      	ldr	r2, [pc, #20]	@ (8002df8 <_sbrk+0x64>)
 8002de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	24050000 	.word	0x24050000
 8002df4:	00000400 	.word	0x00000400
 8002df8:	24000d68 	.word	0x24000d68
 8002dfc:	24000eb8 	.word	0x24000eb8

08002e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e04:	4b32      	ldr	r3, [pc, #200]	@ (8002ed0 <SystemInit+0xd0>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0a:	4a31      	ldr	r2, [pc, #196]	@ (8002ed0 <SystemInit+0xd0>)
 8002e0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e14:	4b2f      	ldr	r3, [pc, #188]	@ (8002ed4 <SystemInit+0xd4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 030f 	and.w	r3, r3, #15
 8002e1c:	2b06      	cmp	r3, #6
 8002e1e:	d807      	bhi.n	8002e30 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e20:	4b2c      	ldr	r3, [pc, #176]	@ (8002ed4 <SystemInit+0xd4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f023 030f 	bic.w	r3, r3, #15
 8002e28:	4a2a      	ldr	r2, [pc, #168]	@ (8002ed4 <SystemInit+0xd4>)
 8002e2a:	f043 0307 	orr.w	r3, r3, #7
 8002e2e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002e30:	4b29      	ldr	r3, [pc, #164]	@ (8002ed8 <SystemInit+0xd8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a28      	ldr	r2, [pc, #160]	@ (8002ed8 <SystemInit+0xd8>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e3c:	4b26      	ldr	r3, [pc, #152]	@ (8002ed8 <SystemInit+0xd8>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002e42:	4b25      	ldr	r3, [pc, #148]	@ (8002ed8 <SystemInit+0xd8>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4924      	ldr	r1, [pc, #144]	@ (8002ed8 <SystemInit+0xd8>)
 8002e48:	4b24      	ldr	r3, [pc, #144]	@ (8002edc <SystemInit+0xdc>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e4e:	4b21      	ldr	r3, [pc, #132]	@ (8002ed4 <SystemInit+0xd4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d007      	beq.n	8002e6a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed4 <SystemInit+0xd4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 030f 	bic.w	r3, r3, #15
 8002e62:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed4 <SystemInit+0xd4>)
 8002e64:	f043 0307 	orr.w	r3, r3, #7
 8002e68:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed8 <SystemInit+0xd8>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002e70:	4b19      	ldr	r3, [pc, #100]	@ (8002ed8 <SystemInit+0xd8>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002e76:	4b18      	ldr	r3, [pc, #96]	@ (8002ed8 <SystemInit+0xd8>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002e7c:	4b16      	ldr	r3, [pc, #88]	@ (8002ed8 <SystemInit+0xd8>)
 8002e7e:	4a18      	ldr	r2, [pc, #96]	@ (8002ee0 <SystemInit+0xe0>)
 8002e80:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002e82:	4b15      	ldr	r3, [pc, #84]	@ (8002ed8 <SystemInit+0xd8>)
 8002e84:	4a17      	ldr	r2, [pc, #92]	@ (8002ee4 <SystemInit+0xe4>)
 8002e86:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002e88:	4b13      	ldr	r3, [pc, #76]	@ (8002ed8 <SystemInit+0xd8>)
 8002e8a:	4a17      	ldr	r2, [pc, #92]	@ (8002ee8 <SystemInit+0xe8>)
 8002e8c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e8e:	4b12      	ldr	r3, [pc, #72]	@ (8002ed8 <SystemInit+0xd8>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002e94:	4b10      	ldr	r3, [pc, #64]	@ (8002ed8 <SystemInit+0xd8>)
 8002e96:	4a14      	ldr	r2, [pc, #80]	@ (8002ee8 <SystemInit+0xe8>)
 8002e98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed8 <SystemInit+0xd8>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed8 <SystemInit+0xd8>)
 8002ea2:	4a11      	ldr	r2, [pc, #68]	@ (8002ee8 <SystemInit+0xe8>)
 8002ea4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <SystemInit+0xd8>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002eac:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <SystemInit+0xd8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a09      	ldr	r2, [pc, #36]	@ (8002ed8 <SystemInit+0xd8>)
 8002eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eb6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002eb8:	4b07      	ldr	r3, [pc, #28]	@ (8002ed8 <SystemInit+0xd8>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <SystemInit+0xec>)
 8002ec0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002ec4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002ec6:	bf00      	nop
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000ed00 	.word	0xe000ed00
 8002ed4:	52002000 	.word	0x52002000
 8002ed8:	58024400 	.word	0x58024400
 8002edc:	eaf6ed7f 	.word	0xeaf6ed7f
 8002ee0:	02020200 	.word	0x02020200
 8002ee4:	01ff0000 	.word	0x01ff0000
 8002ee8:	01010280 	.word	0x01010280
 8002eec:	52004000 	.word	0x52004000

08002ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002ef0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ef4:	f7ff ff84 	bl	8002e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ef8:	480c      	ldr	r0, [pc, #48]	@ (8002f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002efa:	490d      	ldr	r1, [pc, #52]	@ (8002f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002efc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f00:	e002      	b.n	8002f08 <LoopCopyDataInit>

08002f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f06:	3304      	adds	r3, #4

08002f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f0c:	d3f9      	bcc.n	8002f02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f10:	4c0a      	ldr	r4, [pc, #40]	@ (8002f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f14:	e001      	b.n	8002f1a <LoopFillZerobss>

08002f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f16:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 8002f18:	3204      	adds	r2, #4

08002f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f1c:	d3fb      	bcc.n	8002f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f1e:	f009 fa73 	bl	800c408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f22:	f7fe fa9f 	bl	8001464 <main>
  bx  lr
 8002f26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f28:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002f2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f30:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002f34:	0800d1dc 	.word	0x0800d1dc
  ldr r2, =_sbss
 8002f38:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8002f3c:	24000eb8 	.word	0x24000eb8

08002f40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f40:	e7fe      	b.n	8002f40 <ADC3_IRQHandler>
	...

08002f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f4a:	2003      	movs	r0, #3
 8002f4c:	f002 f91e 	bl	800518c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f50:	f004 face 	bl	80074f0 <HAL_RCC_GetSysClockFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b15      	ldr	r3, [pc, #84]	@ (8002fac <HAL_Init+0x68>)
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	0a1b      	lsrs	r3, r3, #8
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	4913      	ldr	r1, [pc, #76]	@ (8002fb0 <HAL_Init+0x6c>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002fac <HAL_Init+0x68>)
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	4a0e      	ldr	r2, [pc, #56]	@ (8002fb0 <HAL_Init+0x6c>)
 8002f78:	5cd3      	ldrb	r3, [r2, r3]
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
 8002f84:	4a0b      	ldr	r2, [pc, #44]	@ (8002fb4 <HAL_Init+0x70>)
 8002f86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f88:	4a0b      	ldr	r2, [pc, #44]	@ (8002fb8 <HAL_Init+0x74>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f8e:	200f      	movs	r0, #15
 8002f90:	f000 f814 	bl	8002fbc <HAL_InitTick>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e002      	b.n	8002fa4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f9e:	f7ff fc8f 	bl	80028c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	58024400 	.word	0x58024400
 8002fb0:	0800d14c 	.word	0x0800d14c
 8002fb4:	24000010 	.word	0x24000010
 8002fb8:	2400000c 	.word	0x2400000c

08002fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002fc4:	4b15      	ldr	r3, [pc, #84]	@ (800301c <HAL_InitTick+0x60>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e021      	b.n	8003014 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002fd0:	4b13      	ldr	r3, [pc, #76]	@ (8003020 <HAL_InitTick+0x64>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b11      	ldr	r3, [pc, #68]	@ (800301c <HAL_InitTick+0x60>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f002 f903 	bl	80051f2 <HAL_SYSTICK_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e00e      	b.n	8003014 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b0f      	cmp	r3, #15
 8002ffa:	d80a      	bhi.n	8003012 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	f04f 30ff 	mov.w	r0, #4294967295
 8003004:	f002 f8cd 	bl	80051a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003008:	4a06      	ldr	r2, [pc, #24]	@ (8003024 <HAL_InitTick+0x68>)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	e000      	b.n	8003014 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	24000018 	.word	0x24000018
 8003020:	2400000c 	.word	0x2400000c
 8003024:	24000014 	.word	0x24000014

08003028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800302c:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <HAL_IncTick+0x20>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	4b06      	ldr	r3, [pc, #24]	@ (800304c <HAL_IncTick+0x24>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4413      	add	r3, r2
 8003038:	4a04      	ldr	r2, [pc, #16]	@ (800304c <HAL_IncTick+0x24>)
 800303a:	6013      	str	r3, [r2, #0]
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	24000018 	.word	0x24000018
 800304c:	24000d6c 	.word	0x24000d6c

08003050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return uwTick;
 8003054:	4b03      	ldr	r3, [pc, #12]	@ (8003064 <HAL_GetTick+0x14>)
 8003056:	681b      	ldr	r3, [r3, #0]
}
 8003058:	4618      	mov	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	24000d6c 	.word	0x24000d6c

08003068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003070:	f7ff ffee 	bl	8003050 <HAL_GetTick>
 8003074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003080:	d005      	beq.n	800308e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003082:	4b0a      	ldr	r3, [pc, #40]	@ (80030ac <HAL_Delay+0x44>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4413      	add	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800308e:	bf00      	nop
 8003090:	f7ff ffde 	bl	8003050 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	429a      	cmp	r2, r3
 800309e:	d8f7      	bhi.n	8003090 <HAL_Delay+0x28>
  {
  }
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	24000018 	.word	0x24000018

080030b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	609a      	str	r2, [r3, #8]
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	609a      	str	r2, [r3, #8]
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a18      	ldr	r2, [pc, #96]	@ (8003188 <LL_ADC_SetChannelPreselection+0x70>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d027      	beq.n	800317a <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003130:	2b00      	cmp	r3, #0
 8003132:	d107      	bne.n	8003144 <LL_ADC_SetChannelPreselection+0x2c>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	0e9b      	lsrs	r3, r3, #26
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	2201      	movs	r2, #1
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	e015      	b.n	8003170 <LL_ADC_SetChannelPreselection+0x58>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	fa93 f3a3 	rbit	r3, r3
 800314e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 800315a:	2320      	movs	r3, #32
 800315c:	e003      	b.n	8003166 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	2201      	movs	r2, #1
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	69d2      	ldr	r2, [r2, #28]
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 800317a:	bf00      	nop
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	58026000 	.word	0x58026000

0800318c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3360      	adds	r3, #96	@ 0x60
 800319e:	461a      	mov	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4a10      	ldr	r2, [pc, #64]	@ (80031ec <LL_ADC_SetOffset+0x60>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d10b      	bne.n	80031c8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	4313      	orrs	r3, r2
 80031be:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80031c6:	e00b      	b.n	80031e0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	430b      	orrs	r3, r1
 80031da:	431a      	orrs	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	601a      	str	r2, [r3, #0]
}
 80031e0:	bf00      	nop
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	58026000 	.word	0x58026000

080031f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3360      	adds	r3, #96	@ 0x60
 80031fe:	461a      	mov	r2, r3
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	431a      	orrs	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	611a      	str	r2, [r3, #16]
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a0c      	ldr	r2, [pc, #48]	@ (8003290 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d00e      	beq.n	8003282 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3360      	adds	r3, #96	@ 0x60
 8003268:	461a      	mov	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	431a      	orrs	r2, r3
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	601a      	str	r2, [r3, #0]
  }
}
 8003282:	bf00      	nop
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	58026000 	.word	0x58026000

08003294 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a0c      	ldr	r2, [pc, #48]	@ (80032d4 <LL_ADC_SetOffsetSaturation+0x40>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d10e      	bne.n	80032c6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3360      	adds	r3, #96	@ 0x60
 80032ac:	461a      	mov	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80032c6:	bf00      	nop
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	58026000 	.word	0x58026000

080032d8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003318 <LL_ADC_SetOffsetSign+0x40>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d10e      	bne.n	800330a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3360      	adds	r3, #96	@ 0x60
 80032f0:	461a      	mov	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	431a      	orrs	r2, r3
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800330a:	bf00      	nop
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	58026000 	.word	0x58026000

0800331c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	3360      	adds	r3, #96	@ 0x60
 800332c:	461a      	mov	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4a0c      	ldr	r2, [pc, #48]	@ (800336c <LL_ADC_SetOffsetState+0x50>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d108      	bne.n	8003350 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	431a      	orrs	r2, r3
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800334e:	e007      	b.n	8003360 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	431a      	orrs	r2, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	601a      	str	r2, [r3, #0]
}
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	58026000 	.word	0x58026000

08003370 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003396:	b480      	push	{r7}
 8003398:	b087      	sub	sp, #28
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	3330      	adds	r3, #48	@ 0x30
 80033a6:	461a      	mov	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	4413      	add	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	211f      	movs	r1, #31
 80033c2:	fa01 f303 	lsl.w	r3, r1, r3
 80033c6:	43db      	mvns	r3, r3
 80033c8:	401a      	ands	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	0e9b      	lsrs	r3, r3, #26
 80033ce:	f003 011f 	and.w	r1, r3, #31
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	431a      	orrs	r2, r3
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b087      	sub	sp, #28
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	3314      	adds	r3, #20
 80033fe:	461a      	mov	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	0e5b      	lsrs	r3, r3, #25
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	4413      	add	r3, r2
 800340c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	0d1b      	lsrs	r3, r3, #20
 8003416:	f003 031f 	and.w	r3, r3, #31
 800341a:	2107      	movs	r1, #7
 800341c:	fa01 f303 	lsl.w	r3, r1, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	401a      	ands	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	0d1b      	lsrs	r3, r3, #20
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	431a      	orrs	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003438:	bf00      	nop
 800343a:	371c      	adds	r7, #28
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4a1a      	ldr	r2, [pc, #104]	@ (80034bc <LL_ADC_SetChannelSingleDiff+0x78>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d115      	bne.n	8003484 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003464:	43db      	mvns	r3, r3
 8003466:	401a      	ands	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f003 0318 	and.w	r3, r3, #24
 800346e:	4914      	ldr	r1, [pc, #80]	@ (80034c0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003470:	40d9      	lsrs	r1, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	400b      	ands	r3, r1
 8003476:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800347a:	431a      	orrs	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003482:	e014      	b.n	80034ae <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003490:	43db      	mvns	r3, r3
 8003492:	401a      	ands	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f003 0318 	and.w	r3, r3, #24
 800349a:	4909      	ldr	r1, [pc, #36]	@ (80034c0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800349c:	40d9      	lsrs	r1, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	400b      	ands	r3, r1
 80034a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034a6:	431a      	orrs	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80034ae:	bf00      	nop
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	58026000 	.word	0x58026000
 80034c0:	000fffff 	.word	0x000fffff

080034c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 031f 	and.w	r3, r3, #31
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	4b04      	ldr	r3, [pc, #16]	@ (800351c <LL_ADC_DisableDeepPowerDown+0x20>)
 800350a:	4013      	ands	r3, r2
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6093      	str	r3, [r2, #8]
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	5fffffc0 	.word	0x5fffffc0

08003520 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003530:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003534:	d101      	bne.n	800353a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	4b05      	ldr	r3, [pc, #20]	@ (800356c <LL_ADC_EnableInternalRegulator+0x24>)
 8003556:	4013      	ands	r3, r2
 8003558:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	6fffffc0 	.word	0x6fffffc0

08003570 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003584:	d101      	bne.n	800358a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	4b05      	ldr	r3, [pc, #20]	@ (80035bc <LL_ADC_Enable+0x24>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	f043 0201 	orr.w	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	7fffffc0 	.word	0x7fffffc0

080035c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <LL_ADC_Disable+0x24>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	f043 0202 	orr.w	r2, r3, #2
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	7fffffc0 	.word	0x7fffffc0

080035e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <LL_ADC_IsEnabled+0x18>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <LL_ADC_IsEnabled+0x1a>
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d101      	bne.n	8003626 <LL_ADC_IsDisableOngoing+0x18>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <LL_ADC_IsDisableOngoing+0x1a>
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	4b05      	ldr	r3, [pc, #20]	@ (8003658 <LL_ADC_REG_StartConversion+0x24>)
 8003642:	4013      	ands	r3, r2
 8003644:	f043 0204 	orr.w	r2, r3, #4
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	7fffffc0 	.word	0x7fffffc0

0800365c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	4b05      	ldr	r3, [pc, #20]	@ (8003680 <LL_ADC_REG_StopConversion+0x24>)
 800366a:	4013      	ands	r3, r2
 800366c:	f043 0210 	orr.w	r2, r3, #16
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	7fffffc0 	.word	0x7fffffc0

08003684 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b04      	cmp	r3, #4
 8003696:	d101      	bne.n	800369c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	4b05      	ldr	r3, [pc, #20]	@ (80036d0 <LL_ADC_INJ_StopConversion+0x24>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	7fffffc0 	.word	0x7fffffc0

080036d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d101      	bne.n	80036ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036fc:	b590      	push	{r4, r7, lr}
 80036fe:	b089      	sub	sp, #36	@ 0x24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003708:	2300      	movs	r3, #0
 800370a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e1ee      	b.n	8003af4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003720:	2b00      	cmp	r3, #0
 8003722:	d109      	bne.n	8003738 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff f8e5 	bl	80028f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff feef 	bl	8003520 <LL_ADC_IsDeepPowerDownEnabled>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff fed5 	bl	80034fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff ff0a 	bl	8003570 <LL_ADC_IsInternalRegulatorEnabled>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d114      	bne.n	800378c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff feee 	bl	8003548 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800376c:	4b8e      	ldr	r3, [pc, #568]	@ (80039a8 <HAL_ADC_Init+0x2ac>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	4a8e      	ldr	r2, [pc, #568]	@ (80039ac <HAL_ADC_Init+0x2b0>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	099b      	lsrs	r3, r3, #6
 800377a:	3301      	adds	r3, #1
 800377c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800377e:	e002      	b.n	8003786 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	3b01      	subs	r3, #1
 8003784:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f9      	bne.n	8003780 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff feed 	bl	8003570 <LL_ADC_IsInternalRegulatorEnabled>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10d      	bne.n	80037b8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a0:	f043 0210 	orr.w	r2, r3, #16
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037ac:	f043 0201 	orr.w	r2, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff ff61 	bl	8003684 <LL_ADC_REG_IsConversionOngoing>
 80037c2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f040 8188 	bne.w	8003ae2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f040 8184 	bne.w	8003ae2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037de:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80037e2:	f043 0202 	orr.w	r2, r3, #2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fefa 	bl	80035e8 <LL_ADC_IsEnabled>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d136      	bne.n	8003868 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a6c      	ldr	r2, [pc, #432]	@ (80039b0 <HAL_ADC_Init+0x2b4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d004      	beq.n	800380e <HAL_ADC_Init+0x112>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a6a      	ldr	r2, [pc, #424]	@ (80039b4 <HAL_ADC_Init+0x2b8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d10e      	bne.n	800382c <HAL_ADC_Init+0x130>
 800380e:	4868      	ldr	r0, [pc, #416]	@ (80039b0 <HAL_ADC_Init+0x2b4>)
 8003810:	f7ff feea 	bl	80035e8 <LL_ADC_IsEnabled>
 8003814:	4604      	mov	r4, r0
 8003816:	4867      	ldr	r0, [pc, #412]	@ (80039b4 <HAL_ADC_Init+0x2b8>)
 8003818:	f7ff fee6 	bl	80035e8 <LL_ADC_IsEnabled>
 800381c:	4603      	mov	r3, r0
 800381e:	4323      	orrs	r3, r4
 8003820:	2b00      	cmp	r3, #0
 8003822:	bf0c      	ite	eq
 8003824:	2301      	moveq	r3, #1
 8003826:	2300      	movne	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	e008      	b.n	800383e <HAL_ADC_Init+0x142>
 800382c:	4862      	ldr	r0, [pc, #392]	@ (80039b8 <HAL_ADC_Init+0x2bc>)
 800382e:	f7ff fedb 	bl	80035e8 <LL_ADC_IsEnabled>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf0c      	ite	eq
 8003838:	2301      	moveq	r3, #1
 800383a:	2300      	movne	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d012      	beq.n	8003868 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a5a      	ldr	r2, [pc, #360]	@ (80039b0 <HAL_ADC_Init+0x2b4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d004      	beq.n	8003856 <HAL_ADC_Init+0x15a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a58      	ldr	r2, [pc, #352]	@ (80039b4 <HAL_ADC_Init+0x2b8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <HAL_ADC_Init+0x15e>
 8003856:	4a59      	ldr	r2, [pc, #356]	@ (80039bc <HAL_ADC_Init+0x2c0>)
 8003858:	e000      	b.n	800385c <HAL_ADC_Init+0x160>
 800385a:	4a59      	ldr	r2, [pc, #356]	@ (80039c0 <HAL_ADC_Init+0x2c4>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4619      	mov	r1, r3
 8003862:	4610      	mov	r0, r2
 8003864:	f7ff fc24 	bl	80030b0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a52      	ldr	r2, [pc, #328]	@ (80039b8 <HAL_ADC_Init+0x2bc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d129      	bne.n	80038c6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7e5b      	ldrb	r3, [r3, #25]
 8003876:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800387c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003882:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d013      	beq.n	80038b4 <HAL_ADC_Init+0x1b8>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b0c      	cmp	r3, #12
 8003892:	d00d      	beq.n	80038b0 <HAL_ADC_Init+0x1b4>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b1c      	cmp	r3, #28
 800389a:	d007      	beq.n	80038ac <HAL_ADC_Init+0x1b0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	2b18      	cmp	r3, #24
 80038a2:	d101      	bne.n	80038a8 <HAL_ADC_Init+0x1ac>
 80038a4:	2318      	movs	r3, #24
 80038a6:	e006      	b.n	80038b6 <HAL_ADC_Init+0x1ba>
 80038a8:	2300      	movs	r3, #0
 80038aa:	e004      	b.n	80038b6 <HAL_ADC_Init+0x1ba>
 80038ac:	2310      	movs	r3, #16
 80038ae:	e002      	b.n	80038b6 <HAL_ADC_Init+0x1ba>
 80038b0:	2308      	movs	r3, #8
 80038b2:	e000      	b.n	80038b6 <HAL_ADC_Init+0x1ba>
 80038b4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80038b6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
 80038c4:	e00e      	b.n	80038e4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	7e5b      	ldrb	r3, [r3, #25]
 80038ca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80038d0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80038d6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038de:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d106      	bne.n	80038fc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	3b01      	subs	r3, #1
 80038f4:	045b      	lsls	r3, r3, #17
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	d009      	beq.n	8003918 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003908:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003910:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a26      	ldr	r2, [pc, #152]	@ (80039b8 <HAL_ADC_Init+0x2bc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d115      	bne.n	800394e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	4b26      	ldr	r3, [pc, #152]	@ (80039c4 <HAL_ADC_Init+0x2c8>)
 800392a:	4013      	ands	r3, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	69b9      	ldr	r1, [r7, #24]
 8003932:	430b      	orrs	r3, r1
 8003934:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	611a      	str	r2, [r3, #16]
 800394c:	e009      	b.n	8003962 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	4b1c      	ldr	r3, [pc, #112]	@ (80039c8 <HAL_ADC_Init+0x2cc>)
 8003956:	4013      	ands	r3, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	69b9      	ldr	r1, [r7, #24]
 800395e:	430b      	orrs	r3, r1
 8003960:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff fe8c 	bl	8003684 <LL_ADC_REG_IsConversionOngoing>
 800396c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff feae 	bl	80036d4 <LL_ADC_INJ_IsConversionOngoing>
 8003978:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f040 808e 	bne.w	8003a9e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	f040 808a 	bne.w	8003a9e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a0a      	ldr	r2, [pc, #40]	@ (80039b8 <HAL_ADC_Init+0x2bc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d11b      	bne.n	80039cc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	7e1b      	ldrb	r3, [r3, #24]
 8003998:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80039a0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	e018      	b.n	80039da <HAL_ADC_Init+0x2de>
 80039a8:	2400000c 	.word	0x2400000c
 80039ac:	053e2d63 	.word	0x053e2d63
 80039b0:	40022000 	.word	0x40022000
 80039b4:	40022100 	.word	0x40022100
 80039b8:	58026000 	.word	0x58026000
 80039bc:	40022300 	.word	0x40022300
 80039c0:	58026300 	.word	0x58026300
 80039c4:	fff04007 	.word	0xfff04007
 80039c8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	7e1b      	ldrb	r3, [r3, #24]
 80039d0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	4b46      	ldr	r3, [pc, #280]	@ (8003afc <HAL_ADC_Init+0x400>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	69b9      	ldr	r1, [r7, #24]
 80039ea:	430b      	orrs	r3, r1
 80039ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d137      	bne.n	8003a68 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a3f      	ldr	r2, [pc, #252]	@ (8003b00 <HAL_ADC_Init+0x404>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d116      	bne.n	8003a36 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b04 <HAL_ADC_Init+0x408>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003a1a:	4311      	orrs	r1, r2
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a20:	4311      	orrs	r1, r2
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003a26:	430a      	orrs	r2, r1
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0201 	orr.w	r2, r2, #1
 8003a32:	611a      	str	r2, [r3, #16]
 8003a34:	e020      	b.n	8003a78 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	4b32      	ldr	r3, [pc, #200]	@ (8003b08 <HAL_ADC_Init+0x40c>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a44:	3a01      	subs	r2, #1
 8003a46:	0411      	lsls	r1, r2, #16
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003a4c:	4311      	orrs	r1, r2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a52:	4311      	orrs	r1, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	611a      	str	r2, [r3, #16]
 8003a66:	e007      	b.n	8003a78 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0201 	bic.w	r2, r2, #1
 8003a76:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a1b      	ldr	r2, [pc, #108]	@ (8003b00 <HAL_ADC_Init+0x404>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d002      	beq.n	8003a9e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f001 f8b1 	bl	8004c00 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aac:	f023 010f 	bic.w	r1, r3, #15
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	1e5a      	subs	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	631a      	str	r2, [r3, #48]	@ 0x30
 8003abe:	e007      	b.n	8003ad0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 020f 	bic.w	r2, r2, #15
 8003ace:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad4:	f023 0303 	bic.w	r3, r3, #3
 8003ad8:	f043 0201 	orr.w	r2, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	661a      	str	r2, [r3, #96]	@ 0x60
 8003ae0:	e007      	b.n	8003af2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae6:	f043 0210 	orr.w	r2, r3, #16
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003af2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3724      	adds	r7, #36	@ 0x24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd90      	pop	{r4, r7, pc}
 8003afc:	ffffbffc 	.word	0xffffbffc
 8003b00:	58026000 	.word	0x58026000
 8003b04:	fc00f81f 	.word	0xfc00f81f
 8003b08:	fc00f81e 	.word	0xfc00f81e

08003b0c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a5c      	ldr	r2, [pc, #368]	@ (8003c8c <HAL_ADC_Start+0x180>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <HAL_ADC_Start+0x1c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a5b      	ldr	r2, [pc, #364]	@ (8003c90 <HAL_ADC_Start+0x184>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d101      	bne.n	8003b2c <HAL_ADC_Start+0x20>
 8003b28:	4b5a      	ldr	r3, [pc, #360]	@ (8003c94 <HAL_ADC_Start+0x188>)
 8003b2a:	e000      	b.n	8003b2e <HAL_ADC_Start+0x22>
 8003b2c:	4b5a      	ldr	r3, [pc, #360]	@ (8003c98 <HAL_ADC_Start+0x18c>)
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fcc8 	bl	80034c4 <LL_ADC_GetMultimode>
 8003b34:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fda2 	bl	8003684 <LL_ADC_REG_IsConversionOngoing>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f040 809a 	bne.w	8003c7c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_ADC_Start+0x4a>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e095      	b.n	8003c82 <HAL_ADC_Start+0x176>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 ff64 	bl	8004a2c <ADC_Enable>
 8003b64:	4603      	mov	r3, r0
 8003b66:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003b68:	7dfb      	ldrb	r3, [r7, #23]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f040 8081 	bne.w	8003c72 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b74:	4b49      	ldr	r3, [pc, #292]	@ (8003c9c <HAL_ADC_Start+0x190>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a42      	ldr	r2, [pc, #264]	@ (8003c90 <HAL_ADC_Start+0x184>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d002      	beq.n	8003b90 <HAL_ADC_Start+0x84>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	e000      	b.n	8003b92 <HAL_ADC_Start+0x86>
 8003b90:	4b3e      	ldr	r3, [pc, #248]	@ (8003c8c <HAL_ADC_Start+0x180>)
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6812      	ldr	r2, [r2, #0]
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d002      	beq.n	8003ba0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d105      	bne.n	8003bac <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb8:	d106      	bne.n	8003bc8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bbe:	f023 0206 	bic.w	r2, r3, #6
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	665a      	str	r2, [r3, #100]	@ 0x64
 8003bc6:	e002      	b.n	8003bce <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	221c      	movs	r2, #28
 8003bd4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a2b      	ldr	r2, [pc, #172]	@ (8003c90 <HAL_ADC_Start+0x184>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d002      	beq.n	8003bee <HAL_ADC_Start+0xe2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	e000      	b.n	8003bf0 <HAL_ADC_Start+0xe4>
 8003bee:	4b27      	ldr	r3, [pc, #156]	@ (8003c8c <HAL_ADC_Start+0x180>)
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d008      	beq.n	8003c0a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	2b05      	cmp	r3, #5
 8003c02:	d002      	beq.n	8003c0a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	2b09      	cmp	r3, #9
 8003c08:	d114      	bne.n	8003c34 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d007      	beq.n	8003c28 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c1c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c20:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff fd01 	bl	8003634 <LL_ADC_REG_StartConversion>
 8003c32:	e025      	b.n	8003c80 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c38:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a12      	ldr	r2, [pc, #72]	@ (8003c90 <HAL_ADC_Start+0x184>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d002      	beq.n	8003c50 <HAL_ADC_Start+0x144>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	e000      	b.n	8003c52 <HAL_ADC_Start+0x146>
 8003c50:	4b0e      	ldr	r3, [pc, #56]	@ (8003c8c <HAL_ADC_Start+0x180>)
 8003c52:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00f      	beq.n	8003c80 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c64:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c68:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003c70:	e006      	b.n	8003c80 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003c7a:	e001      	b.n	8003c80 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40022000 	.word	0x40022000
 8003c90:	40022100 	.word	0x40022100
 8003c94:	40022300 	.word	0x40022300
 8003c98:	58026300 	.word	0x58026300
 8003c9c:	fffff0fe 	.word	0xfffff0fe

08003ca0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_ADC_Stop+0x16>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e021      	b.n	8003cfa <HAL_ADC_Stop+0x5a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003cbe:	2103      	movs	r1, #3
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fdf7 	bl	80048b4 <ADC_ConversionStop>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10f      	bne.n	8003cf0 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 ff35 	bl	8004b40 <ADC_Disable>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d107      	bne.n	8003cf0 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ce4:	4b07      	ldr	r3, [pc, #28]	@ (8003d04 <HAL_ADC_Stop+0x64>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	f043 0201 	orr.w	r2, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	ffffeefe 	.word	0xffffeefe

08003d08 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a72      	ldr	r2, [pc, #456]	@ (8003ee0 <HAL_ADC_PollForConversion+0x1d8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_ADC_PollForConversion+0x1e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a70      	ldr	r2, [pc, #448]	@ (8003ee4 <HAL_ADC_PollForConversion+0x1dc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d101      	bne.n	8003d2a <HAL_ADC_PollForConversion+0x22>
 8003d26:	4b70      	ldr	r3, [pc, #448]	@ (8003ee8 <HAL_ADC_PollForConversion+0x1e0>)
 8003d28:	e000      	b.n	8003d2c <HAL_ADC_PollForConversion+0x24>
 8003d2a:	4b70      	ldr	r3, [pc, #448]	@ (8003eec <HAL_ADC_PollForConversion+0x1e4>)
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fbc9 	bl	80034c4 <LL_ADC_GetMultimode>
 8003d32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d102      	bne.n	8003d42 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	61fb      	str	r3, [r7, #28]
 8003d40:	e037      	b.n	8003db2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b05      	cmp	r3, #5
 8003d4c:	d002      	beq.n	8003d54 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b09      	cmp	r3, #9
 8003d52:	d111      	bne.n	8003d78 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d007      	beq.n	8003d72 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d66:	f043 0220 	orr.w	r2, r3, #32
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e0b1      	b.n	8003ed6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003d72:	2304      	movs	r3, #4
 8003d74:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003d76:	e01c      	b.n	8003db2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a58      	ldr	r2, [pc, #352]	@ (8003ee0 <HAL_ADC_PollForConversion+0x1d8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d004      	beq.n	8003d8c <HAL_ADC_PollForConversion+0x84>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a57      	ldr	r2, [pc, #348]	@ (8003ee4 <HAL_ADC_PollForConversion+0x1dc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d101      	bne.n	8003d90 <HAL_ADC_PollForConversion+0x88>
 8003d8c:	4b56      	ldr	r3, [pc, #344]	@ (8003ee8 <HAL_ADC_PollForConversion+0x1e0>)
 8003d8e:	e000      	b.n	8003d92 <HAL_ADC_PollForConversion+0x8a>
 8003d90:	4b56      	ldr	r3, [pc, #344]	@ (8003eec <HAL_ADC_PollForConversion+0x1e4>)
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff fba4 	bl	80034e0 <LL_ADC_GetMultiDMATransfer>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da2:	f043 0220 	orr.w	r2, r3, #32
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e093      	b.n	8003ed6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003dae:	2304      	movs	r3, #4
 8003db0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003db2:	f7ff f94d 	bl	8003050 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003db8:	e021      	b.n	8003dfe <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc0:	d01d      	beq.n	8003dfe <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003dc2:	f7ff f945 	bl	8003050 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d302      	bcc.n	8003dd8 <HAL_ADC_PollForConversion+0xd0>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d112      	bne.n	8003dfe <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10b      	bne.n	8003dfe <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dea:	f043 0204 	orr.w	r2, r3, #4
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e06b      	b.n	8003ed6 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0d6      	beq.n	8003dba <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e10:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff faa7 	bl	8003370 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01c      	beq.n	8003e62 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	7e5b      	ldrb	r3, [r3, #25]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d118      	bne.n	8003e62 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d111      	bne.n	8003e62 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e42:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d105      	bne.n	8003e62 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e5a:	f043 0201 	orr.w	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1f      	ldr	r2, [pc, #124]	@ (8003ee4 <HAL_ADC_PollForConversion+0x1dc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d002      	beq.n	8003e72 <HAL_ADC_PollForConversion+0x16a>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	e000      	b.n	8003e74 <HAL_ADC_PollForConversion+0x16c>
 8003e72:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee0 <HAL_ADC_PollForConversion+0x1d8>)
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6812      	ldr	r2, [r2, #0]
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d008      	beq.n	8003e8e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b05      	cmp	r3, #5
 8003e86:	d002      	beq.n	8003e8e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2b09      	cmp	r3, #9
 8003e8c:	d104      	bne.n	8003e98 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	e00c      	b.n	8003eb2 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a11      	ldr	r2, [pc, #68]	@ (8003ee4 <HAL_ADC_PollForConversion+0x1dc>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d002      	beq.n	8003ea8 <HAL_ADC_PollForConversion+0x1a0>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	e000      	b.n	8003eaa <HAL_ADC_PollForConversion+0x1a2>
 8003ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <HAL_ADC_PollForConversion+0x1d8>)
 8003eaa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d104      	bne.n	8003ec2 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	e008      	b.n	8003ed4 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d103      	bne.n	8003ed4 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	220c      	movs	r2, #12
 8003ed2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40022000 	.word	0x40022000
 8003ee4:	40022100 	.word	0x40022100
 8003ee8:	40022300 	.word	0x40022300
 8003eec:	58026300 	.word	0x58026300

08003ef0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f0c:	b590      	push	{r4, r7, lr}
 8003f0e:	b0a5      	sub	sp, #148	@ 0x94
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f26:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4aa4      	ldr	r2, [pc, #656]	@ (80041c0 <HAL_ADC_ConfigChannel+0x2b4>)
 8003f2e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d102      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x34>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	f000 bca2 	b.w	8004884 <HAL_ADC_ConfigChannel+0x978>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff fb99 	bl	8003684 <LL_ADC_REG_IsConversionOngoing>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f040 8486 	bne.w	8004866 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	db31      	blt.n	8003fc6 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a97      	ldr	r2, [pc, #604]	@ (80041c4 <HAL_ADC_ConfigChannel+0x2b8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d02c      	beq.n	8003fc6 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d108      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x7e>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	0e9b      	lsrs	r3, r3, #26
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	2201      	movs	r2, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	e016      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0xac>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f92:	fa93 f3a3 	rbit	r3, r3
 8003f96:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003f98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f9a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003f9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8003fa2:	2320      	movs	r3, #32
 8003fa4:	e003      	b.n	8003fae <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8003fa6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fa8:	fab3 f383 	clz	r3, r3
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	69d1      	ldr	r1, [r2, #28]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	430b      	orrs	r3, r1
 8003fc4:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6859      	ldr	r1, [r3, #4]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f7ff f9df 	bl	8003396 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff fb51 	bl	8003684 <LL_ADC_REG_IsConversionOngoing>
 8003fe2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff fb72 	bl	80036d4 <LL_ADC_INJ_IsConversionOngoing>
 8003ff0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ff4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f040 824a 	bne.w	8004492 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ffe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004002:	2b00      	cmp	r3, #0
 8004004:	f040 8245 	bne.w	8004492 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	6819      	ldr	r1, [r3, #0]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	461a      	mov	r2, r3
 8004016:	f7ff f9ea 	bl	80033ee <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a69      	ldr	r2, [pc, #420]	@ (80041c4 <HAL_ADC_ConfigChannel+0x2b8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d10d      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	08db      	lsrs	r3, r3, #3
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800403e:	e032      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004040:	4b61      	ldr	r3, [pc, #388]	@ (80041c8 <HAL_ADC_ConfigChannel+0x2bc>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004048:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800404c:	d10b      	bne.n	8004066 <HAL_ADC_ConfigChannel+0x15a>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695a      	ldr	r2, [r3, #20]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	089b      	lsrs	r3, r3, #2
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	e01d      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x196>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10b      	bne.n	800408c <HAL_ADC_ConfigChannel+0x180>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	695a      	ldr	r2, [r3, #20]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	089b      	lsrs	r3, r3, #2
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	e00a      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x196>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	089b      	lsrs	r3, r3, #2
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d048      	beq.n	8004140 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	6919      	ldr	r1, [r3, #16]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040be:	f7ff f865 	bl	800318c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a3f      	ldr	r2, [pc, #252]	@ (80041c4 <HAL_ADC_ConfigChannel+0x2b8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d119      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6919      	ldr	r1, [r3, #16]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	461a      	mov	r2, r3
 80040da:	f7ff f8fd 	bl	80032d8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6919      	ldr	r1, [r3, #16]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d102      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x1ea>
 80040f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040f4:	e000      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x1ec>
 80040f6:	2300      	movs	r3, #0
 80040f8:	461a      	mov	r2, r3
 80040fa:	f7ff f8cb 	bl	8003294 <LL_ADC_SetOffsetSaturation>
 80040fe:	e1c8      	b.n	8004492 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	6919      	ldr	r1, [r3, #16]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800410e:	2b01      	cmp	r3, #1
 8004110:	d102      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x20c>
 8004112:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004116:	e000      	b.n	800411a <HAL_ADC_ConfigChannel+0x20e>
 8004118:	2300      	movs	r3, #0
 800411a:	461a      	mov	r2, r3
 800411c:	f7ff f898 	bl	8003250 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6919      	ldr	r1, [r3, #16]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	7e1b      	ldrb	r3, [r3, #24]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d102      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x22a>
 8004130:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004134:	e000      	b.n	8004138 <HAL_ADC_ConfigChannel+0x22c>
 8004136:	2300      	movs	r3, #0
 8004138:	461a      	mov	r2, r3
 800413a:	f7ff f86f 	bl	800321c <LL_ADC_SetDataRightShift>
 800413e:	e1a8      	b.n	8004492 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1f      	ldr	r2, [pc, #124]	@ (80041c4 <HAL_ADC_ConfigChannel+0x2b8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	f040 815b 	bne.w	8004402 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2100      	movs	r1, #0
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff f84c 	bl	80031f0 <LL_ADC_GetOffsetChannel>
 8004158:	4603      	mov	r3, r0
 800415a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10a      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x26c>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2100      	movs	r1, #0
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff f841 	bl	80031f0 <LL_ADC_GetOffsetChannel>
 800416e:	4603      	mov	r3, r0
 8004170:	0e9b      	lsrs	r3, r3, #26
 8004172:	f003 021f 	and.w	r2, r3, #31
 8004176:	e017      	b.n	80041a8 <HAL_ADC_ConfigChannel+0x29c>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff f836 	bl	80031f0 <LL_ADC_GetOffsetChannel>
 8004184:	4603      	mov	r3, r0
 8004186:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004188:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800418a:	fa93 f3a3 	rbit	r3, r3
 800418e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004190:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004192:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800419a:	2320      	movs	r3, #32
 800419c:	e003      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 800419e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041a0:	fab3 f383 	clz	r3, r3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	461a      	mov	r2, r3
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10b      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x2c0>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	0e9b      	lsrs	r3, r3, #26
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	e017      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x2e4>
 80041c0:	47ff0000 	.word	0x47ff0000
 80041c4:	58026000 	.word	0x58026000
 80041c8:	5c001000 	.word	0x5c001000
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041d4:	fa93 f3a3 	rbit	r3, r3
 80041d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80041da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041dc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80041de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80041e4:	2320      	movs	r3, #32
 80041e6:	e003      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80041e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041ea:	fab3 f383 	clz	r3, r3
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d106      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2200      	movs	r2, #0
 80041fa:	2100      	movs	r1, #0
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff f88d 	bl	800331c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2101      	movs	r1, #1
 8004208:	4618      	mov	r0, r3
 800420a:	f7fe fff1 	bl	80031f0 <LL_ADC_GetOffsetChannel>
 800420e:	4603      	mov	r3, r0
 8004210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10a      	bne.n	800422e <HAL_ADC_ConfigChannel+0x322>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2101      	movs	r1, #1
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe ffe6 	bl	80031f0 <LL_ADC_GetOffsetChannel>
 8004224:	4603      	mov	r3, r0
 8004226:	0e9b      	lsrs	r3, r3, #26
 8004228:	f003 021f 	and.w	r2, r3, #31
 800422c:	e017      	b.n	800425e <HAL_ADC_ConfigChannel+0x352>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2101      	movs	r1, #1
 8004234:	4618      	mov	r0, r3
 8004236:	f7fe ffdb 	bl	80031f0 <LL_ADC_GetOffsetChannel>
 800423a:	4603      	mov	r3, r0
 800423c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004240:	fa93 f3a3 	rbit	r3, r3
 8004244:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004248:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800424a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8004250:	2320      	movs	r3, #32
 8004252:	e003      	b.n	800425c <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8004254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004266:	2b00      	cmp	r3, #0
 8004268:	d105      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x36a>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	0e9b      	lsrs	r3, r3, #26
 8004270:	f003 031f 	and.w	r3, r3, #31
 8004274:	e011      	b.n	800429a <HAL_ADC_ConfigChannel+0x38e>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800427e:	fa93 f3a3 	rbit	r3, r3
 8004282:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004286:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004288:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800428e:	2320      	movs	r3, #32
 8004290:	e003      	b.n	800429a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8004292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004294:	fab3 f383 	clz	r3, r3
 8004298:	b2db      	uxtb	r3, r3
 800429a:	429a      	cmp	r2, r3
 800429c:	d106      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2200      	movs	r2, #0
 80042a4:	2101      	movs	r1, #1
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff f838 	bl	800331c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2102      	movs	r1, #2
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe ff9c 	bl	80031f0 <LL_ADC_GetOffsetChannel>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x3cc>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2102      	movs	r1, #2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fe ff91 	bl	80031f0 <LL_ADC_GetOffsetChannel>
 80042ce:	4603      	mov	r3, r0
 80042d0:	0e9b      	lsrs	r3, r3, #26
 80042d2:	f003 021f 	and.w	r2, r3, #31
 80042d6:	e017      	b.n	8004308 <HAL_ADC_ConfigChannel+0x3fc>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2102      	movs	r1, #2
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe ff86 	bl	80031f0 <LL_ADC_GetOffsetChannel>
 80042e4:	4603      	mov	r3, r0
 80042e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80042f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80042f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80042fa:	2320      	movs	r3, #32
 80042fc:	e003      	b.n	8004306 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80042fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004300:	fab3 f383 	clz	r3, r3
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004310:	2b00      	cmp	r3, #0
 8004312:	d105      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x414>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	0e9b      	lsrs	r3, r3, #26
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	e011      	b.n	8004344 <HAL_ADC_ConfigChannel+0x438>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004328:	fa93 f3a3 	rbit	r3, r3
 800432c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800432e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004330:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004338:	2320      	movs	r3, #32
 800433a:	e003      	b.n	8004344 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800433c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433e:	fab3 f383 	clz	r3, r3
 8004342:	b2db      	uxtb	r3, r3
 8004344:	429a      	cmp	r2, r3
 8004346:	d106      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2200      	movs	r2, #0
 800434e:	2102      	movs	r1, #2
 8004350:	4618      	mov	r0, r3
 8004352:	f7fe ffe3 	bl	800331c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2103      	movs	r1, #3
 800435c:	4618      	mov	r0, r3
 800435e:	f7fe ff47 	bl	80031f0 <LL_ADC_GetOffsetChannel>
 8004362:	4603      	mov	r3, r0
 8004364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x476>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2103      	movs	r1, #3
 8004372:	4618      	mov	r0, r3
 8004374:	f7fe ff3c 	bl	80031f0 <LL_ADC_GetOffsetChannel>
 8004378:	4603      	mov	r3, r0
 800437a:	0e9b      	lsrs	r3, r3, #26
 800437c:	f003 021f 	and.w	r2, r3, #31
 8004380:	e017      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x4a6>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2103      	movs	r1, #3
 8004388:	4618      	mov	r0, r3
 800438a:	f7fe ff31 	bl	80031f0 <LL_ADC_GetOffsetChannel>
 800438e:	4603      	mov	r3, r0
 8004390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	fa93 f3a3 	rbit	r3, r3
 8004398:	61fb      	str	r3, [r7, #28]
  return result;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80043a4:	2320      	movs	r3, #32
 80043a6:	e003      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	fab3 f383 	clz	r3, r3
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d105      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x4be>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	0e9b      	lsrs	r3, r3, #26
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	e011      	b.n	80043ee <HAL_ADC_ConfigChannel+0x4e2>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	fa93 f3a3 	rbit	r3, r3
 80043d6:	613b      	str	r3, [r7, #16]
  return result;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 80043e2:	2320      	movs	r3, #32
 80043e4:	e003      	b.n	80043ee <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	fab3 f383 	clz	r3, r3
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d14f      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2200      	movs	r2, #0
 80043f8:	2103      	movs	r1, #3
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe ff8e 	bl	800331c <LL_ADC_SetOffsetState>
 8004400:	e047      	b.n	8004492 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004408:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	069b      	lsls	r3, r3, #26
 8004412:	429a      	cmp	r2, r3
 8004414:	d107      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004424:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800442c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	069b      	lsls	r3, r3, #26
 8004436:	429a      	cmp	r2, r3
 8004438:	d107      	bne.n	800444a <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004448:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004450:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	069b      	lsls	r3, r3, #26
 800445a:	429a      	cmp	r2, r3
 800445c:	d107      	bne.n	800446e <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800446c:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004474:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	069b      	lsls	r3, r3, #26
 800447e:	429a      	cmp	r2, r3
 8004480:	d107      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004490:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff f8a6 	bl	80035e8 <LL_ADC_IsEnabled>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f040 81ea 	bne.w	8004878 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	6819      	ldr	r1, [r3, #0]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	461a      	mov	r2, r3
 80044b2:	f7fe ffc7 	bl	8003444 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	4a7a      	ldr	r2, [pc, #488]	@ (80046a4 <HAL_ADC_ConfigChannel+0x798>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	f040 80e0 	bne.w	8004682 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4977      	ldr	r1, [pc, #476]	@ (80046a8 <HAL_ADC_ConfigChannel+0x79c>)
 80044cc:	428b      	cmp	r3, r1
 80044ce:	d147      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x654>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4975      	ldr	r1, [pc, #468]	@ (80046ac <HAL_ADC_ConfigChannel+0x7a0>)
 80044d6:	428b      	cmp	r3, r1
 80044d8:	d040      	beq.n	800455c <HAL_ADC_ConfigChannel+0x650>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4974      	ldr	r1, [pc, #464]	@ (80046b0 <HAL_ADC_ConfigChannel+0x7a4>)
 80044e0:	428b      	cmp	r3, r1
 80044e2:	d039      	beq.n	8004558 <HAL_ADC_ConfigChannel+0x64c>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4972      	ldr	r1, [pc, #456]	@ (80046b4 <HAL_ADC_ConfigChannel+0x7a8>)
 80044ea:	428b      	cmp	r3, r1
 80044ec:	d032      	beq.n	8004554 <HAL_ADC_ConfigChannel+0x648>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4971      	ldr	r1, [pc, #452]	@ (80046b8 <HAL_ADC_ConfigChannel+0x7ac>)
 80044f4:	428b      	cmp	r3, r1
 80044f6:	d02b      	beq.n	8004550 <HAL_ADC_ConfigChannel+0x644>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	496f      	ldr	r1, [pc, #444]	@ (80046bc <HAL_ADC_ConfigChannel+0x7b0>)
 80044fe:	428b      	cmp	r3, r1
 8004500:	d024      	beq.n	800454c <HAL_ADC_ConfigChannel+0x640>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	496e      	ldr	r1, [pc, #440]	@ (80046c0 <HAL_ADC_ConfigChannel+0x7b4>)
 8004508:	428b      	cmp	r3, r1
 800450a:	d01d      	beq.n	8004548 <HAL_ADC_ConfigChannel+0x63c>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	496c      	ldr	r1, [pc, #432]	@ (80046c4 <HAL_ADC_ConfigChannel+0x7b8>)
 8004512:	428b      	cmp	r3, r1
 8004514:	d016      	beq.n	8004544 <HAL_ADC_ConfigChannel+0x638>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	496b      	ldr	r1, [pc, #428]	@ (80046c8 <HAL_ADC_ConfigChannel+0x7bc>)
 800451c:	428b      	cmp	r3, r1
 800451e:	d00f      	beq.n	8004540 <HAL_ADC_ConfigChannel+0x634>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4969      	ldr	r1, [pc, #420]	@ (80046cc <HAL_ADC_ConfigChannel+0x7c0>)
 8004526:	428b      	cmp	r3, r1
 8004528:	d008      	beq.n	800453c <HAL_ADC_ConfigChannel+0x630>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4968      	ldr	r1, [pc, #416]	@ (80046d0 <HAL_ADC_ConfigChannel+0x7c4>)
 8004530:	428b      	cmp	r3, r1
 8004532:	d101      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x62c>
 8004534:	4b67      	ldr	r3, [pc, #412]	@ (80046d4 <HAL_ADC_ConfigChannel+0x7c8>)
 8004536:	e0a0      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 8004538:	2300      	movs	r3, #0
 800453a:	e09e      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 800453c:	4b66      	ldr	r3, [pc, #408]	@ (80046d8 <HAL_ADC_ConfigChannel+0x7cc>)
 800453e:	e09c      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 8004540:	4b66      	ldr	r3, [pc, #408]	@ (80046dc <HAL_ADC_ConfigChannel+0x7d0>)
 8004542:	e09a      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 8004544:	4b60      	ldr	r3, [pc, #384]	@ (80046c8 <HAL_ADC_ConfigChannel+0x7bc>)
 8004546:	e098      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 8004548:	4b5e      	ldr	r3, [pc, #376]	@ (80046c4 <HAL_ADC_ConfigChannel+0x7b8>)
 800454a:	e096      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 800454c:	4b64      	ldr	r3, [pc, #400]	@ (80046e0 <HAL_ADC_ConfigChannel+0x7d4>)
 800454e:	e094      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 8004550:	4b64      	ldr	r3, [pc, #400]	@ (80046e4 <HAL_ADC_ConfigChannel+0x7d8>)
 8004552:	e092      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 8004554:	4b64      	ldr	r3, [pc, #400]	@ (80046e8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004556:	e090      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 8004558:	4b64      	ldr	r3, [pc, #400]	@ (80046ec <HAL_ADC_ConfigChannel+0x7e0>)
 800455a:	e08e      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 800455c:	2301      	movs	r3, #1
 800455e:	e08c      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4962      	ldr	r1, [pc, #392]	@ (80046f0 <HAL_ADC_ConfigChannel+0x7e4>)
 8004566:	428b      	cmp	r3, r1
 8004568:	d140      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x6e0>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	494f      	ldr	r1, [pc, #316]	@ (80046ac <HAL_ADC_ConfigChannel+0x7a0>)
 8004570:	428b      	cmp	r3, r1
 8004572:	d039      	beq.n	80045e8 <HAL_ADC_ConfigChannel+0x6dc>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	494d      	ldr	r1, [pc, #308]	@ (80046b0 <HAL_ADC_ConfigChannel+0x7a4>)
 800457a:	428b      	cmp	r3, r1
 800457c:	d032      	beq.n	80045e4 <HAL_ADC_ConfigChannel+0x6d8>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	494c      	ldr	r1, [pc, #304]	@ (80046b4 <HAL_ADC_ConfigChannel+0x7a8>)
 8004584:	428b      	cmp	r3, r1
 8004586:	d02b      	beq.n	80045e0 <HAL_ADC_ConfigChannel+0x6d4>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	494a      	ldr	r1, [pc, #296]	@ (80046b8 <HAL_ADC_ConfigChannel+0x7ac>)
 800458e:	428b      	cmp	r3, r1
 8004590:	d024      	beq.n	80045dc <HAL_ADC_ConfigChannel+0x6d0>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4949      	ldr	r1, [pc, #292]	@ (80046bc <HAL_ADC_ConfigChannel+0x7b0>)
 8004598:	428b      	cmp	r3, r1
 800459a:	d01d      	beq.n	80045d8 <HAL_ADC_ConfigChannel+0x6cc>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4947      	ldr	r1, [pc, #284]	@ (80046c0 <HAL_ADC_ConfigChannel+0x7b4>)
 80045a2:	428b      	cmp	r3, r1
 80045a4:	d016      	beq.n	80045d4 <HAL_ADC_ConfigChannel+0x6c8>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4946      	ldr	r1, [pc, #280]	@ (80046c4 <HAL_ADC_ConfigChannel+0x7b8>)
 80045ac:	428b      	cmp	r3, r1
 80045ae:	d00f      	beq.n	80045d0 <HAL_ADC_ConfigChannel+0x6c4>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4944      	ldr	r1, [pc, #272]	@ (80046c8 <HAL_ADC_ConfigChannel+0x7bc>)
 80045b6:	428b      	cmp	r3, r1
 80045b8:	d008      	beq.n	80045cc <HAL_ADC_ConfigChannel+0x6c0>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4944      	ldr	r1, [pc, #272]	@ (80046d0 <HAL_ADC_ConfigChannel+0x7c4>)
 80045c0:	428b      	cmp	r3, r1
 80045c2:	d101      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0x6bc>
 80045c4:	4b43      	ldr	r3, [pc, #268]	@ (80046d4 <HAL_ADC_ConfigChannel+0x7c8>)
 80045c6:	e058      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 80045c8:	2300      	movs	r3, #0
 80045ca:	e056      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 80045cc:	4b43      	ldr	r3, [pc, #268]	@ (80046dc <HAL_ADC_ConfigChannel+0x7d0>)
 80045ce:	e054      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 80045d0:	4b3d      	ldr	r3, [pc, #244]	@ (80046c8 <HAL_ADC_ConfigChannel+0x7bc>)
 80045d2:	e052      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 80045d4:	4b3b      	ldr	r3, [pc, #236]	@ (80046c4 <HAL_ADC_ConfigChannel+0x7b8>)
 80045d6:	e050      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 80045d8:	4b41      	ldr	r3, [pc, #260]	@ (80046e0 <HAL_ADC_ConfigChannel+0x7d4>)
 80045da:	e04e      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 80045dc:	4b41      	ldr	r3, [pc, #260]	@ (80046e4 <HAL_ADC_ConfigChannel+0x7d8>)
 80045de:	e04c      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 80045e0:	4b41      	ldr	r3, [pc, #260]	@ (80046e8 <HAL_ADC_ConfigChannel+0x7dc>)
 80045e2:	e04a      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 80045e4:	4b41      	ldr	r3, [pc, #260]	@ (80046ec <HAL_ADC_ConfigChannel+0x7e0>)
 80045e6:	e048      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 80045e8:	2301      	movs	r3, #1
 80045ea:	e046      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4940      	ldr	r1, [pc, #256]	@ (80046f4 <HAL_ADC_ConfigChannel+0x7e8>)
 80045f2:	428b      	cmp	r3, r1
 80045f4:	d140      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x76c>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	492c      	ldr	r1, [pc, #176]	@ (80046ac <HAL_ADC_ConfigChannel+0x7a0>)
 80045fc:	428b      	cmp	r3, r1
 80045fe:	d039      	beq.n	8004674 <HAL_ADC_ConfigChannel+0x768>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	492a      	ldr	r1, [pc, #168]	@ (80046b0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004606:	428b      	cmp	r3, r1
 8004608:	d032      	beq.n	8004670 <HAL_ADC_ConfigChannel+0x764>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4929      	ldr	r1, [pc, #164]	@ (80046b4 <HAL_ADC_ConfigChannel+0x7a8>)
 8004610:	428b      	cmp	r3, r1
 8004612:	d02b      	beq.n	800466c <HAL_ADC_ConfigChannel+0x760>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4927      	ldr	r1, [pc, #156]	@ (80046b8 <HAL_ADC_ConfigChannel+0x7ac>)
 800461a:	428b      	cmp	r3, r1
 800461c:	d024      	beq.n	8004668 <HAL_ADC_ConfigChannel+0x75c>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4926      	ldr	r1, [pc, #152]	@ (80046bc <HAL_ADC_ConfigChannel+0x7b0>)
 8004624:	428b      	cmp	r3, r1
 8004626:	d01d      	beq.n	8004664 <HAL_ADC_ConfigChannel+0x758>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4924      	ldr	r1, [pc, #144]	@ (80046c0 <HAL_ADC_ConfigChannel+0x7b4>)
 800462e:	428b      	cmp	r3, r1
 8004630:	d016      	beq.n	8004660 <HAL_ADC_ConfigChannel+0x754>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4923      	ldr	r1, [pc, #140]	@ (80046c4 <HAL_ADC_ConfigChannel+0x7b8>)
 8004638:	428b      	cmp	r3, r1
 800463a:	d00f      	beq.n	800465c <HAL_ADC_ConfigChannel+0x750>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4926      	ldr	r1, [pc, #152]	@ (80046dc <HAL_ADC_ConfigChannel+0x7d0>)
 8004642:	428b      	cmp	r3, r1
 8004644:	d008      	beq.n	8004658 <HAL_ADC_ConfigChannel+0x74c>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	492b      	ldr	r1, [pc, #172]	@ (80046f8 <HAL_ADC_ConfigChannel+0x7ec>)
 800464c:	428b      	cmp	r3, r1
 800464e:	d101      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x748>
 8004650:	4b2a      	ldr	r3, [pc, #168]	@ (80046fc <HAL_ADC_ConfigChannel+0x7f0>)
 8004652:	e012      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 8004654:	2300      	movs	r3, #0
 8004656:	e010      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 8004658:	4b27      	ldr	r3, [pc, #156]	@ (80046f8 <HAL_ADC_ConfigChannel+0x7ec>)
 800465a:	e00e      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 800465c:	4b1a      	ldr	r3, [pc, #104]	@ (80046c8 <HAL_ADC_ConfigChannel+0x7bc>)
 800465e:	e00c      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 8004660:	4b18      	ldr	r3, [pc, #96]	@ (80046c4 <HAL_ADC_ConfigChannel+0x7b8>)
 8004662:	e00a      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 8004664:	4b1e      	ldr	r3, [pc, #120]	@ (80046e0 <HAL_ADC_ConfigChannel+0x7d4>)
 8004666:	e008      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 8004668:	4b1e      	ldr	r3, [pc, #120]	@ (80046e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800466a:	e006      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 800466c:	4b1e      	ldr	r3, [pc, #120]	@ (80046e8 <HAL_ADC_ConfigChannel+0x7dc>)
 800466e:	e004      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 8004670:	4b1e      	ldr	r3, [pc, #120]	@ (80046ec <HAL_ADC_ConfigChannel+0x7e0>)
 8004672:	e002      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <HAL_ADC_ConfigChannel+0x76e>
 8004678:	2300      	movs	r3, #0
 800467a:	4619      	mov	r1, r3
 800467c:	4610      	mov	r0, r2
 800467e:	f7fe fd4b 	bl	8003118 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f280 80f6 	bge.w	8004878 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a05      	ldr	r2, [pc, #20]	@ (80046a8 <HAL_ADC_ConfigChannel+0x79c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d004      	beq.n	80046a0 <HAL_ADC_ConfigChannel+0x794>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a15      	ldr	r2, [pc, #84]	@ (80046f0 <HAL_ADC_ConfigChannel+0x7e4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d131      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x7f8>
 80046a0:	4b17      	ldr	r3, [pc, #92]	@ (8004700 <HAL_ADC_ConfigChannel+0x7f4>)
 80046a2:	e030      	b.n	8004706 <HAL_ADC_ConfigChannel+0x7fa>
 80046a4:	47ff0000 	.word	0x47ff0000
 80046a8:	40022000 	.word	0x40022000
 80046ac:	04300002 	.word	0x04300002
 80046b0:	08600004 	.word	0x08600004
 80046b4:	0c900008 	.word	0x0c900008
 80046b8:	10c00010 	.word	0x10c00010
 80046bc:	14f00020 	.word	0x14f00020
 80046c0:	2a000400 	.word	0x2a000400
 80046c4:	2e300800 	.word	0x2e300800
 80046c8:	32601000 	.word	0x32601000
 80046cc:	43210000 	.word	0x43210000
 80046d0:	4b840000 	.word	0x4b840000
 80046d4:	4fb80000 	.word	0x4fb80000
 80046d8:	47520000 	.word	0x47520000
 80046dc:	36902000 	.word	0x36902000
 80046e0:	25b00200 	.word	0x25b00200
 80046e4:	21800100 	.word	0x21800100
 80046e8:	1d500080 	.word	0x1d500080
 80046ec:	19200040 	.word	0x19200040
 80046f0:	40022100 	.word	0x40022100
 80046f4:	58026000 	.word	0x58026000
 80046f8:	3ac04000 	.word	0x3ac04000
 80046fc:	3ef08000 	.word	0x3ef08000
 8004700:	40022300 	.word	0x40022300
 8004704:	4b61      	ldr	r3, [pc, #388]	@ (800488c <HAL_ADC_ConfigChannel+0x980>)
 8004706:	4618      	mov	r0, r3
 8004708:	f7fe fcf8 	bl	80030fc <LL_ADC_GetCommonPathInternalCh>
 800470c:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a5f      	ldr	r2, [pc, #380]	@ (8004890 <HAL_ADC_ConfigChannel+0x984>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d004      	beq.n	8004722 <HAL_ADC_ConfigChannel+0x816>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a5d      	ldr	r2, [pc, #372]	@ (8004894 <HAL_ADC_ConfigChannel+0x988>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d10e      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x834>
 8004722:	485b      	ldr	r0, [pc, #364]	@ (8004890 <HAL_ADC_ConfigChannel+0x984>)
 8004724:	f7fe ff60 	bl	80035e8 <LL_ADC_IsEnabled>
 8004728:	4604      	mov	r4, r0
 800472a:	485a      	ldr	r0, [pc, #360]	@ (8004894 <HAL_ADC_ConfigChannel+0x988>)
 800472c:	f7fe ff5c 	bl	80035e8 <LL_ADC_IsEnabled>
 8004730:	4603      	mov	r3, r0
 8004732:	4323      	orrs	r3, r4
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf0c      	ite	eq
 8004738:	2301      	moveq	r3, #1
 800473a:	2300      	movne	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	e008      	b.n	8004752 <HAL_ADC_ConfigChannel+0x846>
 8004740:	4855      	ldr	r0, [pc, #340]	@ (8004898 <HAL_ADC_ConfigChannel+0x98c>)
 8004742:	f7fe ff51 	bl	80035e8 <LL_ADC_IsEnabled>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	bf0c      	ite	eq
 800474c:	2301      	moveq	r3, #1
 800474e:	2300      	movne	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d07d      	beq.n	8004852 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a50      	ldr	r2, [pc, #320]	@ (800489c <HAL_ADC_ConfigChannel+0x990>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d130      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x8b6>
 8004760:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d12b      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a4a      	ldr	r2, [pc, #296]	@ (8004898 <HAL_ADC_ConfigChannel+0x98c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	f040 8081 	bne.w	8004878 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a45      	ldr	r2, [pc, #276]	@ (8004890 <HAL_ADC_ConfigChannel+0x984>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d004      	beq.n	800478a <HAL_ADC_ConfigChannel+0x87e>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a43      	ldr	r2, [pc, #268]	@ (8004894 <HAL_ADC_ConfigChannel+0x988>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d101      	bne.n	800478e <HAL_ADC_ConfigChannel+0x882>
 800478a:	4a45      	ldr	r2, [pc, #276]	@ (80048a0 <HAL_ADC_ConfigChannel+0x994>)
 800478c:	e000      	b.n	8004790 <HAL_ADC_ConfigChannel+0x884>
 800478e:	4a3f      	ldr	r2, [pc, #252]	@ (800488c <HAL_ADC_ConfigChannel+0x980>)
 8004790:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004792:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f7fe fc9c 	bl	80030d6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800479e:	4b41      	ldr	r3, [pc, #260]	@ (80048a4 <HAL_ADC_ConfigChannel+0x998>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	099b      	lsrs	r3, r3, #6
 80047a4:	4a40      	ldr	r2, [pc, #256]	@ (80048a8 <HAL_ADC_ConfigChannel+0x99c>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	099b      	lsrs	r3, r3, #6
 80047ac:	3301      	adds	r3, #1
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80047b2:	e002      	b.n	80047ba <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1f9      	bne.n	80047b4 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047c0:	e05a      	b.n	8004878 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a39      	ldr	r2, [pc, #228]	@ (80048ac <HAL_ADC_ConfigChannel+0x9a0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d11e      	bne.n	800480a <HAL_ADC_ConfigChannel+0x8fe>
 80047cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d119      	bne.n	800480a <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a2f      	ldr	r2, [pc, #188]	@ (8004898 <HAL_ADC_ConfigChannel+0x98c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d14b      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004890 <HAL_ADC_ConfigChannel+0x984>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d004      	beq.n	80047f4 <HAL_ADC_ConfigChannel+0x8e8>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a29      	ldr	r2, [pc, #164]	@ (8004894 <HAL_ADC_ConfigChannel+0x988>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d101      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x8ec>
 80047f4:	4a2a      	ldr	r2, [pc, #168]	@ (80048a0 <HAL_ADC_ConfigChannel+0x994>)
 80047f6:	e000      	b.n	80047fa <HAL_ADC_ConfigChannel+0x8ee>
 80047f8:	4a24      	ldr	r2, [pc, #144]	@ (800488c <HAL_ADC_ConfigChannel+0x980>)
 80047fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004800:	4619      	mov	r1, r3
 8004802:	4610      	mov	r0, r2
 8004804:	f7fe fc67 	bl	80030d6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004808:	e036      	b.n	8004878 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a28      	ldr	r2, [pc, #160]	@ (80048b0 <HAL_ADC_ConfigChannel+0x9a4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d131      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x96c>
 8004814:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d12c      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1d      	ldr	r2, [pc, #116]	@ (8004898 <HAL_ADC_ConfigChannel+0x98c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d127      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a18      	ldr	r2, [pc, #96]	@ (8004890 <HAL_ADC_ConfigChannel+0x984>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d004      	beq.n	800483c <HAL_ADC_ConfigChannel+0x930>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a17      	ldr	r2, [pc, #92]	@ (8004894 <HAL_ADC_ConfigChannel+0x988>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d101      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x934>
 800483c:	4a18      	ldr	r2, [pc, #96]	@ (80048a0 <HAL_ADC_ConfigChannel+0x994>)
 800483e:	e000      	b.n	8004842 <HAL_ADC_ConfigChannel+0x936>
 8004840:	4a12      	ldr	r2, [pc, #72]	@ (800488c <HAL_ADC_ConfigChannel+0x980>)
 8004842:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004844:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004848:	4619      	mov	r1, r3
 800484a:	4610      	mov	r0, r2
 800484c:	f7fe fc43 	bl	80030d6 <LL_ADC_SetCommonPathInternalCh>
 8004850:	e012      	b.n	8004878 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004856:	f043 0220 	orr.w	r2, r3, #32
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8004864:	e008      	b.n	8004878 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800486a:	f043 0220 	orr.w	r2, r3, #32
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004880:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8004884:	4618      	mov	r0, r3
 8004886:	3794      	adds	r7, #148	@ 0x94
 8004888:	46bd      	mov	sp, r7
 800488a:	bd90      	pop	{r4, r7, pc}
 800488c:	58026300 	.word	0x58026300
 8004890:	40022000 	.word	0x40022000
 8004894:	40022100 	.word	0x40022100
 8004898:	58026000 	.word	0x58026000
 800489c:	c7520000 	.word	0xc7520000
 80048a0:	40022300 	.word	0x40022300
 80048a4:	2400000c 	.word	0x2400000c
 80048a8:	053e2d63 	.word	0x053e2d63
 80048ac:	c3210000 	.word	0xc3210000
 80048b0:	cb840000 	.word	0xcb840000

080048b4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fe feda 	bl	8003684 <LL_ADC_REG_IsConversionOngoing>
 80048d0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe fefc 	bl	80036d4 <LL_ADC_INJ_IsConversionOngoing>
 80048dc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d103      	bne.n	80048ec <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 8098 	beq.w	8004a1c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d02a      	beq.n	8004950 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	7e5b      	ldrb	r3, [r3, #25]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d126      	bne.n	8004950 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	7e1b      	ldrb	r3, [r3, #24]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d122      	bne.n	8004950 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800490a:	2301      	movs	r3, #1
 800490c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800490e:	e014      	b.n	800493a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	4a45      	ldr	r2, [pc, #276]	@ (8004a28 <ADC_ConversionStop+0x174>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d90d      	bls.n	8004934 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800491c:	f043 0210 	orr.w	r2, r3, #16
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004928:	f043 0201 	orr.w	r2, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e074      	b.n	8004a1e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	3301      	adds	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004944:	2b40      	cmp	r3, #64	@ 0x40
 8004946:	d1e3      	bne.n	8004910 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2240      	movs	r2, #64	@ 0x40
 800494e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d014      	beq.n	8004980 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f7fe fe92 	bl	8003684 <LL_ADC_REG_IsConversionOngoing>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00c      	beq.n	8004980 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7fe fe4f 	bl	800360e <LL_ADC_IsDisableOngoing>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d104      	bne.n	8004980 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe fe6e 	bl	800365c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d014      	beq.n	80049b0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fe fea2 	bl	80036d4 <LL_ADC_INJ_IsConversionOngoing>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00c      	beq.n	80049b0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe fe37 	bl	800360e <LL_ADC_IsDisableOngoing>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d104      	bne.n	80049b0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fe fe7e 	bl	80036ac <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d005      	beq.n	80049c2 <ADC_ConversionStop+0x10e>
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d105      	bne.n	80049c8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80049bc:	230c      	movs	r3, #12
 80049be:	617b      	str	r3, [r7, #20]
        break;
 80049c0:	e005      	b.n	80049ce <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80049c2:	2308      	movs	r3, #8
 80049c4:	617b      	str	r3, [r7, #20]
        break;
 80049c6:	e002      	b.n	80049ce <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80049c8:	2304      	movs	r3, #4
 80049ca:	617b      	str	r3, [r7, #20]
        break;
 80049cc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80049ce:	f7fe fb3f 	bl	8003050 <HAL_GetTick>
 80049d2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80049d4:	e01b      	b.n	8004a0e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80049d6:	f7fe fb3b 	bl	8003050 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b05      	cmp	r3, #5
 80049e2:	d914      	bls.n	8004a0e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00d      	beq.n	8004a0e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049f6:	f043 0210 	orr.w	r2, r3, #16
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a02:	f043 0201 	orr.w	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e007      	b.n	8004a1e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1dc      	bne.n	80049d6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	000cdbff 	.word	0x000cdbff

08004a2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe fdd5 	bl	80035e8 <LL_ADC_IsEnabled>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d16e      	bne.n	8004b22 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	4b38      	ldr	r3, [pc, #224]	@ (8004b2c <ADC_Enable+0x100>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00d      	beq.n	8004a6e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a56:	f043 0210 	orr.w	r2, r3, #16
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a62:	f043 0201 	orr.w	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e05a      	b.n	8004b24 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fe fd90 	bl	8003598 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a78:	f7fe faea 	bl	8003050 <HAL_GetTick>
 8004a7c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a2b      	ldr	r2, [pc, #172]	@ (8004b30 <ADC_Enable+0x104>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <ADC_Enable+0x66>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a29      	ldr	r2, [pc, #164]	@ (8004b34 <ADC_Enable+0x108>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d101      	bne.n	8004a96 <ADC_Enable+0x6a>
 8004a92:	4b29      	ldr	r3, [pc, #164]	@ (8004b38 <ADC_Enable+0x10c>)
 8004a94:	e000      	b.n	8004a98 <ADC_Enable+0x6c>
 8004a96:	4b29      	ldr	r3, [pc, #164]	@ (8004b3c <ADC_Enable+0x110>)
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fe fd13 	bl	80034c4 <LL_ADC_GetMultimode>
 8004a9e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a23      	ldr	r2, [pc, #140]	@ (8004b34 <ADC_Enable+0x108>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d002      	beq.n	8004ab0 <ADC_Enable+0x84>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	e000      	b.n	8004ab2 <ADC_Enable+0x86>
 8004ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8004b30 <ADC_Enable+0x104>)
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d02c      	beq.n	8004b14 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d130      	bne.n	8004b22 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ac0:	e028      	b.n	8004b14 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fe fd8e 	bl	80035e8 <LL_ADC_IsEnabled>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d104      	bne.n	8004adc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fe fd5e 	bl	8003598 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004adc:	f7fe fab8 	bl	8003050 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d914      	bls.n	8004b14 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d00d      	beq.n	8004b14 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004afc:	f043 0210 	orr.w	r2, r3, #16
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b08:	f043 0201 	orr.w	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e007      	b.n	8004b24 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d1cf      	bne.n	8004ac2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	8000003f 	.word	0x8000003f
 8004b30:	40022000 	.word	0x40022000
 8004b34:	40022100 	.word	0x40022100
 8004b38:	40022300 	.word	0x40022300
 8004b3c:	58026300 	.word	0x58026300

08004b40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fe fd5e 	bl	800360e <LL_ADC_IsDisableOngoing>
 8004b52:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fe fd45 	bl	80035e8 <LL_ADC_IsEnabled>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d047      	beq.n	8004bf4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d144      	bne.n	8004bf4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 030d 	and.w	r3, r3, #13
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d10c      	bne.n	8004b92 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fe fd1f 	bl	80035c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2203      	movs	r2, #3
 8004b88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b8a:	f7fe fa61 	bl	8003050 <HAL_GetTick>
 8004b8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b90:	e029      	b.n	8004be6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b96:	f043 0210 	orr.w	r2, r3, #16
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ba2:	f043 0201 	orr.w	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e023      	b.n	8004bf6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004bae:	f7fe fa4f 	bl	8003050 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d914      	bls.n	8004be6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00d      	beq.n	8004be6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bce:	f043 0210 	orr.w	r2, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bda:	f043 0201 	orr.w	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e007      	b.n	8004bf6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1dc      	bne.n	8004bae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a6c      	ldr	r2, [pc, #432]	@ (8004dc0 <ADC_ConfigureBoostMode+0x1c0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d004      	beq.n	8004c1c <ADC_ConfigureBoostMode+0x1c>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a6b      	ldr	r2, [pc, #428]	@ (8004dc4 <ADC_ConfigureBoostMode+0x1c4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d109      	bne.n	8004c30 <ADC_ConfigureBoostMode+0x30>
 8004c1c:	4b6a      	ldr	r3, [pc, #424]	@ (8004dc8 <ADC_ConfigureBoostMode+0x1c8>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	bf14      	ite	ne
 8004c28:	2301      	movne	r3, #1
 8004c2a:	2300      	moveq	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	e008      	b.n	8004c42 <ADC_ConfigureBoostMode+0x42>
 8004c30:	4b66      	ldr	r3, [pc, #408]	@ (8004dcc <ADC_ConfigureBoostMode+0x1cc>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	bf14      	ite	ne
 8004c3c:	2301      	movne	r3, #1
 8004c3e:	2300      	moveq	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d01c      	beq.n	8004c80 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004c46:	f002 fdcd 	bl	80077e4 <HAL_RCC_GetHCLKFreq>
 8004c4a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c54:	d010      	beq.n	8004c78 <ADC_ConfigureBoostMode+0x78>
 8004c56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c5a:	d873      	bhi.n	8004d44 <ADC_ConfigureBoostMode+0x144>
 8004c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c60:	d002      	beq.n	8004c68 <ADC_ConfigureBoostMode+0x68>
 8004c62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c66:	d16d      	bne.n	8004d44 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	0c1b      	lsrs	r3, r3, #16
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c74:	60fb      	str	r3, [r7, #12]
        break;
 8004c76:	e068      	b.n	8004d4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	089b      	lsrs	r3, r3, #2
 8004c7c:	60fb      	str	r3, [r7, #12]
        break;
 8004c7e:	e064      	b.n	8004d4a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004c80:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004c84:	f04f 0100 	mov.w	r1, #0
 8004c88:	f003 ffa8 	bl	8008bdc <HAL_RCCEx_GetPeriphCLKFreq>
 8004c8c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004c96:	d051      	beq.n	8004d3c <ADC_ConfigureBoostMode+0x13c>
 8004c98:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004c9c:	d854      	bhi.n	8004d48 <ADC_ConfigureBoostMode+0x148>
 8004c9e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004ca2:	d047      	beq.n	8004d34 <ADC_ConfigureBoostMode+0x134>
 8004ca4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004ca8:	d84e      	bhi.n	8004d48 <ADC_ConfigureBoostMode+0x148>
 8004caa:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004cae:	d03d      	beq.n	8004d2c <ADC_ConfigureBoostMode+0x12c>
 8004cb0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004cb4:	d848      	bhi.n	8004d48 <ADC_ConfigureBoostMode+0x148>
 8004cb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cba:	d033      	beq.n	8004d24 <ADC_ConfigureBoostMode+0x124>
 8004cbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cc0:	d842      	bhi.n	8004d48 <ADC_ConfigureBoostMode+0x148>
 8004cc2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004cc6:	d029      	beq.n	8004d1c <ADC_ConfigureBoostMode+0x11c>
 8004cc8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004ccc:	d83c      	bhi.n	8004d48 <ADC_ConfigureBoostMode+0x148>
 8004cce:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004cd2:	d01a      	beq.n	8004d0a <ADC_ConfigureBoostMode+0x10a>
 8004cd4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004cd8:	d836      	bhi.n	8004d48 <ADC_ConfigureBoostMode+0x148>
 8004cda:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004cde:	d014      	beq.n	8004d0a <ADC_ConfigureBoostMode+0x10a>
 8004ce0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004ce4:	d830      	bhi.n	8004d48 <ADC_ConfigureBoostMode+0x148>
 8004ce6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cea:	d00e      	beq.n	8004d0a <ADC_ConfigureBoostMode+0x10a>
 8004cec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cf0:	d82a      	bhi.n	8004d48 <ADC_ConfigureBoostMode+0x148>
 8004cf2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004cf6:	d008      	beq.n	8004d0a <ADC_ConfigureBoostMode+0x10a>
 8004cf8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004cfc:	d824      	bhi.n	8004d48 <ADC_ConfigureBoostMode+0x148>
 8004cfe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d02:	d002      	beq.n	8004d0a <ADC_ConfigureBoostMode+0x10a>
 8004d04:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d08:	d11e      	bne.n	8004d48 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	0c9b      	lsrs	r3, r3, #18
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	60fb      	str	r3, [r7, #12]
        break;
 8004d1a:	e016      	b.n	8004d4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	091b      	lsrs	r3, r3, #4
 8004d20:	60fb      	str	r3, [r7, #12]
        break;
 8004d22:	e012      	b.n	8004d4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	60fb      	str	r3, [r7, #12]
        break;
 8004d2a:	e00e      	b.n	8004d4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	099b      	lsrs	r3, r3, #6
 8004d30:	60fb      	str	r3, [r7, #12]
        break;
 8004d32:	e00a      	b.n	8004d4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	09db      	lsrs	r3, r3, #7
 8004d38:	60fb      	str	r3, [r7, #12]
        break;
 8004d3a:	e006      	b.n	8004d4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	0a1b      	lsrs	r3, r3, #8
 8004d40:	60fb      	str	r3, [r7, #12]
        break;
 8004d42:	e002      	b.n	8004d4a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004d44:	bf00      	nop
 8004d46:	e000      	b.n	8004d4a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004d48:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4a1f      	ldr	r2, [pc, #124]	@ (8004dd0 <ADC_ConfigureBoostMode+0x1d0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d808      	bhi.n	8004d6a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004d66:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004d68:	e025      	b.n	8004db6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4a19      	ldr	r2, [pc, #100]	@ (8004dd4 <ADC_ConfigureBoostMode+0x1d4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d80a      	bhi.n	8004d88 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d84:	609a      	str	r2, [r3, #8]
}
 8004d86:	e016      	b.n	8004db6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4a13      	ldr	r2, [pc, #76]	@ (8004dd8 <ADC_ConfigureBoostMode+0x1d8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d80a      	bhi.n	8004da6 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004da2:	609a      	str	r2, [r3, #8]
}
 8004da4:	e007      	b.n	8004db6 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004db4:	609a      	str	r2, [r3, #8]
}
 8004db6:	bf00      	nop
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40022000 	.word	0x40022000
 8004dc4:	40022100 	.word	0x40022100
 8004dc8:	40022300 	.word	0x40022300
 8004dcc:	58026300 	.word	0x58026300
 8004dd0:	005f5e10 	.word	0x005f5e10
 8004dd4:	00bebc20 	.word	0x00bebc20
 8004dd8:	017d7840 	.word	0x017d7840

08004ddc <LL_ADC_IsEnabled>:
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <LL_ADC_IsEnabled+0x18>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <LL_ADC_IsEnabled+0x1a>
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <LL_ADC_REG_IsConversionOngoing>:
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d101      	bne.n	8004e1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e16:	2301      	movs	r3, #1
 8004e18:	e000      	b.n	8004e1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004e28:	b590      	push	{r4, r7, lr}
 8004e2a:	b0a3      	sub	sp, #140	@ 0x8c
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e42:	2302      	movs	r3, #2
 8004e44:	e0c1      	b.n	8004fca <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004e52:	2300      	movs	r3, #0
 8004e54:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a5e      	ldr	r2, [pc, #376]	@ (8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d102      	bne.n	8004e66 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e60:	4b5d      	ldr	r3, [pc, #372]	@ (8004fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	e001      	b.n	8004e6a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10b      	bne.n	8004e88 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e74:	f043 0220 	orr.w	r2, r3, #32
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e0a0      	b.n	8004fca <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff ffb9 	bl	8004e02 <LL_ADC_REG_IsConversionOngoing>
 8004e90:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff ffb2 	bl	8004e02 <LL_ADC_REG_IsConversionOngoing>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f040 8081 	bne.w	8004fa8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004ea6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d17c      	bne.n	8004fa8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a48      	ldr	r2, [pc, #288]	@ (8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d004      	beq.n	8004ec2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a46      	ldr	r2, [pc, #280]	@ (8004fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d101      	bne.n	8004ec6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004ec2:	4b46      	ldr	r3, [pc, #280]	@ (8004fdc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004ec4:	e000      	b.n	8004ec8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004ec6:	4b46      	ldr	r3, [pc, #280]	@ (8004fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004ec8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d039      	beq.n	8004f46 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004ed2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ee2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a3a      	ldr	r2, [pc, #232]	@ (8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d004      	beq.n	8004ef8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a39      	ldr	r2, [pc, #228]	@ (8004fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d10e      	bne.n	8004f16 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004ef8:	4836      	ldr	r0, [pc, #216]	@ (8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004efa:	f7ff ff6f 	bl	8004ddc <LL_ADC_IsEnabled>
 8004efe:	4604      	mov	r4, r0
 8004f00:	4835      	ldr	r0, [pc, #212]	@ (8004fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f02:	f7ff ff6b 	bl	8004ddc <LL_ADC_IsEnabled>
 8004f06:	4603      	mov	r3, r0
 8004f08:	4323      	orrs	r3, r4
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	bf0c      	ite	eq
 8004f0e:	2301      	moveq	r3, #1
 8004f10:	2300      	movne	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	e008      	b.n	8004f28 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004f16:	4833      	ldr	r0, [pc, #204]	@ (8004fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004f18:	f7ff ff60 	bl	8004ddc <LL_ADC_IsEnabled>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	bf0c      	ite	eq
 8004f22:	2301      	moveq	r3, #1
 8004f24:	2300      	movne	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d047      	beq.n	8004fbc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	4b2d      	ldr	r3, [pc, #180]	@ (8004fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	6811      	ldr	r1, [r2, #0]
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	6892      	ldr	r2, [r2, #8]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f42:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f44:	e03a      	b.n	8004fbc <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004f46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f50:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d10e      	bne.n	8004f84 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004f66:	481b      	ldr	r0, [pc, #108]	@ (8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f68:	f7ff ff38 	bl	8004ddc <LL_ADC_IsEnabled>
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	481a      	ldr	r0, [pc, #104]	@ (8004fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f70:	f7ff ff34 	bl	8004ddc <LL_ADC_IsEnabled>
 8004f74:	4603      	mov	r3, r0
 8004f76:	4323      	orrs	r3, r4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	e008      	b.n	8004f96 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004f84:	4817      	ldr	r0, [pc, #92]	@ (8004fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004f86:	f7ff ff29 	bl	8004ddc <LL_ADC_IsEnabled>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d010      	beq.n	8004fbc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	4b12      	ldr	r3, [pc, #72]	@ (8004fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004fa4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fa6:	e009      	b.n	8004fbc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fac:	f043 0220 	orr.w	r2, r3, #32
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004fba:	e000      	b.n	8004fbe <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fbc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004fc6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	378c      	adds	r7, #140	@ 0x8c
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd90      	pop	{r4, r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40022000 	.word	0x40022000
 8004fd8:	40022100 	.word	0x40022100
 8004fdc:	40022300 	.word	0x40022300
 8004fe0:	58026300 	.word	0x58026300
 8004fe4:	58026000 	.word	0x58026000
 8004fe8:	fffff0e0 	.word	0xfffff0e0

08004fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800502c <__NVIC_SetPriorityGrouping+0x40>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005008:	4013      	ands	r3, r2
 800500a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005014:	4b06      	ldr	r3, [pc, #24]	@ (8005030 <__NVIC_SetPriorityGrouping+0x44>)
 8005016:	4313      	orrs	r3, r2
 8005018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800501a:	4a04      	ldr	r2, [pc, #16]	@ (800502c <__NVIC_SetPriorityGrouping+0x40>)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	60d3      	str	r3, [r2, #12]
}
 8005020:	bf00      	nop
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	e000ed00 	.word	0xe000ed00
 8005030:	05fa0000 	.word	0x05fa0000

08005034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005038:	4b04      	ldr	r3, [pc, #16]	@ (800504c <__NVIC_GetPriorityGrouping+0x18>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	0a1b      	lsrs	r3, r3, #8
 800503e:	f003 0307 	and.w	r3, r3, #7
}
 8005042:	4618      	mov	r0, r3
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	e000ed00 	.word	0xe000ed00

08005050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800505a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800505e:	2b00      	cmp	r3, #0
 8005060:	db0b      	blt.n	800507a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	f003 021f 	and.w	r2, r3, #31
 8005068:	4907      	ldr	r1, [pc, #28]	@ (8005088 <__NVIC_EnableIRQ+0x38>)
 800506a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	2001      	movs	r0, #1
 8005072:	fa00 f202 	lsl.w	r2, r0, r2
 8005076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	e000e100 	.word	0xe000e100

0800508c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	6039      	str	r1, [r7, #0]
 8005096:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005098:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800509c:	2b00      	cmp	r3, #0
 800509e:	db0a      	blt.n	80050b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	490c      	ldr	r1, [pc, #48]	@ (80050d8 <__NVIC_SetPriority+0x4c>)
 80050a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050aa:	0112      	lsls	r2, r2, #4
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	440b      	add	r3, r1
 80050b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050b4:	e00a      	b.n	80050cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	4908      	ldr	r1, [pc, #32]	@ (80050dc <__NVIC_SetPriority+0x50>)
 80050bc:	88fb      	ldrh	r3, [r7, #6]
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	3b04      	subs	r3, #4
 80050c4:	0112      	lsls	r2, r2, #4
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	440b      	add	r3, r1
 80050ca:	761a      	strb	r2, [r3, #24]
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	e000e100 	.word	0xe000e100
 80050dc:	e000ed00 	.word	0xe000ed00

080050e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b089      	sub	sp, #36	@ 0x24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f1c3 0307 	rsb	r3, r3, #7
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	bf28      	it	cs
 80050fe:	2304      	movcs	r3, #4
 8005100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	3304      	adds	r3, #4
 8005106:	2b06      	cmp	r3, #6
 8005108:	d902      	bls.n	8005110 <NVIC_EncodePriority+0x30>
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	3b03      	subs	r3, #3
 800510e:	e000      	b.n	8005112 <NVIC_EncodePriority+0x32>
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005114:	f04f 32ff 	mov.w	r2, #4294967295
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	43da      	mvns	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	401a      	ands	r2, r3
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005128:	f04f 31ff 	mov.w	r1, #4294967295
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	fa01 f303 	lsl.w	r3, r1, r3
 8005132:	43d9      	mvns	r1, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005138:	4313      	orrs	r3, r2
         );
}
 800513a:	4618      	mov	r0, r3
 800513c:	3724      	adds	r7, #36	@ 0x24
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
	...

08005148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3b01      	subs	r3, #1
 8005154:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005158:	d301      	bcc.n	800515e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800515a:	2301      	movs	r3, #1
 800515c:	e00f      	b.n	800517e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800515e:	4a0a      	ldr	r2, [pc, #40]	@ (8005188 <SysTick_Config+0x40>)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3b01      	subs	r3, #1
 8005164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005166:	210f      	movs	r1, #15
 8005168:	f04f 30ff 	mov.w	r0, #4294967295
 800516c:	f7ff ff8e 	bl	800508c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005170:	4b05      	ldr	r3, [pc, #20]	@ (8005188 <SysTick_Config+0x40>)
 8005172:	2200      	movs	r2, #0
 8005174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005176:	4b04      	ldr	r3, [pc, #16]	@ (8005188 <SysTick_Config+0x40>)
 8005178:	2207      	movs	r2, #7
 800517a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	e000e010 	.word	0xe000e010

0800518c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff ff29 	bl	8004fec <__NVIC_SetPriorityGrouping>
}
 800519a:	bf00      	nop
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b086      	sub	sp, #24
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	4603      	mov	r3, r0
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]
 80051ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051b0:	f7ff ff40 	bl	8005034 <__NVIC_GetPriorityGrouping>
 80051b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	6978      	ldr	r0, [r7, #20]
 80051bc:	f7ff ff90 	bl	80050e0 <NVIC_EncodePriority>
 80051c0:	4602      	mov	r2, r0
 80051c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051c6:	4611      	mov	r1, r2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff ff5f 	bl	800508c <__NVIC_SetPriority>
}
 80051ce:	bf00      	nop
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	4603      	mov	r3, r0
 80051de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff ff33 	bl	8005050 <__NVIC_EnableIRQ>
}
 80051ea:	bf00      	nop
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff ffa4 	bl	8005148 <SysTick_Config>
 8005200:	4603      	mov	r3, r0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b098      	sub	sp, #96	@ 0x60
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005214:	4a84      	ldr	r2, [pc, #528]	@ (8005428 <HAL_FDCAN_Init+0x21c>)
 8005216:	f107 030c 	add.w	r3, r7, #12
 800521a:	4611      	mov	r1, r2
 800521c:	224c      	movs	r2, #76	@ 0x4c
 800521e:	4618      	mov	r0, r3
 8005220:	f007 f918 	bl	800c454 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e1c6      	b.n	80055bc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a7e      	ldr	r2, [pc, #504]	@ (800542c <HAL_FDCAN_Init+0x220>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d106      	bne.n	8005246 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005240:	461a      	mov	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fd fbc4 	bl	80029e8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0210 	bic.w	r2, r2, #16
 800526e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005270:	f7fd feee 	bl	8003050 <HAL_GetTick>
 8005274:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005276:	e014      	b.n	80052a2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005278:	f7fd feea 	bl	8003050 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b0a      	cmp	r3, #10
 8005284:	d90d      	bls.n	80052a2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800528c:	f043 0201 	orr.w	r2, r3, #1
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2203      	movs	r2, #3
 800529a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e18c      	b.n	80055bc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	f003 0308 	and.w	r3, r3, #8
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d0e3      	beq.n	8005278 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052c0:	f7fd fec6 	bl	8003050 <HAL_GetTick>
 80052c4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80052c6:	e014      	b.n	80052f2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80052c8:	f7fd fec2 	bl	8003050 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b0a      	cmp	r3, #10
 80052d4:	d90d      	bls.n	80052f2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052dc:	f043 0201 	orr.w	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2203      	movs	r2, #3
 80052ea:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e164      	b.n	80055bc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0e3      	beq.n	80052c8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0202 	orr.w	r2, r2, #2
 800530e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	7c1b      	ldrb	r3, [r3, #16]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d108      	bne.n	800532a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005326:	619a      	str	r2, [r3, #24]
 8005328:	e007      	b.n	800533a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005338:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	7c5b      	ldrb	r3, [r3, #17]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d108      	bne.n	8005354 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699a      	ldr	r2, [r3, #24]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005350:	619a      	str	r2, [r3, #24]
 8005352:	e007      	b.n	8005364 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699a      	ldr	r2, [r3, #24]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005362:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	7c9b      	ldrb	r3, [r3, #18]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d108      	bne.n	800537e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800537a:	619a      	str	r2, [r3, #24]
 800537c:	e007      	b.n	800538e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699a      	ldr	r2, [r3, #24]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800538c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80053b2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691a      	ldr	r2, [r3, #16]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0210 	bic.w	r2, r2, #16
 80053c2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d108      	bne.n	80053de <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0204 	orr.w	r2, r2, #4
 80053da:	619a      	str	r2, [r3, #24]
 80053dc:	e030      	b.n	8005440 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d02c      	beq.n	8005440 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d020      	beq.n	8005430 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	699a      	ldr	r2, [r3, #24]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80053fc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	691a      	ldr	r2, [r3, #16]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0210 	orr.w	r2, r2, #16
 800540c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	2b03      	cmp	r3, #3
 8005414:	d114      	bne.n	8005440 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699a      	ldr	r2, [r3, #24]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f042 0220 	orr.w	r2, r2, #32
 8005424:	619a      	str	r2, [r3, #24]
 8005426:	e00b      	b.n	8005440 <HAL_FDCAN_Init+0x234>
 8005428:	0800d100 	.word	0x0800d100
 800542c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699a      	ldr	r2, [r3, #24]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0220 	orr.w	r2, r2, #32
 800543e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	3b01      	subs	r3, #1
 8005446:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	3b01      	subs	r3, #1
 800544e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005450:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005458:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	3b01      	subs	r3, #1
 8005462:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005468:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800546a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005474:	d115      	bne.n	80054a2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005480:	3b01      	subs	r3, #1
 8005482:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005484:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548a:	3b01      	subs	r3, #1
 800548c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800548e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005496:	3b01      	subs	r3, #1
 8005498:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800549e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80054a0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c8:	4413      	add	r3, r2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d011      	beq.n	80054f2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80054d6:	f023 0107 	bic.w	r1, r3, #7
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	3360      	adds	r3, #96	@ 0x60
 80054e2:	443b      	add	r3, r7
 80054e4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d011      	beq.n	800551e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005502:	f023 0107 	bic.w	r1, r3, #7
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	3360      	adds	r3, #96	@ 0x60
 800550e:	443b      	add	r3, r7
 8005510:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005522:	2b00      	cmp	r3, #0
 8005524:	d012      	beq.n	800554c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800552e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	3360      	adds	r3, #96	@ 0x60
 800553a:	443b      	add	r3, r7
 800553c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005540:	011a      	lsls	r2, r3, #4
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005550:	2b00      	cmp	r3, #0
 8005552:	d012      	beq.n	800557a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800555c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	3360      	adds	r3, #96	@ 0x60
 8005568:	443b      	add	r3, r7
 800556a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800556e:	021a      	lsls	r2, r3, #8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a11      	ldr	r2, [pc, #68]	@ (80055c4 <HAL_FDCAN_Init+0x3b8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d107      	bne.n	8005594 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f022 0203 	bic.w	r2, r2, #3
 8005592:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fdf7 	bl	80061a0 <FDCAN_CalcultateRamBlockAddresses>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80055b8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3760      	adds	r7, #96	@ 0x60
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	4000a000 	.word	0x4000a000

080055c8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80055d8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80055da:	7bfb      	ldrb	r3, [r7, #15]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d002      	beq.n	80055e6 <HAL_FDCAN_ConfigFilter+0x1e>
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d157      	bne.n	8005696 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d12b      	bne.n	8005646 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	2b07      	cmp	r3, #7
 80055f4:	d10d      	bne.n	8005612 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8005602:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005608:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800560a:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	e00e      	b.n	8005630 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800561e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005626:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	e025      	b.n	8005692 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	075a      	lsls	r2, r3, #29
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	2b07      	cmp	r3, #7
 800565a:	d103      	bne.n	8005664 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	e006      	b.n	8005672 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	079a      	lsls	r2, r3, #30
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	4413      	add	r3, r2
 800567e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	3304      	adds	r3, #4
 800568a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	e008      	b.n	80056a8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800569c:	f043 0202 	orr.w	r2, r3, #2
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
  }
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	371c      	adds	r7, #28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d111      	bne.n	80056ec <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0201 	bic.w	r2, r2, #1
 80056de:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	e008      	b.n	80056fe <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056f2:	f043 0204 	orr.w	r2, r3, #4
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
  }
}
 80056fe:	4618      	mov	r0, r3
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b086      	sub	sp, #24
 800570e:	af00      	add	r7, sp, #0
 8005710:	60f8      	str	r0, [r7, #12]
 8005712:	60b9      	str	r1, [r7, #8]
 8005714:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d141      	bne.n	80057a6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800572a:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d109      	bne.n	8005746 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005738:	f043 0220 	orr.w	r2, r3, #32
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e038      	b.n	80057b8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800574e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d009      	beq.n	800576a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800575c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e026      	b.n	80057b8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	f003 031f 	and.w	r3, r3, #31
 8005778:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 fe93 	bl	80064ac <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2101      	movs	r1, #1
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	fa01 f202 	lsl.w	r2, r1, r2
 8005792:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005796:	2201      	movs	r2, #1
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	409a      	lsls	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	e008      	b.n	80057b8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057ac:	f043 0208 	orr.w	r2, r3, #8
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
  }
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b08b      	sub	sp, #44	@ 0x2c
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80057d8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80057da:	7efb      	ldrb	r3, [r7, #27]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	f040 8149 	bne.w	8005a74 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2b40      	cmp	r3, #64	@ 0x40
 80057e6:	d14c      	bne.n	8005882 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80057f0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d109      	bne.n	800580c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057fe:	f043 0220 	orr.w	r2, r3, #32
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e13c      	b.n	8005a86 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005814:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005818:	2b00      	cmp	r3, #0
 800581a:	d109      	bne.n	8005830 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005822:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e12a      	b.n	8005a86 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005838:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800583c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005840:	d10a      	bne.n	8005858 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800584a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800584e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005852:	d101      	bne.n	8005858 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005854:	2301      	movs	r3, #1
 8005856:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005860:	0a1b      	lsrs	r3, r3, #8
 8005862:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	4413      	add	r3, r2
 800586a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005874:	69f9      	ldr	r1, [r7, #28]
 8005876:	fb01 f303 	mul.w	r3, r1, r3
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005880:	e068      	b.n	8005954 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b41      	cmp	r3, #65	@ 0x41
 8005886:	d14c      	bne.n	8005922 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005890:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d109      	bne.n	80058ac <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800589e:	f043 0220 	orr.w	r2, r3, #32
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0ec      	b.n	8005a86 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d109      	bne.n	80058d0 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0da      	b.n	8005a86 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058e0:	d10a      	bne.n	80058f8 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058f2:	d101      	bne.n	80058f8 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80058f4:	2301      	movs	r3, #1
 80058f6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005900:	0a1b      	lsrs	r3, r3, #8
 8005902:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005906:	69fa      	ldr	r2, [r7, #28]
 8005908:	4413      	add	r3, r2
 800590a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005914:	69f9      	ldr	r1, [r7, #28]
 8005916:	fb01 f303 	mul.w	r3, r1, r3
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005920:	e018      	b.n	8005954 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	429a      	cmp	r2, r3
 800592a:	d309      	bcc.n	8005940 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005932:	f043 0220 	orr.w	r2, r3, #32
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e0a2      	b.n	8005a86 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	fb01 f303 	mul.w	r3, r1, r3
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d107      	bne.n	8005978 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	0c9b      	lsrs	r3, r3, #18
 800596e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	e005      	b.n	8005984 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800599c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599e:	3304      	adds	r3, #4
 80059a0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80059a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80059ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	0c1b      	lsrs	r3, r3, #16
 80059b2:	f003 020f 	and.w	r2, r3, #15
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80059d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	0e1b      	lsrs	r3, r3, #24
 80059d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80059e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	0fda      	lsrs	r2, r3, #31
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	3304      	adds	r3, #4
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80059f4:	2300      	movs	r3, #0
 80059f6:	623b      	str	r3, [r7, #32]
 80059f8:	e00a      	b.n	8005a10 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	441a      	add	r2, r3
 8005a00:	6839      	ldr	r1, [r7, #0]
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	440b      	add	r3, r1
 8005a06:	7812      	ldrb	r2, [r2, #0]
 8005a08:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	623b      	str	r3, [r7, #32]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	4a1f      	ldr	r2, [pc, #124]	@ (8005a94 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005a16:	5cd3      	ldrb	r3, [r2, r3]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d3ec      	bcc.n	80059fa <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b40      	cmp	r3, #64	@ 0x40
 8005a24:	d105      	bne.n	8005a32 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005a30:	e01e      	b.n	8005a70 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2b41      	cmp	r3, #65	@ 0x41
 8005a36:	d105      	bne.n	8005a44 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69fa      	ldr	r2, [r7, #28]
 8005a3e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005a42:	e015      	b.n	8005a70 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b1f      	cmp	r3, #31
 8005a48:	d808      	bhi.n	8005a5c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2101      	movs	r1, #1
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	fa01 f202 	lsl.w	r2, r1, r2
 8005a56:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005a5a:	e009      	b.n	8005a70 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f003 021f 	and.w	r2, r3, #31
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2101      	movs	r1, #1
 8005a68:	fa01 f202 	lsl.w	r2, r1, r2
 8005a6c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	e008      	b.n	8005a86 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a7a:	f043 0208 	orr.w	r2, r3, #8
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
  }
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	372c      	adds	r7, #44	@ 0x2c
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	0800d15c 	.word	0x0800d15c

08005a98 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005aaa:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005aac:	7dfb      	ldrb	r3, [r7, #23]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d002      	beq.n	8005ab8 <HAL_FDCAN_ActivateNotification+0x20>
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d155      	bne.n	8005b64 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d108      	bne.n	8005ad8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0201 	orr.w	r2, r2, #1
 8005ad4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ad6:	e014      	b.n	8005b02 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d108      	bne.n	8005afa <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0202 	orr.w	r2, r2, #2
 8005af6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005af8:	e003      	b.n	8005b02 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2203      	movs	r2, #3
 8005b00:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d009      	beq.n	8005b20 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d009      	beq.n	8005b3e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	4b0f      	ldr	r3, [pc, #60]	@ (8005b84 <HAL_FDCAN_ActivateNotification+0xec>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	6812      	ldr	r2, [r2, #0]
 8005b4e:	430b      	orrs	r3, r1
 8005b50:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b52:	4b0d      	ldr	r3, [pc, #52]	@ (8005b88 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005b54:	695a      	ldr	r2, [r3, #20]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	0f9b      	lsrs	r3, r3, #30
 8005b5a:	490b      	ldr	r1, [pc, #44]	@ (8005b88 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	e008      	b.n	8005b76 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b6a:	f043 0202 	orr.w	r2, r3, #2
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
  }
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	3fcfffff 	.word	0x3fcfffff
 8005b88:	4000a800 	.word	0x4000a800

08005b8c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b096      	sub	sp, #88	@ 0x58
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005b94:	4b9a      	ldr	r3, [pc, #616]	@ (8005e00 <HAL_FDCAN_IRQHandler+0x274>)
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	079b      	lsls	r3, r3, #30
 8005b9a:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005b9c:	4b98      	ldr	r3, [pc, #608]	@ (8005e00 <HAL_FDCAN_IRQHandler+0x274>)
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	079b      	lsls	r3, r3, #30
 8005ba2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bae:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005bb2:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005be2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bec:	4013      	ands	r3, r2
 8005bee:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf6:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c04:	4013      	ands	r3, r2
 8005c06:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c0e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005c12:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c2e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d010      	beq.n	8005c5e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3e:	0a1b      	lsrs	r3, r3, #8
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c50:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c52:	4b6b      	ldr	r3, [pc, #428]	@ (8005e00 <HAL_FDCAN_IRQHandler+0x274>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fa54 	bl	8006106 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c60:	0a9b      	lsrs	r3, r3, #10
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01d      	beq.n	8005ca6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c6c:	0a9b      	lsrs	r3, r3, #10
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d017      	beq.n	8005ca6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005c7e:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c96:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c98:	4b59      	ldr	r3, [pc, #356]	@ (8005e00 <HAL_FDCAN_IRQHandler+0x274>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005c9e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fa07 	bl	80060b4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00d      	beq.n	8005cc8 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cb2:	4b54      	ldr	r3, [pc, #336]	@ (8005e04 <HAL_FDCAN_IRQHandler+0x278>)
 8005cb4:	400b      	ands	r3, r1
 8005cb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cb8:	4a51      	ldr	r2, [pc, #324]	@ (8005e00 <HAL_FDCAN_IRQHandler+0x274>)
 8005cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cbc:	0f9b      	lsrs	r3, r3, #30
 8005cbe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005cc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f9c0 	bl	8006048 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005cc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00d      	beq.n	8005cea <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8005e04 <HAL_FDCAN_IRQHandler+0x278>)
 8005cd6:	400b      	ands	r3, r1
 8005cd8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cda:	4a49      	ldr	r2, [pc, #292]	@ (8005e00 <HAL_FDCAN_IRQHandler+0x274>)
 8005cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cde:	0f9b      	lsrs	r3, r3, #30
 8005ce0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005ce2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f9ba 	bl	800605e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00d      	beq.n	8005d0c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005cf6:	4b43      	ldr	r3, [pc, #268]	@ (8005e04 <HAL_FDCAN_IRQHandler+0x278>)
 8005cf8:	400b      	ands	r3, r1
 8005cfa:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cfc:	4a40      	ldr	r2, [pc, #256]	@ (8005e00 <HAL_FDCAN_IRQHandler+0x274>)
 8005cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d00:	0f9b      	lsrs	r3, r3, #30
 8005d02:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005d04:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fc f8da 	bl	8001ec0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005d0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00d      	beq.n	8005d2e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005d18:	4b3a      	ldr	r3, [pc, #232]	@ (8005e04 <HAL_FDCAN_IRQHandler+0x278>)
 8005d1a:	400b      	ands	r3, r1
 8005d1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d1e:	4a38      	ldr	r2, [pc, #224]	@ (8005e00 <HAL_FDCAN_IRQHandler+0x274>)
 8005d20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d22:	0f9b      	lsrs	r3, r3, #30
 8005d24:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005d26:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f9a3 	bl	8006074 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d30:	0adb      	lsrs	r3, r3, #11
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d010      	beq.n	8005d5c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3c:	0adb      	lsrs	r3, r3, #11
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00a      	beq.n	8005d5c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d4e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d50:	4b2b      	ldr	r3, [pc, #172]	@ (8005e00 <HAL_FDCAN_IRQHandler+0x274>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f997 	bl	800608a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d5e:	0a5b      	lsrs	r3, r3, #9
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d01d      	beq.n	8005da4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6a:	0a5b      	lsrs	r3, r3, #9
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d017      	beq.n	8005da4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005d7c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d88:	4013      	ands	r3, r2
 8005d8a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d94:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d96:	4b1a      	ldr	r3, [pc, #104]	@ (8005e00 <HAL_FDCAN_IRQHandler+0x274>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005d9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f97d 	bl	800609e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005da6:	0cdb      	lsrs	r3, r3, #19
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d010      	beq.n	8005dd2 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db2:	0cdb      	lsrs	r3, r3, #19
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005dc4:	651a      	str	r2, [r3, #80]	@ 0x50
 8005dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005e00 <HAL_FDCAN_IRQHandler+0x274>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f97c 	bl	80060ca <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dd4:	0c1b      	lsrs	r3, r3, #16
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d016      	beq.n	8005e0c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de0:	0c1b      	lsrs	r3, r3, #16
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d010      	beq.n	8005e0c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005df2:	651a      	str	r2, [r3, #80]	@ 0x50
 8005df4:	4b02      	ldr	r3, [pc, #8]	@ (8005e00 <HAL_FDCAN_IRQHandler+0x274>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	e004      	b.n	8005e08 <HAL_FDCAN_IRQHandler+0x27c>
 8005dfe:	bf00      	nop
 8005e00:	4000a800 	.word	0x4000a800
 8005e04:	3fcfffff 	.word	0x3fcfffff
 8005e08:	f000 f969 	bl	80060de <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e0e:	0c9b      	lsrs	r3, r3, #18
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d010      	beq.n	8005e3a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1a:	0c9b      	lsrs	r3, r3, #18
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005e2c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e2e:	4b83      	ldr	r3, [pc, #524]	@ (800603c <HAL_FDCAN_IRQHandler+0x4b0>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f95c 	bl	80060f2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e3c:	0c5b      	lsrs	r3, r3, #17
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d015      	beq.n	8005e72 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e48:	0c5b      	lsrs	r3, r3, #17
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00f      	beq.n	8005e72 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005e5a:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e5c:	4b77      	ldr	r3, [pc, #476]	@ (800603c <HAL_FDCAN_IRQHandler+0x4b0>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00d      	beq.n	8005e94 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e7e:	4b70      	ldr	r3, [pc, #448]	@ (8006040 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005e80:	400b      	ands	r3, r1
 8005e82:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e84:	4a6d      	ldr	r2, [pc, #436]	@ (800603c <HAL_FDCAN_IRQHandler+0x4b0>)
 8005e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e88:	0f9b      	lsrs	r3, r3, #30
 8005e8a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005e8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f94d 	bl	800612e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d011      	beq.n	8005ebe <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ea0:	4b67      	ldr	r3, [pc, #412]	@ (8006040 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005ea2:	400b      	ands	r3, r1
 8005ea4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ea6:	4a65      	ldr	r2, [pc, #404]	@ (800603c <HAL_FDCAN_IRQHandler+0x4b0>)
 8005ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eaa:	0f9b      	lsrs	r3, r3, #30
 8005eac:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a60      	ldr	r2, [pc, #384]	@ (8006044 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	f040 80ac 	bne.w	8006022 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f003 0303 	and.w	r3, r3, #3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 80a4 	beq.w	8006022 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eee:	4013      	ands	r3, r2
 8005ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005efc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f06:	4013      	ands	r3, r2
 8005f08:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005f14:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f1e:	4013      	ands	r3, r2
 8005f20:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005f2c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f34:	6a3a      	ldr	r2, [r7, #32]
 8005f36:	4013      	ands	r3, r2
 8005f38:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005f44:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f58:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f6e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005f70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f8e6 	bl	8006144 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d007      	beq.n	8005f8e <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f84:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005f86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f8e6 	bl	800615a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	099b      	lsrs	r3, r3, #6
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d01a      	beq.n	8005fd0 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	099b      	lsrs	r3, r3, #6
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d014      	beq.n	8005fd0 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fac:	0c1b      	lsrs	r3, r3, #16
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fbc:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2240      	movs	r2, #64	@ 0x40
 8005fc4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	6939      	ldr	r1, [r7, #16]
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f8d0 	bl	8006170 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d007      	beq.n	8005fe6 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fdc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005fde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f8d1 	bl	8006188 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00b      	beq.n	8006004 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	6a3a      	ldr	r2, [r7, #32]
 8005ff2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f874 	bl	800611a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006032:	bf00      	nop
 8006034:	3758      	adds	r7, #88	@ 0x58
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	4000a800 	.word	0x4000a800
 8006040:	3fcfffff 	.word	0x3fcfffff
 8006044:	4000a000 	.word	0x4000a000

08006048 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800605e:	b480      	push	{r7}
 8006060:	b083      	sub	sp, #12
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800617c:	bf00      	nop
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ac:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80061b6:	4ba7      	ldr	r3, [pc, #668]	@ (8006454 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	0091      	lsls	r1, r2, #2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6812      	ldr	r2, [r2, #0]
 80061c2:	430b      	orrs	r3, r1
 80061c4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061d0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d8:	041a      	lsls	r2, r3, #16
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	4413      	add	r3, r2
 80061ec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80061f6:	4b97      	ldr	r3, [pc, #604]	@ (8006454 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	0091      	lsls	r1, r2, #2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	430b      	orrs	r3, r1
 8006204:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006210:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006218:	041a      	lsls	r2, r3, #16
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	4413      	add	r3, r2
 800622e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006238:	4b86      	ldr	r3, [pc, #536]	@ (8006454 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800623a:	4013      	ands	r3, r2
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	0091      	lsls	r1, r2, #2
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6812      	ldr	r2, [r2, #0]
 8006244:	430b      	orrs	r3, r1
 8006246:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006252:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625a:	041a      	lsls	r2, r3, #16
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800626e:	fb02 f303 	mul.w	r3, r2, r3
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	4413      	add	r3, r2
 8006276:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006280:	4b74      	ldr	r3, [pc, #464]	@ (8006454 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006282:	4013      	ands	r3, r2
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	0091      	lsls	r1, r2, #2
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6812      	ldr	r2, [r2, #0]
 800628c:	430b      	orrs	r3, r1
 800628e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800629a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062a2:	041a      	lsls	r2, r3, #16
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80062b6:	fb02 f303 	mul.w	r3, r2, r3
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	4413      	add	r3, r2
 80062be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80062c8:	4b62      	ldr	r3, [pc, #392]	@ (8006454 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80062ca:	4013      	ands	r3, r2
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	0091      	lsls	r1, r2, #2
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6812      	ldr	r2, [r2, #0]
 80062d4:	430b      	orrs	r3, r1
 80062d6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80062e2:	fb02 f303 	mul.w	r3, r2, r3
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	4413      	add	r3, r2
 80062ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80062f4:	4b57      	ldr	r3, [pc, #348]	@ (8006454 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80062f6:	4013      	ands	r3, r2
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	0091      	lsls	r1, r2, #2
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	6812      	ldr	r2, [r2, #0]
 8006300:	430b      	orrs	r3, r1
 8006302:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800630e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006316:	041a      	lsls	r2, r3, #16
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	4413      	add	r3, r2
 800632c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006336:	4b47      	ldr	r3, [pc, #284]	@ (8006454 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006338:	4013      	ands	r3, r2
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	0091      	lsls	r1, r2, #2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	430b      	orrs	r3, r1
 8006344:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006350:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006358:	041a      	lsls	r2, r3, #16
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800636c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006374:	061a      	lsls	r2, r3, #24
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006384:	4b34      	ldr	r3, [pc, #208]	@ (8006458 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006386:	4413      	add	r3, r2
 8006388:	009a      	lsls	r2, r3, #2
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	441a      	add	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	441a      	add	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80063ba:	fb01 f303 	mul.w	r3, r1, r3
 80063be:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80063c0:	441a      	add	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80063d2:	fb01 f303 	mul.w	r3, r1, r3
 80063d6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80063d8:	441a      	add	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80063ea:	fb01 f303 	mul.w	r3, r1, r3
 80063ee:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80063f0:	441a      	add	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	441a      	add	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006416:	6879      	ldr	r1, [r7, #4]
 8006418:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800641a:	fb01 f303 	mul.w	r3, r1, r3
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	441a      	add	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006436:	fb01 f303 	mul.w	r3, r1, r3
 800643a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800643c:	441a      	add	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800644a:	4a04      	ldr	r2, [pc, #16]	@ (800645c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d915      	bls.n	800647c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006450:	e006      	b.n	8006460 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006452:	bf00      	nop
 8006454:	ffff0003 	.word	0xffff0003
 8006458:	10002b00 	.word	0x10002b00
 800645c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006466:	f043 0220 	orr.w	r2, r3, #32
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2203      	movs	r2, #3
 8006474:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e010      	b.n	800649e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	e005      	b.n	8006490 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3304      	adds	r3, #4
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	429a      	cmp	r2, r3
 800649a:	d3f3      	bcc.n	8006484 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop

080064ac <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b089      	sub	sp, #36	@ 0x24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10a      	bne.n	80064d8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80064ca:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80064d2:	4313      	orrs	r3, r2
 80064d4:	61fb      	str	r3, [r7, #28]
 80064d6:	e00a      	b.n	80064ee <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80064e0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80064e6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80064e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064ec:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80064f8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80064fe:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006504:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800650c:	4313      	orrs	r3, r2
 800650e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	fb01 f303 	mul.w	r3, r1, r3
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	69fa      	ldr	r2, [r7, #28]
 800652a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	3304      	adds	r3, #4
 8006530:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	3304      	adds	r3, #4
 800653c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800653e:	2300      	movs	r3, #0
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	e020      	b.n	8006586 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	3303      	adds	r3, #3
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	4413      	add	r3, r2
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	3302      	adds	r3, #2
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	440b      	add	r3, r1
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800655c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	3301      	adds	r3, #1
 8006562:	6879      	ldr	r1, [r7, #4]
 8006564:	440b      	add	r3, r1
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800656a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800656c:	6879      	ldr	r1, [r7, #4]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	440a      	add	r2, r1
 8006572:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006574:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	3304      	adds	r3, #4
 800657e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	3304      	adds	r3, #4
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	4a06      	ldr	r2, [pc, #24]	@ (80065a4 <FDCAN_CopyMessageToRAM+0xf8>)
 800658c:	5cd3      	ldrb	r3, [r2, r3]
 800658e:	461a      	mov	r2, r3
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	4293      	cmp	r3, r2
 8006594:	d3d6      	bcc.n	8006544 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8006596:	bf00      	nop
 8006598:	bf00      	nop
 800659a:	3724      	adds	r7, #36	@ 0x24
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	0800d15c 	.word	0x0800d15c

080065a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b089      	sub	sp, #36	@ 0x24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80065b6:	4b86      	ldr	r3, [pc, #536]	@ (80067d0 <HAL_GPIO_Init+0x228>)
 80065b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065ba:	e18c      	b.n	80068d6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	2101      	movs	r1, #1
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	fa01 f303 	lsl.w	r3, r1, r3
 80065c8:	4013      	ands	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 817e 	beq.w	80068d0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f003 0303 	and.w	r3, r3, #3
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d005      	beq.n	80065ec <HAL_GPIO_Init+0x44>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f003 0303 	and.w	r3, r3, #3
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d130      	bne.n	800664e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	2203      	movs	r2, #3
 80065f8:	fa02 f303 	lsl.w	r3, r2, r3
 80065fc:	43db      	mvns	r3, r3
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	4013      	ands	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	fa02 f303 	lsl.w	r3, r2, r3
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	4313      	orrs	r3, r2
 8006614:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006622:	2201      	movs	r2, #1
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	43db      	mvns	r3, r3
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	4013      	ands	r3, r2
 8006630:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	091b      	lsrs	r3, r3, #4
 8006638:	f003 0201 	and.w	r2, r3, #1
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	fa02 f303 	lsl.w	r3, r2, r3
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	4313      	orrs	r3, r2
 8006646:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	2b03      	cmp	r3, #3
 8006658:	d017      	beq.n	800668a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	2203      	movs	r2, #3
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	43db      	mvns	r3, r3
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	4013      	ands	r3, r2
 8006670:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	fa02 f303 	lsl.w	r3, r2, r3
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	4313      	orrs	r3, r2
 8006682:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f003 0303 	and.w	r3, r3, #3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d123      	bne.n	80066de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	08da      	lsrs	r2, r3, #3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	3208      	adds	r2, #8
 800669e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	220f      	movs	r2, #15
 80066ae:	fa02 f303 	lsl.w	r3, r2, r3
 80066b2:	43db      	mvns	r3, r3
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	4013      	ands	r3, r2
 80066b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	691a      	ldr	r2, [r3, #16]
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	08da      	lsrs	r2, r3, #3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3208      	adds	r2, #8
 80066d8:	69b9      	ldr	r1, [r7, #24]
 80066da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	005b      	lsls	r3, r3, #1
 80066e8:	2203      	movs	r2, #3
 80066ea:	fa02 f303 	lsl.w	r3, r2, r3
 80066ee:	43db      	mvns	r3, r3
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	4013      	ands	r3, r2
 80066f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f003 0203 	and.w	r2, r3, #3
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	fa02 f303 	lsl.w	r3, r2, r3
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	4313      	orrs	r3, r2
 800670a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 80d8 	beq.w	80068d0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006720:	4b2c      	ldr	r3, [pc, #176]	@ (80067d4 <HAL_GPIO_Init+0x22c>)
 8006722:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006726:	4a2b      	ldr	r2, [pc, #172]	@ (80067d4 <HAL_GPIO_Init+0x22c>)
 8006728:	f043 0302 	orr.w	r3, r3, #2
 800672c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006730:	4b28      	ldr	r3, [pc, #160]	@ (80067d4 <HAL_GPIO_Init+0x22c>)
 8006732:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800673e:	4a26      	ldr	r2, [pc, #152]	@ (80067d8 <HAL_GPIO_Init+0x230>)
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	089b      	lsrs	r3, r3, #2
 8006744:	3302      	adds	r3, #2
 8006746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800674a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	220f      	movs	r2, #15
 8006756:	fa02 f303 	lsl.w	r3, r2, r3
 800675a:	43db      	mvns	r3, r3
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	4013      	ands	r3, r2
 8006760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a1d      	ldr	r2, [pc, #116]	@ (80067dc <HAL_GPIO_Init+0x234>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d04a      	beq.n	8006800 <HAL_GPIO_Init+0x258>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a1c      	ldr	r2, [pc, #112]	@ (80067e0 <HAL_GPIO_Init+0x238>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d02b      	beq.n	80067ca <HAL_GPIO_Init+0x222>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a1b      	ldr	r2, [pc, #108]	@ (80067e4 <HAL_GPIO_Init+0x23c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d025      	beq.n	80067c6 <HAL_GPIO_Init+0x21e>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a1a      	ldr	r2, [pc, #104]	@ (80067e8 <HAL_GPIO_Init+0x240>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d01f      	beq.n	80067c2 <HAL_GPIO_Init+0x21a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a19      	ldr	r2, [pc, #100]	@ (80067ec <HAL_GPIO_Init+0x244>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d019      	beq.n	80067be <HAL_GPIO_Init+0x216>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a18      	ldr	r2, [pc, #96]	@ (80067f0 <HAL_GPIO_Init+0x248>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d013      	beq.n	80067ba <HAL_GPIO_Init+0x212>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a17      	ldr	r2, [pc, #92]	@ (80067f4 <HAL_GPIO_Init+0x24c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00d      	beq.n	80067b6 <HAL_GPIO_Init+0x20e>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a16      	ldr	r2, [pc, #88]	@ (80067f8 <HAL_GPIO_Init+0x250>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d007      	beq.n	80067b2 <HAL_GPIO_Init+0x20a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a15      	ldr	r2, [pc, #84]	@ (80067fc <HAL_GPIO_Init+0x254>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d101      	bne.n	80067ae <HAL_GPIO_Init+0x206>
 80067aa:	2309      	movs	r3, #9
 80067ac:	e029      	b.n	8006802 <HAL_GPIO_Init+0x25a>
 80067ae:	230a      	movs	r3, #10
 80067b0:	e027      	b.n	8006802 <HAL_GPIO_Init+0x25a>
 80067b2:	2307      	movs	r3, #7
 80067b4:	e025      	b.n	8006802 <HAL_GPIO_Init+0x25a>
 80067b6:	2306      	movs	r3, #6
 80067b8:	e023      	b.n	8006802 <HAL_GPIO_Init+0x25a>
 80067ba:	2305      	movs	r3, #5
 80067bc:	e021      	b.n	8006802 <HAL_GPIO_Init+0x25a>
 80067be:	2304      	movs	r3, #4
 80067c0:	e01f      	b.n	8006802 <HAL_GPIO_Init+0x25a>
 80067c2:	2303      	movs	r3, #3
 80067c4:	e01d      	b.n	8006802 <HAL_GPIO_Init+0x25a>
 80067c6:	2302      	movs	r3, #2
 80067c8:	e01b      	b.n	8006802 <HAL_GPIO_Init+0x25a>
 80067ca:	2301      	movs	r3, #1
 80067cc:	e019      	b.n	8006802 <HAL_GPIO_Init+0x25a>
 80067ce:	bf00      	nop
 80067d0:	58000080 	.word	0x58000080
 80067d4:	58024400 	.word	0x58024400
 80067d8:	58000400 	.word	0x58000400
 80067dc:	58020000 	.word	0x58020000
 80067e0:	58020400 	.word	0x58020400
 80067e4:	58020800 	.word	0x58020800
 80067e8:	58020c00 	.word	0x58020c00
 80067ec:	58021000 	.word	0x58021000
 80067f0:	58021400 	.word	0x58021400
 80067f4:	58021800 	.word	0x58021800
 80067f8:	58021c00 	.word	0x58021c00
 80067fc:	58022400 	.word	0x58022400
 8006800:	2300      	movs	r3, #0
 8006802:	69fa      	ldr	r2, [r7, #28]
 8006804:	f002 0203 	and.w	r2, r2, #3
 8006808:	0092      	lsls	r2, r2, #2
 800680a:	4093      	lsls	r3, r2
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	4313      	orrs	r3, r2
 8006810:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006812:	4938      	ldr	r1, [pc, #224]	@ (80068f4 <HAL_GPIO_Init+0x34c>)
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	089b      	lsrs	r3, r3, #2
 8006818:	3302      	adds	r3, #2
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	43db      	mvns	r3, r3
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	4013      	ands	r3, r2
 8006830:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	4313      	orrs	r3, r2
 8006844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006846:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800684e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	43db      	mvns	r3, r3
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	4013      	ands	r3, r2
 800685e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	4313      	orrs	r3, r2
 8006872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006874:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	43db      	mvns	r3, r3
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	4013      	ands	r3, r2
 800688a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	4313      	orrs	r3, r2
 800689e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	43db      	mvns	r3, r3
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	4013      	ands	r3, r2
 80068b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	3301      	adds	r3, #1
 80068d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	fa22 f303 	lsr.w	r3, r2, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f47f ae6b 	bne.w	80065bc <HAL_GPIO_Init+0x14>
  }
}
 80068e6:	bf00      	nop
 80068e8:	bf00      	nop
 80068ea:	3724      	adds	r7, #36	@ 0x24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	58000400 	.word	0x58000400

080068f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691a      	ldr	r2, [r3, #16]
 8006908:	887b      	ldrh	r3, [r7, #2]
 800690a:	4013      	ands	r3, r2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006910:	2301      	movs	r3, #1
 8006912:	73fb      	strb	r3, [r7, #15]
 8006914:	e001      	b.n	800691a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006916:	2300      	movs	r3, #0
 8006918:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800691a:	7bfb      	ldrb	r3, [r7, #15]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	807b      	strh	r3, [r7, #2]
 8006934:	4613      	mov	r3, r2
 8006936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006938:	787b      	ldrb	r3, [r7, #1]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800693e:	887a      	ldrh	r2, [r7, #2]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006944:	e003      	b.n	800694e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006946:	887b      	ldrh	r3, [r7, #2]
 8006948:	041a      	lsls	r2, r3, #16
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	619a      	str	r2, [r3, #24]
}
 800694e:	bf00      	nop
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
	...

0800695c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006964:	4b19      	ldr	r3, [pc, #100]	@ (80069cc <HAL_PWREx_ConfigSupply+0x70>)
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b04      	cmp	r3, #4
 800696e:	d00a      	beq.n	8006986 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006970:	4b16      	ldr	r3, [pc, #88]	@ (80069cc <HAL_PWREx_ConfigSupply+0x70>)
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	429a      	cmp	r2, r3
 800697c:	d001      	beq.n	8006982 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e01f      	b.n	80069c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	e01d      	b.n	80069c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006986:	4b11      	ldr	r3, [pc, #68]	@ (80069cc <HAL_PWREx_ConfigSupply+0x70>)
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f023 0207 	bic.w	r2, r3, #7
 800698e:	490f      	ldr	r1, [pc, #60]	@ (80069cc <HAL_PWREx_ConfigSupply+0x70>)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4313      	orrs	r3, r2
 8006994:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006996:	f7fc fb5b 	bl	8003050 <HAL_GetTick>
 800699a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800699c:	e009      	b.n	80069b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800699e:	f7fc fb57 	bl	8003050 <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069ac:	d901      	bls.n	80069b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e007      	b.n	80069c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069b2:	4b06      	ldr	r3, [pc, #24]	@ (80069cc <HAL_PWREx_ConfigSupply+0x70>)
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069be:	d1ee      	bne.n	800699e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	58024800 	.word	0x58024800

080069d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08c      	sub	sp, #48	@ 0x30
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e3c8      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 8087 	beq.w	8006afe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069f0:	4b88      	ldr	r3, [pc, #544]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069fa:	4b86      	ldr	r3, [pc, #536]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 80069fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a02:	2b10      	cmp	r3, #16
 8006a04:	d007      	beq.n	8006a16 <HAL_RCC_OscConfig+0x46>
 8006a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a08:	2b18      	cmp	r3, #24
 8006a0a:	d110      	bne.n	8006a2e <HAL_RCC_OscConfig+0x5e>
 8006a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0e:	f003 0303 	and.w	r3, r3, #3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d10b      	bne.n	8006a2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a16:	4b7f      	ldr	r3, [pc, #508]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d06c      	beq.n	8006afc <HAL_RCC_OscConfig+0x12c>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d168      	bne.n	8006afc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e3a2      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a36:	d106      	bne.n	8006a46 <HAL_RCC_OscConfig+0x76>
 8006a38:	4b76      	ldr	r3, [pc, #472]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a75      	ldr	r2, [pc, #468]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006a3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	e02e      	b.n	8006aa4 <HAL_RCC_OscConfig+0xd4>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10c      	bne.n	8006a68 <HAL_RCC_OscConfig+0x98>
 8006a4e:	4b71      	ldr	r3, [pc, #452]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a70      	ldr	r2, [pc, #448]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006a54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a58:	6013      	str	r3, [r2, #0]
 8006a5a:	4b6e      	ldr	r3, [pc, #440]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a6d      	ldr	r2, [pc, #436]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006a60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	e01d      	b.n	8006aa4 <HAL_RCC_OscConfig+0xd4>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a70:	d10c      	bne.n	8006a8c <HAL_RCC_OscConfig+0xbc>
 8006a72:	4b68      	ldr	r3, [pc, #416]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a67      	ldr	r2, [pc, #412]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006a78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	4b65      	ldr	r3, [pc, #404]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a64      	ldr	r2, [pc, #400]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006a84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	e00b      	b.n	8006aa4 <HAL_RCC_OscConfig+0xd4>
 8006a8c:	4b61      	ldr	r3, [pc, #388]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a60      	ldr	r2, [pc, #384]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006a92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	4b5e      	ldr	r3, [pc, #376]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006a9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d013      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aac:	f7fc fad0 	bl	8003050 <HAL_GetTick>
 8006ab0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ab4:	f7fc facc 	bl	8003050 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b64      	cmp	r3, #100	@ 0x64
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e356      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ac6:	4b53      	ldr	r3, [pc, #332]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0f0      	beq.n	8006ab4 <HAL_RCC_OscConfig+0xe4>
 8006ad2:	e014      	b.n	8006afe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad4:	f7fc fabc 	bl	8003050 <HAL_GetTick>
 8006ad8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ada:	e008      	b.n	8006aee <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006adc:	f7fc fab8 	bl	8003050 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b64      	cmp	r3, #100	@ 0x64
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e342      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006aee:	4b49      	ldr	r3, [pc, #292]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1f0      	bne.n	8006adc <HAL_RCC_OscConfig+0x10c>
 8006afa:	e000      	b.n	8006afe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 808c 	beq.w	8006c24 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b0c:	4b41      	ldr	r3, [pc, #260]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b16:	4b3f      	ldr	r3, [pc, #252]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d007      	beq.n	8006b32 <HAL_RCC_OscConfig+0x162>
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	2b18      	cmp	r3, #24
 8006b26:	d137      	bne.n	8006b98 <HAL_RCC_OscConfig+0x1c8>
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	f003 0303 	and.w	r3, r3, #3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d132      	bne.n	8006b98 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b32:	4b38      	ldr	r3, [pc, #224]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d005      	beq.n	8006b4a <HAL_RCC_OscConfig+0x17a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e314      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b4a:	4b32      	ldr	r3, [pc, #200]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f023 0219 	bic.w	r2, r3, #25
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	492f      	ldr	r1, [pc, #188]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5c:	f7fc fa78 	bl	8003050 <HAL_GetTick>
 8006b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b64:	f7fc fa74 	bl	8003050 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e2fe      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b76:	4b27      	ldr	r3, [pc, #156]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0304 	and.w	r3, r3, #4
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0f0      	beq.n	8006b64 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b82:	4b24      	ldr	r3, [pc, #144]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	061b      	lsls	r3, r3, #24
 8006b90:	4920      	ldr	r1, [pc, #128]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b96:	e045      	b.n	8006c24 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d026      	beq.n	8006bee <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f023 0219 	bic.w	r2, r3, #25
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	4919      	ldr	r1, [pc, #100]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb2:	f7fc fa4d 	bl	8003050 <HAL_GetTick>
 8006bb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bb8:	e008      	b.n	8006bcc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bba:	f7fc fa49 	bl	8003050 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d901      	bls.n	8006bcc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e2d3      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bcc:	4b11      	ldr	r3, [pc, #68]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d0f0      	beq.n	8006bba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	061b      	lsls	r3, r3, #24
 8006be6:	490b      	ldr	r1, [pc, #44]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	604b      	str	r3, [r1, #4]
 8006bec:	e01a      	b.n	8006c24 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bee:	4b09      	ldr	r3, [pc, #36]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a08      	ldr	r2, [pc, #32]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006bf4:	f023 0301 	bic.w	r3, r3, #1
 8006bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bfa:	f7fc fa29 	bl	8003050 <HAL_GetTick>
 8006bfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c00:	e00a      	b.n	8006c18 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c02:	f7fc fa25 	bl	8003050 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d903      	bls.n	8006c18 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e2af      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
 8006c14:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c18:	4b96      	ldr	r3, [pc, #600]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1ee      	bne.n	8006c02 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0310 	and.w	r3, r3, #16
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d06a      	beq.n	8006d06 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c30:	4b90      	ldr	r3, [pc, #576]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c38:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c3a:	4b8e      	ldr	r3, [pc, #568]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	2b08      	cmp	r3, #8
 8006c44:	d007      	beq.n	8006c56 <HAL_RCC_OscConfig+0x286>
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	2b18      	cmp	r3, #24
 8006c4a:	d11b      	bne.n	8006c84 <HAL_RCC_OscConfig+0x2b4>
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f003 0303 	and.w	r3, r3, #3
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d116      	bne.n	8006c84 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c56:	4b87      	ldr	r3, [pc, #540]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d005      	beq.n	8006c6e <HAL_RCC_OscConfig+0x29e>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	2b80      	cmp	r3, #128	@ 0x80
 8006c68:	d001      	beq.n	8006c6e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e282      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c6e:	4b81      	ldr	r3, [pc, #516]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	061b      	lsls	r3, r3, #24
 8006c7c:	497d      	ldr	r1, [pc, #500]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c82:	e040      	b.n	8006d06 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d023      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c8c:	4b79      	ldr	r3, [pc, #484]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a78      	ldr	r2, [pc, #480]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c98:	f7fc f9da 	bl	8003050 <HAL_GetTick>
 8006c9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006ca0:	f7fc f9d6 	bl	8003050 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e260      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006cb2:	4b70      	ldr	r3, [pc, #448]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0f0      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cbe:	4b6d      	ldr	r3, [pc, #436]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	061b      	lsls	r3, r3, #24
 8006ccc:	4969      	ldr	r1, [pc, #420]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60cb      	str	r3, [r1, #12]
 8006cd2:	e018      	b.n	8006d06 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006cd4:	4b67      	ldr	r3, [pc, #412]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a66      	ldr	r2, [pc, #408]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006cda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce0:	f7fc f9b6 	bl	8003050 <HAL_GetTick>
 8006ce4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ce6:	e008      	b.n	8006cfa <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006ce8:	f7fc f9b2 	bl	8003050 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e23c      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006cfa:	4b5e      	ldr	r3, [pc, #376]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1f0      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0308 	and.w	r3, r3, #8
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d036      	beq.n	8006d80 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d019      	beq.n	8006d4e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d1a:	4b56      	ldr	r3, [pc, #344]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d1e:	4a55      	ldr	r2, [pc, #340]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006d20:	f043 0301 	orr.w	r3, r3, #1
 8006d24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d26:	f7fc f993 	bl	8003050 <HAL_GetTick>
 8006d2a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d2c:	e008      	b.n	8006d40 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d2e:	f7fc f98f 	bl	8003050 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d901      	bls.n	8006d40 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e219      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d40:	4b4c      	ldr	r3, [pc, #304]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d0f0      	beq.n	8006d2e <HAL_RCC_OscConfig+0x35e>
 8006d4c:	e018      	b.n	8006d80 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d4e:	4b49      	ldr	r3, [pc, #292]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d52:	4a48      	ldr	r2, [pc, #288]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006d54:	f023 0301 	bic.w	r3, r3, #1
 8006d58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d5a:	f7fc f979 	bl	8003050 <HAL_GetTick>
 8006d5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d60:	e008      	b.n	8006d74 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d62:	f7fc f975 	bl	8003050 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d901      	bls.n	8006d74 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e1ff      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d74:	4b3f      	ldr	r3, [pc, #252]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1f0      	bne.n	8006d62 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d036      	beq.n	8006dfa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d019      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d94:	4b37      	ldr	r3, [pc, #220]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a36      	ldr	r2, [pc, #216]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006d9a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006d9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006da0:	f7fc f956 	bl	8003050 <HAL_GetTick>
 8006da4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006da6:	e008      	b.n	8006dba <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006da8:	f7fc f952 	bl	8003050 <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d901      	bls.n	8006dba <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e1dc      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006dba:	4b2e      	ldr	r3, [pc, #184]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0f0      	beq.n	8006da8 <HAL_RCC_OscConfig+0x3d8>
 8006dc6:	e018      	b.n	8006dfa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a29      	ldr	r2, [pc, #164]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006dce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006dd4:	f7fc f93c 	bl	8003050 <HAL_GetTick>
 8006dd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dda:	e008      	b.n	8006dee <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ddc:	f7fc f938 	bl	8003050 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e1c2      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dee:	4b21      	ldr	r3, [pc, #132]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1f0      	bne.n	8006ddc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0304 	and.w	r3, r3, #4
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 8086 	beq.w	8006f14 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e08:	4b1b      	ldr	r3, [pc, #108]	@ (8006e78 <HAL_RCC_OscConfig+0x4a8>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8006e78 <HAL_RCC_OscConfig+0x4a8>)
 8006e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e14:	f7fc f91c 	bl	8003050 <HAL_GetTick>
 8006e18:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e1c:	f7fc f918 	bl	8003050 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b64      	cmp	r3, #100	@ 0x64
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e1a2      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e2e:	4b12      	ldr	r3, [pc, #72]	@ (8006e78 <HAL_RCC_OscConfig+0x4a8>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0f0      	beq.n	8006e1c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d106      	bne.n	8006e50 <HAL_RCC_OscConfig+0x480>
 8006e42:	4b0c      	ldr	r3, [pc, #48]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e46:	4a0b      	ldr	r2, [pc, #44]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006e48:	f043 0301 	orr.w	r3, r3, #1
 8006e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e4e:	e032      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4e6>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d111      	bne.n	8006e7c <HAL_RCC_OscConfig+0x4ac>
 8006e58:	4b06      	ldr	r3, [pc, #24]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e5c:	4a05      	ldr	r2, [pc, #20]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006e5e:	f023 0301 	bic.w	r3, r3, #1
 8006e62:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e64:	4b03      	ldr	r3, [pc, #12]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e68:	4a02      	ldr	r2, [pc, #8]	@ (8006e74 <HAL_RCC_OscConfig+0x4a4>)
 8006e6a:	f023 0304 	bic.w	r3, r3, #4
 8006e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e70:	e021      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4e6>
 8006e72:	bf00      	nop
 8006e74:	58024400 	.word	0x58024400
 8006e78:	58024800 	.word	0x58024800
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	2b05      	cmp	r3, #5
 8006e82:	d10c      	bne.n	8006e9e <HAL_RCC_OscConfig+0x4ce>
 8006e84:	4b83      	ldr	r3, [pc, #524]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e88:	4a82      	ldr	r2, [pc, #520]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006e8a:	f043 0304 	orr.w	r3, r3, #4
 8006e8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e90:	4b80      	ldr	r3, [pc, #512]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e94:	4a7f      	ldr	r2, [pc, #508]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006e96:	f043 0301 	orr.w	r3, r3, #1
 8006e9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e9c:	e00b      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4e6>
 8006e9e:	4b7d      	ldr	r3, [pc, #500]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ea2:	4a7c      	ldr	r2, [pc, #496]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006ea4:	f023 0301 	bic.w	r3, r3, #1
 8006ea8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006eaa:	4b7a      	ldr	r3, [pc, #488]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eae:	4a79      	ldr	r2, [pc, #484]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006eb0:	f023 0304 	bic.w	r3, r3, #4
 8006eb4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d015      	beq.n	8006eea <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ebe:	f7fc f8c7 	bl	8003050 <HAL_GetTick>
 8006ec2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ec4:	e00a      	b.n	8006edc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ec6:	f7fc f8c3 	bl	8003050 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d901      	bls.n	8006edc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e14b      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006edc:	4b6d      	ldr	r3, [pc, #436]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0ee      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x4f6>
 8006ee8:	e014      	b.n	8006f14 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eea:	f7fc f8b1 	bl	8003050 <HAL_GetTick>
 8006eee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ef0:	e00a      	b.n	8006f08 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ef2:	f7fc f8ad 	bl	8003050 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d901      	bls.n	8006f08 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e135      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f08:	4b62      	ldr	r3, [pc, #392]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1ee      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 812a 	beq.w	8007172 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006f1e:	4b5d      	ldr	r3, [pc, #372]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f26:	2b18      	cmp	r3, #24
 8006f28:	f000 80ba 	beq.w	80070a0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	f040 8095 	bne.w	8007060 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f36:	4b57      	ldr	r3, [pc, #348]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a56      	ldr	r2, [pc, #344]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006f3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f42:	f7fc f885 	bl	8003050 <HAL_GetTick>
 8006f46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f48:	e008      	b.n	8006f5c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f4a:	f7fc f881 	bl	8003050 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e10b      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f5c:	4b4d      	ldr	r3, [pc, #308]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1f0      	bne.n	8006f4a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f68:	4b4a      	ldr	r3, [pc, #296]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006f6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f6c:	4b4a      	ldr	r3, [pc, #296]	@ (8007098 <HAL_RCC_OscConfig+0x6c8>)
 8006f6e:	4013      	ands	r3, r2
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006f78:	0112      	lsls	r2, r2, #4
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	4945      	ldr	r1, [pc, #276]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f86:	3b01      	subs	r3, #1
 8006f88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f90:	3b01      	subs	r3, #1
 8006f92:	025b      	lsls	r3, r3, #9
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	041b      	lsls	r3, r3, #16
 8006fa0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006faa:	3b01      	subs	r3, #1
 8006fac:	061b      	lsls	r3, r3, #24
 8006fae:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006fb2:	4938      	ldr	r1, [pc, #224]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006fb8:	4b36      	ldr	r3, [pc, #216]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	4a35      	ldr	r2, [pc, #212]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006fbe:	f023 0301 	bic.w	r3, r3, #1
 8006fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006fc4:	4b33      	ldr	r3, [pc, #204]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006fc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fc8:	4b34      	ldr	r3, [pc, #208]	@ (800709c <HAL_RCC_OscConfig+0x6cc>)
 8006fca:	4013      	ands	r3, r2
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006fd0:	00d2      	lsls	r2, r2, #3
 8006fd2:	4930      	ldr	r1, [pc, #192]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fdc:	f023 020c 	bic.w	r2, r3, #12
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe4:	492b      	ldr	r1, [pc, #172]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006fea:	4b2a      	ldr	r3, [pc, #168]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fee:	f023 0202 	bic.w	r2, r3, #2
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff6:	4927      	ldr	r1, [pc, #156]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ffc:	4b25      	ldr	r3, [pc, #148]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8006ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007000:	4a24      	ldr	r2, [pc, #144]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8007002:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007006:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007008:	4b22      	ldr	r3, [pc, #136]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 800700a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700c:	4a21      	ldr	r2, [pc, #132]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 800700e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007012:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007014:	4b1f      	ldr	r3, [pc, #124]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8007016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007018:	4a1e      	ldr	r2, [pc, #120]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 800701a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800701e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007020:	4b1c      	ldr	r3, [pc, #112]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8007022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007024:	4a1b      	ldr	r2, [pc, #108]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8007026:	f043 0301 	orr.w	r3, r3, #1
 800702a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800702c:	4b19      	ldr	r3, [pc, #100]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a18      	ldr	r2, [pc, #96]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8007032:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007038:	f7fc f80a 	bl	8003050 <HAL_GetTick>
 800703c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800703e:	e008      	b.n	8007052 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007040:	f7fc f806 	bl	8003050 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b02      	cmp	r3, #2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e090      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007052:	4b10      	ldr	r3, [pc, #64]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0f0      	beq.n	8007040 <HAL_RCC_OscConfig+0x670>
 800705e:	e088      	b.n	8007172 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007060:	4b0c      	ldr	r3, [pc, #48]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a0b      	ldr	r2, [pc, #44]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8007066:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800706a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706c:	f7fb fff0 	bl	8003050 <HAL_GetTick>
 8007070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007072:	e008      	b.n	8007086 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007074:	f7fb ffec 	bl	8003050 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b02      	cmp	r3, #2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e076      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007086:	4b03      	ldr	r3, [pc, #12]	@ (8007094 <HAL_RCC_OscConfig+0x6c4>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1f0      	bne.n	8007074 <HAL_RCC_OscConfig+0x6a4>
 8007092:	e06e      	b.n	8007172 <HAL_RCC_OscConfig+0x7a2>
 8007094:	58024400 	.word	0x58024400
 8007098:	fffffc0c 	.word	0xfffffc0c
 800709c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80070a0:	4b36      	ldr	r3, [pc, #216]	@ (800717c <HAL_RCC_OscConfig+0x7ac>)
 80070a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80070a6:	4b35      	ldr	r3, [pc, #212]	@ (800717c <HAL_RCC_OscConfig+0x7ac>)
 80070a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d031      	beq.n	8007118 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	f003 0203 	and.w	r2, r3, #3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070be:	429a      	cmp	r2, r3
 80070c0:	d12a      	bne.n	8007118 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	091b      	lsrs	r3, r3, #4
 80070c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d122      	bne.n	8007118 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070de:	429a      	cmp	r2, r3
 80070e0:	d11a      	bne.n	8007118 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	0a5b      	lsrs	r3, r3, #9
 80070e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d111      	bne.n	8007118 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	0c1b      	lsrs	r3, r3, #16
 80070f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007100:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007102:	429a      	cmp	r2, r3
 8007104:	d108      	bne.n	8007118 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	0e1b      	lsrs	r3, r3, #24
 800710a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007112:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007114:	429a      	cmp	r2, r3
 8007116:	d001      	beq.n	800711c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e02b      	b.n	8007174 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800711c:	4b17      	ldr	r3, [pc, #92]	@ (800717c <HAL_RCC_OscConfig+0x7ac>)
 800711e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007120:	08db      	lsrs	r3, r3, #3
 8007122:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007126:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	429a      	cmp	r2, r3
 8007130:	d01f      	beq.n	8007172 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007132:	4b12      	ldr	r3, [pc, #72]	@ (800717c <HAL_RCC_OscConfig+0x7ac>)
 8007134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007136:	4a11      	ldr	r2, [pc, #68]	@ (800717c <HAL_RCC_OscConfig+0x7ac>)
 8007138:	f023 0301 	bic.w	r3, r3, #1
 800713c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800713e:	f7fb ff87 	bl	8003050 <HAL_GetTick>
 8007142:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007144:	bf00      	nop
 8007146:	f7fb ff83 	bl	8003050 <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714e:	4293      	cmp	r3, r2
 8007150:	d0f9      	beq.n	8007146 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007152:	4b0a      	ldr	r3, [pc, #40]	@ (800717c <HAL_RCC_OscConfig+0x7ac>)
 8007154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007156:	4b0a      	ldr	r3, [pc, #40]	@ (8007180 <HAL_RCC_OscConfig+0x7b0>)
 8007158:	4013      	ands	r3, r2
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800715e:	00d2      	lsls	r2, r2, #3
 8007160:	4906      	ldr	r1, [pc, #24]	@ (800717c <HAL_RCC_OscConfig+0x7ac>)
 8007162:	4313      	orrs	r3, r2
 8007164:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007166:	4b05      	ldr	r3, [pc, #20]	@ (800717c <HAL_RCC_OscConfig+0x7ac>)
 8007168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716a:	4a04      	ldr	r2, [pc, #16]	@ (800717c <HAL_RCC_OscConfig+0x7ac>)
 800716c:	f043 0301 	orr.w	r3, r3, #1
 8007170:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3730      	adds	r7, #48	@ 0x30
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	58024400 	.word	0x58024400
 8007180:	ffff0007 	.word	0xffff0007

08007184 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e19c      	b.n	80074d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007198:	4b8a      	ldr	r3, [pc, #552]	@ (80073c4 <HAL_RCC_ClockConfig+0x240>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 030f 	and.w	r3, r3, #15
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d910      	bls.n	80071c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071a6:	4b87      	ldr	r3, [pc, #540]	@ (80073c4 <HAL_RCC_ClockConfig+0x240>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f023 020f 	bic.w	r2, r3, #15
 80071ae:	4985      	ldr	r1, [pc, #532]	@ (80073c4 <HAL_RCC_ClockConfig+0x240>)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071b6:	4b83      	ldr	r3, [pc, #524]	@ (80073c4 <HAL_RCC_ClockConfig+0x240>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d001      	beq.n	80071c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e184      	b.n	80074d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d010      	beq.n	80071f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691a      	ldr	r2, [r3, #16]
 80071d8:	4b7b      	ldr	r3, [pc, #492]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d908      	bls.n	80071f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071e4:	4b78      	ldr	r3, [pc, #480]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	4975      	ldr	r1, [pc, #468]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d010      	beq.n	8007224 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	695a      	ldr	r2, [r3, #20]
 8007206:	4b70      	ldr	r3, [pc, #448]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800720e:	429a      	cmp	r2, r3
 8007210:	d908      	bls.n	8007224 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007212:	4b6d      	ldr	r3, [pc, #436]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	496a      	ldr	r1, [pc, #424]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007220:	4313      	orrs	r3, r2
 8007222:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0310 	and.w	r3, r3, #16
 800722c:	2b00      	cmp	r3, #0
 800722e:	d010      	beq.n	8007252 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	699a      	ldr	r2, [r3, #24]
 8007234:	4b64      	ldr	r3, [pc, #400]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800723c:	429a      	cmp	r2, r3
 800723e:	d908      	bls.n	8007252 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007240:	4b61      	ldr	r3, [pc, #388]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	495e      	ldr	r1, [pc, #376]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 800724e:	4313      	orrs	r3, r2
 8007250:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b00      	cmp	r3, #0
 800725c:	d010      	beq.n	8007280 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	69da      	ldr	r2, [r3, #28]
 8007262:	4b59      	ldr	r3, [pc, #356]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800726a:	429a      	cmp	r2, r3
 800726c:	d908      	bls.n	8007280 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800726e:	4b56      	ldr	r3, [pc, #344]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	4953      	ldr	r1, [pc, #332]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 800727c:	4313      	orrs	r3, r2
 800727e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d010      	beq.n	80072ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	4b4d      	ldr	r3, [pc, #308]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	f003 030f 	and.w	r3, r3, #15
 8007298:	429a      	cmp	r2, r3
 800729a:	d908      	bls.n	80072ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800729c:	4b4a      	ldr	r3, [pc, #296]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	f023 020f 	bic.w	r2, r3, #15
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	4947      	ldr	r1, [pc, #284]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d055      	beq.n	8007366 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80072ba:	4b43      	ldr	r3, [pc, #268]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	4940      	ldr	r1, [pc, #256]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d107      	bne.n	80072e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072d4:	4b3c      	ldr	r3, [pc, #240]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d121      	bne.n	8007324 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e0f6      	b.n	80074d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	2b03      	cmp	r3, #3
 80072ea:	d107      	bne.n	80072fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072ec:	4b36      	ldr	r3, [pc, #216]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d115      	bne.n	8007324 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e0ea      	b.n	80074d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d107      	bne.n	8007314 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007304:	4b30      	ldr	r3, [pc, #192]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800730c:	2b00      	cmp	r3, #0
 800730e:	d109      	bne.n	8007324 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e0de      	b.n	80074d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007314:	4b2c      	ldr	r3, [pc, #176]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0304 	and.w	r3, r3, #4
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e0d6      	b.n	80074d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007324:	4b28      	ldr	r3, [pc, #160]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	f023 0207 	bic.w	r2, r3, #7
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	4925      	ldr	r1, [pc, #148]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007332:	4313      	orrs	r3, r2
 8007334:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007336:	f7fb fe8b 	bl	8003050 <HAL_GetTick>
 800733a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800733c:	e00a      	b.n	8007354 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800733e:	f7fb fe87 	bl	8003050 <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800734c:	4293      	cmp	r3, r2
 800734e:	d901      	bls.n	8007354 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e0be      	b.n	80074d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007354:	4b1c      	ldr	r3, [pc, #112]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	429a      	cmp	r2, r3
 8007364:	d1eb      	bne.n	800733e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d010      	beq.n	8007394 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	4b14      	ldr	r3, [pc, #80]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	429a      	cmp	r2, r3
 8007380:	d208      	bcs.n	8007394 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007382:	4b11      	ldr	r3, [pc, #68]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	f023 020f 	bic.w	r2, r3, #15
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	490e      	ldr	r1, [pc, #56]	@ (80073c8 <HAL_RCC_ClockConfig+0x244>)
 8007390:	4313      	orrs	r3, r2
 8007392:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007394:	4b0b      	ldr	r3, [pc, #44]	@ (80073c4 <HAL_RCC_ClockConfig+0x240>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 030f 	and.w	r3, r3, #15
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d214      	bcs.n	80073cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073a2:	4b08      	ldr	r3, [pc, #32]	@ (80073c4 <HAL_RCC_ClockConfig+0x240>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f023 020f 	bic.w	r2, r3, #15
 80073aa:	4906      	ldr	r1, [pc, #24]	@ (80073c4 <HAL_RCC_ClockConfig+0x240>)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073b2:	4b04      	ldr	r3, [pc, #16]	@ (80073c4 <HAL_RCC_ClockConfig+0x240>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 030f 	and.w	r3, r3, #15
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d005      	beq.n	80073cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e086      	b.n	80074d2 <HAL_RCC_ClockConfig+0x34e>
 80073c4:	52002000 	.word	0x52002000
 80073c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0304 	and.w	r3, r3, #4
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d010      	beq.n	80073fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691a      	ldr	r2, [r3, #16]
 80073dc:	4b3f      	ldr	r3, [pc, #252]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d208      	bcs.n	80073fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073e8:	4b3c      	ldr	r3, [pc, #240]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	4939      	ldr	r1, [pc, #228]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d010      	beq.n	8007428 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	695a      	ldr	r2, [r3, #20]
 800740a:	4b34      	ldr	r3, [pc, #208]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007412:	429a      	cmp	r2, r3
 8007414:	d208      	bcs.n	8007428 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007416:	4b31      	ldr	r3, [pc, #196]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	492e      	ldr	r1, [pc, #184]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 8007424:	4313      	orrs	r3, r2
 8007426:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0310 	and.w	r3, r3, #16
 8007430:	2b00      	cmp	r3, #0
 8007432:	d010      	beq.n	8007456 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	699a      	ldr	r2, [r3, #24]
 8007438:	4b28      	ldr	r3, [pc, #160]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007440:	429a      	cmp	r2, r3
 8007442:	d208      	bcs.n	8007456 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007444:	4b25      	ldr	r3, [pc, #148]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	4922      	ldr	r1, [pc, #136]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 8007452:	4313      	orrs	r3, r2
 8007454:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b00      	cmp	r3, #0
 8007460:	d010      	beq.n	8007484 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69da      	ldr	r2, [r3, #28]
 8007466:	4b1d      	ldr	r3, [pc, #116]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800746e:	429a      	cmp	r2, r3
 8007470:	d208      	bcs.n	8007484 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007472:	4b1a      	ldr	r3, [pc, #104]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	4917      	ldr	r1, [pc, #92]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 8007480:	4313      	orrs	r3, r2
 8007482:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007484:	f000 f834 	bl	80074f0 <HAL_RCC_GetSysClockFreq>
 8007488:	4602      	mov	r2, r0
 800748a:	4b14      	ldr	r3, [pc, #80]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	0a1b      	lsrs	r3, r3, #8
 8007490:	f003 030f 	and.w	r3, r3, #15
 8007494:	4912      	ldr	r1, [pc, #72]	@ (80074e0 <HAL_RCC_ClockConfig+0x35c>)
 8007496:	5ccb      	ldrb	r3, [r1, r3]
 8007498:	f003 031f 	and.w	r3, r3, #31
 800749c:	fa22 f303 	lsr.w	r3, r2, r3
 80074a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074a2:	4b0e      	ldr	r3, [pc, #56]	@ (80074dc <HAL_RCC_ClockConfig+0x358>)
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	f003 030f 	and.w	r3, r3, #15
 80074aa:	4a0d      	ldr	r2, [pc, #52]	@ (80074e0 <HAL_RCC_ClockConfig+0x35c>)
 80074ac:	5cd3      	ldrb	r3, [r2, r3]
 80074ae:	f003 031f 	and.w	r3, r3, #31
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	fa22 f303 	lsr.w	r3, r2, r3
 80074b8:	4a0a      	ldr	r2, [pc, #40]	@ (80074e4 <HAL_RCC_ClockConfig+0x360>)
 80074ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80074bc:	4a0a      	ldr	r2, [pc, #40]	@ (80074e8 <HAL_RCC_ClockConfig+0x364>)
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80074c2:	4b0a      	ldr	r3, [pc, #40]	@ (80074ec <HAL_RCC_ClockConfig+0x368>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fb fd78 	bl	8002fbc <HAL_InitTick>
 80074cc:	4603      	mov	r3, r0
 80074ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	58024400 	.word	0x58024400
 80074e0:	0800d14c 	.word	0x0800d14c
 80074e4:	24000010 	.word	0x24000010
 80074e8:	2400000c 	.word	0x2400000c
 80074ec:	24000014 	.word	0x24000014

080074f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b089      	sub	sp, #36	@ 0x24
 80074f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074f6:	4bb3      	ldr	r3, [pc, #716]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074fe:	2b18      	cmp	r3, #24
 8007500:	f200 8155 	bhi.w	80077ae <HAL_RCC_GetSysClockFreq+0x2be>
 8007504:	a201      	add	r2, pc, #4	@ (adr r2, 800750c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	08007571 	.word	0x08007571
 8007510:	080077af 	.word	0x080077af
 8007514:	080077af 	.word	0x080077af
 8007518:	080077af 	.word	0x080077af
 800751c:	080077af 	.word	0x080077af
 8007520:	080077af 	.word	0x080077af
 8007524:	080077af 	.word	0x080077af
 8007528:	080077af 	.word	0x080077af
 800752c:	08007597 	.word	0x08007597
 8007530:	080077af 	.word	0x080077af
 8007534:	080077af 	.word	0x080077af
 8007538:	080077af 	.word	0x080077af
 800753c:	080077af 	.word	0x080077af
 8007540:	080077af 	.word	0x080077af
 8007544:	080077af 	.word	0x080077af
 8007548:	080077af 	.word	0x080077af
 800754c:	0800759d 	.word	0x0800759d
 8007550:	080077af 	.word	0x080077af
 8007554:	080077af 	.word	0x080077af
 8007558:	080077af 	.word	0x080077af
 800755c:	080077af 	.word	0x080077af
 8007560:	080077af 	.word	0x080077af
 8007564:	080077af 	.word	0x080077af
 8007568:	080077af 	.word	0x080077af
 800756c:	080075a3 	.word	0x080075a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007570:	4b94      	ldr	r3, [pc, #592]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0320 	and.w	r3, r3, #32
 8007578:	2b00      	cmp	r3, #0
 800757a:	d009      	beq.n	8007590 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800757c:	4b91      	ldr	r3, [pc, #580]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	08db      	lsrs	r3, r3, #3
 8007582:	f003 0303 	and.w	r3, r3, #3
 8007586:	4a90      	ldr	r2, [pc, #576]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007588:	fa22 f303 	lsr.w	r3, r2, r3
 800758c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800758e:	e111      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007590:	4b8d      	ldr	r3, [pc, #564]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007592:	61bb      	str	r3, [r7, #24]
      break;
 8007594:	e10e      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007596:	4b8d      	ldr	r3, [pc, #564]	@ (80077cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007598:	61bb      	str	r3, [r7, #24]
      break;
 800759a:	e10b      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800759c:	4b8c      	ldr	r3, [pc, #560]	@ (80077d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800759e:	61bb      	str	r3, [r7, #24]
      break;
 80075a0:	e108      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075a2:	4b88      	ldr	r3, [pc, #544]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80075ac:	4b85      	ldr	r3, [pc, #532]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b0:	091b      	lsrs	r3, r3, #4
 80075b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80075b8:	4b82      	ldr	r3, [pc, #520]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80075c2:	4b80      	ldr	r3, [pc, #512]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075c6:	08db      	lsrs	r3, r3, #3
 80075c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	fb02 f303 	mul.w	r3, r2, r3
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 80e1 	beq.w	80077a8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	f000 8083 	beq.w	80076f4 <HAL_RCC_GetSysClockFreq+0x204>
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	f200 80a1 	bhi.w	8007738 <HAL_RCC_GetSysClockFreq+0x248>
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <HAL_RCC_GetSysClockFreq+0x114>
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d056      	beq.n	80076b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007602:	e099      	b.n	8007738 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007604:	4b6f      	ldr	r3, [pc, #444]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0320 	and.w	r3, r3, #32
 800760c:	2b00      	cmp	r3, #0
 800760e:	d02d      	beq.n	800766c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007610:	4b6c      	ldr	r3, [pc, #432]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	08db      	lsrs	r3, r3, #3
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	4a6b      	ldr	r2, [pc, #428]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800761c:	fa22 f303 	lsr.w	r3, r2, r3
 8007620:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	ee07 3a90 	vmov	s15, r3
 8007628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800763a:	4b62      	ldr	r3, [pc, #392]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800763c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764a:	ed97 6a02 	vldr	s12, [r7, #8]
 800764e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80077d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800765a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800765e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007666:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800766a:	e087      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007676:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80077d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800767a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800767e:	4b51      	ldr	r3, [pc, #324]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800768e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007692:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80077d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800769a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800769e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076ae:	e065      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80077dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80076be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076c2:	4b40      	ldr	r3, [pc, #256]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ca:	ee07 3a90 	vmov	s15, r3
 80076ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80076d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80077d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076f2:	e043      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80077e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007706:	4b2f      	ldr	r3, [pc, #188]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007716:	ed97 6a02 	vldr	s12, [r7, #8]
 800771a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80077d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800771e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800772a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800772e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007732:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007736:	e021      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	ee07 3a90 	vmov	s15, r3
 800773e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007742:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80077dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8007746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800774a:	4b1e      	ldr	r3, [pc, #120]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800774c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800774e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800775a:	ed97 6a02 	vldr	s12, [r7, #8]
 800775e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80077d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800776a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800776e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007776:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800777a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800777c:	4b11      	ldr	r3, [pc, #68]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800777e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007780:	0a5b      	lsrs	r3, r3, #9
 8007782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007786:	3301      	adds	r3, #1
 8007788:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	ee07 3a90 	vmov	s15, r3
 8007790:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007794:	edd7 6a07 	vldr	s13, [r7, #28]
 8007798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800779c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a0:	ee17 3a90 	vmov	r3, s15
 80077a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80077a6:	e005      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	61bb      	str	r3, [r7, #24]
      break;
 80077ac:	e002      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80077ae:	4b07      	ldr	r3, [pc, #28]	@ (80077cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80077b0:	61bb      	str	r3, [r7, #24]
      break;
 80077b2:	bf00      	nop
  }

  return sysclockfreq;
 80077b4:	69bb      	ldr	r3, [r7, #24]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3724      	adds	r7, #36	@ 0x24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	58024400 	.word	0x58024400
 80077c8:	03d09000 	.word	0x03d09000
 80077cc:	003d0900 	.word	0x003d0900
 80077d0:	016e3600 	.word	0x016e3600
 80077d4:	46000000 	.word	0x46000000
 80077d8:	4c742400 	.word	0x4c742400
 80077dc:	4a742400 	.word	0x4a742400
 80077e0:	4bb71b00 	.word	0x4bb71b00

080077e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80077ea:	f7ff fe81 	bl	80074f0 <HAL_RCC_GetSysClockFreq>
 80077ee:	4602      	mov	r2, r0
 80077f0:	4b10      	ldr	r3, [pc, #64]	@ (8007834 <HAL_RCC_GetHCLKFreq+0x50>)
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	0a1b      	lsrs	r3, r3, #8
 80077f6:	f003 030f 	and.w	r3, r3, #15
 80077fa:	490f      	ldr	r1, [pc, #60]	@ (8007838 <HAL_RCC_GetHCLKFreq+0x54>)
 80077fc:	5ccb      	ldrb	r3, [r1, r3]
 80077fe:	f003 031f 	and.w	r3, r3, #31
 8007802:	fa22 f303 	lsr.w	r3, r2, r3
 8007806:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007808:	4b0a      	ldr	r3, [pc, #40]	@ (8007834 <HAL_RCC_GetHCLKFreq+0x50>)
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	f003 030f 	and.w	r3, r3, #15
 8007810:	4a09      	ldr	r2, [pc, #36]	@ (8007838 <HAL_RCC_GetHCLKFreq+0x54>)
 8007812:	5cd3      	ldrb	r3, [r2, r3]
 8007814:	f003 031f 	and.w	r3, r3, #31
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	fa22 f303 	lsr.w	r3, r2, r3
 800781e:	4a07      	ldr	r2, [pc, #28]	@ (800783c <HAL_RCC_GetHCLKFreq+0x58>)
 8007820:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007822:	4a07      	ldr	r2, [pc, #28]	@ (8007840 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007828:	4b04      	ldr	r3, [pc, #16]	@ (800783c <HAL_RCC_GetHCLKFreq+0x58>)
 800782a:	681b      	ldr	r3, [r3, #0]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	58024400 	.word	0x58024400
 8007838:	0800d14c 	.word	0x0800d14c
 800783c:	24000010 	.word	0x24000010
 8007840:	2400000c 	.word	0x2400000c

08007844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007848:	f7ff ffcc 	bl	80077e4 <HAL_RCC_GetHCLKFreq>
 800784c:	4602      	mov	r2, r0
 800784e:	4b06      	ldr	r3, [pc, #24]	@ (8007868 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	091b      	lsrs	r3, r3, #4
 8007854:	f003 0307 	and.w	r3, r3, #7
 8007858:	4904      	ldr	r1, [pc, #16]	@ (800786c <HAL_RCC_GetPCLK1Freq+0x28>)
 800785a:	5ccb      	ldrb	r3, [r1, r3]
 800785c:	f003 031f 	and.w	r3, r3, #31
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007864:	4618      	mov	r0, r3
 8007866:	bd80      	pop	{r7, pc}
 8007868:	58024400 	.word	0x58024400
 800786c:	0800d14c 	.word	0x0800d14c

08007870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007874:	f7ff ffb6 	bl	80077e4 <HAL_RCC_GetHCLKFreq>
 8007878:	4602      	mov	r2, r0
 800787a:	4b06      	ldr	r3, [pc, #24]	@ (8007894 <HAL_RCC_GetPCLK2Freq+0x24>)
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	0a1b      	lsrs	r3, r3, #8
 8007880:	f003 0307 	and.w	r3, r3, #7
 8007884:	4904      	ldr	r1, [pc, #16]	@ (8007898 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007886:	5ccb      	ldrb	r3, [r1, r3]
 8007888:	f003 031f 	and.w	r3, r3, #31
 800788c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007890:	4618      	mov	r0, r3
 8007892:	bd80      	pop	{r7, pc}
 8007894:	58024400 	.word	0x58024400
 8007898:	0800d14c 	.word	0x0800d14c

0800789c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800789c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078a0:	b0c6      	sub	sp, #280	@ 0x118
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078a8:	2300      	movs	r3, #0
 80078aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80078ae:	2300      	movs	r3, #0
 80078b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078bc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80078c0:	2500      	movs	r5, #0
 80078c2:	ea54 0305 	orrs.w	r3, r4, r5
 80078c6:	d049      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80078c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078d2:	d02f      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80078d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078d8:	d828      	bhi.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80078da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078de:	d01a      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80078e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078e4:	d822      	bhi.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80078ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078ee:	d007      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80078f0:	e01c      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078f2:	4bab      	ldr	r3, [pc, #684]	@ (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80078f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f6:	4aaa      	ldr	r2, [pc, #680]	@ (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80078f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078fe:	e01a      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007904:	3308      	adds	r3, #8
 8007906:	2102      	movs	r1, #2
 8007908:	4618      	mov	r0, r3
 800790a:	f002 fa49 	bl	8009da0 <RCCEx_PLL2_Config>
 800790e:	4603      	mov	r3, r0
 8007910:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007914:	e00f      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791a:	3328      	adds	r3, #40	@ 0x28
 800791c:	2102      	movs	r1, #2
 800791e:	4618      	mov	r0, r3
 8007920:	f002 faf0 	bl	8009f04 <RCCEx_PLL3_Config>
 8007924:	4603      	mov	r3, r0
 8007926:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800792a:	e004      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007932:	e000      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007936:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10a      	bne.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800793e:	4b98      	ldr	r3, [pc, #608]	@ (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007942:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800794a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800794c:	4a94      	ldr	r2, [pc, #592]	@ (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800794e:	430b      	orrs	r3, r1
 8007950:	6513      	str	r3, [r2, #80]	@ 0x50
 8007952:	e003      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007954:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007958:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800795c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007964:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007968:	f04f 0900 	mov.w	r9, #0
 800796c:	ea58 0309 	orrs.w	r3, r8, r9
 8007970:	d047      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007978:	2b04      	cmp	r3, #4
 800797a:	d82a      	bhi.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800797c:	a201      	add	r2, pc, #4	@ (adr r2, 8007984 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800797e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007982:	bf00      	nop
 8007984:	08007999 	.word	0x08007999
 8007988:	080079a7 	.word	0x080079a7
 800798c:	080079bd 	.word	0x080079bd
 8007990:	080079db 	.word	0x080079db
 8007994:	080079db 	.word	0x080079db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007998:	4b81      	ldr	r3, [pc, #516]	@ (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800799a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799c:	4a80      	ldr	r2, [pc, #512]	@ (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800799e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079a4:	e01a      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079aa:	3308      	adds	r3, #8
 80079ac:	2100      	movs	r1, #0
 80079ae:	4618      	mov	r0, r3
 80079b0:	f002 f9f6 	bl	8009da0 <RCCEx_PLL2_Config>
 80079b4:	4603      	mov	r3, r0
 80079b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079ba:	e00f      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c0:	3328      	adds	r3, #40	@ 0x28
 80079c2:	2100      	movs	r1, #0
 80079c4:	4618      	mov	r0, r3
 80079c6:	f002 fa9d 	bl	8009f04 <RCCEx_PLL3_Config>
 80079ca:	4603      	mov	r3, r0
 80079cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079d0:	e004      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079d8:	e000      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80079da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10a      	bne.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079e4:	4b6e      	ldr	r3, [pc, #440]	@ (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80079e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079e8:	f023 0107 	bic.w	r1, r3, #7
 80079ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079f2:	4a6b      	ldr	r2, [pc, #428]	@ (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80079f4:	430b      	orrs	r3, r1
 80079f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80079f8:	e003      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007a0e:	f04f 0b00 	mov.w	fp, #0
 8007a12:	ea5a 030b 	orrs.w	r3, sl, fp
 8007a16:	d05b      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007a20:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007a24:	d03b      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007a26:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007a2a:	d834      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007a2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a30:	d037      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007a32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a36:	d82e      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007a38:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a3c:	d033      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007a3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a42:	d828      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007a44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a48:	d01a      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007a4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a4e:	d822      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d003      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007a54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a58:	d007      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007a5a:	e01c      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a5c:	4b50      	ldr	r3, [pc, #320]	@ (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a60:	4a4f      	ldr	r2, [pc, #316]	@ (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a68:	e01e      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6e:	3308      	adds	r3, #8
 8007a70:	2100      	movs	r1, #0
 8007a72:	4618      	mov	r0, r3
 8007a74:	f002 f994 	bl	8009da0 <RCCEx_PLL2_Config>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007a7e:	e013      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a84:	3328      	adds	r3, #40	@ 0x28
 8007a86:	2100      	movs	r1, #0
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f002 fa3b 	bl	8009f04 <RCCEx_PLL3_Config>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a94:	e008      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a9c:	e004      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007a9e:	bf00      	nop
 8007aa0:	e002      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007aa2:	bf00      	nop
 8007aa4:	e000      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10b      	bne.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ab4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007abc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ac0:	4a37      	ldr	r2, [pc, #220]	@ (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ac2:	430b      	orrs	r3, r1
 8007ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ac6:	e003      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007acc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007adc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007ae6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007aea:	460b      	mov	r3, r1
 8007aec:	4313      	orrs	r3, r2
 8007aee:	d05d      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007af8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007afc:	d03b      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007afe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007b02:	d834      	bhi.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007b04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b08:	d037      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007b0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b0e:	d82e      	bhi.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007b10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b14:	d033      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007b16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b1a:	d828      	bhi.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007b1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b20:	d01a      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007b22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b26:	d822      	bhi.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007b2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b30:	d007      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007b32:	e01c      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b34:	4b1a      	ldr	r3, [pc, #104]	@ (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b38:	4a19      	ldr	r2, [pc, #100]	@ (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b40:	e01e      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b46:	3308      	adds	r3, #8
 8007b48:	2100      	movs	r1, #0
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f002 f928 	bl	8009da0 <RCCEx_PLL2_Config>
 8007b50:	4603      	mov	r3, r0
 8007b52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007b56:	e013      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5c:	3328      	adds	r3, #40	@ 0x28
 8007b5e:	2100      	movs	r1, #0
 8007b60:	4618      	mov	r0, r3
 8007b62:	f002 f9cf 	bl	8009f04 <RCCEx_PLL3_Config>
 8007b66:	4603      	mov	r3, r0
 8007b68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b6c:	e008      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b74:	e004      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007b76:	bf00      	nop
 8007b78:	e002      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007b7a:	bf00      	nop
 8007b7c:	e000      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10d      	bne.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007b88:	4b05      	ldr	r3, [pc, #20]	@ (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b8c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007b98:	4a01      	ldr	r2, [pc, #4]	@ (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b9a:	430b      	orrs	r3, r1
 8007b9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b9e:	e005      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007ba0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ba8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007bb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007bc2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	d03a      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bd2:	2b30      	cmp	r3, #48	@ 0x30
 8007bd4:	d01f      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007bd6:	2b30      	cmp	r3, #48	@ 0x30
 8007bd8:	d819      	bhi.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	d00c      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	d815      	bhi.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d019      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007be6:	2b10      	cmp	r3, #16
 8007be8:	d111      	bne.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bea:	4baa      	ldr	r3, [pc, #680]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bee:	4aa9      	ldr	r2, [pc, #676]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007bf6:	e011      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfc:	3308      	adds	r3, #8
 8007bfe:	2102      	movs	r1, #2
 8007c00:	4618      	mov	r0, r3
 8007c02:	f002 f8cd 	bl	8009da0 <RCCEx_PLL2_Config>
 8007c06:	4603      	mov	r3, r0
 8007c08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007c0c:	e006      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c14:	e002      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007c16:	bf00      	nop
 8007c18:	e000      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007c1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10a      	bne.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007c24:	4b9b      	ldr	r3, [pc, #620]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c28:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c32:	4a98      	ldr	r2, [pc, #608]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c34:	430b      	orrs	r3, r1
 8007c36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007c38:	e003      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c52:	2300      	movs	r3, #0
 8007c54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007c58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	d051      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c6c:	d035      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007c6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c72:	d82e      	bhi.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007c74:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c78:	d031      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007c7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c7e:	d828      	bhi.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c84:	d01a      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007c86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c8a:	d822      	bhi.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d003      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c94:	d007      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007c96:	e01c      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c98:	4b7e      	ldr	r3, [pc, #504]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c9c:	4a7d      	ldr	r2, [pc, #500]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ca4:	e01c      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007caa:	3308      	adds	r3, #8
 8007cac:	2100      	movs	r1, #0
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f002 f876 	bl	8009da0 <RCCEx_PLL2_Config>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007cba:	e011      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc0:	3328      	adds	r3, #40	@ 0x28
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f002 f91d 	bl	8009f04 <RCCEx_PLL3_Config>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007cd0:	e006      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007cd8:	e002      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007cda:	bf00      	nop
 8007cdc:	e000      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10a      	bne.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cf6:	4a67      	ldr	r2, [pc, #412]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007cf8:	430b      	orrs	r3, r1
 8007cfa:	6513      	str	r3, [r2, #80]	@ 0x50
 8007cfc:	e003      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007d12:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d16:	2300      	movs	r3, #0
 8007d18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d1c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007d20:	460b      	mov	r3, r1
 8007d22:	4313      	orrs	r3, r2
 8007d24:	d053      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d30:	d033      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007d32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d36:	d82c      	bhi.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007d38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d3c:	d02f      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007d3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d42:	d826      	bhi.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007d44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d48:	d02b      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007d4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d4e:	d820      	bhi.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007d50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d54:	d012      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007d56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d5a:	d81a      	bhi.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d022      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d64:	d115      	bne.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f002 f816 	bl	8009da0 <RCCEx_PLL2_Config>
 8007d74:	4603      	mov	r3, r0
 8007d76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007d7a:	e015      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d80:	3328      	adds	r3, #40	@ 0x28
 8007d82:	2101      	movs	r1, #1
 8007d84:	4618      	mov	r0, r3
 8007d86:	f002 f8bd 	bl	8009f04 <RCCEx_PLL3_Config>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007d90:	e00a      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d98:	e006      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007d9a:	bf00      	nop
 8007d9c:	e004      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007d9e:	bf00      	nop
 8007da0:	e002      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007da2:	bf00      	nop
 8007da4:	e000      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007da8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10a      	bne.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007db0:	4b38      	ldr	r3, [pc, #224]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dbe:	4a35      	ldr	r2, [pc, #212]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007dc0:	430b      	orrs	r3, r1
 8007dc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8007dc4:	e003      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007dda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007dde:	2300      	movs	r3, #0
 8007de0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007de4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007de8:	460b      	mov	r3, r1
 8007dea:	4313      	orrs	r3, r2
 8007dec:	d058      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007dfa:	d033      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e00:	d82c      	bhi.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e06:	d02f      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e0c:	d826      	bhi.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007e0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e12:	d02b      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007e14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e18:	d820      	bhi.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007e1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e1e:	d012      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007e20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e24:	d81a      	bhi.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d022      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007e2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e2e:	d115      	bne.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e34:	3308      	adds	r3, #8
 8007e36:	2101      	movs	r1, #1
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f001 ffb1 	bl	8009da0 <RCCEx_PLL2_Config>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e44:	e015      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e4a:	3328      	adds	r3, #40	@ 0x28
 8007e4c:	2101      	movs	r1, #1
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f002 f858 	bl	8009f04 <RCCEx_PLL3_Config>
 8007e54:	4603      	mov	r3, r0
 8007e56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e5a:	e00a      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e62:	e006      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007e64:	bf00      	nop
 8007e66:	e004      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007e68:	bf00      	nop
 8007e6a:	e002      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007e6c:	bf00      	nop
 8007e6e:	e000      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10e      	bne.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007e7a:	4b06      	ldr	r3, [pc, #24]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007e8a:	4a02      	ldr	r2, [pc, #8]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e90:	e006      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007e92:	bf00      	nop
 8007e94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007eac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007eb6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	d037      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eca:	d00e      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007ecc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ed0:	d816      	bhi.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d018      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007ed6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007eda:	d111      	bne.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007edc:	4bc4      	ldr	r3, [pc, #784]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee0:	4ac3      	ldr	r2, [pc, #780]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007ee8:	e00f      	b.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eee:	3308      	adds	r3, #8
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f001 ff54 	bl	8009da0 <RCCEx_PLL2_Config>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007efe:	e004      	b.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f06:	e000      	b.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10a      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f12:	4bb7      	ldr	r3, [pc, #732]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f16:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f20:	4ab3      	ldr	r2, [pc, #716]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f22:	430b      	orrs	r3, r1
 8007f24:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f26:	e003      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007f3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f40:	2300      	movs	r3, #0
 8007f42:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	d039      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	d81c      	bhi.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f60 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f60:	08007f9d 	.word	0x08007f9d
 8007f64:	08007f71 	.word	0x08007f71
 8007f68:	08007f7f 	.word	0x08007f7f
 8007f6c:	08007f9d 	.word	0x08007f9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f70:	4b9f      	ldr	r3, [pc, #636]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f74:	4a9e      	ldr	r2, [pc, #632]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007f7c:	e00f      	b.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f82:	3308      	adds	r3, #8
 8007f84:	2102      	movs	r1, #2
 8007f86:	4618      	mov	r0, r3
 8007f88:	f001 ff0a 	bl	8009da0 <RCCEx_PLL2_Config>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007f92:	e004      	b.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f9a:	e000      	b.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10a      	bne.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007fa6:	4b92      	ldr	r3, [pc, #584]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007faa:	f023 0103 	bic.w	r1, r3, #3
 8007fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fb4:	4a8e      	ldr	r2, [pc, #568]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fb6:	430b      	orrs	r3, r1
 8007fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007fba:	e003      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007fda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007fde:	460b      	mov	r3, r1
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	f000 8099 	beq.w	8008118 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fe6:	4b83      	ldr	r3, [pc, #524]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a82      	ldr	r2, [pc, #520]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ff0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ff2:	f7fb f82d 	bl	8003050 <HAL_GetTick>
 8007ff6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ffa:	e00b      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ffc:	f7fb f828 	bl	8003050 <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	2b64      	cmp	r3, #100	@ 0x64
 800800a:	d903      	bls.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008012:	e005      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008014:	4b77      	ldr	r3, [pc, #476]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800801c:	2b00      	cmp	r3, #0
 800801e:	d0ed      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008020:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008024:	2b00      	cmp	r3, #0
 8008026:	d173      	bne.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008028:	4b71      	ldr	r3, [pc, #452]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800802a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800802c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008030:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008034:	4053      	eors	r3, r2
 8008036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800803a:	2b00      	cmp	r3, #0
 800803c:	d015      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800803e:	4b6c      	ldr	r3, [pc, #432]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008046:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800804a:	4b69      	ldr	r3, [pc, #420]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800804c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800804e:	4a68      	ldr	r2, [pc, #416]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008054:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008056:	4b66      	ldr	r3, [pc, #408]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800805a:	4a65      	ldr	r2, [pc, #404]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800805c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008060:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008062:	4a63      	ldr	r2, [pc, #396]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008068:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800806a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800806e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008076:	d118      	bne.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008078:	f7fa ffea 	bl	8003050 <HAL_GetTick>
 800807c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008080:	e00d      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008082:	f7fa ffe5 	bl	8003050 <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800808c:	1ad2      	subs	r2, r2, r3
 800808e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008092:	429a      	cmp	r2, r3
 8008094:	d903      	bls.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800809c:	e005      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800809e:	4b54      	ldr	r3, [pc, #336]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080a2:	f003 0302 	and.w	r3, r3, #2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d0eb      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80080aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d129      	bne.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80080ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080c2:	d10e      	bne.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80080c4:	4b4a      	ldr	r3, [pc, #296]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80080cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80080d4:	091a      	lsrs	r2, r3, #4
 80080d6:	4b48      	ldr	r3, [pc, #288]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80080d8:	4013      	ands	r3, r2
 80080da:	4a45      	ldr	r2, [pc, #276]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080dc:	430b      	orrs	r3, r1
 80080de:	6113      	str	r3, [r2, #16]
 80080e0:	e005      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x852>
 80080e2:	4b43      	ldr	r3, [pc, #268]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	4a42      	ldr	r2, [pc, #264]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80080ec:	6113      	str	r3, [r2, #16]
 80080ee:	4b40      	ldr	r3, [pc, #256]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080f0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80080f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80080fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080fe:	4a3c      	ldr	r2, [pc, #240]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008100:	430b      	orrs	r3, r1
 8008102:	6713      	str	r3, [r2, #112]	@ 0x70
 8008104:	e008      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008106:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800810a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800810e:	e003      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008110:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008114:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800811c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008120:	f002 0301 	and.w	r3, r2, #1
 8008124:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008128:	2300      	movs	r3, #0
 800812a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800812e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008132:	460b      	mov	r3, r1
 8008134:	4313      	orrs	r3, r2
 8008136:	f000 808f 	beq.w	8008258 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800813a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800813e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008140:	2b28      	cmp	r3, #40	@ 0x28
 8008142:	d871      	bhi.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008144:	a201      	add	r2, pc, #4	@ (adr r2, 800814c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814a:	bf00      	nop
 800814c:	08008231 	.word	0x08008231
 8008150:	08008229 	.word	0x08008229
 8008154:	08008229 	.word	0x08008229
 8008158:	08008229 	.word	0x08008229
 800815c:	08008229 	.word	0x08008229
 8008160:	08008229 	.word	0x08008229
 8008164:	08008229 	.word	0x08008229
 8008168:	08008229 	.word	0x08008229
 800816c:	080081fd 	.word	0x080081fd
 8008170:	08008229 	.word	0x08008229
 8008174:	08008229 	.word	0x08008229
 8008178:	08008229 	.word	0x08008229
 800817c:	08008229 	.word	0x08008229
 8008180:	08008229 	.word	0x08008229
 8008184:	08008229 	.word	0x08008229
 8008188:	08008229 	.word	0x08008229
 800818c:	08008213 	.word	0x08008213
 8008190:	08008229 	.word	0x08008229
 8008194:	08008229 	.word	0x08008229
 8008198:	08008229 	.word	0x08008229
 800819c:	08008229 	.word	0x08008229
 80081a0:	08008229 	.word	0x08008229
 80081a4:	08008229 	.word	0x08008229
 80081a8:	08008229 	.word	0x08008229
 80081ac:	08008231 	.word	0x08008231
 80081b0:	08008229 	.word	0x08008229
 80081b4:	08008229 	.word	0x08008229
 80081b8:	08008229 	.word	0x08008229
 80081bc:	08008229 	.word	0x08008229
 80081c0:	08008229 	.word	0x08008229
 80081c4:	08008229 	.word	0x08008229
 80081c8:	08008229 	.word	0x08008229
 80081cc:	08008231 	.word	0x08008231
 80081d0:	08008229 	.word	0x08008229
 80081d4:	08008229 	.word	0x08008229
 80081d8:	08008229 	.word	0x08008229
 80081dc:	08008229 	.word	0x08008229
 80081e0:	08008229 	.word	0x08008229
 80081e4:	08008229 	.word	0x08008229
 80081e8:	08008229 	.word	0x08008229
 80081ec:	08008231 	.word	0x08008231
 80081f0:	58024400 	.word	0x58024400
 80081f4:	58024800 	.word	0x58024800
 80081f8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008200:	3308      	adds	r3, #8
 8008202:	2101      	movs	r1, #1
 8008204:	4618      	mov	r0, r3
 8008206:	f001 fdcb 	bl	8009da0 <RCCEx_PLL2_Config>
 800820a:	4603      	mov	r3, r0
 800820c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008210:	e00f      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008216:	3328      	adds	r3, #40	@ 0x28
 8008218:	2101      	movs	r1, #1
 800821a:	4618      	mov	r0, r3
 800821c:	f001 fe72 	bl	8009f04 <RCCEx_PLL3_Config>
 8008220:	4603      	mov	r3, r0
 8008222:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008226:	e004      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800822e:	e000      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008232:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10a      	bne.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800823a:	4bbf      	ldr	r3, [pc, #764]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800823c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800823e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008246:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008248:	4abb      	ldr	r2, [pc, #748]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800824a:	430b      	orrs	r3, r1
 800824c:	6553      	str	r3, [r2, #84]	@ 0x54
 800824e:	e003      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008250:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008254:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	f002 0302 	and.w	r3, r2, #2
 8008264:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008268:	2300      	movs	r3, #0
 800826a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800826e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008272:	460b      	mov	r3, r1
 8008274:	4313      	orrs	r3, r2
 8008276:	d041      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800827c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800827e:	2b05      	cmp	r3, #5
 8008280:	d824      	bhi.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008282:	a201      	add	r2, pc, #4	@ (adr r2, 8008288 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008288:	080082d5 	.word	0x080082d5
 800828c:	080082a1 	.word	0x080082a1
 8008290:	080082b7 	.word	0x080082b7
 8008294:	080082d5 	.word	0x080082d5
 8008298:	080082d5 	.word	0x080082d5
 800829c:	080082d5 	.word	0x080082d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a4:	3308      	adds	r3, #8
 80082a6:	2101      	movs	r1, #1
 80082a8:	4618      	mov	r0, r3
 80082aa:	f001 fd79 	bl	8009da0 <RCCEx_PLL2_Config>
 80082ae:	4603      	mov	r3, r0
 80082b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80082b4:	e00f      	b.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ba:	3328      	adds	r3, #40	@ 0x28
 80082bc:	2101      	movs	r1, #1
 80082be:	4618      	mov	r0, r3
 80082c0:	f001 fe20 	bl	8009f04 <RCCEx_PLL3_Config>
 80082c4:	4603      	mov	r3, r0
 80082c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80082ca:	e004      	b.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80082d2:	e000      	b.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80082d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10a      	bne.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80082de:	4b96      	ldr	r3, [pc, #600]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80082e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082e2:	f023 0107 	bic.w	r1, r3, #7
 80082e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082ec:	4a92      	ldr	r2, [pc, #584]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80082ee:	430b      	orrs	r3, r1
 80082f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80082f2:	e003      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80082fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008304:	f002 0304 	and.w	r3, r2, #4
 8008308:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800830c:	2300      	movs	r3, #0
 800830e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008312:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008316:	460b      	mov	r3, r1
 8008318:	4313      	orrs	r3, r2
 800831a:	d044      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800831c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008324:	2b05      	cmp	r3, #5
 8008326:	d825      	bhi.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008328:	a201      	add	r2, pc, #4	@ (adr r2, 8008330 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800832a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832e:	bf00      	nop
 8008330:	0800837d 	.word	0x0800837d
 8008334:	08008349 	.word	0x08008349
 8008338:	0800835f 	.word	0x0800835f
 800833c:	0800837d 	.word	0x0800837d
 8008340:	0800837d 	.word	0x0800837d
 8008344:	0800837d 	.word	0x0800837d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800834c:	3308      	adds	r3, #8
 800834e:	2101      	movs	r1, #1
 8008350:	4618      	mov	r0, r3
 8008352:	f001 fd25 	bl	8009da0 <RCCEx_PLL2_Config>
 8008356:	4603      	mov	r3, r0
 8008358:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800835c:	e00f      	b.n	800837e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800835e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008362:	3328      	adds	r3, #40	@ 0x28
 8008364:	2101      	movs	r1, #1
 8008366:	4618      	mov	r0, r3
 8008368:	f001 fdcc 	bl	8009f04 <RCCEx_PLL3_Config>
 800836c:	4603      	mov	r3, r0
 800836e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008372:	e004      	b.n	800837e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800837a:	e000      	b.n	800837e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800837c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800837e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10b      	bne.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008386:	4b6c      	ldr	r3, [pc, #432]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800838a:	f023 0107 	bic.w	r1, r3, #7
 800838e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008396:	4a68      	ldr	r2, [pc, #416]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008398:	430b      	orrs	r3, r1
 800839a:	6593      	str	r3, [r2, #88]	@ 0x58
 800839c:	e003      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800839e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	f002 0320 	and.w	r3, r2, #32
 80083b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80083b6:	2300      	movs	r3, #0
 80083b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80083bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80083c0:	460b      	mov	r3, r1
 80083c2:	4313      	orrs	r3, r2
 80083c4:	d055      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80083c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083d2:	d033      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80083d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083d8:	d82c      	bhi.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80083da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083de:	d02f      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80083e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083e4:	d826      	bhi.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80083e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80083ea:	d02b      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80083ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80083f0:	d820      	bhi.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80083f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083f6:	d012      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80083f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083fc:	d81a      	bhi.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d022      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008402:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008406:	d115      	bne.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800840c:	3308      	adds	r3, #8
 800840e:	2100      	movs	r1, #0
 8008410:	4618      	mov	r0, r3
 8008412:	f001 fcc5 	bl	8009da0 <RCCEx_PLL2_Config>
 8008416:	4603      	mov	r3, r0
 8008418:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800841c:	e015      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800841e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008422:	3328      	adds	r3, #40	@ 0x28
 8008424:	2102      	movs	r1, #2
 8008426:	4618      	mov	r0, r3
 8008428:	f001 fd6c 	bl	8009f04 <RCCEx_PLL3_Config>
 800842c:	4603      	mov	r3, r0
 800842e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008432:	e00a      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800843a:	e006      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800843c:	bf00      	nop
 800843e:	e004      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008440:	bf00      	nop
 8008442:	e002      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008444:	bf00      	nop
 8008446:	e000      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800844a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10b      	bne.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008452:	4b39      	ldr	r3, [pc, #228]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008456:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800845a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800845e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008462:	4a35      	ldr	r2, [pc, #212]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008464:	430b      	orrs	r3, r1
 8008466:	6553      	str	r3, [r2, #84]	@ 0x54
 8008468:	e003      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800846a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800846e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800847e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008482:	2300      	movs	r3, #0
 8008484:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008488:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800848c:	460b      	mov	r3, r1
 800848e:	4313      	orrs	r3, r2
 8008490:	d058      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008496:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800849a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800849e:	d033      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80084a0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80084a4:	d82c      	bhi.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80084a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084aa:	d02f      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80084ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084b0:	d826      	bhi.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80084b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084b6:	d02b      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80084b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084bc:	d820      	bhi.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80084be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084c2:	d012      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80084c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084c8:	d81a      	bhi.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d022      	beq.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80084ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084d2:	d115      	bne.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084d8:	3308      	adds	r3, #8
 80084da:	2100      	movs	r1, #0
 80084dc:	4618      	mov	r0, r3
 80084de:	f001 fc5f 	bl	8009da0 <RCCEx_PLL2_Config>
 80084e2:	4603      	mov	r3, r0
 80084e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80084e8:	e015      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ee:	3328      	adds	r3, #40	@ 0x28
 80084f0:	2102      	movs	r1, #2
 80084f2:	4618      	mov	r0, r3
 80084f4:	f001 fd06 	bl	8009f04 <RCCEx_PLL3_Config>
 80084f8:	4603      	mov	r3, r0
 80084fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80084fe:	e00a      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008506:	e006      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008508:	bf00      	nop
 800850a:	e004      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800850c:	bf00      	nop
 800850e:	e002      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008510:	bf00      	nop
 8008512:	e000      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008516:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10e      	bne.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800851e:	4b06      	ldr	r3, [pc, #24]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008522:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800852a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800852e:	4a02      	ldr	r2, [pc, #8]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008530:	430b      	orrs	r3, r1
 8008532:	6593      	str	r3, [r2, #88]	@ 0x58
 8008534:	e006      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008536:	bf00      	nop
 8008538:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800853c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008540:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008550:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008554:	2300      	movs	r3, #0
 8008556:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800855a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800855e:	460b      	mov	r3, r1
 8008560:	4313      	orrs	r3, r2
 8008562:	d055      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008568:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800856c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008570:	d033      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008572:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008576:	d82c      	bhi.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008578:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800857c:	d02f      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800857e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008582:	d826      	bhi.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008584:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008588:	d02b      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800858a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800858e:	d820      	bhi.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008590:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008594:	d012      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008596:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800859a:	d81a      	bhi.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800859c:	2b00      	cmp	r3, #0
 800859e:	d022      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80085a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085a4:	d115      	bne.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085aa:	3308      	adds	r3, #8
 80085ac:	2100      	movs	r1, #0
 80085ae:	4618      	mov	r0, r3
 80085b0:	f001 fbf6 	bl	8009da0 <RCCEx_PLL2_Config>
 80085b4:	4603      	mov	r3, r0
 80085b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80085ba:	e015      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085c0:	3328      	adds	r3, #40	@ 0x28
 80085c2:	2102      	movs	r1, #2
 80085c4:	4618      	mov	r0, r3
 80085c6:	f001 fc9d 	bl	8009f04 <RCCEx_PLL3_Config>
 80085ca:	4603      	mov	r3, r0
 80085cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80085d0:	e00a      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80085d8:	e006      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80085da:	bf00      	nop
 80085dc:	e004      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80085de:	bf00      	nop
 80085e0:	e002      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80085e2:	bf00      	nop
 80085e4:	e000      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80085e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10b      	bne.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80085f0:	4ba0      	ldr	r3, [pc, #640]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80085f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085f4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80085f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008600:	4a9c      	ldr	r2, [pc, #624]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008602:	430b      	orrs	r3, r1
 8008604:	6593      	str	r3, [r2, #88]	@ 0x58
 8008606:	e003      	b.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008608:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800860c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008618:	f002 0308 	and.w	r3, r2, #8
 800861c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008620:	2300      	movs	r3, #0
 8008622:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008626:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800862a:	460b      	mov	r3, r1
 800862c:	4313      	orrs	r3, r2
 800862e:	d01e      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800863c:	d10c      	bne.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800863e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008642:	3328      	adds	r3, #40	@ 0x28
 8008644:	2102      	movs	r1, #2
 8008646:	4618      	mov	r0, r3
 8008648:	f001 fc5c 	bl	8009f04 <RCCEx_PLL3_Config>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d002      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008658:	4b86      	ldr	r3, [pc, #536]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800865a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800865c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008668:	4a82      	ldr	r2, [pc, #520]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800866a:	430b      	orrs	r3, r1
 800866c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800866e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008676:	f002 0310 	and.w	r3, r2, #16
 800867a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800867e:	2300      	movs	r3, #0
 8008680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008684:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008688:	460b      	mov	r3, r1
 800868a:	4313      	orrs	r3, r2
 800868c:	d01e      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800868e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800869a:	d10c      	bne.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800869c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a0:	3328      	adds	r3, #40	@ 0x28
 80086a2:	2102      	movs	r1, #2
 80086a4:	4618      	mov	r0, r3
 80086a6:	f001 fc2d 	bl	8009f04 <RCCEx_PLL3_Config>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086b6:	4b6f      	ldr	r3, [pc, #444]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80086b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80086be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086c6:	4a6b      	ldr	r2, [pc, #428]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80086c8:	430b      	orrs	r3, r1
 80086ca:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80086cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80086d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086da:	2300      	movs	r3, #0
 80086dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80086de:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80086e2:	460b      	mov	r3, r1
 80086e4:	4313      	orrs	r3, r2
 80086e6:	d03e      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80086e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086f4:	d022      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80086f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086fa:	d81b      	bhi.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d003      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008704:	d00b      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008706:	e015      	b.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800870c:	3308      	adds	r3, #8
 800870e:	2100      	movs	r1, #0
 8008710:	4618      	mov	r0, r3
 8008712:	f001 fb45 	bl	8009da0 <RCCEx_PLL2_Config>
 8008716:	4603      	mov	r3, r0
 8008718:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800871c:	e00f      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800871e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008722:	3328      	adds	r3, #40	@ 0x28
 8008724:	2102      	movs	r1, #2
 8008726:	4618      	mov	r0, r3
 8008728:	f001 fbec 	bl	8009f04 <RCCEx_PLL3_Config>
 800872c:	4603      	mov	r3, r0
 800872e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008732:	e004      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800873a:	e000      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800873c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800873e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10b      	bne.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008746:	4b4b      	ldr	r3, [pc, #300]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800874a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800874e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008752:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008756:	4a47      	ldr	r2, [pc, #284]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008758:	430b      	orrs	r3, r1
 800875a:	6593      	str	r3, [r2, #88]	@ 0x58
 800875c:	e003      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800875e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008762:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008772:	673b      	str	r3, [r7, #112]	@ 0x70
 8008774:	2300      	movs	r3, #0
 8008776:	677b      	str	r3, [r7, #116]	@ 0x74
 8008778:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800877c:	460b      	mov	r3, r1
 800877e:	4313      	orrs	r3, r2
 8008780:	d03b      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800878a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800878e:	d01f      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008790:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008794:	d818      	bhi.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800879a:	d003      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800879c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087a0:	d007      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80087a2:	e011      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087a4:	4b33      	ldr	r3, [pc, #204]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80087a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a8:	4a32      	ldr	r2, [pc, #200]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80087aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80087b0:	e00f      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087b6:	3328      	adds	r3, #40	@ 0x28
 80087b8:	2101      	movs	r1, #1
 80087ba:	4618      	mov	r0, r3
 80087bc:	f001 fba2 	bl	8009f04 <RCCEx_PLL3_Config>
 80087c0:	4603      	mov	r3, r0
 80087c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80087c6:	e004      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80087ce:	e000      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80087d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10b      	bne.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087da:	4b26      	ldr	r3, [pc, #152]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80087dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80087e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087ea:	4a22      	ldr	r2, [pc, #136]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80087ec:	430b      	orrs	r3, r1
 80087ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80087f0:	e003      	b.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80087fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008802:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008806:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008808:	2300      	movs	r3, #0
 800880a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800880c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008810:	460b      	mov	r3, r1
 8008812:	4313      	orrs	r3, r2
 8008814:	d034      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800881a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800881c:	2b00      	cmp	r3, #0
 800881e:	d003      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008824:	d007      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008826:	e011      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008828:	4b12      	ldr	r3, [pc, #72]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800882a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800882c:	4a11      	ldr	r2, [pc, #68]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800882e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008832:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008834:	e00e      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800883a:	3308      	adds	r3, #8
 800883c:	2102      	movs	r1, #2
 800883e:	4618      	mov	r0, r3
 8008840:	f001 faae 	bl	8009da0 <RCCEx_PLL2_Config>
 8008844:	4603      	mov	r3, r0
 8008846:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800884a:	e003      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008854:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10d      	bne.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800885c:	4b05      	ldr	r3, [pc, #20]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800885e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008860:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800886a:	4a02      	ldr	r2, [pc, #8]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800886c:	430b      	orrs	r3, r1
 800886e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008870:	e006      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008872:	bf00      	nop
 8008874:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008878:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800887c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008888:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800888c:	663b      	str	r3, [r7, #96]	@ 0x60
 800888e:	2300      	movs	r3, #0
 8008890:	667b      	str	r3, [r7, #100]	@ 0x64
 8008892:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008896:	460b      	mov	r3, r1
 8008898:	4313      	orrs	r3, r2
 800889a:	d00c      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800889c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088a0:	3328      	adds	r3, #40	@ 0x28
 80088a2:	2102      	movs	r1, #2
 80088a4:	4618      	mov	r0, r3
 80088a6:	f001 fb2d 	bl	8009f04 <RCCEx_PLL3_Config>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d002      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80088b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80088c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088c4:	2300      	movs	r3, #0
 80088c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088c8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80088cc:	460b      	mov	r3, r1
 80088ce:	4313      	orrs	r3, r2
 80088d0:	d036      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80088d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80088d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088dc:	d018      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80088de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088e2:	d811      	bhi.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80088e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088e8:	d014      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80088ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088ee:	d80b      	bhi.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d011      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80088f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088f8:	d106      	bne.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088fa:	4bb7      	ldr	r3, [pc, #732]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80088fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fe:	4ab6      	ldr	r2, [pc, #728]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008904:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008906:	e008      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800890e:	e004      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008910:	bf00      	nop
 8008912:	e002      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008914:	bf00      	nop
 8008916:	e000      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800891a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10a      	bne.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008922:	4bad      	ldr	r3, [pc, #692]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008926:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800892a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800892e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008930:	4aa9      	ldr	r2, [pc, #676]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008932:	430b      	orrs	r3, r1
 8008934:	6553      	str	r3, [r2, #84]	@ 0x54
 8008936:	e003      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008938:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800893c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800894c:	653b      	str	r3, [r7, #80]	@ 0x50
 800894e:	2300      	movs	r3, #0
 8008950:	657b      	str	r3, [r7, #84]	@ 0x54
 8008952:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008956:	460b      	mov	r3, r1
 8008958:	4313      	orrs	r3, r2
 800895a:	d009      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800895c:	4b9e      	ldr	r3, [pc, #632]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800895e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008960:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800896a:	4a9b      	ldr	r2, [pc, #620]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800896c:	430b      	orrs	r3, r1
 800896e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800897c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800897e:	2300      	movs	r3, #0
 8008980:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008982:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008986:	460b      	mov	r3, r1
 8008988:	4313      	orrs	r3, r2
 800898a:	d009      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800898c:	4b92      	ldr	r3, [pc, #584]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800898e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008990:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008998:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800899a:	4a8f      	ldr	r2, [pc, #572]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800899c:	430b      	orrs	r3, r1
 800899e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80089a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80089ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80089ae:	2300      	movs	r3, #0
 80089b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80089b2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80089b6:	460b      	mov	r3, r1
 80089b8:	4313      	orrs	r3, r2
 80089ba:	d00e      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80089bc:	4b86      	ldr	r3, [pc, #536]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	4a85      	ldr	r2, [pc, #532]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80089c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80089c6:	6113      	str	r3, [r2, #16]
 80089c8:	4b83      	ldr	r3, [pc, #524]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80089ca:	6919      	ldr	r1, [r3, #16]
 80089cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089d4:	4a80      	ldr	r2, [pc, #512]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80089d6:	430b      	orrs	r3, r1
 80089d8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80089da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80089e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80089e8:	2300      	movs	r3, #0
 80089ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089ec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80089f0:	460b      	mov	r3, r1
 80089f2:	4313      	orrs	r3, r2
 80089f4:	d009      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80089f6:	4b78      	ldr	r3, [pc, #480]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80089f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089fa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80089fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a04:	4a74      	ldr	r2, [pc, #464]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008a06:	430b      	orrs	r3, r1
 8008a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a12:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008a16:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a18:	2300      	movs	r3, #0
 8008a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a1c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008a20:	460b      	mov	r3, r1
 8008a22:	4313      	orrs	r3, r2
 8008a24:	d00a      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a26:	4b6c      	ldr	r3, [pc, #432]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a2a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a36:	4a68      	ldr	r2, [pc, #416]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008a38:	430b      	orrs	r3, r1
 8008a3a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a44:	2100      	movs	r1, #0
 8008a46:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a4e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008a52:	460b      	mov	r3, r1
 8008a54:	4313      	orrs	r3, r2
 8008a56:	d011      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a5c:	3308      	adds	r3, #8
 8008a5e:	2100      	movs	r1, #0
 8008a60:	4618      	mov	r0, r3
 8008a62:	f001 f99d 	bl	8009da0 <RCCEx_PLL2_Config>
 8008a66:	4603      	mov	r3, r0
 8008a68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008a6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d003      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a84:	2100      	movs	r1, #0
 8008a86:	6239      	str	r1, [r7, #32]
 8008a88:	f003 0302 	and.w	r3, r3, #2
 8008a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a8e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008a92:	460b      	mov	r3, r1
 8008a94:	4313      	orrs	r3, r2
 8008a96:	d011      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a9c:	3308      	adds	r3, #8
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f001 f97d 	bl	8009da0 <RCCEx_PLL2_Config>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008aac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d003      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ab8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	61b9      	str	r1, [r7, #24]
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	61fb      	str	r3, [r7, #28]
 8008ace:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	d011      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008adc:	3308      	adds	r3, #8
 8008ade:	2102      	movs	r1, #2
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f001 f95d 	bl	8009da0 <RCCEx_PLL2_Config>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008aec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d003      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008af8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b04:	2100      	movs	r1, #0
 8008b06:	6139      	str	r1, [r7, #16]
 8008b08:	f003 0308 	and.w	r3, r3, #8
 8008b0c:	617b      	str	r3, [r7, #20]
 8008b0e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008b12:	460b      	mov	r3, r1
 8008b14:	4313      	orrs	r3, r2
 8008b16:	d011      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b1c:	3328      	adds	r3, #40	@ 0x28
 8008b1e:	2100      	movs	r1, #0
 8008b20:	4618      	mov	r0, r3
 8008b22:	f001 f9ef 	bl	8009f04 <RCCEx_PLL3_Config>
 8008b26:	4603      	mov	r3, r0
 8008b28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008b2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d003      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	2100      	movs	r1, #0
 8008b46:	60b9      	str	r1, [r7, #8]
 8008b48:	f003 0310 	and.w	r3, r3, #16
 8008b4c:	60fb      	str	r3, [r7, #12]
 8008b4e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008b52:	460b      	mov	r3, r1
 8008b54:	4313      	orrs	r3, r2
 8008b56:	d011      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b5c:	3328      	adds	r3, #40	@ 0x28
 8008b5e:	2101      	movs	r1, #1
 8008b60:	4618      	mov	r0, r3
 8008b62:	f001 f9cf 	bl	8009f04 <RCCEx_PLL3_Config>
 8008b66:	4603      	mov	r3, r0
 8008b68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008b6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d003      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b84:	2100      	movs	r1, #0
 8008b86:	6039      	str	r1, [r7, #0]
 8008b88:	f003 0320 	and.w	r3, r3, #32
 8008b8c:	607b      	str	r3, [r7, #4]
 8008b8e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008b92:	460b      	mov	r3, r1
 8008b94:	4313      	orrs	r3, r2
 8008b96:	d011      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b9c:	3328      	adds	r3, #40	@ 0x28
 8008b9e:	2102      	movs	r1, #2
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f001 f9af 	bl	8009f04 <RCCEx_PLL3_Config>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008bac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d003      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008bb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008bbc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	e000      	b.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bd6:	bf00      	nop
 8008bd8:	58024400 	.word	0x58024400

08008bdc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b090      	sub	sp, #64	@ 0x40
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008be6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bea:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008bee:	430b      	orrs	r3, r1
 8008bf0:	f040 8094 	bne.w	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008bf4:	4b9b      	ldr	r3, [pc, #620]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bf8:	f003 0307 	and.w	r3, r3, #7
 8008bfc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c00:	2b04      	cmp	r3, #4
 8008c02:	f200 8087 	bhi.w	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008c06:	a201      	add	r2, pc, #4	@ (adr r2, 8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0c:	08008c21 	.word	0x08008c21
 8008c10:	08008c49 	.word	0x08008c49
 8008c14:	08008c71 	.word	0x08008c71
 8008c18:	08008d0d 	.word	0x08008d0d
 8008c1c:	08008c99 	.word	0x08008c99
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c20:	4b90      	ldr	r3, [pc, #576]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c2c:	d108      	bne.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 ff62 	bl	8009afc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c3c:	f000 bc93 	b.w	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c40:	2300      	movs	r3, #0
 8008c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c44:	f000 bc8f 	b.w	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c48:	4b86      	ldr	r3, [pc, #536]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c54:	d108      	bne.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c56:	f107 0318 	add.w	r3, r7, #24
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 fca6 	bl	80095ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c64:	f000 bc7f 	b.w	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c6c:	f000 bc7b 	b.w	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c70:	4b7c      	ldr	r3, [pc, #496]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c7c:	d108      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c7e:	f107 030c 	add.w	r3, r7, #12
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 fde6 	bl	8009854 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c8c:	f000 bc6b 	b.w	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c90:	2300      	movs	r3, #0
 8008c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c94:	f000 bc67 	b.w	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c98:	4b72      	ldr	r3, [pc, #456]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ca0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ca2:	4b70      	ldr	r3, [pc, #448]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0304 	and.w	r3, r3, #4
 8008caa:	2b04      	cmp	r3, #4
 8008cac:	d10c      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d109      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cb4:	4b6b      	ldr	r3, [pc, #428]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	08db      	lsrs	r3, r3, #3
 8008cba:	f003 0303 	and.w	r3, r3, #3
 8008cbe:	4a6a      	ldr	r2, [pc, #424]	@ (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cc6:	e01f      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cc8:	4b66      	ldr	r3, [pc, #408]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cd4:	d106      	bne.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cdc:	d102      	bne.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008cde:	4b63      	ldr	r3, [pc, #396]	@ (8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ce2:	e011      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ce4:	4b5f      	ldr	r3, [pc, #380]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cf0:	d106      	bne.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cf8:	d102      	bne.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cfe:	e003      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d00:	2300      	movs	r3, #0
 8008d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008d04:	f000 bc2f 	b.w	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d08:	f000 bc2d 	b.w	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d0c:	4b59      	ldr	r3, [pc, #356]	@ (8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d10:	f000 bc29 	b.w	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008d14:	2300      	movs	r3, #0
 8008d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d18:	f000 bc25 	b.w	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008d1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d20:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008d24:	430b      	orrs	r3, r1
 8008d26:	f040 80a7 	bne.w	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008d2a:	4b4e      	ldr	r3, [pc, #312]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d2e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008d32:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d3a:	d054      	beq.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d42:	f200 808b 	bhi.w	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d48:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008d4c:	f000 8083 	beq.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d52:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008d56:	f200 8081 	bhi.w	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d60:	d02f      	beq.n	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d68:	d878      	bhi.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d004      	beq.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d76:	d012      	beq.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008d78:	e070      	b.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d7a:	4b3a      	ldr	r3, [pc, #232]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d86:	d107      	bne.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 feb5 	bl	8009afc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d96:	e3e6      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d9c:	e3e3      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d9e:	4b31      	ldr	r3, [pc, #196]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008da6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008daa:	d107      	bne.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dac:	f107 0318 	add.w	r3, r7, #24
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 fbfb 	bl	80095ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dba:	e3d4      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dc0:	e3d1      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008dc2:	4b28      	ldr	r3, [pc, #160]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008dca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dce:	d107      	bne.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dd0:	f107 030c 	add.w	r3, r7, #12
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 fd3d 	bl	8009854 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dde:	e3c2      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008de4:	e3bf      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008de6:	4b1f      	ldr	r3, [pc, #124]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008dee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008df0:	4b1c      	ldr	r3, [pc, #112]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 0304 	and.w	r3, r3, #4
 8008df8:	2b04      	cmp	r3, #4
 8008dfa:	d10c      	bne.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d109      	bne.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e02:	4b18      	ldr	r3, [pc, #96]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	08db      	lsrs	r3, r3, #3
 8008e08:	f003 0303 	and.w	r3, r3, #3
 8008e0c:	4a16      	ldr	r2, [pc, #88]	@ (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e14:	e01e      	b.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e16:	4b13      	ldr	r3, [pc, #76]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e22:	d106      	bne.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e2a:	d102      	bne.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e30:	e010      	b.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e32:	4b0c      	ldr	r3, [pc, #48]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e3e:	d106      	bne.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e46:	d102      	bne.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e48:	4b09      	ldr	r3, [pc, #36]	@ (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e4c:	e002      	b.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008e52:	e388      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e54:	e387      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008e56:	4b07      	ldr	r3, [pc, #28]	@ (8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e5a:	e384      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e60:	e381      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e62:	bf00      	nop
 8008e64:	58024400 	.word	0x58024400
 8008e68:	03d09000 	.word	0x03d09000
 8008e6c:	003d0900 	.word	0x003d0900
 8008e70:	016e3600 	.word	0x016e3600
 8008e74:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e7c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008e80:	430b      	orrs	r3, r1
 8008e82:	f040 809c 	bne.w	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008e86:	4b9e      	ldr	r3, [pc, #632]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e8a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008e8e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e96:	d054      	beq.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e9e:	f200 808b 	bhi.w	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008ea8:	f000 8083 	beq.w	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008eb2:	f200 8081 	bhi.w	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ebc:	d02f      	beq.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ec4:	d878      	bhi.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d004      	beq.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ece:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008ed2:	d012      	beq.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008ed4:	e070      	b.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ed6:	4b8a      	ldr	r3, [pc, #552]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ede:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ee2:	d107      	bne.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ee4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 fe07 	bl	8009afc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ef2:	e338      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ef8:	e335      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008efa:	4b81      	ldr	r3, [pc, #516]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f06:	d107      	bne.n	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f08:	f107 0318 	add.w	r3, r7, #24
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f000 fb4d 	bl	80095ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f16:	e326      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f1c:	e323      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f1e:	4b78      	ldr	r3, [pc, #480]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f2a:	d107      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f2c:	f107 030c 	add.w	r3, r7, #12
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 fc8f 	bl	8009854 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f3a:	e314      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f40:	e311      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f42:	4b6f      	ldr	r3, [pc, #444]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f4a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f4c:	4b6c      	ldr	r3, [pc, #432]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0304 	and.w	r3, r3, #4
 8008f54:	2b04      	cmp	r3, #4
 8008f56:	d10c      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d109      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f5e:	4b68      	ldr	r3, [pc, #416]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	08db      	lsrs	r3, r3, #3
 8008f64:	f003 0303 	and.w	r3, r3, #3
 8008f68:	4a66      	ldr	r2, [pc, #408]	@ (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f70:	e01e      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f72:	4b63      	ldr	r3, [pc, #396]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f7e:	d106      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f86:	d102      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f88:	4b5f      	ldr	r3, [pc, #380]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f8c:	e010      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f8e:	4b5c      	ldr	r3, [pc, #368]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f9a:	d106      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fa2:	d102      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008fa4:	4b59      	ldr	r3, [pc, #356]	@ (800910c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fa8:	e002      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008fae:	e2da      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008fb0:	e2d9      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008fb2:	4b57      	ldr	r3, [pc, #348]	@ (8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fb6:	e2d6      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fbc:	e2d3      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fc2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008fc6:	430b      	orrs	r3, r1
 8008fc8:	f040 80a7 	bne.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008fcc:	4b4c      	ldr	r3, [pc, #304]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fd0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008fd4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008fdc:	d055      	beq.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008fe4:	f200 8096 	bhi.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008fee:	f000 8084 	beq.w	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ff8:	f200 808c 	bhi.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009002:	d030      	beq.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800900a:	f200 8083 	bhi.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800900e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009010:	2b00      	cmp	r3, #0
 8009012:	d004      	beq.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8009014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800901a:	d012      	beq.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800901c:	e07a      	b.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800901e:	4b38      	ldr	r3, [pc, #224]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009026:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800902a:	d107      	bne.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800902c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fd63 	bl	8009afc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800903a:	e294      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800903c:	2300      	movs	r3, #0
 800903e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009040:	e291      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009042:	4b2f      	ldr	r3, [pc, #188]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800904a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800904e:	d107      	bne.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009050:	f107 0318 	add.w	r3, r7, #24
 8009054:	4618      	mov	r0, r3
 8009056:	f000 faa9 	bl	80095ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800905e:	e282      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009060:	2300      	movs	r3, #0
 8009062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009064:	e27f      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009066:	4b26      	ldr	r3, [pc, #152]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800906e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009072:	d107      	bne.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009074:	f107 030c 	add.w	r3, r7, #12
 8009078:	4618      	mov	r0, r3
 800907a:	f000 fbeb 	bl	8009854 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009082:	e270      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009088:	e26d      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800908a:	4b1d      	ldr	r3, [pc, #116]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800908c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800908e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009092:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009094:	4b1a      	ldr	r3, [pc, #104]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0304 	and.w	r3, r3, #4
 800909c:	2b04      	cmp	r3, #4
 800909e:	d10c      	bne.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80090a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d109      	bne.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090a6:	4b16      	ldr	r3, [pc, #88]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	08db      	lsrs	r3, r3, #3
 80090ac:	f003 0303 	and.w	r3, r3, #3
 80090b0:	4a14      	ldr	r2, [pc, #80]	@ (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80090b2:	fa22 f303 	lsr.w	r3, r2, r3
 80090b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090b8:	e01e      	b.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090ba:	4b11      	ldr	r3, [pc, #68]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090c6:	d106      	bne.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80090c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090ce:	d102      	bne.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80090d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80090d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090d4:	e010      	b.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090d6:	4b0a      	ldr	r3, [pc, #40]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090e2:	d106      	bne.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80090e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090ea:	d102      	bne.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80090ec:	4b07      	ldr	r3, [pc, #28]	@ (800910c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090f0:	e002      	b.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80090f6:	e236      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80090f8:	e235      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80090fa:	4b05      	ldr	r3, [pc, #20]	@ (8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80090fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090fe:	e232      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009100:	58024400 	.word	0x58024400
 8009104:	03d09000 	.word	0x03d09000
 8009108:	003d0900 	.word	0x003d0900
 800910c:	016e3600 	.word	0x016e3600
 8009110:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009114:	2300      	movs	r3, #0
 8009116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009118:	e225      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800911a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800911e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009122:	430b      	orrs	r3, r1
 8009124:	f040 8085 	bne.w	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009128:	4b9c      	ldr	r3, [pc, #624]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800912a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800912c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009130:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009138:	d06b      	beq.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800913a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009140:	d874      	bhi.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009144:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009148:	d056      	beq.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800914a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800914c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009150:	d86c      	bhi.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009154:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009158:	d03b      	beq.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800915a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800915c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009160:	d864      	bhi.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009164:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009168:	d021      	beq.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800916a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800916c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009170:	d85c      	bhi.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009174:	2b00      	cmp	r3, #0
 8009176:	d004      	beq.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8009178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800917e:	d004      	beq.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8009180:	e054      	b.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009182:	f7fe fb5f 	bl	8007844 <HAL_RCC_GetPCLK1Freq>
 8009186:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009188:	e1ed      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800918a:	4b84      	ldr	r3, [pc, #528]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009192:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009196:	d107      	bne.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009198:	f107 0318 	add.w	r3, r7, #24
 800919c:	4618      	mov	r0, r3
 800919e:	f000 fa05 	bl	80095ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091a6:	e1de      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091a8:	2300      	movs	r3, #0
 80091aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ac:	e1db      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091ae:	4b7b      	ldr	r3, [pc, #492]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091ba:	d107      	bne.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091bc:	f107 030c 	add.w	r3, r7, #12
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 fb47 	bl	8009854 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091ca:	e1cc      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091cc:	2300      	movs	r3, #0
 80091ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091d0:	e1c9      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091d2:	4b72      	ldr	r3, [pc, #456]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 0304 	and.w	r3, r3, #4
 80091da:	2b04      	cmp	r3, #4
 80091dc:	d109      	bne.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091de:	4b6f      	ldr	r3, [pc, #444]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	08db      	lsrs	r3, r3, #3
 80091e4:	f003 0303 	and.w	r3, r3, #3
 80091e8:	4a6d      	ldr	r2, [pc, #436]	@ (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80091ea:	fa22 f303 	lsr.w	r3, r2, r3
 80091ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091f0:	e1b9      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091f2:	2300      	movs	r3, #0
 80091f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f6:	e1b6      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80091f8:	4b68      	ldr	r3, [pc, #416]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009204:	d102      	bne.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8009206:	4b67      	ldr	r3, [pc, #412]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800920a:	e1ac      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800920c:	2300      	movs	r3, #0
 800920e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009210:	e1a9      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009212:	4b62      	ldr	r3, [pc, #392]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800921a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800921e:	d102      	bne.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8009220:	4b61      	ldr	r3, [pc, #388]	@ (80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009224:	e19f      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009226:	2300      	movs	r3, #0
 8009228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800922a:	e19c      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800922c:	2300      	movs	r3, #0
 800922e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009230:	e199      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009232:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009236:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800923a:	430b      	orrs	r3, r1
 800923c:	d173      	bne.n	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800923e:	4b57      	ldr	r3, [pc, #348]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009242:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009246:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800924e:	d02f      	beq.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8009250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009252:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009256:	d863      	bhi.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8009258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925a:	2b00      	cmp	r3, #0
 800925c:	d004      	beq.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800925e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009264:	d012      	beq.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8009266:	e05b      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009268:	4b4c      	ldr	r3, [pc, #304]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009270:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009274:	d107      	bne.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009276:	f107 0318 	add.w	r3, r7, #24
 800927a:	4618      	mov	r0, r3
 800927c:	f000 f996 	bl	80095ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009284:	e16f      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009286:	2300      	movs	r3, #0
 8009288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800928a:	e16c      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800928c:	4b43      	ldr	r3, [pc, #268]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009298:	d107      	bne.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800929a:	f107 030c 	add.w	r3, r7, #12
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 fad8 	bl	8009854 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092a8:	e15d      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092ae:	e15a      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092b0:	4b3a      	ldr	r3, [pc, #232]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80092b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80092b8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092ba:	4b38      	ldr	r3, [pc, #224]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 0304 	and.w	r3, r3, #4
 80092c2:	2b04      	cmp	r3, #4
 80092c4:	d10c      	bne.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80092c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d109      	bne.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092cc:	4b33      	ldr	r3, [pc, #204]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	08db      	lsrs	r3, r3, #3
 80092d2:	f003 0303 	and.w	r3, r3, #3
 80092d6:	4a32      	ldr	r2, [pc, #200]	@ (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80092d8:	fa22 f303 	lsr.w	r3, r2, r3
 80092dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092de:	e01e      	b.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092e0:	4b2e      	ldr	r3, [pc, #184]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092ec:	d106      	bne.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80092ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092f4:	d102      	bne.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80092f6:	4b2b      	ldr	r3, [pc, #172]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80092f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092fa:	e010      	b.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092fc:	4b27      	ldr	r3, [pc, #156]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009304:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009308:	d106      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800930a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800930c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009310:	d102      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009312:	4b25      	ldr	r3, [pc, #148]	@ (80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009314:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009316:	e002      	b.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009318:	2300      	movs	r3, #0
 800931a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800931c:	e123      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800931e:	e122      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009320:	2300      	movs	r3, #0
 8009322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009324:	e11f      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800932a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800932e:	430b      	orrs	r3, r1
 8009330:	d13c      	bne.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009332:	4b1a      	ldr	r3, [pc, #104]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009336:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800933a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800933c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933e:	2b00      	cmp	r3, #0
 8009340:	d004      	beq.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8009342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009348:	d012      	beq.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800934a:	e023      	b.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800934c:	4b13      	ldr	r3, [pc, #76]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009354:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009358:	d107      	bne.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800935a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800935e:	4618      	mov	r0, r3
 8009360:	f000 fbcc 	bl	8009afc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009368:	e0fd      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800936a:	2300      	movs	r3, #0
 800936c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800936e:	e0fa      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009370:	4b0a      	ldr	r3, [pc, #40]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009378:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800937c:	d107      	bne.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800937e:	f107 0318 	add.w	r3, r7, #24
 8009382:	4618      	mov	r0, r3
 8009384:	f000 f912 	bl	80095ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009388:	6a3b      	ldr	r3, [r7, #32]
 800938a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800938c:	e0eb      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800938e:	2300      	movs	r3, #0
 8009390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009392:	e0e8      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009394:	2300      	movs	r3, #0
 8009396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009398:	e0e5      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800939a:	bf00      	nop
 800939c:	58024400 	.word	0x58024400
 80093a0:	03d09000 	.word	0x03d09000
 80093a4:	003d0900 	.word	0x003d0900
 80093a8:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80093ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093b0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80093b4:	430b      	orrs	r3, r1
 80093b6:	f040 8085 	bne.w	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80093ba:	4b6d      	ldr	r3, [pc, #436]	@ (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093be:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80093c2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80093c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093ca:	d06b      	beq.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80093cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093d2:	d874      	bhi.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80093d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093da:	d056      	beq.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80093dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093e2:	d86c      	bhi.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80093e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80093ea:	d03b      	beq.n	8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80093ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80093f2:	d864      	bhi.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80093f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093fa:	d021      	beq.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80093fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009402:	d85c      	bhi.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009406:	2b00      	cmp	r3, #0
 8009408:	d004      	beq.n	8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800940a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009410:	d004      	beq.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8009412:	e054      	b.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009414:	f000 f8b4 	bl	8009580 <HAL_RCCEx_GetD3PCLK1Freq>
 8009418:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800941a:	e0a4      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800941c:	4b54      	ldr	r3, [pc, #336]	@ (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009424:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009428:	d107      	bne.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800942a:	f107 0318 	add.w	r3, r7, #24
 800942e:	4618      	mov	r0, r3
 8009430:	f000 f8bc 	bl	80095ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009438:	e095      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800943e:	e092      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009440:	4b4b      	ldr	r3, [pc, #300]	@ (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800944c:	d107      	bne.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800944e:	f107 030c 	add.w	r3, r7, #12
 8009452:	4618      	mov	r0, r3
 8009454:	f000 f9fe 	bl	8009854 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800945c:	e083      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800945e:	2300      	movs	r3, #0
 8009460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009462:	e080      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009464:	4b42      	ldr	r3, [pc, #264]	@ (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0304 	and.w	r3, r3, #4
 800946c:	2b04      	cmp	r3, #4
 800946e:	d109      	bne.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009470:	4b3f      	ldr	r3, [pc, #252]	@ (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	08db      	lsrs	r3, r3, #3
 8009476:	f003 0303 	and.w	r3, r3, #3
 800947a:	4a3e      	ldr	r2, [pc, #248]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800947c:	fa22 f303 	lsr.w	r3, r2, r3
 8009480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009482:	e070      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009484:	2300      	movs	r3, #0
 8009486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009488:	e06d      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800948a:	4b39      	ldr	r3, [pc, #228]	@ (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009496:	d102      	bne.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8009498:	4b37      	ldr	r3, [pc, #220]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800949a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800949c:	e063      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800949e:	2300      	movs	r3, #0
 80094a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094a2:	e060      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80094a4:	4b32      	ldr	r3, [pc, #200]	@ (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094b0:	d102      	bne.n	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80094b2:	4b32      	ldr	r3, [pc, #200]	@ (800957c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80094b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094b6:	e056      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094b8:	2300      	movs	r3, #0
 80094ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094bc:	e053      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80094be:	2300      	movs	r3, #0
 80094c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094c2:	e050      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80094c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094c8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80094cc:	430b      	orrs	r3, r1
 80094ce:	d148      	bne.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80094d0:	4b27      	ldr	r3, [pc, #156]	@ (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80094da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094e0:	d02a      	beq.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80094e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094e8:	d838      	bhi.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80094ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d004      	beq.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80094f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094f6:	d00d      	beq.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80094f8:	e030      	b.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80094fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009502:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009506:	d102      	bne.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8009508:	4b1c      	ldr	r3, [pc, #112]	@ (800957c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800950a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800950c:	e02b      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800950e:	2300      	movs	r3, #0
 8009510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009512:	e028      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009514:	4b16      	ldr	r3, [pc, #88]	@ (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800951c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009520:	d107      	bne.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009526:	4618      	mov	r0, r3
 8009528:	f000 fae8 	bl	8009afc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800952c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009530:	e019      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009532:	2300      	movs	r3, #0
 8009534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009536:	e016      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009538:	4b0d      	ldr	r3, [pc, #52]	@ (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009544:	d107      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009546:	f107 0318 	add.w	r3, r7, #24
 800954a:	4618      	mov	r0, r3
 800954c:	f000 f82e 	bl	80095ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009554:	e007      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009556:	2300      	movs	r3, #0
 8009558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800955a:	e004      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800955c:	2300      	movs	r3, #0
 800955e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009560:	e001      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009568:	4618      	mov	r0, r3
 800956a:	3740      	adds	r7, #64	@ 0x40
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	58024400 	.word	0x58024400
 8009574:	03d09000 	.word	0x03d09000
 8009578:	003d0900 	.word	0x003d0900
 800957c:	016e3600 	.word	0x016e3600

08009580 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009584:	f7fe f92e 	bl	80077e4 <HAL_RCC_GetHCLKFreq>
 8009588:	4602      	mov	r2, r0
 800958a:	4b06      	ldr	r3, [pc, #24]	@ (80095a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	091b      	lsrs	r3, r3, #4
 8009590:	f003 0307 	and.w	r3, r3, #7
 8009594:	4904      	ldr	r1, [pc, #16]	@ (80095a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009596:	5ccb      	ldrb	r3, [r1, r3]
 8009598:	f003 031f 	and.w	r3, r3, #31
 800959c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	58024400 	.word	0x58024400
 80095a8:	0800d14c 	.word	0x0800d14c

080095ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b089      	sub	sp, #36	@ 0x24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095b4:	4ba1      	ldr	r3, [pc, #644]	@ (800983c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095b8:	f003 0303 	and.w	r3, r3, #3
 80095bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80095be:	4b9f      	ldr	r3, [pc, #636]	@ (800983c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095c2:	0b1b      	lsrs	r3, r3, #12
 80095c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80095ca:	4b9c      	ldr	r3, [pc, #624]	@ (800983c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ce:	091b      	lsrs	r3, r3, #4
 80095d0:	f003 0301 	and.w	r3, r3, #1
 80095d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80095d6:	4b99      	ldr	r3, [pc, #612]	@ (800983c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095da:	08db      	lsrs	r3, r3, #3
 80095dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	fb02 f303 	mul.w	r3, r2, r3
 80095e6:	ee07 3a90 	vmov	s15, r3
 80095ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f000 8111 	beq.w	800981c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	f000 8083 	beq.w	8009708 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	2b02      	cmp	r3, #2
 8009606:	f200 80a1 	bhi.w	800974c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d003      	beq.n	8009618 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d056      	beq.n	80096c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009616:	e099      	b.n	800974c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009618:	4b88      	ldr	r3, [pc, #544]	@ (800983c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0320 	and.w	r3, r3, #32
 8009620:	2b00      	cmp	r3, #0
 8009622:	d02d      	beq.n	8009680 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009624:	4b85      	ldr	r3, [pc, #532]	@ (800983c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	08db      	lsrs	r3, r3, #3
 800962a:	f003 0303 	and.w	r3, r3, #3
 800962e:	4a84      	ldr	r2, [pc, #528]	@ (8009840 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009630:	fa22 f303 	lsr.w	r3, r2, r3
 8009634:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	ee07 3a90 	vmov	s15, r3
 800963c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800964e:	4b7b      	ldr	r3, [pc, #492]	@ (800983c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009656:	ee07 3a90 	vmov	s15, r3
 800965a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800965e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009662:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800966a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800966e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800967a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800967e:	e087      	b.n	8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	ee07 3a90 	vmov	s15, r3
 8009686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009848 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800968e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009692:	4b6a      	ldr	r3, [pc, #424]	@ (800983c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800969a:	ee07 3a90 	vmov	s15, r3
 800969e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096c2:	e065      	b.n	8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	ee07 3a90 	vmov	s15, r3
 80096ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800984c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096d6:	4b59      	ldr	r3, [pc, #356]	@ (800983c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096de:	ee07 3a90 	vmov	s15, r3
 80096e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009706:	e043      	b.n	8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	ee07 3a90 	vmov	s15, r3
 800970e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009712:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800971a:	4b48      	ldr	r3, [pc, #288]	@ (800983c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800971c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800971e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009722:	ee07 3a90 	vmov	s15, r3
 8009726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800972a:	ed97 6a03 	vldr	s12, [r7, #12]
 800972e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800973a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800973e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800974a:	e021      	b.n	8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	ee07 3a90 	vmov	s15, r3
 8009752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009756:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800984c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800975a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800975e:	4b37      	ldr	r3, [pc, #220]	@ (800983c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009766:	ee07 3a90 	vmov	s15, r3
 800976a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800976e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009772:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800977a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800977e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800978a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800978e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009790:	4b2a      	ldr	r3, [pc, #168]	@ (800983c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009794:	0a5b      	lsrs	r3, r3, #9
 8009796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800979a:	ee07 3a90 	vmov	s15, r3
 800979e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80097ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097b6:	ee17 2a90 	vmov	r2, s15
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80097be:	4b1f      	ldr	r3, [pc, #124]	@ (800983c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c2:	0c1b      	lsrs	r3, r3, #16
 80097c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097c8:	ee07 3a90 	vmov	s15, r3
 80097cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80097dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097e4:	ee17 2a90 	vmov	r2, s15
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80097ec:	4b13      	ldr	r3, [pc, #76]	@ (800983c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f0:	0e1b      	lsrs	r3, r3, #24
 80097f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097f6:	ee07 3a90 	vmov	s15, r3
 80097fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009802:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009806:	edd7 6a07 	vldr	s13, [r7, #28]
 800980a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800980e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009812:	ee17 2a90 	vmov	r2, s15
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800981a:	e008      	b.n	800982e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	609a      	str	r2, [r3, #8]
}
 800982e:	bf00      	nop
 8009830:	3724      	adds	r7, #36	@ 0x24
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	58024400 	.word	0x58024400
 8009840:	03d09000 	.word	0x03d09000
 8009844:	46000000 	.word	0x46000000
 8009848:	4c742400 	.word	0x4c742400
 800984c:	4a742400 	.word	0x4a742400
 8009850:	4bb71b00 	.word	0x4bb71b00

08009854 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009854:	b480      	push	{r7}
 8009856:	b089      	sub	sp, #36	@ 0x24
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800985c:	4ba1      	ldr	r3, [pc, #644]	@ (8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800985e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009860:	f003 0303 	and.w	r3, r3, #3
 8009864:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009866:	4b9f      	ldr	r3, [pc, #636]	@ (8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800986a:	0d1b      	lsrs	r3, r3, #20
 800986c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009870:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009872:	4b9c      	ldr	r3, [pc, #624]	@ (8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009876:	0a1b      	lsrs	r3, r3, #8
 8009878:	f003 0301 	and.w	r3, r3, #1
 800987c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800987e:	4b99      	ldr	r3, [pc, #612]	@ (8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009882:	08db      	lsrs	r3, r3, #3
 8009884:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009888:	693a      	ldr	r2, [r7, #16]
 800988a:	fb02 f303 	mul.w	r3, r2, r3
 800988e:	ee07 3a90 	vmov	s15, r3
 8009892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009896:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 8111 	beq.w	8009ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	f000 8083 	beq.w	80099b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	f200 80a1 	bhi.w	80099f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d003      	beq.n	80098c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d056      	beq.n	800996c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80098be:	e099      	b.n	80099f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098c0:	4b88      	ldr	r3, [pc, #544]	@ (8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 0320 	and.w	r3, r3, #32
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d02d      	beq.n	8009928 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098cc:	4b85      	ldr	r3, [pc, #532]	@ (8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	08db      	lsrs	r3, r3, #3
 80098d2:	f003 0303 	and.w	r3, r3, #3
 80098d6:	4a84      	ldr	r2, [pc, #528]	@ (8009ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80098d8:	fa22 f303 	lsr.w	r3, r2, r3
 80098dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	ee07 3a90 	vmov	s15, r3
 80098e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	ee07 3a90 	vmov	s15, r3
 80098ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098f6:	4b7b      	ldr	r3, [pc, #492]	@ (8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098fe:	ee07 3a90 	vmov	s15, r3
 8009902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009906:	ed97 6a03 	vldr	s12, [r7, #12]
 800990a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800990e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800991a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800991e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009922:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009926:	e087      	b.n	8009a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	ee07 3a90 	vmov	s15, r3
 800992e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009932:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009af0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800993a:	4b6a      	ldr	r3, [pc, #424]	@ (8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800993c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800993e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009942:	ee07 3a90 	vmov	s15, r3
 8009946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800994a:	ed97 6a03 	vldr	s12, [r7, #12]
 800994e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800995a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800995e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800996a:	e065      	b.n	8009a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	ee07 3a90 	vmov	s15, r3
 8009972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009976:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800997a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800997e:	4b59      	ldr	r3, [pc, #356]	@ (8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009986:	ee07 3a90 	vmov	s15, r3
 800998a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800998e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009992:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800999a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800999e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099ae:	e043      	b.n	8009a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	ee07 3a90 	vmov	s15, r3
 80099b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80099be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099c2:	4b48      	ldr	r3, [pc, #288]	@ (8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ca:	ee07 3a90 	vmov	s15, r3
 80099ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80099d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099f2:	e021      	b.n	8009a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	ee07 3a90 	vmov	s15, r3
 80099fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a06:	4b37      	ldr	r3, [pc, #220]	@ (8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a0e:	ee07 3a90 	vmov	s15, r3
 8009a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009a38:	4b2a      	ldr	r3, [pc, #168]	@ (8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a3c:	0a5b      	lsrs	r3, r3, #9
 8009a3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a42:	ee07 3a90 	vmov	s15, r3
 8009a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a52:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a5e:	ee17 2a90 	vmov	r2, s15
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009a66:	4b1f      	ldr	r3, [pc, #124]	@ (8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a6a:	0c1b      	lsrs	r3, r3, #16
 8009a6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a70:	ee07 3a90 	vmov	s15, r3
 8009a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a80:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a8c:	ee17 2a90 	vmov	r2, s15
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009a94:	4b13      	ldr	r3, [pc, #76]	@ (8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a98:	0e1b      	lsrs	r3, r3, #24
 8009a9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a9e:	ee07 3a90 	vmov	s15, r3
 8009aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009aaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009aae:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aba:	ee17 2a90 	vmov	r2, s15
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009ac2:	e008      	b.n	8009ad6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	609a      	str	r2, [r3, #8]
}
 8009ad6:	bf00      	nop
 8009ad8:	3724      	adds	r7, #36	@ 0x24
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	58024400 	.word	0x58024400
 8009ae8:	03d09000 	.word	0x03d09000
 8009aec:	46000000 	.word	0x46000000
 8009af0:	4c742400 	.word	0x4c742400
 8009af4:	4a742400 	.word	0x4a742400
 8009af8:	4bb71b00 	.word	0x4bb71b00

08009afc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b089      	sub	sp, #36	@ 0x24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b04:	4ba0      	ldr	r3, [pc, #640]	@ (8009d88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b08:	f003 0303 	and.w	r3, r3, #3
 8009b0c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009b0e:	4b9e      	ldr	r3, [pc, #632]	@ (8009d88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b12:	091b      	lsrs	r3, r3, #4
 8009b14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b18:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009b1a:	4b9b      	ldr	r3, [pc, #620]	@ (8009d88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b1e:	f003 0301 	and.w	r3, r3, #1
 8009b22:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009b24:	4b98      	ldr	r3, [pc, #608]	@ (8009d88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b28:	08db      	lsrs	r3, r3, #3
 8009b2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	fb02 f303 	mul.w	r3, r2, r3
 8009b34:	ee07 3a90 	vmov	s15, r3
 8009b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f000 8111 	beq.w	8009d6a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	f000 8083 	beq.w	8009c56 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	f200 80a1 	bhi.w	8009c9a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d003      	beq.n	8009b66 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d056      	beq.n	8009c12 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009b64:	e099      	b.n	8009c9a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b66:	4b88      	ldr	r3, [pc, #544]	@ (8009d88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0320 	and.w	r3, r3, #32
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d02d      	beq.n	8009bce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b72:	4b85      	ldr	r3, [pc, #532]	@ (8009d88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	08db      	lsrs	r3, r3, #3
 8009b78:	f003 0303 	and.w	r3, r3, #3
 8009b7c:	4a83      	ldr	r2, [pc, #524]	@ (8009d8c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b82:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	ee07 3a90 	vmov	s15, r3
 8009b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	ee07 3a90 	vmov	s15, r3
 8009b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b9c:	4b7a      	ldr	r3, [pc, #488]	@ (8009d88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba4:	ee07 3a90 	vmov	s15, r3
 8009ba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bac:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bb0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009bb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009bcc:	e087      	b.n	8009cde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	ee07 3a90 	vmov	s15, r3
 8009bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009d94 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009bdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009be0:	4b69      	ldr	r3, [pc, #420]	@ (8009d88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be8:	ee07 3a90 	vmov	s15, r3
 8009bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bf0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bf4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009bf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c10:	e065      	b.n	8009cde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	ee07 3a90 	vmov	s15, r3
 8009c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c1c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009c20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c24:	4b58      	ldr	r3, [pc, #352]	@ (8009d88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c2c:	ee07 3a90 	vmov	s15, r3
 8009c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c34:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c38:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c54:	e043      	b.n	8009cde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	ee07 3a90 	vmov	s15, r3
 8009c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c60:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009c64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c68:	4b47      	ldr	r3, [pc, #284]	@ (8009d88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c70:	ee07 3a90 	vmov	s15, r3
 8009c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c78:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c7c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c98:	e021      	b.n	8009cde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	ee07 3a90 	vmov	s15, r3
 8009ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009d94 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ca8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cac:	4b36      	ldr	r3, [pc, #216]	@ (8009d88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cb4:	ee07 3a90 	vmov	s15, r3
 8009cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cc0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009cc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ccc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cdc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009cde:	4b2a      	ldr	r3, [pc, #168]	@ (8009d88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ce2:	0a5b      	lsrs	r3, r3, #9
 8009ce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ce8:	ee07 3a90 	vmov	s15, r3
 8009cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d04:	ee17 2a90 	vmov	r2, s15
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8009d88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d10:	0c1b      	lsrs	r3, r3, #16
 8009d12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d16:	ee07 3a90 	vmov	s15, r3
 8009d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d26:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d32:	ee17 2a90 	vmov	r2, s15
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009d3a:	4b13      	ldr	r3, [pc, #76]	@ (8009d88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d3e:	0e1b      	lsrs	r3, r3, #24
 8009d40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d44:	ee07 3a90 	vmov	s15, r3
 8009d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d54:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d60:	ee17 2a90 	vmov	r2, s15
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009d68:	e008      	b.n	8009d7c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	609a      	str	r2, [r3, #8]
}
 8009d7c:	bf00      	nop
 8009d7e:	3724      	adds	r7, #36	@ 0x24
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	58024400 	.word	0x58024400
 8009d8c:	03d09000 	.word	0x03d09000
 8009d90:	46000000 	.word	0x46000000
 8009d94:	4c742400 	.word	0x4c742400
 8009d98:	4a742400 	.word	0x4a742400
 8009d9c:	4bb71b00 	.word	0x4bb71b00

08009da0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009dae:	4b53      	ldr	r3, [pc, #332]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db2:	f003 0303 	and.w	r3, r3, #3
 8009db6:	2b03      	cmp	r3, #3
 8009db8:	d101      	bne.n	8009dbe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e099      	b.n	8009ef2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a4e      	ldr	r2, [pc, #312]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009dc4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009dc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dca:	f7f9 f941 	bl	8003050 <HAL_GetTick>
 8009dce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009dd0:	e008      	b.n	8009de4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009dd2:	f7f9 f93d 	bl	8003050 <HAL_GetTick>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	d901      	bls.n	8009de4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009de0:	2303      	movs	r3, #3
 8009de2:	e086      	b.n	8009ef2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009de4:	4b45      	ldr	r3, [pc, #276]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1f0      	bne.n	8009dd2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009df0:	4b42      	ldr	r3, [pc, #264]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	031b      	lsls	r3, r3, #12
 8009dfe:	493f      	ldr	r1, [pc, #252]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e00:	4313      	orrs	r3, r2
 8009e02:	628b      	str	r3, [r1, #40]	@ 0x28
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	3b01      	subs	r3, #1
 8009e14:	025b      	lsls	r3, r3, #9
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	431a      	orrs	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	041b      	lsls	r3, r3, #16
 8009e22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009e26:	431a      	orrs	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	061b      	lsls	r3, r3, #24
 8009e30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009e34:	4931      	ldr	r1, [pc, #196]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e36:	4313      	orrs	r3, r2
 8009e38:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009e3a:	4b30      	ldr	r3, [pc, #192]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	492d      	ldr	r1, [pc, #180]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e50:	f023 0220 	bic.w	r2, r3, #32
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	4928      	ldr	r1, [pc, #160]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e5e:	4b27      	ldr	r3, [pc, #156]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e62:	4a26      	ldr	r2, [pc, #152]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e64:	f023 0310 	bic.w	r3, r3, #16
 8009e68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e6a:	4b24      	ldr	r3, [pc, #144]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e6e:	4b24      	ldr	r3, [pc, #144]	@ (8009f00 <RCCEx_PLL2_Config+0x160>)
 8009e70:	4013      	ands	r3, r2
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	69d2      	ldr	r2, [r2, #28]
 8009e76:	00d2      	lsls	r2, r2, #3
 8009e78:	4920      	ldr	r1, [pc, #128]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e82:	4a1e      	ldr	r2, [pc, #120]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e84:	f043 0310 	orr.w	r3, r3, #16
 8009e88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d106      	bne.n	8009e9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009e90:	4b1a      	ldr	r3, [pc, #104]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e94:	4a19      	ldr	r2, [pc, #100]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009e9c:	e00f      	b.n	8009ebe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d106      	bne.n	8009eb2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009ea4:	4b15      	ldr	r3, [pc, #84]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea8:	4a14      	ldr	r2, [pc, #80]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009eaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009eae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009eb0:	e005      	b.n	8009ebe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009eb2:	4b12      	ldr	r3, [pc, #72]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb6:	4a11      	ldr	r2, [pc, #68]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009eb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009ec4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009eca:	f7f9 f8c1 	bl	8003050 <HAL_GetTick>
 8009ece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ed0:	e008      	b.n	8009ee4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009ed2:	f7f9 f8bd 	bl	8003050 <HAL_GetTick>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d901      	bls.n	8009ee4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e006      	b.n	8009ef2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ee4:	4b05      	ldr	r3, [pc, #20]	@ (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d0f0      	beq.n	8009ed2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	58024400 	.word	0x58024400
 8009f00:	ffff0007 	.word	0xffff0007

08009f04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f12:	4b53      	ldr	r3, [pc, #332]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f16:	f003 0303 	and.w	r3, r3, #3
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	d101      	bne.n	8009f22 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e099      	b.n	800a056 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f22:	4b4f      	ldr	r3, [pc, #316]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a4e      	ldr	r2, [pc, #312]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009f28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f2e:	f7f9 f88f 	bl	8003050 <HAL_GetTick>
 8009f32:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f34:	e008      	b.n	8009f48 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009f36:	f7f9 f88b 	bl	8003050 <HAL_GetTick>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d901      	bls.n	8009f48 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e086      	b.n	800a056 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f48:	4b45      	ldr	r3, [pc, #276]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1f0      	bne.n	8009f36 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f54:	4b42      	ldr	r3, [pc, #264]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f58:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	051b      	lsls	r3, r3, #20
 8009f62:	493f      	ldr	r1, [pc, #252]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009f64:	4313      	orrs	r3, r2
 8009f66:	628b      	str	r3, [r1, #40]	@ 0x28
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	3b01      	subs	r3, #1
 8009f78:	025b      	lsls	r3, r3, #9
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	431a      	orrs	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	3b01      	subs	r3, #1
 8009f84:	041b      	lsls	r3, r3, #16
 8009f86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009f8a:	431a      	orrs	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	3b01      	subs	r3, #1
 8009f92:	061b      	lsls	r3, r3, #24
 8009f94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009f98:	4931      	ldr	r1, [pc, #196]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f9e:	4b30      	ldr	r3, [pc, #192]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	492d      	ldr	r1, [pc, #180]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fac:	4313      	orrs	r3, r2
 8009fae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009fb0:	4b2b      	ldr	r3, [pc, #172]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	699b      	ldr	r3, [r3, #24]
 8009fbc:	4928      	ldr	r1, [pc, #160]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009fc2:	4b27      	ldr	r3, [pc, #156]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc6:	4a26      	ldr	r2, [pc, #152]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009fce:	4b24      	ldr	r3, [pc, #144]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fd2:	4b24      	ldr	r3, [pc, #144]	@ (800a064 <RCCEx_PLL3_Config+0x160>)
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	69d2      	ldr	r2, [r2, #28]
 8009fda:	00d2      	lsls	r2, r2, #3
 8009fdc:	4920      	ldr	r1, [pc, #128]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009fe2:	4b1f      	ldr	r3, [pc, #124]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe6:	4a1e      	ldr	r2, [pc, #120]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d106      	bne.n	800a002 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009ff4:	4b1a      	ldr	r3, [pc, #104]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff8:	4a19      	ldr	r2, [pc, #100]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009ffa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a000:	e00f      	b.n	800a022 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	2b01      	cmp	r3, #1
 800a006:	d106      	bne.n	800a016 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a008:	4b15      	ldr	r3, [pc, #84]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 800a00a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a00c:	4a14      	ldr	r2, [pc, #80]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 800a00e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a012:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a014:	e005      	b.n	800a022 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a016:	4b12      	ldr	r3, [pc, #72]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 800a018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a01a:	4a11      	ldr	r2, [pc, #68]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 800a01c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a020:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a022:	4b0f      	ldr	r3, [pc, #60]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a0e      	ldr	r2, [pc, #56]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 800a028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a02c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a02e:	f7f9 f80f 	bl	8003050 <HAL_GetTick>
 800a032:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a034:	e008      	b.n	800a048 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a036:	f7f9 f80b 	bl	8003050 <HAL_GetTick>
 800a03a:	4602      	mov	r2, r0
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	2b02      	cmp	r3, #2
 800a042:	d901      	bls.n	800a048 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a044:	2303      	movs	r3, #3
 800a046:	e006      	b.n	800a056 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a048:	4b05      	ldr	r3, [pc, #20]	@ (800a060 <RCCEx_PLL3_Config+0x15c>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d0f0      	beq.n	800a036 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a054:	7bfb      	ldrb	r3, [r7, #15]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	58024400 	.word	0x58024400
 800a064:	ffff0007 	.word	0xffff0007

0800a068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d101      	bne.n	800a07a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	e049      	b.n	800a10e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a080:	b2db      	uxtb	r3, r3
 800a082:	2b00      	cmp	r3, #0
 800a084:	d106      	bne.n	800a094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f7f8 fd80 	bl	8002b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2202      	movs	r2, #2
 800a098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	4610      	mov	r0, r2
 800a0a8:	f000 fac6 	bl	800a638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b082      	sub	sp, #8
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d101      	bne.n	800a128 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	e049      	b.n	800a1bc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	2b00      	cmp	r3, #0
 800a132:	d106      	bne.n	800a142 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 f841 	bl	800a1c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2202      	movs	r2, #2
 800a146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	3304      	adds	r3, #4
 800a152:	4619      	mov	r1, r3
 800a154:	4610      	mov	r0, r2
 800a156:	f000 fa6f 	bl	800a638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2201      	movs	r2, #1
 800a176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2201      	movs	r2, #1
 800a19e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d109      	bne.n	800a1fc <HAL_TIM_PWM_Start+0x24>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	bf14      	ite	ne
 800a1f4:	2301      	movne	r3, #1
 800a1f6:	2300      	moveq	r3, #0
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	e03c      	b.n	800a276 <HAL_TIM_PWM_Start+0x9e>
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	2b04      	cmp	r3, #4
 800a200:	d109      	bne.n	800a216 <HAL_TIM_PWM_Start+0x3e>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	bf14      	ite	ne
 800a20e:	2301      	movne	r3, #1
 800a210:	2300      	moveq	r3, #0
 800a212:	b2db      	uxtb	r3, r3
 800a214:	e02f      	b.n	800a276 <HAL_TIM_PWM_Start+0x9e>
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	2b08      	cmp	r3, #8
 800a21a:	d109      	bne.n	800a230 <HAL_TIM_PWM_Start+0x58>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a222:	b2db      	uxtb	r3, r3
 800a224:	2b01      	cmp	r3, #1
 800a226:	bf14      	ite	ne
 800a228:	2301      	movne	r3, #1
 800a22a:	2300      	moveq	r3, #0
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	e022      	b.n	800a276 <HAL_TIM_PWM_Start+0x9e>
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	2b0c      	cmp	r3, #12
 800a234:	d109      	bne.n	800a24a <HAL_TIM_PWM_Start+0x72>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b01      	cmp	r3, #1
 800a240:	bf14      	ite	ne
 800a242:	2301      	movne	r3, #1
 800a244:	2300      	moveq	r3, #0
 800a246:	b2db      	uxtb	r3, r3
 800a248:	e015      	b.n	800a276 <HAL_TIM_PWM_Start+0x9e>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b10      	cmp	r3, #16
 800a24e:	d109      	bne.n	800a264 <HAL_TIM_PWM_Start+0x8c>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a256:	b2db      	uxtb	r3, r3
 800a258:	2b01      	cmp	r3, #1
 800a25a:	bf14      	ite	ne
 800a25c:	2301      	movne	r3, #1
 800a25e:	2300      	moveq	r3, #0
 800a260:	b2db      	uxtb	r3, r3
 800a262:	e008      	b.n	800a276 <HAL_TIM_PWM_Start+0x9e>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	bf14      	ite	ne
 800a270:	2301      	movne	r3, #1
 800a272:	2300      	moveq	r3, #0
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b00      	cmp	r3, #0
 800a278:	d001      	beq.n	800a27e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e0ab      	b.n	800a3d6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d104      	bne.n	800a28e <HAL_TIM_PWM_Start+0xb6>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2202      	movs	r2, #2
 800a288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a28c:	e023      	b.n	800a2d6 <HAL_TIM_PWM_Start+0xfe>
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	2b04      	cmp	r3, #4
 800a292:	d104      	bne.n	800a29e <HAL_TIM_PWM_Start+0xc6>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2202      	movs	r2, #2
 800a298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a29c:	e01b      	b.n	800a2d6 <HAL_TIM_PWM_Start+0xfe>
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	2b08      	cmp	r3, #8
 800a2a2:	d104      	bne.n	800a2ae <HAL_TIM_PWM_Start+0xd6>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2202      	movs	r2, #2
 800a2a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2ac:	e013      	b.n	800a2d6 <HAL_TIM_PWM_Start+0xfe>
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	2b0c      	cmp	r3, #12
 800a2b2:	d104      	bne.n	800a2be <HAL_TIM_PWM_Start+0xe6>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2bc:	e00b      	b.n	800a2d6 <HAL_TIM_PWM_Start+0xfe>
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b10      	cmp	r3, #16
 800a2c2:	d104      	bne.n	800a2ce <HAL_TIM_PWM_Start+0xf6>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2202      	movs	r2, #2
 800a2c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2cc:	e003      	b.n	800a2d6 <HAL_TIM_PWM_Start+0xfe>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2202      	movs	r2, #2
 800a2d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	6839      	ldr	r1, [r7, #0]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 fd2c 	bl	800ad3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a3d      	ldr	r2, [pc, #244]	@ (800a3e0 <HAL_TIM_PWM_Start+0x208>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d013      	beq.n	800a316 <HAL_TIM_PWM_Start+0x13e>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a3c      	ldr	r2, [pc, #240]	@ (800a3e4 <HAL_TIM_PWM_Start+0x20c>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d00e      	beq.n	800a316 <HAL_TIM_PWM_Start+0x13e>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a3a      	ldr	r2, [pc, #232]	@ (800a3e8 <HAL_TIM_PWM_Start+0x210>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d009      	beq.n	800a316 <HAL_TIM_PWM_Start+0x13e>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a39      	ldr	r2, [pc, #228]	@ (800a3ec <HAL_TIM_PWM_Start+0x214>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d004      	beq.n	800a316 <HAL_TIM_PWM_Start+0x13e>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a37      	ldr	r2, [pc, #220]	@ (800a3f0 <HAL_TIM_PWM_Start+0x218>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d101      	bne.n	800a31a <HAL_TIM_PWM_Start+0x142>
 800a316:	2301      	movs	r3, #1
 800a318:	e000      	b.n	800a31c <HAL_TIM_PWM_Start+0x144>
 800a31a:	2300      	movs	r3, #0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d007      	beq.n	800a330 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a32e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a2a      	ldr	r2, [pc, #168]	@ (800a3e0 <HAL_TIM_PWM_Start+0x208>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d02c      	beq.n	800a394 <HAL_TIM_PWM_Start+0x1bc>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a342:	d027      	beq.n	800a394 <HAL_TIM_PWM_Start+0x1bc>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a2a      	ldr	r2, [pc, #168]	@ (800a3f4 <HAL_TIM_PWM_Start+0x21c>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d022      	beq.n	800a394 <HAL_TIM_PWM_Start+0x1bc>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a29      	ldr	r2, [pc, #164]	@ (800a3f8 <HAL_TIM_PWM_Start+0x220>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d01d      	beq.n	800a394 <HAL_TIM_PWM_Start+0x1bc>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a27      	ldr	r2, [pc, #156]	@ (800a3fc <HAL_TIM_PWM_Start+0x224>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d018      	beq.n	800a394 <HAL_TIM_PWM_Start+0x1bc>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a1f      	ldr	r2, [pc, #124]	@ (800a3e4 <HAL_TIM_PWM_Start+0x20c>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d013      	beq.n	800a394 <HAL_TIM_PWM_Start+0x1bc>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a23      	ldr	r2, [pc, #140]	@ (800a400 <HAL_TIM_PWM_Start+0x228>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d00e      	beq.n	800a394 <HAL_TIM_PWM_Start+0x1bc>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a1b      	ldr	r2, [pc, #108]	@ (800a3e8 <HAL_TIM_PWM_Start+0x210>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d009      	beq.n	800a394 <HAL_TIM_PWM_Start+0x1bc>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a1f      	ldr	r2, [pc, #124]	@ (800a404 <HAL_TIM_PWM_Start+0x22c>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d004      	beq.n	800a394 <HAL_TIM_PWM_Start+0x1bc>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a1e      	ldr	r2, [pc, #120]	@ (800a408 <HAL_TIM_PWM_Start+0x230>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d115      	bne.n	800a3c0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	689a      	ldr	r2, [r3, #8]
 800a39a:	4b1c      	ldr	r3, [pc, #112]	@ (800a40c <HAL_TIM_PWM_Start+0x234>)
 800a39c:	4013      	ands	r3, r2
 800a39e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2b06      	cmp	r3, #6
 800a3a4:	d015      	beq.n	800a3d2 <HAL_TIM_PWM_Start+0x1fa>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3ac:	d011      	beq.n	800a3d2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f042 0201 	orr.w	r2, r2, #1
 800a3bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3be:	e008      	b.n	800a3d2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f042 0201 	orr.w	r2, r2, #1
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	e000      	b.n	800a3d4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	40010000 	.word	0x40010000
 800a3e4:	40010400 	.word	0x40010400
 800a3e8:	40014000 	.word	0x40014000
 800a3ec:	40014400 	.word	0x40014400
 800a3f0:	40014800 	.word	0x40014800
 800a3f4:	40000400 	.word	0x40000400
 800a3f8:	40000800 	.word	0x40000800
 800a3fc:	40000c00 	.word	0x40000c00
 800a400:	40001800 	.word	0x40001800
 800a404:	4000e000 	.word	0x4000e000
 800a408:	4000e400 	.word	0x4000e400
 800a40c:	00010007 	.word	0x00010007

0800a410 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a41c:	2300      	movs	r3, #0
 800a41e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a426:	2b01      	cmp	r3, #1
 800a428:	d101      	bne.n	800a42e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a42a:	2302      	movs	r3, #2
 800a42c:	e0ff      	b.n	800a62e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2201      	movs	r2, #1
 800a432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2b14      	cmp	r3, #20
 800a43a:	f200 80f0 	bhi.w	800a61e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a43e:	a201      	add	r2, pc, #4	@ (adr r2, 800a444 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a444:	0800a499 	.word	0x0800a499
 800a448:	0800a61f 	.word	0x0800a61f
 800a44c:	0800a61f 	.word	0x0800a61f
 800a450:	0800a61f 	.word	0x0800a61f
 800a454:	0800a4d9 	.word	0x0800a4d9
 800a458:	0800a61f 	.word	0x0800a61f
 800a45c:	0800a61f 	.word	0x0800a61f
 800a460:	0800a61f 	.word	0x0800a61f
 800a464:	0800a51b 	.word	0x0800a51b
 800a468:	0800a61f 	.word	0x0800a61f
 800a46c:	0800a61f 	.word	0x0800a61f
 800a470:	0800a61f 	.word	0x0800a61f
 800a474:	0800a55b 	.word	0x0800a55b
 800a478:	0800a61f 	.word	0x0800a61f
 800a47c:	0800a61f 	.word	0x0800a61f
 800a480:	0800a61f 	.word	0x0800a61f
 800a484:	0800a59d 	.word	0x0800a59d
 800a488:	0800a61f 	.word	0x0800a61f
 800a48c:	0800a61f 	.word	0x0800a61f
 800a490:	0800a61f 	.word	0x0800a61f
 800a494:	0800a5dd 	.word	0x0800a5dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68b9      	ldr	r1, [r7, #8]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 f976 	bl	800a790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	699a      	ldr	r2, [r3, #24]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f042 0208 	orr.w	r2, r2, #8
 800a4b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	699a      	ldr	r2, [r3, #24]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f022 0204 	bic.w	r2, r2, #4
 800a4c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6999      	ldr	r1, [r3, #24]
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	691a      	ldr	r2, [r3, #16]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	430a      	orrs	r2, r1
 800a4d4:	619a      	str	r2, [r3, #24]
      break;
 800a4d6:	e0a5      	b.n	800a624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68b9      	ldr	r1, [r7, #8]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f000 f9e6 	bl	800a8b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	699a      	ldr	r2, [r3, #24]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a4f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	699a      	ldr	r2, [r3, #24]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	6999      	ldr	r1, [r3, #24]
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	021a      	lsls	r2, r3, #8
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	430a      	orrs	r2, r1
 800a516:	619a      	str	r2, [r3, #24]
      break;
 800a518:	e084      	b.n	800a624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68b9      	ldr	r1, [r7, #8]
 800a520:	4618      	mov	r0, r3
 800a522:	f000 fa4f 	bl	800a9c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	69da      	ldr	r2, [r3, #28]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f042 0208 	orr.w	r2, r2, #8
 800a534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	69da      	ldr	r2, [r3, #28]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f022 0204 	bic.w	r2, r2, #4
 800a544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	69d9      	ldr	r1, [r3, #28]
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	691a      	ldr	r2, [r3, #16]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	430a      	orrs	r2, r1
 800a556:	61da      	str	r2, [r3, #28]
      break;
 800a558:	e064      	b.n	800a624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68b9      	ldr	r1, [r7, #8]
 800a560:	4618      	mov	r0, r3
 800a562:	f000 fab7 	bl	800aad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	69da      	ldr	r2, [r3, #28]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	69da      	ldr	r2, [r3, #28]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	69d9      	ldr	r1, [r3, #28]
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	021a      	lsls	r2, r3, #8
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	430a      	orrs	r2, r1
 800a598:	61da      	str	r2, [r3, #28]
      break;
 800a59a:	e043      	b.n	800a624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68b9      	ldr	r1, [r7, #8]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f000 fb00 	bl	800aba8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f042 0208 	orr.w	r2, r2, #8
 800a5b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f022 0204 	bic.w	r2, r2, #4
 800a5c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	691a      	ldr	r2, [r3, #16]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	430a      	orrs	r2, r1
 800a5d8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a5da:	e023      	b.n	800a624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	68b9      	ldr	r1, [r7, #8]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f000 fb44 	bl	800ac70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a606:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	021a      	lsls	r2, r3, #8
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	430a      	orrs	r2, r1
 800a61a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a61c:	e002      	b.n	800a624 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	75fb      	strb	r3, [r7, #23]
      break;
 800a622:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a62c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3718      	adds	r7, #24
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop

0800a638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	4a47      	ldr	r2, [pc, #284]	@ (800a768 <TIM_Base_SetConfig+0x130>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d013      	beq.n	800a678 <TIM_Base_SetConfig+0x40>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a656:	d00f      	beq.n	800a678 <TIM_Base_SetConfig+0x40>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	4a44      	ldr	r2, [pc, #272]	@ (800a76c <TIM_Base_SetConfig+0x134>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d00b      	beq.n	800a678 <TIM_Base_SetConfig+0x40>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a43      	ldr	r2, [pc, #268]	@ (800a770 <TIM_Base_SetConfig+0x138>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d007      	beq.n	800a678 <TIM_Base_SetConfig+0x40>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a42      	ldr	r2, [pc, #264]	@ (800a774 <TIM_Base_SetConfig+0x13c>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d003      	beq.n	800a678 <TIM_Base_SetConfig+0x40>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	4a41      	ldr	r2, [pc, #260]	@ (800a778 <TIM_Base_SetConfig+0x140>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d108      	bne.n	800a68a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a67e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	4313      	orrs	r3, r2
 800a688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a36      	ldr	r2, [pc, #216]	@ (800a768 <TIM_Base_SetConfig+0x130>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d027      	beq.n	800a6e2 <TIM_Base_SetConfig+0xaa>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a698:	d023      	beq.n	800a6e2 <TIM_Base_SetConfig+0xaa>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a33      	ldr	r2, [pc, #204]	@ (800a76c <TIM_Base_SetConfig+0x134>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d01f      	beq.n	800a6e2 <TIM_Base_SetConfig+0xaa>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a32      	ldr	r2, [pc, #200]	@ (800a770 <TIM_Base_SetConfig+0x138>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d01b      	beq.n	800a6e2 <TIM_Base_SetConfig+0xaa>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4a31      	ldr	r2, [pc, #196]	@ (800a774 <TIM_Base_SetConfig+0x13c>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d017      	beq.n	800a6e2 <TIM_Base_SetConfig+0xaa>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	4a30      	ldr	r2, [pc, #192]	@ (800a778 <TIM_Base_SetConfig+0x140>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d013      	beq.n	800a6e2 <TIM_Base_SetConfig+0xaa>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	4a2f      	ldr	r2, [pc, #188]	@ (800a77c <TIM_Base_SetConfig+0x144>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d00f      	beq.n	800a6e2 <TIM_Base_SetConfig+0xaa>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4a2e      	ldr	r2, [pc, #184]	@ (800a780 <TIM_Base_SetConfig+0x148>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d00b      	beq.n	800a6e2 <TIM_Base_SetConfig+0xaa>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a2d      	ldr	r2, [pc, #180]	@ (800a784 <TIM_Base_SetConfig+0x14c>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d007      	beq.n	800a6e2 <TIM_Base_SetConfig+0xaa>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	4a2c      	ldr	r2, [pc, #176]	@ (800a788 <TIM_Base_SetConfig+0x150>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d003      	beq.n	800a6e2 <TIM_Base_SetConfig+0xaa>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a2b      	ldr	r2, [pc, #172]	@ (800a78c <TIM_Base_SetConfig+0x154>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d108      	bne.n	800a6f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a6e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	695b      	ldr	r3, [r3, #20]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	689a      	ldr	r2, [r3, #8]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a14      	ldr	r2, [pc, #80]	@ (800a768 <TIM_Base_SetConfig+0x130>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d00f      	beq.n	800a73a <TIM_Base_SetConfig+0x102>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4a16      	ldr	r2, [pc, #88]	@ (800a778 <TIM_Base_SetConfig+0x140>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d00b      	beq.n	800a73a <TIM_Base_SetConfig+0x102>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4a15      	ldr	r2, [pc, #84]	@ (800a77c <TIM_Base_SetConfig+0x144>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d007      	beq.n	800a73a <TIM_Base_SetConfig+0x102>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4a14      	ldr	r2, [pc, #80]	@ (800a780 <TIM_Base_SetConfig+0x148>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d003      	beq.n	800a73a <TIM_Base_SetConfig+0x102>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4a13      	ldr	r2, [pc, #76]	@ (800a784 <TIM_Base_SetConfig+0x14c>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d103      	bne.n	800a742 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	691a      	ldr	r2, [r3, #16]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f043 0204 	orr.w	r2, r3, #4
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2201      	movs	r2, #1
 800a752:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	68fa      	ldr	r2, [r7, #12]
 800a758:	601a      	str	r2, [r3, #0]
}
 800a75a:	bf00      	nop
 800a75c:	3714      	adds	r7, #20
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	40010000 	.word	0x40010000
 800a76c:	40000400 	.word	0x40000400
 800a770:	40000800 	.word	0x40000800
 800a774:	40000c00 	.word	0x40000c00
 800a778:	40010400 	.word	0x40010400
 800a77c:	40014000 	.word	0x40014000
 800a780:	40014400 	.word	0x40014400
 800a784:	40014800 	.word	0x40014800
 800a788:	4000e000 	.word	0x4000e000
 800a78c:	4000e400 	.word	0x4000e400

0800a790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a790:	b480      	push	{r7}
 800a792:	b087      	sub	sp, #28
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a1b      	ldr	r3, [r3, #32]
 800a79e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a1b      	ldr	r3, [r3, #32]
 800a7a4:	f023 0201 	bic.w	r2, r3, #1
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	4b37      	ldr	r3, [pc, #220]	@ (800a898 <TIM_OC1_SetConfig+0x108>)
 800a7bc:	4013      	ands	r3, r2
 800a7be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f023 0303 	bic.w	r3, r3, #3
 800a7c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	f023 0302 	bic.w	r3, r3, #2
 800a7d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	697a      	ldr	r2, [r7, #20]
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a2d      	ldr	r2, [pc, #180]	@ (800a89c <TIM_OC1_SetConfig+0x10c>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d00f      	beq.n	800a80c <TIM_OC1_SetConfig+0x7c>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4a2c      	ldr	r2, [pc, #176]	@ (800a8a0 <TIM_OC1_SetConfig+0x110>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d00b      	beq.n	800a80c <TIM_OC1_SetConfig+0x7c>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4a2b      	ldr	r2, [pc, #172]	@ (800a8a4 <TIM_OC1_SetConfig+0x114>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d007      	beq.n	800a80c <TIM_OC1_SetConfig+0x7c>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4a2a      	ldr	r2, [pc, #168]	@ (800a8a8 <TIM_OC1_SetConfig+0x118>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d003      	beq.n	800a80c <TIM_OC1_SetConfig+0x7c>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4a29      	ldr	r2, [pc, #164]	@ (800a8ac <TIM_OC1_SetConfig+0x11c>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d10c      	bne.n	800a826 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	f023 0308 	bic.w	r3, r3, #8
 800a812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	697a      	ldr	r2, [r7, #20]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	f023 0304 	bic.w	r3, r3, #4
 800a824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a1c      	ldr	r2, [pc, #112]	@ (800a89c <TIM_OC1_SetConfig+0x10c>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d00f      	beq.n	800a84e <TIM_OC1_SetConfig+0xbe>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a1b      	ldr	r2, [pc, #108]	@ (800a8a0 <TIM_OC1_SetConfig+0x110>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d00b      	beq.n	800a84e <TIM_OC1_SetConfig+0xbe>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a1a      	ldr	r2, [pc, #104]	@ (800a8a4 <TIM_OC1_SetConfig+0x114>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d007      	beq.n	800a84e <TIM_OC1_SetConfig+0xbe>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4a19      	ldr	r2, [pc, #100]	@ (800a8a8 <TIM_OC1_SetConfig+0x118>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d003      	beq.n	800a84e <TIM_OC1_SetConfig+0xbe>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4a18      	ldr	r2, [pc, #96]	@ (800a8ac <TIM_OC1_SetConfig+0x11c>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d111      	bne.n	800a872 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a85c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	695b      	ldr	r3, [r3, #20]
 800a862:	693a      	ldr	r2, [r7, #16]
 800a864:	4313      	orrs	r3, r2
 800a866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	4313      	orrs	r3, r2
 800a870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	693a      	ldr	r2, [r7, #16]
 800a876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	685a      	ldr	r2, [r3, #4]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	697a      	ldr	r2, [r7, #20]
 800a88a:	621a      	str	r2, [r3, #32]
}
 800a88c:	bf00      	nop
 800a88e:	371c      	adds	r7, #28
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr
 800a898:	fffeff8f 	.word	0xfffeff8f
 800a89c:	40010000 	.word	0x40010000
 800a8a0:	40010400 	.word	0x40010400
 800a8a4:	40014000 	.word	0x40014000
 800a8a8:	40014400 	.word	0x40014400
 800a8ac:	40014800 	.word	0x40014800

0800a8b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b087      	sub	sp, #28
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a1b      	ldr	r3, [r3, #32]
 800a8be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a1b      	ldr	r3, [r3, #32]
 800a8c4:	f023 0210 	bic.w	r2, r3, #16
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	699b      	ldr	r3, [r3, #24]
 800a8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	4b34      	ldr	r3, [pc, #208]	@ (800a9ac <TIM_OC2_SetConfig+0xfc>)
 800a8dc:	4013      	ands	r3, r2
 800a8de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	021b      	lsls	r3, r3, #8
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	f023 0320 	bic.w	r3, r3, #32
 800a8fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	011b      	lsls	r3, r3, #4
 800a902:	697a      	ldr	r2, [r7, #20]
 800a904:	4313      	orrs	r3, r2
 800a906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a29      	ldr	r2, [pc, #164]	@ (800a9b0 <TIM_OC2_SetConfig+0x100>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d003      	beq.n	800a918 <TIM_OC2_SetConfig+0x68>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a28      	ldr	r2, [pc, #160]	@ (800a9b4 <TIM_OC2_SetConfig+0x104>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d10d      	bne.n	800a934 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a91e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	011b      	lsls	r3, r3, #4
 800a926:	697a      	ldr	r2, [r7, #20]
 800a928:	4313      	orrs	r3, r2
 800a92a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a932:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a1e      	ldr	r2, [pc, #120]	@ (800a9b0 <TIM_OC2_SetConfig+0x100>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d00f      	beq.n	800a95c <TIM_OC2_SetConfig+0xac>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a1d      	ldr	r2, [pc, #116]	@ (800a9b4 <TIM_OC2_SetConfig+0x104>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d00b      	beq.n	800a95c <TIM_OC2_SetConfig+0xac>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4a1c      	ldr	r2, [pc, #112]	@ (800a9b8 <TIM_OC2_SetConfig+0x108>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d007      	beq.n	800a95c <TIM_OC2_SetConfig+0xac>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4a1b      	ldr	r2, [pc, #108]	@ (800a9bc <TIM_OC2_SetConfig+0x10c>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d003      	beq.n	800a95c <TIM_OC2_SetConfig+0xac>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4a1a      	ldr	r2, [pc, #104]	@ (800a9c0 <TIM_OC2_SetConfig+0x110>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d113      	bne.n	800a984 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a962:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a96a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	695b      	ldr	r3, [r3, #20]
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	693a      	ldr	r2, [r7, #16]
 800a974:	4313      	orrs	r3, r2
 800a976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	699b      	ldr	r3, [r3, #24]
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	4313      	orrs	r3, r2
 800a982:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	693a      	ldr	r2, [r7, #16]
 800a988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	685a      	ldr	r2, [r3, #4]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	621a      	str	r2, [r3, #32]
}
 800a99e:	bf00      	nop
 800a9a0:	371c      	adds	r7, #28
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	feff8fff 	.word	0xfeff8fff
 800a9b0:	40010000 	.word	0x40010000
 800a9b4:	40010400 	.word	0x40010400
 800a9b8:	40014000 	.word	0x40014000
 800a9bc:	40014400 	.word	0x40014400
 800a9c0:	40014800 	.word	0x40014800

0800a9c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b087      	sub	sp, #28
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a1b      	ldr	r3, [r3, #32]
 800a9d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a1b      	ldr	r3, [r3, #32]
 800a9d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	69db      	ldr	r3, [r3, #28]
 800a9ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	4b33      	ldr	r3, [pc, #204]	@ (800aabc <TIM_OC3_SetConfig+0xf8>)
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f023 0303 	bic.w	r3, r3, #3
 800a9fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aa0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	021b      	lsls	r3, r3, #8
 800aa14:	697a      	ldr	r2, [r7, #20]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4a28      	ldr	r2, [pc, #160]	@ (800aac0 <TIM_OC3_SetConfig+0xfc>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d003      	beq.n	800aa2a <TIM_OC3_SetConfig+0x66>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4a27      	ldr	r2, [pc, #156]	@ (800aac4 <TIM_OC3_SetConfig+0x100>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d10d      	bne.n	800aa46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aa30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	021b      	lsls	r3, r3, #8
 800aa38:	697a      	ldr	r2, [r7, #20]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aa44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a1d      	ldr	r2, [pc, #116]	@ (800aac0 <TIM_OC3_SetConfig+0xfc>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d00f      	beq.n	800aa6e <TIM_OC3_SetConfig+0xaa>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a1c      	ldr	r2, [pc, #112]	@ (800aac4 <TIM_OC3_SetConfig+0x100>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d00b      	beq.n	800aa6e <TIM_OC3_SetConfig+0xaa>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a1b      	ldr	r2, [pc, #108]	@ (800aac8 <TIM_OC3_SetConfig+0x104>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d007      	beq.n	800aa6e <TIM_OC3_SetConfig+0xaa>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a1a      	ldr	r2, [pc, #104]	@ (800aacc <TIM_OC3_SetConfig+0x108>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d003      	beq.n	800aa6e <TIM_OC3_SetConfig+0xaa>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a19      	ldr	r2, [pc, #100]	@ (800aad0 <TIM_OC3_SetConfig+0x10c>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d113      	bne.n	800aa96 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	695b      	ldr	r3, [r3, #20]
 800aa82:	011b      	lsls	r3, r3, #4
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	011b      	lsls	r3, r3, #4
 800aa90:	693a      	ldr	r2, [r7, #16]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	685a      	ldr	r2, [r3, #4]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	697a      	ldr	r2, [r7, #20]
 800aaae:	621a      	str	r2, [r3, #32]
}
 800aab0:	bf00      	nop
 800aab2:	371c      	adds	r7, #28
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr
 800aabc:	fffeff8f 	.word	0xfffeff8f
 800aac0:	40010000 	.word	0x40010000
 800aac4:	40010400 	.word	0x40010400
 800aac8:	40014000 	.word	0x40014000
 800aacc:	40014400 	.word	0x40014400
 800aad0:	40014800 	.word	0x40014800

0800aad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b087      	sub	sp, #28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a1b      	ldr	r3, [r3, #32]
 800aae8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	69db      	ldr	r3, [r3, #28]
 800aafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	4b24      	ldr	r3, [pc, #144]	@ (800ab90 <TIM_OC4_SetConfig+0xbc>)
 800ab00:	4013      	ands	r3, r2
 800ab02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	021b      	lsls	r3, r3, #8
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ab1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	031b      	lsls	r3, r3, #12
 800ab26:	693a      	ldr	r2, [r7, #16]
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a19      	ldr	r2, [pc, #100]	@ (800ab94 <TIM_OC4_SetConfig+0xc0>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d00f      	beq.n	800ab54 <TIM_OC4_SetConfig+0x80>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a18      	ldr	r2, [pc, #96]	@ (800ab98 <TIM_OC4_SetConfig+0xc4>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d00b      	beq.n	800ab54 <TIM_OC4_SetConfig+0x80>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a17      	ldr	r2, [pc, #92]	@ (800ab9c <TIM_OC4_SetConfig+0xc8>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d007      	beq.n	800ab54 <TIM_OC4_SetConfig+0x80>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a16      	ldr	r2, [pc, #88]	@ (800aba0 <TIM_OC4_SetConfig+0xcc>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d003      	beq.n	800ab54 <TIM_OC4_SetConfig+0x80>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a15      	ldr	r2, [pc, #84]	@ (800aba4 <TIM_OC4_SetConfig+0xd0>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d109      	bne.n	800ab68 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	019b      	lsls	r3, r3, #6
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	4313      	orrs	r3, r2
 800ab66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	697a      	ldr	r2, [r7, #20]
 800ab6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	68fa      	ldr	r2, [r7, #12]
 800ab72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	685a      	ldr	r2, [r3, #4]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	693a      	ldr	r2, [r7, #16]
 800ab80:	621a      	str	r2, [r3, #32]
}
 800ab82:	bf00      	nop
 800ab84:	371c      	adds	r7, #28
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	feff8fff 	.word	0xfeff8fff
 800ab94:	40010000 	.word	0x40010000
 800ab98:	40010400 	.word	0x40010400
 800ab9c:	40014000 	.word	0x40014000
 800aba0:	40014400 	.word	0x40014400
 800aba4:	40014800 	.word	0x40014800

0800aba8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b087      	sub	sp, #28
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a1b      	ldr	r3, [r3, #32]
 800abbc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	4b21      	ldr	r3, [pc, #132]	@ (800ac58 <TIM_OC5_SetConfig+0xb0>)
 800abd4:	4013      	ands	r3, r2
 800abd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	4313      	orrs	r3, r2
 800abe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800abe8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	041b      	lsls	r3, r3, #16
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a18      	ldr	r2, [pc, #96]	@ (800ac5c <TIM_OC5_SetConfig+0xb4>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d00f      	beq.n	800ac1e <TIM_OC5_SetConfig+0x76>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a17      	ldr	r2, [pc, #92]	@ (800ac60 <TIM_OC5_SetConfig+0xb8>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d00b      	beq.n	800ac1e <TIM_OC5_SetConfig+0x76>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a16      	ldr	r2, [pc, #88]	@ (800ac64 <TIM_OC5_SetConfig+0xbc>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d007      	beq.n	800ac1e <TIM_OC5_SetConfig+0x76>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a15      	ldr	r2, [pc, #84]	@ (800ac68 <TIM_OC5_SetConfig+0xc0>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d003      	beq.n	800ac1e <TIM_OC5_SetConfig+0x76>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a14      	ldr	r2, [pc, #80]	@ (800ac6c <TIM_OC5_SetConfig+0xc4>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d109      	bne.n	800ac32 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	695b      	ldr	r3, [r3, #20]
 800ac2a:	021b      	lsls	r3, r3, #8
 800ac2c:	697a      	ldr	r2, [r7, #20]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	697a      	ldr	r2, [r7, #20]
 800ac36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	621a      	str	r2, [r3, #32]
}
 800ac4c:	bf00      	nop
 800ac4e:	371c      	adds	r7, #28
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr
 800ac58:	fffeff8f 	.word	0xfffeff8f
 800ac5c:	40010000 	.word	0x40010000
 800ac60:	40010400 	.word	0x40010400
 800ac64:	40014000 	.word	0x40014000
 800ac68:	40014400 	.word	0x40014400
 800ac6c:	40014800 	.word	0x40014800

0800ac70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b087      	sub	sp, #28
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a1b      	ldr	r3, [r3, #32]
 800ac7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a1b      	ldr	r3, [r3, #32]
 800ac84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	4b22      	ldr	r3, [pc, #136]	@ (800ad24 <TIM_OC6_SetConfig+0xb4>)
 800ac9c:	4013      	ands	r3, r2
 800ac9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	021b      	lsls	r3, r3, #8
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800acb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	051b      	lsls	r3, r3, #20
 800acba:	693a      	ldr	r2, [r7, #16]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a19      	ldr	r2, [pc, #100]	@ (800ad28 <TIM_OC6_SetConfig+0xb8>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d00f      	beq.n	800ace8 <TIM_OC6_SetConfig+0x78>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4a18      	ldr	r2, [pc, #96]	@ (800ad2c <TIM_OC6_SetConfig+0xbc>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d00b      	beq.n	800ace8 <TIM_OC6_SetConfig+0x78>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4a17      	ldr	r2, [pc, #92]	@ (800ad30 <TIM_OC6_SetConfig+0xc0>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d007      	beq.n	800ace8 <TIM_OC6_SetConfig+0x78>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	4a16      	ldr	r2, [pc, #88]	@ (800ad34 <TIM_OC6_SetConfig+0xc4>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d003      	beq.n	800ace8 <TIM_OC6_SetConfig+0x78>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	4a15      	ldr	r2, [pc, #84]	@ (800ad38 <TIM_OC6_SetConfig+0xc8>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d109      	bne.n	800acfc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800acee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	695b      	ldr	r3, [r3, #20]
 800acf4:	029b      	lsls	r3, r3, #10
 800acf6:	697a      	ldr	r2, [r7, #20]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	697a      	ldr	r2, [r7, #20]
 800ad00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	685a      	ldr	r2, [r3, #4]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	693a      	ldr	r2, [r7, #16]
 800ad14:	621a      	str	r2, [r3, #32]
}
 800ad16:	bf00      	nop
 800ad18:	371c      	adds	r7, #28
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	feff8fff 	.word	0xfeff8fff
 800ad28:	40010000 	.word	0x40010000
 800ad2c:	40010400 	.word	0x40010400
 800ad30:	40014000 	.word	0x40014000
 800ad34:	40014400 	.word	0x40014400
 800ad38:	40014800 	.word	0x40014800

0800ad3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b087      	sub	sp, #28
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	f003 031f 	and.w	r3, r3, #31
 800ad4e:	2201      	movs	r2, #1
 800ad50:	fa02 f303 	lsl.w	r3, r2, r3
 800ad54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6a1a      	ldr	r2, [r3, #32]
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	43db      	mvns	r3, r3
 800ad5e:	401a      	ands	r2, r3
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6a1a      	ldr	r2, [r3, #32]
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	f003 031f 	and.w	r3, r3, #31
 800ad6e:	6879      	ldr	r1, [r7, #4]
 800ad70:	fa01 f303 	lsl.w	r3, r1, r3
 800ad74:	431a      	orrs	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	621a      	str	r2, [r3, #32]
}
 800ad7a:	bf00      	nop
 800ad7c:	371c      	adds	r7, #28
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
	...

0800ad88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ad92:	2300      	movs	r3, #0
 800ad94:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d101      	bne.n	800ada4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ada0:	2302      	movs	r3, #2
 800ada2:	e073      	b.n	800ae8c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	4313      	orrs	r3, r2
 800add4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	4313      	orrs	r3, r2
 800adf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	695b      	ldr	r3, [r3, #20]
 800adfc:	4313      	orrs	r3, r2
 800adfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	041b      	lsls	r3, r3, #16
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	69db      	ldr	r3, [r3, #28]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a19      	ldr	r2, [pc, #100]	@ (800ae98 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d004      	beq.n	800ae40 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a18      	ldr	r2, [pc, #96]	@ (800ae9c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d11c      	bne.n	800ae7a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae4a:	051b      	lsls	r3, r3, #20
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	6a1b      	ldr	r3, [r3, #32]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae76:	4313      	orrs	r3, r2
 800ae78:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr
 800ae98:	40010000 	.word	0x40010000
 800ae9c:	40010400 	.word	0x40010400

0800aea0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d101      	bne.n	800aeb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e042      	b.n	800af38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d106      	bne.n	800aeca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7f7 fec3 	bl	8002c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2224      	movs	r2, #36	@ 0x24
 800aece:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f022 0201 	bic.w	r2, r2, #1
 800aee0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d002      	beq.n	800aef0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 ff38 	bl	800bd60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f8c9 	bl	800b088 <UART_SetConfig>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d101      	bne.n	800af00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	e01b      	b.n	800af38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	685a      	ldr	r2, [r3, #4]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800af0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	689a      	ldr	r2, [r3, #8]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800af1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f042 0201 	orr.w	r2, r2, #1
 800af2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 ffb7 	bl	800bea4 <UART_CheckIdleState>
 800af36:	4603      	mov	r3, r0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b08a      	sub	sp, #40	@ 0x28
 800af44:	af02      	add	r7, sp, #8
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	603b      	str	r3, [r7, #0]
 800af4c:	4613      	mov	r3, r2
 800af4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af56:	2b20      	cmp	r3, #32
 800af58:	d17b      	bne.n	800b052 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d002      	beq.n	800af66 <HAL_UART_Transmit+0x26>
 800af60:	88fb      	ldrh	r3, [r7, #6]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d101      	bne.n	800af6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	e074      	b.n	800b054 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2221      	movs	r2, #33	@ 0x21
 800af76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af7a:	f7f8 f869 	bl	8003050 <HAL_GetTick>
 800af7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	88fa      	ldrh	r2, [r7, #6]
 800af84:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	88fa      	ldrh	r2, [r7, #6]
 800af8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af98:	d108      	bne.n	800afac <HAL_UART_Transmit+0x6c>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d104      	bne.n	800afac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	61bb      	str	r3, [r7, #24]
 800afaa:	e003      	b.n	800afb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800afb0:	2300      	movs	r3, #0
 800afb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800afb4:	e030      	b.n	800b018 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	9300      	str	r3, [sp, #0]
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	2200      	movs	r2, #0
 800afbe:	2180      	movs	r1, #128	@ 0x80
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f001 f819 	bl	800bff8 <UART_WaitOnFlagUntilTimeout>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d005      	beq.n	800afd8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2220      	movs	r2, #32
 800afd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800afd4:	2303      	movs	r3, #3
 800afd6:	e03d      	b.n	800b054 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d10b      	bne.n	800aff6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	881b      	ldrh	r3, [r3, #0]
 800afe2:	461a      	mov	r2, r3
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800afec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	3302      	adds	r3, #2
 800aff2:	61bb      	str	r3, [r7, #24]
 800aff4:	e007      	b.n	800b006 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	781a      	ldrb	r2, [r3, #0]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	3301      	adds	r3, #1
 800b004:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	3b01      	subs	r3, #1
 800b010:	b29a      	uxth	r2, r3
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b01e:	b29b      	uxth	r3, r3
 800b020:	2b00      	cmp	r3, #0
 800b022:	d1c8      	bne.n	800afb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	2200      	movs	r2, #0
 800b02c:	2140      	movs	r1, #64	@ 0x40
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f000 ffe2 	bl	800bff8 <UART_WaitOnFlagUntilTimeout>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d005      	beq.n	800b046 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2220      	movs	r2, #32
 800b03e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b042:	2303      	movs	r3, #3
 800b044:	e006      	b.n	800b054 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2220      	movs	r2, #32
 800b04a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b04e:	2300      	movs	r3, #0
 800b050:	e000      	b.n	800b054 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b052:	2302      	movs	r3, #2
  }
}
 800b054:	4618      	mov	r0, r3
 800b056:	3720      	adds	r7, #32
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b06a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b072:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	4313      	orrs	r3, r2
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3714      	adds	r7, #20
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
	...

0800b088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b08c:	b092      	sub	sp, #72	@ 0x48
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b092:	2300      	movs	r3, #0
 800b094:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	689a      	ldr	r2, [r3, #8]
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	431a      	orrs	r2, r3
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	695b      	ldr	r3, [r3, #20]
 800b0a6:	431a      	orrs	r2, r3
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	69db      	ldr	r3, [r3, #28]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	4bbe      	ldr	r3, [pc, #760]	@ (800b3b0 <UART_SetConfig+0x328>)
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	6812      	ldr	r2, [r2, #0]
 800b0be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b0c0:	430b      	orrs	r3, r1
 800b0c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	68da      	ldr	r2, [r3, #12]
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	430a      	orrs	r2, r1
 800b0d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	699b      	ldr	r3, [r3, #24]
 800b0de:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4ab3      	ldr	r2, [pc, #716]	@ (800b3b4 <UART_SetConfig+0x32c>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d004      	beq.n	800b0f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	6a1b      	ldr	r3, [r3, #32]
 800b0ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	689a      	ldr	r2, [r3, #8]
 800b0fa:	4baf      	ldr	r3, [pc, #700]	@ (800b3b8 <UART_SetConfig+0x330>)
 800b0fc:	4013      	ands	r3, r2
 800b0fe:	697a      	ldr	r2, [r7, #20]
 800b100:	6812      	ldr	r2, [r2, #0]
 800b102:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b104:	430b      	orrs	r3, r1
 800b106:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b10e:	f023 010f 	bic.w	r1, r3, #15
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	430a      	orrs	r2, r1
 800b11c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4aa6      	ldr	r2, [pc, #664]	@ (800b3bc <UART_SetConfig+0x334>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d177      	bne.n	800b218 <UART_SetConfig+0x190>
 800b128:	4ba5      	ldr	r3, [pc, #660]	@ (800b3c0 <UART_SetConfig+0x338>)
 800b12a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b12c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b130:	2b28      	cmp	r3, #40	@ 0x28
 800b132:	d86d      	bhi.n	800b210 <UART_SetConfig+0x188>
 800b134:	a201      	add	r2, pc, #4	@ (adr r2, 800b13c <UART_SetConfig+0xb4>)
 800b136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b13a:	bf00      	nop
 800b13c:	0800b1e1 	.word	0x0800b1e1
 800b140:	0800b211 	.word	0x0800b211
 800b144:	0800b211 	.word	0x0800b211
 800b148:	0800b211 	.word	0x0800b211
 800b14c:	0800b211 	.word	0x0800b211
 800b150:	0800b211 	.word	0x0800b211
 800b154:	0800b211 	.word	0x0800b211
 800b158:	0800b211 	.word	0x0800b211
 800b15c:	0800b1e9 	.word	0x0800b1e9
 800b160:	0800b211 	.word	0x0800b211
 800b164:	0800b211 	.word	0x0800b211
 800b168:	0800b211 	.word	0x0800b211
 800b16c:	0800b211 	.word	0x0800b211
 800b170:	0800b211 	.word	0x0800b211
 800b174:	0800b211 	.word	0x0800b211
 800b178:	0800b211 	.word	0x0800b211
 800b17c:	0800b1f1 	.word	0x0800b1f1
 800b180:	0800b211 	.word	0x0800b211
 800b184:	0800b211 	.word	0x0800b211
 800b188:	0800b211 	.word	0x0800b211
 800b18c:	0800b211 	.word	0x0800b211
 800b190:	0800b211 	.word	0x0800b211
 800b194:	0800b211 	.word	0x0800b211
 800b198:	0800b211 	.word	0x0800b211
 800b19c:	0800b1f9 	.word	0x0800b1f9
 800b1a0:	0800b211 	.word	0x0800b211
 800b1a4:	0800b211 	.word	0x0800b211
 800b1a8:	0800b211 	.word	0x0800b211
 800b1ac:	0800b211 	.word	0x0800b211
 800b1b0:	0800b211 	.word	0x0800b211
 800b1b4:	0800b211 	.word	0x0800b211
 800b1b8:	0800b211 	.word	0x0800b211
 800b1bc:	0800b201 	.word	0x0800b201
 800b1c0:	0800b211 	.word	0x0800b211
 800b1c4:	0800b211 	.word	0x0800b211
 800b1c8:	0800b211 	.word	0x0800b211
 800b1cc:	0800b211 	.word	0x0800b211
 800b1d0:	0800b211 	.word	0x0800b211
 800b1d4:	0800b211 	.word	0x0800b211
 800b1d8:	0800b211 	.word	0x0800b211
 800b1dc:	0800b209 	.word	0x0800b209
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1e6:	e326      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b1e8:	2304      	movs	r3, #4
 800b1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ee:	e322      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b1f0:	2308      	movs	r3, #8
 800b1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1f6:	e31e      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b1f8:	2310      	movs	r3, #16
 800b1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1fe:	e31a      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b200:	2320      	movs	r3, #32
 800b202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b206:	e316      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b208:	2340      	movs	r3, #64	@ 0x40
 800b20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b20e:	e312      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b210:	2380      	movs	r3, #128	@ 0x80
 800b212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b216:	e30e      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a69      	ldr	r2, [pc, #420]	@ (800b3c4 <UART_SetConfig+0x33c>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d130      	bne.n	800b284 <UART_SetConfig+0x1fc>
 800b222:	4b67      	ldr	r3, [pc, #412]	@ (800b3c0 <UART_SetConfig+0x338>)
 800b224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b226:	f003 0307 	and.w	r3, r3, #7
 800b22a:	2b05      	cmp	r3, #5
 800b22c:	d826      	bhi.n	800b27c <UART_SetConfig+0x1f4>
 800b22e:	a201      	add	r2, pc, #4	@ (adr r2, 800b234 <UART_SetConfig+0x1ac>)
 800b230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b234:	0800b24d 	.word	0x0800b24d
 800b238:	0800b255 	.word	0x0800b255
 800b23c:	0800b25d 	.word	0x0800b25d
 800b240:	0800b265 	.word	0x0800b265
 800b244:	0800b26d 	.word	0x0800b26d
 800b248:	0800b275 	.word	0x0800b275
 800b24c:	2300      	movs	r3, #0
 800b24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b252:	e2f0      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b254:	2304      	movs	r3, #4
 800b256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b25a:	e2ec      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b25c:	2308      	movs	r3, #8
 800b25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b262:	e2e8      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b264:	2310      	movs	r3, #16
 800b266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b26a:	e2e4      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b26c:	2320      	movs	r3, #32
 800b26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b272:	e2e0      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b274:	2340      	movs	r3, #64	@ 0x40
 800b276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b27a:	e2dc      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b27c:	2380      	movs	r3, #128	@ 0x80
 800b27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b282:	e2d8      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a4f      	ldr	r2, [pc, #316]	@ (800b3c8 <UART_SetConfig+0x340>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d130      	bne.n	800b2f0 <UART_SetConfig+0x268>
 800b28e:	4b4c      	ldr	r3, [pc, #304]	@ (800b3c0 <UART_SetConfig+0x338>)
 800b290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b292:	f003 0307 	and.w	r3, r3, #7
 800b296:	2b05      	cmp	r3, #5
 800b298:	d826      	bhi.n	800b2e8 <UART_SetConfig+0x260>
 800b29a:	a201      	add	r2, pc, #4	@ (adr r2, 800b2a0 <UART_SetConfig+0x218>)
 800b29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a0:	0800b2b9 	.word	0x0800b2b9
 800b2a4:	0800b2c1 	.word	0x0800b2c1
 800b2a8:	0800b2c9 	.word	0x0800b2c9
 800b2ac:	0800b2d1 	.word	0x0800b2d1
 800b2b0:	0800b2d9 	.word	0x0800b2d9
 800b2b4:	0800b2e1 	.word	0x0800b2e1
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2be:	e2ba      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b2c0:	2304      	movs	r3, #4
 800b2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2c6:	e2b6      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b2c8:	2308      	movs	r3, #8
 800b2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ce:	e2b2      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b2d0:	2310      	movs	r3, #16
 800b2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2d6:	e2ae      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b2d8:	2320      	movs	r3, #32
 800b2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2de:	e2aa      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b2e0:	2340      	movs	r3, #64	@ 0x40
 800b2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2e6:	e2a6      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b2e8:	2380      	movs	r3, #128	@ 0x80
 800b2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ee:	e2a2      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a35      	ldr	r2, [pc, #212]	@ (800b3cc <UART_SetConfig+0x344>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d130      	bne.n	800b35c <UART_SetConfig+0x2d4>
 800b2fa:	4b31      	ldr	r3, [pc, #196]	@ (800b3c0 <UART_SetConfig+0x338>)
 800b2fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2fe:	f003 0307 	and.w	r3, r3, #7
 800b302:	2b05      	cmp	r3, #5
 800b304:	d826      	bhi.n	800b354 <UART_SetConfig+0x2cc>
 800b306:	a201      	add	r2, pc, #4	@ (adr r2, 800b30c <UART_SetConfig+0x284>)
 800b308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b30c:	0800b325 	.word	0x0800b325
 800b310:	0800b32d 	.word	0x0800b32d
 800b314:	0800b335 	.word	0x0800b335
 800b318:	0800b33d 	.word	0x0800b33d
 800b31c:	0800b345 	.word	0x0800b345
 800b320:	0800b34d 	.word	0x0800b34d
 800b324:	2300      	movs	r3, #0
 800b326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b32a:	e284      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b32c:	2304      	movs	r3, #4
 800b32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b332:	e280      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b334:	2308      	movs	r3, #8
 800b336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b33a:	e27c      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b33c:	2310      	movs	r3, #16
 800b33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b342:	e278      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b344:	2320      	movs	r3, #32
 800b346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b34a:	e274      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b34c:	2340      	movs	r3, #64	@ 0x40
 800b34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b352:	e270      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b354:	2380      	movs	r3, #128	@ 0x80
 800b356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b35a:	e26c      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a1b      	ldr	r2, [pc, #108]	@ (800b3d0 <UART_SetConfig+0x348>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d142      	bne.n	800b3ec <UART_SetConfig+0x364>
 800b366:	4b16      	ldr	r3, [pc, #88]	@ (800b3c0 <UART_SetConfig+0x338>)
 800b368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b36a:	f003 0307 	and.w	r3, r3, #7
 800b36e:	2b05      	cmp	r3, #5
 800b370:	d838      	bhi.n	800b3e4 <UART_SetConfig+0x35c>
 800b372:	a201      	add	r2, pc, #4	@ (adr r2, 800b378 <UART_SetConfig+0x2f0>)
 800b374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b378:	0800b391 	.word	0x0800b391
 800b37c:	0800b399 	.word	0x0800b399
 800b380:	0800b3a1 	.word	0x0800b3a1
 800b384:	0800b3a9 	.word	0x0800b3a9
 800b388:	0800b3d5 	.word	0x0800b3d5
 800b38c:	0800b3dd 	.word	0x0800b3dd
 800b390:	2300      	movs	r3, #0
 800b392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b396:	e24e      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b398:	2304      	movs	r3, #4
 800b39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b39e:	e24a      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b3a0:	2308      	movs	r3, #8
 800b3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3a6:	e246      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b3a8:	2310      	movs	r3, #16
 800b3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ae:	e242      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b3b0:	cfff69f3 	.word	0xcfff69f3
 800b3b4:	58000c00 	.word	0x58000c00
 800b3b8:	11fff4ff 	.word	0x11fff4ff
 800b3bc:	40011000 	.word	0x40011000
 800b3c0:	58024400 	.word	0x58024400
 800b3c4:	40004400 	.word	0x40004400
 800b3c8:	40004800 	.word	0x40004800
 800b3cc:	40004c00 	.word	0x40004c00
 800b3d0:	40005000 	.word	0x40005000
 800b3d4:	2320      	movs	r3, #32
 800b3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3da:	e22c      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b3dc:	2340      	movs	r3, #64	@ 0x40
 800b3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3e2:	e228      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b3e4:	2380      	movs	r3, #128	@ 0x80
 800b3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ea:	e224      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4ab1      	ldr	r2, [pc, #708]	@ (800b6b8 <UART_SetConfig+0x630>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d176      	bne.n	800b4e4 <UART_SetConfig+0x45c>
 800b3f6:	4bb1      	ldr	r3, [pc, #708]	@ (800b6bc <UART_SetConfig+0x634>)
 800b3f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b3fe:	2b28      	cmp	r3, #40	@ 0x28
 800b400:	d86c      	bhi.n	800b4dc <UART_SetConfig+0x454>
 800b402:	a201      	add	r2, pc, #4	@ (adr r2, 800b408 <UART_SetConfig+0x380>)
 800b404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b408:	0800b4ad 	.word	0x0800b4ad
 800b40c:	0800b4dd 	.word	0x0800b4dd
 800b410:	0800b4dd 	.word	0x0800b4dd
 800b414:	0800b4dd 	.word	0x0800b4dd
 800b418:	0800b4dd 	.word	0x0800b4dd
 800b41c:	0800b4dd 	.word	0x0800b4dd
 800b420:	0800b4dd 	.word	0x0800b4dd
 800b424:	0800b4dd 	.word	0x0800b4dd
 800b428:	0800b4b5 	.word	0x0800b4b5
 800b42c:	0800b4dd 	.word	0x0800b4dd
 800b430:	0800b4dd 	.word	0x0800b4dd
 800b434:	0800b4dd 	.word	0x0800b4dd
 800b438:	0800b4dd 	.word	0x0800b4dd
 800b43c:	0800b4dd 	.word	0x0800b4dd
 800b440:	0800b4dd 	.word	0x0800b4dd
 800b444:	0800b4dd 	.word	0x0800b4dd
 800b448:	0800b4bd 	.word	0x0800b4bd
 800b44c:	0800b4dd 	.word	0x0800b4dd
 800b450:	0800b4dd 	.word	0x0800b4dd
 800b454:	0800b4dd 	.word	0x0800b4dd
 800b458:	0800b4dd 	.word	0x0800b4dd
 800b45c:	0800b4dd 	.word	0x0800b4dd
 800b460:	0800b4dd 	.word	0x0800b4dd
 800b464:	0800b4dd 	.word	0x0800b4dd
 800b468:	0800b4c5 	.word	0x0800b4c5
 800b46c:	0800b4dd 	.word	0x0800b4dd
 800b470:	0800b4dd 	.word	0x0800b4dd
 800b474:	0800b4dd 	.word	0x0800b4dd
 800b478:	0800b4dd 	.word	0x0800b4dd
 800b47c:	0800b4dd 	.word	0x0800b4dd
 800b480:	0800b4dd 	.word	0x0800b4dd
 800b484:	0800b4dd 	.word	0x0800b4dd
 800b488:	0800b4cd 	.word	0x0800b4cd
 800b48c:	0800b4dd 	.word	0x0800b4dd
 800b490:	0800b4dd 	.word	0x0800b4dd
 800b494:	0800b4dd 	.word	0x0800b4dd
 800b498:	0800b4dd 	.word	0x0800b4dd
 800b49c:	0800b4dd 	.word	0x0800b4dd
 800b4a0:	0800b4dd 	.word	0x0800b4dd
 800b4a4:	0800b4dd 	.word	0x0800b4dd
 800b4a8:	0800b4d5 	.word	0x0800b4d5
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4b2:	e1c0      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b4b4:	2304      	movs	r3, #4
 800b4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ba:	e1bc      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b4bc:	2308      	movs	r3, #8
 800b4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4c2:	e1b8      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b4c4:	2310      	movs	r3, #16
 800b4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ca:	e1b4      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b4cc:	2320      	movs	r3, #32
 800b4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4d2:	e1b0      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b4d4:	2340      	movs	r3, #64	@ 0x40
 800b4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4da:	e1ac      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b4dc:	2380      	movs	r3, #128	@ 0x80
 800b4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4e2:	e1a8      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a75      	ldr	r2, [pc, #468]	@ (800b6c0 <UART_SetConfig+0x638>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d130      	bne.n	800b550 <UART_SetConfig+0x4c8>
 800b4ee:	4b73      	ldr	r3, [pc, #460]	@ (800b6bc <UART_SetConfig+0x634>)
 800b4f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4f2:	f003 0307 	and.w	r3, r3, #7
 800b4f6:	2b05      	cmp	r3, #5
 800b4f8:	d826      	bhi.n	800b548 <UART_SetConfig+0x4c0>
 800b4fa:	a201      	add	r2, pc, #4	@ (adr r2, 800b500 <UART_SetConfig+0x478>)
 800b4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b500:	0800b519 	.word	0x0800b519
 800b504:	0800b521 	.word	0x0800b521
 800b508:	0800b529 	.word	0x0800b529
 800b50c:	0800b531 	.word	0x0800b531
 800b510:	0800b539 	.word	0x0800b539
 800b514:	0800b541 	.word	0x0800b541
 800b518:	2300      	movs	r3, #0
 800b51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b51e:	e18a      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b520:	2304      	movs	r3, #4
 800b522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b526:	e186      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b528:	2308      	movs	r3, #8
 800b52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b52e:	e182      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b530:	2310      	movs	r3, #16
 800b532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b536:	e17e      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b538:	2320      	movs	r3, #32
 800b53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b53e:	e17a      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b540:	2340      	movs	r3, #64	@ 0x40
 800b542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b546:	e176      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b548:	2380      	movs	r3, #128	@ 0x80
 800b54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b54e:	e172      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a5b      	ldr	r2, [pc, #364]	@ (800b6c4 <UART_SetConfig+0x63c>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d130      	bne.n	800b5bc <UART_SetConfig+0x534>
 800b55a:	4b58      	ldr	r3, [pc, #352]	@ (800b6bc <UART_SetConfig+0x634>)
 800b55c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b55e:	f003 0307 	and.w	r3, r3, #7
 800b562:	2b05      	cmp	r3, #5
 800b564:	d826      	bhi.n	800b5b4 <UART_SetConfig+0x52c>
 800b566:	a201      	add	r2, pc, #4	@ (adr r2, 800b56c <UART_SetConfig+0x4e4>)
 800b568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56c:	0800b585 	.word	0x0800b585
 800b570:	0800b58d 	.word	0x0800b58d
 800b574:	0800b595 	.word	0x0800b595
 800b578:	0800b59d 	.word	0x0800b59d
 800b57c:	0800b5a5 	.word	0x0800b5a5
 800b580:	0800b5ad 	.word	0x0800b5ad
 800b584:	2300      	movs	r3, #0
 800b586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b58a:	e154      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b58c:	2304      	movs	r3, #4
 800b58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b592:	e150      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b594:	2308      	movs	r3, #8
 800b596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b59a:	e14c      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b59c:	2310      	movs	r3, #16
 800b59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5a2:	e148      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b5a4:	2320      	movs	r3, #32
 800b5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5aa:	e144      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b5ac:	2340      	movs	r3, #64	@ 0x40
 800b5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5b2:	e140      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b5b4:	2380      	movs	r3, #128	@ 0x80
 800b5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ba:	e13c      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a41      	ldr	r2, [pc, #260]	@ (800b6c8 <UART_SetConfig+0x640>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	f040 8082 	bne.w	800b6cc <UART_SetConfig+0x644>
 800b5c8:	4b3c      	ldr	r3, [pc, #240]	@ (800b6bc <UART_SetConfig+0x634>)
 800b5ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b5d0:	2b28      	cmp	r3, #40	@ 0x28
 800b5d2:	d86d      	bhi.n	800b6b0 <UART_SetConfig+0x628>
 800b5d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b5dc <UART_SetConfig+0x554>)
 800b5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5da:	bf00      	nop
 800b5dc:	0800b681 	.word	0x0800b681
 800b5e0:	0800b6b1 	.word	0x0800b6b1
 800b5e4:	0800b6b1 	.word	0x0800b6b1
 800b5e8:	0800b6b1 	.word	0x0800b6b1
 800b5ec:	0800b6b1 	.word	0x0800b6b1
 800b5f0:	0800b6b1 	.word	0x0800b6b1
 800b5f4:	0800b6b1 	.word	0x0800b6b1
 800b5f8:	0800b6b1 	.word	0x0800b6b1
 800b5fc:	0800b689 	.word	0x0800b689
 800b600:	0800b6b1 	.word	0x0800b6b1
 800b604:	0800b6b1 	.word	0x0800b6b1
 800b608:	0800b6b1 	.word	0x0800b6b1
 800b60c:	0800b6b1 	.word	0x0800b6b1
 800b610:	0800b6b1 	.word	0x0800b6b1
 800b614:	0800b6b1 	.word	0x0800b6b1
 800b618:	0800b6b1 	.word	0x0800b6b1
 800b61c:	0800b691 	.word	0x0800b691
 800b620:	0800b6b1 	.word	0x0800b6b1
 800b624:	0800b6b1 	.word	0x0800b6b1
 800b628:	0800b6b1 	.word	0x0800b6b1
 800b62c:	0800b6b1 	.word	0x0800b6b1
 800b630:	0800b6b1 	.word	0x0800b6b1
 800b634:	0800b6b1 	.word	0x0800b6b1
 800b638:	0800b6b1 	.word	0x0800b6b1
 800b63c:	0800b699 	.word	0x0800b699
 800b640:	0800b6b1 	.word	0x0800b6b1
 800b644:	0800b6b1 	.word	0x0800b6b1
 800b648:	0800b6b1 	.word	0x0800b6b1
 800b64c:	0800b6b1 	.word	0x0800b6b1
 800b650:	0800b6b1 	.word	0x0800b6b1
 800b654:	0800b6b1 	.word	0x0800b6b1
 800b658:	0800b6b1 	.word	0x0800b6b1
 800b65c:	0800b6a1 	.word	0x0800b6a1
 800b660:	0800b6b1 	.word	0x0800b6b1
 800b664:	0800b6b1 	.word	0x0800b6b1
 800b668:	0800b6b1 	.word	0x0800b6b1
 800b66c:	0800b6b1 	.word	0x0800b6b1
 800b670:	0800b6b1 	.word	0x0800b6b1
 800b674:	0800b6b1 	.word	0x0800b6b1
 800b678:	0800b6b1 	.word	0x0800b6b1
 800b67c:	0800b6a9 	.word	0x0800b6a9
 800b680:	2301      	movs	r3, #1
 800b682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b686:	e0d6      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b688:	2304      	movs	r3, #4
 800b68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b68e:	e0d2      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b690:	2308      	movs	r3, #8
 800b692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b696:	e0ce      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b698:	2310      	movs	r3, #16
 800b69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b69e:	e0ca      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b6a0:	2320      	movs	r3, #32
 800b6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6a6:	e0c6      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b6a8:	2340      	movs	r3, #64	@ 0x40
 800b6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ae:	e0c2      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b6b0:	2380      	movs	r3, #128	@ 0x80
 800b6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6b6:	e0be      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b6b8:	40011400 	.word	0x40011400
 800b6bc:	58024400 	.word	0x58024400
 800b6c0:	40007800 	.word	0x40007800
 800b6c4:	40007c00 	.word	0x40007c00
 800b6c8:	40011800 	.word	0x40011800
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4aad      	ldr	r2, [pc, #692]	@ (800b988 <UART_SetConfig+0x900>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d176      	bne.n	800b7c4 <UART_SetConfig+0x73c>
 800b6d6:	4bad      	ldr	r3, [pc, #692]	@ (800b98c <UART_SetConfig+0x904>)
 800b6d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b6de:	2b28      	cmp	r3, #40	@ 0x28
 800b6e0:	d86c      	bhi.n	800b7bc <UART_SetConfig+0x734>
 800b6e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b6e8 <UART_SetConfig+0x660>)
 800b6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e8:	0800b78d 	.word	0x0800b78d
 800b6ec:	0800b7bd 	.word	0x0800b7bd
 800b6f0:	0800b7bd 	.word	0x0800b7bd
 800b6f4:	0800b7bd 	.word	0x0800b7bd
 800b6f8:	0800b7bd 	.word	0x0800b7bd
 800b6fc:	0800b7bd 	.word	0x0800b7bd
 800b700:	0800b7bd 	.word	0x0800b7bd
 800b704:	0800b7bd 	.word	0x0800b7bd
 800b708:	0800b795 	.word	0x0800b795
 800b70c:	0800b7bd 	.word	0x0800b7bd
 800b710:	0800b7bd 	.word	0x0800b7bd
 800b714:	0800b7bd 	.word	0x0800b7bd
 800b718:	0800b7bd 	.word	0x0800b7bd
 800b71c:	0800b7bd 	.word	0x0800b7bd
 800b720:	0800b7bd 	.word	0x0800b7bd
 800b724:	0800b7bd 	.word	0x0800b7bd
 800b728:	0800b79d 	.word	0x0800b79d
 800b72c:	0800b7bd 	.word	0x0800b7bd
 800b730:	0800b7bd 	.word	0x0800b7bd
 800b734:	0800b7bd 	.word	0x0800b7bd
 800b738:	0800b7bd 	.word	0x0800b7bd
 800b73c:	0800b7bd 	.word	0x0800b7bd
 800b740:	0800b7bd 	.word	0x0800b7bd
 800b744:	0800b7bd 	.word	0x0800b7bd
 800b748:	0800b7a5 	.word	0x0800b7a5
 800b74c:	0800b7bd 	.word	0x0800b7bd
 800b750:	0800b7bd 	.word	0x0800b7bd
 800b754:	0800b7bd 	.word	0x0800b7bd
 800b758:	0800b7bd 	.word	0x0800b7bd
 800b75c:	0800b7bd 	.word	0x0800b7bd
 800b760:	0800b7bd 	.word	0x0800b7bd
 800b764:	0800b7bd 	.word	0x0800b7bd
 800b768:	0800b7ad 	.word	0x0800b7ad
 800b76c:	0800b7bd 	.word	0x0800b7bd
 800b770:	0800b7bd 	.word	0x0800b7bd
 800b774:	0800b7bd 	.word	0x0800b7bd
 800b778:	0800b7bd 	.word	0x0800b7bd
 800b77c:	0800b7bd 	.word	0x0800b7bd
 800b780:	0800b7bd 	.word	0x0800b7bd
 800b784:	0800b7bd 	.word	0x0800b7bd
 800b788:	0800b7b5 	.word	0x0800b7b5
 800b78c:	2301      	movs	r3, #1
 800b78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b792:	e050      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b794:	2304      	movs	r3, #4
 800b796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b79a:	e04c      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b79c:	2308      	movs	r3, #8
 800b79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7a2:	e048      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b7a4:	2310      	movs	r3, #16
 800b7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7aa:	e044      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b7ac:	2320      	movs	r3, #32
 800b7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7b2:	e040      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b7b4:	2340      	movs	r3, #64	@ 0x40
 800b7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ba:	e03c      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b7bc:	2380      	movs	r3, #128	@ 0x80
 800b7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7c2:	e038      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a71      	ldr	r2, [pc, #452]	@ (800b990 <UART_SetConfig+0x908>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d130      	bne.n	800b830 <UART_SetConfig+0x7a8>
 800b7ce:	4b6f      	ldr	r3, [pc, #444]	@ (800b98c <UART_SetConfig+0x904>)
 800b7d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7d2:	f003 0307 	and.w	r3, r3, #7
 800b7d6:	2b05      	cmp	r3, #5
 800b7d8:	d826      	bhi.n	800b828 <UART_SetConfig+0x7a0>
 800b7da:	a201      	add	r2, pc, #4	@ (adr r2, 800b7e0 <UART_SetConfig+0x758>)
 800b7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e0:	0800b7f9 	.word	0x0800b7f9
 800b7e4:	0800b801 	.word	0x0800b801
 800b7e8:	0800b809 	.word	0x0800b809
 800b7ec:	0800b811 	.word	0x0800b811
 800b7f0:	0800b819 	.word	0x0800b819
 800b7f4:	0800b821 	.word	0x0800b821
 800b7f8:	2302      	movs	r3, #2
 800b7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7fe:	e01a      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b800:	2304      	movs	r3, #4
 800b802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b806:	e016      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b808:	2308      	movs	r3, #8
 800b80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b80e:	e012      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b810:	2310      	movs	r3, #16
 800b812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b816:	e00e      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b818:	2320      	movs	r3, #32
 800b81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b81e:	e00a      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b820:	2340      	movs	r3, #64	@ 0x40
 800b822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b826:	e006      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b828:	2380      	movs	r3, #128	@ 0x80
 800b82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b82e:	e002      	b.n	800b836 <UART_SetConfig+0x7ae>
 800b830:	2380      	movs	r3, #128	@ 0x80
 800b832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a55      	ldr	r2, [pc, #340]	@ (800b990 <UART_SetConfig+0x908>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	f040 80f8 	bne.w	800ba32 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b842:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b846:	2b20      	cmp	r3, #32
 800b848:	dc46      	bgt.n	800b8d8 <UART_SetConfig+0x850>
 800b84a:	2b02      	cmp	r3, #2
 800b84c:	db75      	blt.n	800b93a <UART_SetConfig+0x8b2>
 800b84e:	3b02      	subs	r3, #2
 800b850:	2b1e      	cmp	r3, #30
 800b852:	d872      	bhi.n	800b93a <UART_SetConfig+0x8b2>
 800b854:	a201      	add	r2, pc, #4	@ (adr r2, 800b85c <UART_SetConfig+0x7d4>)
 800b856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b85a:	bf00      	nop
 800b85c:	0800b8df 	.word	0x0800b8df
 800b860:	0800b93b 	.word	0x0800b93b
 800b864:	0800b8e7 	.word	0x0800b8e7
 800b868:	0800b93b 	.word	0x0800b93b
 800b86c:	0800b93b 	.word	0x0800b93b
 800b870:	0800b93b 	.word	0x0800b93b
 800b874:	0800b8f7 	.word	0x0800b8f7
 800b878:	0800b93b 	.word	0x0800b93b
 800b87c:	0800b93b 	.word	0x0800b93b
 800b880:	0800b93b 	.word	0x0800b93b
 800b884:	0800b93b 	.word	0x0800b93b
 800b888:	0800b93b 	.word	0x0800b93b
 800b88c:	0800b93b 	.word	0x0800b93b
 800b890:	0800b93b 	.word	0x0800b93b
 800b894:	0800b907 	.word	0x0800b907
 800b898:	0800b93b 	.word	0x0800b93b
 800b89c:	0800b93b 	.word	0x0800b93b
 800b8a0:	0800b93b 	.word	0x0800b93b
 800b8a4:	0800b93b 	.word	0x0800b93b
 800b8a8:	0800b93b 	.word	0x0800b93b
 800b8ac:	0800b93b 	.word	0x0800b93b
 800b8b0:	0800b93b 	.word	0x0800b93b
 800b8b4:	0800b93b 	.word	0x0800b93b
 800b8b8:	0800b93b 	.word	0x0800b93b
 800b8bc:	0800b93b 	.word	0x0800b93b
 800b8c0:	0800b93b 	.word	0x0800b93b
 800b8c4:	0800b93b 	.word	0x0800b93b
 800b8c8:	0800b93b 	.word	0x0800b93b
 800b8cc:	0800b93b 	.word	0x0800b93b
 800b8d0:	0800b93b 	.word	0x0800b93b
 800b8d4:	0800b92d 	.word	0x0800b92d
 800b8d8:	2b40      	cmp	r3, #64	@ 0x40
 800b8da:	d02a      	beq.n	800b932 <UART_SetConfig+0x8aa>
 800b8dc:	e02d      	b.n	800b93a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b8de:	f7fd fe4f 	bl	8009580 <HAL_RCCEx_GetD3PCLK1Freq>
 800b8e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b8e4:	e02f      	b.n	800b946 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fd fe5e 	bl	80095ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8f4:	e027      	b.n	800b946 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8f6:	f107 0318 	add.w	r3, r7, #24
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7fd ffaa 	bl	8009854 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b904:	e01f      	b.n	800b946 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b906:	4b21      	ldr	r3, [pc, #132]	@ (800b98c <UART_SetConfig+0x904>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f003 0320 	and.w	r3, r3, #32
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d009      	beq.n	800b926 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b912:	4b1e      	ldr	r3, [pc, #120]	@ (800b98c <UART_SetConfig+0x904>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	08db      	lsrs	r3, r3, #3
 800b918:	f003 0303 	and.w	r3, r3, #3
 800b91c:	4a1d      	ldr	r2, [pc, #116]	@ (800b994 <UART_SetConfig+0x90c>)
 800b91e:	fa22 f303 	lsr.w	r3, r2, r3
 800b922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b924:	e00f      	b.n	800b946 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b926:	4b1b      	ldr	r3, [pc, #108]	@ (800b994 <UART_SetConfig+0x90c>)
 800b928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b92a:	e00c      	b.n	800b946 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b92c:	4b1a      	ldr	r3, [pc, #104]	@ (800b998 <UART_SetConfig+0x910>)
 800b92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b930:	e009      	b.n	800b946 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b938:	e005      	b.n	800b946 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b93a:	2300      	movs	r3, #0
 800b93c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b944:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f000 81ee 	beq.w	800bd2a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b952:	4a12      	ldr	r2, [pc, #72]	@ (800b99c <UART_SetConfig+0x914>)
 800b954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b958:	461a      	mov	r2, r3
 800b95a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b95c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b960:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	685a      	ldr	r2, [r3, #4]
 800b966:	4613      	mov	r3, r2
 800b968:	005b      	lsls	r3, r3, #1
 800b96a:	4413      	add	r3, r2
 800b96c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b96e:	429a      	cmp	r2, r3
 800b970:	d305      	bcc.n	800b97e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d910      	bls.n	800b9a0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b97e:	2301      	movs	r3, #1
 800b980:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b984:	e1d1      	b.n	800bd2a <UART_SetConfig+0xca2>
 800b986:	bf00      	nop
 800b988:	40011c00 	.word	0x40011c00
 800b98c:	58024400 	.word	0x58024400
 800b990:	58000c00 	.word	0x58000c00
 800b994:	03d09000 	.word	0x03d09000
 800b998:	003d0900 	.word	0x003d0900
 800b99c:	0800d16c 	.word	0x0800d16c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	60bb      	str	r3, [r7, #8]
 800b9a6:	60fa      	str	r2, [r7, #12]
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ac:	4ac0      	ldr	r2, [pc, #768]	@ (800bcb0 <UART_SetConfig+0xc28>)
 800b9ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	603b      	str	r3, [r7, #0]
 800b9b8:	607a      	str	r2, [r7, #4]
 800b9ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b9c2:	f7f4 fcfd 	bl	80003c0 <__aeabi_uldivmod>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	4610      	mov	r0, r2
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	f04f 0200 	mov.w	r2, #0
 800b9d2:	f04f 0300 	mov.w	r3, #0
 800b9d6:	020b      	lsls	r3, r1, #8
 800b9d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b9dc:	0202      	lsls	r2, r0, #8
 800b9de:	6979      	ldr	r1, [r7, #20]
 800b9e0:	6849      	ldr	r1, [r1, #4]
 800b9e2:	0849      	lsrs	r1, r1, #1
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	460c      	mov	r4, r1
 800b9e8:	4605      	mov	r5, r0
 800b9ea:	eb12 0804 	adds.w	r8, r2, r4
 800b9ee:	eb43 0905 	adc.w	r9, r3, r5
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	469a      	mov	sl, r3
 800b9fa:	4693      	mov	fp, r2
 800b9fc:	4652      	mov	r2, sl
 800b9fe:	465b      	mov	r3, fp
 800ba00:	4640      	mov	r0, r8
 800ba02:	4649      	mov	r1, r9
 800ba04:	f7f4 fcdc 	bl	80003c0 <__aeabi_uldivmod>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ba10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba16:	d308      	bcc.n	800ba2a <UART_SetConfig+0x9a2>
 800ba18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba1e:	d204      	bcs.n	800ba2a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba26:	60da      	str	r2, [r3, #12]
 800ba28:	e17f      	b.n	800bd2a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ba30:	e17b      	b.n	800bd2a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	69db      	ldr	r3, [r3, #28]
 800ba36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba3a:	f040 80bd 	bne.w	800bbb8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ba3e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ba42:	2b20      	cmp	r3, #32
 800ba44:	dc48      	bgt.n	800bad8 <UART_SetConfig+0xa50>
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	db7b      	blt.n	800bb42 <UART_SetConfig+0xaba>
 800ba4a:	2b20      	cmp	r3, #32
 800ba4c:	d879      	bhi.n	800bb42 <UART_SetConfig+0xaba>
 800ba4e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba54 <UART_SetConfig+0x9cc>)
 800ba50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba54:	0800badf 	.word	0x0800badf
 800ba58:	0800bae7 	.word	0x0800bae7
 800ba5c:	0800bb43 	.word	0x0800bb43
 800ba60:	0800bb43 	.word	0x0800bb43
 800ba64:	0800baef 	.word	0x0800baef
 800ba68:	0800bb43 	.word	0x0800bb43
 800ba6c:	0800bb43 	.word	0x0800bb43
 800ba70:	0800bb43 	.word	0x0800bb43
 800ba74:	0800baff 	.word	0x0800baff
 800ba78:	0800bb43 	.word	0x0800bb43
 800ba7c:	0800bb43 	.word	0x0800bb43
 800ba80:	0800bb43 	.word	0x0800bb43
 800ba84:	0800bb43 	.word	0x0800bb43
 800ba88:	0800bb43 	.word	0x0800bb43
 800ba8c:	0800bb43 	.word	0x0800bb43
 800ba90:	0800bb43 	.word	0x0800bb43
 800ba94:	0800bb0f 	.word	0x0800bb0f
 800ba98:	0800bb43 	.word	0x0800bb43
 800ba9c:	0800bb43 	.word	0x0800bb43
 800baa0:	0800bb43 	.word	0x0800bb43
 800baa4:	0800bb43 	.word	0x0800bb43
 800baa8:	0800bb43 	.word	0x0800bb43
 800baac:	0800bb43 	.word	0x0800bb43
 800bab0:	0800bb43 	.word	0x0800bb43
 800bab4:	0800bb43 	.word	0x0800bb43
 800bab8:	0800bb43 	.word	0x0800bb43
 800babc:	0800bb43 	.word	0x0800bb43
 800bac0:	0800bb43 	.word	0x0800bb43
 800bac4:	0800bb43 	.word	0x0800bb43
 800bac8:	0800bb43 	.word	0x0800bb43
 800bacc:	0800bb43 	.word	0x0800bb43
 800bad0:	0800bb43 	.word	0x0800bb43
 800bad4:	0800bb35 	.word	0x0800bb35
 800bad8:	2b40      	cmp	r3, #64	@ 0x40
 800bada:	d02e      	beq.n	800bb3a <UART_SetConfig+0xab2>
 800badc:	e031      	b.n	800bb42 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bade:	f7fb feb1 	bl	8007844 <HAL_RCC_GetPCLK1Freq>
 800bae2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bae4:	e033      	b.n	800bb4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bae6:	f7fb fec3 	bl	8007870 <HAL_RCC_GetPCLK2Freq>
 800baea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800baec:	e02f      	b.n	800bb4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800baee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7fd fd5a 	bl	80095ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800baf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bafc:	e027      	b.n	800bb4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bafe:	f107 0318 	add.w	r3, r7, #24
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fd fea6 	bl	8009854 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb0c:	e01f      	b.n	800bb4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb0e:	4b69      	ldr	r3, [pc, #420]	@ (800bcb4 <UART_SetConfig+0xc2c>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f003 0320 	and.w	r3, r3, #32
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d009      	beq.n	800bb2e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb1a:	4b66      	ldr	r3, [pc, #408]	@ (800bcb4 <UART_SetConfig+0xc2c>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	08db      	lsrs	r3, r3, #3
 800bb20:	f003 0303 	and.w	r3, r3, #3
 800bb24:	4a64      	ldr	r2, [pc, #400]	@ (800bcb8 <UART_SetConfig+0xc30>)
 800bb26:	fa22 f303 	lsr.w	r3, r2, r3
 800bb2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb2c:	e00f      	b.n	800bb4e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800bb2e:	4b62      	ldr	r3, [pc, #392]	@ (800bcb8 <UART_SetConfig+0xc30>)
 800bb30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb32:	e00c      	b.n	800bb4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb34:	4b61      	ldr	r3, [pc, #388]	@ (800bcbc <UART_SetConfig+0xc34>)
 800bb36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb38:	e009      	b.n	800bb4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb40:	e005      	b.n	800bb4e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800bb42:	2300      	movs	r3, #0
 800bb44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bb4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f000 80ea 	beq.w	800bd2a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb5a:	4a55      	ldr	r2, [pc, #340]	@ (800bcb0 <UART_SetConfig+0xc28>)
 800bb5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb60:	461a      	mov	r2, r3
 800bb62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb64:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb68:	005a      	lsls	r2, r3, #1
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	085b      	lsrs	r3, r3, #1
 800bb70:	441a      	add	r2, r3
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb7e:	2b0f      	cmp	r3, #15
 800bb80:	d916      	bls.n	800bbb0 <UART_SetConfig+0xb28>
 800bb82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb88:	d212      	bcs.n	800bbb0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	f023 030f 	bic.w	r3, r3, #15
 800bb92:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb96:	085b      	lsrs	r3, r3, #1
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	f003 0307 	and.w	r3, r3, #7
 800bb9e:	b29a      	uxth	r2, r3
 800bba0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bba2:	4313      	orrs	r3, r2
 800bba4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bbac:	60da      	str	r2, [r3, #12]
 800bbae:	e0bc      	b.n	800bd2a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bbb6:	e0b8      	b.n	800bd2a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bbb8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bbbc:	2b20      	cmp	r3, #32
 800bbbe:	dc4b      	bgt.n	800bc58 <UART_SetConfig+0xbd0>
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f2c0 8087 	blt.w	800bcd4 <UART_SetConfig+0xc4c>
 800bbc6:	2b20      	cmp	r3, #32
 800bbc8:	f200 8084 	bhi.w	800bcd4 <UART_SetConfig+0xc4c>
 800bbcc:	a201      	add	r2, pc, #4	@ (adr r2, 800bbd4 <UART_SetConfig+0xb4c>)
 800bbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd2:	bf00      	nop
 800bbd4:	0800bc5f 	.word	0x0800bc5f
 800bbd8:	0800bc67 	.word	0x0800bc67
 800bbdc:	0800bcd5 	.word	0x0800bcd5
 800bbe0:	0800bcd5 	.word	0x0800bcd5
 800bbe4:	0800bc6f 	.word	0x0800bc6f
 800bbe8:	0800bcd5 	.word	0x0800bcd5
 800bbec:	0800bcd5 	.word	0x0800bcd5
 800bbf0:	0800bcd5 	.word	0x0800bcd5
 800bbf4:	0800bc7f 	.word	0x0800bc7f
 800bbf8:	0800bcd5 	.word	0x0800bcd5
 800bbfc:	0800bcd5 	.word	0x0800bcd5
 800bc00:	0800bcd5 	.word	0x0800bcd5
 800bc04:	0800bcd5 	.word	0x0800bcd5
 800bc08:	0800bcd5 	.word	0x0800bcd5
 800bc0c:	0800bcd5 	.word	0x0800bcd5
 800bc10:	0800bcd5 	.word	0x0800bcd5
 800bc14:	0800bc8f 	.word	0x0800bc8f
 800bc18:	0800bcd5 	.word	0x0800bcd5
 800bc1c:	0800bcd5 	.word	0x0800bcd5
 800bc20:	0800bcd5 	.word	0x0800bcd5
 800bc24:	0800bcd5 	.word	0x0800bcd5
 800bc28:	0800bcd5 	.word	0x0800bcd5
 800bc2c:	0800bcd5 	.word	0x0800bcd5
 800bc30:	0800bcd5 	.word	0x0800bcd5
 800bc34:	0800bcd5 	.word	0x0800bcd5
 800bc38:	0800bcd5 	.word	0x0800bcd5
 800bc3c:	0800bcd5 	.word	0x0800bcd5
 800bc40:	0800bcd5 	.word	0x0800bcd5
 800bc44:	0800bcd5 	.word	0x0800bcd5
 800bc48:	0800bcd5 	.word	0x0800bcd5
 800bc4c:	0800bcd5 	.word	0x0800bcd5
 800bc50:	0800bcd5 	.word	0x0800bcd5
 800bc54:	0800bcc7 	.word	0x0800bcc7
 800bc58:	2b40      	cmp	r3, #64	@ 0x40
 800bc5a:	d037      	beq.n	800bccc <UART_SetConfig+0xc44>
 800bc5c:	e03a      	b.n	800bcd4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc5e:	f7fb fdf1 	bl	8007844 <HAL_RCC_GetPCLK1Freq>
 800bc62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc64:	e03c      	b.n	800bce0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc66:	f7fb fe03 	bl	8007870 <HAL_RCC_GetPCLK2Freq>
 800bc6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc6c:	e038      	b.n	800bce0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fd fc9a 	bl	80095ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc7c:	e030      	b.n	800bce0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc7e:	f107 0318 	add.w	r3, r7, #24
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fd fde6 	bl	8009854 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc8c:	e028      	b.n	800bce0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc8e:	4b09      	ldr	r3, [pc, #36]	@ (800bcb4 <UART_SetConfig+0xc2c>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f003 0320 	and.w	r3, r3, #32
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d012      	beq.n	800bcc0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc9a:	4b06      	ldr	r3, [pc, #24]	@ (800bcb4 <UART_SetConfig+0xc2c>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	08db      	lsrs	r3, r3, #3
 800bca0:	f003 0303 	and.w	r3, r3, #3
 800bca4:	4a04      	ldr	r2, [pc, #16]	@ (800bcb8 <UART_SetConfig+0xc30>)
 800bca6:	fa22 f303 	lsr.w	r3, r2, r3
 800bcaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bcac:	e018      	b.n	800bce0 <UART_SetConfig+0xc58>
 800bcae:	bf00      	nop
 800bcb0:	0800d16c 	.word	0x0800d16c
 800bcb4:	58024400 	.word	0x58024400
 800bcb8:	03d09000 	.word	0x03d09000
 800bcbc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800bcc0:	4b24      	ldr	r3, [pc, #144]	@ (800bd54 <UART_SetConfig+0xccc>)
 800bcc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcc4:	e00c      	b.n	800bce0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bcc6:	4b24      	ldr	r3, [pc, #144]	@ (800bd58 <UART_SetConfig+0xcd0>)
 800bcc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcca:	e009      	b.n	800bce0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bccc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bcd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcd2:	e005      	b.n	800bce0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bcde:	bf00      	nop
    }

    if (pclk != 0U)
 800bce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d021      	beq.n	800bd2a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcea:	4a1c      	ldr	r2, [pc, #112]	@ (800bd5c <UART_SetConfig+0xcd4>)
 800bcec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf4:	fbb3 f2f2 	udiv	r2, r3, r2
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	085b      	lsrs	r3, r3, #1
 800bcfe:	441a      	add	r2, r3
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd08:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd0c:	2b0f      	cmp	r3, #15
 800bd0e:	d909      	bls.n	800bd24 <UART_SetConfig+0xc9c>
 800bd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd16:	d205      	bcs.n	800bd24 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	60da      	str	r2, [r3, #12]
 800bd22:	e002      	b.n	800bd2a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bd24:	2301      	movs	r3, #1
 800bd26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	2201      	movs	r2, #1
 800bd36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	2200      	movs	r2, #0
 800bd44:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bd46:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3748      	adds	r7, #72	@ 0x48
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd54:	03d09000 	.word	0x03d09000
 800bd58:	003d0900 	.word	0x003d0900
 800bd5c:	0800d16c 	.word	0x0800d16c

0800bd60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd6c:	f003 0308 	and.w	r3, r3, #8
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d00a      	beq.n	800bd8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	430a      	orrs	r2, r1
 800bd88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd8e:	f003 0301 	and.w	r3, r3, #1
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d00a      	beq.n	800bdac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	430a      	orrs	r2, r1
 800bdaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdb0:	f003 0302 	and.w	r3, r3, #2
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00a      	beq.n	800bdce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	430a      	orrs	r2, r1
 800bdcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdd2:	f003 0304 	and.w	r3, r3, #4
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00a      	beq.n	800bdf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	430a      	orrs	r2, r1
 800bdee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdf4:	f003 0310 	and.w	r3, r3, #16
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00a      	beq.n	800be12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	430a      	orrs	r2, r1
 800be10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be16:	f003 0320 	and.w	r3, r3, #32
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00a      	beq.n	800be34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	689b      	ldr	r3, [r3, #8]
 800be24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	430a      	orrs	r2, r1
 800be32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d01a      	beq.n	800be76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	430a      	orrs	r2, r1
 800be54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be5e:	d10a      	bne.n	800be76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	430a      	orrs	r2, r1
 800be74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00a      	beq.n	800be98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	430a      	orrs	r2, r1
 800be96:	605a      	str	r2, [r3, #4]
  }
}
 800be98:	bf00      	nop
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b098      	sub	sp, #96	@ 0x60
 800bea8:	af02      	add	r7, sp, #8
 800beaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800beb4:	f7f7 f8cc 	bl	8003050 <HAL_GetTick>
 800beb8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f003 0308 	and.w	r3, r3, #8
 800bec4:	2b08      	cmp	r3, #8
 800bec6:	d12f      	bne.n	800bf28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bec8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bed0:	2200      	movs	r2, #0
 800bed2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 f88e 	bl	800bff8 <UART_WaitOnFlagUntilTimeout>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d022      	beq.n	800bf28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beea:	e853 3f00 	ldrex	r3, [r3]
 800beee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bef2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bef6:	653b      	str	r3, [r7, #80]	@ 0x50
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	461a      	mov	r2, r3
 800befe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf00:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf02:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bf06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf08:	e841 2300 	strex	r3, r2, [r1]
 800bf0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bf0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d1e6      	bne.n	800bee2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2220      	movs	r2, #32
 800bf18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf24:	2303      	movs	r3, #3
 800bf26:	e063      	b.n	800bff0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f003 0304 	and.w	r3, r3, #4
 800bf32:	2b04      	cmp	r3, #4
 800bf34:	d149      	bne.n	800bfca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf3a:	9300      	str	r3, [sp, #0]
 800bf3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 f857 	bl	800bff8 <UART_WaitOnFlagUntilTimeout>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d03c      	beq.n	800bfca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf58:	e853 3f00 	ldrex	r3, [r3]
 800bf5c:	623b      	str	r3, [r7, #32]
   return(result);
 800bf5e:	6a3b      	ldr	r3, [r7, #32]
 800bf60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf6e:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf70:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf76:	e841 2300 	strex	r3, r2, [r1]
 800bf7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bf7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d1e6      	bne.n	800bf50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	3308      	adds	r3, #8
 800bf88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	e853 3f00 	ldrex	r3, [r3]
 800bf90:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f023 0301 	bic.w	r3, r3, #1
 800bf98:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	3308      	adds	r3, #8
 800bfa0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bfa2:	61fa      	str	r2, [r7, #28]
 800bfa4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa6:	69b9      	ldr	r1, [r7, #24]
 800bfa8:	69fa      	ldr	r2, [r7, #28]
 800bfaa:	e841 2300 	strex	r3, r2, [r1]
 800bfae:	617b      	str	r3, [r7, #20]
   return(result);
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d1e5      	bne.n	800bf82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2220      	movs	r2, #32
 800bfba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfc6:	2303      	movs	r3, #3
 800bfc8:	e012      	b.n	800bff0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2220      	movs	r2, #32
 800bfce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2220      	movs	r2, #32
 800bfd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bfee:	2300      	movs	r3, #0
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3758      	adds	r7, #88	@ 0x58
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	603b      	str	r3, [r7, #0]
 800c004:	4613      	mov	r3, r2
 800c006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c008:	e04f      	b.n	800c0aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c010:	d04b      	beq.n	800c0aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c012:	f7f7 f81d 	bl	8003050 <HAL_GetTick>
 800c016:	4602      	mov	r2, r0
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	1ad3      	subs	r3, r2, r3
 800c01c:	69ba      	ldr	r2, [r7, #24]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d302      	bcc.n	800c028 <UART_WaitOnFlagUntilTimeout+0x30>
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d101      	bne.n	800c02c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c028:	2303      	movs	r3, #3
 800c02a:	e04e      	b.n	800c0ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f003 0304 	and.w	r3, r3, #4
 800c036:	2b00      	cmp	r3, #0
 800c038:	d037      	beq.n	800c0aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	2b80      	cmp	r3, #128	@ 0x80
 800c03e:	d034      	beq.n	800c0aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	2b40      	cmp	r3, #64	@ 0x40
 800c044:	d031      	beq.n	800c0aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	69db      	ldr	r3, [r3, #28]
 800c04c:	f003 0308 	and.w	r3, r3, #8
 800c050:	2b08      	cmp	r3, #8
 800c052:	d110      	bne.n	800c076 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2208      	movs	r2, #8
 800c05a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f000 f839 	bl	800c0d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2208      	movs	r2, #8
 800c066:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2200      	movs	r2, #0
 800c06e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c072:	2301      	movs	r3, #1
 800c074:	e029      	b.n	800c0ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	69db      	ldr	r3, [r3, #28]
 800c07c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c080:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c084:	d111      	bne.n	800c0aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c08e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f000 f81f 	bl	800c0d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2220      	movs	r2, #32
 800c09a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c0a6:	2303      	movs	r3, #3
 800c0a8:	e00f      	b.n	800c0ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	69da      	ldr	r2, [r3, #28]
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	4013      	ands	r3, r2
 800c0b4:	68ba      	ldr	r2, [r7, #8]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	bf0c      	ite	eq
 800c0ba:	2301      	moveq	r3, #1
 800c0bc:	2300      	movne	r3, #0
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	79fb      	ldrb	r3, [r7, #7]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d0a0      	beq.n	800c00a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
	...

0800c0d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b095      	sub	sp, #84	@ 0x54
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0e4:	e853 3f00 	ldrex	r3, [r3]
 800c0e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c100:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c102:	e841 2300 	strex	r3, r2, [r1]
 800c106:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1e6      	bne.n	800c0dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	3308      	adds	r3, #8
 800c114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c116:	6a3b      	ldr	r3, [r7, #32]
 800c118:	e853 3f00 	ldrex	r3, [r3]
 800c11c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c11e:	69fa      	ldr	r2, [r7, #28]
 800c120:	4b1e      	ldr	r3, [pc, #120]	@ (800c19c <UART_EndRxTransfer+0xc8>)
 800c122:	4013      	ands	r3, r2
 800c124:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	3308      	adds	r3, #8
 800c12c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c12e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c130:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c132:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c136:	e841 2300 	strex	r3, r2, [r1]
 800c13a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1e5      	bne.n	800c10e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c146:	2b01      	cmp	r3, #1
 800c148:	d118      	bne.n	800c17c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	e853 3f00 	ldrex	r3, [r3]
 800c156:	60bb      	str	r3, [r7, #8]
   return(result);
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	f023 0310 	bic.w	r3, r3, #16
 800c15e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	461a      	mov	r2, r3
 800c166:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c168:	61bb      	str	r3, [r7, #24]
 800c16a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c16c:	6979      	ldr	r1, [r7, #20]
 800c16e:	69ba      	ldr	r2, [r7, #24]
 800c170:	e841 2300 	strex	r3, r2, [r1]
 800c174:	613b      	str	r3, [r7, #16]
   return(result);
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d1e6      	bne.n	800c14a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2220      	movs	r2, #32
 800c180:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c190:	bf00      	nop
 800c192:	3754      	adds	r7, #84	@ 0x54
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr
 800c19c:	effffffe 	.word	0xeffffffe

0800c1a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b085      	sub	sp, #20
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d101      	bne.n	800c1b6 <HAL_UARTEx_DisableFifoMode+0x16>
 800c1b2:	2302      	movs	r3, #2
 800c1b4:	e027      	b.n	800c206 <HAL_UARTEx_DisableFifoMode+0x66>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2224      	movs	r2, #36	@ 0x24
 800c1c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f022 0201 	bic.w	r2, r2, #1
 800c1dc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c1e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	68fa      	ldr	r2, [r7, #12]
 800c1f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2220      	movs	r2, #32
 800c1f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3714      	adds	r7, #20
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr

0800c212 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b084      	sub	sp, #16
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
 800c21a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c222:	2b01      	cmp	r3, #1
 800c224:	d101      	bne.n	800c22a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c226:	2302      	movs	r3, #2
 800c228:	e02d      	b.n	800c286 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2201      	movs	r2, #1
 800c22e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2224      	movs	r2, #36	@ 0x24
 800c236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f022 0201 	bic.w	r2, r2, #1
 800c250:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	683a      	ldr	r2, [r7, #0]
 800c262:	430a      	orrs	r2, r1
 800c264:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 f850 	bl	800c30c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2220      	movs	r2, #32
 800c278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b084      	sub	sp, #16
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
 800c296:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d101      	bne.n	800c2a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c2a2:	2302      	movs	r3, #2
 800c2a4:	e02d      	b.n	800c302 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2224      	movs	r2, #36	@ 0x24
 800c2b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f022 0201 	bic.w	r2, r2, #1
 800c2cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	689b      	ldr	r3, [r3, #8]
 800c2d4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	683a      	ldr	r2, [r7, #0]
 800c2de:	430a      	orrs	r2, r1
 800c2e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 f812 	bl	800c30c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2220      	movs	r2, #32
 800c2f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
	...

0800c30c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b085      	sub	sp, #20
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d108      	bne.n	800c32e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2201      	movs	r2, #1
 800c320:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2201      	movs	r2, #1
 800c328:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c32c:	e031      	b.n	800c392 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c32e:	2310      	movs	r3, #16
 800c330:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c332:	2310      	movs	r3, #16
 800c334:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	0e5b      	lsrs	r3, r3, #25
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	f003 0307 	and.w	r3, r3, #7
 800c344:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	0f5b      	lsrs	r3, r3, #29
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	f003 0307 	and.w	r3, r3, #7
 800c354:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c356:	7bbb      	ldrb	r3, [r7, #14]
 800c358:	7b3a      	ldrb	r2, [r7, #12]
 800c35a:	4911      	ldr	r1, [pc, #68]	@ (800c3a0 <UARTEx_SetNbDataToProcess+0x94>)
 800c35c:	5c8a      	ldrb	r2, [r1, r2]
 800c35e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c362:	7b3a      	ldrb	r2, [r7, #12]
 800c364:	490f      	ldr	r1, [pc, #60]	@ (800c3a4 <UARTEx_SetNbDataToProcess+0x98>)
 800c366:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c368:	fb93 f3f2 	sdiv	r3, r3, r2
 800c36c:	b29a      	uxth	r2, r3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c374:	7bfb      	ldrb	r3, [r7, #15]
 800c376:	7b7a      	ldrb	r2, [r7, #13]
 800c378:	4909      	ldr	r1, [pc, #36]	@ (800c3a0 <UARTEx_SetNbDataToProcess+0x94>)
 800c37a:	5c8a      	ldrb	r2, [r1, r2]
 800c37c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c380:	7b7a      	ldrb	r2, [r7, #13]
 800c382:	4908      	ldr	r1, [pc, #32]	@ (800c3a4 <UARTEx_SetNbDataToProcess+0x98>)
 800c384:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c386:	fb93 f3f2 	sdiv	r3, r3, r2
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c392:	bf00      	nop
 800c394:	3714      	adds	r7, #20
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr
 800c39e:	bf00      	nop
 800c3a0:	0800d184 	.word	0x0800d184
 800c3a4:	0800d18c 	.word	0x0800d18c

0800c3a8 <siprintf>:
 800c3a8:	b40e      	push	{r1, r2, r3}
 800c3aa:	b510      	push	{r4, lr}
 800c3ac:	b09d      	sub	sp, #116	@ 0x74
 800c3ae:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c3b0:	9002      	str	r0, [sp, #8]
 800c3b2:	9006      	str	r0, [sp, #24]
 800c3b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c3b8:	480a      	ldr	r0, [pc, #40]	@ (800c3e4 <siprintf+0x3c>)
 800c3ba:	9107      	str	r1, [sp, #28]
 800c3bc:	9104      	str	r1, [sp, #16]
 800c3be:	490a      	ldr	r1, [pc, #40]	@ (800c3e8 <siprintf+0x40>)
 800c3c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3c4:	9105      	str	r1, [sp, #20]
 800c3c6:	2400      	movs	r4, #0
 800c3c8:	a902      	add	r1, sp, #8
 800c3ca:	6800      	ldr	r0, [r0, #0]
 800c3cc:	9301      	str	r3, [sp, #4]
 800c3ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c3d0:	f000 f9a2 	bl	800c718 <_svfiprintf_r>
 800c3d4:	9b02      	ldr	r3, [sp, #8]
 800c3d6:	701c      	strb	r4, [r3, #0]
 800c3d8:	b01d      	add	sp, #116	@ 0x74
 800c3da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3de:	b003      	add	sp, #12
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	2400001c 	.word	0x2400001c
 800c3e8:	ffff0208 	.word	0xffff0208

0800c3ec <memset>:
 800c3ec:	4402      	add	r2, r0
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d100      	bne.n	800c3f6 <memset+0xa>
 800c3f4:	4770      	bx	lr
 800c3f6:	f803 1b01 	strb.w	r1, [r3], #1
 800c3fa:	e7f9      	b.n	800c3f0 <memset+0x4>

0800c3fc <__errno>:
 800c3fc:	4b01      	ldr	r3, [pc, #4]	@ (800c404 <__errno+0x8>)
 800c3fe:	6818      	ldr	r0, [r3, #0]
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	2400001c 	.word	0x2400001c

0800c408 <__libc_init_array>:
 800c408:	b570      	push	{r4, r5, r6, lr}
 800c40a:	4d0d      	ldr	r5, [pc, #52]	@ (800c440 <__libc_init_array+0x38>)
 800c40c:	4c0d      	ldr	r4, [pc, #52]	@ (800c444 <__libc_init_array+0x3c>)
 800c40e:	1b64      	subs	r4, r4, r5
 800c410:	10a4      	asrs	r4, r4, #2
 800c412:	2600      	movs	r6, #0
 800c414:	42a6      	cmp	r6, r4
 800c416:	d109      	bne.n	800c42c <__libc_init_array+0x24>
 800c418:	4d0b      	ldr	r5, [pc, #44]	@ (800c448 <__libc_init_array+0x40>)
 800c41a:	4c0c      	ldr	r4, [pc, #48]	@ (800c44c <__libc_init_array+0x44>)
 800c41c:	f000 fc64 	bl	800cce8 <_init>
 800c420:	1b64      	subs	r4, r4, r5
 800c422:	10a4      	asrs	r4, r4, #2
 800c424:	2600      	movs	r6, #0
 800c426:	42a6      	cmp	r6, r4
 800c428:	d105      	bne.n	800c436 <__libc_init_array+0x2e>
 800c42a:	bd70      	pop	{r4, r5, r6, pc}
 800c42c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c430:	4798      	blx	r3
 800c432:	3601      	adds	r6, #1
 800c434:	e7ee      	b.n	800c414 <__libc_init_array+0xc>
 800c436:	f855 3b04 	ldr.w	r3, [r5], #4
 800c43a:	4798      	blx	r3
 800c43c:	3601      	adds	r6, #1
 800c43e:	e7f2      	b.n	800c426 <__libc_init_array+0x1e>
 800c440:	0800d1d0 	.word	0x0800d1d0
 800c444:	0800d1d0 	.word	0x0800d1d0
 800c448:	0800d1d0 	.word	0x0800d1d0
 800c44c:	0800d1d8 	.word	0x0800d1d8

0800c450 <__retarget_lock_acquire_recursive>:
 800c450:	4770      	bx	lr

0800c452 <__retarget_lock_release_recursive>:
 800c452:	4770      	bx	lr

0800c454 <memcpy>:
 800c454:	440a      	add	r2, r1
 800c456:	4291      	cmp	r1, r2
 800c458:	f100 33ff 	add.w	r3, r0, #4294967295
 800c45c:	d100      	bne.n	800c460 <memcpy+0xc>
 800c45e:	4770      	bx	lr
 800c460:	b510      	push	{r4, lr}
 800c462:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c46a:	4291      	cmp	r1, r2
 800c46c:	d1f9      	bne.n	800c462 <memcpy+0xe>
 800c46e:	bd10      	pop	{r4, pc}

0800c470 <_free_r>:
 800c470:	b538      	push	{r3, r4, r5, lr}
 800c472:	4605      	mov	r5, r0
 800c474:	2900      	cmp	r1, #0
 800c476:	d041      	beq.n	800c4fc <_free_r+0x8c>
 800c478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c47c:	1f0c      	subs	r4, r1, #4
 800c47e:	2b00      	cmp	r3, #0
 800c480:	bfb8      	it	lt
 800c482:	18e4      	addlt	r4, r4, r3
 800c484:	f000 f8e0 	bl	800c648 <__malloc_lock>
 800c488:	4a1d      	ldr	r2, [pc, #116]	@ (800c500 <_free_r+0x90>)
 800c48a:	6813      	ldr	r3, [r2, #0]
 800c48c:	b933      	cbnz	r3, 800c49c <_free_r+0x2c>
 800c48e:	6063      	str	r3, [r4, #4]
 800c490:	6014      	str	r4, [r2, #0]
 800c492:	4628      	mov	r0, r5
 800c494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c498:	f000 b8dc 	b.w	800c654 <__malloc_unlock>
 800c49c:	42a3      	cmp	r3, r4
 800c49e:	d908      	bls.n	800c4b2 <_free_r+0x42>
 800c4a0:	6820      	ldr	r0, [r4, #0]
 800c4a2:	1821      	adds	r1, r4, r0
 800c4a4:	428b      	cmp	r3, r1
 800c4a6:	bf01      	itttt	eq
 800c4a8:	6819      	ldreq	r1, [r3, #0]
 800c4aa:	685b      	ldreq	r3, [r3, #4]
 800c4ac:	1809      	addeq	r1, r1, r0
 800c4ae:	6021      	streq	r1, [r4, #0]
 800c4b0:	e7ed      	b.n	800c48e <_free_r+0x1e>
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	b10b      	cbz	r3, 800c4bc <_free_r+0x4c>
 800c4b8:	42a3      	cmp	r3, r4
 800c4ba:	d9fa      	bls.n	800c4b2 <_free_r+0x42>
 800c4bc:	6811      	ldr	r1, [r2, #0]
 800c4be:	1850      	adds	r0, r2, r1
 800c4c0:	42a0      	cmp	r0, r4
 800c4c2:	d10b      	bne.n	800c4dc <_free_r+0x6c>
 800c4c4:	6820      	ldr	r0, [r4, #0]
 800c4c6:	4401      	add	r1, r0
 800c4c8:	1850      	adds	r0, r2, r1
 800c4ca:	4283      	cmp	r3, r0
 800c4cc:	6011      	str	r1, [r2, #0]
 800c4ce:	d1e0      	bne.n	800c492 <_free_r+0x22>
 800c4d0:	6818      	ldr	r0, [r3, #0]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	6053      	str	r3, [r2, #4]
 800c4d6:	4408      	add	r0, r1
 800c4d8:	6010      	str	r0, [r2, #0]
 800c4da:	e7da      	b.n	800c492 <_free_r+0x22>
 800c4dc:	d902      	bls.n	800c4e4 <_free_r+0x74>
 800c4de:	230c      	movs	r3, #12
 800c4e0:	602b      	str	r3, [r5, #0]
 800c4e2:	e7d6      	b.n	800c492 <_free_r+0x22>
 800c4e4:	6820      	ldr	r0, [r4, #0]
 800c4e6:	1821      	adds	r1, r4, r0
 800c4e8:	428b      	cmp	r3, r1
 800c4ea:	bf04      	itt	eq
 800c4ec:	6819      	ldreq	r1, [r3, #0]
 800c4ee:	685b      	ldreq	r3, [r3, #4]
 800c4f0:	6063      	str	r3, [r4, #4]
 800c4f2:	bf04      	itt	eq
 800c4f4:	1809      	addeq	r1, r1, r0
 800c4f6:	6021      	streq	r1, [r4, #0]
 800c4f8:	6054      	str	r4, [r2, #4]
 800c4fa:	e7ca      	b.n	800c492 <_free_r+0x22>
 800c4fc:	bd38      	pop	{r3, r4, r5, pc}
 800c4fe:	bf00      	nop
 800c500:	24000eb4 	.word	0x24000eb4

0800c504 <sbrk_aligned>:
 800c504:	b570      	push	{r4, r5, r6, lr}
 800c506:	4e0f      	ldr	r6, [pc, #60]	@ (800c544 <sbrk_aligned+0x40>)
 800c508:	460c      	mov	r4, r1
 800c50a:	6831      	ldr	r1, [r6, #0]
 800c50c:	4605      	mov	r5, r0
 800c50e:	b911      	cbnz	r1, 800c516 <sbrk_aligned+0x12>
 800c510:	f000 fba4 	bl	800cc5c <_sbrk_r>
 800c514:	6030      	str	r0, [r6, #0]
 800c516:	4621      	mov	r1, r4
 800c518:	4628      	mov	r0, r5
 800c51a:	f000 fb9f 	bl	800cc5c <_sbrk_r>
 800c51e:	1c43      	adds	r3, r0, #1
 800c520:	d103      	bne.n	800c52a <sbrk_aligned+0x26>
 800c522:	f04f 34ff 	mov.w	r4, #4294967295
 800c526:	4620      	mov	r0, r4
 800c528:	bd70      	pop	{r4, r5, r6, pc}
 800c52a:	1cc4      	adds	r4, r0, #3
 800c52c:	f024 0403 	bic.w	r4, r4, #3
 800c530:	42a0      	cmp	r0, r4
 800c532:	d0f8      	beq.n	800c526 <sbrk_aligned+0x22>
 800c534:	1a21      	subs	r1, r4, r0
 800c536:	4628      	mov	r0, r5
 800c538:	f000 fb90 	bl	800cc5c <_sbrk_r>
 800c53c:	3001      	adds	r0, #1
 800c53e:	d1f2      	bne.n	800c526 <sbrk_aligned+0x22>
 800c540:	e7ef      	b.n	800c522 <sbrk_aligned+0x1e>
 800c542:	bf00      	nop
 800c544:	24000eb0 	.word	0x24000eb0

0800c548 <_malloc_r>:
 800c548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c54c:	1ccd      	adds	r5, r1, #3
 800c54e:	f025 0503 	bic.w	r5, r5, #3
 800c552:	3508      	adds	r5, #8
 800c554:	2d0c      	cmp	r5, #12
 800c556:	bf38      	it	cc
 800c558:	250c      	movcc	r5, #12
 800c55a:	2d00      	cmp	r5, #0
 800c55c:	4606      	mov	r6, r0
 800c55e:	db01      	blt.n	800c564 <_malloc_r+0x1c>
 800c560:	42a9      	cmp	r1, r5
 800c562:	d904      	bls.n	800c56e <_malloc_r+0x26>
 800c564:	230c      	movs	r3, #12
 800c566:	6033      	str	r3, [r6, #0]
 800c568:	2000      	movs	r0, #0
 800c56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c56e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c644 <_malloc_r+0xfc>
 800c572:	f000 f869 	bl	800c648 <__malloc_lock>
 800c576:	f8d8 3000 	ldr.w	r3, [r8]
 800c57a:	461c      	mov	r4, r3
 800c57c:	bb44      	cbnz	r4, 800c5d0 <_malloc_r+0x88>
 800c57e:	4629      	mov	r1, r5
 800c580:	4630      	mov	r0, r6
 800c582:	f7ff ffbf 	bl	800c504 <sbrk_aligned>
 800c586:	1c43      	adds	r3, r0, #1
 800c588:	4604      	mov	r4, r0
 800c58a:	d158      	bne.n	800c63e <_malloc_r+0xf6>
 800c58c:	f8d8 4000 	ldr.w	r4, [r8]
 800c590:	4627      	mov	r7, r4
 800c592:	2f00      	cmp	r7, #0
 800c594:	d143      	bne.n	800c61e <_malloc_r+0xd6>
 800c596:	2c00      	cmp	r4, #0
 800c598:	d04b      	beq.n	800c632 <_malloc_r+0xea>
 800c59a:	6823      	ldr	r3, [r4, #0]
 800c59c:	4639      	mov	r1, r7
 800c59e:	4630      	mov	r0, r6
 800c5a0:	eb04 0903 	add.w	r9, r4, r3
 800c5a4:	f000 fb5a 	bl	800cc5c <_sbrk_r>
 800c5a8:	4581      	cmp	r9, r0
 800c5aa:	d142      	bne.n	800c632 <_malloc_r+0xea>
 800c5ac:	6821      	ldr	r1, [r4, #0]
 800c5ae:	1a6d      	subs	r5, r5, r1
 800c5b0:	4629      	mov	r1, r5
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	f7ff ffa6 	bl	800c504 <sbrk_aligned>
 800c5b8:	3001      	adds	r0, #1
 800c5ba:	d03a      	beq.n	800c632 <_malloc_r+0xea>
 800c5bc:	6823      	ldr	r3, [r4, #0]
 800c5be:	442b      	add	r3, r5
 800c5c0:	6023      	str	r3, [r4, #0]
 800c5c2:	f8d8 3000 	ldr.w	r3, [r8]
 800c5c6:	685a      	ldr	r2, [r3, #4]
 800c5c8:	bb62      	cbnz	r2, 800c624 <_malloc_r+0xdc>
 800c5ca:	f8c8 7000 	str.w	r7, [r8]
 800c5ce:	e00f      	b.n	800c5f0 <_malloc_r+0xa8>
 800c5d0:	6822      	ldr	r2, [r4, #0]
 800c5d2:	1b52      	subs	r2, r2, r5
 800c5d4:	d420      	bmi.n	800c618 <_malloc_r+0xd0>
 800c5d6:	2a0b      	cmp	r2, #11
 800c5d8:	d917      	bls.n	800c60a <_malloc_r+0xc2>
 800c5da:	1961      	adds	r1, r4, r5
 800c5dc:	42a3      	cmp	r3, r4
 800c5de:	6025      	str	r5, [r4, #0]
 800c5e0:	bf18      	it	ne
 800c5e2:	6059      	strne	r1, [r3, #4]
 800c5e4:	6863      	ldr	r3, [r4, #4]
 800c5e6:	bf08      	it	eq
 800c5e8:	f8c8 1000 	streq.w	r1, [r8]
 800c5ec:	5162      	str	r2, [r4, r5]
 800c5ee:	604b      	str	r3, [r1, #4]
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	f000 f82f 	bl	800c654 <__malloc_unlock>
 800c5f6:	f104 000b 	add.w	r0, r4, #11
 800c5fa:	1d23      	adds	r3, r4, #4
 800c5fc:	f020 0007 	bic.w	r0, r0, #7
 800c600:	1ac2      	subs	r2, r0, r3
 800c602:	bf1c      	itt	ne
 800c604:	1a1b      	subne	r3, r3, r0
 800c606:	50a3      	strne	r3, [r4, r2]
 800c608:	e7af      	b.n	800c56a <_malloc_r+0x22>
 800c60a:	6862      	ldr	r2, [r4, #4]
 800c60c:	42a3      	cmp	r3, r4
 800c60e:	bf0c      	ite	eq
 800c610:	f8c8 2000 	streq.w	r2, [r8]
 800c614:	605a      	strne	r2, [r3, #4]
 800c616:	e7eb      	b.n	800c5f0 <_malloc_r+0xa8>
 800c618:	4623      	mov	r3, r4
 800c61a:	6864      	ldr	r4, [r4, #4]
 800c61c:	e7ae      	b.n	800c57c <_malloc_r+0x34>
 800c61e:	463c      	mov	r4, r7
 800c620:	687f      	ldr	r7, [r7, #4]
 800c622:	e7b6      	b.n	800c592 <_malloc_r+0x4a>
 800c624:	461a      	mov	r2, r3
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	42a3      	cmp	r3, r4
 800c62a:	d1fb      	bne.n	800c624 <_malloc_r+0xdc>
 800c62c:	2300      	movs	r3, #0
 800c62e:	6053      	str	r3, [r2, #4]
 800c630:	e7de      	b.n	800c5f0 <_malloc_r+0xa8>
 800c632:	230c      	movs	r3, #12
 800c634:	6033      	str	r3, [r6, #0]
 800c636:	4630      	mov	r0, r6
 800c638:	f000 f80c 	bl	800c654 <__malloc_unlock>
 800c63c:	e794      	b.n	800c568 <_malloc_r+0x20>
 800c63e:	6005      	str	r5, [r0, #0]
 800c640:	e7d6      	b.n	800c5f0 <_malloc_r+0xa8>
 800c642:	bf00      	nop
 800c644:	24000eb4 	.word	0x24000eb4

0800c648 <__malloc_lock>:
 800c648:	4801      	ldr	r0, [pc, #4]	@ (800c650 <__malloc_lock+0x8>)
 800c64a:	f7ff bf01 	b.w	800c450 <__retarget_lock_acquire_recursive>
 800c64e:	bf00      	nop
 800c650:	24000eac 	.word	0x24000eac

0800c654 <__malloc_unlock>:
 800c654:	4801      	ldr	r0, [pc, #4]	@ (800c65c <__malloc_unlock+0x8>)
 800c656:	f7ff befc 	b.w	800c452 <__retarget_lock_release_recursive>
 800c65a:	bf00      	nop
 800c65c:	24000eac 	.word	0x24000eac

0800c660 <__ssputs_r>:
 800c660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c664:	688e      	ldr	r6, [r1, #8]
 800c666:	461f      	mov	r7, r3
 800c668:	42be      	cmp	r6, r7
 800c66a:	680b      	ldr	r3, [r1, #0]
 800c66c:	4682      	mov	sl, r0
 800c66e:	460c      	mov	r4, r1
 800c670:	4690      	mov	r8, r2
 800c672:	d82d      	bhi.n	800c6d0 <__ssputs_r+0x70>
 800c674:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c678:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c67c:	d026      	beq.n	800c6cc <__ssputs_r+0x6c>
 800c67e:	6965      	ldr	r5, [r4, #20]
 800c680:	6909      	ldr	r1, [r1, #16]
 800c682:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c686:	eba3 0901 	sub.w	r9, r3, r1
 800c68a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c68e:	1c7b      	adds	r3, r7, #1
 800c690:	444b      	add	r3, r9
 800c692:	106d      	asrs	r5, r5, #1
 800c694:	429d      	cmp	r5, r3
 800c696:	bf38      	it	cc
 800c698:	461d      	movcc	r5, r3
 800c69a:	0553      	lsls	r3, r2, #21
 800c69c:	d527      	bpl.n	800c6ee <__ssputs_r+0x8e>
 800c69e:	4629      	mov	r1, r5
 800c6a0:	f7ff ff52 	bl	800c548 <_malloc_r>
 800c6a4:	4606      	mov	r6, r0
 800c6a6:	b360      	cbz	r0, 800c702 <__ssputs_r+0xa2>
 800c6a8:	6921      	ldr	r1, [r4, #16]
 800c6aa:	464a      	mov	r2, r9
 800c6ac:	f7ff fed2 	bl	800c454 <memcpy>
 800c6b0:	89a3      	ldrh	r3, [r4, #12]
 800c6b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c6b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6ba:	81a3      	strh	r3, [r4, #12]
 800c6bc:	6126      	str	r6, [r4, #16]
 800c6be:	6165      	str	r5, [r4, #20]
 800c6c0:	444e      	add	r6, r9
 800c6c2:	eba5 0509 	sub.w	r5, r5, r9
 800c6c6:	6026      	str	r6, [r4, #0]
 800c6c8:	60a5      	str	r5, [r4, #8]
 800c6ca:	463e      	mov	r6, r7
 800c6cc:	42be      	cmp	r6, r7
 800c6ce:	d900      	bls.n	800c6d2 <__ssputs_r+0x72>
 800c6d0:	463e      	mov	r6, r7
 800c6d2:	6820      	ldr	r0, [r4, #0]
 800c6d4:	4632      	mov	r2, r6
 800c6d6:	4641      	mov	r1, r8
 800c6d8:	f000 faa6 	bl	800cc28 <memmove>
 800c6dc:	68a3      	ldr	r3, [r4, #8]
 800c6de:	1b9b      	subs	r3, r3, r6
 800c6e0:	60a3      	str	r3, [r4, #8]
 800c6e2:	6823      	ldr	r3, [r4, #0]
 800c6e4:	4433      	add	r3, r6
 800c6e6:	6023      	str	r3, [r4, #0]
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ee:	462a      	mov	r2, r5
 800c6f0:	f000 fac4 	bl	800cc7c <_realloc_r>
 800c6f4:	4606      	mov	r6, r0
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	d1e0      	bne.n	800c6bc <__ssputs_r+0x5c>
 800c6fa:	6921      	ldr	r1, [r4, #16]
 800c6fc:	4650      	mov	r0, sl
 800c6fe:	f7ff feb7 	bl	800c470 <_free_r>
 800c702:	230c      	movs	r3, #12
 800c704:	f8ca 3000 	str.w	r3, [sl]
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c70e:	81a3      	strh	r3, [r4, #12]
 800c710:	f04f 30ff 	mov.w	r0, #4294967295
 800c714:	e7e9      	b.n	800c6ea <__ssputs_r+0x8a>
	...

0800c718 <_svfiprintf_r>:
 800c718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c71c:	4698      	mov	r8, r3
 800c71e:	898b      	ldrh	r3, [r1, #12]
 800c720:	061b      	lsls	r3, r3, #24
 800c722:	b09d      	sub	sp, #116	@ 0x74
 800c724:	4607      	mov	r7, r0
 800c726:	460d      	mov	r5, r1
 800c728:	4614      	mov	r4, r2
 800c72a:	d510      	bpl.n	800c74e <_svfiprintf_r+0x36>
 800c72c:	690b      	ldr	r3, [r1, #16]
 800c72e:	b973      	cbnz	r3, 800c74e <_svfiprintf_r+0x36>
 800c730:	2140      	movs	r1, #64	@ 0x40
 800c732:	f7ff ff09 	bl	800c548 <_malloc_r>
 800c736:	6028      	str	r0, [r5, #0]
 800c738:	6128      	str	r0, [r5, #16]
 800c73a:	b930      	cbnz	r0, 800c74a <_svfiprintf_r+0x32>
 800c73c:	230c      	movs	r3, #12
 800c73e:	603b      	str	r3, [r7, #0]
 800c740:	f04f 30ff 	mov.w	r0, #4294967295
 800c744:	b01d      	add	sp, #116	@ 0x74
 800c746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74a:	2340      	movs	r3, #64	@ 0x40
 800c74c:	616b      	str	r3, [r5, #20]
 800c74e:	2300      	movs	r3, #0
 800c750:	9309      	str	r3, [sp, #36]	@ 0x24
 800c752:	2320      	movs	r3, #32
 800c754:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c758:	f8cd 800c 	str.w	r8, [sp, #12]
 800c75c:	2330      	movs	r3, #48	@ 0x30
 800c75e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c8fc <_svfiprintf_r+0x1e4>
 800c762:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c766:	f04f 0901 	mov.w	r9, #1
 800c76a:	4623      	mov	r3, r4
 800c76c:	469a      	mov	sl, r3
 800c76e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c772:	b10a      	cbz	r2, 800c778 <_svfiprintf_r+0x60>
 800c774:	2a25      	cmp	r2, #37	@ 0x25
 800c776:	d1f9      	bne.n	800c76c <_svfiprintf_r+0x54>
 800c778:	ebba 0b04 	subs.w	fp, sl, r4
 800c77c:	d00b      	beq.n	800c796 <_svfiprintf_r+0x7e>
 800c77e:	465b      	mov	r3, fp
 800c780:	4622      	mov	r2, r4
 800c782:	4629      	mov	r1, r5
 800c784:	4638      	mov	r0, r7
 800c786:	f7ff ff6b 	bl	800c660 <__ssputs_r>
 800c78a:	3001      	adds	r0, #1
 800c78c:	f000 80a7 	beq.w	800c8de <_svfiprintf_r+0x1c6>
 800c790:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c792:	445a      	add	r2, fp
 800c794:	9209      	str	r2, [sp, #36]	@ 0x24
 800c796:	f89a 3000 	ldrb.w	r3, [sl]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	f000 809f 	beq.w	800c8de <_svfiprintf_r+0x1c6>
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c7a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7aa:	f10a 0a01 	add.w	sl, sl, #1
 800c7ae:	9304      	str	r3, [sp, #16]
 800c7b0:	9307      	str	r3, [sp, #28]
 800c7b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7b8:	4654      	mov	r4, sl
 800c7ba:	2205      	movs	r2, #5
 800c7bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7c0:	484e      	ldr	r0, [pc, #312]	@ (800c8fc <_svfiprintf_r+0x1e4>)
 800c7c2:	f7f3 fdad 	bl	8000320 <memchr>
 800c7c6:	9a04      	ldr	r2, [sp, #16]
 800c7c8:	b9d8      	cbnz	r0, 800c802 <_svfiprintf_r+0xea>
 800c7ca:	06d0      	lsls	r0, r2, #27
 800c7cc:	bf44      	itt	mi
 800c7ce:	2320      	movmi	r3, #32
 800c7d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7d4:	0711      	lsls	r1, r2, #28
 800c7d6:	bf44      	itt	mi
 800c7d8:	232b      	movmi	r3, #43	@ 0x2b
 800c7da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7de:	f89a 3000 	ldrb.w	r3, [sl]
 800c7e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7e4:	d015      	beq.n	800c812 <_svfiprintf_r+0xfa>
 800c7e6:	9a07      	ldr	r2, [sp, #28]
 800c7e8:	4654      	mov	r4, sl
 800c7ea:	2000      	movs	r0, #0
 800c7ec:	f04f 0c0a 	mov.w	ip, #10
 800c7f0:	4621      	mov	r1, r4
 800c7f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7f6:	3b30      	subs	r3, #48	@ 0x30
 800c7f8:	2b09      	cmp	r3, #9
 800c7fa:	d94b      	bls.n	800c894 <_svfiprintf_r+0x17c>
 800c7fc:	b1b0      	cbz	r0, 800c82c <_svfiprintf_r+0x114>
 800c7fe:	9207      	str	r2, [sp, #28]
 800c800:	e014      	b.n	800c82c <_svfiprintf_r+0x114>
 800c802:	eba0 0308 	sub.w	r3, r0, r8
 800c806:	fa09 f303 	lsl.w	r3, r9, r3
 800c80a:	4313      	orrs	r3, r2
 800c80c:	9304      	str	r3, [sp, #16]
 800c80e:	46a2      	mov	sl, r4
 800c810:	e7d2      	b.n	800c7b8 <_svfiprintf_r+0xa0>
 800c812:	9b03      	ldr	r3, [sp, #12]
 800c814:	1d19      	adds	r1, r3, #4
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	9103      	str	r1, [sp, #12]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	bfbb      	ittet	lt
 800c81e:	425b      	neglt	r3, r3
 800c820:	f042 0202 	orrlt.w	r2, r2, #2
 800c824:	9307      	strge	r3, [sp, #28]
 800c826:	9307      	strlt	r3, [sp, #28]
 800c828:	bfb8      	it	lt
 800c82a:	9204      	strlt	r2, [sp, #16]
 800c82c:	7823      	ldrb	r3, [r4, #0]
 800c82e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c830:	d10a      	bne.n	800c848 <_svfiprintf_r+0x130>
 800c832:	7863      	ldrb	r3, [r4, #1]
 800c834:	2b2a      	cmp	r3, #42	@ 0x2a
 800c836:	d132      	bne.n	800c89e <_svfiprintf_r+0x186>
 800c838:	9b03      	ldr	r3, [sp, #12]
 800c83a:	1d1a      	adds	r2, r3, #4
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	9203      	str	r2, [sp, #12]
 800c840:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c844:	3402      	adds	r4, #2
 800c846:	9305      	str	r3, [sp, #20]
 800c848:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c90c <_svfiprintf_r+0x1f4>
 800c84c:	7821      	ldrb	r1, [r4, #0]
 800c84e:	2203      	movs	r2, #3
 800c850:	4650      	mov	r0, sl
 800c852:	f7f3 fd65 	bl	8000320 <memchr>
 800c856:	b138      	cbz	r0, 800c868 <_svfiprintf_r+0x150>
 800c858:	9b04      	ldr	r3, [sp, #16]
 800c85a:	eba0 000a 	sub.w	r0, r0, sl
 800c85e:	2240      	movs	r2, #64	@ 0x40
 800c860:	4082      	lsls	r2, r0
 800c862:	4313      	orrs	r3, r2
 800c864:	3401      	adds	r4, #1
 800c866:	9304      	str	r3, [sp, #16]
 800c868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c86c:	4824      	ldr	r0, [pc, #144]	@ (800c900 <_svfiprintf_r+0x1e8>)
 800c86e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c872:	2206      	movs	r2, #6
 800c874:	f7f3 fd54 	bl	8000320 <memchr>
 800c878:	2800      	cmp	r0, #0
 800c87a:	d036      	beq.n	800c8ea <_svfiprintf_r+0x1d2>
 800c87c:	4b21      	ldr	r3, [pc, #132]	@ (800c904 <_svfiprintf_r+0x1ec>)
 800c87e:	bb1b      	cbnz	r3, 800c8c8 <_svfiprintf_r+0x1b0>
 800c880:	9b03      	ldr	r3, [sp, #12]
 800c882:	3307      	adds	r3, #7
 800c884:	f023 0307 	bic.w	r3, r3, #7
 800c888:	3308      	adds	r3, #8
 800c88a:	9303      	str	r3, [sp, #12]
 800c88c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c88e:	4433      	add	r3, r6
 800c890:	9309      	str	r3, [sp, #36]	@ 0x24
 800c892:	e76a      	b.n	800c76a <_svfiprintf_r+0x52>
 800c894:	fb0c 3202 	mla	r2, ip, r2, r3
 800c898:	460c      	mov	r4, r1
 800c89a:	2001      	movs	r0, #1
 800c89c:	e7a8      	b.n	800c7f0 <_svfiprintf_r+0xd8>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	3401      	adds	r4, #1
 800c8a2:	9305      	str	r3, [sp, #20]
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	f04f 0c0a 	mov.w	ip, #10
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8b0:	3a30      	subs	r2, #48	@ 0x30
 800c8b2:	2a09      	cmp	r2, #9
 800c8b4:	d903      	bls.n	800c8be <_svfiprintf_r+0x1a6>
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d0c6      	beq.n	800c848 <_svfiprintf_r+0x130>
 800c8ba:	9105      	str	r1, [sp, #20]
 800c8bc:	e7c4      	b.n	800c848 <_svfiprintf_r+0x130>
 800c8be:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e7f0      	b.n	800c8aa <_svfiprintf_r+0x192>
 800c8c8:	ab03      	add	r3, sp, #12
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	462a      	mov	r2, r5
 800c8ce:	4b0e      	ldr	r3, [pc, #56]	@ (800c908 <_svfiprintf_r+0x1f0>)
 800c8d0:	a904      	add	r1, sp, #16
 800c8d2:	4638      	mov	r0, r7
 800c8d4:	f3af 8000 	nop.w
 800c8d8:	1c42      	adds	r2, r0, #1
 800c8da:	4606      	mov	r6, r0
 800c8dc:	d1d6      	bne.n	800c88c <_svfiprintf_r+0x174>
 800c8de:	89ab      	ldrh	r3, [r5, #12]
 800c8e0:	065b      	lsls	r3, r3, #25
 800c8e2:	f53f af2d 	bmi.w	800c740 <_svfiprintf_r+0x28>
 800c8e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c8e8:	e72c      	b.n	800c744 <_svfiprintf_r+0x2c>
 800c8ea:	ab03      	add	r3, sp, #12
 800c8ec:	9300      	str	r3, [sp, #0]
 800c8ee:	462a      	mov	r2, r5
 800c8f0:	4b05      	ldr	r3, [pc, #20]	@ (800c908 <_svfiprintf_r+0x1f0>)
 800c8f2:	a904      	add	r1, sp, #16
 800c8f4:	4638      	mov	r0, r7
 800c8f6:	f000 f879 	bl	800c9ec <_printf_i>
 800c8fa:	e7ed      	b.n	800c8d8 <_svfiprintf_r+0x1c0>
 800c8fc:	0800d194 	.word	0x0800d194
 800c900:	0800d19e 	.word	0x0800d19e
 800c904:	00000000 	.word	0x00000000
 800c908:	0800c661 	.word	0x0800c661
 800c90c:	0800d19a 	.word	0x0800d19a

0800c910 <_printf_common>:
 800c910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c914:	4616      	mov	r6, r2
 800c916:	4698      	mov	r8, r3
 800c918:	688a      	ldr	r2, [r1, #8]
 800c91a:	690b      	ldr	r3, [r1, #16]
 800c91c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c920:	4293      	cmp	r3, r2
 800c922:	bfb8      	it	lt
 800c924:	4613      	movlt	r3, r2
 800c926:	6033      	str	r3, [r6, #0]
 800c928:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c92c:	4607      	mov	r7, r0
 800c92e:	460c      	mov	r4, r1
 800c930:	b10a      	cbz	r2, 800c936 <_printf_common+0x26>
 800c932:	3301      	adds	r3, #1
 800c934:	6033      	str	r3, [r6, #0]
 800c936:	6823      	ldr	r3, [r4, #0]
 800c938:	0699      	lsls	r1, r3, #26
 800c93a:	bf42      	ittt	mi
 800c93c:	6833      	ldrmi	r3, [r6, #0]
 800c93e:	3302      	addmi	r3, #2
 800c940:	6033      	strmi	r3, [r6, #0]
 800c942:	6825      	ldr	r5, [r4, #0]
 800c944:	f015 0506 	ands.w	r5, r5, #6
 800c948:	d106      	bne.n	800c958 <_printf_common+0x48>
 800c94a:	f104 0a19 	add.w	sl, r4, #25
 800c94e:	68e3      	ldr	r3, [r4, #12]
 800c950:	6832      	ldr	r2, [r6, #0]
 800c952:	1a9b      	subs	r3, r3, r2
 800c954:	42ab      	cmp	r3, r5
 800c956:	dc26      	bgt.n	800c9a6 <_printf_common+0x96>
 800c958:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c95c:	6822      	ldr	r2, [r4, #0]
 800c95e:	3b00      	subs	r3, #0
 800c960:	bf18      	it	ne
 800c962:	2301      	movne	r3, #1
 800c964:	0692      	lsls	r2, r2, #26
 800c966:	d42b      	bmi.n	800c9c0 <_printf_common+0xb0>
 800c968:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c96c:	4641      	mov	r1, r8
 800c96e:	4638      	mov	r0, r7
 800c970:	47c8      	blx	r9
 800c972:	3001      	adds	r0, #1
 800c974:	d01e      	beq.n	800c9b4 <_printf_common+0xa4>
 800c976:	6823      	ldr	r3, [r4, #0]
 800c978:	6922      	ldr	r2, [r4, #16]
 800c97a:	f003 0306 	and.w	r3, r3, #6
 800c97e:	2b04      	cmp	r3, #4
 800c980:	bf02      	ittt	eq
 800c982:	68e5      	ldreq	r5, [r4, #12]
 800c984:	6833      	ldreq	r3, [r6, #0]
 800c986:	1aed      	subeq	r5, r5, r3
 800c988:	68a3      	ldr	r3, [r4, #8]
 800c98a:	bf0c      	ite	eq
 800c98c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c990:	2500      	movne	r5, #0
 800c992:	4293      	cmp	r3, r2
 800c994:	bfc4      	itt	gt
 800c996:	1a9b      	subgt	r3, r3, r2
 800c998:	18ed      	addgt	r5, r5, r3
 800c99a:	2600      	movs	r6, #0
 800c99c:	341a      	adds	r4, #26
 800c99e:	42b5      	cmp	r5, r6
 800c9a0:	d11a      	bne.n	800c9d8 <_printf_common+0xc8>
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	e008      	b.n	800c9b8 <_printf_common+0xa8>
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	4652      	mov	r2, sl
 800c9aa:	4641      	mov	r1, r8
 800c9ac:	4638      	mov	r0, r7
 800c9ae:	47c8      	blx	r9
 800c9b0:	3001      	adds	r0, #1
 800c9b2:	d103      	bne.n	800c9bc <_printf_common+0xac>
 800c9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9bc:	3501      	adds	r5, #1
 800c9be:	e7c6      	b.n	800c94e <_printf_common+0x3e>
 800c9c0:	18e1      	adds	r1, r4, r3
 800c9c2:	1c5a      	adds	r2, r3, #1
 800c9c4:	2030      	movs	r0, #48	@ 0x30
 800c9c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c9ca:	4422      	add	r2, r4
 800c9cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c9d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c9d4:	3302      	adds	r3, #2
 800c9d6:	e7c7      	b.n	800c968 <_printf_common+0x58>
 800c9d8:	2301      	movs	r3, #1
 800c9da:	4622      	mov	r2, r4
 800c9dc:	4641      	mov	r1, r8
 800c9de:	4638      	mov	r0, r7
 800c9e0:	47c8      	blx	r9
 800c9e2:	3001      	adds	r0, #1
 800c9e4:	d0e6      	beq.n	800c9b4 <_printf_common+0xa4>
 800c9e6:	3601      	adds	r6, #1
 800c9e8:	e7d9      	b.n	800c99e <_printf_common+0x8e>
	...

0800c9ec <_printf_i>:
 800c9ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9f0:	7e0f      	ldrb	r7, [r1, #24]
 800c9f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c9f4:	2f78      	cmp	r7, #120	@ 0x78
 800c9f6:	4691      	mov	r9, r2
 800c9f8:	4680      	mov	r8, r0
 800c9fa:	460c      	mov	r4, r1
 800c9fc:	469a      	mov	sl, r3
 800c9fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ca02:	d807      	bhi.n	800ca14 <_printf_i+0x28>
 800ca04:	2f62      	cmp	r7, #98	@ 0x62
 800ca06:	d80a      	bhi.n	800ca1e <_printf_i+0x32>
 800ca08:	2f00      	cmp	r7, #0
 800ca0a:	f000 80d1 	beq.w	800cbb0 <_printf_i+0x1c4>
 800ca0e:	2f58      	cmp	r7, #88	@ 0x58
 800ca10:	f000 80b8 	beq.w	800cb84 <_printf_i+0x198>
 800ca14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ca1c:	e03a      	b.n	800ca94 <_printf_i+0xa8>
 800ca1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ca22:	2b15      	cmp	r3, #21
 800ca24:	d8f6      	bhi.n	800ca14 <_printf_i+0x28>
 800ca26:	a101      	add	r1, pc, #4	@ (adr r1, 800ca2c <_printf_i+0x40>)
 800ca28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca2c:	0800ca85 	.word	0x0800ca85
 800ca30:	0800ca99 	.word	0x0800ca99
 800ca34:	0800ca15 	.word	0x0800ca15
 800ca38:	0800ca15 	.word	0x0800ca15
 800ca3c:	0800ca15 	.word	0x0800ca15
 800ca40:	0800ca15 	.word	0x0800ca15
 800ca44:	0800ca99 	.word	0x0800ca99
 800ca48:	0800ca15 	.word	0x0800ca15
 800ca4c:	0800ca15 	.word	0x0800ca15
 800ca50:	0800ca15 	.word	0x0800ca15
 800ca54:	0800ca15 	.word	0x0800ca15
 800ca58:	0800cb97 	.word	0x0800cb97
 800ca5c:	0800cac3 	.word	0x0800cac3
 800ca60:	0800cb51 	.word	0x0800cb51
 800ca64:	0800ca15 	.word	0x0800ca15
 800ca68:	0800ca15 	.word	0x0800ca15
 800ca6c:	0800cbb9 	.word	0x0800cbb9
 800ca70:	0800ca15 	.word	0x0800ca15
 800ca74:	0800cac3 	.word	0x0800cac3
 800ca78:	0800ca15 	.word	0x0800ca15
 800ca7c:	0800ca15 	.word	0x0800ca15
 800ca80:	0800cb59 	.word	0x0800cb59
 800ca84:	6833      	ldr	r3, [r6, #0]
 800ca86:	1d1a      	adds	r2, r3, #4
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	6032      	str	r2, [r6, #0]
 800ca8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ca94:	2301      	movs	r3, #1
 800ca96:	e09c      	b.n	800cbd2 <_printf_i+0x1e6>
 800ca98:	6833      	ldr	r3, [r6, #0]
 800ca9a:	6820      	ldr	r0, [r4, #0]
 800ca9c:	1d19      	adds	r1, r3, #4
 800ca9e:	6031      	str	r1, [r6, #0]
 800caa0:	0606      	lsls	r6, r0, #24
 800caa2:	d501      	bpl.n	800caa8 <_printf_i+0xbc>
 800caa4:	681d      	ldr	r5, [r3, #0]
 800caa6:	e003      	b.n	800cab0 <_printf_i+0xc4>
 800caa8:	0645      	lsls	r5, r0, #25
 800caaa:	d5fb      	bpl.n	800caa4 <_printf_i+0xb8>
 800caac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cab0:	2d00      	cmp	r5, #0
 800cab2:	da03      	bge.n	800cabc <_printf_i+0xd0>
 800cab4:	232d      	movs	r3, #45	@ 0x2d
 800cab6:	426d      	negs	r5, r5
 800cab8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cabc:	4858      	ldr	r0, [pc, #352]	@ (800cc20 <_printf_i+0x234>)
 800cabe:	230a      	movs	r3, #10
 800cac0:	e011      	b.n	800cae6 <_printf_i+0xfa>
 800cac2:	6821      	ldr	r1, [r4, #0]
 800cac4:	6833      	ldr	r3, [r6, #0]
 800cac6:	0608      	lsls	r0, r1, #24
 800cac8:	f853 5b04 	ldr.w	r5, [r3], #4
 800cacc:	d402      	bmi.n	800cad4 <_printf_i+0xe8>
 800cace:	0649      	lsls	r1, r1, #25
 800cad0:	bf48      	it	mi
 800cad2:	b2ad      	uxthmi	r5, r5
 800cad4:	2f6f      	cmp	r7, #111	@ 0x6f
 800cad6:	4852      	ldr	r0, [pc, #328]	@ (800cc20 <_printf_i+0x234>)
 800cad8:	6033      	str	r3, [r6, #0]
 800cada:	bf14      	ite	ne
 800cadc:	230a      	movne	r3, #10
 800cade:	2308      	moveq	r3, #8
 800cae0:	2100      	movs	r1, #0
 800cae2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cae6:	6866      	ldr	r6, [r4, #4]
 800cae8:	60a6      	str	r6, [r4, #8]
 800caea:	2e00      	cmp	r6, #0
 800caec:	db05      	blt.n	800cafa <_printf_i+0x10e>
 800caee:	6821      	ldr	r1, [r4, #0]
 800caf0:	432e      	orrs	r6, r5
 800caf2:	f021 0104 	bic.w	r1, r1, #4
 800caf6:	6021      	str	r1, [r4, #0]
 800caf8:	d04b      	beq.n	800cb92 <_printf_i+0x1a6>
 800cafa:	4616      	mov	r6, r2
 800cafc:	fbb5 f1f3 	udiv	r1, r5, r3
 800cb00:	fb03 5711 	mls	r7, r3, r1, r5
 800cb04:	5dc7      	ldrb	r7, [r0, r7]
 800cb06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cb0a:	462f      	mov	r7, r5
 800cb0c:	42bb      	cmp	r3, r7
 800cb0e:	460d      	mov	r5, r1
 800cb10:	d9f4      	bls.n	800cafc <_printf_i+0x110>
 800cb12:	2b08      	cmp	r3, #8
 800cb14:	d10b      	bne.n	800cb2e <_printf_i+0x142>
 800cb16:	6823      	ldr	r3, [r4, #0]
 800cb18:	07df      	lsls	r7, r3, #31
 800cb1a:	d508      	bpl.n	800cb2e <_printf_i+0x142>
 800cb1c:	6923      	ldr	r3, [r4, #16]
 800cb1e:	6861      	ldr	r1, [r4, #4]
 800cb20:	4299      	cmp	r1, r3
 800cb22:	bfde      	ittt	le
 800cb24:	2330      	movle	r3, #48	@ 0x30
 800cb26:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cb2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cb2e:	1b92      	subs	r2, r2, r6
 800cb30:	6122      	str	r2, [r4, #16]
 800cb32:	f8cd a000 	str.w	sl, [sp]
 800cb36:	464b      	mov	r3, r9
 800cb38:	aa03      	add	r2, sp, #12
 800cb3a:	4621      	mov	r1, r4
 800cb3c:	4640      	mov	r0, r8
 800cb3e:	f7ff fee7 	bl	800c910 <_printf_common>
 800cb42:	3001      	adds	r0, #1
 800cb44:	d14a      	bne.n	800cbdc <_printf_i+0x1f0>
 800cb46:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4a:	b004      	add	sp, #16
 800cb4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb50:	6823      	ldr	r3, [r4, #0]
 800cb52:	f043 0320 	orr.w	r3, r3, #32
 800cb56:	6023      	str	r3, [r4, #0]
 800cb58:	4832      	ldr	r0, [pc, #200]	@ (800cc24 <_printf_i+0x238>)
 800cb5a:	2778      	movs	r7, #120	@ 0x78
 800cb5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cb60:	6823      	ldr	r3, [r4, #0]
 800cb62:	6831      	ldr	r1, [r6, #0]
 800cb64:	061f      	lsls	r7, r3, #24
 800cb66:	f851 5b04 	ldr.w	r5, [r1], #4
 800cb6a:	d402      	bmi.n	800cb72 <_printf_i+0x186>
 800cb6c:	065f      	lsls	r7, r3, #25
 800cb6e:	bf48      	it	mi
 800cb70:	b2ad      	uxthmi	r5, r5
 800cb72:	6031      	str	r1, [r6, #0]
 800cb74:	07d9      	lsls	r1, r3, #31
 800cb76:	bf44      	itt	mi
 800cb78:	f043 0320 	orrmi.w	r3, r3, #32
 800cb7c:	6023      	strmi	r3, [r4, #0]
 800cb7e:	b11d      	cbz	r5, 800cb88 <_printf_i+0x19c>
 800cb80:	2310      	movs	r3, #16
 800cb82:	e7ad      	b.n	800cae0 <_printf_i+0xf4>
 800cb84:	4826      	ldr	r0, [pc, #152]	@ (800cc20 <_printf_i+0x234>)
 800cb86:	e7e9      	b.n	800cb5c <_printf_i+0x170>
 800cb88:	6823      	ldr	r3, [r4, #0]
 800cb8a:	f023 0320 	bic.w	r3, r3, #32
 800cb8e:	6023      	str	r3, [r4, #0]
 800cb90:	e7f6      	b.n	800cb80 <_printf_i+0x194>
 800cb92:	4616      	mov	r6, r2
 800cb94:	e7bd      	b.n	800cb12 <_printf_i+0x126>
 800cb96:	6833      	ldr	r3, [r6, #0]
 800cb98:	6825      	ldr	r5, [r4, #0]
 800cb9a:	6961      	ldr	r1, [r4, #20]
 800cb9c:	1d18      	adds	r0, r3, #4
 800cb9e:	6030      	str	r0, [r6, #0]
 800cba0:	062e      	lsls	r6, r5, #24
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	d501      	bpl.n	800cbaa <_printf_i+0x1be>
 800cba6:	6019      	str	r1, [r3, #0]
 800cba8:	e002      	b.n	800cbb0 <_printf_i+0x1c4>
 800cbaa:	0668      	lsls	r0, r5, #25
 800cbac:	d5fb      	bpl.n	800cba6 <_printf_i+0x1ba>
 800cbae:	8019      	strh	r1, [r3, #0]
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	6123      	str	r3, [r4, #16]
 800cbb4:	4616      	mov	r6, r2
 800cbb6:	e7bc      	b.n	800cb32 <_printf_i+0x146>
 800cbb8:	6833      	ldr	r3, [r6, #0]
 800cbba:	1d1a      	adds	r2, r3, #4
 800cbbc:	6032      	str	r2, [r6, #0]
 800cbbe:	681e      	ldr	r6, [r3, #0]
 800cbc0:	6862      	ldr	r2, [r4, #4]
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	f7f3 fbab 	bl	8000320 <memchr>
 800cbca:	b108      	cbz	r0, 800cbd0 <_printf_i+0x1e4>
 800cbcc:	1b80      	subs	r0, r0, r6
 800cbce:	6060      	str	r0, [r4, #4]
 800cbd0:	6863      	ldr	r3, [r4, #4]
 800cbd2:	6123      	str	r3, [r4, #16]
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbda:	e7aa      	b.n	800cb32 <_printf_i+0x146>
 800cbdc:	6923      	ldr	r3, [r4, #16]
 800cbde:	4632      	mov	r2, r6
 800cbe0:	4649      	mov	r1, r9
 800cbe2:	4640      	mov	r0, r8
 800cbe4:	47d0      	blx	sl
 800cbe6:	3001      	adds	r0, #1
 800cbe8:	d0ad      	beq.n	800cb46 <_printf_i+0x15a>
 800cbea:	6823      	ldr	r3, [r4, #0]
 800cbec:	079b      	lsls	r3, r3, #30
 800cbee:	d413      	bmi.n	800cc18 <_printf_i+0x22c>
 800cbf0:	68e0      	ldr	r0, [r4, #12]
 800cbf2:	9b03      	ldr	r3, [sp, #12]
 800cbf4:	4298      	cmp	r0, r3
 800cbf6:	bfb8      	it	lt
 800cbf8:	4618      	movlt	r0, r3
 800cbfa:	e7a6      	b.n	800cb4a <_printf_i+0x15e>
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	4632      	mov	r2, r6
 800cc00:	4649      	mov	r1, r9
 800cc02:	4640      	mov	r0, r8
 800cc04:	47d0      	blx	sl
 800cc06:	3001      	adds	r0, #1
 800cc08:	d09d      	beq.n	800cb46 <_printf_i+0x15a>
 800cc0a:	3501      	adds	r5, #1
 800cc0c:	68e3      	ldr	r3, [r4, #12]
 800cc0e:	9903      	ldr	r1, [sp, #12]
 800cc10:	1a5b      	subs	r3, r3, r1
 800cc12:	42ab      	cmp	r3, r5
 800cc14:	dcf2      	bgt.n	800cbfc <_printf_i+0x210>
 800cc16:	e7eb      	b.n	800cbf0 <_printf_i+0x204>
 800cc18:	2500      	movs	r5, #0
 800cc1a:	f104 0619 	add.w	r6, r4, #25
 800cc1e:	e7f5      	b.n	800cc0c <_printf_i+0x220>
 800cc20:	0800d1a5 	.word	0x0800d1a5
 800cc24:	0800d1b6 	.word	0x0800d1b6

0800cc28 <memmove>:
 800cc28:	4288      	cmp	r0, r1
 800cc2a:	b510      	push	{r4, lr}
 800cc2c:	eb01 0402 	add.w	r4, r1, r2
 800cc30:	d902      	bls.n	800cc38 <memmove+0x10>
 800cc32:	4284      	cmp	r4, r0
 800cc34:	4623      	mov	r3, r4
 800cc36:	d807      	bhi.n	800cc48 <memmove+0x20>
 800cc38:	1e43      	subs	r3, r0, #1
 800cc3a:	42a1      	cmp	r1, r4
 800cc3c:	d008      	beq.n	800cc50 <memmove+0x28>
 800cc3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc46:	e7f8      	b.n	800cc3a <memmove+0x12>
 800cc48:	4402      	add	r2, r0
 800cc4a:	4601      	mov	r1, r0
 800cc4c:	428a      	cmp	r2, r1
 800cc4e:	d100      	bne.n	800cc52 <memmove+0x2a>
 800cc50:	bd10      	pop	{r4, pc}
 800cc52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc5a:	e7f7      	b.n	800cc4c <memmove+0x24>

0800cc5c <_sbrk_r>:
 800cc5c:	b538      	push	{r3, r4, r5, lr}
 800cc5e:	4d06      	ldr	r5, [pc, #24]	@ (800cc78 <_sbrk_r+0x1c>)
 800cc60:	2300      	movs	r3, #0
 800cc62:	4604      	mov	r4, r0
 800cc64:	4608      	mov	r0, r1
 800cc66:	602b      	str	r3, [r5, #0]
 800cc68:	f7f6 f894 	bl	8002d94 <_sbrk>
 800cc6c:	1c43      	adds	r3, r0, #1
 800cc6e:	d102      	bne.n	800cc76 <_sbrk_r+0x1a>
 800cc70:	682b      	ldr	r3, [r5, #0]
 800cc72:	b103      	cbz	r3, 800cc76 <_sbrk_r+0x1a>
 800cc74:	6023      	str	r3, [r4, #0]
 800cc76:	bd38      	pop	{r3, r4, r5, pc}
 800cc78:	24000ea8 	.word	0x24000ea8

0800cc7c <_realloc_r>:
 800cc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc80:	4607      	mov	r7, r0
 800cc82:	4614      	mov	r4, r2
 800cc84:	460d      	mov	r5, r1
 800cc86:	b921      	cbnz	r1, 800cc92 <_realloc_r+0x16>
 800cc88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc8c:	4611      	mov	r1, r2
 800cc8e:	f7ff bc5b 	b.w	800c548 <_malloc_r>
 800cc92:	b92a      	cbnz	r2, 800cca0 <_realloc_r+0x24>
 800cc94:	f7ff fbec 	bl	800c470 <_free_r>
 800cc98:	4625      	mov	r5, r4
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cca0:	f000 f81a 	bl	800ccd8 <_malloc_usable_size_r>
 800cca4:	4284      	cmp	r4, r0
 800cca6:	4606      	mov	r6, r0
 800cca8:	d802      	bhi.n	800ccb0 <_realloc_r+0x34>
 800ccaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ccae:	d8f4      	bhi.n	800cc9a <_realloc_r+0x1e>
 800ccb0:	4621      	mov	r1, r4
 800ccb2:	4638      	mov	r0, r7
 800ccb4:	f7ff fc48 	bl	800c548 <_malloc_r>
 800ccb8:	4680      	mov	r8, r0
 800ccba:	b908      	cbnz	r0, 800ccc0 <_realloc_r+0x44>
 800ccbc:	4645      	mov	r5, r8
 800ccbe:	e7ec      	b.n	800cc9a <_realloc_r+0x1e>
 800ccc0:	42b4      	cmp	r4, r6
 800ccc2:	4622      	mov	r2, r4
 800ccc4:	4629      	mov	r1, r5
 800ccc6:	bf28      	it	cs
 800ccc8:	4632      	movcs	r2, r6
 800ccca:	f7ff fbc3 	bl	800c454 <memcpy>
 800ccce:	4629      	mov	r1, r5
 800ccd0:	4638      	mov	r0, r7
 800ccd2:	f7ff fbcd 	bl	800c470 <_free_r>
 800ccd6:	e7f1      	b.n	800ccbc <_realloc_r+0x40>

0800ccd8 <_malloc_usable_size_r>:
 800ccd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccdc:	1f18      	subs	r0, r3, #4
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	bfbc      	itt	lt
 800cce2:	580b      	ldrlt	r3, [r1, r0]
 800cce4:	18c0      	addlt	r0, r0, r3
 800cce6:	4770      	bx	lr

0800cce8 <_init>:
 800cce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccea:	bf00      	nop
 800ccec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccee:	bc08      	pop	{r3}
 800ccf0:	469e      	mov	lr, r3
 800ccf2:	4770      	bx	lr

0800ccf4 <_fini>:
 800ccf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf6:	bf00      	nop
 800ccf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccfa:	bc08      	pop	{r3}
 800ccfc:	469e      	mov	lr, r3
 800ccfe:	4770      	bx	lr
