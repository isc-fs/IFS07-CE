
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b330  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  0800b600  0800b600  0000c600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b9e0  0800b9e0  0000c9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800b9e8  0800b9e8  0000c9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b9f0  0800b9f0  0000c9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  24000000  0800b9f4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000d50  24000068  0800ba5c  0000d068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000db8  0800ba5c  0000ddb8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021767  00000000  00000000  0000d096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000352c  00000000  00000000  0002e7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001380  00000000  00000000  00031d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f0b  00000000  00000000  000330b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a27f  00000000  00000000  00033fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a6f9  00000000  00000000  0006e23a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169b4b  00000000  00000000  00088933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f247e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005928  00000000  00000000  001f24c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  001f7dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000068 	.word	0x24000068
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b5e8 	.word	0x0800b5e8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400006c 	.word	0x2400006c
 800030c:	0800b5e8 	.word	0x0800b5e8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <_ZN7BMS_MODC1Emiiihji>:
/*********************************************************************************************************
 ** Function name:           BMS_MOD
 ** Descriptions:            Initialization function of teh class
 *********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT,
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
		uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	3308      	adds	r3, #8
 800070c:	224c      	movs	r2, #76	@ 0x4c
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f00a faeb 	bl	800acec <memset>
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	3354      	adds	r3, #84	@ 0x54
 800071a:	2298      	movs	r2, #152	@ 0x98
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f00a fae4 	bl	800acec <memset>
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2200      	movs	r2, #0
 8000728:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2200      	movs	r2, #0
 8000730:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2200      	movs	r2, #0
 8000738:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2200      	movs	r2, #0
 8000740:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800074a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000754:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800075e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2200      	movs	r2, #0
 8000772:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2200      	movs	r2, #0
 8000796:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	2213      	movs	r2, #19
 80007a6:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	2203      	movs	r2, #3
 80007ae:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80007b8:	2230      	movs	r2, #48	@ 0x30
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f00a fa95 	bl	800acec <memset>
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	2200      	movs	r2, #0
 80007c6:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	2200      	movs	r2, #0
 80007ce:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	2200      	movs	r2, #0
 80007d6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	f241 0268 	movw	r2, #4200	@ 0x1068
 80007e0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2200      	movs	r2, #0
 80007e8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2200      	movs	r2, #0
 80007f0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2200      	movs	r2, #0
 80007f8:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
	CANID = _ID;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	601a      	str	r2, [r3, #0]
	LIMIT_MAX_V = _MAXV;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	LIMIT_MIN_V = _MINV;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	LIMIT_MAX_T = _MAXT;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	NUM_CELLS = _NUMCELLS;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	7f3a      	ldrb	r2, [r7, #28]
 800081e:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
	time_lim_plotted += _LAG;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8000828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082a:	441a      	add	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	time_lim_sended += _LAG;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8000838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083a:	441a      	add	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	time_lim_received += _LAG;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800084a:	441a      	add	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

}
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <_ZN7BMS_MOD12voltage_infoEPc>:

/*********************************************************************************************************
 ** Function name:           info
 ** Descriptions:            Function for printing the class data
 *********************************************************************************************************/
void BMS_MOD::voltage_info(char *buffer) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]

	if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 8000866:	f001 f941 	bl	8001aec <getUARTState>
 800086a:	4603      	mov	r3, r0
 800086c:	2b20      	cmp	r3, #32
 800086e:	bf0c      	ite	eq
 8000870:	2301      	moveq	r3, #1
 8000872:	2300      	movne	r3, #0
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	f000 8083 	beq.w	8000982 <_ZN7BMS_MOD12voltage_infoEPc+0x126>
		print((char*) "\n***********************");
 800087c:	4851      	ldr	r0, [pc, #324]	@ (80009c4 <_ZN7BMS_MOD12voltage_infoEPc+0x168>)
 800087e:	f001 f8f9 	bl	8001a74 <print>
		print((char*) "         BMS");
 8000882:	4851      	ldr	r0, [pc, #324]	@ (80009c8 <_ZN7BMS_MOD12voltage_infoEPc+0x16c>)
 8000884:	f001 f8f6 	bl	8001a74 <print>
		print((char*) "***********************");
 8000888:	4850      	ldr	r0, [pc, #320]	@ (80009cc <_ZN7BMS_MOD12voltage_infoEPc+0x170>)
 800088a:	f001 f8f3 	bl	8001a74 <print>
		sprintf(buffer, " - ERROR:     %i", error);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	461a      	mov	r2, r3
 8000894:	494e      	ldr	r1, [pc, #312]	@ (80009d0 <_ZN7BMS_MOD12voltage_infoEPc+0x174>)
 8000896:	6838      	ldr	r0, [r7, #0]
 8000898:	f00a fa06 	bl	800aca8 <siprintf>
		print(buffer);
 800089c:	6838      	ldr	r0, [r7, #0]
 800089e:	f001 f8e9 	bl	8001a74 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	494a      	ldr	r1, [pc, #296]	@ (80009d4 <_ZN7BMS_MOD12voltage_infoEPc+0x178>)
 80008aa:	6838      	ldr	r0, [r7, #0]
 80008ac:	f00a f9fc 	bl	800aca8 <siprintf>
		print(buffer);
 80008b0:	6838      	ldr	r0, [r7, #0]
 80008b2:	f001 f8df 	bl	8001a74 <print>
		sprintf(buffer, " - MAX V =    %i mV", MAX_V);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80008bc:	461a      	mov	r2, r3
 80008be:	4946      	ldr	r1, [pc, #280]	@ (80009d8 <_ZN7BMS_MOD12voltage_infoEPc+0x17c>)
 80008c0:	6838      	ldr	r0, [r7, #0]
 80008c2:	f00a f9f1 	bl	800aca8 <siprintf>
		print(buffer);
 80008c6:	6838      	ldr	r0, [r7, #0]
 80008c8:	f001 f8d4 	bl	8001a74 <print>
		sprintf(buffer, " - MIN V =    %i mV", MIN_V);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80008d2:	461a      	mov	r2, r3
 80008d4:	4941      	ldr	r1, [pc, #260]	@ (80009dc <_ZN7BMS_MOD12voltage_infoEPc+0x180>)
 80008d6:	6838      	ldr	r0, [r7, #0]
 80008d8:	f00a f9e6 	bl	800aca8 <siprintf>
		print(buffer);
 80008dc:	6838      	ldr	r0, [r7, #0]
 80008de:	f001 f8c9 	bl	8001a74 <print>
		print((char*) "-----------------------");
 80008e2:	483f      	ldr	r0, [pc, #252]	@ (80009e0 <_ZN7BMS_MOD12voltage_infoEPc+0x184>)
 80008e4:	f001 f8c6 	bl	8001a74 <print>
		sprintf(buffer, "VOLTS (mV): [%i", cellVoltagemV[0]);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	461a      	mov	r2, r3
 80008ee:	493d      	ldr	r1, [pc, #244]	@ (80009e4 <_ZN7BMS_MOD12voltage_infoEPc+0x188>)
 80008f0:	6838      	ldr	r0, [r7, #0]
 80008f2:	f00a f9d9 	bl	800aca8 <siprintf>
		printnl(buffer);
 80008f6:	6838      	ldr	r0, [r7, #0]
 80008f8:	f001 f8da 	bl	8001ab0 <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	e00f      	b.n	8000922 <_ZN7BMS_MOD12voltage_infoEPc+0xc6>
			sprintf(buffer, ", %i", cellVoltagemV[i]);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	3202      	adds	r2, #2
 8000908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800090c:	461a      	mov	r2, r3
 800090e:	4936      	ldr	r1, [pc, #216]	@ (80009e8 <_ZN7BMS_MOD12voltage_infoEPc+0x18c>)
 8000910:	6838      	ldr	r0, [r7, #0]
 8000912:	f00a f9c9 	bl	800aca8 <siprintf>
			printnl(buffer);
 8000916:	6838      	ldr	r0, [r7, #0]
 8000918:	f001 f8ca 	bl	8001ab0 <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	3301      	adds	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000928:	461a      	mov	r2, r3
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	4293      	cmp	r3, r2
 800092e:	dbe8      	blt.n	8000902 <_ZN7BMS_MOD12voltage_infoEPc+0xa6>
		}

		for (int i = 0; i < NUM_CELLS; i++) {
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	e00e      	b.n	8000954 <_ZN7BMS_MOD12voltage_infoEPc+0xf8>
			voltage_acum += cellVoltagemV[i];
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68b9      	ldr	r1, [r7, #8]
 8000940:	3102      	adds	r1, #2
 8000942:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000946:	441a      	add	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
		for (int i = 0; i < NUM_CELLS; i++) {
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	3301      	adds	r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800095a:	461a      	mov	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4293      	cmp	r3, r2
 8000960:	dbe9      	blt.n	8000936 <_ZN7BMS_MOD12voltage_infoEPc+0xda>
		}

		print((char*) "]");
 8000962:	4822      	ldr	r0, [pc, #136]	@ (80009ec <_ZN7BMS_MOD12voltage_infoEPc+0x190>)
 8000964:	f001 f886 	bl	8001a74 <print>
		sprintf(buffer, " - V(max) = %i mV || V(min) = %i", MAX_V, MIN_V);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8000974:	491e      	ldr	r1, [pc, #120]	@ (80009f0 <_ZN7BMS_MOD12voltage_infoEPc+0x194>)
 8000976:	6838      	ldr	r0, [r7, #0]
 8000978:	f00a f996 	bl	800aca8 <siprintf>
		print(buffer);
 800097c:	6838      	ldr	r0, [r7, #0]
 800097e:	f001 f879 	bl	8001a74 <print>
	}
	sprintf(buffer, "- BALANCING V = %i mV", BALANCING_V);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8000988:	461a      	mov	r2, r3
 800098a:	491a      	ldr	r1, [pc, #104]	@ (80009f4 <_ZN7BMS_MOD12voltage_infoEPc+0x198>)
 800098c:	6838      	ldr	r0, [r7, #0]
 800098e:	f00a f98b 	bl	800aca8 <siprintf>
	print(buffer);
 8000992:	6838      	ldr	r0, [r7, #0]
 8000994:	f001 f86e 	bl	8001a74 <print>

	sprintf(buffer, "- STACK VOLTAGE = %i V", voltage_acum / 1000);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800099e:	4a16      	ldr	r2, [pc, #88]	@ (80009f8 <_ZN7BMS_MOD12voltage_infoEPc+0x19c>)
 80009a0:	fb82 1203 	smull	r1, r2, r2, r3
 80009a4:	1192      	asrs	r2, r2, #6
 80009a6:	17db      	asrs	r3, r3, #31
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	461a      	mov	r2, r3
 80009ac:	4913      	ldr	r1, [pc, #76]	@ (80009fc <_ZN7BMS_MOD12voltage_infoEPc+0x1a0>)
 80009ae:	6838      	ldr	r0, [r7, #0]
 80009b0:	f00a f97a 	bl	800aca8 <siprintf>
	print(buffer);
 80009b4:	6838      	ldr	r0, [r7, #0]
 80009b6:	f001 f85d 	bl	8001a74 <print>
}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	0800b600 	.word	0x0800b600
 80009c8:	0800b61c 	.word	0x0800b61c
 80009cc:	0800b62c 	.word	0x0800b62c
 80009d0:	0800b644 	.word	0x0800b644
 80009d4:	0800b658 	.word	0x0800b658
 80009d8:	0800b66c 	.word	0x0800b66c
 80009dc:	0800b680 	.word	0x0800b680
 80009e0:	0800b694 	.word	0x0800b694
 80009e4:	0800b6ac 	.word	0x0800b6ac
 80009e8:	0800b6bc 	.word	0x0800b6bc
 80009ec:	0800b6c4 	.word	0x0800b6c4
 80009f0:	0800b6c8 	.word	0x0800b6c8
 80009f4:	0800b6ec 	.word	0x0800b6ec
 80009f8:	10624dd3 	.word	0x10624dd3
 80009fc:	0800b704 	.word	0x0800b704

08000a00 <_ZN7BMS_MOD5parseEmPhm>:

/*********************************************************************************************************
 ** Function name:           parse
 ** Descriptions:            Function for parsing the received data via CAN protocol
 *********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08c      	sub	sp, #48	@ 0x30
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
 8000a0c:	603b      	str	r3, [r7, #0]
	if (id > CANID && id < CANID + 30) {
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	f240 8172 	bls.w	8000cfe <_ZN7BMS_MOD5parseEmPhm+0x2fe>
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	331e      	adds	r3, #30
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	f080 816b 	bcs.w	8000cfe <_ZN7BMS_MOD5parseEmPhm+0x2fe>
		int m = id % CANID;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a32:	fb01 f202 	mul.w	r2, r1, r2
 8000a36:	1a9b      	subs	r3, r3, r2
 8000a38:	61bb      	str	r3, [r7, #24]
		int pos = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
		if (m >= 1 && m <= 5) {
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	f340 80a8 	ble.w	8000b96 <_ZN7BMS_MOD5parseEmPhm+0x196>
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	2b05      	cmp	r3, #5
 8000a4a:	f300 80a4 	bgt.w	8000b96 <_ZN7BMS_MOD5parseEmPhm+0x196>
			time_lim_received = t + TIME_LIM_RECV;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	441a      	add	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

			for (int i = 0; i < 4; i++) {
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a62:	e059      	b.n	8000b18 <_ZN7BMS_MOD5parseEmPhm+0x118>
				pos = (m - 1) * 4 + i;
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a6c:	4413      	add	r3, r2
 8000a6e:	617b      	str	r3, [r7, #20]
				if (pos >= 19)
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	2b12      	cmp	r3, #18
 8000a74:	dc54      	bgt.n	8000b20 <_ZN7BMS_MOD5parseEmPhm+0x120>
					break;

				cellVoltagemV[pos] = (buf[2 * i] << 8) | buf[2 * i + 1];
 8000a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	021b      	lsls	r3, r3, #8
 8000a84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a86:	0052      	lsls	r2, r2, #1
 8000a88:	3201      	adds	r2, #1
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	440a      	add	r2, r1
 8000a8e:	7812      	ldrb	r2, [r2, #0]
 8000a90:	ea43 0102 	orr.w	r1, r3, r2
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	697a      	ldr	r2, [r7, #20]
 8000a98:	3202      	adds	r2, #2
 8000a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				if ((cellVoltagemV[pos] > LIMIT_MAX_V
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	697a      	ldr	r2, [r7, #20]
 8000aa2:	3202      	adds	r2, #2
 8000aa4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	dc09      	bgt.n	8000ac6 <_ZN7BMS_MOD5parseEmPhm+0xc6>
						|| cellVoltagemV[pos] < LIMIT_MIN_V)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	3202      	adds	r2, #2
 8000ab8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	da1f      	bge.n	8000b06 <_ZN7BMS_MOD5parseEmPhm+0x106>
						&& pos < NUM_CELLS) {
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000acc:	461a      	mov	r2, r3
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	da18      	bge.n	8000b06 <_ZN7BMS_MOD5parseEmPhm+0x106>
					flag_error_volt[pos]++;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	697a      	ldr	r2, [r7, #20]
 8000ad8:	3248      	adds	r2, #72	@ 0x48
 8000ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ade:	1c59      	adds	r1, r3, #1
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	3248      	adds	r2, #72	@ 0x48
 8000ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					if (flag_error_volt[pos] >= max_flag)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	3248      	adds	r2, #72	@ 0x48
 8000af0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000afa:	429a      	cmp	r2, r3
 8000afc:	db09      	blt.n	8000b12 <_ZN7BMS_MOD5parseEmPhm+0x112>
						error = BMS_ERROR_VOLTS;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	2202      	movs	r2, #2
 8000b02:	605a      	str	r2, [r3, #4]
					if (flag_error_volt[pos] >= max_flag)
 8000b04:	e005      	b.n	8000b12 <_ZN7BMS_MOD5parseEmPhm+0x112>
				} else {
					flag_error_volt[pos] = 0;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	3248      	adds	r2, #72	@ 0x48
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int i = 0; i < 4; i++) {
 8000b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b14:	3301      	adds	r3, #1
 8000b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	dda2      	ble.n	8000a64 <_ZN7BMS_MOD5parseEmPhm+0x64>
 8000b1e:	e000      	b.n	8000b22 <_ZN7BMS_MOD5parseEmPhm+0x122>
					break;
 8000b20:	bf00      	nop
				}
			}

			MAX_V = cellVoltagemV[0];
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
			MIN_V = cellVoltagemV[0];
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	689a      	ldr	r2, [r3, #8]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
			for (int i = 1; i < 19; i++) {
 8000b36:	2301      	movs	r3, #1
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b3a:	e027      	b.n	8000b8c <_ZN7BMS_MOD5parseEmPhm+0x18c>
				if (cellVoltagemV[i] > MAX_V)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b40:	3202      	adds	r2, #2
 8000b42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dd08      	ble.n	8000b62 <_ZN7BMS_MOD5parseEmPhm+0x162>
					MAX_V = cellVoltagemV[i];
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b54:	3202      	adds	r2, #2
 8000b56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8000b60:	e011      	b.n	8000b86 <_ZN7BMS_MOD5parseEmPhm+0x186>
				else if (cellVoltagemV[i] < MIN_V)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b66:	3202      	adds	r2, #2
 8000b68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8000b72:	429a      	cmp	r2, r3
 8000b74:	da07      	bge.n	8000b86 <_ZN7BMS_MOD5parseEmPhm+0x186>
					MIN_V = cellVoltagemV[i];
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b7a:	3202      	adds	r2, #2
 8000b7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
			for (int i = 1; i < 19; i++) {
 8000b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b88:	3301      	adds	r3, #1
 8000b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b8e:	2b12      	cmp	r3, #18
 8000b90:	ddd4      	ble.n	8000b3c <_ZN7BMS_MOD5parseEmPhm+0x13c>
			}

			return true;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e0b4      	b.n	8000d00 <_ZN7BMS_MOD5parseEmPhm+0x300>
		}
		//message_balancing[1] = BALANCING_V & 0xFF;           // Coment this two lines for disabling the balancing
		//message_balancing[0] = (BALANCING_V >> 8) & 0xFF;    // Coment this two lines for disabling the balancing

		else if (m >= 21 && m <= 26) {
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	2b14      	cmp	r3, #20
 8000b9a:	f340 80b0 	ble.w	8000cfe <_ZN7BMS_MOD5parseEmPhm+0x2fe>
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	2b1a      	cmp	r3, #26
 8000ba2:	f300 80ac 	bgt.w	8000cfe <_ZN7BMS_MOD5parseEmPhm+0x2fe>
			if (flag_charger == 1)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d104      	bne.n	8000bba <_ZN7BMS_MOD5parseEmPhm+0x1ba>
				module_send_message_CAN1(id, buf, 8); // Reenvío por CAN1 si aplica
 8000bb0:	2208      	movs	r2, #8
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	68b8      	ldr	r0, [r7, #8]
 8000bb6:	f000 ff1b 	bl	80019f0 <module_send_message_CAN1>

			if (m < 26) {
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	2b19      	cmp	r3, #25
 8000bbe:	dc28      	bgt.n	8000c12 <_ZN7BMS_MOD5parseEmPhm+0x212>
				for (int i = 0; i < 8; i++) {
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bc4:	e021      	b.n	8000c0a <_ZN7BMS_MOD5parseEmPhm+0x20a>
					pos = (m - 1) * 8 + i;
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bce:	4413      	add	r3, r2
 8000bd0:	617b      	str	r3, [r7, #20]
					cellTemperature[pos] = buf[i];
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3314      	adds	r3, #20
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4413      	add	r3, r2
 8000be6:	6059      	str	r1, [r3, #4]
					if (cellTemperature[pos] > LIMIT_MAX_T)
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3314      	adds	r3, #20
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	dd02      	ble.n	8000c04 <_ZN7BMS_MOD5parseEmPhm+0x204>
						error = BMS_ERROR_TEMP;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2203      	movs	r2, #3
 8000c02:	605a      	str	r2, [r3, #4]
				for (int i = 0; i < 8; i++) {
 8000c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c06:	3301      	adds	r3, #1
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0c:	2b07      	cmp	r3, #7
 8000c0e:	ddda      	ble.n	8000bc6 <_ZN7BMS_MOD5parseEmPhm+0x1c6>
 8000c10:	e027      	b.n	8000c62 <_ZN7BMS_MOD5parseEmPhm+0x262>
				}
			} else { // m == 26 → últimos 2–3 sensores
				for (int i = 0; i < 3; i++) {
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
 8000c16:	e021      	b.n	8000c5c <_ZN7BMS_MOD5parseEmPhm+0x25c>
					pos = (m - 1) * 8 + i;
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	6a3a      	ldr	r2, [r7, #32]
 8000c20:	4413      	add	r3, r2
 8000c22:	617b      	str	r3, [r7, #20]
					cellTemperature[pos] = buf[i];
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	3314      	adds	r3, #20
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	6059      	str	r1, [r3, #4]
					if (cellTemperature[pos] > LIMIT_MAX_T)
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3314      	adds	r3, #20
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	dd02      	ble.n	8000c56 <_ZN7BMS_MOD5parseEmPhm+0x256>
						error = BMS_ERROR_TEMP;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2203      	movs	r2, #3
 8000c54:	605a      	str	r2, [r3, #4]
				for (int i = 0; i < 3; i++) {
 8000c56:	6a3b      	ldr	r3, [r7, #32]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	623b      	str	r3, [r7, #32]
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	ddda      	ble.n	8000c18 <_ZN7BMS_MOD5parseEmPhm+0x218>
				}
			}

			MAX_T = cellTemperature[0];
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
			MIN_T = cellTemperature[0];
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
			for (int i = 0; i < 38; i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	e033      	b.n	8000ce4 <_ZN7BMS_MOD5parseEmPhm+0x2e4>
				if (cellTemperature[i] > MAX_T)
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3314      	adds	r3, #20
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	dd09      	ble.n	8000ca6 <_ZN7BMS_MOD5parseEmPhm+0x2a6>
					MAX_T = cellTemperature[i];
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	3314      	adds	r3, #20
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 8000ca4:	e01b      	b.n	8000cde <_ZN7BMS_MOD5parseEmPhm+0x2de>
				else if (cellTemperature[i] < MIN_T && cellTemperature[i] != 0)
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	3314      	adds	r3, #20
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4413      	add	r3, r2
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	da10      	bge.n	8000cde <_ZN7BMS_MOD5parseEmPhm+0x2de>
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3314      	adds	r3, #20
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d008      	beq.n	8000cde <_ZN7BMS_MOD5parseEmPhm+0x2de>
					MIN_T = cellTemperature[i];
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3314      	adds	r3, #20
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
			for (int i = 0; i < 38; i++) {
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	61fb      	str	r3, [r7, #28]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	2b25      	cmp	r3, #37	@ 0x25
 8000ce8:	ddc8      	ble.n	8000c7c <_ZN7BMS_MOD5parseEmPhm+0x27c>
			}

			time_lim_received = t + TIME_LIM_RECV;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	441a      	add	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
			return true;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e000      	b.n	8000d00 <_ZN7BMS_MOD5parseEmPhm+0x300>
		}
	}

	return false;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3730      	adds	r7, #48	@ 0x30
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <_ZN7BMS_MOD13query_voltageEmPc>:

/*********************************************************************************************************
 ** Function name:           query_voltage
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/
int BMS_MOD::query_voltage(uint32_t time, char *buffer) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
	// Shunt voltage in milivolts
	uint8_t message_balancing[2] = { 0x00, 0x00 };
 8000d14:	2300      	movs	r3, #0
 8000d16:	823b      	strh	r3, [r7, #16]

	if (time > time_lim_sended) {
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d917      	bls.n	8000d54 <_ZN7BMS_MOD13query_voltageEmPc+0x4c>
		time_lim_sended += TIME_LIM_SEND;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000d30:	441a      	add	r2, r3
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
		if (CANID != 0x00) { //It keeps sending 0x00 and dont know where
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d009      	beq.n	8000d54 <_ZN7BMS_MOD13query_voltageEmPc+0x4c>
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f107 0110 	add.w	r1, r7, #16
 8000d48:	2202      	movs	r2, #2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fe72 	bl	8001a34 <module_send_message_CAN2>
 8000d50:	4603      	mov	r3, r0
					!= HAL_OK) {
 8000d52:	2b00      	cmp	r3, #0
			}
		}

	}

	if (time > time_lim_received) {
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d902      	bls.n	8000d66 <_ZN7BMS_MOD13query_voltageEmPc+0x5e>
		error = BMS_ERROR_COMMUNICATION;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2201      	movs	r2, #1
 8000d64:	605a      	str	r2, [r3, #4]
	}

	if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d013      	beq.n	8000d98 <_ZN7BMS_MOD13query_voltageEmPc+0x90>
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d90d      	bls.n	8000d98 <_ZN7BMS_MOD13query_voltageEmPc+0x90>
		time_lim_plotted += TIME_LIM_PLOT;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8000d88:	441a      	add	r2, r3
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
		voltage_info(buffer);
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	68f8      	ldr	r0, [r7, #12]
 8000d94:	f7ff fd62 	bl	800085c <_ZN7BMS_MOD12voltage_infoEPc>
	}

	for (int i = 0; i < NUM_CELLS; i++) {
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	e00e      	b.n	8000dbc <_ZN7BMS_MOD13query_voltageEmPc+0xb4>
		voltage_acum += cellVoltagemV[i];
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	6979      	ldr	r1, [r7, #20]
 8000da8:	3102      	adds	r1, #2
 8000daa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000dae:	441a      	add	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
	for (int i = 0; i < NUM_CELLS; i++) {
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3301      	adds	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	dbe9      	blt.n	8000d9e <_ZN7BMS_MOD13query_voltageEmPc+0x96>
	}
	return error;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	685b      	ldr	r3, [r3, #4]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2200      	movs	r2, #0
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2201      	movs	r2, #1
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	731a      	strb	r2, [r3, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2202      	movs	r2, #2
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e0a:	615a      	str	r2, [r3, #20]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2264      	movs	r2, #100	@ 0x64
 8000e10:	619a      	str	r2, [r3, #24]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4a18      	ldr	r2, [pc, #96]	@ (8000e78 <_ZN7CPU_MODC1Emmi+0xa0>)
 8000e16:	61da      	str	r2, [r3, #28]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	695a      	ldr	r2, [r3, #20]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	621a      	str	r2, [r3, #32]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	69da      	ldr	r2, [r3, #28]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2200      	movs	r2, #0
 8000e32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2200      	movs	r2, #0
 8000e38:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	68ba      	ldr	r2, [r7, #8]
 8000e3e:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	6a1a      	ldr	r2, [r3, #32]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	441a      	add	r2, r3
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	441a      	add	r2, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	441a      	add	r2, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	000f4240 	.word	0x000f4240

08000e7c <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e90:	d131      	bne.n	8000ef6 <_ZN7CPU_MOD5parseEmPhm+0x7a>
        error = CPU_OK;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	69da      	ldr	r2, [r3, #28]
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	441a      	add	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	021b      	lsls	r3, r3, #8
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	7812      	ldrb	r2, [r2, #0]
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8000ebe:	dd18      	ble.n	8000ef2 <_ZN7CPU_MOD5parseEmPhm+0x76>
            error = CPU_BUS_LINE_OK;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	330c      	adds	r3, #12
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f000 fd8d 	bl	80019f0 <module_send_message_CAN1>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bf14      	ite	ne
 8000edc:	2301      	movne	r3, #1
 8000ede:	2300      	moveq	r3, #0
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d005      	beq.n	8000ef2 <_ZN7CPU_MOD5parseEmPhm+0x76>
                error = CPU_ERROR_COMMUNICATION;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	609a      	str	r2, [r3, #8]
                print((char*)"error message");
 8000eec:	4804      	ldr	r0, [pc, #16]	@ (8000f00 <_ZN7CPU_MOD5parseEmPhm+0x84>)
 8000eee:	f000 fdc1 	bl	8001a74 <print>
            }

        }
        return true;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <_ZN7CPU_MOD5parseEmPhm+0x7c>
    }
    return false;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	0800b878 	.word	0x0800b878

08000f04 <_ZN7CPU_MOD11updateStateEi>:
        info(buffer);
    }
    return error;
}

void CPU_MOD::updateState(int s) {
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	731a      	strb	r2, [r3, #12]
    current_state = s;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	611a      	str	r2, [r3, #16]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX)
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2200      	movs	r2, #0
 8000f44:	721a      	strb	r2, [r3, #8]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	725a      	strb	r2, [r3, #9]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000f76:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	22fa      	movs	r2, #250	@ 0xfa
 8000f7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2232      	movs	r2, #50	@ 0x32
 8000f82:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2232      	movs	r2, #50	@ 0x32
 8000f88:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2200      	movs	r2, #0
 8000f94:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	641a      	str	r2, [r3, #64]	@ 0x40
{
    CANID = ID;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	605a      	str	r2, [r3, #4]
    C_MAX = _C_MAX;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	601a      	str	r2, [r3, #0]
    flag_error_current = 1;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	621a      	str	r2, [r3, #32]
}
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <_ZN11Current_MOD5queryEiPc>:
// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char* buffer)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
    error = Current_OK;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	635a      	str	r2, [r3, #52]	@ 0x34

    VoltagemV = readAnalogValue();
 8000fd6:	f000 fd93 	bl	8001b00 <readAnalogValue>
 8000fda:	eef0 7a40 	vmov.f32	s15, s0
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	edc3 7a04 	vstr	s15, [r3, #16]

    //printValue(VoltagemV);

    if(VoltagemV < 400){
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fea:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800102c <_ZN11Current_MOD5queryEiPc+0x68>
 8000fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff6:	d509      	bpl.n	800100c <_ZN11Current_MOD5queryEiPc+0x48>
    	flag_error_current = 1;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	621a      	str	r2, [r3, #32]
    	flag_current = 1;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2201      	movs	r2, #1
 8001002:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = 1;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2201      	movs	r2, #1
 8001008:	635a      	str	r2, [r3, #52]	@ 0x34
 800100a:	e008      	b.n	800101e <_ZN11Current_MOD5queryEiPc+0x5a>
    }
    else{
    	flag_error_current = 0;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
    	flag_current = 0;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2200      	movs	r2, #0
 8001016:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = Current_OK;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	635a      	str	r2, [r3, #52]	@ 0x34
        time_lim_plotted += TIME_LIM_PLOT;

    }
*/
    //info(buffer);
    return error;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	43c80000 	.word	0x43c80000

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b085      	sub	sp, #20
 8001034:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001036:	f001 fb45 	bl	80026c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103a:	f000 f89d 	bl	8001178 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800103e:	f000 f917 	bl	8001270 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001042:	f000 fbc1 	bl	80017c8 <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 8001046:	f000 fad5 	bl	80015f4 <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 800104a:	f000 fa49 	bl	80014e0 <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 800104e:	f000 fb5b 	bl	8001708 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8001052:	f000 f941 	bl	80012d8 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 8001056:	f000 f9c9 	bl	80013ec <_ZL12MX_ADC3_Initv>
  /* USER CODE BEGIN 2 */

  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 800105a:	483d      	ldr	r0, [pc, #244]	@ (8001150 <main+0x120>)
 800105c:	f003 fec6 	bl	8004dec <HAL_FDCAN_Start>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	bf0c      	ite	eq
 8001066:	2301      	moveq	r3, #1
 8001068:	2300      	movne	r3, #0
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <main+0x46>
	  print((char*)"CAN_ACU iniciado");
 8001070:	4838      	ldr	r0, [pc, #224]	@ (8001154 <main+0x124>)
 8001072:	f000 fcff 	bl	8001a74 <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 8001076:	2200      	movs	r2, #0
 8001078:	2101      	movs	r1, #1
 800107a:	4835      	ldr	r0, [pc, #212]	@ (8001150 <main+0x120>)
 800107c:	f004 f8a8 	bl	80051d0 <HAL_FDCAN_ActivateNotification>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	bf0c      	ite	eq
 8001086:	2301      	moveq	r3, #1
 8001088:	2300      	movne	r3, #0
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <main+0x66>
  {
	  print((char*)"CAN_ACU notification");
 8001090:	4831      	ldr	r0, [pc, #196]	@ (8001158 <main+0x128>)
 8001092:	f000 fcef 	bl	8001a74 <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 8001096:	4831      	ldr	r0, [pc, #196]	@ (800115c <main+0x12c>)
 8001098:	f003 fea8 	bl	8004dec <HAL_FDCAN_Start>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	bf0c      	ite	eq
 80010a2:	2301      	moveq	r3, #1
 80010a4:	2300      	movne	r3, #0
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <main+0x82>
	  print((char*)"CAN_BMS iniciado");
 80010ac:	482c      	ldr	r0, [pc, #176]	@ (8001160 <main+0x130>)
 80010ae:	f000 fce1 	bl	8001a74 <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 80010b2:	482c      	ldr	r0, [pc, #176]	@ (8001164 <main+0x134>)
 80010b4:	f002 f8c6 	bl	8003244 <HAL_ADC_Start>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	bf0c      	ite	eq
 80010be:	2301      	moveq	r3, #1
 80010c0:	2300      	movne	r3, #0
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <main+0x9e>
	  print((char*)"ADC iniciado");
 80010c8:	4827      	ldr	r0, [pc, #156]	@ (8001168 <main+0x138>)
 80010ca:	f000 fcd3 	bl	8001a74 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 80010ce:	f000 fd3f 	bl	8001b50 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 80010d2:	4b26      	ldr	r3, [pc, #152]	@ (800116c <main+0x13c>)
 80010d4:	4a26      	ldr	r2, [pc, #152]	@ (8001170 <main+0x140>)
 80010d6:	2140      	movs	r1, #64	@ 0x40
 80010d8:	4820      	ldr	r0, [pc, #128]	@ (800115c <main+0x12c>)
 80010da:	f003 ff0d 	bl	8004ef8 <HAL_FDCAN_GetRxMessage>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bf0c      	ite	eq
 80010e4:	2301      	moveq	r3, #1
 80010e6:	2300      	movne	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0ef      	beq.n	80010ce <main+0x9e>

		  msg_bms.id = RxHeader_bms.Identifier;
 80010ee:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <main+0x140>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a20      	ldr	r2, [pc, #128]	@ (8001174 <main+0x144>)
 80010f4:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 80010f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <main+0x140>)
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <main+0x144>)
 80010fe:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	e00c      	b.n	8001120 <main+0xf0>
 8001106:	4a19      	ldr	r2, [pc, #100]	@ (800116c <main+0x13c>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4413      	add	r3, r2
 800110c:	7819      	ldrb	r1, [r3, #0]
 800110e:	4a19      	ldr	r2, [pc, #100]	@ (8001174 <main+0x144>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4413      	add	r3, r2
 8001114:	3305      	adds	r3, #5
 8001116:	460a      	mov	r2, r1
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3301      	adds	r3, #1
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b07      	cmp	r3, #7
 8001124:	ddef      	ble.n	8001106 <main+0xd6>
		  msg_bms.bus = 2;
 8001126:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <main+0x144>)
 8001128:	2202      	movs	r2, #2
 800112a:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 800112c:	f001 fb50 	bl	80027d0 <HAL_GetTick>
 8001130:	4603      	mov	r3, r0
 8001132:	4a10      	ldr	r2, [pc, #64]	@ (8001174 <main+0x144>)
 8001134:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 8001136:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <main+0x144>)
 8001138:	466c      	mov	r4, sp
 800113a:	f103 0210 	add.w	r2, r3, #16
 800113e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001142:	e884 0003 	stmia.w	r4, {r0, r1}
 8001146:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001148:	f000 fee6 	bl	8001f18 <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800114c:	e7bf      	b.n	80010ce <main+0x9e>
 800114e:	bf00      	nop
 8001150:	24000164 	.word	0x24000164
 8001154:	0800b888 	.word	0x0800b888
 8001158:	0800b89c 	.word	0x0800b89c
 800115c:	24000204 	.word	0x24000204
 8001160:	0800b8b4 	.word	0x0800b8b4
 8001164:	240000f4 	.word	0x240000f4
 8001168:	0800b8c8 	.word	0x0800b8c8
 800116c:	240003d0 	.word	0x240003d0
 8001170:	240003a8 	.word	0x240003a8
 8001174:	2400043c 	.word	0x2400043c

08001178 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b09c      	sub	sp, #112	@ 0x70
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001182:	224c      	movs	r2, #76	@ 0x4c
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f009 fdb0 	bl	800acec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2220      	movs	r2, #32
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f009 fdaa 	bl	800acec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001198:	2002      	movs	r0, #2
 800119a:	f004 ff7b 	bl	8006094 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800119e:	2300      	movs	r3, #0
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	4b32      	ldr	r3, [pc, #200]	@ (800126c <_Z18SystemClock_Configv+0xf4>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	4a31      	ldr	r2, [pc, #196]	@ (800126c <_Z18SystemClock_Configv+0xf4>)
 80011a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011ac:	6193      	str	r3, [r2, #24]
 80011ae:	4b2f      	ldr	r3, [pc, #188]	@ (800126c <_Z18SystemClock_Configv+0xf4>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011ba:	bf00      	nop
 80011bc:	4b2b      	ldr	r3, [pc, #172]	@ (800126c <_Z18SystemClock_Configv+0xf4>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011c8:	bf14      	ite	ne
 80011ca:	2301      	movne	r3, #1
 80011cc:	2300      	moveq	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f3      	bne.n	80011bc <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d4:	2301      	movs	r3, #1
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011de:	2302      	movs	r3, #2
 80011e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e2:	2302      	movs	r3, #2
 80011e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80011ea:	232c      	movs	r3, #44	@ 0x2c
 80011ec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011f2:	2304      	movs	r3, #4
 80011f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011fa:	230c      	movs	r3, #12
 80011fc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011fe:	2300      	movs	r3, #0
 8001200:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001206:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120a:	4618      	mov	r0, r3
 800120c:	f004 ff7c 	bl	8006108 <HAL_RCC_OscConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	bf14      	ite	ne
 8001216:	2301      	movne	r3, #1
 8001218:	2300      	moveq	r3, #0
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8001220:	f000 fc90 	bl	8001b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001224:	233f      	movs	r3, #63	@ 0x3f
 8001226:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001228:	2303      	movs	r3, #3
 800122a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001230:	2308      	movs	r3, #8
 8001232:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001234:	2340      	movs	r3, #64	@ 0x40
 8001236:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001238:	2340      	movs	r3, #64	@ 0x40
 800123a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800123c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001240:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001242:	2340      	movs	r3, #64	@ 0x40
 8001244:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2103      	movs	r1, #3
 800124a:	4618      	mov	r0, r3
 800124c:	f005 fb36 	bl	80068bc <HAL_RCC_ClockConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 8001260:	f000 fc70 	bl	8001b44 <Error_Handler>
  }
}
 8001264:	bf00      	nop
 8001266:	3770      	adds	r7, #112	@ 0x70
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	58024800 	.word	0x58024800

08001270 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b0ae      	sub	sp, #184	@ 0xb8
 8001274:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001276:	463b      	mov	r3, r7
 8001278:	22b8      	movs	r2, #184	@ 0xb8
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f009 fd35 	bl	800acec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001282:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001286:	f04f 0300 	mov.w	r3, #0
 800128a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800128e:	2302      	movs	r3, #2
 8001290:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001292:	2310      	movs	r3, #16
 8001294:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001296:	2302      	movs	r3, #2
 8001298:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800129a:	2302      	movs	r3, #2
 800129c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800129e:	2302      	movs	r3, #2
 80012a0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80012a2:	23c0      	movs	r3, #192	@ 0xc0
 80012a4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b4:	463b      	mov	r3, r7
 80012b6:	4618      	mov	r0, r3
 80012b8:	f005 fe8c 	bl	8006fd4 <HAL_RCCEx_PeriphCLKConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bf14      	ite	ne
 80012c2:	2301      	movne	r3, #1
 80012c4:	2300      	moveq	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 80012cc:	f000 fc3a 	bl	8001b44 <Error_Handler>
  }
}
 80012d0:	bf00      	nop
 80012d2:	37b8      	adds	r7, #184	@ 0xb8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	@ 0x30
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012ea:	463b      	mov	r3, r7
 80012ec:	2224      	movs	r2, #36	@ 0x24
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f009 fcfb 	bl	800acec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012f6:	4b3a      	ldr	r3, [pc, #232]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 80012f8:	4a3a      	ldr	r2, [pc, #232]	@ (80013e4 <_ZL12MX_ADC1_Initv+0x10c>)
 80012fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012fc:	4b38      	ldr	r3, [pc, #224]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 80012fe:	2200      	movs	r2, #0
 8001300:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001302:	4b37      	ldr	r3, [pc, #220]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 8001304:	2208      	movs	r2, #8
 8001306:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001308:	4b35      	ldr	r3, [pc, #212]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800130e:	4b34      	ldr	r3, [pc, #208]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 8001310:	2204      	movs	r2, #4
 8001312:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001314:	4b32      	ldr	r3, [pc, #200]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 8001316:	2200      	movs	r2, #0
 8001318:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800131a:	4b31      	ldr	r3, [pc, #196]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 800131c:	2200      	movs	r2, #0
 800131e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001320:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 8001322:	2201      	movs	r2, #1
 8001324:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001326:	4b2e      	ldr	r3, [pc, #184]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800132e:	4b2c      	ldr	r3, [pc, #176]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 8001330:	2200      	movs	r2, #0
 8001332:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001334:	4b2a      	ldr	r3, [pc, #168]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 8001336:	2200      	movs	r2, #0
 8001338:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800133a:	4b29      	ldr	r3, [pc, #164]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 800133c:	2200      	movs	r2, #0
 800133e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001340:	4b27      	ldr	r3, [pc, #156]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 8001342:	2200      	movs	r2, #0
 8001344:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001346:	4b26      	ldr	r3, [pc, #152]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 8001348:	2200      	movs	r2, #0
 800134a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800134c:	4b24      	ldr	r3, [pc, #144]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001354:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 8001356:	2201      	movs	r2, #1
 8001358:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800135a:	4821      	ldr	r0, [pc, #132]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 800135c:	f001 fd6a 	bl	8002e34 <HAL_ADC_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	bf14      	ite	ne
 8001366:	2301      	movne	r3, #1
 8001368:	2300      	moveq	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8001370:	f000 fbe8 	bl	8001b44 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001378:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137c:	4619      	mov	r1, r3
 800137e:	4818      	ldr	r0, [pc, #96]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 8001380:	f003 f8ee 	bl	8004560 <HAL_ADCEx_MultiModeConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	bf14      	ite	ne
 800138a:	2301      	movne	r3, #1
 800138c:	2300      	moveq	r3, #0
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8001394:	f000 fbd6 	bl	8001b44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001398:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <_ZL12MX_ADC1_Initv+0x110>)
 800139a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800139c:	2306      	movs	r3, #6
 800139e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013a4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80013a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013aa:	2304      	movs	r3, #4
 80013ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	4808      	ldr	r0, [pc, #32]	@ (80013e0 <_ZL12MX_ADC1_Initv+0x108>)
 80013be:	f002 f941 	bl	8003644 <HAL_ADC_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	bf14      	ite	ne
 80013c8:	2301      	movne	r3, #1
 80013ca:	2300      	moveq	r3, #0
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <_ZL12MX_ADC1_Initv+0xfe>
  {
    Error_Handler();
 80013d2:	f000 fbb7 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	3730      	adds	r7, #48	@ 0x30
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	24000084 	.word	0x24000084
 80013e4:	40022000 	.word	0x40022000
 80013e8:	08600004 	.word	0x08600004

080013ec <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2224      	movs	r2, #36	@ 0x24
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f009 fc77 	bl	800acec <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013fe:	4b35      	ldr	r3, [pc, #212]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001400:	4a35      	ldr	r2, [pc, #212]	@ (80014d8 <_ZL12MX_ADC3_Initv+0xec>)
 8001402:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001404:	4b33      	ldr	r3, [pc, #204]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 800140a:	4b32      	ldr	r3, [pc, #200]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 800140c:	220c      	movs	r2, #12
 800140e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001410:	4b30      	ldr	r3, [pc, #192]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001416:	4b2f      	ldr	r3, [pc, #188]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800141c:	4b2d      	ldr	r3, [pc, #180]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 800141e:	2204      	movs	r2, #4
 8001420:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001422:	4b2c      	ldr	r3, [pc, #176]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001424:	2200      	movs	r2, #0
 8001426:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001428:	4b2a      	ldr	r3, [pc, #168]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 800142a:	2200      	movs	r2, #0
 800142c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800142e:	4b29      	ldr	r3, [pc, #164]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001430:	2201      	movs	r2, #1
 8001432:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001434:	4b27      	ldr	r3, [pc, #156]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800143c:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 800143e:	2200      	movs	r2, #0
 8001440:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001442:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001444:	2200      	movs	r2, #0
 8001446:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001448:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001450:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001452:	2200      	movs	r2, #0
 8001454:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001456:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001458:	2200      	movs	r2, #0
 800145a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800145c:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 800145e:	2200      	movs	r2, #0
 8001460:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001462:	4b1c      	ldr	r3, [pc, #112]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001464:	2200      	movs	r2, #0
 8001466:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001468:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8001470:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001472:	2200      	movs	r2, #0
 8001474:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001476:	4817      	ldr	r0, [pc, #92]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001478:	f001 fcdc 	bl	8002e34 <HAL_ADC_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	bf14      	ite	ne
 8001482:	2301      	movne	r3, #1
 8001484:	2300      	moveq	r3, #0
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 800148c:	f000 fb5a 	bl	8001b44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <_ZL12MX_ADC3_Initv+0xf0>)
 8001492:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001494:	2306      	movs	r3, #6
 8001496:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800149c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80014a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014a2:	2304      	movs	r3, #4
 80014a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4808      	ldr	r0, [pc, #32]	@ (80014d4 <_ZL12MX_ADC3_Initv+0xe8>)
 80014b4:	f002 f8c6 	bl	8003644 <HAL_ADC_ConfigChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	bf14      	ite	ne
 80014be:	2301      	movne	r3, #1
 80014c0:	2300      	moveq	r3, #0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 80014c8:	f000 fb3c 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	@ 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	240000f4 	.word	0x240000f4
 80014d8:	58026000 	.word	0x58026000
 80014dc:	1d500080 	.word	0x1d500080

080014e0 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80014e6:	4b41      	ldr	r3, [pc, #260]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 80014e8:	4a41      	ldr	r2, [pc, #260]	@ (80015f0 <_ZL14MX_FDCAN1_Initv+0x110>)
 80014ea:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80014ec:	4b3f      	ldr	r3, [pc, #252]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 80014ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014f2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80014f4:	4b3d      	ldr	r3, [pc, #244]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80014fa:	4b3c      	ldr	r3, [pc, #240]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001500:	4b3a      	ldr	r3, [pc, #232]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001502:	2200      	movs	r2, #0
 8001504:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001506:	4b39      	ldr	r3, [pc, #228]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001508:	2200      	movs	r2, #0
 800150a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 800150c:	4b37      	ldr	r3, [pc, #220]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 800150e:	2203      	movs	r2, #3
 8001510:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001512:	4b36      	ldr	r3, [pc, #216]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001514:	2201      	movs	r2, #1
 8001516:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 8001518:	4b34      	ldr	r3, [pc, #208]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 800151a:	220a      	movs	r2, #10
 800151c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 800151e:	4b33      	ldr	r3, [pc, #204]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001520:	2205      	movs	r2, #5
 8001522:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001524:	4b31      	ldr	r3, [pc, #196]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001526:	2201      	movs	r2, #1
 8001528:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800152a:	4b30      	ldr	r3, [pc, #192]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 800152c:	2201      	movs	r2, #1
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001530:	4b2e      	ldr	r3, [pc, #184]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001532:	2201      	movs	r2, #1
 8001534:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001536:	4b2d      	ldr	r3, [pc, #180]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001538:	2201      	movs	r2, #1
 800153a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800153c:	4b2b      	ldr	r3, [pc, #172]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 800153e:	2200      	movs	r2, #0
 8001540:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001542:	4b2a      	ldr	r3, [pc, #168]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001544:	2200      	movs	r2, #0
 8001546:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 8001548:	4b28      	ldr	r3, [pc, #160]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 800154a:	2205      	movs	r2, #5
 800154c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 800154e:	4b27      	ldr	r3, [pc, #156]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001550:	2220      	movs	r2, #32
 8001552:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001554:	4b25      	ldr	r3, [pc, #148]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001556:	2204      	movs	r2, #4
 8001558:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 800155a:	4b24      	ldr	r3, [pc, #144]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 800155c:	2220      	movs	r2, #32
 800155e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001560:	4b22      	ldr	r3, [pc, #136]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001562:	2204      	movs	r2, #4
 8001564:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8001566:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001568:	2201      	movs	r2, #1
 800156a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800156c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 800156e:	2204      	movs	r2, #4
 8001570:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 8001572:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001574:	2201      	movs	r2, #1
 8001576:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 8001578:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 800157a:	2220      	movs	r2, #32
 800157c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 800157e:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001580:	2220      	movs	r2, #32
 8001582:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001584:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001586:	2200      	movs	r2, #0
 8001588:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800158a:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 800158c:	2204      	movs	r2, #4
 800158e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001590:	4816      	ldr	r0, [pc, #88]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001592:	f003 f9d7 	bl	8004944 <HAL_FDCAN_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf14      	ite	ne
 800159c:	2301      	movne	r3, #1
 800159e:	2300      	moveq	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 80015a6:	f000 facd 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80015aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015ae:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80015b4:	2302      	movs	r3, #2
 80015b6:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80015b8:	2301      	movs	r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	4619      	mov	r1, r3
 80015c8:	4808      	ldr	r0, [pc, #32]	@ (80015ec <_ZL14MX_FDCAN1_Initv+0x10c>)
 80015ca:	f003 fb99 	bl	8004d00 <HAL_FDCAN_ConfigFilter>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf14      	ite	ne
 80015d4:	2301      	movne	r3, #1
 80015d6:	2300      	moveq	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 80015de:	f000 fab1 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	24000164 	.word	0x24000164
 80015f0:	4000a000 	.word	0x4000a000

080015f4 <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80015fa:	4b41      	ldr	r3, [pc, #260]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80015fc:	4a41      	ldr	r2, [pc, #260]	@ (8001704 <_ZL14MX_FDCAN2_Initv+0x110>)
 80015fe:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001600:	4b3f      	ldr	r3, [pc, #252]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001602:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001606:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001608:	4b3d      	ldr	r3, [pc, #244]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800160e:	4b3c      	ldr	r3, [pc, #240]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001610:	2200      	movs	r2, #0
 8001612:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001614:	4b3a      	ldr	r3, [pc, #232]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001616:	2200      	movs	r2, #0
 8001618:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800161a:	4b39      	ldr	r3, [pc, #228]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800161c:	2200      	movs	r2, #0
 800161e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 3;
 8001620:	4b37      	ldr	r3, [pc, #220]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001622:	2203      	movs	r2, #3
 8001624:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001626:	4b36      	ldr	r3, [pc, #216]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001628:	2201      	movs	r2, #1
 800162a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 800162c:	4b34      	ldr	r3, [pc, #208]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800162e:	220a      	movs	r2, #10
 8001630:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8001632:	4b33      	ldr	r3, [pc, #204]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001634:	2205      	movs	r2, #5
 8001636:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001638:	4b31      	ldr	r3, [pc, #196]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800163a:	2201      	movs	r2, #1
 800163c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800163e:	4b30      	ldr	r3, [pc, #192]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001640:	2201      	movs	r2, #1
 8001642:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001644:	4b2e      	ldr	r3, [pc, #184]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001646:	2201      	movs	r2, #1
 8001648:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800164a:	4b2d      	ldr	r3, [pc, #180]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800164c:	2201      	movs	r2, #1
 800164e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001650:	4b2b      	ldr	r3, [pc, #172]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001652:	2200      	movs	r2, #0
 8001654:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001656:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001658:	2200      	movs	r2, #0
 800165a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 800165c:	4b28      	ldr	r3, [pc, #160]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800165e:	2205      	movs	r2, #5
 8001660:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 8001662:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001664:	2220      	movs	r2, #32
 8001666:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001668:	4b25      	ldr	r3, [pc, #148]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800166a:	2204      	movs	r2, #4
 800166c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 800166e:	4b24      	ldr	r3, [pc, #144]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001670:	2220      	movs	r2, #32
 8001672:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001674:	4b22      	ldr	r3, [pc, #136]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001676:	2204      	movs	r2, #4
 8001678:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 800167a:	4b21      	ldr	r3, [pc, #132]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800167c:	2201      	movs	r2, #1
 800167e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001680:	4b1f      	ldr	r3, [pc, #124]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001682:	2204      	movs	r2, #4
 8001684:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 8001686:	4b1e      	ldr	r3, [pc, #120]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001688:	2201      	movs	r2, #1
 800168a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 800168c:	4b1c      	ldr	r3, [pc, #112]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800168e:	2220      	movs	r2, #32
 8001690:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 8001692:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001694:	2220      	movs	r2, #32
 8001696:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001698:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800169a:	2200      	movs	r2, #0
 800169c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800169e:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80016a0:	2204      	movs	r2, #4
 80016a2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80016a4:	4816      	ldr	r0, [pc, #88]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80016a6:	f003 f94d 	bl	8004944 <HAL_FDCAN_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	bf14      	ite	ne
 80016b0:	2301      	movne	r3, #1
 80016b2:	2300      	moveq	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 80016ba:	f000 fa43 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80016be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016c2:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80016c8:	2302      	movs	r3, #2
 80016ca:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80016cc:	2301      	movs	r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 80016d0:	2310      	movs	r3, #16
 80016d2:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 80016d4:	2310      	movs	r3, #16
 80016d6:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 80016d8:	463b      	mov	r3, r7
 80016da:	4619      	mov	r1, r3
 80016dc:	4808      	ldr	r0, [pc, #32]	@ (8001700 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80016de:	f003 fb0f 	bl	8004d00 <HAL_FDCAN_ConfigFilter>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf14      	ite	ne
 80016e8:	2301      	movne	r3, #1
 80016ea:	2300      	moveq	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 80016f2:	f000 fa27 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	3720      	adds	r7, #32
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	24000204 	.word	0x24000204
 8001704:	4000a400 	.word	0x4000a400

08001708 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800170c:	4b2c      	ldr	r3, [pc, #176]	@ (80017c0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800170e:	4a2d      	ldr	r2, [pc, #180]	@ (80017c4 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001712:	4b2b      	ldr	r3, [pc, #172]	@ (80017c0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800171a:	4b29      	ldr	r3, [pc, #164]	@ (80017c0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001720:	4b27      	ldr	r3, [pc, #156]	@ (80017c0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001726:	4b26      	ldr	r3, [pc, #152]	@ (80017c0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800172c:	4b24      	ldr	r3, [pc, #144]	@ (80017c0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800172e:	220c      	movs	r2, #12
 8001730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001732:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001738:	4b21      	ldr	r3, [pc, #132]	@ (80017c0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173e:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001744:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800174a:	4b1d      	ldr	r3, [pc, #116]	@ (80017c0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800174c:	2200      	movs	r2, #0
 800174e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001750:	481b      	ldr	r0, [pc, #108]	@ (80017c0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001752:	f008 f825 	bl	80097a0 <HAL_UART_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf14      	ite	ne
 800175c:	2301      	movne	r3, #1
 800175e:	2300      	moveq	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001766:	f000 f9ed 	bl	8001b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800176a:	2100      	movs	r1, #0
 800176c:	4814      	ldr	r0, [pc, #80]	@ (80017c0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800176e:	f009 f9d0 	bl	800ab12 <HAL_UARTEx_SetTxFifoThreshold>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	bf14      	ite	ne
 8001778:	2301      	movne	r3, #1
 800177a:	2300      	moveq	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8001782:	f000 f9df 	bl	8001b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001786:	2100      	movs	r1, #0
 8001788:	480d      	ldr	r0, [pc, #52]	@ (80017c0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800178a:	f009 fa00 	bl	800ab8e <HAL_UARTEx_SetRxFifoThreshold>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	bf14      	ite	ne
 8001794:	2301      	movne	r3, #1
 8001796:	2300      	moveq	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 800179e:	f000 f9d1 	bl	8001b44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017a2:	4807      	ldr	r0, [pc, #28]	@ (80017c0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017a4:	f009 f97c 	bl	800aaa0 <HAL_UARTEx_DisableFifoMode>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf14      	ite	ne
 80017ae:	2301      	movne	r3, #1
 80017b0:	2300      	moveq	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80017b8:	f000 f9c4 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	240002a4 	.word	0x240002a4
 80017c4:	40004400 	.word	0x40004400

080017c8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08c      	sub	sp, #48	@ 0x30
 80017cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017de:	4b50      	ldr	r3, [pc, #320]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 80017e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 80017e6:	f043 0320 	orr.w	r3, r3, #32
 80017ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 80017f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f4:	f003 0320 	and.w	r3, r3, #32
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fc:	4b48      	ldr	r3, [pc, #288]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 80017fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001802:	4a47      	ldr	r2, [pc, #284]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001808:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800180c:	4b44      	ldr	r3, [pc, #272]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 800180e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b41      	ldr	r3, [pc, #260]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 800181c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001820:	4a3f      	ldr	r2, [pc, #252]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800182a:	4b3d      	ldr	r3, [pc, #244]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 800182c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001838:	4b39      	ldr	r3, [pc, #228]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 800183a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800183e:	4a38      	ldr	r2, [pc, #224]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 8001840:	f043 0310 	orr.w	r3, r3, #16
 8001844:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001848:	4b35      	ldr	r3, [pc, #212]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 800184a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	4b32      	ldr	r3, [pc, #200]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 8001858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800185c:	4a30      	ldr	r2, [pc, #192]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 800185e:	f043 0302 	orr.w	r3, r3, #2
 8001862:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001866:	4b2e      	ldr	r3, [pc, #184]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 8001868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001874:	4b2a      	ldr	r3, [pc, #168]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800187a:	4a29      	ldr	r2, [pc, #164]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 800187c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001880:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001884:	4b26      	ldr	r3, [pc, #152]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 8001886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800188a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001892:	4b23      	ldr	r3, [pc, #140]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001898:	4a21      	ldr	r2, [pc, #132]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 800189a:	f043 0308 	orr.w	r3, r3, #8
 800189e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001920 <_ZL12MX_GPIO_Initv+0x158>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2180      	movs	r1, #128	@ 0x80
 80018b4:	481b      	ldr	r0, [pc, #108]	@ (8001924 <_ZL12MX_GPIO_Initv+0x15c>)
 80018b6:	f004 fbd3 	bl	8006060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2138      	movs	r1, #56	@ 0x38
 80018be:	481a      	ldr	r0, [pc, #104]	@ (8001928 <_ZL12MX_GPIO_Initv+0x160>)
 80018c0:	f004 fbce 	bl	8006060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 80018c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	4814      	ldr	r0, [pc, #80]	@ (800192c <_ZL12MX_GPIO_Initv+0x164>)
 80018da:	f004 fa01 	bl	8005ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 80018de:	2380      	movs	r3, #128	@ 0x80
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	480b      	ldr	r0, [pc, #44]	@ (8001924 <_ZL12MX_GPIO_Initv+0x15c>)
 80018f6:	f004 f9f3 	bl	8005ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 80018fa:	2338      	movs	r3, #56	@ 0x38
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	4805      	ldr	r0, [pc, #20]	@ (8001928 <_ZL12MX_GPIO_Initv+0x160>)
 8001912:	f004 f9e5 	bl	8005ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001916:	bf00      	nop
 8001918:	3730      	adds	r7, #48	@ 0x30
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	58024400 	.word	0x58024400
 8001924:	58021800 	.word	0x58021800
 8001928:	58020c00 	.word	0x58020c00
 800192c:	58021000 	.word	0x58021000

08001930 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b087      	sub	sp, #28
 8001934:	af02      	add	r7, sp, #8
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d04b      	beq.n	80019dc <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 8001944:	4b27      	ldr	r3, [pc, #156]	@ (80019e4 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001946:	4a28      	ldr	r2, [pc, #160]	@ (80019e8 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001948:	2140      	movs	r1, #64	@ 0x40
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f003 fad4 	bl	8004ef8 <HAL_FDCAN_GetRxMessage>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	bf0c      	ite	eq
 8001956:	2301      	moveq	r3, #1
 8001958:	2300      	movne	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d02e      	beq.n	80019be <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 8001960:	4b21      	ldr	r3, [pc, #132]	@ (80019e8 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a21      	ldr	r2, [pc, #132]	@ (80019ec <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001966:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001968:	4b1f      	ldr	r3, [pc, #124]	@ (80019e8 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4b1f      	ldr	r3, [pc, #124]	@ (80019ec <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001970:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	e00c      	b.n	8001992 <HAL_FDCAN_RxFifo0Callback+0x62>
 8001978:	4a1a      	ldr	r2, [pc, #104]	@ (80019e4 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4413      	add	r3, r2
 800197e:	7819      	ldrb	r1, [r3, #0]
 8001980:	4a1a      	ldr	r2, [pc, #104]	@ (80019ec <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4413      	add	r3, r2
 8001986:	3305      	adds	r3, #5
 8001988:	460a      	mov	r2, r1
 800198a:	701a      	strb	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3301      	adds	r3, #1
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2b07      	cmp	r3, #7
 8001996:	ddef      	ble.n	8001978 <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001998:	4b14      	ldr	r3, [pc, #80]	@ (80019ec <HAL_FDCAN_RxFifo0Callback+0xbc>)
 800199a:	2201      	movs	r2, #1
 800199c:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 800199e:	f000 ff17 	bl	80027d0 <HAL_GetTick>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4a11      	ldr	r2, [pc, #68]	@ (80019ec <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80019a6:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 80019a8:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80019aa:	466c      	mov	r4, sp
 80019ac:	f103 0210 	add.w	r2, r3, #16
 80019b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019b4:	e884 0003 	stmia.w	r4, {r0, r1}
 80019b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ba:	f000 faad 	bl	8001f18 <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80019be:	2200      	movs	r2, #0
 80019c0:	2101      	movs	r1, #1
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f003 fc04 	bl	80051d0 <HAL_FDCAN_ActivateNotification>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf14      	ite	ne
 80019ce:	2301      	movne	r3, #1
 80019d0:	2300      	moveq	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 80019d8:	f000 f8b4 	bl	8001b44 <Error_Handler>
    }
  }
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	240003d0 	.word	0x240003d0
 80019e8:	24000380 	.word	0x24000380
 80019ec:	24000454 	.word	0x24000454

080019f0 <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	4613      	mov	r3, r2
 80019fc:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 80019fe:	4a0b      	ldr	r2, [pc, #44]	@ (8001a2c <module_send_message_CAN1+0x3c>)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 8001a04:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <module_send_message_CAN1+0x3c>)
 8001a06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a0a:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	4a07      	ldr	r2, [pc, #28]	@ (8001a2c <module_send_message_CAN1+0x3c>)
 8001a10:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	4905      	ldr	r1, [pc, #20]	@ (8001a2c <module_send_message_CAN1+0x3c>)
 8001a16:	4806      	ldr	r0, [pc, #24]	@ (8001a30 <module_send_message_CAN1+0x40>)
 8001a18:	f003 fa13 	bl	8004e42 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	75fb      	strb	r3, [r7, #23]

	return status;
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	24000338 	.word	0x24000338
 8001a30:	24000164 	.word	0x24000164

08001a34 <module_send_message_CAN2>:
	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);

	return status;
}

HAL_StatusTypeDef module_send_message_CAN2(uint32_t id, uint8_t* data, uint8_t length) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	71fb      	strb	r3, [r7, #7]
	TxHeader_bms.Identifier = id;
 8001a42:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <module_send_message_CAN2+0x38>)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6013      	str	r3, [r2, #0]
	TxHeader_bms.IdType = FDCAN_STANDARD_ID;
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <module_send_message_CAN2+0x38>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	605a      	str	r2, [r3, #4]
	TxHeader_bms.DataLength = length;
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	4a06      	ldr	r2, [pc, #24]	@ (8001a6c <module_send_message_CAN2+0x38>)
 8001a52:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	4905      	ldr	r1, [pc, #20]	@ (8001a6c <module_send_message_CAN2+0x38>)
 8001a58:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <module_send_message_CAN2+0x3c>)
 8001a5a:	f003 f9f2 	bl	8004e42 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	75fb      	strb	r3, [r7, #23]

	return status;
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	2400035c 	.word	0x2400035c
 8001a70:	24000204 	.word	0x24000204

08001a74 <print>:

void print(char uart_buffer[]){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	4909      	ldr	r1, [pc, #36]	@ (8001aa4 <print+0x30>)
 8001a80:	4809      	ldr	r0, [pc, #36]	@ (8001aa8 <print+0x34>)
 8001a82:	f009 f911 	bl	800aca8 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001a86:	4808      	ldr	r0, [pc, #32]	@ (8001aa8 <print+0x34>)
 8001a88:	f7fe fc42 	bl	8000310 <strlen>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295
 8001a94:	4904      	ldr	r1, [pc, #16]	@ (8001aa8 <print+0x34>)
 8001a96:	4805      	ldr	r0, [pc, #20]	@ (8001aac <print+0x38>)
 8001a98:	f007 fed2 	bl	8009840 <HAL_UART_Transmit>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	0800b8d8 	.word	0x0800b8d8
 8001aa8:	240003d8 	.word	0x240003d8
 8001aac:	240002a4 	.word	0x240002a4

08001ab0 <printnl>:

void printnl(char uart_buffer[]){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s", uart_buffer);
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4909      	ldr	r1, [pc, #36]	@ (8001ae0 <printnl+0x30>)
 8001abc:	4809      	ldr	r0, [pc, #36]	@ (8001ae4 <printnl+0x34>)
 8001abe:	f009 f8f3 	bl	800aca8 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001ac2:	4808      	ldr	r0, [pc, #32]	@ (8001ae4 <printnl+0x34>)
 8001ac4:	f7fe fc24 	bl	8000310 <strlen>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad0:	4904      	ldr	r1, [pc, #16]	@ (8001ae4 <printnl+0x34>)
 8001ad2:	4805      	ldr	r0, [pc, #20]	@ (8001ae8 <printnl+0x38>)
 8001ad4:	f007 feb4 	bl	8009840 <HAL_UART_Transmit>
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	0800b8e0 	.word	0x0800b8e0
 8001ae4:	240003d8 	.word	0x240003d8
 8001ae8:	240002a4 	.word	0x240002a4

08001aec <getUARTState>:
void printValue(int value){
	sprintf(uart_msg, "%hu \n\r", value);
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
}

HAL_UART_StateTypeDef getUARTState(){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&huart2);
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <getUARTState+0x10>)
 8001af2:	f007 ff33 	bl	800995c <HAL_UART_GetState>
 8001af6:	4603      	mov	r3, r0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	240002a4 	.word	0x240002a4

08001b00 <readAnalogValue>:

float readAnalogValue(void){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
	float analogValue;

	HAL_ADC_Start(&hadc3);
 8001b06:	480e      	ldr	r0, [pc, #56]	@ (8001b40 <readAnalogValue+0x40>)
 8001b08:	f001 fb9c 	bl	8003244 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	480b      	ldr	r0, [pc, #44]	@ (8001b40 <readAnalogValue+0x40>)
 8001b12:	f001 fc95 	bl	8003440 <HAL_ADC_PollForConversion>
	analogValue = HAL_ADC_GetValue(&hadc3);
 8001b16:	480a      	ldr	r0, [pc, #40]	@ (8001b40 <readAnalogValue+0x40>)
 8001b18:	f001 fd86 	bl	8003628 <HAL_ADC_GetValue>
 8001b1c:	ee07 0a90 	vmov	s15, r0
 8001b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b24:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_ADC_Stop(&hadc3);
 8001b28:	4805      	ldr	r0, [pc, #20]	@ (8001b40 <readAnalogValue+0x40>)
 8001b2a:	f001 fc55 	bl	80033d8 <HAL_ADC_Stop>
	return analogValue;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	ee07 3a90 	vmov	s15, r3
}
 8001b34:	eeb0 0a67 	vmov.f32	s0, s15
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	240000f4 	.word	0x240000f4

08001b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
}
 8001b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <Error_Handler+0x8>

08001b50 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	@ 0x28
 8001b54:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
	int state_precharge = 0; // 0 means open, 1 closed
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 8001b62:	2301      	movs	r3, #1
 8001b64:	613b      	str	r3, [r7, #16]
	int flag_current = Current_ERROR_Comunication;
 8001b66:	2302      	movs	r3, #2
 8001b68:	60fb      	str	r3, [r7, #12]
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 8001b6a:	f000 fe31 	bl	80027d0 <HAL_GetTick>
 8001b6e:	60b8      	str	r0, [r7, #8]
	int time_s = HAL_GetTick();
 8001b70:	f000 fe2e 	bl	80027d0 <HAL_GetTick>
 8001b74:	4603      	mov	r3, r0
 8001b76:	607b      	str	r3, [r7, #4]

	CPU.voltage_acum = 0; // For precharge
 8001b78:	4b9f      	ldr	r3, [pc, #636]	@ (8001df8 <_Z12select_statev+0x2a8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	62da      	str	r2, [r3, #44]	@ 0x2c


	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 8001b7e:	4b9f      	ldr	r3, [pc, #636]	@ (8001dfc <_Z12select_statev+0x2ac>)
 8001b80:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001b84:	601a      	str	r2, [r3, #0]
	MAX_T = 0;
 8001b86:	4b9e      	ldr	r3, [pc, #632]	@ (8001e00 <_Z12select_statev+0x2b0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	e05e      	b.n	8001c50 <_Z12select_statev+0x100>
		BMS[i].voltage_acum = 0;                  // For precharge
 8001b92:	4a9c      	ldr	r2, [pc, #624]	@ (8001e04 <_Z12select_statev+0x2b4>)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001b9a:	fb01 f303 	mul.w	r3, r1, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
		if (BMS[i].query_voltage(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8001bae:	fb02 f303 	mul.w	r3, r2, r3
 8001bb2:	4a94      	ldr	r2, [pc, #592]	@ (8001e04 <_Z12select_statev+0x2b4>)
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a94      	ldr	r2, [pc, #592]	@ (8001e08 <_Z12select_statev+0x2b8>)
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f8a4 	bl	8000d08 <_ZN7BMS_MOD13query_voltageEmPc>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
		{
			//state = error;
		}
		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 8001bc4:	4b8c      	ldr	r3, [pc, #560]	@ (8001df8 <_Z12select_statev+0x2a8>)
 8001bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bc8:	498e      	ldr	r1, [pc, #568]	@ (8001e04 <_Z12select_statev+0x2b4>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	f44f 70b6 	mov.w	r0, #364	@ 0x16c
 8001bd0:	fb00 f303 	mul.w	r3, r0, r3
 8001bd4:	440b      	add	r3, r1
 8001bd6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4413      	add	r3, r2
 8001bde:	4a86      	ldr	r2, [pc, #536]	@ (8001df8 <_Z12select_statev+0x2a8>)
 8001be0:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 8001be2:	4a88      	ldr	r2, [pc, #544]	@ (8001e04 <_Z12select_statev+0x2b4>)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001bea:	fb01 f303 	mul.w	r3, r1, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4b81      	ldr	r3, [pc, #516]	@ (8001dfc <_Z12select_statev+0x2ac>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	da0b      	bge.n	8001c16 <_Z12select_statev+0xc6>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 8001bfe:	4a81      	ldr	r2, [pc, #516]	@ (8001e04 <_Z12select_statev+0x2b4>)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001c06:	fb01 f303 	mul.w	r3, r1, r3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a7a      	ldr	r2, [pc, #488]	@ (8001dfc <_Z12select_statev+0x2ac>)
 8001c14:	6013      	str	r3, [r2, #0]

		//if (BMS[i].query_temperature(time, buffer) != Temperatures_OK){
			//state = error;
		//}

		if (BMS[i].MAX_T > MAX_T)
 8001c16:	4a7b      	ldr	r2, [pc, #492]	@ (8001e04 <_Z12select_statev+0x2b4>)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001c1e:	fb01 f303 	mul.w	r3, r1, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b75      	ldr	r3, [pc, #468]	@ (8001e00 <_Z12select_statev+0x2b0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	dd0b      	ble.n	8001c4a <_Z12select_statev+0xfa>
			MAX_T = BMS[i].MAX_T;
 8001c32:	4a74      	ldr	r2, [pc, #464]	@ (8001e04 <_Z12select_statev+0x2b4>)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001c3a:	fb01 f303 	mul.w	r3, r1, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a6e      	ldr	r2, [pc, #440]	@ (8001e00 <_Z12select_statev+0x2b0>)
 8001c48:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	61bb      	str	r3, [r7, #24]
 8001c50:	4b6e      	ldr	r3, [pc, #440]	@ (8001e0c <_Z12select_statev+0x2bc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	db9b      	blt.n	8001b92 <_Z12select_statev+0x42>
	}

	if (time_s > time_sending_minV + 500) {
 8001c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e10 <_Z12select_statev+0x2c0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	dd23      	ble.n	8001cb0 <_Z12select_statev+0x160>
		message_MINV[1] = MIN_V & 0xFF;
 8001c68:	4b64      	ldr	r3, [pc, #400]	@ (8001dfc <_Z12select_statev+0x2ac>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4b69      	ldr	r3, [pc, #420]	@ (8001e14 <_Z12select_statev+0x2c4>)
 8001c70:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 8001c72:	4b62      	ldr	r3, [pc, #392]	@ (8001dfc <_Z12select_statev+0x2ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	121b      	asrs	r3, r3, #8
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b66      	ldr	r3, [pc, #408]	@ (8001e14 <_Z12select_statev+0x2c4>)
 8001c7c:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 8001c7e:	4b61      	ldr	r3, [pc, #388]	@ (8001e04 <_Z12select_statev+0x2b4>)
 8001c80:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d010      	beq.n	8001caa <_Z12select_statev+0x15a>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 8001c88:	2202      	movs	r2, #2
 8001c8a:	4962      	ldr	r1, [pc, #392]	@ (8001e14 <_Z12select_statev+0x2c4>)
 8001c8c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c90:	f7ff feae 	bl	80019f0 <module_send_message_CAN1>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	bf14      	ite	ne
 8001c9a:	2301      	movne	r3, #1
 8001c9c:	2300      	moveq	r3, #0
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <_Z12select_statev+0x15a>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 8001ca4:	485c      	ldr	r0, [pc, #368]	@ (8001e18 <_Z12select_statev+0x2c8>)
 8001ca6:	f7ff fee5 	bl	8001a74 <print>
		}
		time_sending_minV = time_s;
 8001caa:	4a59      	ldr	r2, [pc, #356]	@ (8001e10 <_Z12select_statev+0x2c0>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	e00e      	b.n	8001cd4 <_Z12select_statev+0x184>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 8001cb6:	4b51      	ldr	r3, [pc, #324]	@ (8001dfc <_Z12select_statev+0x2ac>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4952      	ldr	r1, [pc, #328]	@ (8001e04 <_Z12select_statev+0x2b4>)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f44f 70b6 	mov.w	r0, #364	@ 0x16c
 8001cc2:	fb00 f303 	mul.w	r3, r0, r3
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8001ccc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8001e0c <_Z12select_statev+0x2bc>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	dbeb      	blt.n	8001cb6 <_Z12select_statev+0x166>

	}


	//flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
	flag_cpu = CPU_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]

	flag_current = current.query(time, buffer); //asking current how is it
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	4a48      	ldr	r2, [pc, #288]	@ (8001e08 <_Z12select_statev+0x2b8>)
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	484c      	ldr	r0, [pc, #304]	@ (8001e1c <_Z12select_statev+0x2cc>)
 8001cea:	f7ff f96b 	bl	8000fc4 <_ZN11Current_MOD5queryEiPc>
 8001cee:	60f8      	str	r0, [r7, #12]
	print((char*)"voltage acu");
	printValue(CPU.voltage_acum);
	print((char*)"dc bus");
	printValue(CPU.DC_BUS);*/
	//printValue(state);
	switch (state) {
 8001cf0:	4b4b      	ldr	r3, [pc, #300]	@ (8001e20 <_Z12select_statev+0x2d0>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	f200 80d0 	bhi.w	8001e9a <_Z12select_statev+0x34a>
 8001cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8001d00 <_Z12select_statev+0x1b0>)
 8001cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d00:	08001d15 	.word	0x08001d15
 8001d04:	08001d39 	.word	0x08001d39
 8001d08:	08001d6b 	.word	0x08001d6b
 8001d0c:	08001e2d 	.word	0x08001e2d
 8001d10:	08001e77 	.word	0x08001e77
	case start:
		state_air_n = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
		state_precharge = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_DISCONNECTED);
 8001d20:	2102      	movs	r1, #2
 8001d22:	4835      	ldr	r0, [pc, #212]	@ (8001df8 <_Z12select_statev+0x2a8>)
 8001d24:	f7ff f8ee 	bl	8000f04 <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu != CPU_ERROR_COMMUNICATION)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	f000 80ae 	beq.w	8001e8c <_Z12select_statev+0x33c>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 8001d30:	4b3b      	ldr	r3, [pc, #236]	@ (8001e20 <_Z12select_statev+0x2d0>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
		break;
 8001d36:	e0a9      	b.n	8001e8c <_Z12select_statev+0x33c>
	case precharge:
		state_air_n = 1;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8001d40:	2301      	movs	r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_PRECHARGE);
 8001d44:	2101      	movs	r1, #1
 8001d46:	482c      	ldr	r0, [pc, #176]	@ (8001df8 <_Z12select_statev+0x2a8>)
 8001d48:	f7ff f8dc 	bl	8000f04 <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu == CPU_OK) {
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d103      	bne.n	8001d5a <_Z12select_statev+0x20a>
			state = transition;
 8001d52:	4b33      	ldr	r3, [pc, #204]	@ (8001e20 <_Z12select_statev+0x2d0>)
 8001d54:	2202      	movs	r2, #2
 8001d56:	701a      	strb	r2, [r3, #0]
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
			state = error;
		 //else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
		break;
 8001d58:	e09a      	b.n	8001e90 <_Z12select_statev+0x340>
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	f040 8097 	bne.w	8001e90 <_Z12select_statev+0x340>
			state = error;
 8001d62:	4b2f      	ldr	r3, [pc, #188]	@ (8001e20 <_Z12select_statev+0x2d0>)
 8001d64:	2204      	movs	r2, #4
 8001d66:	701a      	strb	r2, [r3, #0]
		break;
 8001d68:	e092      	b.n	8001e90 <_Z12select_statev+0x340>
	case transition:
		state_air_n = 1;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8001d72:	2301      	movs	r3, #1
 8001d74:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_PRECHARGE);
 8001d76:	2101      	movs	r1, #1
 8001d78:	481f      	ldr	r0, [pc, #124]	@ (8001df8 <_Z12select_statev+0x2a8>)
 8001d7a:	f7ff f8c3 	bl	8000f04 <_ZN7CPU_MOD11updateStateEi>
		if ((((CPU.voltage_acum)/1000) * 0.9 < CPU.DC_BUS) && (CPU.voltage_acum != 0)){
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <_Z12select_statev+0x2a8>)
 8001d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d82:	4a28      	ldr	r2, [pc, #160]	@ (8001e24 <_Z12select_statev+0x2d4>)
 8001d84:	fb82 1203 	smull	r1, r2, r2, r3
 8001d88:	1192      	asrs	r2, r2, #6
 8001d8a:	17db      	asrs	r3, r3, #31
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	ee07 3a90 	vmov	s15, r3
 8001d92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d96:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8001df0 <_Z12select_statev+0x2a0>
 8001d9a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d9e:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <_Z12select_statev+0x2a8>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001daa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	d507      	bpl.n	8001dc4 <_Z12select_statev+0x274>
 8001db4:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <_Z12select_statev+0x2a8>)
 8001db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <_Z12select_statev+0x274>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 8001dbc:	4b18      	ldr	r3, [pc, #96]	@ (8001e20 <_Z12select_statev+0x2d0>)
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	e011      	b.n	8001de8 <_Z12select_statev+0x298>
		}else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d107      	bne.n	8001dda <_Z12select_statev+0x28a>
 8001dca:	4b17      	ldr	r3, [pc, #92]	@ (8001e28 <_Z12select_statev+0x2d8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d103      	bne.n	8001dda <_Z12select_statev+0x28a>
 8001dd2:	4b13      	ldr	r3, [pc, #76]	@ (8001e20 <_Z12select_statev+0x2d0>)
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	e006      	b.n	8001de8 <_Z12select_statev+0x298>
		 else if(flag_current != Current_OK) state = error;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d059      	beq.n	8001e94 <_Z12select_statev+0x344>
 8001de0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <_Z12select_statev+0x2d0>)
 8001de2:	2204      	movs	r2, #4
 8001de4:	701a      	strb	r2, [r3, #0]
		//}
		break;
 8001de6:	e055      	b.n	8001e94 <_Z12select_statev+0x344>
 8001de8:	e054      	b.n	8001e94 <_Z12select_statev+0x344>
 8001dea:	bf00      	nop
 8001dec:	f3af 8000 	nop.w
 8001df0:	cccccccd 	.word	0xcccccccd
 8001df4:	3feccccc 	.word	0x3feccccc
 8001df8:	24000b94 	.word	0x24000b94
 8001dfc:	24000004 	.word	0x24000004
 8001e00:	24000b88 	.word	0x24000b88
 8001e04:	2400046c 	.word	0x2400046c
 8001e08:	24000c14 	.word	0x24000c14
 8001e0c:	24000000 	.word	0x24000000
 8001e10:	24000b90 	.word	0x24000b90
 8001e14:	24000b8c 	.word	0x24000b8c
 8001e18:	0800b8ec 	.word	0x0800b8ec
 8001e1c:	24000bcc 	.word	0x24000bcc
 8001e20:	24000c10 	.word	0x24000c10
 8001e24:	10624dd3 	.word	0x10624dd3
 8001e28:	24000bc8 	.word	0x24000bc8
	case run:
		state_air_n = 1;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8001e34:	2301      	movs	r3, #1
 8001e36:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_POWER);
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4830      	ldr	r0, [pc, #192]	@ (8001efc <_Z12select_statev+0x3ac>)
 8001e3c:	f7ff f862 	bl	8000f04 <_ZN7CPU_MOD11updateStateEi>
		if ((flag_cpu == CPU_ERROR_COMMUNICATION) && (flag_charger == 1)){
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d106      	bne.n	8001e54 <_Z12select_statev+0x304>
 8001e46:	4b2e      	ldr	r3, [pc, #184]	@ (8001f00 <_Z12select_statev+0x3b0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d102      	bne.n	8001e54 <_Z12select_statev+0x304>
			//state = error; //If I disconnect the charger, error
			print((char*)"CPU");
 8001e4e:	482d      	ldr	r0, [pc, #180]	@ (8001f04 <_Z12select_statev+0x3b4>)
 8001e50:	f7ff fe10 	bl	8001a74 <print>
		}
		if (flag_current != Current_OK){
			//state = error; //If current is too high, error
		}
		if(HAL_GPIO_ReadPin(DIGITAL1_GPIO_Port, DIGITAL1_Pin) == GPIO_PIN_RESET){ //SDC IO
 8001e54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e58:	482b      	ldr	r0, [pc, #172]	@ (8001f08 <_Z12select_statev+0x3b8>)
 8001e5a:	f004 f8e9 	bl	8006030 <HAL_GPIO_ReadPin>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf0c      	ite	eq
 8001e64:	2301      	moveq	r3, #1
 8001e66:	2300      	movne	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d014      	beq.n	8001e98 <_Z12select_statev+0x348>
			//state = error;
			print((char*)"DIGITAL");
 8001e6e:	4827      	ldr	r0, [pc, #156]	@ (8001f0c <_Z12select_statev+0x3bc>)
 8001e70:	f7ff fe00 	bl	8001a74 <print>
		}
		break;
 8001e74:	e010      	b.n	8001e98 <_Z12select_statev+0x348>
	case error:
		state_air_n = 0; //All relés closed
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
		state_precharge = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_ERROR);
 8001e82:	2103      	movs	r1, #3
 8001e84:	481d      	ldr	r0, [pc, #116]	@ (8001efc <_Z12select_statev+0x3ac>)
 8001e86:	f7ff f83d 	bl	8000f04 <_ZN7CPU_MOD11updateStateEi>
		break;
 8001e8a:	e006      	b.n	8001e9a <_Z12select_statev+0x34a>
		break;
 8001e8c:	bf00      	nop
 8001e8e:	e004      	b.n	8001e9a <_Z12select_statev+0x34a>
		break;
 8001e90:	bf00      	nop
 8001e92:	e002      	b.n	8001e9a <_Z12select_statev+0x34a>
		break;
 8001e94:	bf00      	nop
 8001e96:	e000      	b.n	8001e9a <_Z12select_statev+0x34a>
		break;
 8001e98:	bf00      	nop
	 print(buffer);
	 sprintf(buffer, " - STATE:     %i\n", state);
	 print(buffer);
	 sprintf(buffer, "***********************\n");
	 print(buffer);*/
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <_Z12select_statev+0x354>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <_Z12select_statev+0x356>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2180      	movs	r1, #128	@ 0x80
 8001eaa:	4819      	ldr	r0, [pc, #100]	@ (8001f10 <_Z12select_statev+0x3c0>)
 8001eac:	f004 f8d8 	bl	8006060 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <_Z12select_statev+0x36a>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <_Z12select_statev+0x36c>
 8001eba:	2300      	movs	r3, #0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	2108      	movs	r1, #8
 8001ec0:	4814      	ldr	r0, [pc, #80]	@ (8001f14 <_Z12select_statev+0x3c4>)
 8001ec2:	f004 f8cd 	bl	8006060 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <_Z12select_statev+0x380>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <_Z12select_statev+0x382>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	2110      	movs	r1, #16
 8001ed6:	480f      	ldr	r0, [pc, #60]	@ (8001f14 <_Z12select_statev+0x3c4>)
 8001ed8:	f004 f8c2 	bl	8006060 <HAL_GPIO_WritePin>
			state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <_Z12select_statev+0x396>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <_Z12select_statev+0x398>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2120      	movs	r1, #32
 8001eec:	4809      	ldr	r0, [pc, #36]	@ (8001f14 <_Z12select_statev+0x3c4>)
 8001eee:	f004 f8b7 	bl	8006060 <HAL_GPIO_WritePin>
	}




}
 8001ef2:	bf00      	nop
 8001ef4:	3728      	adds	r7, #40	@ 0x28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	24000b94 	.word	0x24000b94
 8001f00:	24000bc8 	.word	0x24000bc8
 8001f04:	0800b90c 	.word	0x0800b90c
 8001f08:	58021000 	.word	0x58021000
 8001f0c:	0800b910 	.word	0x0800b910
 8001f10:	58021800 	.word	0x58021800
 8001f14:	58020c00 	.word	0x58020c00

08001f18 <_Z11parse_state6CANMsg>:

/*********************************************************************************************************
 ** Function name:           parse_state
 ** Descriptions:            Function for analysing the data from the CAN
 *********************************************************************************************************/
void parse_state(CANMsg data) {
 8001f18:	b084      	sub	sp, #16
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	f107 0c18 	add.w	ip, r7, #24
 8001f24:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t time = HAL_GetTick();
 8001f28:	f000 fc52 	bl	80027d0 <HAL_GetTick>
 8001f2c:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < BMS_N; i++) {
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	e017      	b.n	8001f68 <_Z11parse_state6CANMsg+0x50>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], time); //Checking if the message received is for  BMS
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	4a26      	ldr	r2, [pc, #152]	@ (8001fdc <_Z11parse_state6CANMsg+0xc4>)
 8001f44:	1898      	adds	r0, r3, r2
 8001f46:	69b9      	ldr	r1, [r7, #24]
 8001f48:	f107 021d 	add.w	r2, r7, #29
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	f7fe fd57 	bl	8000a00 <_ZN7BMS_MOD5parseEmPhm>
 8001f52:	4603      	mov	r3, r0
 8001f54:	73fb      	strb	r3, [r7, #15]
		if (flag_bms)
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <_Z11parse_state6CANMsg+0x4a>
			i = BMS_N;
 8001f5c:	4b20      	ldr	r3, [pc, #128]	@ (8001fe0 <_Z11parse_state6CANMsg+0xc8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < BMS_N; i++) {
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	3301      	adds	r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe0 <_Z11parse_state6CANMsg+0xc8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	dbe2      	blt.n	8001f38 <_Z11parse_state6CANMsg+0x20>
	}

	if (!flag_bms) {
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	f083 0301 	eor.w	r3, r3, #1
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d026      	beq.n	8001fcc <_Z11parse_state6CANMsg+0xb4>
		if (CPU.parse(data.id, &data.buf[0], time))
 8001f7e:	69b9      	ldr	r1, [r7, #24]
 8001f80:	f107 021d 	add.w	r2, r7, #29
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	4817      	ldr	r0, [pc, #92]	@ (8001fe4 <_Z11parse_state6CANMsg+0xcc>)
 8001f88:	f7fe ff78 	bl	8000e7c <_ZN7CPU_MOD5parseEmPhm>
			;                       //Cheking if message is for CPU
		if (data.id == 419385575) //If message from this direction received, it is because the charger is connected and the accu is for charging
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	4a16      	ldr	r2, [pc, #88]	@ (8001fe8 <_Z11parse_state6CANMsg+0xd0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d11b      	bne.n	8001fcc <_Z11parse_state6CANMsg+0xb4>
				{
			for (int i = 0; i < BMS_N; i++) {
 8001f94:	2300      	movs	r3, #0
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	e00d      	b.n	8001fb6 <_Z11parse_state6CANMsg+0x9e>
				BMS[i].flag_charger = 1;
 8001f9a:	4a10      	ldr	r2, [pc, #64]	@ (8001fdc <_Z11parse_state6CANMsg+0xc4>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001fa2:	fb01 f303 	mul.w	r3, r1, r3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <_Z11parse_state6CANMsg+0xc8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	dbec      	blt.n	8001f9a <_Z11parse_state6CANMsg+0x82>
			}

			current.flag_charger = 1;
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <_Z11parse_state6CANMsg+0xd4>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	63da      	str	r2, [r3, #60]	@ 0x3c
			flag_charger = 1;
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff0 <_Z11parse_state6CANMsg+0xd8>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fd6:	b004      	add	sp, #16
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	2400046c 	.word	0x2400046c
 8001fe0:	24000000 	.word	0x24000000
 8001fe4:	24000b94 	.word	0x24000b94
 8001fe8:	18ff50e7 	.word	0x18ff50e7
 8001fec:	24000bcc 	.word	0x24000bcc
 8001ff0:	24000bc8 	.word	0x24000bc8

08001ff4 <_Z41__static_initialization_and_destruction_0v>:
 8001ff4:	b590      	push	{r4, r7, lr}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af04      	add	r7, sp, #16
		};
 8001ffa:	4c3a      	ldr	r4, [pc, #232]	@ (80020e4 <_Z41__static_initialization_and_destruction_0v+0xf0>)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9303      	str	r3, [sp, #12]
 8002000:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002004:	9302      	str	r3, [sp, #8]
 8002006:	2313      	movs	r3, #19
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	233c      	movs	r3, #60	@ 0x3c
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002012:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002016:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800201a:	4620      	mov	r0, r4
 800201c:	f7fe fb66 	bl	80006ec <_ZN7BMS_MODC1Emiiihji>
 8002020:	f504 74b6 	add.w	r4, r4, #364	@ 0x16c
 8002024:	2332      	movs	r3, #50	@ 0x32
 8002026:	9303      	str	r3, [sp, #12]
 8002028:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800202c:	9302      	str	r3, [sp, #8]
 800202e:	2313      	movs	r3, #19
 8002030:	9301      	str	r3, [sp, #4]
 8002032:	233c      	movs	r3, #60	@ 0x3c
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800203a:	f241 0268 	movw	r2, #4200	@ 0x1068
 800203e:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8002042:	4620      	mov	r0, r4
 8002044:	f7fe fb52 	bl	80006ec <_ZN7BMS_MODC1Emiiihji>
 8002048:	f504 74b6 	add.w	r4, r4, #364	@ 0x16c
 800204c:	2364      	movs	r3, #100	@ 0x64
 800204e:	9303      	str	r3, [sp, #12]
 8002050:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002054:	9302      	str	r3, [sp, #8]
 8002056:	2313      	movs	r3, #19
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	233c      	movs	r3, #60	@ 0x3c
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002062:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002066:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800206a:	4620      	mov	r0, r4
 800206c:	f7fe fb3e 	bl	80006ec <_ZN7BMS_MODC1Emiiihji>
 8002070:	f504 74b6 	add.w	r4, r4, #364	@ 0x16c
 8002074:	2396      	movs	r3, #150	@ 0x96
 8002076:	9303      	str	r3, [sp, #12]
 8002078:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800207c:	9302      	str	r3, [sp, #8]
 800207e:	2313      	movs	r3, #19
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	233c      	movs	r3, #60	@ 0x3c
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800208a:	f241 0268 	movw	r2, #4200	@ 0x1068
 800208e:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8002092:	4620      	mov	r0, r4
 8002094:	f7fe fb2a 	bl	80006ec <_ZN7BMS_MODC1Emiiihji>
 8002098:	f504 70b6 	add.w	r0, r4, #364	@ 0x16c
 800209c:	23c8      	movs	r3, #200	@ 0xc8
 800209e:	9303      	str	r3, [sp, #12]
 80020a0:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80020a4:	9302      	str	r3, [sp, #8]
 80020a6:	2313      	movs	r3, #19
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	233c      	movs	r3, #60	@ 0x3c
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80020b2:	f241 0268 	movw	r2, #4200	@ 0x1068
 80020b6:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 80020ba:	f7fe fb17 	bl	80006ec <_ZN7BMS_MODC1Emiiihji>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 80020be:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80020c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020c6:	2120      	movs	r1, #32
 80020c8:	4807      	ldr	r0, [pc, #28]	@ (80020e8 <_Z41__static_initialization_and_destruction_0v+0xf4>)
 80020ca:	f7fe fe85 	bl	8000dd8 <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 80020ce:	22c8      	movs	r2, #200	@ 0xc8
 80020d0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80020d4:	4805      	ldr	r0, [pc, #20]	@ (80020ec <_Z41__static_initialization_and_destruction_0v+0xf8>)
 80020d6:	f7fe ff27 	bl	8000f28 <_ZN11Current_MODC1Emi>
}
 80020da:	bf00      	nop
 80020dc:	3704      	adds	r7, #4
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd90      	pop	{r4, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2400046c 	.word	0x2400046c
 80020e8:	24000b94 	.word	0x24000b94
 80020ec:	24000bcc 	.word	0x24000bcc

080020f0 <_GLOBAL__sub_I_BMS>:
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	f7ff ff7e 	bl	8001ff4 <_Z41__static_initialization_and_destruction_0v>
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002102:	4b0a      	ldr	r3, [pc, #40]	@ (800212c <HAL_MspInit+0x30>)
 8002104:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002108:	4a08      	ldr	r2, [pc, #32]	@ (800212c <HAL_MspInit+0x30>)
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002112:	4b06      	ldr	r3, [pc, #24]	@ (800212c <HAL_MspInit+0x30>)
 8002114:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	58024400 	.word	0x58024400

08002130 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08c      	sub	sp, #48	@ 0x30
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a31      	ldr	r2, [pc, #196]	@ (8002214 <HAL_ADC_MspInit+0xe4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d12b      	bne.n	80021aa <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002152:	4b31      	ldr	r3, [pc, #196]	@ (8002218 <HAL_ADC_MspInit+0xe8>)
 8002154:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002158:	4a2f      	ldr	r2, [pc, #188]	@ (8002218 <HAL_ADC_MspInit+0xe8>)
 800215a:	f043 0320 	orr.w	r3, r3, #32
 800215e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002162:	4b2d      	ldr	r3, [pc, #180]	@ (8002218 <HAL_ADC_MspInit+0xe8>)
 8002164:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002170:	4b29      	ldr	r3, [pc, #164]	@ (8002218 <HAL_ADC_MspInit+0xe8>)
 8002172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002176:	4a28      	ldr	r2, [pc, #160]	@ (8002218 <HAL_ADC_MspInit+0xe8>)
 8002178:	f043 0320 	orr.w	r3, r3, #32
 800217c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002180:	4b25      	ldr	r3, [pc, #148]	@ (8002218 <HAL_ADC_MspInit+0xe8>)
 8002182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800218e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002194:	2303      	movs	r3, #3
 8002196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	4619      	mov	r1, r3
 80021a2:	481e      	ldr	r0, [pc, #120]	@ (800221c <HAL_ADC_MspInit+0xec>)
 80021a4:	f003 fd9c 	bl	8005ce0 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 80021a8:	e02f      	b.n	800220a <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002220 <HAL_ADC_MspInit+0xf0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d12a      	bne.n	800220a <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80021b4:	4b18      	ldr	r3, [pc, #96]	@ (8002218 <HAL_ADC_MspInit+0xe8>)
 80021b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ba:	4a17      	ldr	r2, [pc, #92]	@ (8002218 <HAL_ADC_MspInit+0xe8>)
 80021bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021c4:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <HAL_ADC_MspInit+0xe8>)
 80021c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021d2:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <HAL_ADC_MspInit+0xe8>)
 80021d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002218 <HAL_ADC_MspInit+0xe8>)
 80021da:	f043 0320 	orr.w	r3, r3, #32
 80021de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002218 <HAL_ADC_MspInit+0xe8>)
 80021e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021f6:	2303      	movs	r3, #3
 80021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021fe:	f107 031c 	add.w	r3, r7, #28
 8002202:	4619      	mov	r1, r3
 8002204:	4805      	ldr	r0, [pc, #20]	@ (800221c <HAL_ADC_MspInit+0xec>)
 8002206:	f003 fd6b 	bl	8005ce0 <HAL_GPIO_Init>
}
 800220a:	bf00      	nop
 800220c:	3730      	adds	r7, #48	@ 0x30
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40022000 	.word	0x40022000
 8002218:	58024400 	.word	0x58024400
 800221c:	58021400 	.word	0x58021400
 8002220:	58026000 	.word	0x58026000

08002224 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b0ba      	sub	sp, #232	@ 0xe8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800223c:	f107 0318 	add.w	r3, r7, #24
 8002240:	22b8      	movs	r2, #184	@ 0xb8
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f008 fd51 	bl	800acec <memset>
  if(hfdcan->Instance==FDCAN1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a5a      	ldr	r2, [pc, #360]	@ (80023b8 <HAL_FDCAN_MspInit+0x194>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d157      	bne.n	8002304 <HAL_FDCAN_MspInit+0xe0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002254:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002266:	f107 0318 	add.w	r3, r7, #24
 800226a:	4618      	mov	r0, r3
 800226c:	f004 feb2 	bl	8006fd4 <HAL_RCCEx_PeriphCLKConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002276:	f7ff fc65 	bl	8001b44 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800227a:	4b50      	ldr	r3, [pc, #320]	@ (80023bc <HAL_FDCAN_MspInit+0x198>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3301      	adds	r3, #1
 8002280:	4a4e      	ldr	r2, [pc, #312]	@ (80023bc <HAL_FDCAN_MspInit+0x198>)
 8002282:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002284:	4b4d      	ldr	r3, [pc, #308]	@ (80023bc <HAL_FDCAN_MspInit+0x198>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d10e      	bne.n	80022aa <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800228c:	4b4c      	ldr	r3, [pc, #304]	@ (80023c0 <HAL_FDCAN_MspInit+0x19c>)
 800228e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002292:	4a4b      	ldr	r2, [pc, #300]	@ (80023c0 <HAL_FDCAN_MspInit+0x19c>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002298:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800229c:	4b48      	ldr	r3, [pc, #288]	@ (80023c0 <HAL_FDCAN_MspInit+0x19c>)
 800229e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80022a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022aa:	4b45      	ldr	r3, [pc, #276]	@ (80023c0 <HAL_FDCAN_MspInit+0x19c>)
 80022ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b0:	4a43      	ldr	r2, [pc, #268]	@ (80023c0 <HAL_FDCAN_MspInit+0x19c>)
 80022b2:	f043 0308 	orr.w	r3, r3, #8
 80022b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022ba:	4b41      	ldr	r3, [pc, #260]	@ (80023c0 <HAL_FDCAN_MspInit+0x19c>)
 80022bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022c8:	2303      	movs	r3, #3
 80022ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80022e0:	2309      	movs	r3, #9
 80022e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022e6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022ea:	4619      	mov	r1, r3
 80022ec:	4835      	ldr	r0, [pc, #212]	@ (80023c4 <HAL_FDCAN_MspInit+0x1a0>)
 80022ee:	f003 fcf7 	bl	8005ce0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	2013      	movs	r0, #19
 80022f8:	f002 faef 	bl	80048da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80022fc:	2013      	movs	r0, #19
 80022fe:	f002 fb06 	bl	800490e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002302:	e054      	b.n	80023ae <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a2f      	ldr	r2, [pc, #188]	@ (80023c8 <HAL_FDCAN_MspInit+0x1a4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d14f      	bne.n	80023ae <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800230e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002320:	f107 0318 	add.w	r3, r7, #24
 8002324:	4618      	mov	r0, r3
 8002326:	f004 fe55 	bl	8006fd4 <HAL_RCCEx_PeriphCLKConfig>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002330:	f7ff fc08 	bl	8001b44 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002334:	4b21      	ldr	r3, [pc, #132]	@ (80023bc <HAL_FDCAN_MspInit+0x198>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	4a20      	ldr	r2, [pc, #128]	@ (80023bc <HAL_FDCAN_MspInit+0x198>)
 800233c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800233e:	4b1f      	ldr	r3, [pc, #124]	@ (80023bc <HAL_FDCAN_MspInit+0x198>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d10e      	bne.n	8002364 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002346:	4b1e      	ldr	r3, [pc, #120]	@ (80023c0 <HAL_FDCAN_MspInit+0x19c>)
 8002348:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800234c:	4a1c      	ldr	r2, [pc, #112]	@ (80023c0 <HAL_FDCAN_MspInit+0x19c>)
 800234e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002352:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002356:	4b1a      	ldr	r3, [pc, #104]	@ (80023c0 <HAL_FDCAN_MspInit+0x19c>)
 8002358:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800235c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002364:	4b16      	ldr	r3, [pc, #88]	@ (80023c0 <HAL_FDCAN_MspInit+0x19c>)
 8002366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800236a:	4a15      	ldr	r2, [pc, #84]	@ (80023c0 <HAL_FDCAN_MspInit+0x19c>)
 800236c:	f043 0302 	orr.w	r3, r3, #2
 8002370:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002374:	4b12      	ldr	r3, [pc, #72]	@ (80023c0 <HAL_FDCAN_MspInit+0x19c>)
 8002376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002382:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002386:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	2302      	movs	r3, #2
 800238c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	2300      	movs	r3, #0
 8002398:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800239c:	2309      	movs	r3, #9
 800239e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80023a6:	4619      	mov	r1, r3
 80023a8:	4808      	ldr	r0, [pc, #32]	@ (80023cc <HAL_FDCAN_MspInit+0x1a8>)
 80023aa:	f003 fc99 	bl	8005ce0 <HAL_GPIO_Init>
}
 80023ae:	bf00      	nop
 80023b0:	37e8      	adds	r7, #232	@ 0xe8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	4000a000 	.word	0x4000a000
 80023bc:	24000c64 	.word	0x24000c64
 80023c0:	58024400 	.word	0x58024400
 80023c4:	58020c00 	.word	0x58020c00
 80023c8:	4000a400 	.word	0x4000a400
 80023cc:	58020400 	.word	0x58020400

080023d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b0b8      	sub	sp, #224	@ 0xe0
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023e8:	f107 0310 	add.w	r3, r7, #16
 80023ec:	22b8      	movs	r2, #184	@ 0xb8
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f008 fc7b 	bl	800acec <memset>
  if(huart->Instance==USART2)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a26      	ldr	r2, [pc, #152]	@ (8002494 <HAL_UART_MspInit+0xc4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d145      	bne.n	800248c <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002400:	f04f 0202 	mov.w	r2, #2
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002412:	f107 0310 	add.w	r3, r7, #16
 8002416:	4618      	mov	r0, r3
 8002418:	f004 fddc 	bl	8006fd4 <HAL_RCCEx_PeriphCLKConfig>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002422:	f7ff fb8f 	bl	8001b44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002426:	4b1c      	ldr	r3, [pc, #112]	@ (8002498 <HAL_UART_MspInit+0xc8>)
 8002428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800242c:	4a1a      	ldr	r2, [pc, #104]	@ (8002498 <HAL_UART_MspInit+0xc8>)
 800242e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002432:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002436:	4b18      	ldr	r3, [pc, #96]	@ (8002498 <HAL_UART_MspInit+0xc8>)
 8002438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800243c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002444:	4b14      	ldr	r3, [pc, #80]	@ (8002498 <HAL_UART_MspInit+0xc8>)
 8002446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800244a:	4a13      	ldr	r2, [pc, #76]	@ (8002498 <HAL_UART_MspInit+0xc8>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002454:	4b10      	ldr	r3, [pc, #64]	@ (8002498 <HAL_UART_MspInit+0xc8>)
 8002456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002462:	230c      	movs	r3, #12
 8002464:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800247a:	2307      	movs	r3, #7
 800247c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002480:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002484:	4619      	mov	r1, r3
 8002486:	4805      	ldr	r0, [pc, #20]	@ (800249c <HAL_UART_MspInit+0xcc>)
 8002488:	f003 fc2a 	bl	8005ce0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800248c:	bf00      	nop
 800248e:	37e0      	adds	r7, #224	@ 0xe0
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40004400 	.word	0x40004400
 8002498:	58024400 	.word	0x58024400
 800249c:	58020000 	.word	0x58020000

080024a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <NMI_Handler+0x4>

080024a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ac:	bf00      	nop
 80024ae:	e7fd      	b.n	80024ac <HardFault_Handler+0x4>

080024b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b4:	bf00      	nop
 80024b6:	e7fd      	b.n	80024b4 <MemManage_Handler+0x4>

080024b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <BusFault_Handler+0x4>

080024c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <UsageFault_Handler+0x4>

080024c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024f6:	f000 f957 	bl	80027a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002504:	4802      	ldr	r0, [pc, #8]	@ (8002510 <FDCAN1_IT0_IRQHandler+0x10>)
 8002506:	f002 fedd 	bl	80052c4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	24000164 	.word	0x24000164

08002514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800251c:	4a14      	ldr	r2, [pc, #80]	@ (8002570 <_sbrk+0x5c>)
 800251e:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <_sbrk+0x60>)
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002528:	4b13      	ldr	r3, [pc, #76]	@ (8002578 <_sbrk+0x64>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002530:	4b11      	ldr	r3, [pc, #68]	@ (8002578 <_sbrk+0x64>)
 8002532:	4a12      	ldr	r2, [pc, #72]	@ (800257c <_sbrk+0x68>)
 8002534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002536:	4b10      	ldr	r3, [pc, #64]	@ (8002578 <_sbrk+0x64>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	429a      	cmp	r2, r3
 8002542:	d207      	bcs.n	8002554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002544:	f008 fbda 	bl	800acfc <__errno>
 8002548:	4603      	mov	r3, r0
 800254a:	220c      	movs	r2, #12
 800254c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
 8002552:	e009      	b.n	8002568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002554:	4b08      	ldr	r3, [pc, #32]	@ (8002578 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800255a:	4b07      	ldr	r3, [pc, #28]	@ (8002578 <_sbrk+0x64>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	4a05      	ldr	r2, [pc, #20]	@ (8002578 <_sbrk+0x64>)
 8002564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002566:	68fb      	ldr	r3, [r7, #12]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	24050000 	.word	0x24050000
 8002574:	00000400 	.word	0x00000400
 8002578:	24000c68 	.word	0x24000c68
 800257c:	24000db8 	.word	0x24000db8

08002580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002584:	4b32      	ldr	r3, [pc, #200]	@ (8002650 <SystemInit+0xd0>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258a:	4a31      	ldr	r2, [pc, #196]	@ (8002650 <SystemInit+0xd0>)
 800258c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002590:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002594:	4b2f      	ldr	r3, [pc, #188]	@ (8002654 <SystemInit+0xd4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	2b06      	cmp	r3, #6
 800259e:	d807      	bhi.n	80025b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002654 <SystemInit+0xd4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 030f 	bic.w	r3, r3, #15
 80025a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002654 <SystemInit+0xd4>)
 80025aa:	f043 0307 	orr.w	r3, r3, #7
 80025ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025b0:	4b29      	ldr	r3, [pc, #164]	@ (8002658 <SystemInit+0xd8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a28      	ldr	r2, [pc, #160]	@ (8002658 <SystemInit+0xd8>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025bc:	4b26      	ldr	r3, [pc, #152]	@ (8002658 <SystemInit+0xd8>)
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025c2:	4b25      	ldr	r3, [pc, #148]	@ (8002658 <SystemInit+0xd8>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4924      	ldr	r1, [pc, #144]	@ (8002658 <SystemInit+0xd8>)
 80025c8:	4b24      	ldr	r3, [pc, #144]	@ (800265c <SystemInit+0xdc>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025ce:	4b21      	ldr	r3, [pc, #132]	@ (8002654 <SystemInit+0xd4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025da:	4b1e      	ldr	r3, [pc, #120]	@ (8002654 <SystemInit+0xd4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 030f 	bic.w	r3, r3, #15
 80025e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002654 <SystemInit+0xd4>)
 80025e4:	f043 0307 	orr.w	r3, r3, #7
 80025e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002658 <SystemInit+0xd8>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025f0:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <SystemInit+0xd8>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025f6:	4b18      	ldr	r3, [pc, #96]	@ (8002658 <SystemInit+0xd8>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025fc:	4b16      	ldr	r3, [pc, #88]	@ (8002658 <SystemInit+0xd8>)
 80025fe:	4a18      	ldr	r2, [pc, #96]	@ (8002660 <SystemInit+0xe0>)
 8002600:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002602:	4b15      	ldr	r3, [pc, #84]	@ (8002658 <SystemInit+0xd8>)
 8002604:	4a17      	ldr	r2, [pc, #92]	@ (8002664 <SystemInit+0xe4>)
 8002606:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002608:	4b13      	ldr	r3, [pc, #76]	@ (8002658 <SystemInit+0xd8>)
 800260a:	4a17      	ldr	r2, [pc, #92]	@ (8002668 <SystemInit+0xe8>)
 800260c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800260e:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <SystemInit+0xd8>)
 8002610:	2200      	movs	r2, #0
 8002612:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002614:	4b10      	ldr	r3, [pc, #64]	@ (8002658 <SystemInit+0xd8>)
 8002616:	4a14      	ldr	r2, [pc, #80]	@ (8002668 <SystemInit+0xe8>)
 8002618:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800261a:	4b0f      	ldr	r3, [pc, #60]	@ (8002658 <SystemInit+0xd8>)
 800261c:	2200      	movs	r2, #0
 800261e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002620:	4b0d      	ldr	r3, [pc, #52]	@ (8002658 <SystemInit+0xd8>)
 8002622:	4a11      	ldr	r2, [pc, #68]	@ (8002668 <SystemInit+0xe8>)
 8002624:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002626:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <SystemInit+0xd8>)
 8002628:	2200      	movs	r2, #0
 800262a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800262c:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <SystemInit+0xd8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a09      	ldr	r2, [pc, #36]	@ (8002658 <SystemInit+0xd8>)
 8002632:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002636:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002638:	4b07      	ldr	r3, [pc, #28]	@ (8002658 <SystemInit+0xd8>)
 800263a:	2200      	movs	r2, #0
 800263c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800263e:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <SystemInit+0xec>)
 8002640:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002644:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002646:	bf00      	nop
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00
 8002654:	52002000 	.word	0x52002000
 8002658:	58024400 	.word	0x58024400
 800265c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002660:	02020200 	.word	0x02020200
 8002664:	01ff0000 	.word	0x01ff0000
 8002668:	01010280 	.word	0x01010280
 800266c:	52004000 	.word	0x52004000

08002670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002670:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002674:	f7ff ff84 	bl	8002580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002678:	480c      	ldr	r0, [pc, #48]	@ (80026ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800267a:	490d      	ldr	r1, [pc, #52]	@ (80026b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800267c:	4a0d      	ldr	r2, [pc, #52]	@ (80026b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800267e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002680:	e002      	b.n	8002688 <LoopCopyDataInit>

08002682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002686:	3304      	adds	r3, #4

08002688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800268a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800268c:	d3f9      	bcc.n	8002682 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800268e:	4a0a      	ldr	r2, [pc, #40]	@ (80026b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002690:	4c0a      	ldr	r4, [pc, #40]	@ (80026bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002694:	e001      	b.n	800269a <LoopFillZerobss>

08002696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002696:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 8002698:	3204      	adds	r2, #4

0800269a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800269a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800269c:	d3fb      	bcc.n	8002696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800269e:	f008 fb33 	bl	800ad08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026a2:	f7fe fcc5 	bl	8001030 <main>
  bx  lr
 80026a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026a8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80026ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026b0:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 80026b4:	0800b9f4 	.word	0x0800b9f4
  ldr r2, =_sbss
 80026b8:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 80026bc:	24000db8 	.word	0x24000db8

080026c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026c0:	e7fe      	b.n	80026c0 <ADC3_IRQHandler>
	...

080026c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ca:	2003      	movs	r0, #3
 80026cc:	f002 f8fa 	bl	80048c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026d0:	f004 faaa 	bl	8006c28 <HAL_RCC_GetSysClockFreq>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b15      	ldr	r3, [pc, #84]	@ (800272c <HAL_Init+0x68>)
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	f003 030f 	and.w	r3, r3, #15
 80026e0:	4913      	ldr	r1, [pc, #76]	@ (8002730 <HAL_Init+0x6c>)
 80026e2:	5ccb      	ldrb	r3, [r1, r3]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026ee:	4b0f      	ldr	r3, [pc, #60]	@ (800272c <HAL_Init+0x68>)
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002730 <HAL_Init+0x6c>)
 80026f8:	5cd3      	ldrb	r3, [r2, r3]
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
 8002704:	4a0b      	ldr	r2, [pc, #44]	@ (8002734 <HAL_Init+0x70>)
 8002706:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002708:	4a0b      	ldr	r2, [pc, #44]	@ (8002738 <HAL_Init+0x74>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800270e:	200f      	movs	r0, #15
 8002710:	f000 f814 	bl	800273c <HAL_InitTick>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e002      	b.n	8002724 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800271e:	f7ff fced 	bl	80020fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	58024400 	.word	0x58024400
 8002730:	0800b964 	.word	0x0800b964
 8002734:	2400000c 	.word	0x2400000c
 8002738:	24000008 	.word	0x24000008

0800273c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002744:	4b15      	ldr	r3, [pc, #84]	@ (800279c <HAL_InitTick+0x60>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e021      	b.n	8002794 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002750:	4b13      	ldr	r3, [pc, #76]	@ (80027a0 <HAL_InitTick+0x64>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b11      	ldr	r3, [pc, #68]	@ (800279c <HAL_InitTick+0x60>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	4619      	mov	r1, r3
 800275a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800275e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002762:	fbb2 f3f3 	udiv	r3, r2, r3
 8002766:	4618      	mov	r0, r3
 8002768:	f002 f8df 	bl	800492a <HAL_SYSTICK_Config>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e00e      	b.n	8002794 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b0f      	cmp	r3, #15
 800277a:	d80a      	bhi.n	8002792 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800277c:	2200      	movs	r2, #0
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	f04f 30ff 	mov.w	r0, #4294967295
 8002784:	f002 f8a9 	bl	80048da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002788:	4a06      	ldr	r2, [pc, #24]	@ (80027a4 <HAL_InitTick+0x68>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	e000      	b.n	8002794 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
}
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	24000014 	.word	0x24000014
 80027a0:	24000008 	.word	0x24000008
 80027a4:	24000010 	.word	0x24000010

080027a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027ac:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <HAL_IncTick+0x20>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <HAL_IncTick+0x24>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	4a04      	ldr	r2, [pc, #16]	@ (80027cc <HAL_IncTick+0x24>)
 80027ba:	6013      	str	r3, [r2, #0]
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	24000014 	.word	0x24000014
 80027cc:	24000c6c 	.word	0x24000c6c

080027d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return uwTick;
 80027d4:	4b03      	ldr	r3, [pc, #12]	@ (80027e4 <HAL_GetTick+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	24000c6c 	.word	0x24000c6c

080027e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	609a      	str	r2, [r3, #8]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	609a      	str	r2, [r3, #8]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a18      	ldr	r2, [pc, #96]	@ (80028c0 <LL_ADC_SetChannelPreselection+0x70>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d027      	beq.n	80028b2 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002868:	2b00      	cmp	r3, #0
 800286a:	d107      	bne.n	800287c <LL_ADC_SetChannelPreselection+0x2c>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	0e9b      	lsrs	r3, r3, #26
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	2201      	movs	r2, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	e015      	b.n	80028a8 <LL_ADC_SetChannelPreselection+0x58>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8002892:	2320      	movs	r3, #32
 8002894:	e003      	b.n	800289e <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	fab3 f383 	clz	r3, r3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	2201      	movs	r2, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	69d2      	ldr	r2, [r2, #28]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	58026000 	.word	0x58026000

080028c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3360      	adds	r3, #96	@ 0x60
 80028d6:	461a      	mov	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4a10      	ldr	r2, [pc, #64]	@ (8002924 <LL_ADC_SetOffset+0x60>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d10b      	bne.n	8002900 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80028fe:	e00b      	b.n	8002918 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	430b      	orrs	r3, r1
 8002912:	431a      	orrs	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	601a      	str	r2, [r3, #0]
}
 8002918:	bf00      	nop
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	58026000 	.word	0x58026000

08002928 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3360      	adds	r3, #96	@ 0x60
 8002936:	461a      	mov	r2, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	fa01 f303 	lsl.w	r3, r1, r3
 8002974:	431a      	orrs	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	611a      	str	r2, [r3, #16]
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a0c      	ldr	r2, [pc, #48]	@ (80029c8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d00e      	beq.n	80029ba <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3360      	adds	r3, #96	@ 0x60
 80029a0:	461a      	mov	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	601a      	str	r2, [r3, #0]
  }
}
 80029ba:	bf00      	nop
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	58026000 	.word	0x58026000

080029cc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4a0c      	ldr	r2, [pc, #48]	@ (8002a0c <LL_ADC_SetOffsetSaturation+0x40>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d10e      	bne.n	80029fe <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3360      	adds	r3, #96	@ 0x60
 80029e4:	461a      	mov	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	58026000 	.word	0x58026000

08002a10 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8002a50 <LL_ADC_SetOffsetSign+0x40>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d10e      	bne.n	8002a42 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	3360      	adds	r3, #96	@ 0x60
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002a42:	bf00      	nop
 8002a44:	371c      	adds	r7, #28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	58026000 	.word	0x58026000

08002a54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3360      	adds	r3, #96	@ 0x60
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa4 <LL_ADC_SetOffsetState+0x50>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d108      	bne.n	8002a88 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002a86:	e007      	b.n	8002a98 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	601a      	str	r2, [r3, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	58026000 	.word	0x58026000

08002aa8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b087      	sub	sp, #28
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	3330      	adds	r3, #48	@ 0x30
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	0a1b      	lsrs	r3, r3, #8
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	4413      	add	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	211f      	movs	r1, #31
 8002afa:	fa01 f303 	lsl.w	r3, r1, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	401a      	ands	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	0e9b      	lsrs	r3, r3, #26
 8002b06:	f003 011f 	and.w	r1, r3, #31
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	fa01 f303 	lsl.w	r3, r1, r3
 8002b14:	431a      	orrs	r2, r3
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b087      	sub	sp, #28
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	3314      	adds	r3, #20
 8002b36:	461a      	mov	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	0e5b      	lsrs	r3, r3, #25
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	4413      	add	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	0d1b      	lsrs	r3, r3, #20
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	2107      	movs	r1, #7
 8002b54:	fa01 f303 	lsl.w	r3, r1, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	0d1b      	lsrs	r3, r3, #20
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b70:	bf00      	nop
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8002bf4 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d115      	bne.n	8002bbc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f003 0318 	and.w	r3, r3, #24
 8002ba6:	4914      	ldr	r1, [pc, #80]	@ (8002bf8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ba8:	40d9      	lsrs	r1, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	400b      	ands	r3, r1
 8002bae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002bba:	e014      	b.n	8002be6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	401a      	ands	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f003 0318 	and.w	r3, r3, #24
 8002bd2:	4909      	ldr	r1, [pc, #36]	@ (8002bf8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002bd4:	40d9      	lsrs	r1, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	400b      	ands	r3, r1
 8002bda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bde:	431a      	orrs	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	58026000 	.word	0x58026000
 8002bf8:	000fffff 	.word	0x000fffff

08002bfc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 031f 	and.w	r3, r3, #31
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	4b04      	ldr	r3, [pc, #16]	@ (8002c54 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6093      	str	r3, [r2, #8]
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	5fffffc0 	.word	0x5fffffc0

08002c58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c6c:	d101      	bne.n	8002c72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	6fffffc0 	.word	0x6fffffc0

08002ca8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cbc:	d101      	bne.n	8002cc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <LL_ADC_Enable+0x24>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	f043 0201 	orr.w	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	7fffffc0 	.word	0x7fffffc0

08002cf8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	4b05      	ldr	r3, [pc, #20]	@ (8002d1c <LL_ADC_Disable+0x24>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	f043 0202 	orr.w	r2, r3, #2
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	7fffffc0 	.word	0x7fffffc0

08002d20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <LL_ADC_IsEnabled+0x18>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <LL_ADC_IsEnabled+0x1a>
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d101      	bne.n	8002d5e <LL_ADC_IsDisableOngoing+0x18>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <LL_ADC_IsDisableOngoing+0x1a>
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <LL_ADC_REG_StartConversion+0x24>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	f043 0204 	orr.w	r2, r3, #4
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	7fffffc0 	.word	0x7fffffc0

08002d94 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <LL_ADC_REG_StopConversion+0x24>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	f043 0210 	orr.w	r2, r3, #16
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	7fffffc0 	.word	0x7fffffc0

08002dbc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d101      	bne.n	8002dd4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
	...

08002de4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <LL_ADC_INJ_StopConversion+0x24>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	f043 0220 	orr.w	r2, r3, #32
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	7fffffc0 	.word	0x7fffffc0

08002e0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d101      	bne.n	8002e24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b089      	sub	sp, #36	@ 0x24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e1ee      	b.n	800322c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d109      	bne.n	8002e70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff f967 	bl	8002130 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff feef 	bl	8002c58 <LL_ADC_IsDeepPowerDownEnabled>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d004      	beq.n	8002e8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fed5 	bl	8002c34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff ff0a 	bl	8002ca8 <LL_ADC_IsInternalRegulatorEnabled>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d114      	bne.n	8002ec4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff feee 	bl	8002c80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ea4:	4b8e      	ldr	r3, [pc, #568]	@ (80030e0 <HAL_ADC_Init+0x2ac>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	099b      	lsrs	r3, r3, #6
 8002eaa:	4a8e      	ldr	r2, [pc, #568]	@ (80030e4 <HAL_ADC_Init+0x2b0>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	099b      	lsrs	r3, r3, #6
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eb6:	e002      	b.n	8002ebe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f9      	bne.n	8002eb8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff feed 	bl	8002ca8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed8:	f043 0210 	orr.w	r2, r3, #16
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ee4:	f043 0201 	orr.w	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff61 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 8002efa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f040 8188 	bne.w	800321a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f040 8184 	bne.w	800321a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f16:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f1a:	f043 0202 	orr.w	r2, r3, #2
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fefa 	bl	8002d20 <LL_ADC_IsEnabled>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d136      	bne.n	8002fa0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a6c      	ldr	r2, [pc, #432]	@ (80030e8 <HAL_ADC_Init+0x2b4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d004      	beq.n	8002f46 <HAL_ADC_Init+0x112>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a6a      	ldr	r2, [pc, #424]	@ (80030ec <HAL_ADC_Init+0x2b8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10e      	bne.n	8002f64 <HAL_ADC_Init+0x130>
 8002f46:	4868      	ldr	r0, [pc, #416]	@ (80030e8 <HAL_ADC_Init+0x2b4>)
 8002f48:	f7ff feea 	bl	8002d20 <LL_ADC_IsEnabled>
 8002f4c:	4604      	mov	r4, r0
 8002f4e:	4867      	ldr	r0, [pc, #412]	@ (80030ec <HAL_ADC_Init+0x2b8>)
 8002f50:	f7ff fee6 	bl	8002d20 <LL_ADC_IsEnabled>
 8002f54:	4603      	mov	r3, r0
 8002f56:	4323      	orrs	r3, r4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e008      	b.n	8002f76 <HAL_ADC_Init+0x142>
 8002f64:	4862      	ldr	r0, [pc, #392]	@ (80030f0 <HAL_ADC_Init+0x2bc>)
 8002f66:	f7ff fedb 	bl	8002d20 <LL_ADC_IsEnabled>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d012      	beq.n	8002fa0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a5a      	ldr	r2, [pc, #360]	@ (80030e8 <HAL_ADC_Init+0x2b4>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d004      	beq.n	8002f8e <HAL_ADC_Init+0x15a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a58      	ldr	r2, [pc, #352]	@ (80030ec <HAL_ADC_Init+0x2b8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d101      	bne.n	8002f92 <HAL_ADC_Init+0x15e>
 8002f8e:	4a59      	ldr	r2, [pc, #356]	@ (80030f4 <HAL_ADC_Init+0x2c0>)
 8002f90:	e000      	b.n	8002f94 <HAL_ADC_Init+0x160>
 8002f92:	4a59      	ldr	r2, [pc, #356]	@ (80030f8 <HAL_ADC_Init+0x2c4>)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	f7ff fc24 	bl	80027e8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a52      	ldr	r2, [pc, #328]	@ (80030f0 <HAL_ADC_Init+0x2bc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d129      	bne.n	8002ffe <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	7e5b      	ldrb	r3, [r3, #25]
 8002fae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002fb4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002fba:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d013      	beq.n	8002fec <HAL_ADC_Init+0x1b8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b0c      	cmp	r3, #12
 8002fca:	d00d      	beq.n	8002fe8 <HAL_ADC_Init+0x1b4>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b1c      	cmp	r3, #28
 8002fd2:	d007      	beq.n	8002fe4 <HAL_ADC_Init+0x1b0>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b18      	cmp	r3, #24
 8002fda:	d101      	bne.n	8002fe0 <HAL_ADC_Init+0x1ac>
 8002fdc:	2318      	movs	r3, #24
 8002fde:	e006      	b.n	8002fee <HAL_ADC_Init+0x1ba>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e004      	b.n	8002fee <HAL_ADC_Init+0x1ba>
 8002fe4:	2310      	movs	r3, #16
 8002fe6:	e002      	b.n	8002fee <HAL_ADC_Init+0x1ba>
 8002fe8:	2308      	movs	r3, #8
 8002fea:	e000      	b.n	8002fee <HAL_ADC_Init+0x1ba>
 8002fec:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002fee:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	e00e      	b.n	800301c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	7e5b      	ldrb	r3, [r3, #25]
 8003002:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003008:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800300e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003016:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d106      	bne.n	8003034 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302a:	3b01      	subs	r3, #1
 800302c:	045b      	lsls	r3, r3, #17
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d009      	beq.n	8003050 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003040:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003048:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a26      	ldr	r2, [pc, #152]	@ (80030f0 <HAL_ADC_Init+0x2bc>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d115      	bne.n	8003086 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	4b26      	ldr	r3, [pc, #152]	@ (80030fc <HAL_ADC_Init+0x2c8>)
 8003062:	4013      	ands	r3, r2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	69b9      	ldr	r1, [r7, #24]
 800306a:	430b      	orrs	r3, r1
 800306c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	611a      	str	r2, [r3, #16]
 8003084:	e009      	b.n	800309a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	4b1c      	ldr	r3, [pc, #112]	@ (8003100 <HAL_ADC_Init+0x2cc>)
 800308e:	4013      	ands	r3, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	69b9      	ldr	r1, [r7, #24]
 8003096:	430b      	orrs	r3, r1
 8003098:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fe8c 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 80030a4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff feae 	bl	8002e0c <LL_ADC_INJ_IsConversionOngoing>
 80030b0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f040 808e 	bne.w	80031d6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f040 808a 	bne.w	80031d6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a0a      	ldr	r2, [pc, #40]	@ (80030f0 <HAL_ADC_Init+0x2bc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d11b      	bne.n	8003104 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	7e1b      	ldrb	r3, [r3, #24]
 80030d0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80030d8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	e018      	b.n	8003112 <HAL_ADC_Init+0x2de>
 80030e0:	24000008 	.word	0x24000008
 80030e4:	053e2d63 	.word	0x053e2d63
 80030e8:	40022000 	.word	0x40022000
 80030ec:	40022100 	.word	0x40022100
 80030f0:	58026000 	.word	0x58026000
 80030f4:	40022300 	.word	0x40022300
 80030f8:	58026300 	.word	0x58026300
 80030fc:	fff04007 	.word	0xfff04007
 8003100:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	7e1b      	ldrb	r3, [r3, #24]
 8003108:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	4b46      	ldr	r3, [pc, #280]	@ (8003234 <HAL_ADC_Init+0x400>)
 800311a:	4013      	ands	r3, r2
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	69b9      	ldr	r1, [r7, #24]
 8003122:	430b      	orrs	r3, r1
 8003124:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800312c:	2b01      	cmp	r3, #1
 800312e:	d137      	bne.n	80031a0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003134:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a3f      	ldr	r2, [pc, #252]	@ (8003238 <HAL_ADC_Init+0x404>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d116      	bne.n	800316e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	4b3d      	ldr	r3, [pc, #244]	@ (800323c <HAL_ADC_Init+0x408>)
 8003148:	4013      	ands	r3, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003152:	4311      	orrs	r1, r2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003158:	4311      	orrs	r1, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800315e:	430a      	orrs	r2, r1
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0201 	orr.w	r2, r2, #1
 800316a:	611a      	str	r2, [r3, #16]
 800316c:	e020      	b.n	80031b0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	4b32      	ldr	r3, [pc, #200]	@ (8003240 <HAL_ADC_Init+0x40c>)
 8003176:	4013      	ands	r3, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800317c:	3a01      	subs	r2, #1
 800317e:	0411      	lsls	r1, r2, #16
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003184:	4311      	orrs	r1, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800318a:	4311      	orrs	r1, r2
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003190:	430a      	orrs	r2, r1
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0201 	orr.w	r2, r2, #1
 800319c:	611a      	str	r2, [r3, #16]
 800319e:	e007      	b.n	80031b0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0201 	bic.w	r2, r2, #1
 80031ae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003238 <HAL_ADC_Init+0x404>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d002      	beq.n	80031d6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f001 f8b1 	bl	8004338 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d10c      	bne.n	80031f8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e4:	f023 010f 	bic.w	r1, r3, #15
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	1e5a      	subs	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80031f6:	e007      	b.n	8003208 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 020f 	bic.w	r2, r2, #15
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800320c:	f023 0303 	bic.w	r3, r3, #3
 8003210:	f043 0201 	orr.w	r2, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	661a      	str	r2, [r3, #96]	@ 0x60
 8003218:	e007      	b.n	800322a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800321e:	f043 0210 	orr.w	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800322a:	7ffb      	ldrb	r3, [r7, #31]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3724      	adds	r7, #36	@ 0x24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd90      	pop	{r4, r7, pc}
 8003234:	ffffbffc 	.word	0xffffbffc
 8003238:	58026000 	.word	0x58026000
 800323c:	fc00f81f 	.word	0xfc00f81f
 8003240:	fc00f81e 	.word	0xfc00f81e

08003244 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a5c      	ldr	r2, [pc, #368]	@ (80033c4 <HAL_ADC_Start+0x180>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d004      	beq.n	8003260 <HAL_ADC_Start+0x1c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a5b      	ldr	r2, [pc, #364]	@ (80033c8 <HAL_ADC_Start+0x184>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d101      	bne.n	8003264 <HAL_ADC_Start+0x20>
 8003260:	4b5a      	ldr	r3, [pc, #360]	@ (80033cc <HAL_ADC_Start+0x188>)
 8003262:	e000      	b.n	8003266 <HAL_ADC_Start+0x22>
 8003264:	4b5a      	ldr	r3, [pc, #360]	@ (80033d0 <HAL_ADC_Start+0x18c>)
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fcc8 	bl	8002bfc <LL_ADC_GetMultimode>
 800326c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fda2 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	f040 809a 	bne.w	80033b4 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_ADC_Start+0x4a>
 800328a:	2302      	movs	r3, #2
 800328c:	e095      	b.n	80033ba <HAL_ADC_Start+0x176>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 ff64 	bl	8004164 <ADC_Enable>
 800329c:	4603      	mov	r3, r0
 800329e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 8081 	bne.w	80033aa <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80032ac:	4b49      	ldr	r3, [pc, #292]	@ (80033d4 <HAL_ADC_Start+0x190>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a42      	ldr	r2, [pc, #264]	@ (80033c8 <HAL_ADC_Start+0x184>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d002      	beq.n	80032c8 <HAL_ADC_Start+0x84>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	e000      	b.n	80032ca <HAL_ADC_Start+0x86>
 80032c8:	4b3e      	ldr	r3, [pc, #248]	@ (80033c4 <HAL_ADC_Start+0x180>)
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d002      	beq.n	80032d8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d105      	bne.n	80032e4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032f0:	d106      	bne.n	8003300 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032f6:	f023 0206 	bic.w	r2, r3, #6
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	665a      	str	r2, [r3, #100]	@ 0x64
 80032fe:	e002      	b.n	8003306 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	221c      	movs	r2, #28
 800330c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a2b      	ldr	r2, [pc, #172]	@ (80033c8 <HAL_ADC_Start+0x184>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d002      	beq.n	8003326 <HAL_ADC_Start+0xe2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	e000      	b.n	8003328 <HAL_ADC_Start+0xe4>
 8003326:	4b27      	ldr	r3, [pc, #156]	@ (80033c4 <HAL_ADC_Start+0x180>)
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	4293      	cmp	r3, r2
 800332e:	d008      	beq.n	8003342 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b05      	cmp	r3, #5
 800333a:	d002      	beq.n	8003342 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b09      	cmp	r3, #9
 8003340:	d114      	bne.n	800336c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d007      	beq.n	8003360 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003354:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003358:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff fd01 	bl	8002d6c <LL_ADC_REG_StartConversion>
 800336a:	e025      	b.n	80033b8 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003370:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a12      	ldr	r2, [pc, #72]	@ (80033c8 <HAL_ADC_Start+0x184>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d002      	beq.n	8003388 <HAL_ADC_Start+0x144>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	e000      	b.n	800338a <HAL_ADC_Start+0x146>
 8003388:	4b0e      	ldr	r3, [pc, #56]	@ (80033c4 <HAL_ADC_Start+0x180>)
 800338a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00f      	beq.n	80033b8 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800339c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	661a      	str	r2, [r3, #96]	@ 0x60
 80033a8:	e006      	b.n	80033b8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80033b2:	e001      	b.n	80033b8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033b4:	2302      	movs	r3, #2
 80033b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40022000 	.word	0x40022000
 80033c8:	40022100 	.word	0x40022100
 80033cc:	40022300 	.word	0x40022300
 80033d0:	58026300 	.word	0x58026300
 80033d4:	fffff0fe 	.word	0xfffff0fe

080033d8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_ADC_Stop+0x16>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e021      	b.n	8003432 <HAL_ADC_Stop+0x5a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80033f6:	2103      	movs	r1, #3
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fdf7 	bl	8003fec <ADC_ConversionStop>
 80033fe:	4603      	mov	r3, r0
 8003400:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10f      	bne.n	8003428 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 ff35 	bl	8004278 <ADC_Disable>
 800340e:	4603      	mov	r3, r0
 8003410:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d107      	bne.n	8003428 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800341c:	4b07      	ldr	r3, [pc, #28]	@ (800343c <HAL_ADC_Stop+0x64>)
 800341e:	4013      	ands	r3, r2
 8003420:	f043 0201 	orr.w	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003430:	7bfb      	ldrb	r3, [r7, #15]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	ffffeefe 	.word	0xffffeefe

08003440 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a72      	ldr	r2, [pc, #456]	@ (8003618 <HAL_ADC_PollForConversion+0x1d8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d004      	beq.n	800345e <HAL_ADC_PollForConversion+0x1e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a70      	ldr	r2, [pc, #448]	@ (800361c <HAL_ADC_PollForConversion+0x1dc>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_ADC_PollForConversion+0x22>
 800345e:	4b70      	ldr	r3, [pc, #448]	@ (8003620 <HAL_ADC_PollForConversion+0x1e0>)
 8003460:	e000      	b.n	8003464 <HAL_ADC_PollForConversion+0x24>
 8003462:	4b70      	ldr	r3, [pc, #448]	@ (8003624 <HAL_ADC_PollForConversion+0x1e4>)
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fbc9 	bl	8002bfc <LL_ADC_GetMultimode>
 800346a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	2b08      	cmp	r3, #8
 8003472:	d102      	bne.n	800347a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003474:	2308      	movs	r3, #8
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	e037      	b.n	80034ea <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2b05      	cmp	r3, #5
 8003484:	d002      	beq.n	800348c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b09      	cmp	r3, #9
 800348a:	d111      	bne.n	80034b0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d007      	beq.n	80034aa <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800349e:	f043 0220 	orr.w	r2, r3, #32
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e0b1      	b.n	800360e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80034aa:	2304      	movs	r3, #4
 80034ac:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80034ae:	e01c      	b.n	80034ea <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a58      	ldr	r2, [pc, #352]	@ (8003618 <HAL_ADC_PollForConversion+0x1d8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d004      	beq.n	80034c4 <HAL_ADC_PollForConversion+0x84>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a57      	ldr	r2, [pc, #348]	@ (800361c <HAL_ADC_PollForConversion+0x1dc>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d101      	bne.n	80034c8 <HAL_ADC_PollForConversion+0x88>
 80034c4:	4b56      	ldr	r3, [pc, #344]	@ (8003620 <HAL_ADC_PollForConversion+0x1e0>)
 80034c6:	e000      	b.n	80034ca <HAL_ADC_PollForConversion+0x8a>
 80034c8:	4b56      	ldr	r3, [pc, #344]	@ (8003624 <HAL_ADC_PollForConversion+0x1e4>)
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fba4 	bl	8002c18 <LL_ADC_GetMultiDMATransfer>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d007      	beq.n	80034e6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034da:	f043 0220 	orr.w	r2, r3, #32
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e093      	b.n	800360e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80034e6:	2304      	movs	r3, #4
 80034e8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80034ea:	f7ff f971 	bl	80027d0 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80034f0:	e021      	b.n	8003536 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f8:	d01d      	beq.n	8003536 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80034fa:	f7ff f969 	bl	80027d0 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d302      	bcc.n	8003510 <HAL_ADC_PollForConversion+0xd0>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d112      	bne.n	8003536 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	4013      	ands	r3, r2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10b      	bne.n	8003536 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003522:	f043 0204 	orr.w	r2, r3, #4
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e06b      	b.n	800360e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0d6      	beq.n	80034f2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003548:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff faa7 	bl	8002aa8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d01c      	beq.n	800359a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	7e5b      	ldrb	r3, [r3, #25]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d118      	bne.n	800359a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b08      	cmp	r3, #8
 8003574:	d111      	bne.n	800359a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800357a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003586:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d105      	bne.n	800359a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003592:	f043 0201 	orr.w	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1f      	ldr	r2, [pc, #124]	@ (800361c <HAL_ADC_PollForConversion+0x1dc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d002      	beq.n	80035aa <HAL_ADC_PollForConversion+0x16a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	e000      	b.n	80035ac <HAL_ADC_PollForConversion+0x16c>
 80035aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003618 <HAL_ADC_PollForConversion+0x1d8>)
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d008      	beq.n	80035c6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b05      	cmp	r3, #5
 80035be:	d002      	beq.n	80035c6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b09      	cmp	r3, #9
 80035c4:	d104      	bne.n	80035d0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	e00c      	b.n	80035ea <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a11      	ldr	r2, [pc, #68]	@ (800361c <HAL_ADC_PollForConversion+0x1dc>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d002      	beq.n	80035e0 <HAL_ADC_PollForConversion+0x1a0>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	e000      	b.n	80035e2 <HAL_ADC_PollForConversion+0x1a2>
 80035e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003618 <HAL_ADC_PollForConversion+0x1d8>)
 80035e2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d104      	bne.n	80035fa <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2208      	movs	r2, #8
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e008      	b.n	800360c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d103      	bne.n	800360c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	220c      	movs	r2, #12
 800360a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40022000 	.word	0x40022000
 800361c:	40022100 	.word	0x40022100
 8003620:	40022300 	.word	0x40022300
 8003624:	58026300 	.word	0x58026300

08003628 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b0a5      	sub	sp, #148	@ 0x94
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800365e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4aa4      	ldr	r2, [pc, #656]	@ (80038f8 <HAL_ADC_ConfigChannel+0x2b4>)
 8003666:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800366e:	2b01      	cmp	r3, #1
 8003670:	d102      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x34>
 8003672:	2302      	movs	r3, #2
 8003674:	f000 bca2 	b.w	8003fbc <HAL_ADC_ConfigChannel+0x978>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fb99 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	f040 8486 	bne.w	8003f9e <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	db31      	blt.n	80036fe <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a97      	ldr	r2, [pc, #604]	@ (80038fc <HAL_ADC_ConfigChannel+0x2b8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d02c      	beq.n	80036fe <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d108      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x7e>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	2201      	movs	r2, #1
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	e016      	b.n	80036f0 <HAL_ADC_ConfigChannel+0xac>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80036d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036d2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80036d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 80036da:	2320      	movs	r3, #32
 80036dc:	e003      	b.n	80036e6 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 80036de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036e0:	fab3 f383 	clz	r3, r3
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	f003 031f 	and.w	r3, r3, #31
 80036ea:	2201      	movs	r2, #1
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	69d1      	ldr	r1, [r2, #28]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	430b      	orrs	r3, r1
 80036fc:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	6859      	ldr	r1, [r3, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	f7ff f9df 	bl	8002ace <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fb51 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 800371a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fb72 	bl	8002e0c <LL_ADC_INJ_IsConversionOngoing>
 8003728:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800372c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003730:	2b00      	cmp	r3, #0
 8003732:	f040 824a 	bne.w	8003bca <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003736:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800373a:	2b00      	cmp	r3, #0
 800373c:	f040 8245 	bne.w	8003bca <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	6819      	ldr	r1, [r3, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	461a      	mov	r2, r3
 800374e:	f7ff f9ea 	bl	8002b26 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a69      	ldr	r2, [pc, #420]	@ (80038fc <HAL_ADC_ConfigChannel+0x2b8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d10d      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	08db      	lsrs	r3, r3, #3
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003776:	e032      	b.n	80037de <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003778:	4b61      	ldr	r3, [pc, #388]	@ (8003900 <HAL_ADC_ConfigChannel+0x2bc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003780:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003784:	d10b      	bne.n	800379e <HAL_ADC_ConfigChannel+0x15a>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	089b      	lsrs	r3, r3, #2
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	e01d      	b.n	80037da <HAL_ADC_ConfigChannel+0x196>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10b      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x180>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	695a      	ldr	r2, [r3, #20]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	089b      	lsrs	r3, r3, #2
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	e00a      	b.n	80037da <HAL_ADC_ConfigChannel+0x196>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	695a      	ldr	r2, [r3, #20]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	089b      	lsrs	r3, r3, #2
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d048      	beq.n	8003878 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6919      	ldr	r1, [r3, #16]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037f6:	f7ff f865 	bl	80028c4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a3f      	ldr	r2, [pc, #252]	@ (80038fc <HAL_ADC_ConfigChannel+0x2b8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d119      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	6919      	ldr	r1, [r3, #16]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	461a      	mov	r2, r3
 8003812:	f7ff f8fd 	bl	8002a10 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6919      	ldr	r1, [r3, #16]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d102      	bne.n	800382e <HAL_ADC_ConfigChannel+0x1ea>
 8003828:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800382c:	e000      	b.n	8003830 <HAL_ADC_ConfigChannel+0x1ec>
 800382e:	2300      	movs	r3, #0
 8003830:	461a      	mov	r2, r3
 8003832:	f7ff f8cb 	bl	80029cc <LL_ADC_SetOffsetSaturation>
 8003836:	e1c8      	b.n	8003bca <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6818      	ldr	r0, [r3, #0]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	6919      	ldr	r1, [r3, #16]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003846:	2b01      	cmp	r3, #1
 8003848:	d102      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x20c>
 800384a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800384e:	e000      	b.n	8003852 <HAL_ADC_ConfigChannel+0x20e>
 8003850:	2300      	movs	r3, #0
 8003852:	461a      	mov	r2, r3
 8003854:	f7ff f898 	bl	8002988 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	6919      	ldr	r1, [r3, #16]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	7e1b      	ldrb	r3, [r3, #24]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d102      	bne.n	800386e <HAL_ADC_ConfigChannel+0x22a>
 8003868:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800386c:	e000      	b.n	8003870 <HAL_ADC_ConfigChannel+0x22c>
 800386e:	2300      	movs	r3, #0
 8003870:	461a      	mov	r2, r3
 8003872:	f7ff f86f 	bl	8002954 <LL_ADC_SetDataRightShift>
 8003876:	e1a8      	b.n	8003bca <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1f      	ldr	r2, [pc, #124]	@ (80038fc <HAL_ADC_ConfigChannel+0x2b8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	f040 815b 	bne.w	8003b3a <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff f84c 	bl	8002928 <LL_ADC_GetOffsetChannel>
 8003890:	4603      	mov	r3, r0
 8003892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x26c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff f841 	bl	8002928 <LL_ADC_GetOffsetChannel>
 80038a6:	4603      	mov	r3, r0
 80038a8:	0e9b      	lsrs	r3, r3, #26
 80038aa:	f003 021f 	and.w	r2, r3, #31
 80038ae:	e017      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x29c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff f836 	bl	8002928 <LL_ADC_GetOffsetChannel>
 80038bc:	4603      	mov	r3, r0
 80038be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038c2:	fa93 f3a3 	rbit	r3, r3
 80038c6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80038c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80038cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80038d2:	2320      	movs	r3, #32
 80038d4:	e003      	b.n	80038de <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 80038d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038d8:	fab3 f383 	clz	r3, r3
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10b      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x2c0>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	0e9b      	lsrs	r3, r3, #26
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	e017      	b.n	8003928 <HAL_ADC_ConfigChannel+0x2e4>
 80038f8:	47ff0000 	.word	0x47ff0000
 80038fc:	58026000 	.word	0x58026000
 8003900:	5c001000 	.word	0x5c001000
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800390c:	fa93 f3a3 	rbit	r3, r3
 8003910:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003912:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003914:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003916:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800391c:	2320      	movs	r3, #32
 800391e:	e003      	b.n	8003928 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003920:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003922:	fab3 f383 	clz	r3, r3
 8003926:	b2db      	uxtb	r3, r3
 8003928:	429a      	cmp	r2, r3
 800392a:	d106      	bne.n	800393a <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2200      	movs	r2, #0
 8003932:	2100      	movs	r1, #0
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff f88d 	bl	8002a54 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2101      	movs	r1, #1
 8003940:	4618      	mov	r0, r3
 8003942:	f7fe fff1 	bl	8002928 <LL_ADC_GetOffsetChannel>
 8003946:	4603      	mov	r3, r0
 8003948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x322>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2101      	movs	r1, #1
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe ffe6 	bl	8002928 <LL_ADC_GetOffsetChannel>
 800395c:	4603      	mov	r3, r0
 800395e:	0e9b      	lsrs	r3, r3, #26
 8003960:	f003 021f 	and.w	r2, r3, #31
 8003964:	e017      	b.n	8003996 <HAL_ADC_ConfigChannel+0x352>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2101      	movs	r1, #1
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe ffdb 	bl	8002928 <LL_ADC_GetOffsetChannel>
 8003972:	4603      	mov	r3, r0
 8003974:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003978:	fa93 f3a3 	rbit	r3, r3
 800397c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800397e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003980:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8003988:	2320      	movs	r3, #32
 800398a:	e003      	b.n	8003994 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800398c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398e:	fab3 f383 	clz	r3, r3
 8003992:	b2db      	uxtb	r3, r3
 8003994:	461a      	mov	r2, r3
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d105      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x36a>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	0e9b      	lsrs	r3, r3, #26
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	e011      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x38e>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80039bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039be:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80039c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80039c6:	2320      	movs	r3, #32
 80039c8:	e003      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80039ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039cc:	fab3 f383 	clz	r3, r3
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d106      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2200      	movs	r2, #0
 80039dc:	2101      	movs	r1, #1
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff f838 	bl	8002a54 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2102      	movs	r1, #2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe ff9c 	bl	8002928 <LL_ADC_GetOffsetChannel>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10a      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x3cc>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2102      	movs	r1, #2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fe ff91 	bl	8002928 <LL_ADC_GetOffsetChannel>
 8003a06:	4603      	mov	r3, r0
 8003a08:	0e9b      	lsrs	r3, r3, #26
 8003a0a:	f003 021f 	and.w	r2, r3, #31
 8003a0e:	e017      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3fc>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2102      	movs	r1, #2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe ff86 	bl	8002928 <LL_ADC_GetOffsetChannel>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a22:	fa93 f3a3 	rbit	r3, r3
 8003a26:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003a32:	2320      	movs	r3, #32
 8003a34:	e003      	b.n	8003a3e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a38:	fab3 f383 	clz	r3, r3
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d105      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x414>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	0e9b      	lsrs	r3, r3, #26
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	e011      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x438>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a68:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003a70:	2320      	movs	r3, #32
 8003a72:	e003      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d106      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2200      	movs	r2, #0
 8003a86:	2102      	movs	r1, #2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe ffe3 	bl	8002a54 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2103      	movs	r1, #3
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fe ff47 	bl	8002928 <LL_ADC_GetOffsetChannel>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x476>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2103      	movs	r1, #3
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe ff3c 	bl	8002928 <LL_ADC_GetOffsetChannel>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	0e9b      	lsrs	r3, r3, #26
 8003ab4:	f003 021f 	and.w	r2, r3, #31
 8003ab8:	e017      	b.n	8003aea <HAL_ADC_ConfigChannel+0x4a6>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2103      	movs	r1, #3
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe ff31 	bl	8002928 <LL_ADC_GetOffsetChannel>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	fa93 f3a3 	rbit	r3, r3
 8003ad0:	61fb      	str	r3, [r7, #28]
  return result;
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003adc:	2320      	movs	r3, #32
 8003ade:	e003      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	fab3 f383 	clz	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	461a      	mov	r2, r3
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d105      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x4be>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	0e9b      	lsrs	r3, r3, #26
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	e011      	b.n	8003b26 <HAL_ADC_ConfigChannel+0x4e2>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	fa93 f3a3 	rbit	r3, r3
 8003b0e:	613b      	str	r3, [r7, #16]
  return result;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8003b1a:	2320      	movs	r3, #32
 8003b1c:	e003      	b.n	8003b26 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	fab3 f383 	clz	r3, r3
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d14f      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2103      	movs	r1, #3
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe ff8e 	bl	8002a54 <LL_ADC_SetOffsetState>
 8003b38:	e047      	b.n	8003bca <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b40:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	069b      	lsls	r3, r3, #26
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d107      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003b5c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b64:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	069b      	lsls	r3, r3, #26
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d107      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003b80:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	069b      	lsls	r3, r3, #26
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d107      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ba4:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	069b      	lsls	r3, r3, #26
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d107      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003bc8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff f8a6 	bl	8002d20 <LL_ADC_IsEnabled>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f040 81ea 	bne.w	8003fb0 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	6819      	ldr	r1, [r3, #0]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	461a      	mov	r2, r3
 8003bea:	f7fe ffc7 	bl	8002b7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	4a7a      	ldr	r2, [pc, #488]	@ (8003ddc <HAL_ADC_ConfigChannel+0x798>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	f040 80e0 	bne.w	8003dba <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4977      	ldr	r1, [pc, #476]	@ (8003de0 <HAL_ADC_ConfigChannel+0x79c>)
 8003c04:	428b      	cmp	r3, r1
 8003c06:	d147      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x654>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4975      	ldr	r1, [pc, #468]	@ (8003de4 <HAL_ADC_ConfigChannel+0x7a0>)
 8003c0e:	428b      	cmp	r3, r1
 8003c10:	d040      	beq.n	8003c94 <HAL_ADC_ConfigChannel+0x650>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4974      	ldr	r1, [pc, #464]	@ (8003de8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003c18:	428b      	cmp	r3, r1
 8003c1a:	d039      	beq.n	8003c90 <HAL_ADC_ConfigChannel+0x64c>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4972      	ldr	r1, [pc, #456]	@ (8003dec <HAL_ADC_ConfigChannel+0x7a8>)
 8003c22:	428b      	cmp	r3, r1
 8003c24:	d032      	beq.n	8003c8c <HAL_ADC_ConfigChannel+0x648>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4971      	ldr	r1, [pc, #452]	@ (8003df0 <HAL_ADC_ConfigChannel+0x7ac>)
 8003c2c:	428b      	cmp	r3, r1
 8003c2e:	d02b      	beq.n	8003c88 <HAL_ADC_ConfigChannel+0x644>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	496f      	ldr	r1, [pc, #444]	@ (8003df4 <HAL_ADC_ConfigChannel+0x7b0>)
 8003c36:	428b      	cmp	r3, r1
 8003c38:	d024      	beq.n	8003c84 <HAL_ADC_ConfigChannel+0x640>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	496e      	ldr	r1, [pc, #440]	@ (8003df8 <HAL_ADC_ConfigChannel+0x7b4>)
 8003c40:	428b      	cmp	r3, r1
 8003c42:	d01d      	beq.n	8003c80 <HAL_ADC_ConfigChannel+0x63c>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	496c      	ldr	r1, [pc, #432]	@ (8003dfc <HAL_ADC_ConfigChannel+0x7b8>)
 8003c4a:	428b      	cmp	r3, r1
 8003c4c:	d016      	beq.n	8003c7c <HAL_ADC_ConfigChannel+0x638>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	496b      	ldr	r1, [pc, #428]	@ (8003e00 <HAL_ADC_ConfigChannel+0x7bc>)
 8003c54:	428b      	cmp	r3, r1
 8003c56:	d00f      	beq.n	8003c78 <HAL_ADC_ConfigChannel+0x634>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4969      	ldr	r1, [pc, #420]	@ (8003e04 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c5e:	428b      	cmp	r3, r1
 8003c60:	d008      	beq.n	8003c74 <HAL_ADC_ConfigChannel+0x630>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4968      	ldr	r1, [pc, #416]	@ (8003e08 <HAL_ADC_ConfigChannel+0x7c4>)
 8003c68:	428b      	cmp	r3, r1
 8003c6a:	d101      	bne.n	8003c70 <HAL_ADC_ConfigChannel+0x62c>
 8003c6c:	4b67      	ldr	r3, [pc, #412]	@ (8003e0c <HAL_ADC_ConfigChannel+0x7c8>)
 8003c6e:	e0a0      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003c70:	2300      	movs	r3, #0
 8003c72:	e09e      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003c74:	4b66      	ldr	r3, [pc, #408]	@ (8003e10 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c76:	e09c      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003c78:	4b66      	ldr	r3, [pc, #408]	@ (8003e14 <HAL_ADC_ConfigChannel+0x7d0>)
 8003c7a:	e09a      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003c7c:	4b60      	ldr	r3, [pc, #384]	@ (8003e00 <HAL_ADC_ConfigChannel+0x7bc>)
 8003c7e:	e098      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003c80:	4b5e      	ldr	r3, [pc, #376]	@ (8003dfc <HAL_ADC_ConfigChannel+0x7b8>)
 8003c82:	e096      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003c84:	4b64      	ldr	r3, [pc, #400]	@ (8003e18 <HAL_ADC_ConfigChannel+0x7d4>)
 8003c86:	e094      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003c88:	4b64      	ldr	r3, [pc, #400]	@ (8003e1c <HAL_ADC_ConfigChannel+0x7d8>)
 8003c8a:	e092      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003c8c:	4b64      	ldr	r3, [pc, #400]	@ (8003e20 <HAL_ADC_ConfigChannel+0x7dc>)
 8003c8e:	e090      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003c90:	4b64      	ldr	r3, [pc, #400]	@ (8003e24 <HAL_ADC_ConfigChannel+0x7e0>)
 8003c92:	e08e      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003c94:	2301      	movs	r3, #1
 8003c96:	e08c      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4962      	ldr	r1, [pc, #392]	@ (8003e28 <HAL_ADC_ConfigChannel+0x7e4>)
 8003c9e:	428b      	cmp	r3, r1
 8003ca0:	d140      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x6e0>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	494f      	ldr	r1, [pc, #316]	@ (8003de4 <HAL_ADC_ConfigChannel+0x7a0>)
 8003ca8:	428b      	cmp	r3, r1
 8003caa:	d039      	beq.n	8003d20 <HAL_ADC_ConfigChannel+0x6dc>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	494d      	ldr	r1, [pc, #308]	@ (8003de8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003cb2:	428b      	cmp	r3, r1
 8003cb4:	d032      	beq.n	8003d1c <HAL_ADC_ConfigChannel+0x6d8>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	494c      	ldr	r1, [pc, #304]	@ (8003dec <HAL_ADC_ConfigChannel+0x7a8>)
 8003cbc:	428b      	cmp	r3, r1
 8003cbe:	d02b      	beq.n	8003d18 <HAL_ADC_ConfigChannel+0x6d4>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	494a      	ldr	r1, [pc, #296]	@ (8003df0 <HAL_ADC_ConfigChannel+0x7ac>)
 8003cc6:	428b      	cmp	r3, r1
 8003cc8:	d024      	beq.n	8003d14 <HAL_ADC_ConfigChannel+0x6d0>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4949      	ldr	r1, [pc, #292]	@ (8003df4 <HAL_ADC_ConfigChannel+0x7b0>)
 8003cd0:	428b      	cmp	r3, r1
 8003cd2:	d01d      	beq.n	8003d10 <HAL_ADC_ConfigChannel+0x6cc>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4947      	ldr	r1, [pc, #284]	@ (8003df8 <HAL_ADC_ConfigChannel+0x7b4>)
 8003cda:	428b      	cmp	r3, r1
 8003cdc:	d016      	beq.n	8003d0c <HAL_ADC_ConfigChannel+0x6c8>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4946      	ldr	r1, [pc, #280]	@ (8003dfc <HAL_ADC_ConfigChannel+0x7b8>)
 8003ce4:	428b      	cmp	r3, r1
 8003ce6:	d00f      	beq.n	8003d08 <HAL_ADC_ConfigChannel+0x6c4>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4944      	ldr	r1, [pc, #272]	@ (8003e00 <HAL_ADC_ConfigChannel+0x7bc>)
 8003cee:	428b      	cmp	r3, r1
 8003cf0:	d008      	beq.n	8003d04 <HAL_ADC_ConfigChannel+0x6c0>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4944      	ldr	r1, [pc, #272]	@ (8003e08 <HAL_ADC_ConfigChannel+0x7c4>)
 8003cf8:	428b      	cmp	r3, r1
 8003cfa:	d101      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x6bc>
 8003cfc:	4b43      	ldr	r3, [pc, #268]	@ (8003e0c <HAL_ADC_ConfigChannel+0x7c8>)
 8003cfe:	e058      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003d00:	2300      	movs	r3, #0
 8003d02:	e056      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003d04:	4b43      	ldr	r3, [pc, #268]	@ (8003e14 <HAL_ADC_ConfigChannel+0x7d0>)
 8003d06:	e054      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003d08:	4b3d      	ldr	r3, [pc, #244]	@ (8003e00 <HAL_ADC_ConfigChannel+0x7bc>)
 8003d0a:	e052      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8003dfc <HAL_ADC_ConfigChannel+0x7b8>)
 8003d0e:	e050      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003d10:	4b41      	ldr	r3, [pc, #260]	@ (8003e18 <HAL_ADC_ConfigChannel+0x7d4>)
 8003d12:	e04e      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003d14:	4b41      	ldr	r3, [pc, #260]	@ (8003e1c <HAL_ADC_ConfigChannel+0x7d8>)
 8003d16:	e04c      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003d18:	4b41      	ldr	r3, [pc, #260]	@ (8003e20 <HAL_ADC_ConfigChannel+0x7dc>)
 8003d1a:	e04a      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003d1c:	4b41      	ldr	r3, [pc, #260]	@ (8003e24 <HAL_ADC_ConfigChannel+0x7e0>)
 8003d1e:	e048      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e046      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4940      	ldr	r1, [pc, #256]	@ (8003e2c <HAL_ADC_ConfigChannel+0x7e8>)
 8003d2a:	428b      	cmp	r3, r1
 8003d2c:	d140      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x76c>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	492c      	ldr	r1, [pc, #176]	@ (8003de4 <HAL_ADC_ConfigChannel+0x7a0>)
 8003d34:	428b      	cmp	r3, r1
 8003d36:	d039      	beq.n	8003dac <HAL_ADC_ConfigChannel+0x768>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	492a      	ldr	r1, [pc, #168]	@ (8003de8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003d3e:	428b      	cmp	r3, r1
 8003d40:	d032      	beq.n	8003da8 <HAL_ADC_ConfigChannel+0x764>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4929      	ldr	r1, [pc, #164]	@ (8003dec <HAL_ADC_ConfigChannel+0x7a8>)
 8003d48:	428b      	cmp	r3, r1
 8003d4a:	d02b      	beq.n	8003da4 <HAL_ADC_ConfigChannel+0x760>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4927      	ldr	r1, [pc, #156]	@ (8003df0 <HAL_ADC_ConfigChannel+0x7ac>)
 8003d52:	428b      	cmp	r3, r1
 8003d54:	d024      	beq.n	8003da0 <HAL_ADC_ConfigChannel+0x75c>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4926      	ldr	r1, [pc, #152]	@ (8003df4 <HAL_ADC_ConfigChannel+0x7b0>)
 8003d5c:	428b      	cmp	r3, r1
 8003d5e:	d01d      	beq.n	8003d9c <HAL_ADC_ConfigChannel+0x758>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4924      	ldr	r1, [pc, #144]	@ (8003df8 <HAL_ADC_ConfigChannel+0x7b4>)
 8003d66:	428b      	cmp	r3, r1
 8003d68:	d016      	beq.n	8003d98 <HAL_ADC_ConfigChannel+0x754>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4923      	ldr	r1, [pc, #140]	@ (8003dfc <HAL_ADC_ConfigChannel+0x7b8>)
 8003d70:	428b      	cmp	r3, r1
 8003d72:	d00f      	beq.n	8003d94 <HAL_ADC_ConfigChannel+0x750>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4926      	ldr	r1, [pc, #152]	@ (8003e14 <HAL_ADC_ConfigChannel+0x7d0>)
 8003d7a:	428b      	cmp	r3, r1
 8003d7c:	d008      	beq.n	8003d90 <HAL_ADC_ConfigChannel+0x74c>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	492b      	ldr	r1, [pc, #172]	@ (8003e30 <HAL_ADC_ConfigChannel+0x7ec>)
 8003d84:	428b      	cmp	r3, r1
 8003d86:	d101      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x748>
 8003d88:	4b2a      	ldr	r3, [pc, #168]	@ (8003e34 <HAL_ADC_ConfigChannel+0x7f0>)
 8003d8a:	e012      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e010      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003d90:	4b27      	ldr	r3, [pc, #156]	@ (8003e30 <HAL_ADC_ConfigChannel+0x7ec>)
 8003d92:	e00e      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003d94:	4b1a      	ldr	r3, [pc, #104]	@ (8003e00 <HAL_ADC_ConfigChannel+0x7bc>)
 8003d96:	e00c      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <HAL_ADC_ConfigChannel+0x7b8>)
 8003d9a:	e00a      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8003e18 <HAL_ADC_ConfigChannel+0x7d4>)
 8003d9e:	e008      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003da0:	4b1e      	ldr	r3, [pc, #120]	@ (8003e1c <HAL_ADC_ConfigChannel+0x7d8>)
 8003da2:	e006      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003da4:	4b1e      	ldr	r3, [pc, #120]	@ (8003e20 <HAL_ADC_ConfigChannel+0x7dc>)
 8003da6:	e004      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003da8:	4b1e      	ldr	r3, [pc, #120]	@ (8003e24 <HAL_ADC_ConfigChannel+0x7e0>)
 8003daa:	e002      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x76e>
 8003db0:	2300      	movs	r3, #0
 8003db2:	4619      	mov	r1, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	f7fe fd4b 	bl	8002850 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f280 80f6 	bge.w	8003fb0 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a05      	ldr	r2, [pc, #20]	@ (8003de0 <HAL_ADC_ConfigChannel+0x79c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d004      	beq.n	8003dd8 <HAL_ADC_ConfigChannel+0x794>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a15      	ldr	r2, [pc, #84]	@ (8003e28 <HAL_ADC_ConfigChannel+0x7e4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d131      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x7f8>
 8003dd8:	4b17      	ldr	r3, [pc, #92]	@ (8003e38 <HAL_ADC_ConfigChannel+0x7f4>)
 8003dda:	e030      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x7fa>
 8003ddc:	47ff0000 	.word	0x47ff0000
 8003de0:	40022000 	.word	0x40022000
 8003de4:	04300002 	.word	0x04300002
 8003de8:	08600004 	.word	0x08600004
 8003dec:	0c900008 	.word	0x0c900008
 8003df0:	10c00010 	.word	0x10c00010
 8003df4:	14f00020 	.word	0x14f00020
 8003df8:	2a000400 	.word	0x2a000400
 8003dfc:	2e300800 	.word	0x2e300800
 8003e00:	32601000 	.word	0x32601000
 8003e04:	43210000 	.word	0x43210000
 8003e08:	4b840000 	.word	0x4b840000
 8003e0c:	4fb80000 	.word	0x4fb80000
 8003e10:	47520000 	.word	0x47520000
 8003e14:	36902000 	.word	0x36902000
 8003e18:	25b00200 	.word	0x25b00200
 8003e1c:	21800100 	.word	0x21800100
 8003e20:	1d500080 	.word	0x1d500080
 8003e24:	19200040 	.word	0x19200040
 8003e28:	40022100 	.word	0x40022100
 8003e2c:	58026000 	.word	0x58026000
 8003e30:	3ac04000 	.word	0x3ac04000
 8003e34:	3ef08000 	.word	0x3ef08000
 8003e38:	40022300 	.word	0x40022300
 8003e3c:	4b61      	ldr	r3, [pc, #388]	@ (8003fc4 <HAL_ADC_ConfigChannel+0x980>)
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe fcf8 	bl	8002834 <LL_ADC_GetCommonPathInternalCh>
 8003e44:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a5f      	ldr	r2, [pc, #380]	@ (8003fc8 <HAL_ADC_ConfigChannel+0x984>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d004      	beq.n	8003e5a <HAL_ADC_ConfigChannel+0x816>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a5d      	ldr	r2, [pc, #372]	@ (8003fcc <HAL_ADC_ConfigChannel+0x988>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d10e      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x834>
 8003e5a:	485b      	ldr	r0, [pc, #364]	@ (8003fc8 <HAL_ADC_ConfigChannel+0x984>)
 8003e5c:	f7fe ff60 	bl	8002d20 <LL_ADC_IsEnabled>
 8003e60:	4604      	mov	r4, r0
 8003e62:	485a      	ldr	r0, [pc, #360]	@ (8003fcc <HAL_ADC_ConfigChannel+0x988>)
 8003e64:	f7fe ff5c 	bl	8002d20 <LL_ADC_IsEnabled>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	4323      	orrs	r3, r4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e008      	b.n	8003e8a <HAL_ADC_ConfigChannel+0x846>
 8003e78:	4855      	ldr	r0, [pc, #340]	@ (8003fd0 <HAL_ADC_ConfigChannel+0x98c>)
 8003e7a:	f7fe ff51 	bl	8002d20 <LL_ADC_IsEnabled>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bf0c      	ite	eq
 8003e84:	2301      	moveq	r3, #1
 8003e86:	2300      	movne	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d07d      	beq.n	8003f8a <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a50      	ldr	r2, [pc, #320]	@ (8003fd4 <HAL_ADC_ConfigChannel+0x990>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d130      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x8b6>
 8003e98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d12b      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a4a      	ldr	r2, [pc, #296]	@ (8003fd0 <HAL_ADC_ConfigChannel+0x98c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	f040 8081 	bne.w	8003fb0 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a45      	ldr	r2, [pc, #276]	@ (8003fc8 <HAL_ADC_ConfigChannel+0x984>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d004      	beq.n	8003ec2 <HAL_ADC_ConfigChannel+0x87e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a43      	ldr	r2, [pc, #268]	@ (8003fcc <HAL_ADC_ConfigChannel+0x988>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d101      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x882>
 8003ec2:	4a45      	ldr	r2, [pc, #276]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x994>)
 8003ec4:	e000      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x884>
 8003ec6:	4a3f      	ldr	r2, [pc, #252]	@ (8003fc4 <HAL_ADC_ConfigChannel+0x980>)
 8003ec8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003eca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	f7fe fc9c 	bl	800280e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ed6:	4b41      	ldr	r3, [pc, #260]	@ (8003fdc <HAL_ADC_ConfigChannel+0x998>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	099b      	lsrs	r3, r3, #6
 8003edc:	4a40      	ldr	r2, [pc, #256]	@ (8003fe0 <HAL_ADC_ConfigChannel+0x99c>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	099b      	lsrs	r3, r3, #6
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003eea:	e002      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f9      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ef8:	e05a      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a39      	ldr	r2, [pc, #228]	@ (8003fe4 <HAL_ADC_ConfigChannel+0x9a0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d11e      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x8fe>
 8003f04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d119      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a2f      	ldr	r2, [pc, #188]	@ (8003fd0 <HAL_ADC_ConfigChannel+0x98c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d14b      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8003fc8 <HAL_ADC_ConfigChannel+0x984>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d004      	beq.n	8003f2c <HAL_ADC_ConfigChannel+0x8e8>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a29      	ldr	r2, [pc, #164]	@ (8003fcc <HAL_ADC_ConfigChannel+0x988>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d101      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x8ec>
 8003f2c:	4a2a      	ldr	r2, [pc, #168]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x994>)
 8003f2e:	e000      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x8ee>
 8003f30:	4a24      	ldr	r2, [pc, #144]	@ (8003fc4 <HAL_ADC_ConfigChannel+0x980>)
 8003f32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	f7fe fc67 	bl	800280e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f40:	e036      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a28      	ldr	r2, [pc, #160]	@ (8003fe8 <HAL_ADC_ConfigChannel+0x9a4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d131      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x96c>
 8003f4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d12c      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd0 <HAL_ADC_ConfigChannel+0x98c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d127      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a18      	ldr	r2, [pc, #96]	@ (8003fc8 <HAL_ADC_ConfigChannel+0x984>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <HAL_ADC_ConfigChannel+0x930>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a17      	ldr	r2, [pc, #92]	@ (8003fcc <HAL_ADC_ConfigChannel+0x988>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d101      	bne.n	8003f78 <HAL_ADC_ConfigChannel+0x934>
 8003f74:	4a18      	ldr	r2, [pc, #96]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x994>)
 8003f76:	e000      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x936>
 8003f78:	4a12      	ldr	r2, [pc, #72]	@ (8003fc4 <HAL_ADC_ConfigChannel+0x980>)
 8003f7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f80:	4619      	mov	r1, r3
 8003f82:	4610      	mov	r0, r2
 8003f84:	f7fe fc43 	bl	800280e <LL_ADC_SetCommonPathInternalCh>
 8003f88:	e012      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f8e:	f043 0220 	orr.w	r2, r3, #32
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8003f9c:	e008      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa2:	f043 0220 	orr.w	r2, r3, #32
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003fb8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3794      	adds	r7, #148	@ 0x94
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd90      	pop	{r4, r7, pc}
 8003fc4:	58026300 	.word	0x58026300
 8003fc8:	40022000 	.word	0x40022000
 8003fcc:	40022100 	.word	0x40022100
 8003fd0:	58026000 	.word	0x58026000
 8003fd4:	c7520000 	.word	0xc7520000
 8003fd8:	40022300 	.word	0x40022300
 8003fdc:	24000008 	.word	0x24000008
 8003fe0:	053e2d63 	.word	0x053e2d63
 8003fe4:	c3210000 	.word	0xc3210000
 8003fe8:	cb840000 	.word	0xcb840000

08003fec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe feda 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 8004008:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe fefc 	bl	8002e0c <LL_ADC_INJ_IsConversionOngoing>
 8004014:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d103      	bne.n	8004024 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 8098 	beq.w	8004154 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d02a      	beq.n	8004088 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	7e5b      	ldrb	r3, [r3, #25]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d126      	bne.n	8004088 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	7e1b      	ldrb	r3, [r3, #24]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d122      	bne.n	8004088 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004042:	2301      	movs	r3, #1
 8004044:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004046:	e014      	b.n	8004072 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	4a45      	ldr	r2, [pc, #276]	@ (8004160 <ADC_ConversionStop+0x174>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d90d      	bls.n	800406c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004054:	f043 0210 	orr.w	r2, r3, #16
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004060:	f043 0201 	orr.w	r2, r3, #1
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e074      	b.n	8004156 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	3301      	adds	r3, #1
 8004070:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407c:	2b40      	cmp	r3, #64	@ 0x40
 800407e:	d1e3      	bne.n	8004048 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2240      	movs	r2, #64	@ 0x40
 8004086:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d014      	beq.n	80040b8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fe92 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00c      	beq.n	80040b8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fe fe4f 	bl	8002d46 <LL_ADC_IsDisableOngoing>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe fe6e 	bl	8002d94 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d014      	beq.n	80040e8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe fea2 	bl	8002e0c <LL_ADC_INJ_IsConversionOngoing>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00c      	beq.n	80040e8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fe fe37 	bl	8002d46 <LL_ADC_IsDisableOngoing>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d104      	bne.n	80040e8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe fe7e 	bl	8002de4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d005      	beq.n	80040fa <ADC_ConversionStop+0x10e>
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d105      	bne.n	8004100 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80040f4:	230c      	movs	r3, #12
 80040f6:	617b      	str	r3, [r7, #20]
        break;
 80040f8:	e005      	b.n	8004106 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80040fa:	2308      	movs	r3, #8
 80040fc:	617b      	str	r3, [r7, #20]
        break;
 80040fe:	e002      	b.n	8004106 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004100:	2304      	movs	r3, #4
 8004102:	617b      	str	r3, [r7, #20]
        break;
 8004104:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004106:	f7fe fb63 	bl	80027d0 <HAL_GetTick>
 800410a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800410c:	e01b      	b.n	8004146 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800410e:	f7fe fb5f 	bl	80027d0 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b05      	cmp	r3, #5
 800411a:	d914      	bls.n	8004146 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	4013      	ands	r3, r2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00d      	beq.n	8004146 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800412e:	f043 0210 	orr.w	r2, r3, #16
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800413a:	f043 0201 	orr.w	r2, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e007      	b.n	8004156 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	4013      	ands	r3, r2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1dc      	bne.n	800410e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	000cdbff 	.word	0x000cdbff

08004164 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f7fe fdd5 	bl	8002d20 <LL_ADC_IsEnabled>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d16e      	bne.n	800425a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	4b38      	ldr	r3, [pc, #224]	@ (8004264 <ADC_Enable+0x100>)
 8004184:	4013      	ands	r3, r2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00d      	beq.n	80041a6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800418e:	f043 0210 	orr.w	r2, r3, #16
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800419a:	f043 0201 	orr.w	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e05a      	b.n	800425c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe fd90 	bl	8002cd0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80041b0:	f7fe fb0e 	bl	80027d0 <HAL_GetTick>
 80041b4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a2b      	ldr	r2, [pc, #172]	@ (8004268 <ADC_Enable+0x104>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d004      	beq.n	80041ca <ADC_Enable+0x66>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a29      	ldr	r2, [pc, #164]	@ (800426c <ADC_Enable+0x108>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d101      	bne.n	80041ce <ADC_Enable+0x6a>
 80041ca:	4b29      	ldr	r3, [pc, #164]	@ (8004270 <ADC_Enable+0x10c>)
 80041cc:	e000      	b.n	80041d0 <ADC_Enable+0x6c>
 80041ce:	4b29      	ldr	r3, [pc, #164]	@ (8004274 <ADC_Enable+0x110>)
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fe fd13 	bl	8002bfc <LL_ADC_GetMultimode>
 80041d6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a23      	ldr	r2, [pc, #140]	@ (800426c <ADC_Enable+0x108>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d002      	beq.n	80041e8 <ADC_Enable+0x84>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	e000      	b.n	80041ea <ADC_Enable+0x86>
 80041e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004268 <ADC_Enable+0x104>)
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6812      	ldr	r2, [r2, #0]
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d02c      	beq.n	800424c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d130      	bne.n	800425a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041f8:	e028      	b.n	800424c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe fd8e 	bl	8002d20 <LL_ADC_IsEnabled>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d104      	bne.n	8004214 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe fd5e 	bl	8002cd0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004214:	f7fe fadc 	bl	80027d0 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d914      	bls.n	800424c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b01      	cmp	r3, #1
 800422e:	d00d      	beq.n	800424c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004234:	f043 0210 	orr.w	r2, r3, #16
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004240:	f043 0201 	orr.w	r2, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e007      	b.n	800425c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d1cf      	bne.n	80041fa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	8000003f 	.word	0x8000003f
 8004268:	40022000 	.word	0x40022000
 800426c:	40022100 	.word	0x40022100
 8004270:	40022300 	.word	0x40022300
 8004274:	58026300 	.word	0x58026300

08004278 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe fd5e 	bl	8002d46 <LL_ADC_IsDisableOngoing>
 800428a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f7fe fd45 	bl	8002d20 <LL_ADC_IsEnabled>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d047      	beq.n	800432c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d144      	bne.n	800432c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 030d 	and.w	r3, r3, #13
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d10c      	bne.n	80042ca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fe fd1f 	bl	8002cf8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2203      	movs	r2, #3
 80042c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80042c2:	f7fe fa85 	bl	80027d0 <HAL_GetTick>
 80042c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042c8:	e029      	b.n	800431e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ce:	f043 0210 	orr.w	r2, r3, #16
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042da:	f043 0201 	orr.w	r2, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e023      	b.n	800432e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80042e6:	f7fe fa73 	bl	80027d0 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d914      	bls.n	800431e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004306:	f043 0210 	orr.w	r2, r3, #16
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004312:	f043 0201 	orr.w	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e007      	b.n	800432e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1dc      	bne.n	80042e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a6c      	ldr	r2, [pc, #432]	@ (80044f8 <ADC_ConfigureBoostMode+0x1c0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d004      	beq.n	8004354 <ADC_ConfigureBoostMode+0x1c>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a6b      	ldr	r2, [pc, #428]	@ (80044fc <ADC_ConfigureBoostMode+0x1c4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d109      	bne.n	8004368 <ADC_ConfigureBoostMode+0x30>
 8004354:	4b6a      	ldr	r3, [pc, #424]	@ (8004500 <ADC_ConfigureBoostMode+0x1c8>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800435c:	2b00      	cmp	r3, #0
 800435e:	bf14      	ite	ne
 8004360:	2301      	movne	r3, #1
 8004362:	2300      	moveq	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	e008      	b.n	800437a <ADC_ConfigureBoostMode+0x42>
 8004368:	4b66      	ldr	r3, [pc, #408]	@ (8004504 <ADC_ConfigureBoostMode+0x1cc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004370:	2b00      	cmp	r3, #0
 8004372:	bf14      	ite	ne
 8004374:	2301      	movne	r3, #1
 8004376:	2300      	moveq	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d01c      	beq.n	80043b8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800437e:	f002 fdcd 	bl	8006f1c <HAL_RCC_GetHCLKFreq>
 8004382:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800438c:	d010      	beq.n	80043b0 <ADC_ConfigureBoostMode+0x78>
 800438e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004392:	d873      	bhi.n	800447c <ADC_ConfigureBoostMode+0x144>
 8004394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004398:	d002      	beq.n	80043a0 <ADC_ConfigureBoostMode+0x68>
 800439a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800439e:	d16d      	bne.n	800447c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ac:	60fb      	str	r3, [r7, #12]
        break;
 80043ae:	e068      	b.n	8004482 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	089b      	lsrs	r3, r3, #2
 80043b4:	60fb      	str	r3, [r7, #12]
        break;
 80043b6:	e064      	b.n	8004482 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80043b8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80043bc:	f04f 0100 	mov.w	r1, #0
 80043c0:	f003 ffa8 	bl	8008314 <HAL_RCCEx_GetPeriphCLKFreq>
 80043c4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80043ce:	d051      	beq.n	8004474 <ADC_ConfigureBoostMode+0x13c>
 80043d0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80043d4:	d854      	bhi.n	8004480 <ADC_ConfigureBoostMode+0x148>
 80043d6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80043da:	d047      	beq.n	800446c <ADC_ConfigureBoostMode+0x134>
 80043dc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80043e0:	d84e      	bhi.n	8004480 <ADC_ConfigureBoostMode+0x148>
 80043e2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80043e6:	d03d      	beq.n	8004464 <ADC_ConfigureBoostMode+0x12c>
 80043e8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80043ec:	d848      	bhi.n	8004480 <ADC_ConfigureBoostMode+0x148>
 80043ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043f2:	d033      	beq.n	800445c <ADC_ConfigureBoostMode+0x124>
 80043f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043f8:	d842      	bhi.n	8004480 <ADC_ConfigureBoostMode+0x148>
 80043fa:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80043fe:	d029      	beq.n	8004454 <ADC_ConfigureBoostMode+0x11c>
 8004400:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004404:	d83c      	bhi.n	8004480 <ADC_ConfigureBoostMode+0x148>
 8004406:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800440a:	d01a      	beq.n	8004442 <ADC_ConfigureBoostMode+0x10a>
 800440c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004410:	d836      	bhi.n	8004480 <ADC_ConfigureBoostMode+0x148>
 8004412:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004416:	d014      	beq.n	8004442 <ADC_ConfigureBoostMode+0x10a>
 8004418:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800441c:	d830      	bhi.n	8004480 <ADC_ConfigureBoostMode+0x148>
 800441e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004422:	d00e      	beq.n	8004442 <ADC_ConfigureBoostMode+0x10a>
 8004424:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004428:	d82a      	bhi.n	8004480 <ADC_ConfigureBoostMode+0x148>
 800442a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800442e:	d008      	beq.n	8004442 <ADC_ConfigureBoostMode+0x10a>
 8004430:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004434:	d824      	bhi.n	8004480 <ADC_ConfigureBoostMode+0x148>
 8004436:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800443a:	d002      	beq.n	8004442 <ADC_ConfigureBoostMode+0x10a>
 800443c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004440:	d11e      	bne.n	8004480 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	0c9b      	lsrs	r3, r3, #18
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	60fb      	str	r3, [r7, #12]
        break;
 8004452:	e016      	b.n	8004482 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	091b      	lsrs	r3, r3, #4
 8004458:	60fb      	str	r3, [r7, #12]
        break;
 800445a:	e012      	b.n	8004482 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	60fb      	str	r3, [r7, #12]
        break;
 8004462:	e00e      	b.n	8004482 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	099b      	lsrs	r3, r3, #6
 8004468:	60fb      	str	r3, [r7, #12]
        break;
 800446a:	e00a      	b.n	8004482 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	09db      	lsrs	r3, r3, #7
 8004470:	60fb      	str	r3, [r7, #12]
        break;
 8004472:	e006      	b.n	8004482 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	0a1b      	lsrs	r3, r3, #8
 8004478:	60fb      	str	r3, [r7, #12]
        break;
 800447a:	e002      	b.n	8004482 <ADC_ConfigureBoostMode+0x14a>
        break;
 800447c:	bf00      	nop
 800447e:	e000      	b.n	8004482 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004480:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4a1f      	ldr	r2, [pc, #124]	@ (8004508 <ADC_ConfigureBoostMode+0x1d0>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d808      	bhi.n	80044a2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800449e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80044a0:	e025      	b.n	80044ee <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4a19      	ldr	r2, [pc, #100]	@ (800450c <ADC_ConfigureBoostMode+0x1d4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d80a      	bhi.n	80044c0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044bc:	609a      	str	r2, [r3, #8]
}
 80044be:	e016      	b.n	80044ee <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a13      	ldr	r2, [pc, #76]	@ (8004510 <ADC_ConfigureBoostMode+0x1d8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d80a      	bhi.n	80044de <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044da:	609a      	str	r2, [r3, #8]
}
 80044dc:	e007      	b.n	80044ee <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80044ec:	609a      	str	r2, [r3, #8]
}
 80044ee:	bf00      	nop
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40022000 	.word	0x40022000
 80044fc:	40022100 	.word	0x40022100
 8004500:	40022300 	.word	0x40022300
 8004504:	58026300 	.word	0x58026300
 8004508:	005f5e10 	.word	0x005f5e10
 800450c:	00bebc20 	.word	0x00bebc20
 8004510:	017d7840 	.word	0x017d7840

08004514 <LL_ADC_IsEnabled>:
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <LL_ADC_IsEnabled+0x18>
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <LL_ADC_IsEnabled+0x1a>
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <LL_ADC_REG_IsConversionOngoing>:
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b04      	cmp	r3, #4
 800454c:	d101      	bne.n	8004552 <LL_ADC_REG_IsConversionOngoing+0x18>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004560:	b590      	push	{r4, r7, lr}
 8004562:	b0a3      	sub	sp, #140	@ 0x8c
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004576:	2b01      	cmp	r3, #1
 8004578:	d101      	bne.n	800457e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800457a:	2302      	movs	r3, #2
 800457c:	e0c1      	b.n	8004702 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004586:	2300      	movs	r3, #0
 8004588:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800458a:	2300      	movs	r3, #0
 800458c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a5e      	ldr	r2, [pc, #376]	@ (800470c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d102      	bne.n	800459e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004598:	4b5d      	ldr	r3, [pc, #372]	@ (8004710 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	e001      	b.n	80045a2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10b      	bne.n	80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ac:	f043 0220 	orr.w	r2, r3, #32
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0a0      	b.n	8004702 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff ffb9 	bl	800453a <LL_ADC_REG_IsConversionOngoing>
 80045c8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff ffb2 	bl	800453a <LL_ADC_REG_IsConversionOngoing>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f040 8081 	bne.w	80046e0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80045de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d17c      	bne.n	80046e0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a48      	ldr	r2, [pc, #288]	@ (800470c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d004      	beq.n	80045fa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a46      	ldr	r2, [pc, #280]	@ (8004710 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d101      	bne.n	80045fe <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80045fa:	4b46      	ldr	r3, [pc, #280]	@ (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80045fc:	e000      	b.n	8004600 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80045fe:	4b46      	ldr	r3, [pc, #280]	@ (8004718 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004600:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d039      	beq.n	800467e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800460a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	431a      	orrs	r2, r3
 8004618:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800461a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a3a      	ldr	r2, [pc, #232]	@ (800470c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d004      	beq.n	8004630 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a39      	ldr	r2, [pc, #228]	@ (8004710 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d10e      	bne.n	800464e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004630:	4836      	ldr	r0, [pc, #216]	@ (800470c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004632:	f7ff ff6f 	bl	8004514 <LL_ADC_IsEnabled>
 8004636:	4604      	mov	r4, r0
 8004638:	4835      	ldr	r0, [pc, #212]	@ (8004710 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800463a:	f7ff ff6b 	bl	8004514 <LL_ADC_IsEnabled>
 800463e:	4603      	mov	r3, r0
 8004640:	4323      	orrs	r3, r4
 8004642:	2b00      	cmp	r3, #0
 8004644:	bf0c      	ite	eq
 8004646:	2301      	moveq	r3, #1
 8004648:	2300      	movne	r3, #0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	e008      	b.n	8004660 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800464e:	4833      	ldr	r0, [pc, #204]	@ (800471c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004650:	f7ff ff60 	bl	8004514 <LL_ADC_IsEnabled>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	bf0c      	ite	eq
 800465a:	2301      	moveq	r3, #1
 800465c:	2300      	movne	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d047      	beq.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004664:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	4b2d      	ldr	r3, [pc, #180]	@ (8004720 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800466a:	4013      	ands	r3, r2
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	6811      	ldr	r1, [r2, #0]
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	6892      	ldr	r2, [r2, #8]
 8004674:	430a      	orrs	r2, r1
 8004676:	431a      	orrs	r2, r3
 8004678:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800467a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800467c:	e03a      	b.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800467e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004686:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004688:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a1f      	ldr	r2, [pc, #124]	@ (800470c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d004      	beq.n	800469e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1d      	ldr	r2, [pc, #116]	@ (8004710 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d10e      	bne.n	80046bc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800469e:	481b      	ldr	r0, [pc, #108]	@ (800470c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80046a0:	f7ff ff38 	bl	8004514 <LL_ADC_IsEnabled>
 80046a4:	4604      	mov	r4, r0
 80046a6:	481a      	ldr	r0, [pc, #104]	@ (8004710 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80046a8:	f7ff ff34 	bl	8004514 <LL_ADC_IsEnabled>
 80046ac:	4603      	mov	r3, r0
 80046ae:	4323      	orrs	r3, r4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	bf0c      	ite	eq
 80046b4:	2301      	moveq	r3, #1
 80046b6:	2300      	movne	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	e008      	b.n	80046ce <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80046bc:	4817      	ldr	r0, [pc, #92]	@ (800471c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80046be:	f7ff ff29 	bl	8004514 <LL_ADC_IsEnabled>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	bf0c      	ite	eq
 80046c8:	2301      	moveq	r3, #1
 80046ca:	2300      	movne	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d010      	beq.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80046d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	4b12      	ldr	r3, [pc, #72]	@ (8004720 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80046d8:	4013      	ands	r3, r2
 80046da:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80046dc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046de:	e009      	b.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e4:	f043 0220 	orr.w	r2, r3, #32
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80046f2:	e000      	b.n	80046f6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80046fe:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004702:	4618      	mov	r0, r3
 8004704:	378c      	adds	r7, #140	@ 0x8c
 8004706:	46bd      	mov	sp, r7
 8004708:	bd90      	pop	{r4, r7, pc}
 800470a:	bf00      	nop
 800470c:	40022000 	.word	0x40022000
 8004710:	40022100 	.word	0x40022100
 8004714:	40022300 	.word	0x40022300
 8004718:	58026300 	.word	0x58026300
 800471c:	58026000 	.word	0x58026000
 8004720:	fffff0e0 	.word	0xfffff0e0

08004724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004734:	4b0b      	ldr	r3, [pc, #44]	@ (8004764 <__NVIC_SetPriorityGrouping+0x40>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004740:	4013      	ands	r3, r2
 8004742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800474c:	4b06      	ldr	r3, [pc, #24]	@ (8004768 <__NVIC_SetPriorityGrouping+0x44>)
 800474e:	4313      	orrs	r3, r2
 8004750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004752:	4a04      	ldr	r2, [pc, #16]	@ (8004764 <__NVIC_SetPriorityGrouping+0x40>)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	60d3      	str	r3, [r2, #12]
}
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	e000ed00 	.word	0xe000ed00
 8004768:	05fa0000 	.word	0x05fa0000

0800476c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004770:	4b04      	ldr	r3, [pc, #16]	@ (8004784 <__NVIC_GetPriorityGrouping+0x18>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	0a1b      	lsrs	r3, r3, #8
 8004776:	f003 0307 	and.w	r3, r3, #7
}
 800477a:	4618      	mov	r0, r3
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	e000ed00 	.word	0xe000ed00

08004788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004796:	2b00      	cmp	r3, #0
 8004798:	db0b      	blt.n	80047b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800479a:	88fb      	ldrh	r3, [r7, #6]
 800479c:	f003 021f 	and.w	r2, r3, #31
 80047a0:	4907      	ldr	r1, [pc, #28]	@ (80047c0 <__NVIC_EnableIRQ+0x38>)
 80047a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	2001      	movs	r0, #1
 80047aa:	fa00 f202 	lsl.w	r2, r0, r2
 80047ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	e000e100 	.word	0xe000e100

080047c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	6039      	str	r1, [r7, #0]
 80047ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80047d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	db0a      	blt.n	80047ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	490c      	ldr	r1, [pc, #48]	@ (8004810 <__NVIC_SetPriority+0x4c>)
 80047de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047e2:	0112      	lsls	r2, r2, #4
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	440b      	add	r3, r1
 80047e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047ec:	e00a      	b.n	8004804 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	4908      	ldr	r1, [pc, #32]	@ (8004814 <__NVIC_SetPriority+0x50>)
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	3b04      	subs	r3, #4
 80047fc:	0112      	lsls	r2, r2, #4
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	440b      	add	r3, r1
 8004802:	761a      	strb	r2, [r3, #24]
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	e000e100 	.word	0xe000e100
 8004814:	e000ed00 	.word	0xe000ed00

08004818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004818:	b480      	push	{r7}
 800481a:	b089      	sub	sp, #36	@ 0x24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	f1c3 0307 	rsb	r3, r3, #7
 8004832:	2b04      	cmp	r3, #4
 8004834:	bf28      	it	cs
 8004836:	2304      	movcs	r3, #4
 8004838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	3304      	adds	r3, #4
 800483e:	2b06      	cmp	r3, #6
 8004840:	d902      	bls.n	8004848 <NVIC_EncodePriority+0x30>
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	3b03      	subs	r3, #3
 8004846:	e000      	b.n	800484a <NVIC_EncodePriority+0x32>
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800484c:	f04f 32ff 	mov.w	r2, #4294967295
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	43da      	mvns	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	401a      	ands	r2, r3
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004860:	f04f 31ff 	mov.w	r1, #4294967295
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	fa01 f303 	lsl.w	r3, r1, r3
 800486a:	43d9      	mvns	r1, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004870:	4313      	orrs	r3, r2
         );
}
 8004872:	4618      	mov	r0, r3
 8004874:	3724      	adds	r7, #36	@ 0x24
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
	...

08004880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3b01      	subs	r3, #1
 800488c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004890:	d301      	bcc.n	8004896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004892:	2301      	movs	r3, #1
 8004894:	e00f      	b.n	80048b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004896:	4a0a      	ldr	r2, [pc, #40]	@ (80048c0 <SysTick_Config+0x40>)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3b01      	subs	r3, #1
 800489c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800489e:	210f      	movs	r1, #15
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	f7ff ff8e 	bl	80047c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048a8:	4b05      	ldr	r3, [pc, #20]	@ (80048c0 <SysTick_Config+0x40>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048ae:	4b04      	ldr	r3, [pc, #16]	@ (80048c0 <SysTick_Config+0x40>)
 80048b0:	2207      	movs	r2, #7
 80048b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	e000e010 	.word	0xe000e010

080048c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7ff ff29 	bl	8004724 <__NVIC_SetPriorityGrouping>
}
 80048d2:	bf00      	nop
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b086      	sub	sp, #24
 80048de:	af00      	add	r7, sp, #0
 80048e0:	4603      	mov	r3, r0
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
 80048e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048e8:	f7ff ff40 	bl	800476c <__NVIC_GetPriorityGrouping>
 80048ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	6978      	ldr	r0, [r7, #20]
 80048f4:	f7ff ff90 	bl	8004818 <NVIC_EncodePriority>
 80048f8:	4602      	mov	r2, r0
 80048fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048fe:	4611      	mov	r1, r2
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff ff5f 	bl	80047c4 <__NVIC_SetPriority>
}
 8004906:	bf00      	nop
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	4603      	mov	r3, r0
 8004916:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff ff33 	bl	8004788 <__NVIC_EnableIRQ>
}
 8004922:	bf00      	nop
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff ffa4 	bl	8004880 <SysTick_Config>
 8004938:	4603      	mov	r3, r0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b098      	sub	sp, #96	@ 0x60
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800494c:	4a84      	ldr	r2, [pc, #528]	@ (8004b60 <HAL_FDCAN_Init+0x21c>)
 800494e:	f107 030c 	add.w	r3, r7, #12
 8004952:	4611      	mov	r1, r2
 8004954:	224c      	movs	r2, #76	@ 0x4c
 8004956:	4618      	mov	r0, r3
 8004958:	f006 f9fc 	bl	800ad54 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e1c6      	b.n	8004cf4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b64 <HAL_FDCAN_Init+0x220>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d106      	bne.n	800497e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004978:	461a      	mov	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fd fc46 	bl	8002224 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0210 	bic.w	r2, r2, #16
 80049a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049a8:	f7fd ff12 	bl	80027d0 <HAL_GetTick>
 80049ac:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80049ae:	e014      	b.n	80049da <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80049b0:	f7fd ff0e 	bl	80027d0 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b0a      	cmp	r3, #10
 80049bc:	d90d      	bls.n	80049da <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049c4:	f043 0201 	orr.w	r2, r3, #1
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2203      	movs	r2, #3
 80049d2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e18c      	b.n	8004cf4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d0e3      	beq.n	80049b0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699a      	ldr	r2, [r3, #24]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049f8:	f7fd feea 	bl	80027d0 <HAL_GetTick>
 80049fc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80049fe:	e014      	b.n	8004a2a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004a00:	f7fd fee6 	bl	80027d0 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b0a      	cmp	r3, #10
 8004a0c:	d90d      	bls.n	8004a2a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a14:	f043 0201 	orr.w	r2, r3, #1
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2203      	movs	r2, #3
 8004a22:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e164      	b.n	8004cf4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0e3      	beq.n	8004a00 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0202 	orr.w	r2, r2, #2
 8004a46:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	7c1b      	ldrb	r3, [r3, #16]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d108      	bne.n	8004a62 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a5e:	619a      	str	r2, [r3, #24]
 8004a60:	e007      	b.n	8004a72 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699a      	ldr	r2, [r3, #24]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a70:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	7c5b      	ldrb	r3, [r3, #17]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d108      	bne.n	8004a8c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699a      	ldr	r2, [r3, #24]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a88:	619a      	str	r2, [r3, #24]
 8004a8a:	e007      	b.n	8004a9c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a9a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	7c9b      	ldrb	r3, [r3, #18]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d108      	bne.n	8004ab6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ab2:	619a      	str	r2, [r3, #24]
 8004ab4:	e007      	b.n	8004ac6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	699a      	ldr	r2, [r3, #24]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ac4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004aea:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691a      	ldr	r2, [r3, #16]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0210 	bic.w	r2, r2, #16
 8004afa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d108      	bne.n	8004b16 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0204 	orr.w	r2, r2, #4
 8004b12:	619a      	str	r2, [r3, #24]
 8004b14:	e030      	b.n	8004b78 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d02c      	beq.n	8004b78 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d020      	beq.n	8004b68 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699a      	ldr	r2, [r3, #24]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b34:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0210 	orr.w	r2, r2, #16
 8004b44:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d114      	bne.n	8004b78 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699a      	ldr	r2, [r3, #24]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0220 	orr.w	r2, r2, #32
 8004b5c:	619a      	str	r2, [r3, #24]
 8004b5e:	e00b      	b.n	8004b78 <HAL_FDCAN_Init+0x234>
 8004b60:	0800b918 	.word	0x0800b918
 8004b64:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0220 	orr.w	r2, r2, #32
 8004b76:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b88:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004b90:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ba0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ba2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bac:	d115      	bne.n	8004bda <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004bbc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004bc6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004bd6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004bd8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c00:	4413      	add	r3, r2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d011      	beq.n	8004c2a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004c0e:	f023 0107 	bic.w	r1, r3, #7
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	3360      	adds	r3, #96	@ 0x60
 8004c1a:	443b      	add	r3, r7
 8004c1c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d011      	beq.n	8004c56 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004c3a:	f023 0107 	bic.w	r1, r3, #7
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	3360      	adds	r3, #96	@ 0x60
 8004c46:	443b      	add	r3, r7
 8004c48:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d012      	beq.n	8004c84 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004c66:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	3360      	adds	r3, #96	@ 0x60
 8004c72:	443b      	add	r3, r7
 8004c74:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004c78:	011a      	lsls	r2, r3, #4
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d012      	beq.n	8004cb2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004c94:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	3360      	adds	r3, #96	@ 0x60
 8004ca0:	443b      	add	r3, r7
 8004ca2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004ca6:	021a      	lsls	r2, r3, #8
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a11      	ldr	r2, [pc, #68]	@ (8004cfc <HAL_FDCAN_Init+0x3b8>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d107      	bne.n	8004ccc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f022 0203 	bic.w	r2, r2, #3
 8004cca:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fdf7 	bl	80058d8 <FDCAN_CalcultateRamBlockAddresses>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004cf0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3760      	adds	r7, #96	@ 0x60
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	4000a000 	.word	0x4000a000

08004d00 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004d10:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d002      	beq.n	8004d1e <HAL_FDCAN_ConfigFilter+0x1e>
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d157      	bne.n	8004dce <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d12b      	bne.n	8004d7e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	2b07      	cmp	r3, #7
 8004d2c:	d10d      	bne.n	8004d4a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004d3a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004d40:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8004d42:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	e00e      	b.n	8004d68 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004d56:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004d5e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	e025      	b.n	8004dca <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	075a      	lsls	r2, r3, #29
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	2b07      	cmp	r3, #7
 8004d92:	d103      	bne.n	8004d9c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	e006      	b.n	8004daa <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	079a      	lsls	r2, r3, #30
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	4413      	add	r3, r2
 8004db6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e008      	b.n	8004de0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dd4:	f043 0202 	orr.w	r2, r3, #2
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
  }
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d111      	bne.n	8004e24 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0201 	bic.w	r2, r2, #1
 8004e16:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	e008      	b.n	8004e36 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e2a:	f043 0204 	orr.w	r2, r3, #4
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b086      	sub	sp, #24
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d141      	bne.n	8004ede <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004e62:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e70:	f043 0220 	orr.w	r2, r3, #32
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e038      	b.n	8004ef0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004e86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e94:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e026      	b.n	8004ef0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004eaa:	0c1b      	lsrs	r3, r3, #16
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 fe93 	bl	8005be4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eca:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004ece:	2201      	movs	r2, #1
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	409a      	lsls	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e008      	b.n	8004ef0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ee4:	f043 0208 	orr.w	r2, r3, #8
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
  }
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b08b      	sub	sp, #44	@ 0x2c
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004f10:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004f12:	7efb      	ldrb	r3, [r7, #27]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	f040 8149 	bne.w	80051ac <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b40      	cmp	r3, #64	@ 0x40
 8004f1e:	d14c      	bne.n	8004fba <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004f28:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d109      	bne.n	8004f44 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f36:	f043 0220 	orr.w	r2, r3, #32
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e13c      	b.n	80051be <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d109      	bne.n	8004f68 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f5a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e12a      	b.n	80051be <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f78:	d10a      	bne.n	8004f90 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004f82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f8a:	d101      	bne.n	8004f90 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f98:	0a1b      	lsrs	r3, r3, #8
 8004f9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fac:	69f9      	ldr	r1, [r7, #28]
 8004fae:	fb01 f303 	mul.w	r3, r1, r3
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fb8:	e068      	b.n	800508c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2b41      	cmp	r3, #65	@ 0x41
 8004fbe:	d14c      	bne.n	800505a <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004fc8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d109      	bne.n	8004fe4 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fd6:	f043 0220 	orr.w	r2, r3, #32
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e0ec      	b.n	80051be <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ffa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0da      	b.n	80051be <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005010:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005018:	d10a      	bne.n	8005030 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005022:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005026:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800502a:	d101      	bne.n	8005030 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800502c:	2301      	movs	r3, #1
 800502e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005038:	0a1b      	lsrs	r3, r3, #8
 800503a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	4413      	add	r3, r2
 8005042:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800504c:	69f9      	ldr	r1, [r7, #28]
 800504e:	fb01 f303 	mul.w	r3, r1, r3
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	627b      	str	r3, [r7, #36]	@ 0x24
 8005058:	e018      	b.n	800508c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	429a      	cmp	r2, r3
 8005062:	d309      	bcc.n	8005078 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800506a:	f043 0220 	orr.w	r2, r3, #32
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0a2      	b.n	80051be <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	fb01 f303 	mul.w	r3, r1, r3
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800508c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d107      	bne.n	80050b0 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	0c9b      	lsrs	r3, r3, #18
 80050a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	e005      	b.n	80050bc <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80050b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80050bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80050c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80050d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d6:	3304      	adds	r3, #4
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	b29a      	uxth	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80050e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	0c1b      	lsrs	r3, r3, #16
 80050ea:	f003 020f 	and.w	r2, r3, #15
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800510a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	0e1b      	lsrs	r3, r3, #24
 8005110:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	0fda      	lsrs	r2, r3, #31
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	3304      	adds	r3, #4
 8005126:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800512c:	2300      	movs	r3, #0
 800512e:	623b      	str	r3, [r7, #32]
 8005130:	e00a      	b.n	8005148 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	441a      	add	r2, r3
 8005138:	6839      	ldr	r1, [r7, #0]
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	440b      	add	r3, r1
 800513e:	7812      	ldrb	r2, [r2, #0]
 8005140:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	3301      	adds	r3, #1
 8005146:	623b      	str	r3, [r7, #32]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4a1f      	ldr	r2, [pc, #124]	@ (80051cc <HAL_FDCAN_GetRxMessage+0x2d4>)
 800514e:	5cd3      	ldrb	r3, [r2, r3]
 8005150:	461a      	mov	r2, r3
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	4293      	cmp	r3, r2
 8005156:	d3ec      	bcc.n	8005132 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b40      	cmp	r3, #64	@ 0x40
 800515c:	d105      	bne.n	800516a <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005168:	e01e      	b.n	80051a8 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b41      	cmp	r3, #65	@ 0x41
 800516e:	d105      	bne.n	800517c <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800517a:	e015      	b.n	80051a8 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b1f      	cmp	r3, #31
 8005180:	d808      	bhi.n	8005194 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2101      	movs	r1, #1
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	fa01 f202 	lsl.w	r2, r1, r2
 800518e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005192:	e009      	b.n	80051a8 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f003 021f 	and.w	r2, r3, #31
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2101      	movs	r1, #1
 80051a0:	fa01 f202 	lsl.w	r2, r1, r2
 80051a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	e008      	b.n	80051be <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051b2:	f043 0208 	orr.w	r2, r3, #8
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
  }
}
 80051be:	4618      	mov	r0, r3
 80051c0:	372c      	adds	r7, #44	@ 0x2c
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	0800b974 	.word	0x0800b974

080051d0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80051e2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d002      	beq.n	80051f0 <HAL_FDCAN_ActivateNotification+0x20>
 80051ea:	7dfb      	ldrb	r3, [r7, #23]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d155      	bne.n	800529c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4013      	ands	r3, r2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d108      	bne.n	8005210 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0201 	orr.w	r2, r2, #1
 800520c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800520e:	e014      	b.n	800523a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	4013      	ands	r3, r2
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	429a      	cmp	r2, r3
 800521e:	d108      	bne.n	8005232 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0202 	orr.w	r2, r2, #2
 800522e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005230:	e003      	b.n	800523a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2203      	movs	r2, #3
 8005238:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005240:	2b00      	cmp	r3, #0
 8005242:	d009      	beq.n	8005258 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	430a      	orrs	r2, r1
 8005254:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800525e:	2b00      	cmp	r3, #0
 8005260:	d009      	beq.n	8005276 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	430a      	orrs	r2, r1
 8005272:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	4b0f      	ldr	r3, [pc, #60]	@ (80052bc <HAL_FDCAN_ActivateNotification+0xec>)
 8005280:	4013      	ands	r3, r2
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	6812      	ldr	r2, [r2, #0]
 8005286:	430b      	orrs	r3, r1
 8005288:	6553      	str	r3, [r2, #84]	@ 0x54
 800528a:	4b0d      	ldr	r3, [pc, #52]	@ (80052c0 <HAL_FDCAN_ActivateNotification+0xf0>)
 800528c:	695a      	ldr	r2, [r3, #20]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	0f9b      	lsrs	r3, r3, #30
 8005292:	490b      	ldr	r1, [pc, #44]	@ (80052c0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005294:	4313      	orrs	r3, r2
 8005296:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005298:	2300      	movs	r3, #0
 800529a:	e008      	b.n	80052ae <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052a2:	f043 0202 	orr.w	r2, r3, #2
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
  }
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	3fcfffff 	.word	0x3fcfffff
 80052c0:	4000a800 	.word	0x4000a800

080052c4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b096      	sub	sp, #88	@ 0x58
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80052cc:	4b9a      	ldr	r3, [pc, #616]	@ (8005538 <HAL_FDCAN_IRQHandler+0x274>)
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	079b      	lsls	r3, r3, #30
 80052d2:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80052d4:	4b98      	ldr	r3, [pc, #608]	@ (8005538 <HAL_FDCAN_IRQHandler+0x274>)
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	079b      	lsls	r3, r3, #30
 80052da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80052dc:	4013      	ands	r3, r2
 80052de:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80052ea:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80052f4:	4013      	ands	r3, r2
 80052f6:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800530a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800530c:	4013      	ands	r3, r2
 800530e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005316:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800531a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005324:	4013      	ands	r3, r2
 8005326:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800532e:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005332:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800533a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800533c:	4013      	ands	r3, r2
 800533e:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005346:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800534a:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005352:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005354:	4013      	ands	r3, r2
 8005356:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800535e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005366:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800536a:	0a1b      	lsrs	r3, r3, #8
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	d010      	beq.n	8005396 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005376:	0a1b      	lsrs	r3, r3, #8
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005388:	651a      	str	r2, [r3, #80]	@ 0x50
 800538a:	4b6b      	ldr	r3, [pc, #428]	@ (8005538 <HAL_FDCAN_IRQHandler+0x274>)
 800538c:	2200      	movs	r2, #0
 800538e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fa54 	bl	800583e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005398:	0a9b      	lsrs	r3, r3, #10
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01d      	beq.n	80053de <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80053a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a4:	0a9b      	lsrs	r3, r3, #10
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d017      	beq.n	80053de <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80053b6:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053c2:	4013      	ands	r3, r2
 80053c4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80053d0:	4b59      	ldr	r3, [pc, #356]	@ (8005538 <HAL_FDCAN_IRQHandler+0x274>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80053d6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fa07 	bl	80057ec <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80053de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00d      	beq.n	8005400 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053ea:	4b54      	ldr	r3, [pc, #336]	@ (800553c <HAL_FDCAN_IRQHandler+0x278>)
 80053ec:	400b      	ands	r3, r1
 80053ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80053f0:	4a51      	ldr	r2, [pc, #324]	@ (8005538 <HAL_FDCAN_IRQHandler+0x274>)
 80053f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f4:	0f9b      	lsrs	r3, r3, #30
 80053f6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80053f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f9c0 	bl	8005780 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00d      	beq.n	8005422 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800540c:	4b4b      	ldr	r3, [pc, #300]	@ (800553c <HAL_FDCAN_IRQHandler+0x278>)
 800540e:	400b      	ands	r3, r1
 8005410:	6513      	str	r3, [r2, #80]	@ 0x50
 8005412:	4a49      	ldr	r2, [pc, #292]	@ (8005538 <HAL_FDCAN_IRQHandler+0x274>)
 8005414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005416:	0f9b      	lsrs	r3, r3, #30
 8005418:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800541a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f9ba 	bl	8005796 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00d      	beq.n	8005444 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800542e:	4b43      	ldr	r3, [pc, #268]	@ (800553c <HAL_FDCAN_IRQHandler+0x278>)
 8005430:	400b      	ands	r3, r1
 8005432:	6513      	str	r3, [r2, #80]	@ 0x50
 8005434:	4a40      	ldr	r2, [pc, #256]	@ (8005538 <HAL_FDCAN_IRQHandler+0x274>)
 8005436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005438:	0f9b      	lsrs	r3, r3, #30
 800543a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800543c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fc fa76 	bl	8001930 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005444:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00d      	beq.n	8005466 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005450:	4b3a      	ldr	r3, [pc, #232]	@ (800553c <HAL_FDCAN_IRQHandler+0x278>)
 8005452:	400b      	ands	r3, r1
 8005454:	6513      	str	r3, [r2, #80]	@ 0x50
 8005456:	4a38      	ldr	r2, [pc, #224]	@ (8005538 <HAL_FDCAN_IRQHandler+0x274>)
 8005458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800545a:	0f9b      	lsrs	r3, r3, #30
 800545c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800545e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f9a3 	bl	80057ac <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005468:	0adb      	lsrs	r3, r3, #11
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d010      	beq.n	8005494 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005474:	0adb      	lsrs	r3, r3, #11
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005486:	651a      	str	r2, [r3, #80]	@ 0x50
 8005488:	4b2b      	ldr	r3, [pc, #172]	@ (8005538 <HAL_FDCAN_IRQHandler+0x274>)
 800548a:	2200      	movs	r2, #0
 800548c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f997 	bl	80057c2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005496:	0a5b      	lsrs	r3, r3, #9
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d01d      	beq.n	80054dc <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80054a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a2:	0a5b      	lsrs	r3, r3, #9
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d017      	beq.n	80054dc <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80054b4:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c0:	4013      	ands	r3, r2
 80054c2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80054ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005538 <HAL_FDCAN_IRQHandler+0x274>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80054d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f97d 	bl	80057d6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80054dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054de:	0cdb      	lsrs	r3, r3, #19
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d010      	beq.n	800550a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80054e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ea:	0cdb      	lsrs	r3, r3, #19
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00a      	beq.n	800550a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80054fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80054fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005538 <HAL_FDCAN_IRQHandler+0x274>)
 8005500:	2200      	movs	r2, #0
 8005502:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f97c 	bl	8005802 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800550a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800550c:	0c1b      	lsrs	r3, r3, #16
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d016      	beq.n	8005544 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005518:	0c1b      	lsrs	r3, r3, #16
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d010      	beq.n	8005544 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800552a:	651a      	str	r2, [r3, #80]	@ 0x50
 800552c:	4b02      	ldr	r3, [pc, #8]	@ (8005538 <HAL_FDCAN_IRQHandler+0x274>)
 800552e:	2200      	movs	r2, #0
 8005530:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	e004      	b.n	8005540 <HAL_FDCAN_IRQHandler+0x27c>
 8005536:	bf00      	nop
 8005538:	4000a800 	.word	0x4000a800
 800553c:	3fcfffff 	.word	0x3fcfffff
 8005540:	f000 f969 	bl	8005816 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005546:	0c9b      	lsrs	r3, r3, #18
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d010      	beq.n	8005572 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005552:	0c9b      	lsrs	r3, r3, #18
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005564:	651a      	str	r2, [r3, #80]	@ 0x50
 8005566:	4b83      	ldr	r3, [pc, #524]	@ (8005774 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005568:	2200      	movs	r2, #0
 800556a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f95c 	bl	800582a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005574:	0c5b      	lsrs	r3, r3, #17
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d015      	beq.n	80055aa <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800557e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005580:	0c5b      	lsrs	r3, r3, #17
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00f      	beq.n	80055aa <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005592:	651a      	str	r2, [r3, #80]	@ 0x50
 8005594:	4b77      	ldr	r3, [pc, #476]	@ (8005774 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005596:	2200      	movs	r2, #0
 8005598:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80055aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00d      	beq.n	80055cc <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055b6:	4b70      	ldr	r3, [pc, #448]	@ (8005778 <HAL_FDCAN_IRQHandler+0x4b4>)
 80055b8:	400b      	ands	r3, r1
 80055ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80055bc:	4a6d      	ldr	r2, [pc, #436]	@ (8005774 <HAL_FDCAN_IRQHandler+0x4b0>)
 80055be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055c0:	0f9b      	lsrs	r3, r3, #30
 80055c2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80055c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f94d 	bl	8005866 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80055cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d011      	beq.n	80055f6 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80055d8:	4b67      	ldr	r3, [pc, #412]	@ (8005778 <HAL_FDCAN_IRQHandler+0x4b4>)
 80055da:	400b      	ands	r3, r1
 80055dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80055de:	4a65      	ldr	r2, [pc, #404]	@ (8005774 <HAL_FDCAN_IRQHandler+0x4b0>)
 80055e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055e2:	0f9b      	lsrs	r3, r3, #30
 80055e4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80055ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a60      	ldr	r2, [pc, #384]	@ (800577c <HAL_FDCAN_IRQHandler+0x4b8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	f040 80ac 	bne.w	800575a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 0303 	and.w	r3, r3, #3
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 80a4 	beq.w	800575a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005624:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005626:	4013      	ands	r3, r2
 8005628:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005634:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800563e:	4013      	ands	r3, r2
 8005640:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800564c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005656:	4013      	ands	r3, r2
 8005658:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005664:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566c:	6a3a      	ldr	r2, [r7, #32]
 800566e:	4013      	ands	r3, r2
 8005670:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 800567c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005684:	69fa      	ldr	r2, [r7, #28]
 8005686:	4013      	ands	r3, r2
 8005688:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005690:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800569a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569c:	2b00      	cmp	r3, #0
 800569e:	d007      	beq.n	80056b0 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056a6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80056a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f8e6 	bl	800587c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80056b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d007      	beq.n	80056c6 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056bc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80056be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f8e6 	bl	8005892 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	099b      	lsrs	r3, r3, #6
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d01a      	beq.n	8005708 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	099b      	lsrs	r3, r3, #6
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d014      	beq.n	8005708 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e4:	0c1b      	lsrs	r3, r3, #16
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056f4:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2240      	movs	r2, #64	@ 0x40
 80056fc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	6939      	ldr	r1, [r7, #16]
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f8d0 	bl	80058a8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570a:	2b00      	cmp	r3, #0
 800570c:	d007      	beq.n	800571e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005714:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005716:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f8d1 	bl	80058c0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00b      	beq.n	800573c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	6a3a      	ldr	r2, [r7, #32]
 800572a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00b      	beq.n	800575a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f874 	bl	8005852 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800576a:	bf00      	nop
 800576c:	3758      	adds	r7, #88	@ 0x58
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	4000a800 	.word	0x4000a800
 8005778:	3fcfffff 	.word	0x3fcfffff
 800577c:	4000a000 	.word	0x4000a000

08005780 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
	...

080058d8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80058ee:	4ba7      	ldr	r3, [pc, #668]	@ (8005b8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	0091      	lsls	r1, r2, #2
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6812      	ldr	r2, [r2, #0]
 80058fa:	430b      	orrs	r3, r1
 80058fc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005908:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005910:	041a      	lsls	r2, r3, #16
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	4413      	add	r3, r2
 8005924:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800592e:	4b97      	ldr	r3, [pc, #604]	@ (8005b8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005930:	4013      	ands	r3, r2
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	0091      	lsls	r1, r2, #2
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6812      	ldr	r2, [r2, #0]
 800593a:	430b      	orrs	r3, r1
 800593c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005948:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005950:	041a      	lsls	r2, r3, #16
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	4413      	add	r3, r2
 8005966:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005970:	4b86      	ldr	r3, [pc, #536]	@ (8005b8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005972:	4013      	ands	r3, r2
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	0091      	lsls	r1, r2, #2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	430b      	orrs	r3, r1
 800597e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800598a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005992:	041a      	lsls	r2, r3, #16
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80059a6:	fb02 f303 	mul.w	r3, r2, r3
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	4413      	add	r3, r2
 80059ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80059b8:	4b74      	ldr	r3, [pc, #464]	@ (8005b8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80059ba:	4013      	ands	r3, r2
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	0091      	lsls	r1, r2, #2
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	430b      	orrs	r3, r1
 80059c6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80059d2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059da:	041a      	lsls	r2, r3, #16
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80059ee:	fb02 f303 	mul.w	r3, r2, r3
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	4413      	add	r3, r2
 80059f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005a00:	4b62      	ldr	r3, [pc, #392]	@ (8005b8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	0091      	lsls	r1, r2, #2
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6812      	ldr	r2, [r2, #0]
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005a1a:	fb02 f303 	mul.w	r3, r2, r3
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	4413      	add	r3, r2
 8005a22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005a2c:	4b57      	ldr	r3, [pc, #348]	@ (8005b8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	0091      	lsls	r1, r2, #2
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6812      	ldr	r2, [r2, #0]
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a46:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a4e:	041a      	lsls	r2, r3, #16
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	4413      	add	r3, r2
 8005a64:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005a6e:	4b47      	ldr	r3, [pc, #284]	@ (8005b8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	0091      	lsls	r1, r2, #2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6812      	ldr	r2, [r2, #0]
 8005a7a:	430b      	orrs	r3, r1
 8005a7c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005a88:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a90:	041a      	lsls	r2, r3, #16
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005aa4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aac:	061a      	lsls	r2, r3, #24
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005abc:	4b34      	ldr	r3, [pc, #208]	@ (8005b90 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005abe:	4413      	add	r3, r2
 8005ac0:	009a      	lsls	r2, r3, #2
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	441a      	add	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	441a      	add	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005af2:	fb01 f303 	mul.w	r3, r1, r3
 8005af6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005af8:	441a      	add	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005b0a:	fb01 f303 	mul.w	r3, r1, r3
 8005b0e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005b10:	441a      	add	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005b22:	fb01 f303 	mul.w	r3, r1, r3
 8005b26:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005b28:	441a      	add	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	441a      	add	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b4e:	6879      	ldr	r1, [r7, #4]
 8005b50:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005b52:	fb01 f303 	mul.w	r3, r1, r3
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	441a      	add	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005b6e:	fb01 f303 	mul.w	r3, r1, r3
 8005b72:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005b74:	441a      	add	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b82:	4a04      	ldr	r2, [pc, #16]	@ (8005b94 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d915      	bls.n	8005bb4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005b88:	e006      	b.n	8005b98 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005b8a:	bf00      	nop
 8005b8c:	ffff0003 	.word	0xffff0003
 8005b90:	10002b00 	.word	0x10002b00
 8005b94:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b9e:	f043 0220 	orr.w	r2, r3, #32
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2203      	movs	r2, #3
 8005bac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e010      	b.n	8005bd6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	e005      	b.n	8005bc8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d3f3      	bcc.n	8005bbc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop

08005be4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b089      	sub	sp, #36	@ 0x24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10a      	bne.n	8005c10 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005c02:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	61fb      	str	r3, [r7, #28]
 8005c0e:	e00a      	b.n	8005c26 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005c18:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005c1e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c24:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005c30:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005c36:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005c3c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	fb01 f303 	mul.w	r3, r1, r3
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	3304      	adds	r3, #4
 8005c68:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	3304      	adds	r3, #4
 8005c74:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005c76:	2300      	movs	r3, #0
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	e020      	b.n	8005cbe <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	3303      	adds	r3, #3
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	4413      	add	r3, r2
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	3302      	adds	r3, #2
 8005c8c:	6879      	ldr	r1, [r7, #4]
 8005c8e:	440b      	add	r3, r1
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005c94:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	440b      	add	r3, r1
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005ca2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	440a      	add	r2, r1
 8005caa:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005cac:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	617b      	str	r3, [r7, #20]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	4a06      	ldr	r2, [pc, #24]	@ (8005cdc <FDCAN_CopyMessageToRAM+0xf8>)
 8005cc4:	5cd3      	ldrb	r3, [r2, r3]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d3d6      	bcc.n	8005c7c <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	3724      	adds	r7, #36	@ 0x24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	0800b974 	.word	0x0800b974

08005ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b089      	sub	sp, #36	@ 0x24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005cee:	4b86      	ldr	r3, [pc, #536]	@ (8005f08 <HAL_GPIO_Init+0x228>)
 8005cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cf2:	e18c      	b.n	800600e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005d00:	4013      	ands	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 817e 	beq.w	8006008 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f003 0303 	and.w	r3, r3, #3
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d005      	beq.n	8005d24 <HAL_GPIO_Init+0x44>
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f003 0303 	and.w	r3, r3, #3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d130      	bne.n	8005d86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	2203      	movs	r2, #3
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	43db      	mvns	r3, r3
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	68da      	ldr	r2, [r3, #12]
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d62:	43db      	mvns	r3, r3
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	4013      	ands	r3, r2
 8005d68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	091b      	lsrs	r3, r3, #4
 8005d70:	f003 0201 	and.w	r2, r3, #1
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d017      	beq.n	8005dc2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	2203      	movs	r2, #3
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	43db      	mvns	r3, r3
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	4013      	ands	r3, r2
 8005da8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f003 0303 	and.w	r3, r3, #3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d123      	bne.n	8005e16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	08da      	lsrs	r2, r3, #3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3208      	adds	r2, #8
 8005dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	220f      	movs	r2, #15
 8005de6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dea:	43db      	mvns	r3, r3
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	4013      	ands	r3, r2
 8005df0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	691a      	ldr	r2, [r3, #16]
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	f003 0307 	and.w	r3, r3, #7
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	08da      	lsrs	r2, r3, #3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3208      	adds	r2, #8
 8005e10:	69b9      	ldr	r1, [r7, #24]
 8005e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	2203      	movs	r2, #3
 8005e22:	fa02 f303 	lsl.w	r3, r2, r3
 8005e26:	43db      	mvns	r3, r3
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f003 0203 	and.w	r2, r3, #3
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 80d8 	beq.w	8006008 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e58:	4b2c      	ldr	r3, [pc, #176]	@ (8005f0c <HAL_GPIO_Init+0x22c>)
 8005e5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e5e:	4a2b      	ldr	r2, [pc, #172]	@ (8005f0c <HAL_GPIO_Init+0x22c>)
 8005e60:	f043 0302 	orr.w	r3, r3, #2
 8005e64:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005e68:	4b28      	ldr	r3, [pc, #160]	@ (8005f0c <HAL_GPIO_Init+0x22c>)
 8005e6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e76:	4a26      	ldr	r2, [pc, #152]	@ (8005f10 <HAL_GPIO_Init+0x230>)
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	089b      	lsrs	r3, r3, #2
 8005e7c:	3302      	adds	r3, #2
 8005e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	f003 0303 	and.w	r3, r3, #3
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	220f      	movs	r2, #15
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	43db      	mvns	r3, r3
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	4013      	ands	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005f14 <HAL_GPIO_Init+0x234>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d04a      	beq.n	8005f38 <HAL_GPIO_Init+0x258>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f18 <HAL_GPIO_Init+0x238>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d02b      	beq.n	8005f02 <HAL_GPIO_Init+0x222>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a1b      	ldr	r2, [pc, #108]	@ (8005f1c <HAL_GPIO_Init+0x23c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d025      	beq.n	8005efe <HAL_GPIO_Init+0x21e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a1a      	ldr	r2, [pc, #104]	@ (8005f20 <HAL_GPIO_Init+0x240>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d01f      	beq.n	8005efa <HAL_GPIO_Init+0x21a>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a19      	ldr	r2, [pc, #100]	@ (8005f24 <HAL_GPIO_Init+0x244>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d019      	beq.n	8005ef6 <HAL_GPIO_Init+0x216>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a18      	ldr	r2, [pc, #96]	@ (8005f28 <HAL_GPIO_Init+0x248>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d013      	beq.n	8005ef2 <HAL_GPIO_Init+0x212>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a17      	ldr	r2, [pc, #92]	@ (8005f2c <HAL_GPIO_Init+0x24c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00d      	beq.n	8005eee <HAL_GPIO_Init+0x20e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a16      	ldr	r2, [pc, #88]	@ (8005f30 <HAL_GPIO_Init+0x250>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d007      	beq.n	8005eea <HAL_GPIO_Init+0x20a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a15      	ldr	r2, [pc, #84]	@ (8005f34 <HAL_GPIO_Init+0x254>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d101      	bne.n	8005ee6 <HAL_GPIO_Init+0x206>
 8005ee2:	2309      	movs	r3, #9
 8005ee4:	e029      	b.n	8005f3a <HAL_GPIO_Init+0x25a>
 8005ee6:	230a      	movs	r3, #10
 8005ee8:	e027      	b.n	8005f3a <HAL_GPIO_Init+0x25a>
 8005eea:	2307      	movs	r3, #7
 8005eec:	e025      	b.n	8005f3a <HAL_GPIO_Init+0x25a>
 8005eee:	2306      	movs	r3, #6
 8005ef0:	e023      	b.n	8005f3a <HAL_GPIO_Init+0x25a>
 8005ef2:	2305      	movs	r3, #5
 8005ef4:	e021      	b.n	8005f3a <HAL_GPIO_Init+0x25a>
 8005ef6:	2304      	movs	r3, #4
 8005ef8:	e01f      	b.n	8005f3a <HAL_GPIO_Init+0x25a>
 8005efa:	2303      	movs	r3, #3
 8005efc:	e01d      	b.n	8005f3a <HAL_GPIO_Init+0x25a>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e01b      	b.n	8005f3a <HAL_GPIO_Init+0x25a>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e019      	b.n	8005f3a <HAL_GPIO_Init+0x25a>
 8005f06:	bf00      	nop
 8005f08:	58000080 	.word	0x58000080
 8005f0c:	58024400 	.word	0x58024400
 8005f10:	58000400 	.word	0x58000400
 8005f14:	58020000 	.word	0x58020000
 8005f18:	58020400 	.word	0x58020400
 8005f1c:	58020800 	.word	0x58020800
 8005f20:	58020c00 	.word	0x58020c00
 8005f24:	58021000 	.word	0x58021000
 8005f28:	58021400 	.word	0x58021400
 8005f2c:	58021800 	.word	0x58021800
 8005f30:	58021c00 	.word	0x58021c00
 8005f34:	58022400 	.word	0x58022400
 8005f38:	2300      	movs	r3, #0
 8005f3a:	69fa      	ldr	r2, [r7, #28]
 8005f3c:	f002 0203 	and.w	r2, r2, #3
 8005f40:	0092      	lsls	r2, r2, #2
 8005f42:	4093      	lsls	r3, r2
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f4a:	4938      	ldr	r1, [pc, #224]	@ (800602c <HAL_GPIO_Init+0x34c>)
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	089b      	lsrs	r3, r3, #2
 8005f50:	3302      	adds	r3, #2
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	43db      	mvns	r3, r3
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	4013      	ands	r3, r2
 8005f68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005f7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	43db      	mvns	r3, r3
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	4013      	ands	r3, r2
 8005f96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005fac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	43db      	mvns	r3, r3
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	43db      	mvns	r3, r3
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	4013      	ands	r3, r2
 8005fec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	3301      	adds	r3, #1
 800600c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	fa22 f303 	lsr.w	r3, r2, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	f47f ae6b 	bne.w	8005cf4 <HAL_GPIO_Init+0x14>
  }
}
 800601e:	bf00      	nop
 8006020:	bf00      	nop
 8006022:	3724      	adds	r7, #36	@ 0x24
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	58000400 	.word	0x58000400

08006030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	887b      	ldrh	r3, [r7, #2]
 8006042:	4013      	ands	r3, r2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d002      	beq.n	800604e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
 800604c:	e001      	b.n	8006052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800604e:	2300      	movs	r3, #0
 8006050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006052:	7bfb      	ldrb	r3, [r7, #15]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	807b      	strh	r3, [r7, #2]
 800606c:	4613      	mov	r3, r2
 800606e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006070:	787b      	ldrb	r3, [r7, #1]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006076:	887a      	ldrh	r2, [r7, #2]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800607c:	e003      	b.n	8006086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800607e:	887b      	ldrh	r3, [r7, #2]
 8006080:	041a      	lsls	r2, r3, #16
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	619a      	str	r2, [r3, #24]
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800609c:	4b19      	ldr	r3, [pc, #100]	@ (8006104 <HAL_PWREx_ConfigSupply+0x70>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	d00a      	beq.n	80060be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80060a8:	4b16      	ldr	r3, [pc, #88]	@ (8006104 <HAL_PWREx_ConfigSupply+0x70>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d001      	beq.n	80060ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e01f      	b.n	80060fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	e01d      	b.n	80060fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80060be:	4b11      	ldr	r3, [pc, #68]	@ (8006104 <HAL_PWREx_ConfigSupply+0x70>)
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f023 0207 	bic.w	r2, r3, #7
 80060c6:	490f      	ldr	r1, [pc, #60]	@ (8006104 <HAL_PWREx_ConfigSupply+0x70>)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80060ce:	f7fc fb7f 	bl	80027d0 <HAL_GetTick>
 80060d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80060d4:	e009      	b.n	80060ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80060d6:	f7fc fb7b 	bl	80027d0 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060e4:	d901      	bls.n	80060ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e007      	b.n	80060fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80060ea:	4b06      	ldr	r3, [pc, #24]	@ (8006104 <HAL_PWREx_ConfigSupply+0x70>)
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060f6:	d1ee      	bne.n	80060d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	58024800 	.word	0x58024800

08006108 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08c      	sub	sp, #48	@ 0x30
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e3c8      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 8087 	beq.w	8006236 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006128:	4b88      	ldr	r3, [pc, #544]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006130:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006132:	4b86      	ldr	r3, [pc, #536]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 8006134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006136:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800613a:	2b10      	cmp	r3, #16
 800613c:	d007      	beq.n	800614e <HAL_RCC_OscConfig+0x46>
 800613e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006140:	2b18      	cmp	r3, #24
 8006142:	d110      	bne.n	8006166 <HAL_RCC_OscConfig+0x5e>
 8006144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d10b      	bne.n	8006166 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800614e:	4b7f      	ldr	r3, [pc, #508]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d06c      	beq.n	8006234 <HAL_RCC_OscConfig+0x12c>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d168      	bne.n	8006234 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e3a2      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800616e:	d106      	bne.n	800617e <HAL_RCC_OscConfig+0x76>
 8006170:	4b76      	ldr	r3, [pc, #472]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a75      	ldr	r2, [pc, #468]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 8006176:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	e02e      	b.n	80061dc <HAL_RCC_OscConfig+0xd4>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10c      	bne.n	80061a0 <HAL_RCC_OscConfig+0x98>
 8006186:	4b71      	ldr	r3, [pc, #452]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a70      	ldr	r2, [pc, #448]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 800618c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	4b6e      	ldr	r3, [pc, #440]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a6d      	ldr	r2, [pc, #436]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 8006198:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	e01d      	b.n	80061dc <HAL_RCC_OscConfig+0xd4>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061a8:	d10c      	bne.n	80061c4 <HAL_RCC_OscConfig+0xbc>
 80061aa:	4b68      	ldr	r3, [pc, #416]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a67      	ldr	r2, [pc, #412]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 80061b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	4b65      	ldr	r3, [pc, #404]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a64      	ldr	r2, [pc, #400]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 80061bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	e00b      	b.n	80061dc <HAL_RCC_OscConfig+0xd4>
 80061c4:	4b61      	ldr	r3, [pc, #388]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a60      	ldr	r2, [pc, #384]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 80061ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	4b5e      	ldr	r3, [pc, #376]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a5d      	ldr	r2, [pc, #372]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 80061d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d013      	beq.n	800620c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e4:	f7fc faf4 	bl	80027d0 <HAL_GetTick>
 80061e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061ec:	f7fc faf0 	bl	80027d0 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b64      	cmp	r3, #100	@ 0x64
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e356      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061fe:	4b53      	ldr	r3, [pc, #332]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0f0      	beq.n	80061ec <HAL_RCC_OscConfig+0xe4>
 800620a:	e014      	b.n	8006236 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620c:	f7fc fae0 	bl	80027d0 <HAL_GetTick>
 8006210:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006212:	e008      	b.n	8006226 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006214:	f7fc fadc 	bl	80027d0 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b64      	cmp	r3, #100	@ 0x64
 8006220:	d901      	bls.n	8006226 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e342      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006226:	4b49      	ldr	r3, [pc, #292]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1f0      	bne.n	8006214 <HAL_RCC_OscConfig+0x10c>
 8006232:	e000      	b.n	8006236 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 808c 	beq.w	800635c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006244:	4b41      	ldr	r3, [pc, #260]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800624c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800624e:	4b3f      	ldr	r3, [pc, #252]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 8006250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006252:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <HAL_RCC_OscConfig+0x162>
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	2b18      	cmp	r3, #24
 800625e:	d137      	bne.n	80062d0 <HAL_RCC_OscConfig+0x1c8>
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	f003 0303 	and.w	r3, r3, #3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d132      	bne.n	80062d0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800626a:	4b38      	ldr	r3, [pc, #224]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0304 	and.w	r3, r3, #4
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <HAL_RCC_OscConfig+0x17a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e314      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006282:	4b32      	ldr	r3, [pc, #200]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f023 0219 	bic.w	r2, r3, #25
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	492f      	ldr	r1, [pc, #188]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 8006290:	4313      	orrs	r3, r2
 8006292:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006294:	f7fc fa9c 	bl	80027d0 <HAL_GetTick>
 8006298:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800629c:	f7fc fa98 	bl	80027d0 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e2fe      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062ae:	4b27      	ldr	r3, [pc, #156]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0304 	and.w	r3, r3, #4
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0f0      	beq.n	800629c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ba:	4b24      	ldr	r3, [pc, #144]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	061b      	lsls	r3, r3, #24
 80062c8:	4920      	ldr	r1, [pc, #128]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062ce:	e045      	b.n	800635c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d026      	beq.n	8006326 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80062d8:	4b1c      	ldr	r3, [pc, #112]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f023 0219 	bic.w	r2, r3, #25
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	4919      	ldr	r1, [pc, #100]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ea:	f7fc fa71 	bl	80027d0 <HAL_GetTick>
 80062ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062f0:	e008      	b.n	8006304 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062f2:	f7fc fa6d 	bl	80027d0 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e2d3      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006304:	4b11      	ldr	r3, [pc, #68]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0f0      	beq.n	80062f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006310:	4b0e      	ldr	r3, [pc, #56]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	061b      	lsls	r3, r3, #24
 800631e:	490b      	ldr	r1, [pc, #44]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 8006320:	4313      	orrs	r3, r2
 8006322:	604b      	str	r3, [r1, #4]
 8006324:	e01a      	b.n	800635c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006326:	4b09      	ldr	r3, [pc, #36]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a08      	ldr	r2, [pc, #32]	@ (800634c <HAL_RCC_OscConfig+0x244>)
 800632c:	f023 0301 	bic.w	r3, r3, #1
 8006330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006332:	f7fc fa4d 	bl	80027d0 <HAL_GetTick>
 8006336:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006338:	e00a      	b.n	8006350 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800633a:	f7fc fa49 	bl	80027d0 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d903      	bls.n	8006350 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e2af      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
 800634c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006350:	4b96      	ldr	r3, [pc, #600]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1ee      	bne.n	800633a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0310 	and.w	r3, r3, #16
 8006364:	2b00      	cmp	r3, #0
 8006366:	d06a      	beq.n	800643e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006368:	4b90      	ldr	r3, [pc, #576]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006370:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006372:	4b8e      	ldr	r3, [pc, #568]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 8006374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006376:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	2b08      	cmp	r3, #8
 800637c:	d007      	beq.n	800638e <HAL_RCC_OscConfig+0x286>
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	2b18      	cmp	r3, #24
 8006382:	d11b      	bne.n	80063bc <HAL_RCC_OscConfig+0x2b4>
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	2b01      	cmp	r3, #1
 800638c:	d116      	bne.n	80063bc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800638e:	4b87      	ldr	r3, [pc, #540]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <HAL_RCC_OscConfig+0x29e>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	2b80      	cmp	r3, #128	@ 0x80
 80063a0:	d001      	beq.n	80063a6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e282      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063a6:	4b81      	ldr	r3, [pc, #516]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	061b      	lsls	r3, r3, #24
 80063b4:	497d      	ldr	r1, [pc, #500]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063ba:	e040      	b.n	800643e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d023      	beq.n	800640c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80063c4:	4b79      	ldr	r3, [pc, #484]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a78      	ldr	r2, [pc, #480]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 80063ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d0:	f7fc f9fe 	bl	80027d0 <HAL_GetTick>
 80063d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063d6:	e008      	b.n	80063ea <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80063d8:	f7fc f9fa 	bl	80027d0 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d901      	bls.n	80063ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e260      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063ea:	4b70      	ldr	r3, [pc, #448]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0f0      	beq.n	80063d8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063f6:	4b6d      	ldr	r3, [pc, #436]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	061b      	lsls	r3, r3, #24
 8006404:	4969      	ldr	r1, [pc, #420]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 8006406:	4313      	orrs	r3, r2
 8006408:	60cb      	str	r3, [r1, #12]
 800640a:	e018      	b.n	800643e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800640c:	4b67      	ldr	r3, [pc, #412]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a66      	ldr	r2, [pc, #408]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 8006412:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006418:	f7fc f9da 	bl	80027d0 <HAL_GetTick>
 800641c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800641e:	e008      	b.n	8006432 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006420:	f7fc f9d6 	bl	80027d0 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e23c      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006432:	4b5e      	ldr	r3, [pc, #376]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1f0      	bne.n	8006420 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0308 	and.w	r3, r3, #8
 8006446:	2b00      	cmp	r3, #0
 8006448:	d036      	beq.n	80064b8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d019      	beq.n	8006486 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006452:	4b56      	ldr	r3, [pc, #344]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 8006454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006456:	4a55      	ldr	r2, [pc, #340]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 8006458:	f043 0301 	orr.w	r3, r3, #1
 800645c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800645e:	f7fc f9b7 	bl	80027d0 <HAL_GetTick>
 8006462:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006466:	f7fc f9b3 	bl	80027d0 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e219      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006478:	4b4c      	ldr	r3, [pc, #304]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 800647a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0f0      	beq.n	8006466 <HAL_RCC_OscConfig+0x35e>
 8006484:	e018      	b.n	80064b8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006486:	4b49      	ldr	r3, [pc, #292]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 8006488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800648a:	4a48      	ldr	r2, [pc, #288]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 800648c:	f023 0301 	bic.w	r3, r3, #1
 8006490:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006492:	f7fc f99d 	bl	80027d0 <HAL_GetTick>
 8006496:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006498:	e008      	b.n	80064ac <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800649a:	f7fc f999 	bl	80027d0 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d901      	bls.n	80064ac <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e1ff      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80064ac:	4b3f      	ldr	r3, [pc, #252]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 80064ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1f0      	bne.n	800649a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0320 	and.w	r3, r3, #32
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d036      	beq.n	8006532 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d019      	beq.n	8006500 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064cc:	4b37      	ldr	r3, [pc, #220]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a36      	ldr	r2, [pc, #216]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 80064d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80064d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064d8:	f7fc f97a 	bl	80027d0 <HAL_GetTick>
 80064dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80064de:	e008      	b.n	80064f2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064e0:	f7fc f976 	bl	80027d0 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e1dc      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80064f2:	4b2e      	ldr	r3, [pc, #184]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0f0      	beq.n	80064e0 <HAL_RCC_OscConfig+0x3d8>
 80064fe:	e018      	b.n	8006532 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006500:	4b2a      	ldr	r3, [pc, #168]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a29      	ldr	r2, [pc, #164]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 8006506:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800650a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800650c:	f7fc f960 	bl	80027d0 <HAL_GetTick>
 8006510:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006512:	e008      	b.n	8006526 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006514:	f7fc f95c 	bl	80027d0 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e1c2      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006526:	4b21      	ldr	r3, [pc, #132]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1f0      	bne.n	8006514 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0304 	and.w	r3, r3, #4
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 8086 	beq.w	800664c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006540:	4b1b      	ldr	r3, [pc, #108]	@ (80065b0 <HAL_RCC_OscConfig+0x4a8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a1a      	ldr	r2, [pc, #104]	@ (80065b0 <HAL_RCC_OscConfig+0x4a8>)
 8006546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800654a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800654c:	f7fc f940 	bl	80027d0 <HAL_GetTick>
 8006550:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006552:	e008      	b.n	8006566 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006554:	f7fc f93c 	bl	80027d0 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b64      	cmp	r3, #100	@ 0x64
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e1a2      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006566:	4b12      	ldr	r3, [pc, #72]	@ (80065b0 <HAL_RCC_OscConfig+0x4a8>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0f0      	beq.n	8006554 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d106      	bne.n	8006588 <HAL_RCC_OscConfig+0x480>
 800657a:	4b0c      	ldr	r3, [pc, #48]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 800657c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800657e:	4a0b      	ldr	r2, [pc, #44]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 8006580:	f043 0301 	orr.w	r3, r3, #1
 8006584:	6713      	str	r3, [r2, #112]	@ 0x70
 8006586:	e032      	b.n	80065ee <HAL_RCC_OscConfig+0x4e6>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d111      	bne.n	80065b4 <HAL_RCC_OscConfig+0x4ac>
 8006590:	4b06      	ldr	r3, [pc, #24]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 8006592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006594:	4a05      	ldr	r2, [pc, #20]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 8006596:	f023 0301 	bic.w	r3, r3, #1
 800659a:	6713      	str	r3, [r2, #112]	@ 0x70
 800659c:	4b03      	ldr	r3, [pc, #12]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 800659e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065a0:	4a02      	ldr	r2, [pc, #8]	@ (80065ac <HAL_RCC_OscConfig+0x4a4>)
 80065a2:	f023 0304 	bic.w	r3, r3, #4
 80065a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80065a8:	e021      	b.n	80065ee <HAL_RCC_OscConfig+0x4e6>
 80065aa:	bf00      	nop
 80065ac:	58024400 	.word	0x58024400
 80065b0:	58024800 	.word	0x58024800
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	2b05      	cmp	r3, #5
 80065ba:	d10c      	bne.n	80065d6 <HAL_RCC_OscConfig+0x4ce>
 80065bc:	4b83      	ldr	r3, [pc, #524]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 80065be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065c0:	4a82      	ldr	r2, [pc, #520]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 80065c2:	f043 0304 	orr.w	r3, r3, #4
 80065c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80065c8:	4b80      	ldr	r3, [pc, #512]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 80065ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065cc:	4a7f      	ldr	r2, [pc, #508]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 80065ce:	f043 0301 	orr.w	r3, r3, #1
 80065d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80065d4:	e00b      	b.n	80065ee <HAL_RCC_OscConfig+0x4e6>
 80065d6:	4b7d      	ldr	r3, [pc, #500]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 80065d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065da:	4a7c      	ldr	r2, [pc, #496]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 80065dc:	f023 0301 	bic.w	r3, r3, #1
 80065e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80065e2:	4b7a      	ldr	r3, [pc, #488]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 80065e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065e6:	4a79      	ldr	r2, [pc, #484]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 80065e8:	f023 0304 	bic.w	r3, r3, #4
 80065ec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d015      	beq.n	8006622 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f6:	f7fc f8eb 	bl	80027d0 <HAL_GetTick>
 80065fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065fc:	e00a      	b.n	8006614 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065fe:	f7fc f8e7 	bl	80027d0 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800660c:	4293      	cmp	r3, r2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e14b      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006614:	4b6d      	ldr	r3, [pc, #436]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 8006616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0ee      	beq.n	80065fe <HAL_RCC_OscConfig+0x4f6>
 8006620:	e014      	b.n	800664c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006622:	f7fc f8d5 	bl	80027d0 <HAL_GetTick>
 8006626:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006628:	e00a      	b.n	8006640 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800662a:	f7fc f8d1 	bl	80027d0 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006638:	4293      	cmp	r3, r2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e135      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006640:	4b62      	ldr	r3, [pc, #392]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 8006642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1ee      	bne.n	800662a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 812a 	beq.w	80068aa <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006656:	4b5d      	ldr	r3, [pc, #372]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800665e:	2b18      	cmp	r3, #24
 8006660:	f000 80ba 	beq.w	80067d8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006668:	2b02      	cmp	r3, #2
 800666a:	f040 8095 	bne.w	8006798 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800666e:	4b57      	ldr	r3, [pc, #348]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a56      	ldr	r2, [pc, #344]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 8006674:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667a:	f7fc f8a9 	bl	80027d0 <HAL_GetTick>
 800667e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006680:	e008      	b.n	8006694 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006682:	f7fc f8a5 	bl	80027d0 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d901      	bls.n	8006694 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e10b      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006694:	4b4d      	ldr	r3, [pc, #308]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1f0      	bne.n	8006682 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066a0:	4b4a      	ldr	r3, [pc, #296]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 80066a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066a4:	4b4a      	ldr	r3, [pc, #296]	@ (80067d0 <HAL_RCC_OscConfig+0x6c8>)
 80066a6:	4013      	ands	r3, r2
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80066b0:	0112      	lsls	r2, r2, #4
 80066b2:	430a      	orrs	r2, r1
 80066b4:	4945      	ldr	r1, [pc, #276]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	628b      	str	r3, [r1, #40]	@ 0x28
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066be:	3b01      	subs	r3, #1
 80066c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066c8:	3b01      	subs	r3, #1
 80066ca:	025b      	lsls	r3, r3, #9
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d4:	3b01      	subs	r3, #1
 80066d6:	041b      	lsls	r3, r3, #16
 80066d8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80066dc:	431a      	orrs	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e2:	3b01      	subs	r3, #1
 80066e4:	061b      	lsls	r3, r3, #24
 80066e6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80066ea:	4938      	ldr	r1, [pc, #224]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80066f0:	4b36      	ldr	r3, [pc, #216]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 80066f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f4:	4a35      	ldr	r2, [pc, #212]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 80066f6:	f023 0301 	bic.w	r3, r3, #1
 80066fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066fc:	4b33      	ldr	r3, [pc, #204]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 80066fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006700:	4b34      	ldr	r3, [pc, #208]	@ (80067d4 <HAL_RCC_OscConfig+0x6cc>)
 8006702:	4013      	ands	r3, r2
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006708:	00d2      	lsls	r2, r2, #3
 800670a:	4930      	ldr	r1, [pc, #192]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 800670c:	4313      	orrs	r3, r2
 800670e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006710:	4b2e      	ldr	r3, [pc, #184]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 8006712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006714:	f023 020c 	bic.w	r2, r3, #12
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671c:	492b      	ldr	r1, [pc, #172]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 800671e:	4313      	orrs	r3, r2
 8006720:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006722:	4b2a      	ldr	r3, [pc, #168]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 8006724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006726:	f023 0202 	bic.w	r2, r3, #2
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800672e:	4927      	ldr	r1, [pc, #156]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 8006730:	4313      	orrs	r3, r2
 8006732:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006734:	4b25      	ldr	r3, [pc, #148]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 8006736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006738:	4a24      	ldr	r2, [pc, #144]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 800673a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800673e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006740:	4b22      	ldr	r3, [pc, #136]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 8006742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006744:	4a21      	ldr	r2, [pc, #132]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 8006746:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800674a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800674c:	4b1f      	ldr	r3, [pc, #124]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 800674e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006750:	4a1e      	ldr	r2, [pc, #120]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 8006752:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006756:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006758:	4b1c      	ldr	r3, [pc, #112]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 800675a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800675c:	4a1b      	ldr	r2, [pc, #108]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 800675e:	f043 0301 	orr.w	r3, r3, #1
 8006762:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006764:	4b19      	ldr	r3, [pc, #100]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a18      	ldr	r2, [pc, #96]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 800676a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800676e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006770:	f7fc f82e 	bl	80027d0 <HAL_GetTick>
 8006774:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006778:	f7fc f82a 	bl	80027d0 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e090      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800678a:	4b10      	ldr	r3, [pc, #64]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0f0      	beq.n	8006778 <HAL_RCC_OscConfig+0x670>
 8006796:	e088      	b.n	80068aa <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006798:	4b0c      	ldr	r3, [pc, #48]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a0b      	ldr	r2, [pc, #44]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 800679e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a4:	f7fc f814 	bl	80027d0 <HAL_GetTick>
 80067a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067aa:	e008      	b.n	80067be <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ac:	f7fc f810 	bl	80027d0 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e076      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067be:	4b03      	ldr	r3, [pc, #12]	@ (80067cc <HAL_RCC_OscConfig+0x6c4>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1f0      	bne.n	80067ac <HAL_RCC_OscConfig+0x6a4>
 80067ca:	e06e      	b.n	80068aa <HAL_RCC_OscConfig+0x7a2>
 80067cc:	58024400 	.word	0x58024400
 80067d0:	fffffc0c 	.word	0xfffffc0c
 80067d4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80067d8:	4b36      	ldr	r3, [pc, #216]	@ (80068b4 <HAL_RCC_OscConfig+0x7ac>)
 80067da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80067de:	4b35      	ldr	r3, [pc, #212]	@ (80068b4 <HAL_RCC_OscConfig+0x7ac>)
 80067e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d031      	beq.n	8006850 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f003 0203 	and.w	r2, r3, #3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d12a      	bne.n	8006850 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	091b      	lsrs	r3, r3, #4
 80067fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006806:	429a      	cmp	r2, r3
 8006808:	d122      	bne.n	8006850 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006814:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006816:	429a      	cmp	r2, r3
 8006818:	d11a      	bne.n	8006850 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	0a5b      	lsrs	r3, r3, #9
 800681e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006826:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006828:	429a      	cmp	r2, r3
 800682a:	d111      	bne.n	8006850 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	0c1b      	lsrs	r3, r3, #16
 8006830:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006838:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800683a:	429a      	cmp	r2, r3
 800683c:	d108      	bne.n	8006850 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	0e1b      	lsrs	r3, r3, #24
 8006842:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800684a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800684c:	429a      	cmp	r2, r3
 800684e:	d001      	beq.n	8006854 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e02b      	b.n	80068ac <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006854:	4b17      	ldr	r3, [pc, #92]	@ (80068b4 <HAL_RCC_OscConfig+0x7ac>)
 8006856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006858:	08db      	lsrs	r3, r3, #3
 800685a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800685e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	429a      	cmp	r2, r3
 8006868:	d01f      	beq.n	80068aa <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800686a:	4b12      	ldr	r3, [pc, #72]	@ (80068b4 <HAL_RCC_OscConfig+0x7ac>)
 800686c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686e:	4a11      	ldr	r2, [pc, #68]	@ (80068b4 <HAL_RCC_OscConfig+0x7ac>)
 8006870:	f023 0301 	bic.w	r3, r3, #1
 8006874:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006876:	f7fb ffab 	bl	80027d0 <HAL_GetTick>
 800687a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800687c:	bf00      	nop
 800687e:	f7fb ffa7 	bl	80027d0 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006886:	4293      	cmp	r3, r2
 8006888:	d0f9      	beq.n	800687e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800688a:	4b0a      	ldr	r3, [pc, #40]	@ (80068b4 <HAL_RCC_OscConfig+0x7ac>)
 800688c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800688e:	4b0a      	ldr	r3, [pc, #40]	@ (80068b8 <HAL_RCC_OscConfig+0x7b0>)
 8006890:	4013      	ands	r3, r2
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006896:	00d2      	lsls	r2, r2, #3
 8006898:	4906      	ldr	r1, [pc, #24]	@ (80068b4 <HAL_RCC_OscConfig+0x7ac>)
 800689a:	4313      	orrs	r3, r2
 800689c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800689e:	4b05      	ldr	r3, [pc, #20]	@ (80068b4 <HAL_RCC_OscConfig+0x7ac>)
 80068a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a2:	4a04      	ldr	r2, [pc, #16]	@ (80068b4 <HAL_RCC_OscConfig+0x7ac>)
 80068a4:	f043 0301 	orr.w	r3, r3, #1
 80068a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3730      	adds	r7, #48	@ 0x30
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	58024400 	.word	0x58024400
 80068b8:	ffff0007 	.word	0xffff0007

080068bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e19c      	b.n	8006c0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068d0:	4b8a      	ldr	r3, [pc, #552]	@ (8006afc <HAL_RCC_ClockConfig+0x240>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 030f 	and.w	r3, r3, #15
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d910      	bls.n	8006900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068de:	4b87      	ldr	r3, [pc, #540]	@ (8006afc <HAL_RCC_ClockConfig+0x240>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f023 020f 	bic.w	r2, r3, #15
 80068e6:	4985      	ldr	r1, [pc, #532]	@ (8006afc <HAL_RCC_ClockConfig+0x240>)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ee:	4b83      	ldr	r3, [pc, #524]	@ (8006afc <HAL_RCC_ClockConfig+0x240>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 030f 	and.w	r3, r3, #15
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d001      	beq.n	8006900 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e184      	b.n	8006c0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0304 	and.w	r3, r3, #4
 8006908:	2b00      	cmp	r3, #0
 800690a:	d010      	beq.n	800692e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691a      	ldr	r2, [r3, #16]
 8006910:	4b7b      	ldr	r3, [pc, #492]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006918:	429a      	cmp	r2, r3
 800691a:	d908      	bls.n	800692e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800691c:	4b78      	ldr	r3, [pc, #480]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	4975      	ldr	r1, [pc, #468]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 800692a:	4313      	orrs	r3, r2
 800692c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b00      	cmp	r3, #0
 8006938:	d010      	beq.n	800695c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	695a      	ldr	r2, [r3, #20]
 800693e:	4b70      	ldr	r3, [pc, #448]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006946:	429a      	cmp	r2, r3
 8006948:	d908      	bls.n	800695c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800694a:	4b6d      	ldr	r3, [pc, #436]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	496a      	ldr	r1, [pc, #424]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 8006958:	4313      	orrs	r3, r2
 800695a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b00      	cmp	r3, #0
 8006966:	d010      	beq.n	800698a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	699a      	ldr	r2, [r3, #24]
 800696c:	4b64      	ldr	r3, [pc, #400]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006974:	429a      	cmp	r2, r3
 8006976:	d908      	bls.n	800698a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006978:	4b61      	ldr	r3, [pc, #388]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	495e      	ldr	r1, [pc, #376]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 8006986:	4313      	orrs	r3, r2
 8006988:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0320 	and.w	r3, r3, #32
 8006992:	2b00      	cmp	r3, #0
 8006994:	d010      	beq.n	80069b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	69da      	ldr	r2, [r3, #28]
 800699a:	4b59      	ldr	r3, [pc, #356]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d908      	bls.n	80069b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80069a6:	4b56      	ldr	r3, [pc, #344]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	4953      	ldr	r1, [pc, #332]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0302 	and.w	r3, r3, #2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d010      	beq.n	80069e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68da      	ldr	r2, [r3, #12]
 80069c8:	4b4d      	ldr	r3, [pc, #308]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	f003 030f 	and.w	r3, r3, #15
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d908      	bls.n	80069e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069d4:	4b4a      	ldr	r3, [pc, #296]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	f023 020f 	bic.w	r2, r3, #15
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	4947      	ldr	r1, [pc, #284]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d055      	beq.n	8006a9e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80069f2:	4b43      	ldr	r3, [pc, #268]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	4940      	ldr	r1, [pc, #256]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d107      	bne.n	8006a1c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a0c:	4b3c      	ldr	r3, [pc, #240]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d121      	bne.n	8006a5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e0f6      	b.n	8006c0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d107      	bne.n	8006a34 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a24:	4b36      	ldr	r3, [pc, #216]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d115      	bne.n	8006a5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e0ea      	b.n	8006c0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d107      	bne.n	8006a4c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a3c:	4b30      	ldr	r3, [pc, #192]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d109      	bne.n	8006a5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e0de      	b.n	8006c0a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a4c:	4b2c      	ldr	r3, [pc, #176]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0d6      	b.n	8006c0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a5c:	4b28      	ldr	r3, [pc, #160]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f023 0207 	bic.w	r2, r3, #7
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	4925      	ldr	r1, [pc, #148]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a6e:	f7fb feaf 	bl	80027d0 <HAL_GetTick>
 8006a72:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a74:	e00a      	b.n	8006a8c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a76:	f7fb feab 	bl	80027d0 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d901      	bls.n	8006a8c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e0be      	b.n	8006c0a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	00db      	lsls	r3, r3, #3
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d1eb      	bne.n	8006a76 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d010      	beq.n	8006acc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	4b14      	ldr	r3, [pc, #80]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d208      	bcs.n	8006acc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006aba:	4b11      	ldr	r3, [pc, #68]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	f023 020f 	bic.w	r2, r3, #15
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	490e      	ldr	r1, [pc, #56]	@ (8006b00 <HAL_RCC_ClockConfig+0x244>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006acc:	4b0b      	ldr	r3, [pc, #44]	@ (8006afc <HAL_RCC_ClockConfig+0x240>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 030f 	and.w	r3, r3, #15
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d214      	bcs.n	8006b04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ada:	4b08      	ldr	r3, [pc, #32]	@ (8006afc <HAL_RCC_ClockConfig+0x240>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f023 020f 	bic.w	r2, r3, #15
 8006ae2:	4906      	ldr	r1, [pc, #24]	@ (8006afc <HAL_RCC_ClockConfig+0x240>)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aea:	4b04      	ldr	r3, [pc, #16]	@ (8006afc <HAL_RCC_ClockConfig+0x240>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 030f 	and.w	r3, r3, #15
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d005      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e086      	b.n	8006c0a <HAL_RCC_ClockConfig+0x34e>
 8006afc:	52002000 	.word	0x52002000
 8006b00:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d010      	beq.n	8006b32 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691a      	ldr	r2, [r3, #16]
 8006b14:	4b3f      	ldr	r3, [pc, #252]	@ (8006c14 <HAL_RCC_ClockConfig+0x358>)
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d208      	bcs.n	8006b32 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b20:	4b3c      	ldr	r3, [pc, #240]	@ (8006c14 <HAL_RCC_ClockConfig+0x358>)
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	4939      	ldr	r1, [pc, #228]	@ (8006c14 <HAL_RCC_ClockConfig+0x358>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d010      	beq.n	8006b60 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	695a      	ldr	r2, [r3, #20]
 8006b42:	4b34      	ldr	r3, [pc, #208]	@ (8006c14 <HAL_RCC_ClockConfig+0x358>)
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d208      	bcs.n	8006b60 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b4e:	4b31      	ldr	r3, [pc, #196]	@ (8006c14 <HAL_RCC_ClockConfig+0x358>)
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	492e      	ldr	r1, [pc, #184]	@ (8006c14 <HAL_RCC_ClockConfig+0x358>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0310 	and.w	r3, r3, #16
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d010      	beq.n	8006b8e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699a      	ldr	r2, [r3, #24]
 8006b70:	4b28      	ldr	r3, [pc, #160]	@ (8006c14 <HAL_RCC_ClockConfig+0x358>)
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d208      	bcs.n	8006b8e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b7c:	4b25      	ldr	r3, [pc, #148]	@ (8006c14 <HAL_RCC_ClockConfig+0x358>)
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	4922      	ldr	r1, [pc, #136]	@ (8006c14 <HAL_RCC_ClockConfig+0x358>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0320 	and.w	r3, r3, #32
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d010      	beq.n	8006bbc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	69da      	ldr	r2, [r3, #28]
 8006b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8006c14 <HAL_RCC_ClockConfig+0x358>)
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d208      	bcs.n	8006bbc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006baa:	4b1a      	ldr	r3, [pc, #104]	@ (8006c14 <HAL_RCC_ClockConfig+0x358>)
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	4917      	ldr	r1, [pc, #92]	@ (8006c14 <HAL_RCC_ClockConfig+0x358>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006bbc:	f000 f834 	bl	8006c28 <HAL_RCC_GetSysClockFreq>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	4b14      	ldr	r3, [pc, #80]	@ (8006c14 <HAL_RCC_ClockConfig+0x358>)
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	0a1b      	lsrs	r3, r3, #8
 8006bc8:	f003 030f 	and.w	r3, r3, #15
 8006bcc:	4912      	ldr	r1, [pc, #72]	@ (8006c18 <HAL_RCC_ClockConfig+0x35c>)
 8006bce:	5ccb      	ldrb	r3, [r1, r3]
 8006bd0:	f003 031f 	and.w	r3, r3, #31
 8006bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bda:	4b0e      	ldr	r3, [pc, #56]	@ (8006c14 <HAL_RCC_ClockConfig+0x358>)
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	f003 030f 	and.w	r3, r3, #15
 8006be2:	4a0d      	ldr	r2, [pc, #52]	@ (8006c18 <HAL_RCC_ClockConfig+0x35c>)
 8006be4:	5cd3      	ldrb	r3, [r2, r3]
 8006be6:	f003 031f 	and.w	r3, r3, #31
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8006c1c <HAL_RCC_ClockConfig+0x360>)
 8006bf2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8006c20 <HAL_RCC_ClockConfig+0x364>)
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8006c24 <HAL_RCC_ClockConfig+0x368>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fb fd9c 	bl	800273c <HAL_InitTick>
 8006c04:	4603      	mov	r3, r0
 8006c06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	58024400 	.word	0x58024400
 8006c18:	0800b964 	.word	0x0800b964
 8006c1c:	2400000c 	.word	0x2400000c
 8006c20:	24000008 	.word	0x24000008
 8006c24:	24000010 	.word	0x24000010

08006c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b089      	sub	sp, #36	@ 0x24
 8006c2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c2e:	4bb3      	ldr	r3, [pc, #716]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c36:	2b18      	cmp	r3, #24
 8006c38:	f200 8155 	bhi.w	8006ee6 <HAL_RCC_GetSysClockFreq+0x2be>
 8006c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c42:	bf00      	nop
 8006c44:	08006ca9 	.word	0x08006ca9
 8006c48:	08006ee7 	.word	0x08006ee7
 8006c4c:	08006ee7 	.word	0x08006ee7
 8006c50:	08006ee7 	.word	0x08006ee7
 8006c54:	08006ee7 	.word	0x08006ee7
 8006c58:	08006ee7 	.word	0x08006ee7
 8006c5c:	08006ee7 	.word	0x08006ee7
 8006c60:	08006ee7 	.word	0x08006ee7
 8006c64:	08006ccf 	.word	0x08006ccf
 8006c68:	08006ee7 	.word	0x08006ee7
 8006c6c:	08006ee7 	.word	0x08006ee7
 8006c70:	08006ee7 	.word	0x08006ee7
 8006c74:	08006ee7 	.word	0x08006ee7
 8006c78:	08006ee7 	.word	0x08006ee7
 8006c7c:	08006ee7 	.word	0x08006ee7
 8006c80:	08006ee7 	.word	0x08006ee7
 8006c84:	08006cd5 	.word	0x08006cd5
 8006c88:	08006ee7 	.word	0x08006ee7
 8006c8c:	08006ee7 	.word	0x08006ee7
 8006c90:	08006ee7 	.word	0x08006ee7
 8006c94:	08006ee7 	.word	0x08006ee7
 8006c98:	08006ee7 	.word	0x08006ee7
 8006c9c:	08006ee7 	.word	0x08006ee7
 8006ca0:	08006ee7 	.word	0x08006ee7
 8006ca4:	08006cdb 	.word	0x08006cdb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ca8:	4b94      	ldr	r3, [pc, #592]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0320 	and.w	r3, r3, #32
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d009      	beq.n	8006cc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cb4:	4b91      	ldr	r3, [pc, #580]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	08db      	lsrs	r3, r3, #3
 8006cba:	f003 0303 	and.w	r3, r3, #3
 8006cbe:	4a90      	ldr	r2, [pc, #576]	@ (8006f00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006cc6:	e111      	b.n	8006eec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006cc8:	4b8d      	ldr	r3, [pc, #564]	@ (8006f00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006cca:	61bb      	str	r3, [r7, #24]
      break;
 8006ccc:	e10e      	b.n	8006eec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006cce:	4b8d      	ldr	r3, [pc, #564]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006cd0:	61bb      	str	r3, [r7, #24]
      break;
 8006cd2:	e10b      	b.n	8006eec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006cd4:	4b8c      	ldr	r3, [pc, #560]	@ (8006f08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006cd6:	61bb      	str	r3, [r7, #24]
      break;
 8006cd8:	e108      	b.n	8006eec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cda:	4b88      	ldr	r3, [pc, #544]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cde:	f003 0303 	and.w	r3, r3, #3
 8006ce2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006ce4:	4b85      	ldr	r3, [pc, #532]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce8:	091b      	lsrs	r3, r3, #4
 8006cea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006cf0:	4b82      	ldr	r3, [pc, #520]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006cfa:	4b80      	ldr	r3, [pc, #512]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cfe:	08db      	lsrs	r3, r3, #3
 8006d00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	fb02 f303 	mul.w	r3, r2, r3
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d12:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 80e1 	beq.w	8006ee0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	f000 8083 	beq.w	8006e2c <HAL_RCC_GetSysClockFreq+0x204>
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	f200 80a1 	bhi.w	8006e70 <HAL_RCC_GetSysClockFreq+0x248>
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <HAL_RCC_GetSysClockFreq+0x114>
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d056      	beq.n	8006de8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006d3a:	e099      	b.n	8006e70 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d3c:	4b6f      	ldr	r3, [pc, #444]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d02d      	beq.n	8006da4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d48:	4b6c      	ldr	r3, [pc, #432]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	08db      	lsrs	r3, r3, #3
 8006d4e:	f003 0303 	and.w	r3, r3, #3
 8006d52:	4a6b      	ldr	r2, [pc, #428]	@ (8006f00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d54:	fa22 f303 	lsr.w	r3, r2, r3
 8006d58:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d72:	4b62      	ldr	r3, [pc, #392]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d82:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d86:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006f0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d9e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006da2:	e087      	b.n	8006eb4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	ee07 3a90 	vmov	s15, r3
 8006daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006f10 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db6:	4b51      	ldr	r3, [pc, #324]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dbe:	ee07 3a90 	vmov	s15, r3
 8006dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006f0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006de6:	e065      	b.n	8006eb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	ee07 3a90 	vmov	s15, r3
 8006dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006f14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfa:	4b40      	ldr	r3, [pc, #256]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e0e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006f0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e2a:	e043      	b.n	8006eb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006f18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e52:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006f0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e6e:	e021      	b.n	8006eb4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	ee07 3a90 	vmov	s15, r3
 8006e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006f14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e82:	4b1e      	ldr	r3, [pc, #120]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e96:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006f0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006eb2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006eb4:	4b11      	ldr	r3, [pc, #68]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb8:	0a5b      	lsrs	r3, r3, #9
 8006eba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	ee07 3a90 	vmov	s15, r3
 8006ec8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ecc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ed8:	ee17 3a90 	vmov	r3, s15
 8006edc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006ede:	e005      	b.n	8006eec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	61bb      	str	r3, [r7, #24]
      break;
 8006ee4:	e002      	b.n	8006eec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006ee6:	4b07      	ldr	r3, [pc, #28]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ee8:	61bb      	str	r3, [r7, #24]
      break;
 8006eea:	bf00      	nop
  }

  return sysclockfreq;
 8006eec:	69bb      	ldr	r3, [r7, #24]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3724      	adds	r7, #36	@ 0x24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	58024400 	.word	0x58024400
 8006f00:	03d09000 	.word	0x03d09000
 8006f04:	003d0900 	.word	0x003d0900
 8006f08:	016e3600 	.word	0x016e3600
 8006f0c:	46000000 	.word	0x46000000
 8006f10:	4c742400 	.word	0x4c742400
 8006f14:	4a742400 	.word	0x4a742400
 8006f18:	4bb71b00 	.word	0x4bb71b00

08006f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006f22:	f7ff fe81 	bl	8006c28 <HAL_RCC_GetSysClockFreq>
 8006f26:	4602      	mov	r2, r0
 8006f28:	4b10      	ldr	r3, [pc, #64]	@ (8006f6c <HAL_RCC_GetHCLKFreq+0x50>)
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	0a1b      	lsrs	r3, r3, #8
 8006f2e:	f003 030f 	and.w	r3, r3, #15
 8006f32:	490f      	ldr	r1, [pc, #60]	@ (8006f70 <HAL_RCC_GetHCLKFreq+0x54>)
 8006f34:	5ccb      	ldrb	r3, [r1, r3]
 8006f36:	f003 031f 	and.w	r3, r3, #31
 8006f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f40:	4b0a      	ldr	r3, [pc, #40]	@ (8006f6c <HAL_RCC_GetHCLKFreq+0x50>)
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	f003 030f 	and.w	r3, r3, #15
 8006f48:	4a09      	ldr	r2, [pc, #36]	@ (8006f70 <HAL_RCC_GetHCLKFreq+0x54>)
 8006f4a:	5cd3      	ldrb	r3, [r2, r3]
 8006f4c:	f003 031f 	and.w	r3, r3, #31
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	fa22 f303 	lsr.w	r3, r2, r3
 8006f56:	4a07      	ldr	r2, [pc, #28]	@ (8006f74 <HAL_RCC_GetHCLKFreq+0x58>)
 8006f58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f5a:	4a07      	ldr	r2, [pc, #28]	@ (8006f78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006f60:	4b04      	ldr	r3, [pc, #16]	@ (8006f74 <HAL_RCC_GetHCLKFreq+0x58>)
 8006f62:	681b      	ldr	r3, [r3, #0]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	58024400 	.word	0x58024400
 8006f70:	0800b964 	.word	0x0800b964
 8006f74:	2400000c 	.word	0x2400000c
 8006f78:	24000008 	.word	0x24000008

08006f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006f80:	f7ff ffcc 	bl	8006f1c <HAL_RCC_GetHCLKFreq>
 8006f84:	4602      	mov	r2, r0
 8006f86:	4b06      	ldr	r3, [pc, #24]	@ (8006fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	091b      	lsrs	r3, r3, #4
 8006f8c:	f003 0307 	and.w	r3, r3, #7
 8006f90:	4904      	ldr	r1, [pc, #16]	@ (8006fa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f92:	5ccb      	ldrb	r3, [r1, r3]
 8006f94:	f003 031f 	and.w	r3, r3, #31
 8006f98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	58024400 	.word	0x58024400
 8006fa4:	0800b964 	.word	0x0800b964

08006fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006fac:	f7ff ffb6 	bl	8006f1c <HAL_RCC_GetHCLKFreq>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	4b06      	ldr	r3, [pc, #24]	@ (8006fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	0a1b      	lsrs	r3, r3, #8
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	4904      	ldr	r1, [pc, #16]	@ (8006fd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fbe:	5ccb      	ldrb	r3, [r1, r3]
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	58024400 	.word	0x58024400
 8006fd0:	0800b964 	.word	0x0800b964

08006fd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fd8:	b0c6      	sub	sp, #280	@ 0x118
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006ff8:	2500      	movs	r5, #0
 8006ffa:	ea54 0305 	orrs.w	r3, r4, r5
 8006ffe:	d049      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007004:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007006:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800700a:	d02f      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800700c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007010:	d828      	bhi.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007012:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007016:	d01a      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007018:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800701c:	d822      	bhi.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007022:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007026:	d007      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007028:	e01c      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800702a:	4bab      	ldr	r3, [pc, #684]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800702c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702e:	4aaa      	ldr	r2, [pc, #680]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007034:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007036:	e01a      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703c:	3308      	adds	r3, #8
 800703e:	2102      	movs	r1, #2
 8007040:	4618      	mov	r0, r3
 8007042:	f002 fa49 	bl	80094d8 <RCCEx_PLL2_Config>
 8007046:	4603      	mov	r3, r0
 8007048:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800704c:	e00f      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800704e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007052:	3328      	adds	r3, #40	@ 0x28
 8007054:	2102      	movs	r1, #2
 8007056:	4618      	mov	r0, r3
 8007058:	f002 faf0 	bl	800963c <RCCEx_PLL3_Config>
 800705c:	4603      	mov	r3, r0
 800705e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007062:	e004      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800706a:	e000      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800706c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800706e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10a      	bne.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007076:	4b98      	ldr	r3, [pc, #608]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800707a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800707e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007084:	4a94      	ldr	r2, [pc, #592]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007086:	430b      	orrs	r3, r1
 8007088:	6513      	str	r3, [r2, #80]	@ 0x50
 800708a:	e003      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800708c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007090:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80070a0:	f04f 0900 	mov.w	r9, #0
 80070a4:	ea58 0309 	orrs.w	r3, r8, r9
 80070a8:	d047      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80070aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070b0:	2b04      	cmp	r3, #4
 80070b2:	d82a      	bhi.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80070b4:	a201      	add	r2, pc, #4	@ (adr r2, 80070bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	080070d1 	.word	0x080070d1
 80070c0:	080070df 	.word	0x080070df
 80070c4:	080070f5 	.word	0x080070f5
 80070c8:	08007113 	.word	0x08007113
 80070cc:	08007113 	.word	0x08007113
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d0:	4b81      	ldr	r3, [pc, #516]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d4:	4a80      	ldr	r2, [pc, #512]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070dc:	e01a      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e2:	3308      	adds	r3, #8
 80070e4:	2100      	movs	r1, #0
 80070e6:	4618      	mov	r0, r3
 80070e8:	f002 f9f6 	bl	80094d8 <RCCEx_PLL2_Config>
 80070ec:	4603      	mov	r3, r0
 80070ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070f2:	e00f      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f8:	3328      	adds	r3, #40	@ 0x28
 80070fa:	2100      	movs	r1, #0
 80070fc:	4618      	mov	r0, r3
 80070fe:	f002 fa9d 	bl	800963c <RCCEx_PLL3_Config>
 8007102:	4603      	mov	r3, r0
 8007104:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007108:	e004      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007110:	e000      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007114:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10a      	bne.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800711c:	4b6e      	ldr	r3, [pc, #440]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800711e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007120:	f023 0107 	bic.w	r1, r3, #7
 8007124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712a:	4a6b      	ldr	r2, [pc, #428]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800712c:	430b      	orrs	r3, r1
 800712e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007130:	e003      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007132:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007136:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800713a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007142:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007146:	f04f 0b00 	mov.w	fp, #0
 800714a:	ea5a 030b 	orrs.w	r3, sl, fp
 800714e:	d05b      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007154:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007158:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800715c:	d03b      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800715e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007162:	d834      	bhi.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007164:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007168:	d037      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x206>
 800716a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800716e:	d82e      	bhi.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007170:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007174:	d033      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007176:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800717a:	d828      	bhi.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800717c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007180:	d01a      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007182:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007186:	d822      	bhi.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800718c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007190:	d007      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007192:	e01c      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007194:	4b50      	ldr	r3, [pc, #320]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007198:	4a4f      	ldr	r2, [pc, #316]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800719a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800719e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071a0:	e01e      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a6:	3308      	adds	r3, #8
 80071a8:	2100      	movs	r1, #0
 80071aa:	4618      	mov	r0, r3
 80071ac:	f002 f994 	bl	80094d8 <RCCEx_PLL2_Config>
 80071b0:	4603      	mov	r3, r0
 80071b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80071b6:	e013      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071bc:	3328      	adds	r3, #40	@ 0x28
 80071be:	2100      	movs	r1, #0
 80071c0:	4618      	mov	r0, r3
 80071c2:	f002 fa3b 	bl	800963c <RCCEx_PLL3_Config>
 80071c6:	4603      	mov	r3, r0
 80071c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071cc:	e008      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071d4:	e004      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80071d6:	bf00      	nop
 80071d8:	e002      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80071da:	bf00      	nop
 80071dc:	e000      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80071de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10b      	bne.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80071e8:	4b3b      	ldr	r3, [pc, #236]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ec:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80071f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80071f8:	4a37      	ldr	r2, [pc, #220]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071fa:	430b      	orrs	r3, r1
 80071fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80071fe:	e003      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007200:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007204:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007210:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007214:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007218:	2300      	movs	r3, #0
 800721a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800721e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007222:	460b      	mov	r3, r1
 8007224:	4313      	orrs	r3, r2
 8007226:	d05d      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800722c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007230:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007234:	d03b      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007236:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800723a:	d834      	bhi.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800723c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007240:	d037      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007242:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007246:	d82e      	bhi.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007248:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800724c:	d033      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800724e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007252:	d828      	bhi.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007254:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007258:	d01a      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800725a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800725e:	d822      	bhi.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007260:	2b00      	cmp	r3, #0
 8007262:	d003      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007264:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007268:	d007      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800726a:	e01c      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800726c:	4b1a      	ldr	r3, [pc, #104]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800726e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007270:	4a19      	ldr	r2, [pc, #100]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007276:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007278:	e01e      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800727a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727e:	3308      	adds	r3, #8
 8007280:	2100      	movs	r1, #0
 8007282:	4618      	mov	r0, r3
 8007284:	f002 f928 	bl	80094d8 <RCCEx_PLL2_Config>
 8007288:	4603      	mov	r3, r0
 800728a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800728e:	e013      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007294:	3328      	adds	r3, #40	@ 0x28
 8007296:	2100      	movs	r1, #0
 8007298:	4618      	mov	r0, r3
 800729a:	f002 f9cf 	bl	800963c <RCCEx_PLL3_Config>
 800729e:	4603      	mov	r3, r0
 80072a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072a4:	e008      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072ac:	e004      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80072ae:	bf00      	nop
 80072b0:	e002      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80072b2:	bf00      	nop
 80072b4:	e000      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80072b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10d      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80072c0:	4b05      	ldr	r3, [pc, #20]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072c4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80072c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80072d0:	4a01      	ldr	r2, [pc, #4]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072d2:	430b      	orrs	r3, r1
 80072d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80072d6:	e005      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80072d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80072e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80072f0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80072f4:	2300      	movs	r3, #0
 80072f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80072fa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80072fe:	460b      	mov	r3, r1
 8007300:	4313      	orrs	r3, r2
 8007302:	d03a      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800730a:	2b30      	cmp	r3, #48	@ 0x30
 800730c:	d01f      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800730e:	2b30      	cmp	r3, #48	@ 0x30
 8007310:	d819      	bhi.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007312:	2b20      	cmp	r3, #32
 8007314:	d00c      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007316:	2b20      	cmp	r3, #32
 8007318:	d815      	bhi.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800731a:	2b00      	cmp	r3, #0
 800731c:	d019      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800731e:	2b10      	cmp	r3, #16
 8007320:	d111      	bne.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007322:	4baa      	ldr	r3, [pc, #680]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007326:	4aa9      	ldr	r2, [pc, #676]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800732c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800732e:	e011      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007334:	3308      	adds	r3, #8
 8007336:	2102      	movs	r1, #2
 8007338:	4618      	mov	r0, r3
 800733a:	f002 f8cd 	bl	80094d8 <RCCEx_PLL2_Config>
 800733e:	4603      	mov	r3, r0
 8007340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007344:	e006      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800734c:	e002      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800734e:	bf00      	nop
 8007350:	e000      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007354:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10a      	bne.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800735c:	4b9b      	ldr	r3, [pc, #620]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800735e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007360:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800736a:	4a98      	ldr	r2, [pc, #608]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800736c:	430b      	orrs	r3, r1
 800736e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007370:	e003      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007372:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007376:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800737a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007386:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800738a:	2300      	movs	r3, #0
 800738c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007390:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007394:	460b      	mov	r3, r1
 8007396:	4313      	orrs	r3, r2
 8007398:	d051      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800739a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800739e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073a4:	d035      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80073a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073aa:	d82e      	bhi.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80073ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073b0:	d031      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80073b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073b6:	d828      	bhi.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80073b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073bc:	d01a      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80073be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073c2:	d822      	bhi.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80073c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073cc:	d007      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80073ce:	e01c      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073d0:	4b7e      	ldr	r3, [pc, #504]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d4:	4a7d      	ldr	r2, [pc, #500]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80073dc:	e01c      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e2:	3308      	adds	r3, #8
 80073e4:	2100      	movs	r1, #0
 80073e6:	4618      	mov	r0, r3
 80073e8:	f002 f876 	bl	80094d8 <RCCEx_PLL2_Config>
 80073ec:	4603      	mov	r3, r0
 80073ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80073f2:	e011      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f8:	3328      	adds	r3, #40	@ 0x28
 80073fa:	2100      	movs	r1, #0
 80073fc:	4618      	mov	r0, r3
 80073fe:	f002 f91d 	bl	800963c <RCCEx_PLL3_Config>
 8007402:	4603      	mov	r3, r0
 8007404:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007408:	e006      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007410:	e002      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007412:	bf00      	nop
 8007414:	e000      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007418:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10a      	bne.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007420:	4b6a      	ldr	r3, [pc, #424]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007424:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800742c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800742e:	4a67      	ldr	r2, [pc, #412]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007430:	430b      	orrs	r3, r1
 8007432:	6513      	str	r3, [r2, #80]	@ 0x50
 8007434:	e003      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007436:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800743a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800743e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007446:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800744a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800744e:	2300      	movs	r3, #0
 8007450:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007454:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007458:	460b      	mov	r3, r1
 800745a:	4313      	orrs	r3, r2
 800745c:	d053      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800745e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007464:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007468:	d033      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800746a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800746e:	d82c      	bhi.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007470:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007474:	d02f      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007476:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800747a:	d826      	bhi.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800747c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007480:	d02b      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007482:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007486:	d820      	bhi.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007488:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800748c:	d012      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800748e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007492:	d81a      	bhi.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007494:	2b00      	cmp	r3, #0
 8007496:	d022      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800749c:	d115      	bne.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800749e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a2:	3308      	adds	r3, #8
 80074a4:	2101      	movs	r1, #1
 80074a6:	4618      	mov	r0, r3
 80074a8:	f002 f816 	bl	80094d8 <RCCEx_PLL2_Config>
 80074ac:	4603      	mov	r3, r0
 80074ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80074b2:	e015      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b8:	3328      	adds	r3, #40	@ 0x28
 80074ba:	2101      	movs	r1, #1
 80074bc:	4618      	mov	r0, r3
 80074be:	f002 f8bd 	bl	800963c <RCCEx_PLL3_Config>
 80074c2:	4603      	mov	r3, r0
 80074c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80074c8:	e00a      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074d0:	e006      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80074d2:	bf00      	nop
 80074d4:	e004      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80074d6:	bf00      	nop
 80074d8:	e002      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80074da:	bf00      	nop
 80074dc:	e000      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80074de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10a      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80074e8:	4b38      	ldr	r3, [pc, #224]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074ec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80074f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074f6:	4a35      	ldr	r2, [pc, #212]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074f8:	430b      	orrs	r3, r1
 80074fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80074fc:	e003      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007502:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007512:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007516:	2300      	movs	r3, #0
 8007518:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800751c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007520:	460b      	mov	r3, r1
 8007522:	4313      	orrs	r3, r2
 8007524:	d058      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800752e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007532:	d033      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007534:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007538:	d82c      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800753a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800753e:	d02f      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007544:	d826      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007546:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800754a:	d02b      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800754c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007550:	d820      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007556:	d012      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007558:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800755c:	d81a      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d022      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007562:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007566:	d115      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800756c:	3308      	adds	r3, #8
 800756e:	2101      	movs	r1, #1
 8007570:	4618      	mov	r0, r3
 8007572:	f001 ffb1 	bl	80094d8 <RCCEx_PLL2_Config>
 8007576:	4603      	mov	r3, r0
 8007578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800757c:	e015      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800757e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007582:	3328      	adds	r3, #40	@ 0x28
 8007584:	2101      	movs	r1, #1
 8007586:	4618      	mov	r0, r3
 8007588:	f002 f858 	bl	800963c <RCCEx_PLL3_Config>
 800758c:	4603      	mov	r3, r0
 800758e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007592:	e00a      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800759a:	e006      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800759c:	bf00      	nop
 800759e:	e004      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80075a0:	bf00      	nop
 80075a2:	e002      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80075a4:	bf00      	nop
 80075a6:	e000      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80075a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10e      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80075b2:	4b06      	ldr	r3, [pc, #24]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075b6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80075ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80075c2:	4a02      	ldr	r2, [pc, #8]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075c4:	430b      	orrs	r3, r1
 80075c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80075c8:	e006      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80075ca:	bf00      	nop
 80075cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80075d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80075e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075e8:	2300      	movs	r3, #0
 80075ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80075ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4313      	orrs	r3, r2
 80075f6:	d037      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80075f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007602:	d00e      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007604:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007608:	d816      	bhi.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800760a:	2b00      	cmp	r3, #0
 800760c:	d018      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800760e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007612:	d111      	bne.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007614:	4bc4      	ldr	r3, [pc, #784]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007618:	4ac3      	ldr	r2, [pc, #780]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800761a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800761e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007620:	e00f      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007626:	3308      	adds	r3, #8
 8007628:	2101      	movs	r1, #1
 800762a:	4618      	mov	r0, r3
 800762c:	f001 ff54 	bl	80094d8 <RCCEx_PLL2_Config>
 8007630:	4603      	mov	r3, r0
 8007632:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007636:	e004      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800763e:	e000      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007642:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10a      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800764a:	4bb7      	ldr	r3, [pc, #732]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800764c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800764e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007658:	4ab3      	ldr	r2, [pc, #716]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800765a:	430b      	orrs	r3, r1
 800765c:	6513      	str	r3, [r2, #80]	@ 0x50
 800765e:	e003      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007660:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007664:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007670:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007674:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007678:	2300      	movs	r3, #0
 800767a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800767e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007682:	460b      	mov	r3, r1
 8007684:	4313      	orrs	r3, r2
 8007686:	d039      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800768e:	2b03      	cmp	r3, #3
 8007690:	d81c      	bhi.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007692:	a201      	add	r2, pc, #4	@ (adr r2, 8007698 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007698:	080076d5 	.word	0x080076d5
 800769c:	080076a9 	.word	0x080076a9
 80076a0:	080076b7 	.word	0x080076b7
 80076a4:	080076d5 	.word	0x080076d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076a8:	4b9f      	ldr	r3, [pc, #636]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ac:	4a9e      	ldr	r2, [pc, #632]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80076b4:	e00f      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ba:	3308      	adds	r3, #8
 80076bc:	2102      	movs	r1, #2
 80076be:	4618      	mov	r0, r3
 80076c0:	f001 ff0a 	bl	80094d8 <RCCEx_PLL2_Config>
 80076c4:	4603      	mov	r3, r0
 80076c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80076ca:	e004      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076d2:	e000      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80076d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10a      	bne.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80076de:	4b92      	ldr	r3, [pc, #584]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076e2:	f023 0103 	bic.w	r1, r3, #3
 80076e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076ec:	4a8e      	ldr	r2, [pc, #568]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076ee:	430b      	orrs	r3, r1
 80076f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076f2:	e003      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007704:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007708:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800770c:	2300      	movs	r3, #0
 800770e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007712:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007716:	460b      	mov	r3, r1
 8007718:	4313      	orrs	r3, r2
 800771a:	f000 8099 	beq.w	8007850 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800771e:	4b83      	ldr	r3, [pc, #524]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a82      	ldr	r2, [pc, #520]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007728:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800772a:	f7fb f851 	bl	80027d0 <HAL_GetTick>
 800772e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007732:	e00b      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007734:	f7fb f84c 	bl	80027d0 <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	2b64      	cmp	r3, #100	@ 0x64
 8007742:	d903      	bls.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800774a:	e005      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800774c:	4b77      	ldr	r3, [pc, #476]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007754:	2b00      	cmp	r3, #0
 8007756:	d0ed      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007758:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800775c:	2b00      	cmp	r3, #0
 800775e:	d173      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007760:	4b71      	ldr	r3, [pc, #452]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007762:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007768:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800776c:	4053      	eors	r3, r2
 800776e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007772:	2b00      	cmp	r3, #0
 8007774:	d015      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007776:	4b6c      	ldr	r3, [pc, #432]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800777a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800777e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007782:	4b69      	ldr	r3, [pc, #420]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007786:	4a68      	ldr	r2, [pc, #416]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800778c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800778e:	4b66      	ldr	r3, [pc, #408]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007792:	4a65      	ldr	r2, [pc, #404]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007798:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800779a:	4a63      	ldr	r2, [pc, #396]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800779c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077a0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80077a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ae:	d118      	bne.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b0:	f7fb f80e 	bl	80027d0 <HAL_GetTick>
 80077b4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077b8:	e00d      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077ba:	f7fb f809 	bl	80027d0 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80077c4:	1ad2      	subs	r2, r2, r3
 80077c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d903      	bls.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80077d4:	e005      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077d6:	4b54      	ldr	r3, [pc, #336]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d0eb      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80077e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d129      	bne.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077fa:	d10e      	bne.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x846>
 80077fc:	4b4a      	ldr	r3, [pc, #296]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007808:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800780c:	091a      	lsrs	r2, r3, #4
 800780e:	4b48      	ldr	r3, [pc, #288]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007810:	4013      	ands	r3, r2
 8007812:	4a45      	ldr	r2, [pc, #276]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007814:	430b      	orrs	r3, r1
 8007816:	6113      	str	r3, [r2, #16]
 8007818:	e005      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800781a:	4b43      	ldr	r3, [pc, #268]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	4a42      	ldr	r2, [pc, #264]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007820:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007824:	6113      	str	r3, [r2, #16]
 8007826:	4b40      	ldr	r3, [pc, #256]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007828:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800782a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007836:	4a3c      	ldr	r2, [pc, #240]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007838:	430b      	orrs	r3, r1
 800783a:	6713      	str	r3, [r2, #112]	@ 0x70
 800783c:	e008      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800783e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007842:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007846:	e003      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007848:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800784c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	f002 0301 	and.w	r3, r2, #1
 800785c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007860:	2300      	movs	r3, #0
 8007862:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007866:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800786a:	460b      	mov	r3, r1
 800786c:	4313      	orrs	r3, r2
 800786e:	f000 808f 	beq.w	8007990 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007876:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007878:	2b28      	cmp	r3, #40	@ 0x28
 800787a:	d871      	bhi.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800787c:	a201      	add	r2, pc, #4	@ (adr r2, 8007884 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800787e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007882:	bf00      	nop
 8007884:	08007969 	.word	0x08007969
 8007888:	08007961 	.word	0x08007961
 800788c:	08007961 	.word	0x08007961
 8007890:	08007961 	.word	0x08007961
 8007894:	08007961 	.word	0x08007961
 8007898:	08007961 	.word	0x08007961
 800789c:	08007961 	.word	0x08007961
 80078a0:	08007961 	.word	0x08007961
 80078a4:	08007935 	.word	0x08007935
 80078a8:	08007961 	.word	0x08007961
 80078ac:	08007961 	.word	0x08007961
 80078b0:	08007961 	.word	0x08007961
 80078b4:	08007961 	.word	0x08007961
 80078b8:	08007961 	.word	0x08007961
 80078bc:	08007961 	.word	0x08007961
 80078c0:	08007961 	.word	0x08007961
 80078c4:	0800794b 	.word	0x0800794b
 80078c8:	08007961 	.word	0x08007961
 80078cc:	08007961 	.word	0x08007961
 80078d0:	08007961 	.word	0x08007961
 80078d4:	08007961 	.word	0x08007961
 80078d8:	08007961 	.word	0x08007961
 80078dc:	08007961 	.word	0x08007961
 80078e0:	08007961 	.word	0x08007961
 80078e4:	08007969 	.word	0x08007969
 80078e8:	08007961 	.word	0x08007961
 80078ec:	08007961 	.word	0x08007961
 80078f0:	08007961 	.word	0x08007961
 80078f4:	08007961 	.word	0x08007961
 80078f8:	08007961 	.word	0x08007961
 80078fc:	08007961 	.word	0x08007961
 8007900:	08007961 	.word	0x08007961
 8007904:	08007969 	.word	0x08007969
 8007908:	08007961 	.word	0x08007961
 800790c:	08007961 	.word	0x08007961
 8007910:	08007961 	.word	0x08007961
 8007914:	08007961 	.word	0x08007961
 8007918:	08007961 	.word	0x08007961
 800791c:	08007961 	.word	0x08007961
 8007920:	08007961 	.word	0x08007961
 8007924:	08007969 	.word	0x08007969
 8007928:	58024400 	.word	0x58024400
 800792c:	58024800 	.word	0x58024800
 8007930:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007938:	3308      	adds	r3, #8
 800793a:	2101      	movs	r1, #1
 800793c:	4618      	mov	r0, r3
 800793e:	f001 fdcb 	bl	80094d8 <RCCEx_PLL2_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007948:	e00f      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800794a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800794e:	3328      	adds	r3, #40	@ 0x28
 8007950:	2101      	movs	r1, #1
 8007952:	4618      	mov	r0, r3
 8007954:	f001 fe72 	bl	800963c <RCCEx_PLL3_Config>
 8007958:	4603      	mov	r3, r0
 800795a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800795e:	e004      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007966:	e000      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800796a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10a      	bne.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007972:	4bbf      	ldr	r3, [pc, #764]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007976:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800797a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007980:	4abb      	ldr	r2, [pc, #748]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007982:	430b      	orrs	r3, r1
 8007984:	6553      	str	r3, [r2, #84]	@ 0x54
 8007986:	e003      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007988:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800798c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007998:	f002 0302 	and.w	r3, r2, #2
 800799c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079a0:	2300      	movs	r3, #0
 80079a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4313      	orrs	r3, r2
 80079ae:	d041      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80079b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079b6:	2b05      	cmp	r3, #5
 80079b8:	d824      	bhi.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80079ba:	a201      	add	r2, pc, #4	@ (adr r2, 80079c0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c0:	08007a0d 	.word	0x08007a0d
 80079c4:	080079d9 	.word	0x080079d9
 80079c8:	080079ef 	.word	0x080079ef
 80079cc:	08007a0d 	.word	0x08007a0d
 80079d0:	08007a0d 	.word	0x08007a0d
 80079d4:	08007a0d 	.word	0x08007a0d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079dc:	3308      	adds	r3, #8
 80079de:	2101      	movs	r1, #1
 80079e0:	4618      	mov	r0, r3
 80079e2:	f001 fd79 	bl	80094d8 <RCCEx_PLL2_Config>
 80079e6:	4603      	mov	r3, r0
 80079e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80079ec:	e00f      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f2:	3328      	adds	r3, #40	@ 0x28
 80079f4:	2101      	movs	r1, #1
 80079f6:	4618      	mov	r0, r3
 80079f8:	f001 fe20 	bl	800963c <RCCEx_PLL3_Config>
 80079fc:	4603      	mov	r3, r0
 80079fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a02:	e004      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a0a:	e000      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10a      	bne.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a16:	4b96      	ldr	r3, [pc, #600]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a1a:	f023 0107 	bic.w	r1, r3, #7
 8007a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a24:	4a92      	ldr	r2, [pc, #584]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a26:	430b      	orrs	r3, r1
 8007a28:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a2a:	e003      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3c:	f002 0304 	and.w	r3, r2, #4
 8007a40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a44:	2300      	movs	r3, #0
 8007a46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a4a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4313      	orrs	r3, r2
 8007a52:	d044      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a5c:	2b05      	cmp	r3, #5
 8007a5e:	d825      	bhi.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007a60:	a201      	add	r2, pc, #4	@ (adr r2, 8007a68 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a66:	bf00      	nop
 8007a68:	08007ab5 	.word	0x08007ab5
 8007a6c:	08007a81 	.word	0x08007a81
 8007a70:	08007a97 	.word	0x08007a97
 8007a74:	08007ab5 	.word	0x08007ab5
 8007a78:	08007ab5 	.word	0x08007ab5
 8007a7c:	08007ab5 	.word	0x08007ab5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a84:	3308      	adds	r3, #8
 8007a86:	2101      	movs	r1, #1
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 fd25 	bl	80094d8 <RCCEx_PLL2_Config>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007a94:	e00f      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a9a:	3328      	adds	r3, #40	@ 0x28
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f001 fdcc 	bl	800963c <RCCEx_PLL3_Config>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007aaa:	e004      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ab2:	e000      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ab6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10b      	bne.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007abe:	4b6c      	ldr	r3, [pc, #432]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ac2:	f023 0107 	bic.w	r1, r3, #7
 8007ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ace:	4a68      	ldr	r2, [pc, #416]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ad0:	430b      	orrs	r3, r1
 8007ad2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ad4:	e003      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ada:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	f002 0320 	and.w	r3, r2, #32
 8007aea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007aee:	2300      	movs	r3, #0
 8007af0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007af4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007af8:	460b      	mov	r3, r1
 8007afa:	4313      	orrs	r3, r2
 8007afc:	d055      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b0a:	d033      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b10:	d82c      	bhi.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b16:	d02f      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b1c:	d826      	bhi.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b22:	d02b      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007b24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b28:	d820      	bhi.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b2e:	d012      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007b30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b34:	d81a      	bhi.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d022      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007b3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b3e:	d115      	bne.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b44:	3308      	adds	r3, #8
 8007b46:	2100      	movs	r1, #0
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f001 fcc5 	bl	80094d8 <RCCEx_PLL2_Config>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b54:	e015      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5a:	3328      	adds	r3, #40	@ 0x28
 8007b5c:	2102      	movs	r1, #2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f001 fd6c 	bl	800963c <RCCEx_PLL3_Config>
 8007b64:	4603      	mov	r3, r0
 8007b66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b6a:	e00a      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b72:	e006      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007b74:	bf00      	nop
 8007b76:	e004      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007b78:	bf00      	nop
 8007b7a:	e002      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007b7c:	bf00      	nop
 8007b7e:	e000      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10b      	bne.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b8a:	4b39      	ldr	r3, [pc, #228]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b8e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b9a:	4a35      	ldr	r2, [pc, #212]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ba0:	e003      	b.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ba6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007bb6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007bc0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	d058      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007bd2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007bd6:	d033      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007bd8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007bdc:	d82c      	bhi.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007be2:	d02f      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007be8:	d826      	bhi.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007bea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bee:	d02b      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007bf0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bf4:	d820      	bhi.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007bf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bfa:	d012      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c00:	d81a      	bhi.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d022      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c0a:	d115      	bne.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c10:	3308      	adds	r3, #8
 8007c12:	2100      	movs	r1, #0
 8007c14:	4618      	mov	r0, r3
 8007c16:	f001 fc5f 	bl	80094d8 <RCCEx_PLL2_Config>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c20:	e015      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c26:	3328      	adds	r3, #40	@ 0x28
 8007c28:	2102      	movs	r1, #2
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f001 fd06 	bl	800963c <RCCEx_PLL3_Config>
 8007c30:	4603      	mov	r3, r0
 8007c32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c36:	e00a      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c3e:	e006      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007c40:	bf00      	nop
 8007c42:	e004      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007c44:	bf00      	nop
 8007c46:	e002      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007c48:	bf00      	nop
 8007c4a:	e000      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10e      	bne.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c56:	4b06      	ldr	r3, [pc, #24]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c5a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c66:	4a02      	ldr	r2, [pc, #8]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c68:	430b      	orrs	r3, r1
 8007c6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c6c:	e006      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007c6e:	bf00      	nop
 8007c70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007c88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c92:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007c96:	460b      	mov	r3, r1
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	d055      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ca4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007ca8:	d033      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007caa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007cae:	d82c      	bhi.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cb4:	d02f      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007cb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cba:	d826      	bhi.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007cbc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007cc0:	d02b      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007cc2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007cc6:	d820      	bhi.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007cc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ccc:	d012      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007cce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cd2:	d81a      	bhi.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d022      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cdc:	d115      	bne.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f001 fbf6 	bl	80094d8 <RCCEx_PLL2_Config>
 8007cec:	4603      	mov	r3, r0
 8007cee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007cf2:	e015      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf8:	3328      	adds	r3, #40	@ 0x28
 8007cfa:	2102      	movs	r1, #2
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f001 fc9d 	bl	800963c <RCCEx_PLL3_Config>
 8007d02:	4603      	mov	r3, r0
 8007d04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d08:	e00a      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d10:	e006      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d12:	bf00      	nop
 8007d14:	e004      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d16:	bf00      	nop
 8007d18:	e002      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d1a:	bf00      	nop
 8007d1c:	e000      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10b      	bne.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007d28:	4ba0      	ldr	r3, [pc, #640]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d2c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d38:	4a9c      	ldr	r2, [pc, #624]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d3a:	430b      	orrs	r3, r1
 8007d3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d3e:	e003      	b.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	f002 0308 	and.w	r3, r2, #8
 8007d54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007d5e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007d62:	460b      	mov	r3, r1
 8007d64:	4313      	orrs	r3, r2
 8007d66:	d01e      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d74:	d10c      	bne.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7a:	3328      	adds	r3, #40	@ 0x28
 8007d7c:	2102      	movs	r1, #2
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f001 fc5c 	bl	800963c <RCCEx_PLL3_Config>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007d90:	4b86      	ldr	r3, [pc, #536]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d94:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007da0:	4a82      	ldr	r2, [pc, #520]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007da2:	430b      	orrs	r3, r1
 8007da4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	f002 0310 	and.w	r3, r2, #16
 8007db2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007db6:	2300      	movs	r3, #0
 8007db8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007dbc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	d01e      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007dce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dd2:	d10c      	bne.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd8:	3328      	adds	r3, #40	@ 0x28
 8007dda:	2102      	movs	r1, #2
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f001 fc2d 	bl	800963c <RCCEx_PLL3_Config>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007dee:	4b6f      	ldr	r3, [pc, #444]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007df2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007dfe:	4a6b      	ldr	r2, [pc, #428]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e00:	430b      	orrs	r3, r1
 8007e02:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007e10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e12:	2300      	movs	r3, #0
 8007e14:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e16:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	d03e      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e2c:	d022      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007e2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e32:	d81b      	bhi.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d003      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e3c:	d00b      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007e3e:	e015      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e44:	3308      	adds	r3, #8
 8007e46:	2100      	movs	r1, #0
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f001 fb45 	bl	80094d8 <RCCEx_PLL2_Config>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e54:	e00f      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e5a:	3328      	adds	r3, #40	@ 0x28
 8007e5c:	2102      	movs	r1, #2
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f001 fbec 	bl	800963c <RCCEx_PLL3_Config>
 8007e64:	4603      	mov	r3, r0
 8007e66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e6a:	e004      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e72:	e000      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10b      	bne.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e82:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e8e:	4a47      	ldr	r2, [pc, #284]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e90:	430b      	orrs	r3, r1
 8007e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e94:	e003      	b.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007eaa:	673b      	str	r3, [r7, #112]	@ 0x70
 8007eac:	2300      	movs	r3, #0
 8007eae:	677b      	str	r3, [r7, #116]	@ 0x74
 8007eb0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	d03b      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ec2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ec6:	d01f      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007ec8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ecc:	d818      	bhi.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007ece:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ed2:	d003      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007ed4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ed8:	d007      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007eda:	e011      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007edc:	4b33      	ldr	r3, [pc, #204]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee0:	4a32      	ldr	r2, [pc, #200]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007ee8:	e00f      	b.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eee:	3328      	adds	r3, #40	@ 0x28
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f001 fba2 	bl	800963c <RCCEx_PLL3_Config>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007efe:	e004      	b.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f06:	e000      	b.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10b      	bne.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f12:	4b26      	ldr	r3, [pc, #152]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f16:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f22:	4a22      	ldr	r2, [pc, #136]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f24:	430b      	orrs	r3, r1
 8007f26:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f28:	e003      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007f3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f40:	2300      	movs	r3, #0
 8007f42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f44:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	d034      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d003      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f5c:	d007      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007f5e:	e011      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f60:	4b12      	ldr	r3, [pc, #72]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f64:	4a11      	ldr	r2, [pc, #68]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007f6c:	e00e      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f72:	3308      	adds	r3, #8
 8007f74:	2102      	movs	r1, #2
 8007f76:	4618      	mov	r0, r3
 8007f78:	f001 faae 	bl	80094d8 <RCCEx_PLL2_Config>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007f82:	e003      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10d      	bne.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007f94:	4b05      	ldr	r3, [pc, #20]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f98:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fa2:	4a02      	ldr	r2, [pc, #8]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007fa8:	e006      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007faa:	bf00      	nop
 8007fac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007fc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007fca:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	d00c      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd8:	3328      	adds	r3, #40	@ 0x28
 8007fda:	2102      	movs	r1, #2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f001 fb2d 	bl	800963c <RCCEx_PLL3_Config>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007ffa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008000:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008004:	460b      	mov	r3, r1
 8008006:	4313      	orrs	r3, r2
 8008008:	d036      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800800a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800800e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008010:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008014:	d018      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008016:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800801a:	d811      	bhi.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800801c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008020:	d014      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008022:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008026:	d80b      	bhi.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008028:	2b00      	cmp	r3, #0
 800802a:	d011      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800802c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008030:	d106      	bne.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008032:	4bb7      	ldr	r3, [pc, #732]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008036:	4ab6      	ldr	r2, [pc, #728]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800803c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800803e:	e008      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008046:	e004      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008048:	bf00      	nop
 800804a:	e002      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800804c:	bf00      	nop
 800804e:	e000      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008052:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10a      	bne.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800805a:	4bad      	ldr	r3, [pc, #692]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800805c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800805e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008066:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008068:	4aa9      	ldr	r2, [pc, #676]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800806a:	430b      	orrs	r3, r1
 800806c:	6553      	str	r3, [r2, #84]	@ 0x54
 800806e:	e003      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008070:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008074:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008084:	653b      	str	r3, [r7, #80]	@ 0x50
 8008086:	2300      	movs	r3, #0
 8008088:	657b      	str	r3, [r7, #84]	@ 0x54
 800808a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800808e:	460b      	mov	r3, r1
 8008090:	4313      	orrs	r3, r2
 8008092:	d009      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008094:	4b9e      	ldr	r3, [pc, #632]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008098:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800809c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080a2:	4a9b      	ldr	r2, [pc, #620]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080a4:	430b      	orrs	r3, r1
 80080a6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80080a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80080b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080b6:	2300      	movs	r3, #0
 80080b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080ba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80080be:	460b      	mov	r3, r1
 80080c0:	4313      	orrs	r3, r2
 80080c2:	d009      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80080c4:	4b92      	ldr	r3, [pc, #584]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080c8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80080cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080d2:	4a8f      	ldr	r2, [pc, #572]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080d4:	430b      	orrs	r3, r1
 80080d6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80080d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80080e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80080e6:	2300      	movs	r3, #0
 80080e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80080ee:	460b      	mov	r3, r1
 80080f0:	4313      	orrs	r3, r2
 80080f2:	d00e      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080f4:	4b86      	ldr	r3, [pc, #536]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	4a85      	ldr	r2, [pc, #532]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80080fe:	6113      	str	r3, [r2, #16]
 8008100:	4b83      	ldr	r3, [pc, #524]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008102:	6919      	ldr	r1, [r3, #16]
 8008104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008108:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800810c:	4a80      	ldr	r2, [pc, #512]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800810e:	430b      	orrs	r3, r1
 8008110:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800811e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008120:	2300      	movs	r3, #0
 8008122:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008124:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008128:	460b      	mov	r3, r1
 800812a:	4313      	orrs	r3, r2
 800812c:	d009      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800812e:	4b78      	ldr	r3, [pc, #480]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008132:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800813a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800813c:	4a74      	ldr	r2, [pc, #464]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800813e:	430b      	orrs	r3, r1
 8008140:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800814e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008150:	2300      	movs	r3, #0
 8008152:	637b      	str	r3, [r7, #52]	@ 0x34
 8008154:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008158:	460b      	mov	r3, r1
 800815a:	4313      	orrs	r3, r2
 800815c:	d00a      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800815e:	4b6c      	ldr	r3, [pc, #432]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008162:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800816a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800816e:	4a68      	ldr	r2, [pc, #416]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008170:	430b      	orrs	r3, r1
 8008172:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817c:	2100      	movs	r1, #0
 800817e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008186:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800818a:	460b      	mov	r3, r1
 800818c:	4313      	orrs	r3, r2
 800818e:	d011      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008194:	3308      	adds	r3, #8
 8008196:	2100      	movs	r1, #0
 8008198:	4618      	mov	r0, r3
 800819a:	f001 f99d 	bl	80094d8 <RCCEx_PLL2_Config>
 800819e:	4603      	mov	r3, r0
 80081a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80081a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80081b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081bc:	2100      	movs	r1, #0
 80081be:	6239      	str	r1, [r7, #32]
 80081c0:	f003 0302 	and.w	r3, r3, #2
 80081c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80081c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80081ca:	460b      	mov	r3, r1
 80081cc:	4313      	orrs	r3, r2
 80081ce:	d011      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081d4:	3308      	adds	r3, #8
 80081d6:	2101      	movs	r1, #1
 80081d8:	4618      	mov	r0, r3
 80081da:	f001 f97d 	bl	80094d8 <RCCEx_PLL2_Config>
 80081de:	4603      	mov	r3, r0
 80081e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80081e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80081f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	2100      	movs	r1, #0
 80081fe:	61b9      	str	r1, [r7, #24]
 8008200:	f003 0304 	and.w	r3, r3, #4
 8008204:	61fb      	str	r3, [r7, #28]
 8008206:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800820a:	460b      	mov	r3, r1
 800820c:	4313      	orrs	r3, r2
 800820e:	d011      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008214:	3308      	adds	r3, #8
 8008216:	2102      	movs	r1, #2
 8008218:	4618      	mov	r0, r3
 800821a:	f001 f95d 	bl	80094d8 <RCCEx_PLL2_Config>
 800821e:	4603      	mov	r3, r0
 8008220:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008224:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008228:	2b00      	cmp	r3, #0
 800822a:	d003      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800822c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008230:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823c:	2100      	movs	r1, #0
 800823e:	6139      	str	r1, [r7, #16]
 8008240:	f003 0308 	and.w	r3, r3, #8
 8008244:	617b      	str	r3, [r7, #20]
 8008246:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800824a:	460b      	mov	r3, r1
 800824c:	4313      	orrs	r3, r2
 800824e:	d011      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008254:	3328      	adds	r3, #40	@ 0x28
 8008256:	2100      	movs	r1, #0
 8008258:	4618      	mov	r0, r3
 800825a:	f001 f9ef 	bl	800963c <RCCEx_PLL3_Config>
 800825e:	4603      	mov	r3, r0
 8008260:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008264:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008268:	2b00      	cmp	r3, #0
 800826a:	d003      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800826c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008270:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	2100      	movs	r1, #0
 800827e:	60b9      	str	r1, [r7, #8]
 8008280:	f003 0310 	and.w	r3, r3, #16
 8008284:	60fb      	str	r3, [r7, #12]
 8008286:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800828a:	460b      	mov	r3, r1
 800828c:	4313      	orrs	r3, r2
 800828e:	d011      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008294:	3328      	adds	r3, #40	@ 0x28
 8008296:	2101      	movs	r1, #1
 8008298:	4618      	mov	r0, r3
 800829a:	f001 f9cf 	bl	800963c <RCCEx_PLL3_Config>
 800829e:	4603      	mov	r3, r0
 80082a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80082a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80082b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082bc:	2100      	movs	r1, #0
 80082be:	6039      	str	r1, [r7, #0]
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	607b      	str	r3, [r7, #4]
 80082c6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80082ca:	460b      	mov	r3, r1
 80082cc:	4313      	orrs	r3, r2
 80082ce:	d011      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d4:	3328      	adds	r3, #40	@ 0x28
 80082d6:	2102      	movs	r1, #2
 80082d8:	4618      	mov	r0, r3
 80082da:	f001 f9af 	bl	800963c <RCCEx_PLL3_Config>
 80082de:	4603      	mov	r3, r0
 80082e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80082e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d003      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80082f4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d101      	bne.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	e000      	b.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
}
 8008302:	4618      	mov	r0, r3
 8008304:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008308:	46bd      	mov	sp, r7
 800830a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800830e:	bf00      	nop
 8008310:	58024400 	.word	0x58024400

08008314 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b090      	sub	sp, #64	@ 0x40
 8008318:	af00      	add	r7, sp, #0
 800831a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800831e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008322:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008326:	430b      	orrs	r3, r1
 8008328:	f040 8094 	bne.w	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800832c:	4b9b      	ldr	r3, [pc, #620]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800832e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008330:	f003 0307 	and.w	r3, r3, #7
 8008334:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008338:	2b04      	cmp	r3, #4
 800833a:	f200 8087 	bhi.w	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800833e:	a201      	add	r2, pc, #4	@ (adr r2, 8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008344:	08008359 	.word	0x08008359
 8008348:	08008381 	.word	0x08008381
 800834c:	080083a9 	.word	0x080083a9
 8008350:	08008445 	.word	0x08008445
 8008354:	080083d1 	.word	0x080083d1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008358:	4b90      	ldr	r3, [pc, #576]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008360:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008364:	d108      	bne.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800836a:	4618      	mov	r0, r3
 800836c:	f000 ff62 	bl	8009234 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008374:	f000 bc93 	b.w	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008378:	2300      	movs	r3, #0
 800837a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800837c:	f000 bc8f 	b.w	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008380:	4b86      	ldr	r3, [pc, #536]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008388:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800838c:	d108      	bne.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800838e:	f107 0318 	add.w	r3, r7, #24
 8008392:	4618      	mov	r0, r3
 8008394:	f000 fca6 	bl	8008ce4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800839c:	f000 bc7f 	b.w	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083a0:	2300      	movs	r3, #0
 80083a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083a4:	f000 bc7b 	b.w	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083a8:	4b7c      	ldr	r3, [pc, #496]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083b4:	d108      	bne.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083b6:	f107 030c 	add.w	r3, r7, #12
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 fde6 	bl	8008f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083c4:	f000 bc6b 	b.w	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083c8:	2300      	movs	r3, #0
 80083ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083cc:	f000 bc67 	b.w	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083d0:	4b72      	ldr	r3, [pc, #456]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80083d8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083da:	4b70      	ldr	r3, [pc, #448]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0304 	and.w	r3, r3, #4
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	d10c      	bne.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80083e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d109      	bne.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083ec:	4b6b      	ldr	r3, [pc, #428]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	08db      	lsrs	r3, r3, #3
 80083f2:	f003 0303 	and.w	r3, r3, #3
 80083f6:	4a6a      	ldr	r2, [pc, #424]	@ (80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80083f8:	fa22 f303 	lsr.w	r3, r2, r3
 80083fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083fe:	e01f      	b.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008400:	4b66      	ldr	r3, [pc, #408]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800840c:	d106      	bne.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800840e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008410:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008414:	d102      	bne.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008416:	4b63      	ldr	r3, [pc, #396]	@ (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008418:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800841a:	e011      	b.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800841c:	4b5f      	ldr	r3, [pc, #380]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008424:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008428:	d106      	bne.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800842a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800842c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008430:	d102      	bne.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008432:	4b5d      	ldr	r3, [pc, #372]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008434:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008436:	e003      	b.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008438:	2300      	movs	r3, #0
 800843a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800843c:	f000 bc2f 	b.w	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008440:	f000 bc2d 	b.w	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008444:	4b59      	ldr	r3, [pc, #356]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008448:	f000 bc29 	b.w	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008450:	f000 bc25 	b.w	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008458:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800845c:	430b      	orrs	r3, r1
 800845e:	f040 80a7 	bne.w	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008462:	4b4e      	ldr	r3, [pc, #312]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008466:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800846a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800846c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008472:	d054      	beq.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008476:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800847a:	f200 808b 	bhi.w	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800847e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008480:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008484:	f000 8083 	beq.w	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800848e:	f200 8081 	bhi.w	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008494:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008498:	d02f      	beq.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800849a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084a0:	d878      	bhi.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80084a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d004      	beq.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80084a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084ae:	d012      	beq.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80084b0:	e070      	b.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084b2:	4b3a      	ldr	r3, [pc, #232]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084be:	d107      	bne.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 feb5 	bl	8009234 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084ce:	e3e6      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084d4:	e3e3      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084d6:	4b31      	ldr	r3, [pc, #196]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084e2:	d107      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084e4:	f107 0318 	add.w	r3, r7, #24
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 fbfb 	bl	8008ce4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084f2:	e3d4      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084f8:	e3d1      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084fa:	4b28      	ldr	r3, [pc, #160]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008506:	d107      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008508:	f107 030c 	add.w	r3, r7, #12
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fd3d 	bl	8008f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008516:	e3c2      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008518:	2300      	movs	r3, #0
 800851a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800851c:	e3bf      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800851e:	4b1f      	ldr	r3, [pc, #124]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008522:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008526:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008528:	4b1c      	ldr	r3, [pc, #112]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0304 	and.w	r3, r3, #4
 8008530:	2b04      	cmp	r3, #4
 8008532:	d10c      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008536:	2b00      	cmp	r3, #0
 8008538:	d109      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800853a:	4b18      	ldr	r3, [pc, #96]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	08db      	lsrs	r3, r3, #3
 8008540:	f003 0303 	and.w	r3, r3, #3
 8008544:	4a16      	ldr	r2, [pc, #88]	@ (80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008546:	fa22 f303 	lsr.w	r3, r2, r3
 800854a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800854c:	e01e      	b.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800854e:	4b13      	ldr	r3, [pc, #76]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800855a:	d106      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800855c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800855e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008562:	d102      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008564:	4b0f      	ldr	r3, [pc, #60]	@ (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008568:	e010      	b.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800856a:	4b0c      	ldr	r3, [pc, #48]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008572:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008576:	d106      	bne.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800857a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800857e:	d102      	bne.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008580:	4b09      	ldr	r3, [pc, #36]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008584:	e002      	b.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800858a:	e388      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800858c:	e387      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800858e:	4b07      	ldr	r3, [pc, #28]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008592:	e384      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008594:	2300      	movs	r3, #0
 8008596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008598:	e381      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800859a:	bf00      	nop
 800859c:	58024400 	.word	0x58024400
 80085a0:	03d09000 	.word	0x03d09000
 80085a4:	003d0900 	.word	0x003d0900
 80085a8:	016e3600 	.word	0x016e3600
 80085ac:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80085b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085b4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80085b8:	430b      	orrs	r3, r1
 80085ba:	f040 809c 	bne.w	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80085be:	4b9e      	ldr	r3, [pc, #632]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80085c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085c2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80085c6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80085c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085ce:	d054      	beq.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80085d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085d6:	f200 808b 	bhi.w	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80085da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80085e0:	f000 8083 	beq.w	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80085e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80085ea:	f200 8081 	bhi.w	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80085ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085f4:	d02f      	beq.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80085f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085fc:	d878      	bhi.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80085fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008600:	2b00      	cmp	r3, #0
 8008602:	d004      	beq.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008606:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800860a:	d012      	beq.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800860c:	e070      	b.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800860e:	4b8a      	ldr	r3, [pc, #552]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008616:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800861a:	d107      	bne.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800861c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008620:	4618      	mov	r0, r3
 8008622:	f000 fe07 	bl	8009234 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800862a:	e338      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800862c:	2300      	movs	r3, #0
 800862e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008630:	e335      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008632:	4b81      	ldr	r3, [pc, #516]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800863a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800863e:	d107      	bne.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008640:	f107 0318 	add.w	r3, r7, #24
 8008644:	4618      	mov	r0, r3
 8008646:	f000 fb4d 	bl	8008ce4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800864e:	e326      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008650:	2300      	movs	r3, #0
 8008652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008654:	e323      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008656:	4b78      	ldr	r3, [pc, #480]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800865e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008662:	d107      	bne.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008664:	f107 030c 	add.w	r3, r7, #12
 8008668:	4618      	mov	r0, r3
 800866a:	f000 fc8f 	bl	8008f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008672:	e314      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008674:	2300      	movs	r3, #0
 8008676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008678:	e311      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800867a:	4b6f      	ldr	r3, [pc, #444]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800867c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800867e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008682:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008684:	4b6c      	ldr	r3, [pc, #432]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0304 	and.w	r3, r3, #4
 800868c:	2b04      	cmp	r3, #4
 800868e:	d10c      	bne.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008692:	2b00      	cmp	r3, #0
 8008694:	d109      	bne.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008696:	4b68      	ldr	r3, [pc, #416]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	08db      	lsrs	r3, r3, #3
 800869c:	f003 0303 	and.w	r3, r3, #3
 80086a0:	4a66      	ldr	r2, [pc, #408]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80086a2:	fa22 f303 	lsr.w	r3, r2, r3
 80086a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086a8:	e01e      	b.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086aa:	4b63      	ldr	r3, [pc, #396]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086b6:	d106      	bne.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80086b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086be:	d102      	bne.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086c0:	4b5f      	ldr	r3, [pc, #380]	@ (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80086c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086c4:	e010      	b.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086c6:	4b5c      	ldr	r3, [pc, #368]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086d2:	d106      	bne.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80086d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086da:	d102      	bne.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086dc:	4b59      	ldr	r3, [pc, #356]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086e0:	e002      	b.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80086e2:	2300      	movs	r3, #0
 80086e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80086e6:	e2da      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80086e8:	e2d9      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80086ea:	4b57      	ldr	r3, [pc, #348]	@ (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80086ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ee:	e2d6      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f4:	e2d3      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80086f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086fa:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80086fe:	430b      	orrs	r3, r1
 8008700:	f040 80a7 	bne.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008704:	4b4c      	ldr	r3, [pc, #304]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008708:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800870c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800870e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008710:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008714:	d055      	beq.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008718:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800871c:	f200 8096 	bhi.w	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008722:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008726:	f000 8084 	beq.w	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800872a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008730:	f200 808c 	bhi.w	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800873a:	d030      	beq.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800873c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800873e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008742:	f200 8083 	bhi.w	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008748:	2b00      	cmp	r3, #0
 800874a:	d004      	beq.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800874c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008752:	d012      	beq.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008754:	e07a      	b.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008756:	4b38      	ldr	r3, [pc, #224]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800875e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008762:	d107      	bne.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008768:	4618      	mov	r0, r3
 800876a:	f000 fd63 	bl	8009234 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800876e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008772:	e294      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008774:	2300      	movs	r3, #0
 8008776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008778:	e291      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800877a:	4b2f      	ldr	r3, [pc, #188]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008782:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008786:	d107      	bne.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008788:	f107 0318 	add.w	r3, r7, #24
 800878c:	4618      	mov	r0, r3
 800878e:	f000 faa9 	bl	8008ce4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008796:	e282      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800879c:	e27f      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800879e:	4b26      	ldr	r3, [pc, #152]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087aa:	d107      	bne.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087ac:	f107 030c 	add.w	r3, r7, #12
 80087b0:	4618      	mov	r0, r3
 80087b2:	f000 fbeb 	bl	8008f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ba:	e270      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087c0:	e26d      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087c2:	4b1d      	ldr	r3, [pc, #116]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80087c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80087ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0304 	and.w	r3, r3, #4
 80087d4:	2b04      	cmp	r3, #4
 80087d6:	d10c      	bne.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80087d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d109      	bne.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087de:	4b16      	ldr	r3, [pc, #88]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	08db      	lsrs	r3, r3, #3
 80087e4:	f003 0303 	and.w	r3, r3, #3
 80087e8:	4a14      	ldr	r2, [pc, #80]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80087ea:	fa22 f303 	lsr.w	r3, r2, r3
 80087ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087f0:	e01e      	b.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087f2:	4b11      	ldr	r3, [pc, #68]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087fe:	d106      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008802:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008806:	d102      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008808:	4b0d      	ldr	r3, [pc, #52]	@ (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800880a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800880c:	e010      	b.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800880e:	4b0a      	ldr	r3, [pc, #40]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008816:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800881a:	d106      	bne.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800881c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800881e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008822:	d102      	bne.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008824:	4b07      	ldr	r3, [pc, #28]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008826:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008828:	e002      	b.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800882a:	2300      	movs	r3, #0
 800882c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800882e:	e236      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008830:	e235      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008832:	4b05      	ldr	r3, [pc, #20]	@ (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008836:	e232      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008838:	58024400 	.word	0x58024400
 800883c:	03d09000 	.word	0x03d09000
 8008840:	003d0900 	.word	0x003d0900
 8008844:	016e3600 	.word	0x016e3600
 8008848:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008850:	e225      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008852:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008856:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800885a:	430b      	orrs	r3, r1
 800885c:	f040 8085 	bne.w	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008860:	4b9c      	ldr	r3, [pc, #624]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008864:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008868:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800886a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800886c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008870:	d06b      	beq.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008874:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008878:	d874      	bhi.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800887a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800887c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008880:	d056      	beq.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008884:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008888:	d86c      	bhi.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800888a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008890:	d03b      	beq.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008894:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008898:	d864      	bhi.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800889a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088a0:	d021      	beq.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80088a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088a8:	d85c      	bhi.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80088aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d004      	beq.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80088b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088b6:	d004      	beq.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80088b8:	e054      	b.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80088ba:	f7fe fb5f 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 80088be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80088c0:	e1ed      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088c2:	4b84      	ldr	r3, [pc, #528]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088ce:	d107      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088d0:	f107 0318 	add.w	r3, r7, #24
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 fa05 	bl	8008ce4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088de:	e1de      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088e4:	e1db      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088e6:	4b7b      	ldr	r3, [pc, #492]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088f2:	d107      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088f4:	f107 030c 	add.w	r3, r7, #12
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 fb47 	bl	8008f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008902:	e1cc      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008904:	2300      	movs	r3, #0
 8008906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008908:	e1c9      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800890a:	4b72      	ldr	r3, [pc, #456]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0304 	and.w	r3, r3, #4
 8008912:	2b04      	cmp	r3, #4
 8008914:	d109      	bne.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008916:	4b6f      	ldr	r3, [pc, #444]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	08db      	lsrs	r3, r3, #3
 800891c:	f003 0303 	and.w	r3, r3, #3
 8008920:	4a6d      	ldr	r2, [pc, #436]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008922:	fa22 f303 	lsr.w	r3, r2, r3
 8008926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008928:	e1b9      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800892e:	e1b6      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008930:	4b68      	ldr	r3, [pc, #416]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008938:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800893c:	d102      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800893e:	4b67      	ldr	r3, [pc, #412]	@ (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008942:	e1ac      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008944:	2300      	movs	r3, #0
 8008946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008948:	e1a9      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800894a:	4b62      	ldr	r3, [pc, #392]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008952:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008956:	d102      	bne.n	800895e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008958:	4b61      	ldr	r3, [pc, #388]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800895a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800895c:	e19f      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800895e:	2300      	movs	r3, #0
 8008960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008962:	e19c      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008964:	2300      	movs	r3, #0
 8008966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008968:	e199      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800896a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800896e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008972:	430b      	orrs	r3, r1
 8008974:	d173      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008976:	4b57      	ldr	r3, [pc, #348]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800897a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800897e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008982:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008986:	d02f      	beq.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800898e:	d863      	bhi.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008992:	2b00      	cmp	r3, #0
 8008994:	d004      	beq.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800899c:	d012      	beq.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800899e:	e05b      	b.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089a0:	4b4c      	ldr	r3, [pc, #304]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089ac:	d107      	bne.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089ae:	f107 0318 	add.w	r3, r7, #24
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 f996 	bl	8008ce4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089bc:	e16f      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089c2:	e16c      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089c4:	4b43      	ldr	r3, [pc, #268]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089d0:	d107      	bne.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089d2:	f107 030c 	add.w	r3, r7, #12
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 fad8 	bl	8008f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089e0:	e15d      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089e6:	e15a      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089e8:	4b3a      	ldr	r3, [pc, #232]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80089f0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089f2:	4b38      	ldr	r3, [pc, #224]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0304 	and.w	r3, r3, #4
 80089fa:	2b04      	cmp	r3, #4
 80089fc:	d10c      	bne.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80089fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d109      	bne.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a04:	4b33      	ldr	r3, [pc, #204]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	08db      	lsrs	r3, r3, #3
 8008a0a:	f003 0303 	and.w	r3, r3, #3
 8008a0e:	4a32      	ldr	r2, [pc, #200]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008a10:	fa22 f303 	lsr.w	r3, r2, r3
 8008a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a16:	e01e      	b.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a18:	4b2e      	ldr	r3, [pc, #184]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a24:	d106      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a2c:	d102      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a32:	e010      	b.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a34:	4b27      	ldr	r3, [pc, #156]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a40:	d106      	bne.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a48:	d102      	bne.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a4a:	4b25      	ldr	r3, [pc, #148]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a4e:	e002      	b.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008a54:	e123      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008a56:	e122      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a5c:	e11f      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008a5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a62:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008a66:	430b      	orrs	r3, r1
 8008a68:	d13c      	bne.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a72:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d004      	beq.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a80:	d012      	beq.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008a82:	e023      	b.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a84:	4b13      	ldr	r3, [pc, #76]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a90:	d107      	bne.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 fbcc 	bl	8009234 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aa0:	e0fd      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aa6:	e0fa      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ab0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ab4:	d107      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ab6:	f107 0318 	add.w	r3, r7, #24
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 f912 	bl	8008ce4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ac4:	e0eb      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aca:	e0e8      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ad0:	e0e5      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ad2:	bf00      	nop
 8008ad4:	58024400 	.word	0x58024400
 8008ad8:	03d09000 	.word	0x03d09000
 8008adc:	003d0900 	.word	0x003d0900
 8008ae0:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008aec:	430b      	orrs	r3, r1
 8008aee:	f040 8085 	bne.w	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008af2:	4b6d      	ldr	r3, [pc, #436]	@ (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008af6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008afa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b02:	d06b      	beq.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b0a:	d874      	bhi.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b12:	d056      	beq.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b1a:	d86c      	bhi.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b22:	d03b      	beq.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b2a:	d864      	bhi.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b32:	d021      	beq.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b3a:	d85c      	bhi.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d004      	beq.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b48:	d004      	beq.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008b4a:	e054      	b.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008b4c:	f000 f8b4 	bl	8008cb8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b50:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b52:	e0a4      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b54:	4b54      	ldr	r3, [pc, #336]	@ (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b60:	d107      	bne.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b62:	f107 0318 	add.w	r3, r7, #24
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 f8bc 	bl	8008ce4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b70:	e095      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b76:	e092      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b78:	4b4b      	ldr	r3, [pc, #300]	@ (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b84:	d107      	bne.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b86:	f107 030c 	add.w	r3, r7, #12
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 f9fe 	bl	8008f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b94:	e083      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b96:	2300      	movs	r3, #0
 8008b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b9a:	e080      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b9c:	4b42      	ldr	r3, [pc, #264]	@ (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 0304 	and.w	r3, r3, #4
 8008ba4:	2b04      	cmp	r3, #4
 8008ba6:	d109      	bne.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ba8:	4b3f      	ldr	r3, [pc, #252]	@ (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	08db      	lsrs	r3, r3, #3
 8008bae:	f003 0303 	and.w	r3, r3, #3
 8008bb2:	4a3e      	ldr	r2, [pc, #248]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bba:	e070      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bc0:	e06d      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008bc2:	4b39      	ldr	r3, [pc, #228]	@ (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bce:	d102      	bne.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008bd0:	4b37      	ldr	r3, [pc, #220]	@ (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bd4:	e063      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bda:	e060      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008bdc:	4b32      	ldr	r3, [pc, #200]	@ (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008be4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008be8:	d102      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008bea:	4b32      	ldr	r3, [pc, #200]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bee:	e056      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf4:	e053      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bfa:	e050      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c00:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008c04:	430b      	orrs	r3, r1
 8008c06:	d148      	bne.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008c08:	4b27      	ldr	r3, [pc, #156]	@ (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c10:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c18:	d02a      	beq.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c20:	d838      	bhi.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d004      	beq.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c2e:	d00d      	beq.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008c30:	e030      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c32:	4b1d      	ldr	r3, [pc, #116]	@ (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c3e:	d102      	bne.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008c40:	4b1c      	ldr	r3, [pc, #112]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c44:	e02b      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c46:	2300      	movs	r3, #0
 8008c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c4a:	e028      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c4c:	4b16      	ldr	r3, [pc, #88]	@ (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c58:	d107      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 fae8 	bl	8009234 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c68:	e019      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c6e:	e016      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c70:	4b0d      	ldr	r3, [pc, #52]	@ (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c7c:	d107      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c7e:	f107 0318 	add.w	r3, r7, #24
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 f82e 	bl	8008ce4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c8c:	e007      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c92:	e004      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c98:	e001      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3740      	adds	r7, #64	@ 0x40
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	58024400 	.word	0x58024400
 8008cac:	03d09000 	.word	0x03d09000
 8008cb0:	003d0900 	.word	0x003d0900
 8008cb4:	016e3600 	.word	0x016e3600

08008cb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008cbc:	f7fe f92e 	bl	8006f1c <HAL_RCC_GetHCLKFreq>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	4b06      	ldr	r3, [pc, #24]	@ (8008cdc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	091b      	lsrs	r3, r3, #4
 8008cc8:	f003 0307 	and.w	r3, r3, #7
 8008ccc:	4904      	ldr	r1, [pc, #16]	@ (8008ce0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008cce:	5ccb      	ldrb	r3, [r1, r3]
 8008cd0:	f003 031f 	and.w	r3, r3, #31
 8008cd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	58024400 	.word	0x58024400
 8008ce0:	0800b964 	.word	0x0800b964

08008ce4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b089      	sub	sp, #36	@ 0x24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cec:	4ba1      	ldr	r3, [pc, #644]	@ (8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf0:	f003 0303 	and.w	r3, r3, #3
 8008cf4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008cf6:	4b9f      	ldr	r3, [pc, #636]	@ (8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cfa:	0b1b      	lsrs	r3, r3, #12
 8008cfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008d02:	4b9c      	ldr	r3, [pc, #624]	@ (8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d06:	091b      	lsrs	r3, r3, #4
 8008d08:	f003 0301 	and.w	r3, r3, #1
 8008d0c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008d0e:	4b99      	ldr	r3, [pc, #612]	@ (8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d12:	08db      	lsrs	r3, r3, #3
 8008d14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	fb02 f303 	mul.w	r3, r2, r3
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 8111 	beq.w	8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	f000 8083 	beq.w	8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	f200 80a1 	bhi.w	8008e84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d056      	beq.n	8008dfc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008d4e:	e099      	b.n	8008e84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d50:	4b88      	ldr	r3, [pc, #544]	@ (8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 0320 	and.w	r3, r3, #32
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d02d      	beq.n	8008db8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d5c:	4b85      	ldr	r3, [pc, #532]	@ (8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	08db      	lsrs	r3, r3, #3
 8008d62:	f003 0303 	and.w	r3, r3, #3
 8008d66:	4a84      	ldr	r2, [pc, #528]	@ (8008f78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d68:	fa22 f303 	lsr.w	r3, r2, r3
 8008d6c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	ee07 3a90 	vmov	s15, r3
 8008d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	ee07 3a90 	vmov	s15, r3
 8008d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d86:	4b7b      	ldr	r3, [pc, #492]	@ (8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d8e:	ee07 3a90 	vmov	s15, r3
 8008d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008f7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008db2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008db6:	e087      	b.n	8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	ee07 3a90 	vmov	s15, r3
 8008dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dca:	4b6a      	ldr	r3, [pc, #424]	@ (8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dde:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008f7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dfa:	e065      	b.n	8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	ee07 3a90 	vmov	s15, r3
 8008e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e0e:	4b59      	ldr	r3, [pc, #356]	@ (8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e16:	ee07 3a90 	vmov	s15, r3
 8008e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008f7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e3e:	e043      	b.n	8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	ee07 3a90 	vmov	s15, r3
 8008e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008f88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e52:	4b48      	ldr	r3, [pc, #288]	@ (8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e5a:	ee07 3a90 	vmov	s15, r3
 8008e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008f7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e82:	e021      	b.n	8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	ee07 3a90 	vmov	s15, r3
 8008e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e96:	4b37      	ldr	r3, [pc, #220]	@ (8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e9e:	ee07 3a90 	vmov	s15, r3
 8008ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eaa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008f7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ec6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ecc:	0a5b      	lsrs	r3, r3, #9
 8008ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ed2:	ee07 3a90 	vmov	s15, r3
 8008ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ede:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ee2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eee:	ee17 2a90 	vmov	r2, s15
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008efa:	0c1b      	lsrs	r3, r3, #16
 8008efc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f00:	ee07 3a90 	vmov	s15, r3
 8008f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f10:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f1c:	ee17 2a90 	vmov	r2, s15
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008f24:	4b13      	ldr	r3, [pc, #76]	@ (8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f28:	0e1b      	lsrs	r3, r3, #24
 8008f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f4a:	ee17 2a90 	vmov	r2, s15
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008f52:	e008      	b.n	8008f66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	609a      	str	r2, [r3, #8]
}
 8008f66:	bf00      	nop
 8008f68:	3724      	adds	r7, #36	@ 0x24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	58024400 	.word	0x58024400
 8008f78:	03d09000 	.word	0x03d09000
 8008f7c:	46000000 	.word	0x46000000
 8008f80:	4c742400 	.word	0x4c742400
 8008f84:	4a742400 	.word	0x4a742400
 8008f88:	4bb71b00 	.word	0x4bb71b00

08008f8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b089      	sub	sp, #36	@ 0x24
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f94:	4ba1      	ldr	r3, [pc, #644]	@ (800921c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f98:	f003 0303 	and.w	r3, r3, #3
 8008f9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008f9e:	4b9f      	ldr	r3, [pc, #636]	@ (800921c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa2:	0d1b      	lsrs	r3, r3, #20
 8008fa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fa8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008faa:	4b9c      	ldr	r3, [pc, #624]	@ (800921c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fae:	0a1b      	lsrs	r3, r3, #8
 8008fb0:	f003 0301 	and.w	r3, r3, #1
 8008fb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008fb6:	4b99      	ldr	r3, [pc, #612]	@ (800921c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fba:	08db      	lsrs	r3, r3, #3
 8008fbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	fb02 f303 	mul.w	r3, r2, r3
 8008fc6:	ee07 3a90 	vmov	s15, r3
 8008fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 8111 	beq.w	80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	f000 8083 	beq.w	80090e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	f200 80a1 	bhi.w	800912c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d003      	beq.n	8008ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d056      	beq.n	80090a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008ff6:	e099      	b.n	800912c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ff8:	4b88      	ldr	r3, [pc, #544]	@ (800921c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 0320 	and.w	r3, r3, #32
 8009000:	2b00      	cmp	r3, #0
 8009002:	d02d      	beq.n	8009060 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009004:	4b85      	ldr	r3, [pc, #532]	@ (800921c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	08db      	lsrs	r3, r3, #3
 800900a:	f003 0303 	and.w	r3, r3, #3
 800900e:	4a84      	ldr	r2, [pc, #528]	@ (8009220 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009010:	fa22 f303 	lsr.w	r3, r2, r3
 8009014:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	ee07 3a90 	vmov	s15, r3
 800901c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	ee07 3a90 	vmov	s15, r3
 8009026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800902a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800902e:	4b7b      	ldr	r3, [pc, #492]	@ (800921c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009036:	ee07 3a90 	vmov	s15, r3
 800903a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800903e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009042:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009224 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800904a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800904e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800905a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800905e:	e087      	b.n	8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	ee07 3a90 	vmov	s15, r3
 8009066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800906a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800906e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009072:	4b6a      	ldr	r3, [pc, #424]	@ (800921c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800907a:	ee07 3a90 	vmov	s15, r3
 800907e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009082:	ed97 6a03 	vldr	s12, [r7, #12]
 8009086:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009224 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800908a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800908e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800909a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800909e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090a2:	e065      	b.n	8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	ee07 3a90 	vmov	s15, r3
 80090aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800922c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090b6:	4b59      	ldr	r3, [pc, #356]	@ (800921c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090be:	ee07 3a90 	vmov	s15, r3
 80090c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009224 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090e6:	e043      	b.n	8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	ee07 3a90 	vmov	s15, r3
 80090ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009230 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80090f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090fa:	4b48      	ldr	r3, [pc, #288]	@ (800921c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009102:	ee07 3a90 	vmov	s15, r3
 8009106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800910a:	ed97 6a03 	vldr	s12, [r7, #12]
 800910e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009224 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800911a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800911e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800912a:	e021      	b.n	8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	ee07 3a90 	vmov	s15, r3
 8009132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009136:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800922c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800913a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800913e:	4b37      	ldr	r3, [pc, #220]	@ (800921c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009146:	ee07 3a90 	vmov	s15, r3
 800914a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800914e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009152:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009224 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800915a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800915e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800916a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800916e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009170:	4b2a      	ldr	r3, [pc, #168]	@ (800921c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009174:	0a5b      	lsrs	r3, r3, #9
 8009176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009182:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009186:	ee37 7a87 	vadd.f32	s14, s15, s14
 800918a:	edd7 6a07 	vldr	s13, [r7, #28]
 800918e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009196:	ee17 2a90 	vmov	r2, s15
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800919e:	4b1f      	ldr	r3, [pc, #124]	@ (800921c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a2:	0c1b      	lsrs	r3, r3, #16
 80091a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091a8:	ee07 3a90 	vmov	s15, r3
 80091ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80091bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091c4:	ee17 2a90 	vmov	r2, s15
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80091cc:	4b13      	ldr	r3, [pc, #76]	@ (800921c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d0:	0e1b      	lsrs	r3, r3, #24
 80091d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091d6:	ee07 3a90 	vmov	s15, r3
 80091da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80091ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091f2:	ee17 2a90 	vmov	r2, s15
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80091fa:	e008      	b.n	800920e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	609a      	str	r2, [r3, #8]
}
 800920e:	bf00      	nop
 8009210:	3724      	adds	r7, #36	@ 0x24
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	58024400 	.word	0x58024400
 8009220:	03d09000 	.word	0x03d09000
 8009224:	46000000 	.word	0x46000000
 8009228:	4c742400 	.word	0x4c742400
 800922c:	4a742400 	.word	0x4a742400
 8009230:	4bb71b00 	.word	0x4bb71b00

08009234 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009234:	b480      	push	{r7}
 8009236:	b089      	sub	sp, #36	@ 0x24
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800923c:	4ba0      	ldr	r3, [pc, #640]	@ (80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800923e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009240:	f003 0303 	and.w	r3, r3, #3
 8009244:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009246:	4b9e      	ldr	r3, [pc, #632]	@ (80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800924a:	091b      	lsrs	r3, r3, #4
 800924c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009250:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009252:	4b9b      	ldr	r3, [pc, #620]	@ (80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800925c:	4b98      	ldr	r3, [pc, #608]	@ (80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800925e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009260:	08db      	lsrs	r3, r3, #3
 8009262:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	fb02 f303 	mul.w	r3, r2, r3
 800926c:	ee07 3a90 	vmov	s15, r3
 8009270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009274:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	2b00      	cmp	r3, #0
 800927c:	f000 8111 	beq.w	80094a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	2b02      	cmp	r3, #2
 8009284:	f000 8083 	beq.w	800938e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	2b02      	cmp	r3, #2
 800928c:	f200 80a1 	bhi.w	80093d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d003      	beq.n	800929e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d056      	beq.n	800934a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800929c:	e099      	b.n	80093d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800929e:	4b88      	ldr	r3, [pc, #544]	@ (80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 0320 	and.w	r3, r3, #32
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d02d      	beq.n	8009306 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092aa:	4b85      	ldr	r3, [pc, #532]	@ (80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	08db      	lsrs	r3, r3, #3
 80092b0:	f003 0303 	and.w	r3, r3, #3
 80092b4:	4a83      	ldr	r2, [pc, #524]	@ (80094c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80092b6:	fa22 f303 	lsr.w	r3, r2, r3
 80092ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	ee07 3a90 	vmov	s15, r3
 80092c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	ee07 3a90 	vmov	s15, r3
 80092cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092d4:	4b7a      	ldr	r3, [pc, #488]	@ (80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092dc:	ee07 3a90 	vmov	s15, r3
 80092e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80092e8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80094c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009300:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009304:	e087      	b.n	8009416 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	ee07 3a90 	vmov	s15, r3
 800930c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009310:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80094cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009314:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009318:	4b69      	ldr	r3, [pc, #420]	@ (80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800931a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800931c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009320:	ee07 3a90 	vmov	s15, r3
 8009324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009328:	ed97 6a03 	vldr	s12, [r7, #12]
 800932c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80094c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009330:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009334:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009338:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800933c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009344:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009348:	e065      	b.n	8009416 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	ee07 3a90 	vmov	s15, r3
 8009350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009354:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80094d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009358:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800935c:	4b58      	ldr	r3, [pc, #352]	@ (80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800935e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009364:	ee07 3a90 	vmov	s15, r3
 8009368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800936c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009370:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80094c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009374:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009378:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800937c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009380:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009388:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800938c:	e043      	b.n	8009416 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	ee07 3a90 	vmov	s15, r3
 8009394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009398:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80094d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800939c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093a0:	4b47      	ldr	r3, [pc, #284]	@ (80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a8:	ee07 3a90 	vmov	s15, r3
 80093ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80093b4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80094c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093d0:	e021      	b.n	8009416 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	ee07 3a90 	vmov	s15, r3
 80093d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093dc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80094cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80093e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093e4:	4b36      	ldr	r3, [pc, #216]	@ (80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ec:	ee07 3a90 	vmov	s15, r3
 80093f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80093f8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80094c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009400:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009404:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800940c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009410:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009414:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009416:	4b2a      	ldr	r3, [pc, #168]	@ (80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800941a:	0a5b      	lsrs	r3, r3, #9
 800941c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009420:	ee07 3a90 	vmov	s15, r3
 8009424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009428:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800942c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009430:	edd7 6a07 	vldr	s13, [r7, #28]
 8009434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800943c:	ee17 2a90 	vmov	r2, s15
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009444:	4b1e      	ldr	r3, [pc, #120]	@ (80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009448:	0c1b      	lsrs	r3, r3, #16
 800944a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800944e:	ee07 3a90 	vmov	s15, r3
 8009452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009456:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800945a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800945e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800946a:	ee17 2a90 	vmov	r2, s15
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009472:	4b13      	ldr	r3, [pc, #76]	@ (80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009476:	0e1b      	lsrs	r3, r3, #24
 8009478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800947c:	ee07 3a90 	vmov	s15, r3
 8009480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009484:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009488:	ee37 7a87 	vadd.f32	s14, s15, s14
 800948c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009498:	ee17 2a90 	vmov	r2, s15
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80094a0:	e008      	b.n	80094b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	609a      	str	r2, [r3, #8]
}
 80094b4:	bf00      	nop
 80094b6:	3724      	adds	r7, #36	@ 0x24
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr
 80094c0:	58024400 	.word	0x58024400
 80094c4:	03d09000 	.word	0x03d09000
 80094c8:	46000000 	.word	0x46000000
 80094cc:	4c742400 	.word	0x4c742400
 80094d0:	4a742400 	.word	0x4a742400
 80094d4:	4bb71b00 	.word	0x4bb71b00

080094d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80094e6:	4b53      	ldr	r3, [pc, #332]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 80094e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ea:	f003 0303 	and.w	r3, r3, #3
 80094ee:	2b03      	cmp	r3, #3
 80094f0:	d101      	bne.n	80094f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e099      	b.n	800962a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80094f6:	4b4f      	ldr	r3, [pc, #316]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a4e      	ldr	r2, [pc, #312]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 80094fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009502:	f7f9 f965 	bl	80027d0 <HAL_GetTick>
 8009506:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009508:	e008      	b.n	800951c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800950a:	f7f9 f961 	bl	80027d0 <HAL_GetTick>
 800950e:	4602      	mov	r2, r0
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	1ad3      	subs	r3, r2, r3
 8009514:	2b02      	cmp	r3, #2
 8009516:	d901      	bls.n	800951c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009518:	2303      	movs	r3, #3
 800951a:	e086      	b.n	800962a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800951c:	4b45      	ldr	r3, [pc, #276]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1f0      	bne.n	800950a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009528:	4b42      	ldr	r3, [pc, #264]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 800952a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800952c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	031b      	lsls	r3, r3, #12
 8009536:	493f      	ldr	r1, [pc, #252]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 8009538:	4313      	orrs	r3, r2
 800953a:	628b      	str	r3, [r1, #40]	@ 0x28
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	3b01      	subs	r3, #1
 8009542:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	3b01      	subs	r3, #1
 800954c:	025b      	lsls	r3, r3, #9
 800954e:	b29b      	uxth	r3, r3
 8009550:	431a      	orrs	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	3b01      	subs	r3, #1
 8009558:	041b      	lsls	r3, r3, #16
 800955a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800955e:	431a      	orrs	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	3b01      	subs	r3, #1
 8009566:	061b      	lsls	r3, r3, #24
 8009568:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800956c:	4931      	ldr	r1, [pc, #196]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 800956e:	4313      	orrs	r3, r2
 8009570:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009572:	4b30      	ldr	r3, [pc, #192]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 8009574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009576:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	695b      	ldr	r3, [r3, #20]
 800957e:	492d      	ldr	r1, [pc, #180]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 8009580:	4313      	orrs	r3, r2
 8009582:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009584:	4b2b      	ldr	r3, [pc, #172]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 8009586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009588:	f023 0220 	bic.w	r2, r3, #32
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	4928      	ldr	r1, [pc, #160]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 8009592:	4313      	orrs	r3, r2
 8009594:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009596:	4b27      	ldr	r3, [pc, #156]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 8009598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800959a:	4a26      	ldr	r2, [pc, #152]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 800959c:	f023 0310 	bic.w	r3, r3, #16
 80095a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80095a2:	4b24      	ldr	r3, [pc, #144]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 80095a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095a6:	4b24      	ldr	r3, [pc, #144]	@ (8009638 <RCCEx_PLL2_Config+0x160>)
 80095a8:	4013      	ands	r3, r2
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	69d2      	ldr	r2, [r2, #28]
 80095ae:	00d2      	lsls	r2, r2, #3
 80095b0:	4920      	ldr	r1, [pc, #128]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 80095b2:	4313      	orrs	r3, r2
 80095b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80095b6:	4b1f      	ldr	r3, [pc, #124]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 80095b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 80095bc:	f043 0310 	orr.w	r3, r3, #16
 80095c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d106      	bne.n	80095d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80095c8:	4b1a      	ldr	r3, [pc, #104]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 80095ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095cc:	4a19      	ldr	r2, [pc, #100]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 80095ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80095d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80095d4:	e00f      	b.n	80095f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d106      	bne.n	80095ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80095dc:	4b15      	ldr	r3, [pc, #84]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 80095de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e0:	4a14      	ldr	r2, [pc, #80]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 80095e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80095e8:	e005      	b.n	80095f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80095ea:	4b12      	ldr	r3, [pc, #72]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 80095ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ee:	4a11      	ldr	r2, [pc, #68]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 80095f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80095f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80095f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a0e      	ldr	r2, [pc, #56]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 80095fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009600:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009602:	f7f9 f8e5 	bl	80027d0 <HAL_GetTick>
 8009606:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009608:	e008      	b.n	800961c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800960a:	f7f9 f8e1 	bl	80027d0 <HAL_GetTick>
 800960e:	4602      	mov	r2, r0
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	1ad3      	subs	r3, r2, r3
 8009614:	2b02      	cmp	r3, #2
 8009616:	d901      	bls.n	800961c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009618:	2303      	movs	r3, #3
 800961a:	e006      	b.n	800962a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800961c:	4b05      	ldr	r3, [pc, #20]	@ (8009634 <RCCEx_PLL2_Config+0x15c>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d0f0      	beq.n	800960a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009628:	7bfb      	ldrb	r3, [r7, #15]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	58024400 	.word	0x58024400
 8009638:	ffff0007 	.word	0xffff0007

0800963c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800964a:	4b53      	ldr	r3, [pc, #332]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 800964c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800964e:	f003 0303 	and.w	r3, r3, #3
 8009652:	2b03      	cmp	r3, #3
 8009654:	d101      	bne.n	800965a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e099      	b.n	800978e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800965a:	4b4f      	ldr	r3, [pc, #316]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a4e      	ldr	r2, [pc, #312]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 8009660:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009664:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009666:	f7f9 f8b3 	bl	80027d0 <HAL_GetTick>
 800966a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800966c:	e008      	b.n	8009680 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800966e:	f7f9 f8af 	bl	80027d0 <HAL_GetTick>
 8009672:	4602      	mov	r2, r0
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	2b02      	cmp	r3, #2
 800967a:	d901      	bls.n	8009680 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800967c:	2303      	movs	r3, #3
 800967e:	e086      	b.n	800978e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009680:	4b45      	ldr	r3, [pc, #276]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1f0      	bne.n	800966e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800968c:	4b42      	ldr	r3, [pc, #264]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 800968e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009690:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	051b      	lsls	r3, r3, #20
 800969a:	493f      	ldr	r1, [pc, #252]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 800969c:	4313      	orrs	r3, r2
 800969e:	628b      	str	r3, [r1, #40]	@ 0x28
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	3b01      	subs	r3, #1
 80096a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	3b01      	subs	r3, #1
 80096b0:	025b      	lsls	r3, r3, #9
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	431a      	orrs	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	3b01      	subs	r3, #1
 80096bc:	041b      	lsls	r3, r3, #16
 80096be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80096c2:	431a      	orrs	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	3b01      	subs	r3, #1
 80096ca:	061b      	lsls	r3, r3, #24
 80096cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80096d0:	4931      	ldr	r1, [pc, #196]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80096d6:	4b30      	ldr	r3, [pc, #192]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 80096d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	695b      	ldr	r3, [r3, #20]
 80096e2:	492d      	ldr	r1, [pc, #180]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 80096e4:	4313      	orrs	r3, r2
 80096e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80096e8:	4b2b      	ldr	r3, [pc, #172]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 80096ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	4928      	ldr	r1, [pc, #160]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 80096f6:	4313      	orrs	r3, r2
 80096f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80096fa:	4b27      	ldr	r3, [pc, #156]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 80096fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096fe:	4a26      	ldr	r2, [pc, #152]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 8009700:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009704:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009706:	4b24      	ldr	r3, [pc, #144]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 8009708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800970a:	4b24      	ldr	r3, [pc, #144]	@ (800979c <RCCEx_PLL3_Config+0x160>)
 800970c:	4013      	ands	r3, r2
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	69d2      	ldr	r2, [r2, #28]
 8009712:	00d2      	lsls	r2, r2, #3
 8009714:	4920      	ldr	r1, [pc, #128]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 8009716:	4313      	orrs	r3, r2
 8009718:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800971a:	4b1f      	ldr	r3, [pc, #124]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 800971c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971e:	4a1e      	ldr	r2, [pc, #120]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 8009720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009724:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d106      	bne.n	800973a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800972c:	4b1a      	ldr	r3, [pc, #104]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 800972e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009730:	4a19      	ldr	r2, [pc, #100]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 8009732:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009736:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009738:	e00f      	b.n	800975a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d106      	bne.n	800974e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009740:	4b15      	ldr	r3, [pc, #84]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 8009742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009744:	4a14      	ldr	r2, [pc, #80]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 8009746:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800974a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800974c:	e005      	b.n	800975a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800974e:	4b12      	ldr	r3, [pc, #72]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 8009750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009752:	4a11      	ldr	r2, [pc, #68]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 8009754:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009758:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800975a:	4b0f      	ldr	r3, [pc, #60]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a0e      	ldr	r2, [pc, #56]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 8009760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009764:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009766:	f7f9 f833 	bl	80027d0 <HAL_GetTick>
 800976a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800976c:	e008      	b.n	8009780 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800976e:	f7f9 f82f 	bl	80027d0 <HAL_GetTick>
 8009772:	4602      	mov	r2, r0
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	2b02      	cmp	r3, #2
 800977a:	d901      	bls.n	8009780 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800977c:	2303      	movs	r3, #3
 800977e:	e006      	b.n	800978e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009780:	4b05      	ldr	r3, [pc, #20]	@ (8009798 <RCCEx_PLL3_Config+0x15c>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d0f0      	beq.n	800976e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800978c:	7bfb      	ldrb	r3, [r7, #15]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	58024400 	.word	0x58024400
 800979c:	ffff0007 	.word	0xffff0007

080097a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d101      	bne.n	80097b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e042      	b.n	8009838 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d106      	bne.n	80097ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7f8 fe03 	bl	80023d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2224      	movs	r2, #36	@ 0x24
 80097ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f022 0201 	bic.w	r2, r2, #1
 80097e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d002      	beq.n	80097f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 ff38 	bl	800a660 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f8c9 	bl	8009988 <UART_SetConfig>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d101      	bne.n	8009800 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e01b      	b.n	8009838 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800980e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689a      	ldr	r2, [r3, #8]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800981e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f042 0201 	orr.w	r2, r2, #1
 800982e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 ffb7 	bl	800a7a4 <UART_CheckIdleState>
 8009836:	4603      	mov	r3, r0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b08a      	sub	sp, #40	@ 0x28
 8009844:	af02      	add	r7, sp, #8
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	603b      	str	r3, [r7, #0]
 800984c:	4613      	mov	r3, r2
 800984e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009856:	2b20      	cmp	r3, #32
 8009858:	d17b      	bne.n	8009952 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d002      	beq.n	8009866 <HAL_UART_Transmit+0x26>
 8009860:	88fb      	ldrh	r3, [r7, #6]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d101      	bne.n	800986a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	e074      	b.n	8009954 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2200      	movs	r2, #0
 800986e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2221      	movs	r2, #33	@ 0x21
 8009876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800987a:	f7f8 ffa9 	bl	80027d0 <HAL_GetTick>
 800987e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	88fa      	ldrh	r2, [r7, #6]
 8009884:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	88fa      	ldrh	r2, [r7, #6]
 800988c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009898:	d108      	bne.n	80098ac <HAL_UART_Transmit+0x6c>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d104      	bne.n	80098ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80098a2:	2300      	movs	r3, #0
 80098a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	61bb      	str	r3, [r7, #24]
 80098aa:	e003      	b.n	80098b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80098b0:	2300      	movs	r3, #0
 80098b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80098b4:	e030      	b.n	8009918 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2200      	movs	r2, #0
 80098be:	2180      	movs	r1, #128	@ 0x80
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f001 f819 	bl	800a8f8 <UART_WaitOnFlagUntilTimeout>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d005      	beq.n	80098d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2220      	movs	r2, #32
 80098d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80098d4:	2303      	movs	r3, #3
 80098d6:	e03d      	b.n	8009954 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d10b      	bne.n	80098f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	881b      	ldrh	r3, [r3, #0]
 80098e2:	461a      	mov	r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	3302      	adds	r3, #2
 80098f2:	61bb      	str	r3, [r7, #24]
 80098f4:	e007      	b.n	8009906 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	781a      	ldrb	r2, [r3, #0]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	3301      	adds	r3, #1
 8009904:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800990c:	b29b      	uxth	r3, r3
 800990e:	3b01      	subs	r3, #1
 8009910:	b29a      	uxth	r2, r3
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800991e:	b29b      	uxth	r3, r3
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1c8      	bne.n	80098b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	2200      	movs	r2, #0
 800992c:	2140      	movs	r1, #64	@ 0x40
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f000 ffe2 	bl	800a8f8 <UART_WaitOnFlagUntilTimeout>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d005      	beq.n	8009946 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2220      	movs	r2, #32
 800993e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009942:	2303      	movs	r3, #3
 8009944:	e006      	b.n	8009954 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2220      	movs	r2, #32
 800994a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	e000      	b.n	8009954 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009952:	2302      	movs	r3, #2
  }
}
 8009954:	4618      	mov	r0, r3
 8009956:	3720      	adds	r7, #32
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800995c:	b480      	push	{r7}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800996a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009972:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	4313      	orrs	r3, r2
}
 800997a:	4618      	mov	r0, r3
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
	...

08009988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800998c:	b092      	sub	sp, #72	@ 0x48
 800998e:	af00      	add	r7, sp, #0
 8009990:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009992:	2300      	movs	r3, #0
 8009994:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	689a      	ldr	r2, [r3, #8]
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	431a      	orrs	r2, r3
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	431a      	orrs	r2, r3
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	69db      	ldr	r3, [r3, #28]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	4bbe      	ldr	r3, [pc, #760]	@ (8009cb0 <UART_SetConfig+0x328>)
 80099b8:	4013      	ands	r3, r2
 80099ba:	697a      	ldr	r2, [r7, #20]
 80099bc:	6812      	ldr	r2, [r2, #0]
 80099be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80099c0:	430b      	orrs	r3, r1
 80099c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	68da      	ldr	r2, [r3, #12]
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	430a      	orrs	r2, r1
 80099d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4ab3      	ldr	r2, [pc, #716]	@ (8009cb4 <UART_SetConfig+0x32c>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d004      	beq.n	80099f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099f0:	4313      	orrs	r3, r2
 80099f2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	689a      	ldr	r2, [r3, #8]
 80099fa:	4baf      	ldr	r3, [pc, #700]	@ (8009cb8 <UART_SetConfig+0x330>)
 80099fc:	4013      	ands	r3, r2
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	6812      	ldr	r2, [r2, #0]
 8009a02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009a04:	430b      	orrs	r3, r1
 8009a06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a0e:	f023 010f 	bic.w	r1, r3, #15
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4aa6      	ldr	r2, [pc, #664]	@ (8009cbc <UART_SetConfig+0x334>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d177      	bne.n	8009b18 <UART_SetConfig+0x190>
 8009a28:	4ba5      	ldr	r3, [pc, #660]	@ (8009cc0 <UART_SetConfig+0x338>)
 8009a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a30:	2b28      	cmp	r3, #40	@ 0x28
 8009a32:	d86d      	bhi.n	8009b10 <UART_SetConfig+0x188>
 8009a34:	a201      	add	r2, pc, #4	@ (adr r2, 8009a3c <UART_SetConfig+0xb4>)
 8009a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3a:	bf00      	nop
 8009a3c:	08009ae1 	.word	0x08009ae1
 8009a40:	08009b11 	.word	0x08009b11
 8009a44:	08009b11 	.word	0x08009b11
 8009a48:	08009b11 	.word	0x08009b11
 8009a4c:	08009b11 	.word	0x08009b11
 8009a50:	08009b11 	.word	0x08009b11
 8009a54:	08009b11 	.word	0x08009b11
 8009a58:	08009b11 	.word	0x08009b11
 8009a5c:	08009ae9 	.word	0x08009ae9
 8009a60:	08009b11 	.word	0x08009b11
 8009a64:	08009b11 	.word	0x08009b11
 8009a68:	08009b11 	.word	0x08009b11
 8009a6c:	08009b11 	.word	0x08009b11
 8009a70:	08009b11 	.word	0x08009b11
 8009a74:	08009b11 	.word	0x08009b11
 8009a78:	08009b11 	.word	0x08009b11
 8009a7c:	08009af1 	.word	0x08009af1
 8009a80:	08009b11 	.word	0x08009b11
 8009a84:	08009b11 	.word	0x08009b11
 8009a88:	08009b11 	.word	0x08009b11
 8009a8c:	08009b11 	.word	0x08009b11
 8009a90:	08009b11 	.word	0x08009b11
 8009a94:	08009b11 	.word	0x08009b11
 8009a98:	08009b11 	.word	0x08009b11
 8009a9c:	08009af9 	.word	0x08009af9
 8009aa0:	08009b11 	.word	0x08009b11
 8009aa4:	08009b11 	.word	0x08009b11
 8009aa8:	08009b11 	.word	0x08009b11
 8009aac:	08009b11 	.word	0x08009b11
 8009ab0:	08009b11 	.word	0x08009b11
 8009ab4:	08009b11 	.word	0x08009b11
 8009ab8:	08009b11 	.word	0x08009b11
 8009abc:	08009b01 	.word	0x08009b01
 8009ac0:	08009b11 	.word	0x08009b11
 8009ac4:	08009b11 	.word	0x08009b11
 8009ac8:	08009b11 	.word	0x08009b11
 8009acc:	08009b11 	.word	0x08009b11
 8009ad0:	08009b11 	.word	0x08009b11
 8009ad4:	08009b11 	.word	0x08009b11
 8009ad8:	08009b11 	.word	0x08009b11
 8009adc:	08009b09 	.word	0x08009b09
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ae6:	e326      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009ae8:	2304      	movs	r3, #4
 8009aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aee:	e322      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009af0:	2308      	movs	r3, #8
 8009af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009af6:	e31e      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009af8:	2310      	movs	r3, #16
 8009afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afe:	e31a      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009b00:	2320      	movs	r3, #32
 8009b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b06:	e316      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009b08:	2340      	movs	r3, #64	@ 0x40
 8009b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0e:	e312      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009b10:	2380      	movs	r3, #128	@ 0x80
 8009b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b16:	e30e      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a69      	ldr	r2, [pc, #420]	@ (8009cc4 <UART_SetConfig+0x33c>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d130      	bne.n	8009b84 <UART_SetConfig+0x1fc>
 8009b22:	4b67      	ldr	r3, [pc, #412]	@ (8009cc0 <UART_SetConfig+0x338>)
 8009b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b26:	f003 0307 	and.w	r3, r3, #7
 8009b2a:	2b05      	cmp	r3, #5
 8009b2c:	d826      	bhi.n	8009b7c <UART_SetConfig+0x1f4>
 8009b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b34 <UART_SetConfig+0x1ac>)
 8009b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b34:	08009b4d 	.word	0x08009b4d
 8009b38:	08009b55 	.word	0x08009b55
 8009b3c:	08009b5d 	.word	0x08009b5d
 8009b40:	08009b65 	.word	0x08009b65
 8009b44:	08009b6d 	.word	0x08009b6d
 8009b48:	08009b75 	.word	0x08009b75
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b52:	e2f0      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009b54:	2304      	movs	r3, #4
 8009b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b5a:	e2ec      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009b5c:	2308      	movs	r3, #8
 8009b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b62:	e2e8      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009b64:	2310      	movs	r3, #16
 8009b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b6a:	e2e4      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009b6c:	2320      	movs	r3, #32
 8009b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b72:	e2e0      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009b74:	2340      	movs	r3, #64	@ 0x40
 8009b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b7a:	e2dc      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009b7c:	2380      	movs	r3, #128	@ 0x80
 8009b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b82:	e2d8      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a4f      	ldr	r2, [pc, #316]	@ (8009cc8 <UART_SetConfig+0x340>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d130      	bne.n	8009bf0 <UART_SetConfig+0x268>
 8009b8e:	4b4c      	ldr	r3, [pc, #304]	@ (8009cc0 <UART_SetConfig+0x338>)
 8009b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b92:	f003 0307 	and.w	r3, r3, #7
 8009b96:	2b05      	cmp	r3, #5
 8009b98:	d826      	bhi.n	8009be8 <UART_SetConfig+0x260>
 8009b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8009ba0 <UART_SetConfig+0x218>)
 8009b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba0:	08009bb9 	.word	0x08009bb9
 8009ba4:	08009bc1 	.word	0x08009bc1
 8009ba8:	08009bc9 	.word	0x08009bc9
 8009bac:	08009bd1 	.word	0x08009bd1
 8009bb0:	08009bd9 	.word	0x08009bd9
 8009bb4:	08009be1 	.word	0x08009be1
 8009bb8:	2300      	movs	r3, #0
 8009bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bbe:	e2ba      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009bc0:	2304      	movs	r3, #4
 8009bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bc6:	e2b6      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009bc8:	2308      	movs	r3, #8
 8009bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bce:	e2b2      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009bd0:	2310      	movs	r3, #16
 8009bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bd6:	e2ae      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009bd8:	2320      	movs	r3, #32
 8009bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bde:	e2aa      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009be0:	2340      	movs	r3, #64	@ 0x40
 8009be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009be6:	e2a6      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009be8:	2380      	movs	r3, #128	@ 0x80
 8009bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bee:	e2a2      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a35      	ldr	r2, [pc, #212]	@ (8009ccc <UART_SetConfig+0x344>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d130      	bne.n	8009c5c <UART_SetConfig+0x2d4>
 8009bfa:	4b31      	ldr	r3, [pc, #196]	@ (8009cc0 <UART_SetConfig+0x338>)
 8009bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bfe:	f003 0307 	and.w	r3, r3, #7
 8009c02:	2b05      	cmp	r3, #5
 8009c04:	d826      	bhi.n	8009c54 <UART_SetConfig+0x2cc>
 8009c06:	a201      	add	r2, pc, #4	@ (adr r2, 8009c0c <UART_SetConfig+0x284>)
 8009c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0c:	08009c25 	.word	0x08009c25
 8009c10:	08009c2d 	.word	0x08009c2d
 8009c14:	08009c35 	.word	0x08009c35
 8009c18:	08009c3d 	.word	0x08009c3d
 8009c1c:	08009c45 	.word	0x08009c45
 8009c20:	08009c4d 	.word	0x08009c4d
 8009c24:	2300      	movs	r3, #0
 8009c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c2a:	e284      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009c2c:	2304      	movs	r3, #4
 8009c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c32:	e280      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009c34:	2308      	movs	r3, #8
 8009c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c3a:	e27c      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009c3c:	2310      	movs	r3, #16
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c42:	e278      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009c44:	2320      	movs	r3, #32
 8009c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c4a:	e274      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009c4c:	2340      	movs	r3, #64	@ 0x40
 8009c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c52:	e270      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009c54:	2380      	movs	r3, #128	@ 0x80
 8009c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c5a:	e26c      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a1b      	ldr	r2, [pc, #108]	@ (8009cd0 <UART_SetConfig+0x348>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d142      	bne.n	8009cec <UART_SetConfig+0x364>
 8009c66:	4b16      	ldr	r3, [pc, #88]	@ (8009cc0 <UART_SetConfig+0x338>)
 8009c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c6a:	f003 0307 	and.w	r3, r3, #7
 8009c6e:	2b05      	cmp	r3, #5
 8009c70:	d838      	bhi.n	8009ce4 <UART_SetConfig+0x35c>
 8009c72:	a201      	add	r2, pc, #4	@ (adr r2, 8009c78 <UART_SetConfig+0x2f0>)
 8009c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c78:	08009c91 	.word	0x08009c91
 8009c7c:	08009c99 	.word	0x08009c99
 8009c80:	08009ca1 	.word	0x08009ca1
 8009c84:	08009ca9 	.word	0x08009ca9
 8009c88:	08009cd5 	.word	0x08009cd5
 8009c8c:	08009cdd 	.word	0x08009cdd
 8009c90:	2300      	movs	r3, #0
 8009c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c96:	e24e      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009c98:	2304      	movs	r3, #4
 8009c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c9e:	e24a      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009ca0:	2308      	movs	r3, #8
 8009ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ca6:	e246      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009ca8:	2310      	movs	r3, #16
 8009caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cae:	e242      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009cb0:	cfff69f3 	.word	0xcfff69f3
 8009cb4:	58000c00 	.word	0x58000c00
 8009cb8:	11fff4ff 	.word	0x11fff4ff
 8009cbc:	40011000 	.word	0x40011000
 8009cc0:	58024400 	.word	0x58024400
 8009cc4:	40004400 	.word	0x40004400
 8009cc8:	40004800 	.word	0x40004800
 8009ccc:	40004c00 	.word	0x40004c00
 8009cd0:	40005000 	.word	0x40005000
 8009cd4:	2320      	movs	r3, #32
 8009cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cda:	e22c      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009cdc:	2340      	movs	r3, #64	@ 0x40
 8009cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ce2:	e228      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009ce4:	2380      	movs	r3, #128	@ 0x80
 8009ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cea:	e224      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4ab1      	ldr	r2, [pc, #708]	@ (8009fb8 <UART_SetConfig+0x630>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d176      	bne.n	8009de4 <UART_SetConfig+0x45c>
 8009cf6:	4bb1      	ldr	r3, [pc, #708]	@ (8009fbc <UART_SetConfig+0x634>)
 8009cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009cfe:	2b28      	cmp	r3, #40	@ 0x28
 8009d00:	d86c      	bhi.n	8009ddc <UART_SetConfig+0x454>
 8009d02:	a201      	add	r2, pc, #4	@ (adr r2, 8009d08 <UART_SetConfig+0x380>)
 8009d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d08:	08009dad 	.word	0x08009dad
 8009d0c:	08009ddd 	.word	0x08009ddd
 8009d10:	08009ddd 	.word	0x08009ddd
 8009d14:	08009ddd 	.word	0x08009ddd
 8009d18:	08009ddd 	.word	0x08009ddd
 8009d1c:	08009ddd 	.word	0x08009ddd
 8009d20:	08009ddd 	.word	0x08009ddd
 8009d24:	08009ddd 	.word	0x08009ddd
 8009d28:	08009db5 	.word	0x08009db5
 8009d2c:	08009ddd 	.word	0x08009ddd
 8009d30:	08009ddd 	.word	0x08009ddd
 8009d34:	08009ddd 	.word	0x08009ddd
 8009d38:	08009ddd 	.word	0x08009ddd
 8009d3c:	08009ddd 	.word	0x08009ddd
 8009d40:	08009ddd 	.word	0x08009ddd
 8009d44:	08009ddd 	.word	0x08009ddd
 8009d48:	08009dbd 	.word	0x08009dbd
 8009d4c:	08009ddd 	.word	0x08009ddd
 8009d50:	08009ddd 	.word	0x08009ddd
 8009d54:	08009ddd 	.word	0x08009ddd
 8009d58:	08009ddd 	.word	0x08009ddd
 8009d5c:	08009ddd 	.word	0x08009ddd
 8009d60:	08009ddd 	.word	0x08009ddd
 8009d64:	08009ddd 	.word	0x08009ddd
 8009d68:	08009dc5 	.word	0x08009dc5
 8009d6c:	08009ddd 	.word	0x08009ddd
 8009d70:	08009ddd 	.word	0x08009ddd
 8009d74:	08009ddd 	.word	0x08009ddd
 8009d78:	08009ddd 	.word	0x08009ddd
 8009d7c:	08009ddd 	.word	0x08009ddd
 8009d80:	08009ddd 	.word	0x08009ddd
 8009d84:	08009ddd 	.word	0x08009ddd
 8009d88:	08009dcd 	.word	0x08009dcd
 8009d8c:	08009ddd 	.word	0x08009ddd
 8009d90:	08009ddd 	.word	0x08009ddd
 8009d94:	08009ddd 	.word	0x08009ddd
 8009d98:	08009ddd 	.word	0x08009ddd
 8009d9c:	08009ddd 	.word	0x08009ddd
 8009da0:	08009ddd 	.word	0x08009ddd
 8009da4:	08009ddd 	.word	0x08009ddd
 8009da8:	08009dd5 	.word	0x08009dd5
 8009dac:	2301      	movs	r3, #1
 8009dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009db2:	e1c0      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009db4:	2304      	movs	r3, #4
 8009db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dba:	e1bc      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009dbc:	2308      	movs	r3, #8
 8009dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dc2:	e1b8      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009dc4:	2310      	movs	r3, #16
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dca:	e1b4      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009dcc:	2320      	movs	r3, #32
 8009dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd2:	e1b0      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009dd4:	2340      	movs	r3, #64	@ 0x40
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dda:	e1ac      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009ddc:	2380      	movs	r3, #128	@ 0x80
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de2:	e1a8      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a75      	ldr	r2, [pc, #468]	@ (8009fc0 <UART_SetConfig+0x638>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d130      	bne.n	8009e50 <UART_SetConfig+0x4c8>
 8009dee:	4b73      	ldr	r3, [pc, #460]	@ (8009fbc <UART_SetConfig+0x634>)
 8009df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009df2:	f003 0307 	and.w	r3, r3, #7
 8009df6:	2b05      	cmp	r3, #5
 8009df8:	d826      	bhi.n	8009e48 <UART_SetConfig+0x4c0>
 8009dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8009e00 <UART_SetConfig+0x478>)
 8009dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e00:	08009e19 	.word	0x08009e19
 8009e04:	08009e21 	.word	0x08009e21
 8009e08:	08009e29 	.word	0x08009e29
 8009e0c:	08009e31 	.word	0x08009e31
 8009e10:	08009e39 	.word	0x08009e39
 8009e14:	08009e41 	.word	0x08009e41
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1e:	e18a      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009e20:	2304      	movs	r3, #4
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e26:	e186      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009e28:	2308      	movs	r3, #8
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e2e:	e182      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009e30:	2310      	movs	r3, #16
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e36:	e17e      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009e38:	2320      	movs	r3, #32
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3e:	e17a      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009e40:	2340      	movs	r3, #64	@ 0x40
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e46:	e176      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009e48:	2380      	movs	r3, #128	@ 0x80
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4e:	e172      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a5b      	ldr	r2, [pc, #364]	@ (8009fc4 <UART_SetConfig+0x63c>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d130      	bne.n	8009ebc <UART_SetConfig+0x534>
 8009e5a:	4b58      	ldr	r3, [pc, #352]	@ (8009fbc <UART_SetConfig+0x634>)
 8009e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e5e:	f003 0307 	and.w	r3, r3, #7
 8009e62:	2b05      	cmp	r3, #5
 8009e64:	d826      	bhi.n	8009eb4 <UART_SetConfig+0x52c>
 8009e66:	a201      	add	r2, pc, #4	@ (adr r2, 8009e6c <UART_SetConfig+0x4e4>)
 8009e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6c:	08009e85 	.word	0x08009e85
 8009e70:	08009e8d 	.word	0x08009e8d
 8009e74:	08009e95 	.word	0x08009e95
 8009e78:	08009e9d 	.word	0x08009e9d
 8009e7c:	08009ea5 	.word	0x08009ea5
 8009e80:	08009ead 	.word	0x08009ead
 8009e84:	2300      	movs	r3, #0
 8009e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e8a:	e154      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009e8c:	2304      	movs	r3, #4
 8009e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e92:	e150      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009e94:	2308      	movs	r3, #8
 8009e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e9a:	e14c      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009e9c:	2310      	movs	r3, #16
 8009e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea2:	e148      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009ea4:	2320      	movs	r3, #32
 8009ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eaa:	e144      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009eac:	2340      	movs	r3, #64	@ 0x40
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb2:	e140      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009eb4:	2380      	movs	r3, #128	@ 0x80
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eba:	e13c      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a41      	ldr	r2, [pc, #260]	@ (8009fc8 <UART_SetConfig+0x640>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	f040 8082 	bne.w	8009fcc <UART_SetConfig+0x644>
 8009ec8:	4b3c      	ldr	r3, [pc, #240]	@ (8009fbc <UART_SetConfig+0x634>)
 8009eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ecc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ed0:	2b28      	cmp	r3, #40	@ 0x28
 8009ed2:	d86d      	bhi.n	8009fb0 <UART_SetConfig+0x628>
 8009ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8009edc <UART_SetConfig+0x554>)
 8009ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eda:	bf00      	nop
 8009edc:	08009f81 	.word	0x08009f81
 8009ee0:	08009fb1 	.word	0x08009fb1
 8009ee4:	08009fb1 	.word	0x08009fb1
 8009ee8:	08009fb1 	.word	0x08009fb1
 8009eec:	08009fb1 	.word	0x08009fb1
 8009ef0:	08009fb1 	.word	0x08009fb1
 8009ef4:	08009fb1 	.word	0x08009fb1
 8009ef8:	08009fb1 	.word	0x08009fb1
 8009efc:	08009f89 	.word	0x08009f89
 8009f00:	08009fb1 	.word	0x08009fb1
 8009f04:	08009fb1 	.word	0x08009fb1
 8009f08:	08009fb1 	.word	0x08009fb1
 8009f0c:	08009fb1 	.word	0x08009fb1
 8009f10:	08009fb1 	.word	0x08009fb1
 8009f14:	08009fb1 	.word	0x08009fb1
 8009f18:	08009fb1 	.word	0x08009fb1
 8009f1c:	08009f91 	.word	0x08009f91
 8009f20:	08009fb1 	.word	0x08009fb1
 8009f24:	08009fb1 	.word	0x08009fb1
 8009f28:	08009fb1 	.word	0x08009fb1
 8009f2c:	08009fb1 	.word	0x08009fb1
 8009f30:	08009fb1 	.word	0x08009fb1
 8009f34:	08009fb1 	.word	0x08009fb1
 8009f38:	08009fb1 	.word	0x08009fb1
 8009f3c:	08009f99 	.word	0x08009f99
 8009f40:	08009fb1 	.word	0x08009fb1
 8009f44:	08009fb1 	.word	0x08009fb1
 8009f48:	08009fb1 	.word	0x08009fb1
 8009f4c:	08009fb1 	.word	0x08009fb1
 8009f50:	08009fb1 	.word	0x08009fb1
 8009f54:	08009fb1 	.word	0x08009fb1
 8009f58:	08009fb1 	.word	0x08009fb1
 8009f5c:	08009fa1 	.word	0x08009fa1
 8009f60:	08009fb1 	.word	0x08009fb1
 8009f64:	08009fb1 	.word	0x08009fb1
 8009f68:	08009fb1 	.word	0x08009fb1
 8009f6c:	08009fb1 	.word	0x08009fb1
 8009f70:	08009fb1 	.word	0x08009fb1
 8009f74:	08009fb1 	.word	0x08009fb1
 8009f78:	08009fb1 	.word	0x08009fb1
 8009f7c:	08009fa9 	.word	0x08009fa9
 8009f80:	2301      	movs	r3, #1
 8009f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f86:	e0d6      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009f88:	2304      	movs	r3, #4
 8009f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f8e:	e0d2      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009f90:	2308      	movs	r3, #8
 8009f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f96:	e0ce      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009f98:	2310      	movs	r3, #16
 8009f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f9e:	e0ca      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009fa0:	2320      	movs	r3, #32
 8009fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fa6:	e0c6      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009fa8:	2340      	movs	r3, #64	@ 0x40
 8009faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fae:	e0c2      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009fb0:	2380      	movs	r3, #128	@ 0x80
 8009fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fb6:	e0be      	b.n	800a136 <UART_SetConfig+0x7ae>
 8009fb8:	40011400 	.word	0x40011400
 8009fbc:	58024400 	.word	0x58024400
 8009fc0:	40007800 	.word	0x40007800
 8009fc4:	40007c00 	.word	0x40007c00
 8009fc8:	40011800 	.word	0x40011800
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4aad      	ldr	r2, [pc, #692]	@ (800a288 <UART_SetConfig+0x900>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d176      	bne.n	800a0c4 <UART_SetConfig+0x73c>
 8009fd6:	4bad      	ldr	r3, [pc, #692]	@ (800a28c <UART_SetConfig+0x904>)
 8009fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009fde:	2b28      	cmp	r3, #40	@ 0x28
 8009fe0:	d86c      	bhi.n	800a0bc <UART_SetConfig+0x734>
 8009fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8009fe8 <UART_SetConfig+0x660>)
 8009fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe8:	0800a08d 	.word	0x0800a08d
 8009fec:	0800a0bd 	.word	0x0800a0bd
 8009ff0:	0800a0bd 	.word	0x0800a0bd
 8009ff4:	0800a0bd 	.word	0x0800a0bd
 8009ff8:	0800a0bd 	.word	0x0800a0bd
 8009ffc:	0800a0bd 	.word	0x0800a0bd
 800a000:	0800a0bd 	.word	0x0800a0bd
 800a004:	0800a0bd 	.word	0x0800a0bd
 800a008:	0800a095 	.word	0x0800a095
 800a00c:	0800a0bd 	.word	0x0800a0bd
 800a010:	0800a0bd 	.word	0x0800a0bd
 800a014:	0800a0bd 	.word	0x0800a0bd
 800a018:	0800a0bd 	.word	0x0800a0bd
 800a01c:	0800a0bd 	.word	0x0800a0bd
 800a020:	0800a0bd 	.word	0x0800a0bd
 800a024:	0800a0bd 	.word	0x0800a0bd
 800a028:	0800a09d 	.word	0x0800a09d
 800a02c:	0800a0bd 	.word	0x0800a0bd
 800a030:	0800a0bd 	.word	0x0800a0bd
 800a034:	0800a0bd 	.word	0x0800a0bd
 800a038:	0800a0bd 	.word	0x0800a0bd
 800a03c:	0800a0bd 	.word	0x0800a0bd
 800a040:	0800a0bd 	.word	0x0800a0bd
 800a044:	0800a0bd 	.word	0x0800a0bd
 800a048:	0800a0a5 	.word	0x0800a0a5
 800a04c:	0800a0bd 	.word	0x0800a0bd
 800a050:	0800a0bd 	.word	0x0800a0bd
 800a054:	0800a0bd 	.word	0x0800a0bd
 800a058:	0800a0bd 	.word	0x0800a0bd
 800a05c:	0800a0bd 	.word	0x0800a0bd
 800a060:	0800a0bd 	.word	0x0800a0bd
 800a064:	0800a0bd 	.word	0x0800a0bd
 800a068:	0800a0ad 	.word	0x0800a0ad
 800a06c:	0800a0bd 	.word	0x0800a0bd
 800a070:	0800a0bd 	.word	0x0800a0bd
 800a074:	0800a0bd 	.word	0x0800a0bd
 800a078:	0800a0bd 	.word	0x0800a0bd
 800a07c:	0800a0bd 	.word	0x0800a0bd
 800a080:	0800a0bd 	.word	0x0800a0bd
 800a084:	0800a0bd 	.word	0x0800a0bd
 800a088:	0800a0b5 	.word	0x0800a0b5
 800a08c:	2301      	movs	r3, #1
 800a08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a092:	e050      	b.n	800a136 <UART_SetConfig+0x7ae>
 800a094:	2304      	movs	r3, #4
 800a096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a09a:	e04c      	b.n	800a136 <UART_SetConfig+0x7ae>
 800a09c:	2308      	movs	r3, #8
 800a09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0a2:	e048      	b.n	800a136 <UART_SetConfig+0x7ae>
 800a0a4:	2310      	movs	r3, #16
 800a0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0aa:	e044      	b.n	800a136 <UART_SetConfig+0x7ae>
 800a0ac:	2320      	movs	r3, #32
 800a0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0b2:	e040      	b.n	800a136 <UART_SetConfig+0x7ae>
 800a0b4:	2340      	movs	r3, #64	@ 0x40
 800a0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ba:	e03c      	b.n	800a136 <UART_SetConfig+0x7ae>
 800a0bc:	2380      	movs	r3, #128	@ 0x80
 800a0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0c2:	e038      	b.n	800a136 <UART_SetConfig+0x7ae>
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a71      	ldr	r2, [pc, #452]	@ (800a290 <UART_SetConfig+0x908>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d130      	bne.n	800a130 <UART_SetConfig+0x7a8>
 800a0ce:	4b6f      	ldr	r3, [pc, #444]	@ (800a28c <UART_SetConfig+0x904>)
 800a0d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0d2:	f003 0307 	and.w	r3, r3, #7
 800a0d6:	2b05      	cmp	r3, #5
 800a0d8:	d826      	bhi.n	800a128 <UART_SetConfig+0x7a0>
 800a0da:	a201      	add	r2, pc, #4	@ (adr r2, 800a0e0 <UART_SetConfig+0x758>)
 800a0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e0:	0800a0f9 	.word	0x0800a0f9
 800a0e4:	0800a101 	.word	0x0800a101
 800a0e8:	0800a109 	.word	0x0800a109
 800a0ec:	0800a111 	.word	0x0800a111
 800a0f0:	0800a119 	.word	0x0800a119
 800a0f4:	0800a121 	.word	0x0800a121
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0fe:	e01a      	b.n	800a136 <UART_SetConfig+0x7ae>
 800a100:	2304      	movs	r3, #4
 800a102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a106:	e016      	b.n	800a136 <UART_SetConfig+0x7ae>
 800a108:	2308      	movs	r3, #8
 800a10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a10e:	e012      	b.n	800a136 <UART_SetConfig+0x7ae>
 800a110:	2310      	movs	r3, #16
 800a112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a116:	e00e      	b.n	800a136 <UART_SetConfig+0x7ae>
 800a118:	2320      	movs	r3, #32
 800a11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a11e:	e00a      	b.n	800a136 <UART_SetConfig+0x7ae>
 800a120:	2340      	movs	r3, #64	@ 0x40
 800a122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a126:	e006      	b.n	800a136 <UART_SetConfig+0x7ae>
 800a128:	2380      	movs	r3, #128	@ 0x80
 800a12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12e:	e002      	b.n	800a136 <UART_SetConfig+0x7ae>
 800a130:	2380      	movs	r3, #128	@ 0x80
 800a132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a55      	ldr	r2, [pc, #340]	@ (800a290 <UART_SetConfig+0x908>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	f040 80f8 	bne.w	800a332 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a142:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a146:	2b20      	cmp	r3, #32
 800a148:	dc46      	bgt.n	800a1d8 <UART_SetConfig+0x850>
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	db75      	blt.n	800a23a <UART_SetConfig+0x8b2>
 800a14e:	3b02      	subs	r3, #2
 800a150:	2b1e      	cmp	r3, #30
 800a152:	d872      	bhi.n	800a23a <UART_SetConfig+0x8b2>
 800a154:	a201      	add	r2, pc, #4	@ (adr r2, 800a15c <UART_SetConfig+0x7d4>)
 800a156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15a:	bf00      	nop
 800a15c:	0800a1df 	.word	0x0800a1df
 800a160:	0800a23b 	.word	0x0800a23b
 800a164:	0800a1e7 	.word	0x0800a1e7
 800a168:	0800a23b 	.word	0x0800a23b
 800a16c:	0800a23b 	.word	0x0800a23b
 800a170:	0800a23b 	.word	0x0800a23b
 800a174:	0800a1f7 	.word	0x0800a1f7
 800a178:	0800a23b 	.word	0x0800a23b
 800a17c:	0800a23b 	.word	0x0800a23b
 800a180:	0800a23b 	.word	0x0800a23b
 800a184:	0800a23b 	.word	0x0800a23b
 800a188:	0800a23b 	.word	0x0800a23b
 800a18c:	0800a23b 	.word	0x0800a23b
 800a190:	0800a23b 	.word	0x0800a23b
 800a194:	0800a207 	.word	0x0800a207
 800a198:	0800a23b 	.word	0x0800a23b
 800a19c:	0800a23b 	.word	0x0800a23b
 800a1a0:	0800a23b 	.word	0x0800a23b
 800a1a4:	0800a23b 	.word	0x0800a23b
 800a1a8:	0800a23b 	.word	0x0800a23b
 800a1ac:	0800a23b 	.word	0x0800a23b
 800a1b0:	0800a23b 	.word	0x0800a23b
 800a1b4:	0800a23b 	.word	0x0800a23b
 800a1b8:	0800a23b 	.word	0x0800a23b
 800a1bc:	0800a23b 	.word	0x0800a23b
 800a1c0:	0800a23b 	.word	0x0800a23b
 800a1c4:	0800a23b 	.word	0x0800a23b
 800a1c8:	0800a23b 	.word	0x0800a23b
 800a1cc:	0800a23b 	.word	0x0800a23b
 800a1d0:	0800a23b 	.word	0x0800a23b
 800a1d4:	0800a22d 	.word	0x0800a22d
 800a1d8:	2b40      	cmp	r3, #64	@ 0x40
 800a1da:	d02a      	beq.n	800a232 <UART_SetConfig+0x8aa>
 800a1dc:	e02d      	b.n	800a23a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a1de:	f7fe fd6b 	bl	8008cb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a1e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a1e4:	e02f      	b.n	800a246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fe fd7a 	bl	8008ce4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1f4:	e027      	b.n	800a246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1f6:	f107 0318 	add.w	r3, r7, #24
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7fe fec6 	bl	8008f8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a204:	e01f      	b.n	800a246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a206:	4b21      	ldr	r3, [pc, #132]	@ (800a28c <UART_SetConfig+0x904>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 0320 	and.w	r3, r3, #32
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d009      	beq.n	800a226 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a212:	4b1e      	ldr	r3, [pc, #120]	@ (800a28c <UART_SetConfig+0x904>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	08db      	lsrs	r3, r3, #3
 800a218:	f003 0303 	and.w	r3, r3, #3
 800a21c:	4a1d      	ldr	r2, [pc, #116]	@ (800a294 <UART_SetConfig+0x90c>)
 800a21e:	fa22 f303 	lsr.w	r3, r2, r3
 800a222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a224:	e00f      	b.n	800a246 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a226:	4b1b      	ldr	r3, [pc, #108]	@ (800a294 <UART_SetConfig+0x90c>)
 800a228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a22a:	e00c      	b.n	800a246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a22c:	4b1a      	ldr	r3, [pc, #104]	@ (800a298 <UART_SetConfig+0x910>)
 800a22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a230:	e009      	b.n	800a246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a238:	e005      	b.n	800a246 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a23a:	2300      	movs	r3, #0
 800a23c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a244:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 81ee 	beq.w	800a62a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a252:	4a12      	ldr	r2, [pc, #72]	@ (800a29c <UART_SetConfig+0x914>)
 800a254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a258:	461a      	mov	r2, r3
 800a25a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a25c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a260:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	4613      	mov	r3, r2
 800a268:	005b      	lsls	r3, r3, #1
 800a26a:	4413      	add	r3, r2
 800a26c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a26e:	429a      	cmp	r2, r3
 800a270:	d305      	bcc.n	800a27e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d910      	bls.n	800a2a0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a284:	e1d1      	b.n	800a62a <UART_SetConfig+0xca2>
 800a286:	bf00      	nop
 800a288:	40011c00 	.word	0x40011c00
 800a28c:	58024400 	.word	0x58024400
 800a290:	58000c00 	.word	0x58000c00
 800a294:	03d09000 	.word	0x03d09000
 800a298:	003d0900 	.word	0x003d0900
 800a29c:	0800b984 	.word	0x0800b984
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	60bb      	str	r3, [r7, #8]
 800a2a6:	60fa      	str	r2, [r7, #12]
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ac:	4ac0      	ldr	r2, [pc, #768]	@ (800a5b0 <UART_SetConfig+0xc28>)
 800a2ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	603b      	str	r3, [r7, #0]
 800a2b8:	607a      	str	r2, [r7, #4]
 800a2ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a2c2:	f7f6 f87d 	bl	80003c0 <__aeabi_uldivmod>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	f04f 0200 	mov.w	r2, #0
 800a2d2:	f04f 0300 	mov.w	r3, #0
 800a2d6:	020b      	lsls	r3, r1, #8
 800a2d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a2dc:	0202      	lsls	r2, r0, #8
 800a2de:	6979      	ldr	r1, [r7, #20]
 800a2e0:	6849      	ldr	r1, [r1, #4]
 800a2e2:	0849      	lsrs	r1, r1, #1
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	4605      	mov	r5, r0
 800a2ea:	eb12 0804 	adds.w	r8, r2, r4
 800a2ee:	eb43 0905 	adc.w	r9, r3, r5
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	469a      	mov	sl, r3
 800a2fa:	4693      	mov	fp, r2
 800a2fc:	4652      	mov	r2, sl
 800a2fe:	465b      	mov	r3, fp
 800a300:	4640      	mov	r0, r8
 800a302:	4649      	mov	r1, r9
 800a304:	f7f6 f85c 	bl	80003c0 <__aeabi_uldivmod>
 800a308:	4602      	mov	r2, r0
 800a30a:	460b      	mov	r3, r1
 800a30c:	4613      	mov	r3, r2
 800a30e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a312:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a316:	d308      	bcc.n	800a32a <UART_SetConfig+0x9a2>
 800a318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a31e:	d204      	bcs.n	800a32a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a326:	60da      	str	r2, [r3, #12]
 800a328:	e17f      	b.n	800a62a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a330:	e17b      	b.n	800a62a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	69db      	ldr	r3, [r3, #28]
 800a336:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a33a:	f040 80bd 	bne.w	800a4b8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a33e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a342:	2b20      	cmp	r3, #32
 800a344:	dc48      	bgt.n	800a3d8 <UART_SetConfig+0xa50>
 800a346:	2b00      	cmp	r3, #0
 800a348:	db7b      	blt.n	800a442 <UART_SetConfig+0xaba>
 800a34a:	2b20      	cmp	r3, #32
 800a34c:	d879      	bhi.n	800a442 <UART_SetConfig+0xaba>
 800a34e:	a201      	add	r2, pc, #4	@ (adr r2, 800a354 <UART_SetConfig+0x9cc>)
 800a350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a354:	0800a3df 	.word	0x0800a3df
 800a358:	0800a3e7 	.word	0x0800a3e7
 800a35c:	0800a443 	.word	0x0800a443
 800a360:	0800a443 	.word	0x0800a443
 800a364:	0800a3ef 	.word	0x0800a3ef
 800a368:	0800a443 	.word	0x0800a443
 800a36c:	0800a443 	.word	0x0800a443
 800a370:	0800a443 	.word	0x0800a443
 800a374:	0800a3ff 	.word	0x0800a3ff
 800a378:	0800a443 	.word	0x0800a443
 800a37c:	0800a443 	.word	0x0800a443
 800a380:	0800a443 	.word	0x0800a443
 800a384:	0800a443 	.word	0x0800a443
 800a388:	0800a443 	.word	0x0800a443
 800a38c:	0800a443 	.word	0x0800a443
 800a390:	0800a443 	.word	0x0800a443
 800a394:	0800a40f 	.word	0x0800a40f
 800a398:	0800a443 	.word	0x0800a443
 800a39c:	0800a443 	.word	0x0800a443
 800a3a0:	0800a443 	.word	0x0800a443
 800a3a4:	0800a443 	.word	0x0800a443
 800a3a8:	0800a443 	.word	0x0800a443
 800a3ac:	0800a443 	.word	0x0800a443
 800a3b0:	0800a443 	.word	0x0800a443
 800a3b4:	0800a443 	.word	0x0800a443
 800a3b8:	0800a443 	.word	0x0800a443
 800a3bc:	0800a443 	.word	0x0800a443
 800a3c0:	0800a443 	.word	0x0800a443
 800a3c4:	0800a443 	.word	0x0800a443
 800a3c8:	0800a443 	.word	0x0800a443
 800a3cc:	0800a443 	.word	0x0800a443
 800a3d0:	0800a443 	.word	0x0800a443
 800a3d4:	0800a435 	.word	0x0800a435
 800a3d8:	2b40      	cmp	r3, #64	@ 0x40
 800a3da:	d02e      	beq.n	800a43a <UART_SetConfig+0xab2>
 800a3dc:	e031      	b.n	800a442 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3de:	f7fc fdcd 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 800a3e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a3e4:	e033      	b.n	800a44e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3e6:	f7fc fddf 	bl	8006fa8 <HAL_RCC_GetPCLK2Freq>
 800a3ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a3ec:	e02f      	b.n	800a44e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe fc76 	bl	8008ce4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3fc:	e027      	b.n	800a44e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3fe:	f107 0318 	add.w	r3, r7, #24
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe fdc2 	bl	8008f8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a40c:	e01f      	b.n	800a44e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a40e:	4b69      	ldr	r3, [pc, #420]	@ (800a5b4 <UART_SetConfig+0xc2c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 0320 	and.w	r3, r3, #32
 800a416:	2b00      	cmp	r3, #0
 800a418:	d009      	beq.n	800a42e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a41a:	4b66      	ldr	r3, [pc, #408]	@ (800a5b4 <UART_SetConfig+0xc2c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	08db      	lsrs	r3, r3, #3
 800a420:	f003 0303 	and.w	r3, r3, #3
 800a424:	4a64      	ldr	r2, [pc, #400]	@ (800a5b8 <UART_SetConfig+0xc30>)
 800a426:	fa22 f303 	lsr.w	r3, r2, r3
 800a42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a42c:	e00f      	b.n	800a44e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a42e:	4b62      	ldr	r3, [pc, #392]	@ (800a5b8 <UART_SetConfig+0xc30>)
 800a430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a432:	e00c      	b.n	800a44e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a434:	4b61      	ldr	r3, [pc, #388]	@ (800a5bc <UART_SetConfig+0xc34>)
 800a436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a438:	e009      	b.n	800a44e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a43a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a440:	e005      	b.n	800a44e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a442:	2300      	movs	r3, #0
 800a444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a44c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a44e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a450:	2b00      	cmp	r3, #0
 800a452:	f000 80ea 	beq.w	800a62a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a45a:	4a55      	ldr	r2, [pc, #340]	@ (800a5b0 <UART_SetConfig+0xc28>)
 800a45c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a460:	461a      	mov	r2, r3
 800a462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a464:	fbb3 f3f2 	udiv	r3, r3, r2
 800a468:	005a      	lsls	r2, r3, #1
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	085b      	lsrs	r3, r3, #1
 800a470:	441a      	add	r2, r3
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	fbb2 f3f3 	udiv	r3, r2, r3
 800a47a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a47e:	2b0f      	cmp	r3, #15
 800a480:	d916      	bls.n	800a4b0 <UART_SetConfig+0xb28>
 800a482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a488:	d212      	bcs.n	800a4b0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	f023 030f 	bic.w	r3, r3, #15
 800a492:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a496:	085b      	lsrs	r3, r3, #1
 800a498:	b29b      	uxth	r3, r3
 800a49a:	f003 0307 	and.w	r3, r3, #7
 800a49e:	b29a      	uxth	r2, r3
 800a4a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a4ac:	60da      	str	r2, [r3, #12]
 800a4ae:	e0bc      	b.n	800a62a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a4b6:	e0b8      	b.n	800a62a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a4b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a4bc:	2b20      	cmp	r3, #32
 800a4be:	dc4b      	bgt.n	800a558 <UART_SetConfig+0xbd0>
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f2c0 8087 	blt.w	800a5d4 <UART_SetConfig+0xc4c>
 800a4c6:	2b20      	cmp	r3, #32
 800a4c8:	f200 8084 	bhi.w	800a5d4 <UART_SetConfig+0xc4c>
 800a4cc:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d4 <UART_SetConfig+0xb4c>)
 800a4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d2:	bf00      	nop
 800a4d4:	0800a55f 	.word	0x0800a55f
 800a4d8:	0800a567 	.word	0x0800a567
 800a4dc:	0800a5d5 	.word	0x0800a5d5
 800a4e0:	0800a5d5 	.word	0x0800a5d5
 800a4e4:	0800a56f 	.word	0x0800a56f
 800a4e8:	0800a5d5 	.word	0x0800a5d5
 800a4ec:	0800a5d5 	.word	0x0800a5d5
 800a4f0:	0800a5d5 	.word	0x0800a5d5
 800a4f4:	0800a57f 	.word	0x0800a57f
 800a4f8:	0800a5d5 	.word	0x0800a5d5
 800a4fc:	0800a5d5 	.word	0x0800a5d5
 800a500:	0800a5d5 	.word	0x0800a5d5
 800a504:	0800a5d5 	.word	0x0800a5d5
 800a508:	0800a5d5 	.word	0x0800a5d5
 800a50c:	0800a5d5 	.word	0x0800a5d5
 800a510:	0800a5d5 	.word	0x0800a5d5
 800a514:	0800a58f 	.word	0x0800a58f
 800a518:	0800a5d5 	.word	0x0800a5d5
 800a51c:	0800a5d5 	.word	0x0800a5d5
 800a520:	0800a5d5 	.word	0x0800a5d5
 800a524:	0800a5d5 	.word	0x0800a5d5
 800a528:	0800a5d5 	.word	0x0800a5d5
 800a52c:	0800a5d5 	.word	0x0800a5d5
 800a530:	0800a5d5 	.word	0x0800a5d5
 800a534:	0800a5d5 	.word	0x0800a5d5
 800a538:	0800a5d5 	.word	0x0800a5d5
 800a53c:	0800a5d5 	.word	0x0800a5d5
 800a540:	0800a5d5 	.word	0x0800a5d5
 800a544:	0800a5d5 	.word	0x0800a5d5
 800a548:	0800a5d5 	.word	0x0800a5d5
 800a54c:	0800a5d5 	.word	0x0800a5d5
 800a550:	0800a5d5 	.word	0x0800a5d5
 800a554:	0800a5c7 	.word	0x0800a5c7
 800a558:	2b40      	cmp	r3, #64	@ 0x40
 800a55a:	d037      	beq.n	800a5cc <UART_SetConfig+0xc44>
 800a55c:	e03a      	b.n	800a5d4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a55e:	f7fc fd0d 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 800a562:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a564:	e03c      	b.n	800a5e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a566:	f7fc fd1f 	bl	8006fa8 <HAL_RCC_GetPCLK2Freq>
 800a56a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a56c:	e038      	b.n	800a5e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a56e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe fbb6 	bl	8008ce4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a57c:	e030      	b.n	800a5e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a57e:	f107 0318 	add.w	r3, r7, #24
 800a582:	4618      	mov	r0, r3
 800a584:	f7fe fd02 	bl	8008f8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a58c:	e028      	b.n	800a5e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a58e:	4b09      	ldr	r3, [pc, #36]	@ (800a5b4 <UART_SetConfig+0xc2c>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 0320 	and.w	r3, r3, #32
 800a596:	2b00      	cmp	r3, #0
 800a598:	d012      	beq.n	800a5c0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a59a:	4b06      	ldr	r3, [pc, #24]	@ (800a5b4 <UART_SetConfig+0xc2c>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	08db      	lsrs	r3, r3, #3
 800a5a0:	f003 0303 	and.w	r3, r3, #3
 800a5a4:	4a04      	ldr	r2, [pc, #16]	@ (800a5b8 <UART_SetConfig+0xc30>)
 800a5a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a5ac:	e018      	b.n	800a5e0 <UART_SetConfig+0xc58>
 800a5ae:	bf00      	nop
 800a5b0:	0800b984 	.word	0x0800b984
 800a5b4:	58024400 	.word	0x58024400
 800a5b8:	03d09000 	.word	0x03d09000
 800a5bc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a5c0:	4b24      	ldr	r3, [pc, #144]	@ (800a654 <UART_SetConfig+0xccc>)
 800a5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5c4:	e00c      	b.n	800a5e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a5c6:	4b24      	ldr	r3, [pc, #144]	@ (800a658 <UART_SetConfig+0xcd0>)
 800a5c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ca:	e009      	b.n	800a5e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5d2:	e005      	b.n	800a5e0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a5de:	bf00      	nop
    }

    if (pclk != 0U)
 800a5e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d021      	beq.n	800a62a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ea:	4a1c      	ldr	r2, [pc, #112]	@ (800a65c <UART_SetConfig+0xcd4>)
 800a5ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5f4:	fbb3 f2f2 	udiv	r2, r3, r2
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	085b      	lsrs	r3, r3, #1
 800a5fe:	441a      	add	r2, r3
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	fbb2 f3f3 	udiv	r3, r2, r3
 800a608:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60c:	2b0f      	cmp	r3, #15
 800a60e:	d909      	bls.n	800a624 <UART_SetConfig+0xc9c>
 800a610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a616:	d205      	bcs.n	800a624 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	60da      	str	r2, [r3, #12]
 800a622:	e002      	b.n	800a62a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	2201      	movs	r2, #1
 800a636:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	2200      	movs	r2, #0
 800a63e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	2200      	movs	r2, #0
 800a644:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a646:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3748      	adds	r7, #72	@ 0x48
 800a64e:	46bd      	mov	sp, r7
 800a650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a654:	03d09000 	.word	0x03d09000
 800a658:	003d0900 	.word	0x003d0900
 800a65c:	0800b984 	.word	0x0800b984

0800a660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a66c:	f003 0308 	and.w	r3, r3, #8
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00a      	beq.n	800a68a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	430a      	orrs	r2, r1
 800a688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00a      	beq.n	800a6ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	430a      	orrs	r2, r1
 800a6aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b0:	f003 0302 	and.w	r3, r3, #2
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00a      	beq.n	800a6ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	430a      	orrs	r2, r1
 800a6cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6d2:	f003 0304 	and.w	r3, r3, #4
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00a      	beq.n	800a6f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	430a      	orrs	r2, r1
 800a6ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6f4:	f003 0310 	and.w	r3, r3, #16
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00a      	beq.n	800a712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	430a      	orrs	r2, r1
 800a710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a716:	f003 0320 	and.w	r3, r3, #32
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00a      	beq.n	800a734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	430a      	orrs	r2, r1
 800a732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d01a      	beq.n	800a776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	430a      	orrs	r2, r1
 800a754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a75a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a75e:	d10a      	bne.n	800a776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	430a      	orrs	r2, r1
 800a774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a77a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00a      	beq.n	800a798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	430a      	orrs	r2, r1
 800a796:	605a      	str	r2, [r3, #4]
  }
}
 800a798:	bf00      	nop
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b098      	sub	sp, #96	@ 0x60
 800a7a8:	af02      	add	r7, sp, #8
 800a7aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7b4:	f7f8 f80c 	bl	80027d0 <HAL_GetTick>
 800a7b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f003 0308 	and.w	r3, r3, #8
 800a7c4:	2b08      	cmp	r3, #8
 800a7c6:	d12f      	bne.n	800a828 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 f88e 	bl	800a8f8 <UART_WaitOnFlagUntilTimeout>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d022      	beq.n	800a828 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ea:	e853 3f00 	ldrex	r3, [r3]
 800a7ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a800:	647b      	str	r3, [r7, #68]	@ 0x44
 800a802:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a804:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a808:	e841 2300 	strex	r3, r2, [r1]
 800a80c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a80e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1e6      	bne.n	800a7e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2220      	movs	r2, #32
 800a818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a824:	2303      	movs	r3, #3
 800a826:	e063      	b.n	800a8f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f003 0304 	and.w	r3, r3, #4
 800a832:	2b04      	cmp	r3, #4
 800a834:	d149      	bne.n	800a8ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a836:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a83a:	9300      	str	r3, [sp, #0]
 800a83c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a83e:	2200      	movs	r2, #0
 800a840:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 f857 	bl	800a8f8 <UART_WaitOnFlagUntilTimeout>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d03c      	beq.n	800a8ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a858:	e853 3f00 	ldrex	r3, [r3]
 800a85c:	623b      	str	r3, [r7, #32]
   return(result);
 800a85e:	6a3b      	ldr	r3, [r7, #32]
 800a860:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	461a      	mov	r2, r3
 800a86c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a86e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a870:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a872:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a876:	e841 2300 	strex	r3, r2, [r1]
 800a87a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1e6      	bne.n	800a850 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	3308      	adds	r3, #8
 800a888:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	e853 3f00 	ldrex	r3, [r3]
 800a890:	60fb      	str	r3, [r7, #12]
   return(result);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f023 0301 	bic.w	r3, r3, #1
 800a898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	3308      	adds	r3, #8
 800a8a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8a2:	61fa      	str	r2, [r7, #28]
 800a8a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a6:	69b9      	ldr	r1, [r7, #24]
 800a8a8:	69fa      	ldr	r2, [r7, #28]
 800a8aa:	e841 2300 	strex	r3, r2, [r1]
 800a8ae:	617b      	str	r3, [r7, #20]
   return(result);
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1e5      	bne.n	800a882 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2220      	movs	r2, #32
 800a8ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	e012      	b.n	800a8f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2220      	movs	r2, #32
 800a8ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2220      	movs	r2, #32
 800a8d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3758      	adds	r7, #88	@ 0x58
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	603b      	str	r3, [r7, #0]
 800a904:	4613      	mov	r3, r2
 800a906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a908:	e04f      	b.n	800a9aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a910:	d04b      	beq.n	800a9aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a912:	f7f7 ff5d 	bl	80027d0 <HAL_GetTick>
 800a916:	4602      	mov	r2, r0
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	69ba      	ldr	r2, [r7, #24]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d302      	bcc.n	800a928 <UART_WaitOnFlagUntilTimeout+0x30>
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d101      	bne.n	800a92c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a928:	2303      	movs	r3, #3
 800a92a:	e04e      	b.n	800a9ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f003 0304 	and.w	r3, r3, #4
 800a936:	2b00      	cmp	r3, #0
 800a938:	d037      	beq.n	800a9aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	2b80      	cmp	r3, #128	@ 0x80
 800a93e:	d034      	beq.n	800a9aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	2b40      	cmp	r3, #64	@ 0x40
 800a944:	d031      	beq.n	800a9aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	69db      	ldr	r3, [r3, #28]
 800a94c:	f003 0308 	and.w	r3, r3, #8
 800a950:	2b08      	cmp	r3, #8
 800a952:	d110      	bne.n	800a976 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2208      	movs	r2, #8
 800a95a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f000 f839 	bl	800a9d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2208      	movs	r2, #8
 800a966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e029      	b.n	800a9ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	69db      	ldr	r3, [r3, #28]
 800a97c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a980:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a984:	d111      	bne.n	800a9aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a98e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f000 f81f 	bl	800a9d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2220      	movs	r2, #32
 800a99a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	e00f      	b.n	800a9ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	69da      	ldr	r2, [r3, #28]
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	68ba      	ldr	r2, [r7, #8]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	bf0c      	ite	eq
 800a9ba:	2301      	moveq	r3, #1
 800a9bc:	2300      	movne	r3, #0
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	79fb      	ldrb	r3, [r7, #7]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d0a0      	beq.n	800a90a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
	...

0800a9d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b095      	sub	sp, #84	@ 0x54
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9e4:	e853 3f00 	ldrex	r3, [r3]
 800a9e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa02:	e841 2300 	strex	r3, r2, [r1]
 800aa06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1e6      	bne.n	800a9dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	3308      	adds	r3, #8
 800aa14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa16:	6a3b      	ldr	r3, [r7, #32]
 800aa18:	e853 3f00 	ldrex	r3, [r3]
 800aa1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa1e:	69fa      	ldr	r2, [r7, #28]
 800aa20:	4b1e      	ldr	r3, [pc, #120]	@ (800aa9c <UART_EndRxTransfer+0xc8>)
 800aa22:	4013      	ands	r3, r2
 800aa24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	3308      	adds	r3, #8
 800aa2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa36:	e841 2300 	strex	r3, r2, [r1]
 800aa3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1e5      	bne.n	800aa0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d118      	bne.n	800aa7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	e853 3f00 	ldrex	r3, [r3]
 800aa56:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	f023 0310 	bic.w	r3, r3, #16
 800aa5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	461a      	mov	r2, r3
 800aa66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa68:	61bb      	str	r3, [r7, #24]
 800aa6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa6c:	6979      	ldr	r1, [r7, #20]
 800aa6e:	69ba      	ldr	r2, [r7, #24]
 800aa70:	e841 2300 	strex	r3, r2, [r1]
 800aa74:	613b      	str	r3, [r7, #16]
   return(result);
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1e6      	bne.n	800aa4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2220      	movs	r2, #32
 800aa80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aa90:	bf00      	nop
 800aa92:	3754      	adds	r7, #84	@ 0x54
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr
 800aa9c:	effffffe 	.word	0xeffffffe

0800aaa0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d101      	bne.n	800aab6 <HAL_UARTEx_DisableFifoMode+0x16>
 800aab2:	2302      	movs	r3, #2
 800aab4:	e027      	b.n	800ab06 <HAL_UARTEx_DisableFifoMode+0x66>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2224      	movs	r2, #36	@ 0x24
 800aac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f022 0201 	bic.w	r2, r2, #1
 800aadc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aae4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2220      	movs	r2, #32
 800aaf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3714      	adds	r7, #20
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b084      	sub	sp, #16
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d101      	bne.n	800ab2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ab26:	2302      	movs	r3, #2
 800ab28:	e02d      	b.n	800ab86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2224      	movs	r2, #36	@ 0x24
 800ab36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f022 0201 	bic.w	r2, r2, #1
 800ab50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	683a      	ldr	r2, [r7, #0]
 800ab62:	430a      	orrs	r2, r1
 800ab64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f850 	bl	800ac0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	68fa      	ldr	r2, [r7, #12]
 800ab72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2220      	movs	r2, #32
 800ab78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b084      	sub	sp, #16
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
 800ab96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d101      	bne.n	800aba6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aba2:	2302      	movs	r3, #2
 800aba4:	e02d      	b.n	800ac02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2201      	movs	r2, #1
 800abaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2224      	movs	r2, #36	@ 0x24
 800abb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f022 0201 	bic.w	r2, r2, #1
 800abcc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	683a      	ldr	r2, [r7, #0]
 800abde:	430a      	orrs	r2, r1
 800abe0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f812 	bl	800ac0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2220      	movs	r2, #32
 800abf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
	...

0800ac0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d108      	bne.n	800ac2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2201      	movs	r2, #1
 800ac28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ac2c:	e031      	b.n	800ac92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ac2e:	2310      	movs	r3, #16
 800ac30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac32:	2310      	movs	r3, #16
 800ac34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	0e5b      	lsrs	r3, r3, #25
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	f003 0307 	and.w	r3, r3, #7
 800ac44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	0f5b      	lsrs	r3, r3, #29
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	f003 0307 	and.w	r3, r3, #7
 800ac54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac56:	7bbb      	ldrb	r3, [r7, #14]
 800ac58:	7b3a      	ldrb	r2, [r7, #12]
 800ac5a:	4911      	ldr	r1, [pc, #68]	@ (800aca0 <UARTEx_SetNbDataToProcess+0x94>)
 800ac5c:	5c8a      	ldrb	r2, [r1, r2]
 800ac5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac62:	7b3a      	ldrb	r2, [r7, #12]
 800ac64:	490f      	ldr	r1, [pc, #60]	@ (800aca4 <UARTEx_SetNbDataToProcess+0x98>)
 800ac66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac68:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac6c:	b29a      	uxth	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
 800ac76:	7b7a      	ldrb	r2, [r7, #13]
 800ac78:	4909      	ldr	r1, [pc, #36]	@ (800aca0 <UARTEx_SetNbDataToProcess+0x94>)
 800ac7a:	5c8a      	ldrb	r2, [r1, r2]
 800ac7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac80:	7b7a      	ldrb	r2, [r7, #13]
 800ac82:	4908      	ldr	r1, [pc, #32]	@ (800aca4 <UARTEx_SetNbDataToProcess+0x98>)
 800ac84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac86:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ac92:	bf00      	nop
 800ac94:	3714      	adds	r7, #20
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	0800b99c 	.word	0x0800b99c
 800aca4:	0800b9a4 	.word	0x0800b9a4

0800aca8 <siprintf>:
 800aca8:	b40e      	push	{r1, r2, r3}
 800acaa:	b510      	push	{r4, lr}
 800acac:	b09d      	sub	sp, #116	@ 0x74
 800acae:	ab1f      	add	r3, sp, #124	@ 0x7c
 800acb0:	9002      	str	r0, [sp, #8]
 800acb2:	9006      	str	r0, [sp, #24]
 800acb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800acb8:	480a      	ldr	r0, [pc, #40]	@ (800ace4 <siprintf+0x3c>)
 800acba:	9107      	str	r1, [sp, #28]
 800acbc:	9104      	str	r1, [sp, #16]
 800acbe:	490a      	ldr	r1, [pc, #40]	@ (800ace8 <siprintf+0x40>)
 800acc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800acc4:	9105      	str	r1, [sp, #20]
 800acc6:	2400      	movs	r4, #0
 800acc8:	a902      	add	r1, sp, #8
 800acca:	6800      	ldr	r0, [r0, #0]
 800accc:	9301      	str	r3, [sp, #4]
 800acce:	941b      	str	r4, [sp, #108]	@ 0x6c
 800acd0:	f000 f9a2 	bl	800b018 <_svfiprintf_r>
 800acd4:	9b02      	ldr	r3, [sp, #8]
 800acd6:	701c      	strb	r4, [r3, #0]
 800acd8:	b01d      	add	sp, #116	@ 0x74
 800acda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acde:	b003      	add	sp, #12
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop
 800ace4:	24000018 	.word	0x24000018
 800ace8:	ffff0208 	.word	0xffff0208

0800acec <memset>:
 800acec:	4402      	add	r2, r0
 800acee:	4603      	mov	r3, r0
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d100      	bne.n	800acf6 <memset+0xa>
 800acf4:	4770      	bx	lr
 800acf6:	f803 1b01 	strb.w	r1, [r3], #1
 800acfa:	e7f9      	b.n	800acf0 <memset+0x4>

0800acfc <__errno>:
 800acfc:	4b01      	ldr	r3, [pc, #4]	@ (800ad04 <__errno+0x8>)
 800acfe:	6818      	ldr	r0, [r3, #0]
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	24000018 	.word	0x24000018

0800ad08 <__libc_init_array>:
 800ad08:	b570      	push	{r4, r5, r6, lr}
 800ad0a:	4d0d      	ldr	r5, [pc, #52]	@ (800ad40 <__libc_init_array+0x38>)
 800ad0c:	4c0d      	ldr	r4, [pc, #52]	@ (800ad44 <__libc_init_array+0x3c>)
 800ad0e:	1b64      	subs	r4, r4, r5
 800ad10:	10a4      	asrs	r4, r4, #2
 800ad12:	2600      	movs	r6, #0
 800ad14:	42a6      	cmp	r6, r4
 800ad16:	d109      	bne.n	800ad2c <__libc_init_array+0x24>
 800ad18:	4d0b      	ldr	r5, [pc, #44]	@ (800ad48 <__libc_init_array+0x40>)
 800ad1a:	4c0c      	ldr	r4, [pc, #48]	@ (800ad4c <__libc_init_array+0x44>)
 800ad1c:	f000 fc64 	bl	800b5e8 <_init>
 800ad20:	1b64      	subs	r4, r4, r5
 800ad22:	10a4      	asrs	r4, r4, #2
 800ad24:	2600      	movs	r6, #0
 800ad26:	42a6      	cmp	r6, r4
 800ad28:	d105      	bne.n	800ad36 <__libc_init_array+0x2e>
 800ad2a:	bd70      	pop	{r4, r5, r6, pc}
 800ad2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad30:	4798      	blx	r3
 800ad32:	3601      	adds	r6, #1
 800ad34:	e7ee      	b.n	800ad14 <__libc_init_array+0xc>
 800ad36:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad3a:	4798      	blx	r3
 800ad3c:	3601      	adds	r6, #1
 800ad3e:	e7f2      	b.n	800ad26 <__libc_init_array+0x1e>
 800ad40:	0800b9e8 	.word	0x0800b9e8
 800ad44:	0800b9e8 	.word	0x0800b9e8
 800ad48:	0800b9e8 	.word	0x0800b9e8
 800ad4c:	0800b9f0 	.word	0x0800b9f0

0800ad50 <__retarget_lock_acquire_recursive>:
 800ad50:	4770      	bx	lr

0800ad52 <__retarget_lock_release_recursive>:
 800ad52:	4770      	bx	lr

0800ad54 <memcpy>:
 800ad54:	440a      	add	r2, r1
 800ad56:	4291      	cmp	r1, r2
 800ad58:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad5c:	d100      	bne.n	800ad60 <memcpy+0xc>
 800ad5e:	4770      	bx	lr
 800ad60:	b510      	push	{r4, lr}
 800ad62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad6a:	4291      	cmp	r1, r2
 800ad6c:	d1f9      	bne.n	800ad62 <memcpy+0xe>
 800ad6e:	bd10      	pop	{r4, pc}

0800ad70 <_free_r>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	4605      	mov	r5, r0
 800ad74:	2900      	cmp	r1, #0
 800ad76:	d041      	beq.n	800adfc <_free_r+0x8c>
 800ad78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad7c:	1f0c      	subs	r4, r1, #4
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	bfb8      	it	lt
 800ad82:	18e4      	addlt	r4, r4, r3
 800ad84:	f000 f8e0 	bl	800af48 <__malloc_lock>
 800ad88:	4a1d      	ldr	r2, [pc, #116]	@ (800ae00 <_free_r+0x90>)
 800ad8a:	6813      	ldr	r3, [r2, #0]
 800ad8c:	b933      	cbnz	r3, 800ad9c <_free_r+0x2c>
 800ad8e:	6063      	str	r3, [r4, #4]
 800ad90:	6014      	str	r4, [r2, #0]
 800ad92:	4628      	mov	r0, r5
 800ad94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad98:	f000 b8dc 	b.w	800af54 <__malloc_unlock>
 800ad9c:	42a3      	cmp	r3, r4
 800ad9e:	d908      	bls.n	800adb2 <_free_r+0x42>
 800ada0:	6820      	ldr	r0, [r4, #0]
 800ada2:	1821      	adds	r1, r4, r0
 800ada4:	428b      	cmp	r3, r1
 800ada6:	bf01      	itttt	eq
 800ada8:	6819      	ldreq	r1, [r3, #0]
 800adaa:	685b      	ldreq	r3, [r3, #4]
 800adac:	1809      	addeq	r1, r1, r0
 800adae:	6021      	streq	r1, [r4, #0]
 800adb0:	e7ed      	b.n	800ad8e <_free_r+0x1e>
 800adb2:	461a      	mov	r2, r3
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	b10b      	cbz	r3, 800adbc <_free_r+0x4c>
 800adb8:	42a3      	cmp	r3, r4
 800adba:	d9fa      	bls.n	800adb2 <_free_r+0x42>
 800adbc:	6811      	ldr	r1, [r2, #0]
 800adbe:	1850      	adds	r0, r2, r1
 800adc0:	42a0      	cmp	r0, r4
 800adc2:	d10b      	bne.n	800addc <_free_r+0x6c>
 800adc4:	6820      	ldr	r0, [r4, #0]
 800adc6:	4401      	add	r1, r0
 800adc8:	1850      	adds	r0, r2, r1
 800adca:	4283      	cmp	r3, r0
 800adcc:	6011      	str	r1, [r2, #0]
 800adce:	d1e0      	bne.n	800ad92 <_free_r+0x22>
 800add0:	6818      	ldr	r0, [r3, #0]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	6053      	str	r3, [r2, #4]
 800add6:	4408      	add	r0, r1
 800add8:	6010      	str	r0, [r2, #0]
 800adda:	e7da      	b.n	800ad92 <_free_r+0x22>
 800addc:	d902      	bls.n	800ade4 <_free_r+0x74>
 800adde:	230c      	movs	r3, #12
 800ade0:	602b      	str	r3, [r5, #0]
 800ade2:	e7d6      	b.n	800ad92 <_free_r+0x22>
 800ade4:	6820      	ldr	r0, [r4, #0]
 800ade6:	1821      	adds	r1, r4, r0
 800ade8:	428b      	cmp	r3, r1
 800adea:	bf04      	itt	eq
 800adec:	6819      	ldreq	r1, [r3, #0]
 800adee:	685b      	ldreq	r3, [r3, #4]
 800adf0:	6063      	str	r3, [r4, #4]
 800adf2:	bf04      	itt	eq
 800adf4:	1809      	addeq	r1, r1, r0
 800adf6:	6021      	streq	r1, [r4, #0]
 800adf8:	6054      	str	r4, [r2, #4]
 800adfa:	e7ca      	b.n	800ad92 <_free_r+0x22>
 800adfc:	bd38      	pop	{r3, r4, r5, pc}
 800adfe:	bf00      	nop
 800ae00:	24000db4 	.word	0x24000db4

0800ae04 <sbrk_aligned>:
 800ae04:	b570      	push	{r4, r5, r6, lr}
 800ae06:	4e0f      	ldr	r6, [pc, #60]	@ (800ae44 <sbrk_aligned+0x40>)
 800ae08:	460c      	mov	r4, r1
 800ae0a:	6831      	ldr	r1, [r6, #0]
 800ae0c:	4605      	mov	r5, r0
 800ae0e:	b911      	cbnz	r1, 800ae16 <sbrk_aligned+0x12>
 800ae10:	f000 fba4 	bl	800b55c <_sbrk_r>
 800ae14:	6030      	str	r0, [r6, #0]
 800ae16:	4621      	mov	r1, r4
 800ae18:	4628      	mov	r0, r5
 800ae1a:	f000 fb9f 	bl	800b55c <_sbrk_r>
 800ae1e:	1c43      	adds	r3, r0, #1
 800ae20:	d103      	bne.n	800ae2a <sbrk_aligned+0x26>
 800ae22:	f04f 34ff 	mov.w	r4, #4294967295
 800ae26:	4620      	mov	r0, r4
 800ae28:	bd70      	pop	{r4, r5, r6, pc}
 800ae2a:	1cc4      	adds	r4, r0, #3
 800ae2c:	f024 0403 	bic.w	r4, r4, #3
 800ae30:	42a0      	cmp	r0, r4
 800ae32:	d0f8      	beq.n	800ae26 <sbrk_aligned+0x22>
 800ae34:	1a21      	subs	r1, r4, r0
 800ae36:	4628      	mov	r0, r5
 800ae38:	f000 fb90 	bl	800b55c <_sbrk_r>
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	d1f2      	bne.n	800ae26 <sbrk_aligned+0x22>
 800ae40:	e7ef      	b.n	800ae22 <sbrk_aligned+0x1e>
 800ae42:	bf00      	nop
 800ae44:	24000db0 	.word	0x24000db0

0800ae48 <_malloc_r>:
 800ae48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae4c:	1ccd      	adds	r5, r1, #3
 800ae4e:	f025 0503 	bic.w	r5, r5, #3
 800ae52:	3508      	adds	r5, #8
 800ae54:	2d0c      	cmp	r5, #12
 800ae56:	bf38      	it	cc
 800ae58:	250c      	movcc	r5, #12
 800ae5a:	2d00      	cmp	r5, #0
 800ae5c:	4606      	mov	r6, r0
 800ae5e:	db01      	blt.n	800ae64 <_malloc_r+0x1c>
 800ae60:	42a9      	cmp	r1, r5
 800ae62:	d904      	bls.n	800ae6e <_malloc_r+0x26>
 800ae64:	230c      	movs	r3, #12
 800ae66:	6033      	str	r3, [r6, #0]
 800ae68:	2000      	movs	r0, #0
 800ae6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af44 <_malloc_r+0xfc>
 800ae72:	f000 f869 	bl	800af48 <__malloc_lock>
 800ae76:	f8d8 3000 	ldr.w	r3, [r8]
 800ae7a:	461c      	mov	r4, r3
 800ae7c:	bb44      	cbnz	r4, 800aed0 <_malloc_r+0x88>
 800ae7e:	4629      	mov	r1, r5
 800ae80:	4630      	mov	r0, r6
 800ae82:	f7ff ffbf 	bl	800ae04 <sbrk_aligned>
 800ae86:	1c43      	adds	r3, r0, #1
 800ae88:	4604      	mov	r4, r0
 800ae8a:	d158      	bne.n	800af3e <_malloc_r+0xf6>
 800ae8c:	f8d8 4000 	ldr.w	r4, [r8]
 800ae90:	4627      	mov	r7, r4
 800ae92:	2f00      	cmp	r7, #0
 800ae94:	d143      	bne.n	800af1e <_malloc_r+0xd6>
 800ae96:	2c00      	cmp	r4, #0
 800ae98:	d04b      	beq.n	800af32 <_malloc_r+0xea>
 800ae9a:	6823      	ldr	r3, [r4, #0]
 800ae9c:	4639      	mov	r1, r7
 800ae9e:	4630      	mov	r0, r6
 800aea0:	eb04 0903 	add.w	r9, r4, r3
 800aea4:	f000 fb5a 	bl	800b55c <_sbrk_r>
 800aea8:	4581      	cmp	r9, r0
 800aeaa:	d142      	bne.n	800af32 <_malloc_r+0xea>
 800aeac:	6821      	ldr	r1, [r4, #0]
 800aeae:	1a6d      	subs	r5, r5, r1
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f7ff ffa6 	bl	800ae04 <sbrk_aligned>
 800aeb8:	3001      	adds	r0, #1
 800aeba:	d03a      	beq.n	800af32 <_malloc_r+0xea>
 800aebc:	6823      	ldr	r3, [r4, #0]
 800aebe:	442b      	add	r3, r5
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	f8d8 3000 	ldr.w	r3, [r8]
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	bb62      	cbnz	r2, 800af24 <_malloc_r+0xdc>
 800aeca:	f8c8 7000 	str.w	r7, [r8]
 800aece:	e00f      	b.n	800aef0 <_malloc_r+0xa8>
 800aed0:	6822      	ldr	r2, [r4, #0]
 800aed2:	1b52      	subs	r2, r2, r5
 800aed4:	d420      	bmi.n	800af18 <_malloc_r+0xd0>
 800aed6:	2a0b      	cmp	r2, #11
 800aed8:	d917      	bls.n	800af0a <_malloc_r+0xc2>
 800aeda:	1961      	adds	r1, r4, r5
 800aedc:	42a3      	cmp	r3, r4
 800aede:	6025      	str	r5, [r4, #0]
 800aee0:	bf18      	it	ne
 800aee2:	6059      	strne	r1, [r3, #4]
 800aee4:	6863      	ldr	r3, [r4, #4]
 800aee6:	bf08      	it	eq
 800aee8:	f8c8 1000 	streq.w	r1, [r8]
 800aeec:	5162      	str	r2, [r4, r5]
 800aeee:	604b      	str	r3, [r1, #4]
 800aef0:	4630      	mov	r0, r6
 800aef2:	f000 f82f 	bl	800af54 <__malloc_unlock>
 800aef6:	f104 000b 	add.w	r0, r4, #11
 800aefa:	1d23      	adds	r3, r4, #4
 800aefc:	f020 0007 	bic.w	r0, r0, #7
 800af00:	1ac2      	subs	r2, r0, r3
 800af02:	bf1c      	itt	ne
 800af04:	1a1b      	subne	r3, r3, r0
 800af06:	50a3      	strne	r3, [r4, r2]
 800af08:	e7af      	b.n	800ae6a <_malloc_r+0x22>
 800af0a:	6862      	ldr	r2, [r4, #4]
 800af0c:	42a3      	cmp	r3, r4
 800af0e:	bf0c      	ite	eq
 800af10:	f8c8 2000 	streq.w	r2, [r8]
 800af14:	605a      	strne	r2, [r3, #4]
 800af16:	e7eb      	b.n	800aef0 <_malloc_r+0xa8>
 800af18:	4623      	mov	r3, r4
 800af1a:	6864      	ldr	r4, [r4, #4]
 800af1c:	e7ae      	b.n	800ae7c <_malloc_r+0x34>
 800af1e:	463c      	mov	r4, r7
 800af20:	687f      	ldr	r7, [r7, #4]
 800af22:	e7b6      	b.n	800ae92 <_malloc_r+0x4a>
 800af24:	461a      	mov	r2, r3
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	42a3      	cmp	r3, r4
 800af2a:	d1fb      	bne.n	800af24 <_malloc_r+0xdc>
 800af2c:	2300      	movs	r3, #0
 800af2e:	6053      	str	r3, [r2, #4]
 800af30:	e7de      	b.n	800aef0 <_malloc_r+0xa8>
 800af32:	230c      	movs	r3, #12
 800af34:	6033      	str	r3, [r6, #0]
 800af36:	4630      	mov	r0, r6
 800af38:	f000 f80c 	bl	800af54 <__malloc_unlock>
 800af3c:	e794      	b.n	800ae68 <_malloc_r+0x20>
 800af3e:	6005      	str	r5, [r0, #0]
 800af40:	e7d6      	b.n	800aef0 <_malloc_r+0xa8>
 800af42:	bf00      	nop
 800af44:	24000db4 	.word	0x24000db4

0800af48 <__malloc_lock>:
 800af48:	4801      	ldr	r0, [pc, #4]	@ (800af50 <__malloc_lock+0x8>)
 800af4a:	f7ff bf01 	b.w	800ad50 <__retarget_lock_acquire_recursive>
 800af4e:	bf00      	nop
 800af50:	24000dac 	.word	0x24000dac

0800af54 <__malloc_unlock>:
 800af54:	4801      	ldr	r0, [pc, #4]	@ (800af5c <__malloc_unlock+0x8>)
 800af56:	f7ff befc 	b.w	800ad52 <__retarget_lock_release_recursive>
 800af5a:	bf00      	nop
 800af5c:	24000dac 	.word	0x24000dac

0800af60 <__ssputs_r>:
 800af60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af64:	688e      	ldr	r6, [r1, #8]
 800af66:	461f      	mov	r7, r3
 800af68:	42be      	cmp	r6, r7
 800af6a:	680b      	ldr	r3, [r1, #0]
 800af6c:	4682      	mov	sl, r0
 800af6e:	460c      	mov	r4, r1
 800af70:	4690      	mov	r8, r2
 800af72:	d82d      	bhi.n	800afd0 <__ssputs_r+0x70>
 800af74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800af7c:	d026      	beq.n	800afcc <__ssputs_r+0x6c>
 800af7e:	6965      	ldr	r5, [r4, #20]
 800af80:	6909      	ldr	r1, [r1, #16]
 800af82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af86:	eba3 0901 	sub.w	r9, r3, r1
 800af8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af8e:	1c7b      	adds	r3, r7, #1
 800af90:	444b      	add	r3, r9
 800af92:	106d      	asrs	r5, r5, #1
 800af94:	429d      	cmp	r5, r3
 800af96:	bf38      	it	cc
 800af98:	461d      	movcc	r5, r3
 800af9a:	0553      	lsls	r3, r2, #21
 800af9c:	d527      	bpl.n	800afee <__ssputs_r+0x8e>
 800af9e:	4629      	mov	r1, r5
 800afa0:	f7ff ff52 	bl	800ae48 <_malloc_r>
 800afa4:	4606      	mov	r6, r0
 800afa6:	b360      	cbz	r0, 800b002 <__ssputs_r+0xa2>
 800afa8:	6921      	ldr	r1, [r4, #16]
 800afaa:	464a      	mov	r2, r9
 800afac:	f7ff fed2 	bl	800ad54 <memcpy>
 800afb0:	89a3      	ldrh	r3, [r4, #12]
 800afb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800afb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afba:	81a3      	strh	r3, [r4, #12]
 800afbc:	6126      	str	r6, [r4, #16]
 800afbe:	6165      	str	r5, [r4, #20]
 800afc0:	444e      	add	r6, r9
 800afc2:	eba5 0509 	sub.w	r5, r5, r9
 800afc6:	6026      	str	r6, [r4, #0]
 800afc8:	60a5      	str	r5, [r4, #8]
 800afca:	463e      	mov	r6, r7
 800afcc:	42be      	cmp	r6, r7
 800afce:	d900      	bls.n	800afd2 <__ssputs_r+0x72>
 800afd0:	463e      	mov	r6, r7
 800afd2:	6820      	ldr	r0, [r4, #0]
 800afd4:	4632      	mov	r2, r6
 800afd6:	4641      	mov	r1, r8
 800afd8:	f000 faa6 	bl	800b528 <memmove>
 800afdc:	68a3      	ldr	r3, [r4, #8]
 800afde:	1b9b      	subs	r3, r3, r6
 800afe0:	60a3      	str	r3, [r4, #8]
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	4433      	add	r3, r6
 800afe6:	6023      	str	r3, [r4, #0]
 800afe8:	2000      	movs	r0, #0
 800afea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afee:	462a      	mov	r2, r5
 800aff0:	f000 fac4 	bl	800b57c <_realloc_r>
 800aff4:	4606      	mov	r6, r0
 800aff6:	2800      	cmp	r0, #0
 800aff8:	d1e0      	bne.n	800afbc <__ssputs_r+0x5c>
 800affa:	6921      	ldr	r1, [r4, #16]
 800affc:	4650      	mov	r0, sl
 800affe:	f7ff feb7 	bl	800ad70 <_free_r>
 800b002:	230c      	movs	r3, #12
 800b004:	f8ca 3000 	str.w	r3, [sl]
 800b008:	89a3      	ldrh	r3, [r4, #12]
 800b00a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b00e:	81a3      	strh	r3, [r4, #12]
 800b010:	f04f 30ff 	mov.w	r0, #4294967295
 800b014:	e7e9      	b.n	800afea <__ssputs_r+0x8a>
	...

0800b018 <_svfiprintf_r>:
 800b018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01c:	4698      	mov	r8, r3
 800b01e:	898b      	ldrh	r3, [r1, #12]
 800b020:	061b      	lsls	r3, r3, #24
 800b022:	b09d      	sub	sp, #116	@ 0x74
 800b024:	4607      	mov	r7, r0
 800b026:	460d      	mov	r5, r1
 800b028:	4614      	mov	r4, r2
 800b02a:	d510      	bpl.n	800b04e <_svfiprintf_r+0x36>
 800b02c:	690b      	ldr	r3, [r1, #16]
 800b02e:	b973      	cbnz	r3, 800b04e <_svfiprintf_r+0x36>
 800b030:	2140      	movs	r1, #64	@ 0x40
 800b032:	f7ff ff09 	bl	800ae48 <_malloc_r>
 800b036:	6028      	str	r0, [r5, #0]
 800b038:	6128      	str	r0, [r5, #16]
 800b03a:	b930      	cbnz	r0, 800b04a <_svfiprintf_r+0x32>
 800b03c:	230c      	movs	r3, #12
 800b03e:	603b      	str	r3, [r7, #0]
 800b040:	f04f 30ff 	mov.w	r0, #4294967295
 800b044:	b01d      	add	sp, #116	@ 0x74
 800b046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04a:	2340      	movs	r3, #64	@ 0x40
 800b04c:	616b      	str	r3, [r5, #20]
 800b04e:	2300      	movs	r3, #0
 800b050:	9309      	str	r3, [sp, #36]	@ 0x24
 800b052:	2320      	movs	r3, #32
 800b054:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b058:	f8cd 800c 	str.w	r8, [sp, #12]
 800b05c:	2330      	movs	r3, #48	@ 0x30
 800b05e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b1fc <_svfiprintf_r+0x1e4>
 800b062:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b066:	f04f 0901 	mov.w	r9, #1
 800b06a:	4623      	mov	r3, r4
 800b06c:	469a      	mov	sl, r3
 800b06e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b072:	b10a      	cbz	r2, 800b078 <_svfiprintf_r+0x60>
 800b074:	2a25      	cmp	r2, #37	@ 0x25
 800b076:	d1f9      	bne.n	800b06c <_svfiprintf_r+0x54>
 800b078:	ebba 0b04 	subs.w	fp, sl, r4
 800b07c:	d00b      	beq.n	800b096 <_svfiprintf_r+0x7e>
 800b07e:	465b      	mov	r3, fp
 800b080:	4622      	mov	r2, r4
 800b082:	4629      	mov	r1, r5
 800b084:	4638      	mov	r0, r7
 800b086:	f7ff ff6b 	bl	800af60 <__ssputs_r>
 800b08a:	3001      	adds	r0, #1
 800b08c:	f000 80a7 	beq.w	800b1de <_svfiprintf_r+0x1c6>
 800b090:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b092:	445a      	add	r2, fp
 800b094:	9209      	str	r2, [sp, #36]	@ 0x24
 800b096:	f89a 3000 	ldrb.w	r3, [sl]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f000 809f 	beq.w	800b1de <_svfiprintf_r+0x1c6>
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0aa:	f10a 0a01 	add.w	sl, sl, #1
 800b0ae:	9304      	str	r3, [sp, #16]
 800b0b0:	9307      	str	r3, [sp, #28]
 800b0b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0b8:	4654      	mov	r4, sl
 800b0ba:	2205      	movs	r2, #5
 800b0bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c0:	484e      	ldr	r0, [pc, #312]	@ (800b1fc <_svfiprintf_r+0x1e4>)
 800b0c2:	f7f5 f92d 	bl	8000320 <memchr>
 800b0c6:	9a04      	ldr	r2, [sp, #16]
 800b0c8:	b9d8      	cbnz	r0, 800b102 <_svfiprintf_r+0xea>
 800b0ca:	06d0      	lsls	r0, r2, #27
 800b0cc:	bf44      	itt	mi
 800b0ce:	2320      	movmi	r3, #32
 800b0d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0d4:	0711      	lsls	r1, r2, #28
 800b0d6:	bf44      	itt	mi
 800b0d8:	232b      	movmi	r3, #43	@ 0x2b
 800b0da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0de:	f89a 3000 	ldrb.w	r3, [sl]
 800b0e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0e4:	d015      	beq.n	800b112 <_svfiprintf_r+0xfa>
 800b0e6:	9a07      	ldr	r2, [sp, #28]
 800b0e8:	4654      	mov	r4, sl
 800b0ea:	2000      	movs	r0, #0
 800b0ec:	f04f 0c0a 	mov.w	ip, #10
 800b0f0:	4621      	mov	r1, r4
 800b0f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0f6:	3b30      	subs	r3, #48	@ 0x30
 800b0f8:	2b09      	cmp	r3, #9
 800b0fa:	d94b      	bls.n	800b194 <_svfiprintf_r+0x17c>
 800b0fc:	b1b0      	cbz	r0, 800b12c <_svfiprintf_r+0x114>
 800b0fe:	9207      	str	r2, [sp, #28]
 800b100:	e014      	b.n	800b12c <_svfiprintf_r+0x114>
 800b102:	eba0 0308 	sub.w	r3, r0, r8
 800b106:	fa09 f303 	lsl.w	r3, r9, r3
 800b10a:	4313      	orrs	r3, r2
 800b10c:	9304      	str	r3, [sp, #16]
 800b10e:	46a2      	mov	sl, r4
 800b110:	e7d2      	b.n	800b0b8 <_svfiprintf_r+0xa0>
 800b112:	9b03      	ldr	r3, [sp, #12]
 800b114:	1d19      	adds	r1, r3, #4
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	9103      	str	r1, [sp, #12]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	bfbb      	ittet	lt
 800b11e:	425b      	neglt	r3, r3
 800b120:	f042 0202 	orrlt.w	r2, r2, #2
 800b124:	9307      	strge	r3, [sp, #28]
 800b126:	9307      	strlt	r3, [sp, #28]
 800b128:	bfb8      	it	lt
 800b12a:	9204      	strlt	r2, [sp, #16]
 800b12c:	7823      	ldrb	r3, [r4, #0]
 800b12e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b130:	d10a      	bne.n	800b148 <_svfiprintf_r+0x130>
 800b132:	7863      	ldrb	r3, [r4, #1]
 800b134:	2b2a      	cmp	r3, #42	@ 0x2a
 800b136:	d132      	bne.n	800b19e <_svfiprintf_r+0x186>
 800b138:	9b03      	ldr	r3, [sp, #12]
 800b13a:	1d1a      	adds	r2, r3, #4
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	9203      	str	r2, [sp, #12]
 800b140:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b144:	3402      	adds	r4, #2
 800b146:	9305      	str	r3, [sp, #20]
 800b148:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b20c <_svfiprintf_r+0x1f4>
 800b14c:	7821      	ldrb	r1, [r4, #0]
 800b14e:	2203      	movs	r2, #3
 800b150:	4650      	mov	r0, sl
 800b152:	f7f5 f8e5 	bl	8000320 <memchr>
 800b156:	b138      	cbz	r0, 800b168 <_svfiprintf_r+0x150>
 800b158:	9b04      	ldr	r3, [sp, #16]
 800b15a:	eba0 000a 	sub.w	r0, r0, sl
 800b15e:	2240      	movs	r2, #64	@ 0x40
 800b160:	4082      	lsls	r2, r0
 800b162:	4313      	orrs	r3, r2
 800b164:	3401      	adds	r4, #1
 800b166:	9304      	str	r3, [sp, #16]
 800b168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b16c:	4824      	ldr	r0, [pc, #144]	@ (800b200 <_svfiprintf_r+0x1e8>)
 800b16e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b172:	2206      	movs	r2, #6
 800b174:	f7f5 f8d4 	bl	8000320 <memchr>
 800b178:	2800      	cmp	r0, #0
 800b17a:	d036      	beq.n	800b1ea <_svfiprintf_r+0x1d2>
 800b17c:	4b21      	ldr	r3, [pc, #132]	@ (800b204 <_svfiprintf_r+0x1ec>)
 800b17e:	bb1b      	cbnz	r3, 800b1c8 <_svfiprintf_r+0x1b0>
 800b180:	9b03      	ldr	r3, [sp, #12]
 800b182:	3307      	adds	r3, #7
 800b184:	f023 0307 	bic.w	r3, r3, #7
 800b188:	3308      	adds	r3, #8
 800b18a:	9303      	str	r3, [sp, #12]
 800b18c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b18e:	4433      	add	r3, r6
 800b190:	9309      	str	r3, [sp, #36]	@ 0x24
 800b192:	e76a      	b.n	800b06a <_svfiprintf_r+0x52>
 800b194:	fb0c 3202 	mla	r2, ip, r2, r3
 800b198:	460c      	mov	r4, r1
 800b19a:	2001      	movs	r0, #1
 800b19c:	e7a8      	b.n	800b0f0 <_svfiprintf_r+0xd8>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	3401      	adds	r4, #1
 800b1a2:	9305      	str	r3, [sp, #20]
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	f04f 0c0a 	mov.w	ip, #10
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1b0:	3a30      	subs	r2, #48	@ 0x30
 800b1b2:	2a09      	cmp	r2, #9
 800b1b4:	d903      	bls.n	800b1be <_svfiprintf_r+0x1a6>
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d0c6      	beq.n	800b148 <_svfiprintf_r+0x130>
 800b1ba:	9105      	str	r1, [sp, #20]
 800b1bc:	e7c4      	b.n	800b148 <_svfiprintf_r+0x130>
 800b1be:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1c2:	4604      	mov	r4, r0
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e7f0      	b.n	800b1aa <_svfiprintf_r+0x192>
 800b1c8:	ab03      	add	r3, sp, #12
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	462a      	mov	r2, r5
 800b1ce:	4b0e      	ldr	r3, [pc, #56]	@ (800b208 <_svfiprintf_r+0x1f0>)
 800b1d0:	a904      	add	r1, sp, #16
 800b1d2:	4638      	mov	r0, r7
 800b1d4:	f3af 8000 	nop.w
 800b1d8:	1c42      	adds	r2, r0, #1
 800b1da:	4606      	mov	r6, r0
 800b1dc:	d1d6      	bne.n	800b18c <_svfiprintf_r+0x174>
 800b1de:	89ab      	ldrh	r3, [r5, #12]
 800b1e0:	065b      	lsls	r3, r3, #25
 800b1e2:	f53f af2d 	bmi.w	800b040 <_svfiprintf_r+0x28>
 800b1e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1e8:	e72c      	b.n	800b044 <_svfiprintf_r+0x2c>
 800b1ea:	ab03      	add	r3, sp, #12
 800b1ec:	9300      	str	r3, [sp, #0]
 800b1ee:	462a      	mov	r2, r5
 800b1f0:	4b05      	ldr	r3, [pc, #20]	@ (800b208 <_svfiprintf_r+0x1f0>)
 800b1f2:	a904      	add	r1, sp, #16
 800b1f4:	4638      	mov	r0, r7
 800b1f6:	f000 f879 	bl	800b2ec <_printf_i>
 800b1fa:	e7ed      	b.n	800b1d8 <_svfiprintf_r+0x1c0>
 800b1fc:	0800b9ac 	.word	0x0800b9ac
 800b200:	0800b9b6 	.word	0x0800b9b6
 800b204:	00000000 	.word	0x00000000
 800b208:	0800af61 	.word	0x0800af61
 800b20c:	0800b9b2 	.word	0x0800b9b2

0800b210 <_printf_common>:
 800b210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b214:	4616      	mov	r6, r2
 800b216:	4698      	mov	r8, r3
 800b218:	688a      	ldr	r2, [r1, #8]
 800b21a:	690b      	ldr	r3, [r1, #16]
 800b21c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b220:	4293      	cmp	r3, r2
 800b222:	bfb8      	it	lt
 800b224:	4613      	movlt	r3, r2
 800b226:	6033      	str	r3, [r6, #0]
 800b228:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b22c:	4607      	mov	r7, r0
 800b22e:	460c      	mov	r4, r1
 800b230:	b10a      	cbz	r2, 800b236 <_printf_common+0x26>
 800b232:	3301      	adds	r3, #1
 800b234:	6033      	str	r3, [r6, #0]
 800b236:	6823      	ldr	r3, [r4, #0]
 800b238:	0699      	lsls	r1, r3, #26
 800b23a:	bf42      	ittt	mi
 800b23c:	6833      	ldrmi	r3, [r6, #0]
 800b23e:	3302      	addmi	r3, #2
 800b240:	6033      	strmi	r3, [r6, #0]
 800b242:	6825      	ldr	r5, [r4, #0]
 800b244:	f015 0506 	ands.w	r5, r5, #6
 800b248:	d106      	bne.n	800b258 <_printf_common+0x48>
 800b24a:	f104 0a19 	add.w	sl, r4, #25
 800b24e:	68e3      	ldr	r3, [r4, #12]
 800b250:	6832      	ldr	r2, [r6, #0]
 800b252:	1a9b      	subs	r3, r3, r2
 800b254:	42ab      	cmp	r3, r5
 800b256:	dc26      	bgt.n	800b2a6 <_printf_common+0x96>
 800b258:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b25c:	6822      	ldr	r2, [r4, #0]
 800b25e:	3b00      	subs	r3, #0
 800b260:	bf18      	it	ne
 800b262:	2301      	movne	r3, #1
 800b264:	0692      	lsls	r2, r2, #26
 800b266:	d42b      	bmi.n	800b2c0 <_printf_common+0xb0>
 800b268:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b26c:	4641      	mov	r1, r8
 800b26e:	4638      	mov	r0, r7
 800b270:	47c8      	blx	r9
 800b272:	3001      	adds	r0, #1
 800b274:	d01e      	beq.n	800b2b4 <_printf_common+0xa4>
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	6922      	ldr	r2, [r4, #16]
 800b27a:	f003 0306 	and.w	r3, r3, #6
 800b27e:	2b04      	cmp	r3, #4
 800b280:	bf02      	ittt	eq
 800b282:	68e5      	ldreq	r5, [r4, #12]
 800b284:	6833      	ldreq	r3, [r6, #0]
 800b286:	1aed      	subeq	r5, r5, r3
 800b288:	68a3      	ldr	r3, [r4, #8]
 800b28a:	bf0c      	ite	eq
 800b28c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b290:	2500      	movne	r5, #0
 800b292:	4293      	cmp	r3, r2
 800b294:	bfc4      	itt	gt
 800b296:	1a9b      	subgt	r3, r3, r2
 800b298:	18ed      	addgt	r5, r5, r3
 800b29a:	2600      	movs	r6, #0
 800b29c:	341a      	adds	r4, #26
 800b29e:	42b5      	cmp	r5, r6
 800b2a0:	d11a      	bne.n	800b2d8 <_printf_common+0xc8>
 800b2a2:	2000      	movs	r0, #0
 800b2a4:	e008      	b.n	800b2b8 <_printf_common+0xa8>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	4652      	mov	r2, sl
 800b2aa:	4641      	mov	r1, r8
 800b2ac:	4638      	mov	r0, r7
 800b2ae:	47c8      	blx	r9
 800b2b0:	3001      	adds	r0, #1
 800b2b2:	d103      	bne.n	800b2bc <_printf_common+0xac>
 800b2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2bc:	3501      	adds	r5, #1
 800b2be:	e7c6      	b.n	800b24e <_printf_common+0x3e>
 800b2c0:	18e1      	adds	r1, r4, r3
 800b2c2:	1c5a      	adds	r2, r3, #1
 800b2c4:	2030      	movs	r0, #48	@ 0x30
 800b2c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b2ca:	4422      	add	r2, r4
 800b2cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b2d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b2d4:	3302      	adds	r3, #2
 800b2d6:	e7c7      	b.n	800b268 <_printf_common+0x58>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	4622      	mov	r2, r4
 800b2dc:	4641      	mov	r1, r8
 800b2de:	4638      	mov	r0, r7
 800b2e0:	47c8      	blx	r9
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	d0e6      	beq.n	800b2b4 <_printf_common+0xa4>
 800b2e6:	3601      	adds	r6, #1
 800b2e8:	e7d9      	b.n	800b29e <_printf_common+0x8e>
	...

0800b2ec <_printf_i>:
 800b2ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f0:	7e0f      	ldrb	r7, [r1, #24]
 800b2f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b2f4:	2f78      	cmp	r7, #120	@ 0x78
 800b2f6:	4691      	mov	r9, r2
 800b2f8:	4680      	mov	r8, r0
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	469a      	mov	sl, r3
 800b2fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b302:	d807      	bhi.n	800b314 <_printf_i+0x28>
 800b304:	2f62      	cmp	r7, #98	@ 0x62
 800b306:	d80a      	bhi.n	800b31e <_printf_i+0x32>
 800b308:	2f00      	cmp	r7, #0
 800b30a:	f000 80d1 	beq.w	800b4b0 <_printf_i+0x1c4>
 800b30e:	2f58      	cmp	r7, #88	@ 0x58
 800b310:	f000 80b8 	beq.w	800b484 <_printf_i+0x198>
 800b314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b318:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b31c:	e03a      	b.n	800b394 <_printf_i+0xa8>
 800b31e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b322:	2b15      	cmp	r3, #21
 800b324:	d8f6      	bhi.n	800b314 <_printf_i+0x28>
 800b326:	a101      	add	r1, pc, #4	@ (adr r1, 800b32c <_printf_i+0x40>)
 800b328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b32c:	0800b385 	.word	0x0800b385
 800b330:	0800b399 	.word	0x0800b399
 800b334:	0800b315 	.word	0x0800b315
 800b338:	0800b315 	.word	0x0800b315
 800b33c:	0800b315 	.word	0x0800b315
 800b340:	0800b315 	.word	0x0800b315
 800b344:	0800b399 	.word	0x0800b399
 800b348:	0800b315 	.word	0x0800b315
 800b34c:	0800b315 	.word	0x0800b315
 800b350:	0800b315 	.word	0x0800b315
 800b354:	0800b315 	.word	0x0800b315
 800b358:	0800b497 	.word	0x0800b497
 800b35c:	0800b3c3 	.word	0x0800b3c3
 800b360:	0800b451 	.word	0x0800b451
 800b364:	0800b315 	.word	0x0800b315
 800b368:	0800b315 	.word	0x0800b315
 800b36c:	0800b4b9 	.word	0x0800b4b9
 800b370:	0800b315 	.word	0x0800b315
 800b374:	0800b3c3 	.word	0x0800b3c3
 800b378:	0800b315 	.word	0x0800b315
 800b37c:	0800b315 	.word	0x0800b315
 800b380:	0800b459 	.word	0x0800b459
 800b384:	6833      	ldr	r3, [r6, #0]
 800b386:	1d1a      	adds	r2, r3, #4
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	6032      	str	r2, [r6, #0]
 800b38c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b390:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b394:	2301      	movs	r3, #1
 800b396:	e09c      	b.n	800b4d2 <_printf_i+0x1e6>
 800b398:	6833      	ldr	r3, [r6, #0]
 800b39a:	6820      	ldr	r0, [r4, #0]
 800b39c:	1d19      	adds	r1, r3, #4
 800b39e:	6031      	str	r1, [r6, #0]
 800b3a0:	0606      	lsls	r6, r0, #24
 800b3a2:	d501      	bpl.n	800b3a8 <_printf_i+0xbc>
 800b3a4:	681d      	ldr	r5, [r3, #0]
 800b3a6:	e003      	b.n	800b3b0 <_printf_i+0xc4>
 800b3a8:	0645      	lsls	r5, r0, #25
 800b3aa:	d5fb      	bpl.n	800b3a4 <_printf_i+0xb8>
 800b3ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3b0:	2d00      	cmp	r5, #0
 800b3b2:	da03      	bge.n	800b3bc <_printf_i+0xd0>
 800b3b4:	232d      	movs	r3, #45	@ 0x2d
 800b3b6:	426d      	negs	r5, r5
 800b3b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3bc:	4858      	ldr	r0, [pc, #352]	@ (800b520 <_printf_i+0x234>)
 800b3be:	230a      	movs	r3, #10
 800b3c0:	e011      	b.n	800b3e6 <_printf_i+0xfa>
 800b3c2:	6821      	ldr	r1, [r4, #0]
 800b3c4:	6833      	ldr	r3, [r6, #0]
 800b3c6:	0608      	lsls	r0, r1, #24
 800b3c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b3cc:	d402      	bmi.n	800b3d4 <_printf_i+0xe8>
 800b3ce:	0649      	lsls	r1, r1, #25
 800b3d0:	bf48      	it	mi
 800b3d2:	b2ad      	uxthmi	r5, r5
 800b3d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b3d6:	4852      	ldr	r0, [pc, #328]	@ (800b520 <_printf_i+0x234>)
 800b3d8:	6033      	str	r3, [r6, #0]
 800b3da:	bf14      	ite	ne
 800b3dc:	230a      	movne	r3, #10
 800b3de:	2308      	moveq	r3, #8
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b3e6:	6866      	ldr	r6, [r4, #4]
 800b3e8:	60a6      	str	r6, [r4, #8]
 800b3ea:	2e00      	cmp	r6, #0
 800b3ec:	db05      	blt.n	800b3fa <_printf_i+0x10e>
 800b3ee:	6821      	ldr	r1, [r4, #0]
 800b3f0:	432e      	orrs	r6, r5
 800b3f2:	f021 0104 	bic.w	r1, r1, #4
 800b3f6:	6021      	str	r1, [r4, #0]
 800b3f8:	d04b      	beq.n	800b492 <_printf_i+0x1a6>
 800b3fa:	4616      	mov	r6, r2
 800b3fc:	fbb5 f1f3 	udiv	r1, r5, r3
 800b400:	fb03 5711 	mls	r7, r3, r1, r5
 800b404:	5dc7      	ldrb	r7, [r0, r7]
 800b406:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b40a:	462f      	mov	r7, r5
 800b40c:	42bb      	cmp	r3, r7
 800b40e:	460d      	mov	r5, r1
 800b410:	d9f4      	bls.n	800b3fc <_printf_i+0x110>
 800b412:	2b08      	cmp	r3, #8
 800b414:	d10b      	bne.n	800b42e <_printf_i+0x142>
 800b416:	6823      	ldr	r3, [r4, #0]
 800b418:	07df      	lsls	r7, r3, #31
 800b41a:	d508      	bpl.n	800b42e <_printf_i+0x142>
 800b41c:	6923      	ldr	r3, [r4, #16]
 800b41e:	6861      	ldr	r1, [r4, #4]
 800b420:	4299      	cmp	r1, r3
 800b422:	bfde      	ittt	le
 800b424:	2330      	movle	r3, #48	@ 0x30
 800b426:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b42a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b42e:	1b92      	subs	r2, r2, r6
 800b430:	6122      	str	r2, [r4, #16]
 800b432:	f8cd a000 	str.w	sl, [sp]
 800b436:	464b      	mov	r3, r9
 800b438:	aa03      	add	r2, sp, #12
 800b43a:	4621      	mov	r1, r4
 800b43c:	4640      	mov	r0, r8
 800b43e:	f7ff fee7 	bl	800b210 <_printf_common>
 800b442:	3001      	adds	r0, #1
 800b444:	d14a      	bne.n	800b4dc <_printf_i+0x1f0>
 800b446:	f04f 30ff 	mov.w	r0, #4294967295
 800b44a:	b004      	add	sp, #16
 800b44c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b450:	6823      	ldr	r3, [r4, #0]
 800b452:	f043 0320 	orr.w	r3, r3, #32
 800b456:	6023      	str	r3, [r4, #0]
 800b458:	4832      	ldr	r0, [pc, #200]	@ (800b524 <_printf_i+0x238>)
 800b45a:	2778      	movs	r7, #120	@ 0x78
 800b45c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	6831      	ldr	r1, [r6, #0]
 800b464:	061f      	lsls	r7, r3, #24
 800b466:	f851 5b04 	ldr.w	r5, [r1], #4
 800b46a:	d402      	bmi.n	800b472 <_printf_i+0x186>
 800b46c:	065f      	lsls	r7, r3, #25
 800b46e:	bf48      	it	mi
 800b470:	b2ad      	uxthmi	r5, r5
 800b472:	6031      	str	r1, [r6, #0]
 800b474:	07d9      	lsls	r1, r3, #31
 800b476:	bf44      	itt	mi
 800b478:	f043 0320 	orrmi.w	r3, r3, #32
 800b47c:	6023      	strmi	r3, [r4, #0]
 800b47e:	b11d      	cbz	r5, 800b488 <_printf_i+0x19c>
 800b480:	2310      	movs	r3, #16
 800b482:	e7ad      	b.n	800b3e0 <_printf_i+0xf4>
 800b484:	4826      	ldr	r0, [pc, #152]	@ (800b520 <_printf_i+0x234>)
 800b486:	e7e9      	b.n	800b45c <_printf_i+0x170>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	f023 0320 	bic.w	r3, r3, #32
 800b48e:	6023      	str	r3, [r4, #0]
 800b490:	e7f6      	b.n	800b480 <_printf_i+0x194>
 800b492:	4616      	mov	r6, r2
 800b494:	e7bd      	b.n	800b412 <_printf_i+0x126>
 800b496:	6833      	ldr	r3, [r6, #0]
 800b498:	6825      	ldr	r5, [r4, #0]
 800b49a:	6961      	ldr	r1, [r4, #20]
 800b49c:	1d18      	adds	r0, r3, #4
 800b49e:	6030      	str	r0, [r6, #0]
 800b4a0:	062e      	lsls	r6, r5, #24
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	d501      	bpl.n	800b4aa <_printf_i+0x1be>
 800b4a6:	6019      	str	r1, [r3, #0]
 800b4a8:	e002      	b.n	800b4b0 <_printf_i+0x1c4>
 800b4aa:	0668      	lsls	r0, r5, #25
 800b4ac:	d5fb      	bpl.n	800b4a6 <_printf_i+0x1ba>
 800b4ae:	8019      	strh	r1, [r3, #0]
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	6123      	str	r3, [r4, #16]
 800b4b4:	4616      	mov	r6, r2
 800b4b6:	e7bc      	b.n	800b432 <_printf_i+0x146>
 800b4b8:	6833      	ldr	r3, [r6, #0]
 800b4ba:	1d1a      	adds	r2, r3, #4
 800b4bc:	6032      	str	r2, [r6, #0]
 800b4be:	681e      	ldr	r6, [r3, #0]
 800b4c0:	6862      	ldr	r2, [r4, #4]
 800b4c2:	2100      	movs	r1, #0
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	f7f4 ff2b 	bl	8000320 <memchr>
 800b4ca:	b108      	cbz	r0, 800b4d0 <_printf_i+0x1e4>
 800b4cc:	1b80      	subs	r0, r0, r6
 800b4ce:	6060      	str	r0, [r4, #4]
 800b4d0:	6863      	ldr	r3, [r4, #4]
 800b4d2:	6123      	str	r3, [r4, #16]
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4da:	e7aa      	b.n	800b432 <_printf_i+0x146>
 800b4dc:	6923      	ldr	r3, [r4, #16]
 800b4de:	4632      	mov	r2, r6
 800b4e0:	4649      	mov	r1, r9
 800b4e2:	4640      	mov	r0, r8
 800b4e4:	47d0      	blx	sl
 800b4e6:	3001      	adds	r0, #1
 800b4e8:	d0ad      	beq.n	800b446 <_printf_i+0x15a>
 800b4ea:	6823      	ldr	r3, [r4, #0]
 800b4ec:	079b      	lsls	r3, r3, #30
 800b4ee:	d413      	bmi.n	800b518 <_printf_i+0x22c>
 800b4f0:	68e0      	ldr	r0, [r4, #12]
 800b4f2:	9b03      	ldr	r3, [sp, #12]
 800b4f4:	4298      	cmp	r0, r3
 800b4f6:	bfb8      	it	lt
 800b4f8:	4618      	movlt	r0, r3
 800b4fa:	e7a6      	b.n	800b44a <_printf_i+0x15e>
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	4632      	mov	r2, r6
 800b500:	4649      	mov	r1, r9
 800b502:	4640      	mov	r0, r8
 800b504:	47d0      	blx	sl
 800b506:	3001      	adds	r0, #1
 800b508:	d09d      	beq.n	800b446 <_printf_i+0x15a>
 800b50a:	3501      	adds	r5, #1
 800b50c:	68e3      	ldr	r3, [r4, #12]
 800b50e:	9903      	ldr	r1, [sp, #12]
 800b510:	1a5b      	subs	r3, r3, r1
 800b512:	42ab      	cmp	r3, r5
 800b514:	dcf2      	bgt.n	800b4fc <_printf_i+0x210>
 800b516:	e7eb      	b.n	800b4f0 <_printf_i+0x204>
 800b518:	2500      	movs	r5, #0
 800b51a:	f104 0619 	add.w	r6, r4, #25
 800b51e:	e7f5      	b.n	800b50c <_printf_i+0x220>
 800b520:	0800b9bd 	.word	0x0800b9bd
 800b524:	0800b9ce 	.word	0x0800b9ce

0800b528 <memmove>:
 800b528:	4288      	cmp	r0, r1
 800b52a:	b510      	push	{r4, lr}
 800b52c:	eb01 0402 	add.w	r4, r1, r2
 800b530:	d902      	bls.n	800b538 <memmove+0x10>
 800b532:	4284      	cmp	r4, r0
 800b534:	4623      	mov	r3, r4
 800b536:	d807      	bhi.n	800b548 <memmove+0x20>
 800b538:	1e43      	subs	r3, r0, #1
 800b53a:	42a1      	cmp	r1, r4
 800b53c:	d008      	beq.n	800b550 <memmove+0x28>
 800b53e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b542:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b546:	e7f8      	b.n	800b53a <memmove+0x12>
 800b548:	4402      	add	r2, r0
 800b54a:	4601      	mov	r1, r0
 800b54c:	428a      	cmp	r2, r1
 800b54e:	d100      	bne.n	800b552 <memmove+0x2a>
 800b550:	bd10      	pop	{r4, pc}
 800b552:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b556:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b55a:	e7f7      	b.n	800b54c <memmove+0x24>

0800b55c <_sbrk_r>:
 800b55c:	b538      	push	{r3, r4, r5, lr}
 800b55e:	4d06      	ldr	r5, [pc, #24]	@ (800b578 <_sbrk_r+0x1c>)
 800b560:	2300      	movs	r3, #0
 800b562:	4604      	mov	r4, r0
 800b564:	4608      	mov	r0, r1
 800b566:	602b      	str	r3, [r5, #0]
 800b568:	f7f6 ffd4 	bl	8002514 <_sbrk>
 800b56c:	1c43      	adds	r3, r0, #1
 800b56e:	d102      	bne.n	800b576 <_sbrk_r+0x1a>
 800b570:	682b      	ldr	r3, [r5, #0]
 800b572:	b103      	cbz	r3, 800b576 <_sbrk_r+0x1a>
 800b574:	6023      	str	r3, [r4, #0]
 800b576:	bd38      	pop	{r3, r4, r5, pc}
 800b578:	24000da8 	.word	0x24000da8

0800b57c <_realloc_r>:
 800b57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b580:	4607      	mov	r7, r0
 800b582:	4614      	mov	r4, r2
 800b584:	460d      	mov	r5, r1
 800b586:	b921      	cbnz	r1, 800b592 <_realloc_r+0x16>
 800b588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b58c:	4611      	mov	r1, r2
 800b58e:	f7ff bc5b 	b.w	800ae48 <_malloc_r>
 800b592:	b92a      	cbnz	r2, 800b5a0 <_realloc_r+0x24>
 800b594:	f7ff fbec 	bl	800ad70 <_free_r>
 800b598:	4625      	mov	r5, r4
 800b59a:	4628      	mov	r0, r5
 800b59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a0:	f000 f81a 	bl	800b5d8 <_malloc_usable_size_r>
 800b5a4:	4284      	cmp	r4, r0
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	d802      	bhi.n	800b5b0 <_realloc_r+0x34>
 800b5aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b5ae:	d8f4      	bhi.n	800b59a <_realloc_r+0x1e>
 800b5b0:	4621      	mov	r1, r4
 800b5b2:	4638      	mov	r0, r7
 800b5b4:	f7ff fc48 	bl	800ae48 <_malloc_r>
 800b5b8:	4680      	mov	r8, r0
 800b5ba:	b908      	cbnz	r0, 800b5c0 <_realloc_r+0x44>
 800b5bc:	4645      	mov	r5, r8
 800b5be:	e7ec      	b.n	800b59a <_realloc_r+0x1e>
 800b5c0:	42b4      	cmp	r4, r6
 800b5c2:	4622      	mov	r2, r4
 800b5c4:	4629      	mov	r1, r5
 800b5c6:	bf28      	it	cs
 800b5c8:	4632      	movcs	r2, r6
 800b5ca:	f7ff fbc3 	bl	800ad54 <memcpy>
 800b5ce:	4629      	mov	r1, r5
 800b5d0:	4638      	mov	r0, r7
 800b5d2:	f7ff fbcd 	bl	800ad70 <_free_r>
 800b5d6:	e7f1      	b.n	800b5bc <_realloc_r+0x40>

0800b5d8 <_malloc_usable_size_r>:
 800b5d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5dc:	1f18      	subs	r0, r3, #4
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	bfbc      	itt	lt
 800b5e2:	580b      	ldrlt	r3, [r1, r0]
 800b5e4:	18c0      	addlt	r0, r0, r3
 800b5e6:	4770      	bx	lr

0800b5e8 <_init>:
 800b5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ea:	bf00      	nop
 800b5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ee:	bc08      	pop	{r3}
 800b5f0:	469e      	mov	lr, r3
 800b5f2:	4770      	bx	lr

0800b5f4 <_fini>:
 800b5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f6:	bf00      	nop
 800b5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5fa:	bc08      	pop	{r3}
 800b5fc:	469e      	mov	lr, r3
 800b5fe:	4770      	bx	lr
